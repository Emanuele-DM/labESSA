
LAB05_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a56c  0800a56c  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a574  0800a574  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a574  0800a574  0001a574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800a57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000144  0800a6c0  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800a6c0  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034d70  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038bc  00000000  00000000  00054ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002508  00000000  00000000  000587a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0005aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da9  00000000  00000000  0005d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6e3  00000000  00000000  00075e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec3b  00000000  00000000  00095544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013417f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a594  00000000  00000000  001341d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000144 	.word	0x20000144
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4e0 	.word	0x0800a4e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000148 	.word	0x20000148
 80001dc:	0800a4e0 	.word	0x0800a4e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fbf3 	bl	8005d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8bb 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9c5 	bl	8000914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f999 	bl	80008c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800058e:	f000 f921 	bl	80007d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4853      	ldr	r0, [pc, #332]	; (80006e4 <main+0x16c>)
 8000596:	f007 fdf7 	bl	8008188 <HAL_TIM_OC_Start_IT>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800059a:	2102      	movs	r1, #2
 800059c:	2001      	movs	r0, #1
 800059e:	f005 f851 	bl	8005644 <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 80005a2:	2102      	movs	r1, #2
 80005a4:	2001      	movs	r0, #1
 80005a6:	f005 f949 	bl	800583c <IKS01A3_MOTION_SENSOR_Enable>
  filtered_accelero_axes.x = 0;
 80005aa:	4b4f      	ldr	r3, [pc, #316]	; (80006e8 <main+0x170>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  filtered_accelero_axes.y = 0;
 80005b0:	4b4d      	ldr	r3, [pc, #308]	; (80006e8 <main+0x170>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  filtered_accelero_axes.z = 0;
 80005b6:	4b4c      	ldr	r3, [pc, #304]	; (80006e8 <main+0x170>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  for (int i = 0; i < 5; ++i) {
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e00e      	b.n	80005e0 <main+0x68>
      // Set the entire structure to zero
      memset(&circular_buffer[i], 0, sizeof(circular_buffer[i]));
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4a47      	ldr	r2, [pc, #284]	; (80006ec <main+0x174>)
 80005ce:	4413      	add	r3, r2
 80005d0:	220c      	movs	r2, #12
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f009 fb5b 	bl	8009c90 <memset>
  for (int i = 0; i < 5; ++i) {
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	dded      	ble.n	80005c2 <main+0x4a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time_to_read == 1){
 80005e6:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <main+0x178>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d1fb      	bne.n	80005e6 <main+0x6e>
		  time_to_read = 0;
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <main+0x178>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &circular_buffer[0]);
 80005f4:	4a3d      	ldr	r2, [pc, #244]	; (80006ec <main+0x174>)
 80005f6:	2102      	movs	r1, #2
 80005f8:	2001      	movs	r0, #1
 80005fa:	f005 f961 	bl	80058c0 <IKS01A3_MOTION_SENSOR_GetAxes>
		  for (int i = 0; i<5; ++i){
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	e02b      	b.n	800065c <main+0xe4>
			  filtered_accelero_axes.x += circular_buffer[i].x;
 8000604:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <main+0x170>)
 8000606:	6819      	ldr	r1, [r3, #0]
 8000608:	4838      	ldr	r0, [pc, #224]	; (80006ec <main+0x174>)
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4403      	add	r3, r0
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	440b      	add	r3, r1
 800061a:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <main+0x170>)
 800061c:	6013      	str	r3, [r2, #0]
			  filtered_accelero_axes.y += circular_buffer[i].y;
 800061e:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <main+0x170>)
 8000620:	6859      	ldr	r1, [r3, #4]
 8000622:	4832      	ldr	r0, [pc, #200]	; (80006ec <main+0x174>)
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4403      	add	r3, r0
 8000630:	3304      	adds	r3, #4
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	440b      	add	r3, r1
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <main+0x170>)
 8000638:	6053      	str	r3, [r2, #4]
			  filtered_accelero_axes.z += circular_buffer[i].z;
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <main+0x170>)
 800063c:	6899      	ldr	r1, [r3, #8]
 800063e:	482b      	ldr	r0, [pc, #172]	; (80006ec <main+0x174>)
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4403      	add	r3, r0
 800064c:	3308      	adds	r3, #8
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	440b      	add	r3, r1
 8000652:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <main+0x170>)
 8000654:	6093      	str	r3, [r2, #8]
		  for (int i = 0; i<5; ++i){
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	3301      	adds	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	2b04      	cmp	r3, #4
 8000660:	ddd0      	ble.n	8000604 <main+0x8c>
		  }
		  filtered_accelero_axes.x /= 5;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0x170>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <main+0x17c>)
 8000668:	fb82 1203 	smull	r1, r2, r2, r3
 800066c:	1052      	asrs	r2, r2, #1
 800066e:	17db      	asrs	r3, r3, #31
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <main+0x170>)
 8000674:	6013      	str	r3, [r2, #0]
		  filtered_accelero_axes.y /= 5;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0x170>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <main+0x17c>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1052      	asrs	r2, r2, #1
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <main+0x170>)
 8000688:	6053      	str	r3, [r2, #4]
		  filtered_accelero_axes.z /= 5;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <main+0x170>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <main+0x17c>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	1052      	asrs	r2, r2, #1
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <main+0x170>)
 800069c:	6093      	str	r3, [r2, #8]
		  for (int j = 4; j > 0; --j) {
 800069e:	2304      	movs	r3, #4
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e015      	b.n	80006d0 <main+0x158>
			  memcpy(&circular_buffer[j-1], &circular_buffer[j], sizeof(circular_buffer[j]));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <main+0x174>)
 80006b2:	1898      	adds	r0, r3, r2
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <main+0x174>)
 80006c0:	4413      	add	r3, r2
 80006c2:	220c      	movs	r2, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	f009 fad5 	bl	8009c74 <memcpy>
		  for (int j = 4; j > 0; --j) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dce6      	bgt.n	80006a4 <main+0x12c>
		  }
//		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, &magneto_axes);
//		  transmitSensorData(&gyro_axes, "Gyro");
		  transmitSensorData(filtered_accelero_axes, "Accelero");
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <main+0x170>)
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <main+0x180>)
 80006da:	ca07      	ldmia	r2, {r0, r1, r2}
 80006dc:	f000 f99c 	bl	8000a18 <transmitSensorData>
	  if (time_to_read == 1){
 80006e0:	e781      	b.n	80005e6 <main+0x6e>
 80006e2:	bf00      	nop
 80006e4:	200002c8 	.word	0x200002c8
 80006e8:	20000258 	.word	0x20000258
 80006ec:	20000310 	.word	0x20000310
 80006f0:	20000160 	.word	0x20000160
 80006f4:	66666667 	.word	0x66666667
 80006f8:	0800a4f8 	.word	0x0800a4f8

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f009 fac0 	bl	8009c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <SystemClock_Config+0xd0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <SystemClock_Config+0xd0>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd4>)
 800074a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800077e:	2307      	movs	r3, #7
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4618      	mov	r0, r3
 8000788:	f006 ffe2 	bl	8007750 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000792:	f000 f967 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f007 fa44 	bl	8007c40 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007be:	f000 f951 	bl	8000a64 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <MX_TIM3_Init+0xe4>)
 8000806:	4a2d      	ldr	r2, [pc, #180]	; (80008bc <MX_TIM3_Init+0xe8>)
 8000808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_TIM3_Init+0xe4>)
 800080c:	f240 3247 	movw	r2, #839	; 0x347
 8000810:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <MX_TIM3_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_TIM3_Init+0xe4>)
 800081a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800081e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_TIM3_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_TIM3_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082c:	4822      	ldr	r0, [pc, #136]	; (80008b8 <MX_TIM3_Init+0xe4>)
 800082e:	f007 fc03 	bl	8008038 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000838:	f000 f914 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000846:	4619      	mov	r1, r3
 8000848:	481b      	ldr	r0, [pc, #108]	; (80008b8 <MX_TIM3_Init+0xe4>)
 800084a:	f007 feff 	bl	800864c <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000854:	f000 f906 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000858:	4817      	ldr	r0, [pc, #92]	; (80008b8 <MX_TIM3_Init+0xe4>)
 800085a:	f007 fc3c 	bl	80080d6 <HAL_TIM_OC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000864:	f000 f8fe 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4619      	mov	r1, r3
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <MX_TIM3_Init+0xe4>)
 8000878:	f008 faa4 	bl	8008dc4 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000882:	f000 f8ef 	bl	8000a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 800088a:	f240 13f3 	movw	r3, #499	; 0x1f3
 800088e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_TIM3_Init+0xe4>)
 80008a0:	f007 fe78 	bl	8008594 <HAL_TIM_OC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80008aa:	f000 f8db 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3738      	adds	r7, #56	; 0x38
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200002c8 	.word	0x200002c8
 80008bc:	40000400 	.word	0x40000400

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f8:	f008 fae6 	bl	8008ec8 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f8af 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000034c 	.word	0x2000034c
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <MX_GPIO_Init+0xd0>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2120      	movs	r1, #32
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <MX_GPIO_Init+0xd4>)
 80009a0:	f005 fe84 	bl	80066ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_GPIO_Init+0xd8>)
 80009bc:	f005 fc0e 	bl	80061dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c0:	2320      	movs	r3, #32
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0xd4>)
 80009d8:	f005 fc00 	bl	80061dc <HAL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020800 	.word	0x40020800

080009f0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	time_to_read = 1;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009fe:	2120      	movs	r1, #32
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000a02:	f005 fe6c 	bl	80066de <HAL_GPIO_TogglePin>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000160 	.word	0x20000160
 8000a14:	40020000 	.word	0x40020000

08000a18 <transmitSensorData>:

void transmitSensorData(IKS01A3_MOTION_SENSOR_Axes_t sensor_axes, const char *sensorName){
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	1d3c      	adds	r4, r7, #4
 8000a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a24:	603b      	str	r3, [r7, #0]
	uint8_t length = sprintf(msg, "%s X:%ld, Y:%ld, Z:%ld\n\r",
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	460b      	mov	r3, r1
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <transmitSensorData+0x40>)
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <transmitSensorData+0x44>)
 8000a38:	f009 f932 	bl	8009ca0 <siprintf>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	75fb      	strb	r3, [r7, #23]
			sensorName, sensor_axes.x, sensor_axes.y, sensor_axes.z);
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	4905      	ldr	r1, [pc, #20]	; (8000a5c <transmitSensorData+0x44>)
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <transmitSensorData+0x48>)
 8000a4a:	f008 fa8a 	bl	8008f62 <HAL_UART_Transmit_IT>
}
 8000a4e:	bf00      	nop
 8000a50:	371c      	adds	r7, #28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	0800a504 	.word	0x0800a504
 8000a5c:	20000264 	.word	0x20000264
 8000a60:	2000034c 	.word	0x2000034c

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aae:	2007      	movs	r0, #7
 8000ab0:	f005 fac0 	bl	8006034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d115      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_TIM_Base_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <HAL_TIM_Base_MspInit+0x4c>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_TIM_Base_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	201d      	movs	r0, #29
 8000af4:	f005 faa9 	bl	800604a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000af8:	201d      	movs	r0, #29
 8000afa:	f005 fac2 	bl	8006082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_UART_MspInit+0x94>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d133      	bne.n	8000b9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_UART_MspInit+0x98>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_UART_MspInit+0x9c>)
 8000b86:	f005 fb29 	bl	80061dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2026      	movs	r0, #38	; 0x26
 8000b90:	f005 fa5b 	bl	800604a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b94:	2026      	movs	r0, #38	; 0x26
 8000b96:	f005 fa74 	bl	8006082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f005 f906 	bl	8005e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <TIM3_IRQHandler+0x10>)
 8000c0a:	f007 fbbb 	bl	8008384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200002c8 	.word	0x200002c8

08000c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <USART2_IRQHandler+0x10>)
 8000c1e:	f008 f9e5 	bl	8008fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000034c 	.word	0x2000034c

08000c2c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <BSP_I2C1_Init+0x58>)
 8000c38:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <BSP_I2C1_Init+0x5c>)
 8000c3a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <BSP_I2C1_Init+0x60>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	4912      	ldr	r1, [pc, #72]	; (8000c8c <BSP_I2C1_Init+0x60>)
 8000c44:	600a      	str	r2, [r1, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d117      	bne.n	8000c7a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <BSP_I2C1_Init+0x58>)
 8000c4c:	f006 fa0a 	bl	8007064 <HAL_I2C_GetState>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d111      	bne.n	8000c7a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c56:	480b      	ldr	r0, [pc, #44]	; (8000c84 <BSP_I2C1_Init+0x58>)
 8000c58:	f000 f8e2 	bl	8000e20 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10b      	bne.n	8000c7a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <BSP_I2C1_Init+0x58>)
 8000c64:	f000 f8a8 	bl	8000db8 <MX_I2C1_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c6e:	f06f 0307 	mvn.w	r3, #7
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	e001      	b.n	8000c7a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c7a:	687b      	ldr	r3, [r7, #4]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000390 	.word	0x20000390
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	20000164 	.word	0x20000164

08000c90 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <BSP_I2C1_DeInit+0x48>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d014      	beq.n	8000ccc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <BSP_I2C1_DeInit+0x48>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <BSP_I2C1_DeInit+0x48>)
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <BSP_I2C1_DeInit+0x48>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10b      	bne.n	8000ccc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <BSP_I2C1_DeInit+0x4c>)
 8000cb6:	f000 f8fd 	bl	8000eb4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <BSP_I2C1_DeInit+0x4c>)
 8000cbc:	f005 fe6e 	bl	800699c <HAL_I2C_DeInit>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000cc6:	f06f 0307 	mvn.w	r3, #7
 8000cca:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000164 	.word	0x20000164
 8000cdc:	20000390 	.word	0x20000390

08000ce0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af04      	add	r7, sp, #16
 8000ce6:	60ba      	str	r2, [r7, #8]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	81fb      	strh	r3, [r7, #14]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	81bb      	strh	r3, [r7, #12]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000cfa:	89ba      	ldrh	r2, [r7, #12]
 8000cfc:	89f9      	ldrh	r1, [r7, #14]
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <BSP_I2C1_WriteReg+0x60>)
 8000d10:	f005 fe88 	bl	8006a24 <HAL_I2C_Mem_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00c      	beq.n	8000d34 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <BSP_I2C1_WriteReg+0x60>)
 8000d1c:	f006 f9b0 	bl	8007080 <HAL_I2C_GetError>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d103      	bne.n	8000d2e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d26:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e002      	b.n	8000d34 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d2e:	f06f 0303 	mvn.w	r3, #3
 8000d32:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d34:	697b      	ldr	r3, [r7, #20]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000390 	.word	0x20000390

08000d44 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	60ba      	str	r2, [r7, #8]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	460b      	mov	r3, r1
 8000d54:	81bb      	strh	r3, [r7, #12]
 8000d56:	4613      	mov	r3, r2
 8000d58:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d5e:	89ba      	ldrh	r2, [r7, #12]
 8000d60:	89f9      	ldrh	r1, [r7, #14]
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2301      	movs	r3, #1
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <BSP_I2C1_ReadReg+0x60>)
 8000d74:	f005 ff50 	bl	8006c18 <HAL_I2C_Mem_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00c      	beq.n	8000d98 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d7e:	4809      	ldr	r0, [pc, #36]	; (8000da4 <BSP_I2C1_ReadReg+0x60>)
 8000d80:	f006 f97e 	bl	8007080 <HAL_I2C_GetError>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d103      	bne.n	8000d92 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d8a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e002      	b.n	8000d98 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d92:	f06f 0303 	mvn.w	r3, #3
 8000d96:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d98:	697b      	ldr	r3, [r7, #20]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000390 	.word	0x20000390

08000da8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000dac:	f005 f842 	bl	8005e34 <HAL_GetTick>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <MX_I2C1_Init+0x60>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <MX_I2C1_Init+0x64>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000de2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f005 fc89 	bl	8006714 <HAL_I2C_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	00061a80 	.word	0x00061a80

08000e20 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <I2C1_MspInit+0x8c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <I2C1_MspInit+0x8c>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <I2C1_MspInit+0x8c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4a:	2312      	movs	r3, #18
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e56:	2304      	movs	r3, #4
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <I2C1_MspInit+0x90>)
 8000e62:	f005 f9bb 	bl	80061dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <I2C1_MspInit+0x90>)
 8000e84:	f005 f9aa 	bl	80061dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <I2C1_MspInit+0x8c>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <I2C1_MspInit+0x8c>)
 8000e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <I2C1_MspInit+0x8c>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <I2C1_MspDeInit+0x30>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <I2C1_MspDeInit+0x30>)
 8000ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <I2C1_MspDeInit+0x34>)
 8000ece:	f005 fb09 	bl	80064e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <I2C1_MspDeInit+0x34>)
 8000ed8:	f005 fb04 	bl	80064e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020400 	.word	0x40020400

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f008 fe80 	bl	8009c20 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20018000 	.word	0x20018000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	20000168 	.word	0x20000168
 8000f54:	20000408 	.word	0x20000408

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd7 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f008 fe3f 	bl	8009c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fae3 	bl	8000578 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000fc0:	0800a57c 	.word	0x0800a57c
  ldr r2, =_sbss
 8000fc4:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000fc8:	20000404 	.word	0x20000404

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>
	...

08000fd0 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d103      	bne.n	8000fec <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e051      	b.n	8001090 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	7b1a      	ldrb	r2, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a1d      	ldr	r2, [pc, #116]	; (800109c <LIS2DW12_RegisterBusIO+0xcc>)
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <LIS2DW12_RegisterBusIO+0xd0>)
 800102e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	69da      	ldr	r2, [r3, #28]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e020      	b.n	8001090 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4798      	blx	r3
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e016      	b.n	8001090 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d112      	bne.n	8001090 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10d      	bne.n	8001090 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001074:	2305      	movs	r3, #5
 8001076:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	461a      	mov	r2, r3
 800107c:	2121      	movs	r1, #33	; 0x21
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fd87 	bl	8001b92 <LIS2DW12_Write_Reg>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08001f25 	.word	0x08001f25
 80010a0:	08001f5b 	.word	0x08001f5b

080010a4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3320      	adds	r3, #32
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fa94 	bl	80025e0 <lis2dw12_auto_increment_set>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e04b      	b.n	800115c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3320      	adds	r3, #32
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 f9a8 	bl	8002420 <lis2dw12_block_data_update_set>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e03f      	b.n	800115c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3320      	adds	r3, #32
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 faa2 	bl	800262c <lis2dw12_fifo_mode_set>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e033      	b.n	800115c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3320      	adds	r3, #32
 80010f8:	2104      	movs	r1, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 ff78 	bl	8001ff0 <lis2dw12_power_mode_set>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e027      	b.n	800115c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <LIS2DW12_Init+0xc0>)
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3320      	adds	r3, #32
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f869 	bl	8002200 <lis2dw12_data_rate_set>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	e010      	b.n	800115c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3320      	adds	r3, #32
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f001 f993 	bl	800246c <lis2dw12_full_scale_set>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	e004      	b.n	800115c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	42c80000 	.word	0x42c80000

08001168 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f888 	bl	8001286 <LIS2DW12_ACC_Disable>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	e010      	b.n	80011a4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3320      	adds	r3, #32
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 f9fe 	bl	80025be <lis2dw12_device_id_get>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	e000      	b.n	80011d0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2210      	movs	r2, #16
 8001204:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <LIS2DW12_GetCapabilities+0x58>)
 8001218:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	44c80000 	.word	0x44c80000

08001234 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e019      	b.n	800127e <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800125c:	461a      	mov	r2, r3
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fcb0 	bl	8001bc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e004      	b.n	800127e <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	e010      	b.n	80012be <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3320      	adds	r3, #32
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 ffac 	bl	8002200 <lis2dw12_data_rate_set>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e004      	b.n	80012be <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3320      	adds	r3, #32
 80012da:	f107 020b 	add.w	r2, r7, #11
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 f8e9 	bl	80024b8 <lis2dw12_full_scale_get>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	e0a0      	b.n	8001434 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3320      	adds	r3, #32
 80012f6:	f107 020a 	add.w	r2, r7, #10
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fec5 	bl	800208c <lis2dw12_power_mode_get>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	e092      	b.n	8001434 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	2b1b      	cmp	r3, #27
 8001312:	f200 8087 	bhi.w	8001424 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <LIS2DW12_ACC_GetSensitivity+0x54>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800138d 	.word	0x0800138d
 8001320:	080013d9 	.word	0x080013d9
 8001324:	080013d9 	.word	0x080013d9
 8001328:	080013d9 	.word	0x080013d9
 800132c:	080013d9 	.word	0x080013d9
 8001330:	08001425 	.word	0x08001425
 8001334:	08001425 	.word	0x08001425
 8001338:	08001425 	.word	0x08001425
 800133c:	0800138d 	.word	0x0800138d
 8001340:	080013d9 	.word	0x080013d9
 8001344:	080013d9 	.word	0x080013d9
 8001348:	080013d9 	.word	0x080013d9
 800134c:	08001425 	.word	0x08001425
 8001350:	08001425 	.word	0x08001425
 8001354:	08001425 	.word	0x08001425
 8001358:	08001425 	.word	0x08001425
 800135c:	0800138d 	.word	0x0800138d
 8001360:	080013d9 	.word	0x080013d9
 8001364:	080013d9 	.word	0x080013d9
 8001368:	080013d9 	.word	0x080013d9
 800136c:	080013d9 	.word	0x080013d9
 8001370:	08001425 	.word	0x08001425
 8001374:	08001425 	.word	0x08001425
 8001378:	08001425 	.word	0x08001425
 800137c:	0800138d 	.word	0x0800138d
 8001380:	080013d9 	.word	0x080013d9
 8001384:	080013d9 	.word	0x080013d9
 8001388:	080013d9 	.word	0x080013d9
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d81a      	bhi.n	80013c8 <LIS2DW12_ACC_GetSensitivity+0x100>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013b1 	.word	0x080013b1
 80013a0:	080013b9 	.word	0x080013b9
 80013a4:	080013c1 	.word	0x080013c1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4a24      	ldr	r2, [pc, #144]	; (800143c <LIS2DW12_ACC_GetSensitivity+0x174>)
 80013ac:	601a      	str	r2, [r3, #0]
          break;
 80013ae:	e012      	b.n	80013d6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80013b4:	601a      	str	r2, [r3, #0]
          break;
 80013b6:	e00e      	b.n	80013d6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80013bc:	601a      	str	r2, [r3, #0]
          break;
 80013be:	e00a      	b.n	80013d6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <LIS2DW12_ACC_GetSensitivity+0x180>)
 80013c4:	601a      	str	r2, [r3, #0]
          break;
 80013c6:	e006      	b.n	80013d6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <LIS2DW12_ACC_GetSensitivity+0x184>)
 80013cc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	60fb      	str	r3, [r7, #12]
          break;
 80013d4:	bf00      	nop
      }
      break;
 80013d6:	e02c      	b.n	8001432 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d81a      	bhi.n	8001414 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	080013fd 	.word	0x080013fd
 80013ec:	08001405 	.word	0x08001405
 80013f0:	0800140d 	.word	0x0800140d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4a16      	ldr	r2, [pc, #88]	; (8001450 <LIS2DW12_ACC_GetSensitivity+0x188>)
 80013f8:	601a      	str	r2, [r3, #0]
          break;
 80013fa:	e012      	b.n	8001422 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4a15      	ldr	r2, [pc, #84]	; (8001454 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001400:	601a      	str	r2, [r3, #0]
          break;
 8001402:	e00e      	b.n	8001422 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4a0d      	ldr	r2, [pc, #52]	; (800143c <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001408:	601a      	str	r2, [r3, #0]
          break;
 800140a:	e00a      	b.n	8001422 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001410:	601a      	str	r2, [r3, #0]
          break;
 8001412:	e006      	b.n	8001422 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4a0d      	ldr	r2, [pc, #52]	; (800144c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001418:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	60fb      	str	r3, [r7, #12]
          break;
 8001420:	bf00      	nop
      }
      break;
 8001422:	e006      	b.n	8001432 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001428:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	60fb      	str	r3, [r7, #12]
      break;
 8001430:	bf00      	nop
  }

  return ret;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	3f79db23 	.word	0x3f79db23
 8001440:	3ff9db23 	.word	0x3ff9db23
 8001444:	4079db23 	.word	0x4079db23
 8001448:	40f9db23 	.word	0x40f9db23
 800144c:	bf800000 	.word	0xbf800000
 8001450:	3e79db23 	.word	0x3e79db23
 8001454:	3ef9db23 	.word	0x3ef9db23

08001458 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3320      	adds	r3, #32
 800146a:	f107 020b 	add.w	r2, r7, #11
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 ff0b 	bl	800228c <lis2dw12_data_rate_get>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	e1d4      	b.n	800182c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3320      	adds	r3, #32
 8001486:	f107 020a 	add.w	r2, r7, #10
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fdfd 	bl	800208c <lis2dw12_power_mode_get>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	e1c6      	b.n	800182c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	2b32      	cmp	r3, #50	; 0x32
 80014a2:	f200 81bb 	bhi.w	800181c <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	08001579 	.word	0x08001579
 80014b0:	08001583 	.word	0x08001583
 80014b4:	08001621 	.word	0x08001621
 80014b8:	08001629 	.word	0x08001629
 80014bc:	08001631 	.word	0x08001631
 80014c0:	08001639 	.word	0x08001639
 80014c4:	08001641 	.word	0x08001641
 80014c8:	08001649 	.word	0x08001649
 80014cc:	080016e5 	.word	0x080016e5
 80014d0:	08001781 	.word	0x08001781
 80014d4:	0800181d 	.word	0x0800181d
 80014d8:	0800181d 	.word	0x0800181d
 80014dc:	0800181d 	.word	0x0800181d
 80014e0:	0800181d 	.word	0x0800181d
 80014e4:	0800181d 	.word	0x0800181d
 80014e8:	0800181d 	.word	0x0800181d
 80014ec:	0800181d 	.word	0x0800181d
 80014f0:	0800181d 	.word	0x0800181d
 80014f4:	08001579 	.word	0x08001579
 80014f8:	0800181d 	.word	0x0800181d
 80014fc:	0800181d 	.word	0x0800181d
 8001500:	0800181d 	.word	0x0800181d
 8001504:	0800181d 	.word	0x0800181d
 8001508:	0800181d 	.word	0x0800181d
 800150c:	0800181d 	.word	0x0800181d
 8001510:	0800181d 	.word	0x0800181d
 8001514:	0800181d 	.word	0x0800181d
 8001518:	0800181d 	.word	0x0800181d
 800151c:	0800181d 	.word	0x0800181d
 8001520:	0800181d 	.word	0x0800181d
 8001524:	0800181d 	.word	0x0800181d
 8001528:	0800181d 	.word	0x0800181d
 800152c:	0800181d 	.word	0x0800181d
 8001530:	0800181d 	.word	0x0800181d
 8001534:	0800181d 	.word	0x0800181d
 8001538:	0800181d 	.word	0x0800181d
 800153c:	0800181d 	.word	0x0800181d
 8001540:	0800181d 	.word	0x0800181d
 8001544:	0800181d 	.word	0x0800181d
 8001548:	0800181d 	.word	0x0800181d
 800154c:	0800181d 	.word	0x0800181d
 8001550:	0800181d 	.word	0x0800181d
 8001554:	0800181d 	.word	0x0800181d
 8001558:	0800181d 	.word	0x0800181d
 800155c:	0800181d 	.word	0x0800181d
 8001560:	0800181d 	.word	0x0800181d
 8001564:	0800181d 	.word	0x0800181d
 8001568:	0800181d 	.word	0x0800181d
 800156c:	0800181d 	.word	0x0800181d
 8001570:	0800181d 	.word	0x0800181d
 8001574:	08001579 	.word	0x08001579
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
      break;
 8001580:	e153      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001582:	7abb      	ldrb	r3, [r7, #10]
 8001584:	2b1b      	cmp	r3, #27
 8001586:	d843      	bhi.n	8001610 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	08001609 	.word	0x08001609
 8001594:	08001609 	.word	0x08001609
 8001598:	08001609 	.word	0x08001609
 800159c:	08001609 	.word	0x08001609
 80015a0:	08001601 	.word	0x08001601
 80015a4:	08001611 	.word	0x08001611
 80015a8:	08001611 	.word	0x08001611
 80015ac:	08001611 	.word	0x08001611
 80015b0:	08001609 	.word	0x08001609
 80015b4:	08001609 	.word	0x08001609
 80015b8:	08001609 	.word	0x08001609
 80015bc:	08001609 	.word	0x08001609
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001611 	.word	0x08001611
 80015c8:	08001611 	.word	0x08001611
 80015cc:	08001611 	.word	0x08001611
 80015d0:	08001609 	.word	0x08001609
 80015d4:	08001609 	.word	0x08001609
 80015d8:	08001609 	.word	0x08001609
 80015dc:	08001609 	.word	0x08001609
 80015e0:	08001601 	.word	0x08001601
 80015e4:	08001611 	.word	0x08001611
 80015e8:	08001611 	.word	0x08001611
 80015ec:	08001611 	.word	0x08001611
 80015f0:	08001609 	.word	0x08001609
 80015f4:	08001609 	.word	0x08001609
 80015f8:	08001609 	.word	0x08001609
 80015fc:	08001609 	.word	0x08001609
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4a8c      	ldr	r2, [pc, #560]	; (8001834 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001604:	601a      	str	r2, [r3, #0]
          break;
 8001606:	e00a      	b.n	800161e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4a8b      	ldr	r2, [pc, #556]	; (8001838 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 800160c:	601a      	str	r2, [r3, #0]
          break;
 800160e:	e006      	b.n	800161e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	4a8a      	ldr	r2, [pc, #552]	; (800183c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001614:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	60fb      	str	r3, [r7, #12]
          break;
 800161c:	bf00      	nop
      }
      break;
 800161e:	e104      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4a84      	ldr	r2, [pc, #528]	; (8001834 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001624:	601a      	str	r2, [r3, #0]
      break;
 8001626:	e100      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4a85      	ldr	r2, [pc, #532]	; (8001840 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 800162c:	601a      	str	r2, [r3, #0]
      break;
 800162e:	e0fc      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4a84      	ldr	r2, [pc, #528]	; (8001844 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8001634:	601a      	str	r2, [r3, #0]
      break;
 8001636:	e0f8      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4a83      	ldr	r2, [pc, #524]	; (8001848 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 800163c:	601a      	str	r2, [r3, #0]
      break;
 800163e:	e0f4      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4a82      	ldr	r2, [pc, #520]	; (800184c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001644:	601a      	str	r2, [r3, #0]
      break;
 8001646:	e0f0      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001648:	7abb      	ldrb	r3, [r7, #10]
 800164a:	2b1b      	cmp	r3, #27
 800164c:	d842      	bhi.n	80016d4 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 800164e:	a201      	add	r2, pc, #4	; (adr r2, 8001654 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001654:	080016cd 	.word	0x080016cd
 8001658:	080016cd 	.word	0x080016cd
 800165c:	080016cd 	.word	0x080016cd
 8001660:	080016cd 	.word	0x080016cd
 8001664:	080016c5 	.word	0x080016c5
 8001668:	080016d5 	.word	0x080016d5
 800166c:	080016d5 	.word	0x080016d5
 8001670:	080016d5 	.word	0x080016d5
 8001674:	080016cd 	.word	0x080016cd
 8001678:	080016cd 	.word	0x080016cd
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016cd 	.word	0x080016cd
 8001684:	080016d5 	.word	0x080016d5
 8001688:	080016d5 	.word	0x080016d5
 800168c:	080016d5 	.word	0x080016d5
 8001690:	080016d5 	.word	0x080016d5
 8001694:	080016cd 	.word	0x080016cd
 8001698:	080016cd 	.word	0x080016cd
 800169c:	080016cd 	.word	0x080016cd
 80016a0:	080016cd 	.word	0x080016cd
 80016a4:	080016c5 	.word	0x080016c5
 80016a8:	080016d5 	.word	0x080016d5
 80016ac:	080016d5 	.word	0x080016d5
 80016b0:	080016d5 	.word	0x080016d5
 80016b4:	080016cd 	.word	0x080016cd
 80016b8:	080016cd 	.word	0x080016cd
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016cd 	.word	0x080016cd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4a62      	ldr	r2, [pc, #392]	; (8001850 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80016c8:	601a      	str	r2, [r3, #0]
          break;
 80016ca:	e00a      	b.n	80016e2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4a5f      	ldr	r2, [pc, #380]	; (800184c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80016d0:	601a      	str	r2, [r3, #0]
          break;
 80016d2:	e006      	b.n	80016e2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4a59      	ldr	r2, [pc, #356]	; (800183c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80016d8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	60fb      	str	r3, [r7, #12]
          break;
 80016e0:	bf00      	nop
      }
      break;
 80016e2:	e0a2      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80016e4:	7abb      	ldrb	r3, [r7, #10]
 80016e6:	2b1b      	cmp	r3, #27
 80016e8:	d842      	bhi.n	8001770 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	08001769 	.word	0x08001769
 80016f4:	08001769 	.word	0x08001769
 80016f8:	08001769 	.word	0x08001769
 80016fc:	08001769 	.word	0x08001769
 8001700:	08001761 	.word	0x08001761
 8001704:	08001771 	.word	0x08001771
 8001708:	08001771 	.word	0x08001771
 800170c:	08001771 	.word	0x08001771
 8001710:	08001769 	.word	0x08001769
 8001714:	08001769 	.word	0x08001769
 8001718:	08001769 	.word	0x08001769
 800171c:	08001769 	.word	0x08001769
 8001720:	08001771 	.word	0x08001771
 8001724:	08001771 	.word	0x08001771
 8001728:	08001771 	.word	0x08001771
 800172c:	08001771 	.word	0x08001771
 8001730:	08001769 	.word	0x08001769
 8001734:	08001769 	.word	0x08001769
 8001738:	08001769 	.word	0x08001769
 800173c:	08001769 	.word	0x08001769
 8001740:	08001761 	.word	0x08001761
 8001744:	08001771 	.word	0x08001771
 8001748:	08001771 	.word	0x08001771
 800174c:	08001771 	.word	0x08001771
 8001750:	08001769 	.word	0x08001769
 8001754:	08001769 	.word	0x08001769
 8001758:	08001769 	.word	0x08001769
 800175c:	08001769 	.word	0x08001769
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8001764:	601a      	str	r2, [r3, #0]
          break;
 8001766:	e00a      	b.n	800177e <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4a38      	ldr	r2, [pc, #224]	; (800184c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800176c:	601a      	str	r2, [r3, #0]
          break;
 800176e:	e006      	b.n	800177e <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4a32      	ldr	r2, [pc, #200]	; (800183c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001774:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	60fb      	str	r3, [r7, #12]
          break;
 800177c:	bf00      	nop
      }
      break;
 800177e:	e054      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001780:	7abb      	ldrb	r3, [r7, #10]
 8001782:	2b1b      	cmp	r3, #27
 8001784:	d842      	bhi.n	800180c <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	08001805 	.word	0x08001805
 8001790:	08001805 	.word	0x08001805
 8001794:	08001805 	.word	0x08001805
 8001798:	08001805 	.word	0x08001805
 800179c:	080017fd 	.word	0x080017fd
 80017a0:	0800180d 	.word	0x0800180d
 80017a4:	0800180d 	.word	0x0800180d
 80017a8:	0800180d 	.word	0x0800180d
 80017ac:	08001805 	.word	0x08001805
 80017b0:	08001805 	.word	0x08001805
 80017b4:	08001805 	.word	0x08001805
 80017b8:	08001805 	.word	0x08001805
 80017bc:	0800180d 	.word	0x0800180d
 80017c0:	0800180d 	.word	0x0800180d
 80017c4:	0800180d 	.word	0x0800180d
 80017c8:	0800180d 	.word	0x0800180d
 80017cc:	08001805 	.word	0x08001805
 80017d0:	08001805 	.word	0x08001805
 80017d4:	08001805 	.word	0x08001805
 80017d8:	08001805 	.word	0x08001805
 80017dc:	080017fd 	.word	0x080017fd
 80017e0:	0800180d 	.word	0x0800180d
 80017e4:	0800180d 	.word	0x0800180d
 80017e8:	0800180d 	.word	0x0800180d
 80017ec:	08001805 	.word	0x08001805
 80017f0:	08001805 	.word	0x08001805
 80017f4:	08001805 	.word	0x08001805
 80017f8:	08001805 	.word	0x08001805
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4a16      	ldr	r2, [pc, #88]	; (8001858 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8001800:	601a      	str	r2, [r3, #0]
          break;
 8001802:	e00a      	b.n	800181a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001808:	601a      	str	r2, [r3, #0]
          break;
 800180a:	e006      	b.n	800181a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001810:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	60fb      	str	r3, [r7, #12]
          break;
 8001818:	bf00      	nop
      }
      break;
 800181a:	e006      	b.n	800182a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001820:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	60fb      	str	r3, [r7, #12]
      break;
 8001828:	bf00      	nop
  }

  return ret;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	41480000 	.word	0x41480000
 8001838:	3fcccccd 	.word	0x3fcccccd
 800183c:	bf800000 	.word	0xbf800000
 8001840:	41c80000 	.word	0x41c80000
 8001844:	42480000 	.word	0x42480000
 8001848:	42c80000 	.word	0x42c80000
 800184c:	43480000 	.word	0x43480000
 8001850:	43c80000 	.word	0x43c80000
 8001854:	44480000 	.word	0x44480000
 8001858:	44c80000 	.word	0x44c80000

0800185c <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	ed97 0a00 	vldr	s0, [r7]
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f805 	bl	8001880 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8001876:	4603      	mov	r3, r0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	ed87 0a02 	vstr	s0, [r7, #8]
 800188c:	460b      	mov	r3, r1
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	4613      	mov	r3, r2
 8001892:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800189a:	2b01      	cmp	r3, #1
 800189c:	d109      	bne.n	80018b2 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800189e:	79ba      	ldrb	r2, [r7, #6]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4619      	mov	r1, r3
 80018a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f98d 	bl	8001bc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80018ae:	4603      	mov	r3, r0
 80018b0:	e008      	b.n	80018c4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80018b2:	79ba      	ldrb	r2, [r7, #6]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4619      	mov	r1, r3
 80018b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fa9f 	bl	8001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80018c2:	4603      	mov	r3, r0
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3320      	adds	r3, #32
 80018de:	f107 020b 	add.w	r2, r7, #11
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fde7 	bl	80024b8 <lis2dw12_full_scale_get>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	e027      	b.n	8001946 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80018f6:	7afb      	ldrb	r3, [r7, #11]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d81b      	bhi.n	8001934 <LIS2DW12_ACC_GetFullScale+0x68>
 80018fc:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <LIS2DW12_ACC_GetFullScale+0x38>)
 80018fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001902:	bf00      	nop
 8001904:	08001915 	.word	0x08001915
 8001908:	0800191d 	.word	0x0800191d
 800190c:	08001925 	.word	0x08001925
 8001910:	0800192d 	.word	0x0800192d
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
      break;
 800191a:	e013      	b.n	8001944 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2204      	movs	r2, #4
 8001920:	601a      	str	r2, [r3, #0]
      break;
 8001922:	e00f      	b.n	8001944 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2208      	movs	r2, #8
 8001928:	601a      	str	r2, [r3, #0]
      break;
 800192a:	e00b      	b.n	8001944 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2210      	movs	r2, #16
 8001930:	601a      	str	r2, [r3, #0]
      break;
 8001932:	e007      	b.n	8001944 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	60fb      	str	r3, [r7, #12]
      break;
 8001942:	bf00      	nop
  }

  return ret;
 8001944:	68fb      	ldr	r3, [r7, #12]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop

08001950 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b02      	cmp	r3, #2
 800195e:	dd0b      	ble.n	8001978 <LIS2DW12_ACC_SetFullScale+0x28>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b04      	cmp	r3, #4
 8001964:	dd06      	ble.n	8001974 <LIS2DW12_ACC_SetFullScale+0x24>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b08      	cmp	r3, #8
 800196a:	dc01      	bgt.n	8001970 <LIS2DW12_ACC_SetFullScale+0x20>
 800196c:	2302      	movs	r3, #2
 800196e:	e004      	b.n	800197a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001970:	2303      	movs	r3, #3
 8001972:	e002      	b.n	800197a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001978:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800197a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3320      	adds	r3, #32
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fd71 	bl	800246c <lis2dw12_full_scale_set>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	e000      	b.n	8001998 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3320      	adds	r3, #32
 80019b2:	f107 020b 	add.w	r2, r7, #11
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fb67 	bl	800208c <lis2dw12_power_mode_get>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	e089      	b.n	8001ade <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3320      	adds	r3, #32
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fda7 	bl	8002528 <lis2dw12_acceleration_raw_get>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	e07b      	b.n	8001ade <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 80019e6:	7afb      	ldrb	r3, [r7, #11]
 80019e8:	2b1b      	cmp	r3, #27
 80019ea:	d873      	bhi.n	8001ad4 <LIS2DW12_ACC_GetAxesRaw+0x134>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a65 	.word	0x08001a65
 80019f8:	08001a9d 	.word	0x08001a9d
 80019fc:	08001a9d 	.word	0x08001a9d
 8001a00:	08001a9d 	.word	0x08001a9d
 8001a04:	08001a9d 	.word	0x08001a9d
 8001a08:	08001ad5 	.word	0x08001ad5
 8001a0c:	08001ad5 	.word	0x08001ad5
 8001a10:	08001ad5 	.word	0x08001ad5
 8001a14:	08001a65 	.word	0x08001a65
 8001a18:	08001a9d 	.word	0x08001a9d
 8001a1c:	08001a9d 	.word	0x08001a9d
 8001a20:	08001a9d 	.word	0x08001a9d
 8001a24:	08001ad5 	.word	0x08001ad5
 8001a28:	08001ad5 	.word	0x08001ad5
 8001a2c:	08001ad5 	.word	0x08001ad5
 8001a30:	08001ad5 	.word	0x08001ad5
 8001a34:	08001a65 	.word	0x08001a65
 8001a38:	08001a9d 	.word	0x08001a9d
 8001a3c:	08001a9d 	.word	0x08001a9d
 8001a40:	08001a9d 	.word	0x08001a9d
 8001a44:	08001a9d 	.word	0x08001a9d
 8001a48:	08001ad5 	.word	0x08001ad5
 8001a4c:	08001ad5 	.word	0x08001ad5
 8001a50:	08001ad5 	.word	0x08001ad5
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a9d 	.word	0x08001a9d
 8001a5c:	08001a9d 	.word	0x08001a9d
 8001a60:	08001a9d 	.word	0x08001a9d
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001a64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da00      	bge.n	8001a6e <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001a6c:	330f      	adds	r3, #15
 8001a6e:	111b      	asrs	r3, r3, #4
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da00      	bge.n	8001a80 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001a7e:	330f      	adds	r3, #15
 8001a80:	111b      	asrs	r3, r3, #4
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001a88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da00      	bge.n	8001a92 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001a90:	330f      	adds	r3, #15
 8001a92:	111b      	asrs	r3, r3, #4
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	809a      	strh	r2, [r3, #4]
      break;
 8001a9a:	e01f      	b.n	8001adc <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001a9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da00      	bge.n	8001aa6 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	109b      	asrs	r3, r3, #2
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da00      	bge.n	8001ab8 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	109b      	asrs	r3, r3, #2
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001ac0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da00      	bge.n	8001aca <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8001ac8:	3303      	adds	r3, #3
 8001aca:	109b      	asrs	r3, r3, #2
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	809a      	strh	r2, [r3, #4]
      break;
 8001ad2:	e003      	b.n	8001adc <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	617b      	str	r3, [r7, #20]
      break;
 8001ada:	bf00      	nop
  }

  return ret;
 8001adc:	697b      	ldr	r3, [r7, #20]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop

08001ae8 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff4e 	bl	80019a0 <LIS2DW12_ACC_GetAxesRaw>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e03c      	b.n	8001b8a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fbd6 	bl	80012c8 <LIS2DW12_ACC_GetSensitivity>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e030      	b.n	8001b8a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001b28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b40:	ee17 2a90 	vmov	r2, s15
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 2a90 	vmov	r2, s15
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001b68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b80:	ee17 2a90 	vmov	r2, s15
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f103 0020 	add.w	r0, r3, #32
 8001ba8:	1cba      	adds	r2, r7, #2
 8001baa:	78f9      	ldrb	r1, [r7, #3]
 8001bac:	2301      	movs	r3, #1
 8001bae:	f000 fa07 	bl	8001fc0 <lis2dw12_write_reg>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	e000      	b.n	8001bc0 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d80b      	bhi.n	8001bfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001be4:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	08001c29 	.word	0x08001c29
 8001bf0:	08001c55 	.word	0x08001c55
 8001bf4:	08001c81 	.word	0x08001c81
 8001bf8:	08001cad 	.word	0x08001cad
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d002      	beq.n	8001c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001c02:	2304      	movs	r3, #4
 8001c04:	75fb      	strb	r3, [r7, #23]
          break;
 8001c06:	e002      	b.n	8001c0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001c08:	2314      	movs	r3, #20
 8001c0a:	75fb      	strb	r3, [r7, #23]
          break;
 8001c0c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8001c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c12:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	d400      	bmi.n	8001c22 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001c20:	e05a      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001c24:	60bb      	str	r3, [r7, #8]
      break;
 8001c26:	e057      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d002      	beq.n	8001c34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	75fb      	strb	r3, [r7, #23]
          break;
 8001c32:	e002      	b.n	8001c3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001c34:	2313      	movs	r3, #19
 8001c36:	75fb      	strb	r3, [r7, #23]
          break;
 8001c38:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c3e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001de4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dc00      	bgt.n	8001c4e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001c4c:	e044      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c4e:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c50:	60bb      	str	r3, [r7, #8]
      break;
 8001c52:	e041      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d002      	beq.n	8001c60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8001c5e:	e002      	b.n	8001c66 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001c60:	2312      	movs	r3, #18
 8001c62:	75fb      	strb	r3, [r7, #23]
          break;
 8001c64:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001de4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	dc00      	bgt.n	8001c7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001c78:	e02e      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c7c:	60bb      	str	r3, [r7, #8]
      break;
 8001c7e:	e02b      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d002      	beq.n	8001c8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
          break;
 8001c8a:	e002      	b.n	8001c92 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001c8c:	2311      	movs	r3, #17
 8001c8e:	75fb      	strb	r3, [r7, #23]
          break;
 8001c90:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c96:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001de4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	dc00      	bgt.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001ca4:	e018      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001ca6:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001ca8:	60bb      	str	r3, [r7, #8]
      break;
 8001caa:	e015      	b.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d002      	beq.n	8001cb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8001cb6:	e002      	b.n	8001cbe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001cb8:	2310      	movs	r3, #16
 8001cba:	75fb      	strb	r3, [r7, #23]
          break;
 8001cbc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001de4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	dc00      	bgt.n	8001cd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001cd0:	e001      	b.n	8001cd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001cd2:	4b45      	ldr	r3, [pc, #276]	; (8001de8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001cd4:	60bb      	str	r3, [r7, #8]
      break;
 8001cd6:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cdc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001dec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d801      	bhi.n	8001cee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e04d      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d801      	bhi.n	8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e042      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d08:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	d801      	bhi.n	8001d1a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e037      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d1e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001df0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	d801      	bhi.n	8001d30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e02c      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d34:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001df4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d801      	bhi.n	8001d46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e021      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d4a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001de4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d801      	bhi.n	8001d5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001d58:	2306      	movs	r3, #6
 8001d5a:	e016      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d60:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001df8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	d801      	bhi.n	8001d72 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e00b      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d76:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001dfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	d801      	bhi.n	8001d88 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001d84:	2308      	movs	r3, #8
 8001d86:	e000      	b.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d88:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001d8a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3320      	adds	r3, #32
 8001d90:	7dba      	ldrb	r2, [r7, #22]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fa33 	bl	8002200 <lis2dw12_data_rate_set>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e018      	b.n	8001dd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3320      	adds	r3, #32
 8001daa:	7dfa      	ldrb	r2, [r7, #23]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f91e 	bl	8001ff0 <lis2dw12_power_mode_set>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e00b      	b.n	8001dd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	79ba      	ldrb	r2, [r7, #6]
 8001dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	41480000 	.word	0x41480000
 8001de4:	43480000 	.word	0x43480000
 8001de8:	43480000 	.word	0x43480000
 8001dec:	3fcccccd 	.word	0x3fcccccd
 8001df0:	42480000 	.word	0x42480000
 8001df4:	42c80000 	.word	0x42c80000
 8001df8:	43c80000 	.word	0x43c80000
 8001dfc:	44480000 	.word	0x44480000

08001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	79ba      	ldrb	r2, [r7, #6]
 8001e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e28:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ee8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d801      	bhi.n	8001e3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001e38:	e04d      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e3e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4a:	d801      	bhi.n	8001e50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001e4e:	e042      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e54:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d801      	bhi.n	8001e66 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001e64:	e037      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001e66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001ef8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d801      	bhi.n	8001e7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001e7a:	e02c      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e80:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001f00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d801      	bhi.n	8001e92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001e90:	e021      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e96:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d801      	bhi.n	8001ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001ea6:	e016      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb8:	d801      	bhi.n	8001ebe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001ebc:	e00b      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001ebe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ec2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001f18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	d801      	bhi.n	8001ed4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001ed2:	e000      	b.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	3fcccccd 	.word	0x3fcccccd
 8001eec:	3fcccccd 	.word	0x3fcccccd
 8001ef0:	41480000 	.word	0x41480000
 8001ef4:	41c80000 	.word	0x41c80000
 8001ef8:	42480000 	.word	0x42480000
 8001efc:	42480000 	.word	0x42480000
 8001f00:	42c80000 	.word	0x42c80000
 8001f04:	42c80000 	.word	0x42c80000
 8001f08:	43480000 	.word	0x43480000
 8001f0c:	43480000 	.word	0x43480000
 8001f10:	43c80000 	.word	0x43c80000
 8001f14:	43c80000 	.word	0x43c80000
 8001f18:	44480000 	.word	0x44480000
 8001f1c:	44480000 	.word	0x44480000
 8001f20:	44c80000 	.word	0x44c80000

08001f24 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	460b      	mov	r3, r1
 8001f32:	72fb      	strb	r3, [r7, #11]
 8001f34:	4613      	mov	r3, r2
 8001f36:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	695c      	ldr	r4, [r3, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	7b1b      	ldrb	r3, [r3, #12]
 8001f44:	b298      	uxth	r0, r3
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	893b      	ldrh	r3, [r7, #8]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	47a0      	blx	r4
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}

08001f5a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f5a:	b590      	push	{r4, r7, lr}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	461a      	mov	r2, r3
 8001f66:	460b      	mov	r3, r1
 8001f68:	72fb      	strb	r3, [r7, #11]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	691c      	ldr	r4, [r3, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	7b1b      	ldrb	r3, [r3, #12]
 8001f7a:	b298      	uxth	r0, r3
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	893b      	ldrh	r3, [r7, #8]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	47a0      	blx	r4
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}

08001f90 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	72fb      	strb	r3, [r7, #11]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685c      	ldr	r4, [r3, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68d8      	ldr	r0, [r3, #12]
 8001fac:	893b      	ldrh	r3, [r7, #8]
 8001fae:	7af9      	ldrb	r1, [r7, #11]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	47a0      	blx	r4
 8001fb4:	6178      	str	r0, [r7, #20]

  return ret;
 8001fb6:	697b      	ldr	r3, [r7, #20]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}

08001fc0 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	72fb      	strb	r3, [r7, #11]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681c      	ldr	r4, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68d8      	ldr	r0, [r3, #12]
 8001fdc:	893b      	ldrh	r3, [r7, #8]
 8001fde:	7af9      	ldrb	r1, [r7, #11]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	47a0      	blx	r4
 8001fe4:	6178      	str	r0, [r7, #20]

  return ret;
 8001fe6:	697b      	ldr	r3, [r7, #20]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd90      	pop	{r4, r7, pc}

08001ff0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001ffc:	f107 0210 	add.w	r2, r7, #16
 8002000:	2301      	movs	r3, #1
 8002002:	2120      	movs	r1, #32
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ffc3 	bl	8001f90 <lis2dw12_read_reg>
 800200a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	b2da      	uxtb	r2, r3
 800201c:	7c3b      	ldrb	r3, [r7, #16]
 800201e:	f362 0383 	bfi	r3, r2, #2, #2
 8002022:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	b2da      	uxtb	r2, r3
 800202c:	7c3b      	ldrb	r3, [r7, #16]
 800202e:	f362 0301 	bfi	r3, r2, #0, #2
 8002032:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002034:	f107 0210 	add.w	r2, r7, #16
 8002038:	2301      	movs	r3, #1
 800203a:	2120      	movs	r1, #32
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ffbf 	bl	8001fc0 <lis2dw12_write_reg>
 8002042:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800204a:	f107 020c 	add.w	r2, r7, #12
 800204e:	2301      	movs	r3, #1
 8002050:	2125      	movs	r1, #37	; 0x25
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff9c 	bl	8001f90 <lis2dw12_read_reg>
 8002058:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d110      	bne.n	8002082 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	7b3b      	ldrb	r3, [r7, #12]
 800206c:	f362 0382 	bfi	r3, r2, #2, #1
 8002070:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002072:	f107 020c 	add.w	r2, r7, #12
 8002076:	2301      	movs	r3, #1
 8002078:	2125      	movs	r1, #37	; 0x25
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffa0 	bl	8001fc0 <lis2dw12_write_reg>
 8002080:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002082:	697b      	ldr	r3, [r7, #20]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002096:	f107 0210 	add.w	r2, r7, #16
 800209a:	2301      	movs	r3, #1
 800209c:	2120      	movs	r1, #32
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff76 	bl	8001f90 <lis2dw12_read_reg>
 80020a4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 80a3 	bne.w	80021f4 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80020ae:	f107 020c 	add.w	r2, r7, #12
 80020b2:	2301      	movs	r3, #1
 80020b4:	2125      	movs	r1, #37	; 0x25
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff6a 	bl	8001f90 <lis2dw12_read_reg>
 80020bc:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80020be:	7b3b      	ldrb	r3, [r7, #12]
 80020c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	011a      	lsls	r2, r3, #4
 80020c8:	7c3b      	ldrb	r3, [r7, #16]
 80020ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80020d4:	7c3a      	ldrb	r2, [r7, #16]
 80020d6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80020da:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80020dc:	4413      	add	r3, r2
 80020de:	2b1b      	cmp	r3, #27
 80020e0:	f200 8084 	bhi.w	80021ec <lis2dw12_power_mode_get+0x160>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <lis2dw12_power_mode_get+0x60>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	0800217d 	.word	0x0800217d
 80020f0:	08002175 	.word	0x08002175
 80020f4:	0800216d 	.word	0x0800216d
 80020f8:	08002165 	.word	0x08002165
 80020fc:	0800215d 	.word	0x0800215d
 8002100:	080021ed 	.word	0x080021ed
 8002104:	080021ed 	.word	0x080021ed
 8002108:	080021ed 	.word	0x080021ed
 800210c:	0800219d 	.word	0x0800219d
 8002110:	08002195 	.word	0x08002195
 8002114:	0800218d 	.word	0x0800218d
 8002118:	08002185 	.word	0x08002185
 800211c:	080021ed 	.word	0x080021ed
 8002120:	080021ed 	.word	0x080021ed
 8002124:	080021ed 	.word	0x080021ed
 8002128:	080021ed 	.word	0x080021ed
 800212c:	080021c5 	.word	0x080021c5
 8002130:	080021bd 	.word	0x080021bd
 8002134:	080021b5 	.word	0x080021b5
 8002138:	080021ad 	.word	0x080021ad
 800213c:	080021a5 	.word	0x080021a5
 8002140:	080021ed 	.word	0x080021ed
 8002144:	080021ed 	.word	0x080021ed
 8002148:	080021ed 	.word	0x080021ed
 800214c:	080021e5 	.word	0x080021e5
 8002150:	080021dd 	.word	0x080021dd
 8002154:	080021d5 	.word	0x080021d5
 8002158:	080021cd 	.word	0x080021cd
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2204      	movs	r2, #4
 8002160:	701a      	strb	r2, [r3, #0]
        break;
 8002162:	e048      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2203      	movs	r2, #3
 8002168:	701a      	strb	r2, [r3, #0]
        break;
 800216a:	e044      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
        break;
 8002172:	e040      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
        break;
 800217a:	e03c      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
        break;
 8002182:	e038      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	220b      	movs	r2, #11
 8002188:	701a      	strb	r2, [r3, #0]
        break;
 800218a:	e034      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	220a      	movs	r2, #10
 8002190:	701a      	strb	r2, [r3, #0]
        break;
 8002192:	e030      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2209      	movs	r2, #9
 8002198:	701a      	strb	r2, [r3, #0]
        break;
 800219a:	e02c      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2208      	movs	r2, #8
 80021a0:	701a      	strb	r2, [r3, #0]
        break;
 80021a2:	e028      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2214      	movs	r2, #20
 80021a8:	701a      	strb	r2, [r3, #0]
        break;
 80021aa:	e024      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2213      	movs	r2, #19
 80021b0:	701a      	strb	r2, [r3, #0]
        break;
 80021b2:	e020      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2212      	movs	r2, #18
 80021b8:	701a      	strb	r2, [r3, #0]
        break;
 80021ba:	e01c      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2211      	movs	r2, #17
 80021c0:	701a      	strb	r2, [r3, #0]
        break;
 80021c2:	e018      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2210      	movs	r2, #16
 80021c8:	701a      	strb	r2, [r3, #0]
        break;
 80021ca:	e014      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	221b      	movs	r2, #27
 80021d0:	701a      	strb	r2, [r3, #0]
        break;
 80021d2:	e010      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	221a      	movs	r2, #26
 80021d8:	701a      	strb	r2, [r3, #0]
        break;
 80021da:	e00c      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2219      	movs	r2, #25
 80021e0:	701a      	strb	r2, [r3, #0]
        break;
 80021e2:	e008      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2218      	movs	r2, #24
 80021e8:	701a      	strb	r2, [r3, #0]
        break;
 80021ea:	e004      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	701a      	strb	r2, [r3, #0]
        break;
 80021f2:	e000      	b.n	80021f6 <lis2dw12_power_mode_get+0x16a>
    }
  }
 80021f4:	bf00      	nop

  return ret;
 80021f6:	697b      	ldr	r3, [r7, #20]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800220c:	f107 0210 	add.w	r2, r7, #16
 8002210:	2301      	movs	r3, #1
 8002212:	2120      	movs	r1, #32
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff febb 	bl	8001f90 <lis2dw12_read_reg>
 800221a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	7c3b      	ldrb	r3, [r7, #16]
 800222c:	f362 1307 	bfi	r3, r2, #4, #4
 8002230:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002232:	f107 0210 	add.w	r2, r7, #16
 8002236:	2301      	movs	r3, #1
 8002238:	2120      	movs	r1, #32
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fec0 	bl	8001fc0 <lis2dw12_write_reg>
 8002240:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002248:	f107 020c 	add.w	r2, r7, #12
 800224c:	2301      	movs	r3, #1
 800224e:	2122      	movs	r1, #34	; 0x22
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fe9d 	bl	8001f90 <lis2dw12_read_reg>
 8002256:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d110      	bne.n	8002280 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	b2da      	uxtb	r2, r3
 8002268:	7b3b      	ldrb	r3, [r7, #12]
 800226a:	f362 0301 	bfi	r3, r2, #0, #2
 800226e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002270:	f107 020c 	add.w	r2, r7, #12
 8002274:	2301      	movs	r3, #1
 8002276:	2122      	movs	r1, #34	; 0x22
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fea1 	bl	8001fc0 <lis2dw12_write_reg>
 800227e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002280:	697b      	ldr	r3, [r7, #20]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002296:	f107 0210 	add.w	r2, r7, #16
 800229a:	2301      	movs	r3, #1
 800229c:	2120      	movs	r1, #32
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fe76 	bl	8001f90 <lis2dw12_read_reg>
 80022a4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 80b3 	bne.w	8002414 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80022ae:	f107 020c 	add.w	r2, r7, #12
 80022b2:	2301      	movs	r3, #1
 80022b4:	2122      	movs	r1, #34	; 0x22
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe6a 	bl	8001f90 <lis2dw12_read_reg>
 80022bc:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80022be:	7b3b      	ldrb	r3, [r7, #12]
 80022c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	7c3a      	ldrb	r2, [r7, #16]
 80022ca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	4413      	add	r3, r2
 80022d2:	2b32      	cmp	r3, #50	; 0x32
 80022d4:	f200 809a 	bhi.w	800240c <lis2dw12_data_rate_get+0x180>
 80022d8:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <lis2dw12_data_rate_get+0x54>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	080023ad 	.word	0x080023ad
 80022e4:	080023b5 	.word	0x080023b5
 80022e8:	080023bd 	.word	0x080023bd
 80022ec:	080023c5 	.word	0x080023c5
 80022f0:	080023cd 	.word	0x080023cd
 80022f4:	080023d5 	.word	0x080023d5
 80022f8:	080023dd 	.word	0x080023dd
 80022fc:	080023e5 	.word	0x080023e5
 8002300:	080023ed 	.word	0x080023ed
 8002304:	080023f5 	.word	0x080023f5
 8002308:	0800240d 	.word	0x0800240d
 800230c:	0800240d 	.word	0x0800240d
 8002310:	0800240d 	.word	0x0800240d
 8002314:	0800240d 	.word	0x0800240d
 8002318:	0800240d 	.word	0x0800240d
 800231c:	0800240d 	.word	0x0800240d
 8002320:	0800240d 	.word	0x0800240d
 8002324:	0800240d 	.word	0x0800240d
 8002328:	08002405 	.word	0x08002405
 800232c:	0800240d 	.word	0x0800240d
 8002330:	0800240d 	.word	0x0800240d
 8002334:	0800240d 	.word	0x0800240d
 8002338:	0800240d 	.word	0x0800240d
 800233c:	0800240d 	.word	0x0800240d
 8002340:	0800240d 	.word	0x0800240d
 8002344:	0800240d 	.word	0x0800240d
 8002348:	0800240d 	.word	0x0800240d
 800234c:	0800240d 	.word	0x0800240d
 8002350:	0800240d 	.word	0x0800240d
 8002354:	0800240d 	.word	0x0800240d
 8002358:	0800240d 	.word	0x0800240d
 800235c:	0800240d 	.word	0x0800240d
 8002360:	0800240d 	.word	0x0800240d
 8002364:	0800240d 	.word	0x0800240d
 8002368:	0800240d 	.word	0x0800240d
 800236c:	0800240d 	.word	0x0800240d
 8002370:	0800240d 	.word	0x0800240d
 8002374:	0800240d 	.word	0x0800240d
 8002378:	0800240d 	.word	0x0800240d
 800237c:	0800240d 	.word	0x0800240d
 8002380:	0800240d 	.word	0x0800240d
 8002384:	0800240d 	.word	0x0800240d
 8002388:	0800240d 	.word	0x0800240d
 800238c:	0800240d 	.word	0x0800240d
 8002390:	0800240d 	.word	0x0800240d
 8002394:	0800240d 	.word	0x0800240d
 8002398:	0800240d 	.word	0x0800240d
 800239c:	0800240d 	.word	0x0800240d
 80023a0:	0800240d 	.word	0x0800240d
 80023a4:	0800240d 	.word	0x0800240d
 80023a8:	080023fd 	.word	0x080023fd
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
        break;
 80023b2:	e030      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
        break;
 80023ba:	e02c      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	701a      	strb	r2, [r3, #0]
        break;
 80023c2:	e028      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2203      	movs	r2, #3
 80023c8:	701a      	strb	r2, [r3, #0]
        break;
 80023ca:	e024      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2204      	movs	r2, #4
 80023d0:	701a      	strb	r2, [r3, #0]
        break;
 80023d2:	e020      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2205      	movs	r2, #5
 80023d8:	701a      	strb	r2, [r3, #0]
        break;
 80023da:	e01c      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2206      	movs	r2, #6
 80023e0:	701a      	strb	r2, [r3, #0]
        break;
 80023e2:	e018      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2207      	movs	r2, #7
 80023e8:	701a      	strb	r2, [r3, #0]
        break;
 80023ea:	e014      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2208      	movs	r2, #8
 80023f0:	701a      	strb	r2, [r3, #0]
        break;
 80023f2:	e010      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2209      	movs	r2, #9
 80023f8:	701a      	strb	r2, [r3, #0]
        break;
 80023fa:	e00c      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2232      	movs	r2, #50	; 0x32
 8002400:	701a      	strb	r2, [r3, #0]
        break;
 8002402:	e008      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2212      	movs	r2, #18
 8002408:	701a      	strb	r2, [r3, #0]
        break;
 800240a:	e004      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
        break;
 8002412:	e000      	b.n	8002416 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8002414:	bf00      	nop

  return ret;
 8002416:	697b      	ldr	r3, [r7, #20]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800242c:	f107 0208 	add.w	r2, r7, #8
 8002430:	2301      	movs	r3, #1
 8002432:	2121      	movs	r1, #33	; 0x21
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fdab 	bl	8001f90 <lis2dw12_read_reg>
 800243a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	7a3b      	ldrb	r3, [r7, #8]
 800244c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002450:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002452:	f107 0208 	add.w	r2, r7, #8
 8002456:	2301      	movs	r3, #1
 8002458:	2121      	movs	r1, #33	; 0x21
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fdb0 	bl	8001fc0 <lis2dw12_write_reg>
 8002460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002478:	f107 0208 	add.w	r2, r7, #8
 800247c:	2301      	movs	r3, #1
 800247e:	2125      	movs	r1, #37	; 0x25
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fd85 	bl	8001f90 <lis2dw12_read_reg>
 8002486:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	b2da      	uxtb	r2, r3
 8002496:	7a3b      	ldrb	r3, [r7, #8]
 8002498:	f362 1305 	bfi	r3, r2, #4, #2
 800249c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800249e:	f107 0208 	add.w	r2, r7, #8
 80024a2:	2301      	movs	r3, #1
 80024a4:	2125      	movs	r1, #37	; 0x25
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fd8a 	bl	8001fc0 <lis2dw12_write_reg>
 80024ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80024c2:	f107 0208 	add.w	r2, r7, #8
 80024c6:	2301      	movs	r3, #1
 80024c8:	2125      	movs	r1, #37	; 0x25
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fd60 	bl	8001f90 <lis2dw12_read_reg>
 80024d0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80024d2:	7a3b      	ldrb	r3, [r7, #8]
 80024d4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d81a      	bhi.n	8002514 <lis2dw12_full_scale_get+0x5c>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <lis2dw12_full_scale_get+0x2c>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	080024fd 	.word	0x080024fd
 80024ec:	08002505 	.word	0x08002505
 80024f0:	0800250d 	.word	0x0800250d
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
      break;
 80024fa:	e00f      	b.n	800251c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
      break;
 8002502:	e00b      	b.n	800251c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]
      break;
 800250a:	e007      	b.n	800251c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2203      	movs	r2, #3
 8002510:	701a      	strb	r2, [r3, #0]
      break;
 8002512:	e003      	b.n	800251c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
      break;
 800251a:	bf00      	nop
  }

  return ret;
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop

08002528 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002532:	f107 020c 	add.w	r2, r7, #12
 8002536:	2306      	movs	r3, #6
 8002538:	2128      	movs	r1, #40	; 0x28
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fd28 	bl	8001f90 <lis2dw12_read_reg>
 8002540:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002542:	7b7b      	ldrb	r3, [r7, #13]
 8002544:	b21a      	sxth	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002550:	b29b      	uxth	r3, r3
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	b29a      	uxth	r2, r3
 8002556:	7b3b      	ldrb	r3, [r7, #12]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4413      	add	r3, r2
 800255c:	b29b      	uxth	r3, r3
 800255e:	b21a      	sxth	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3302      	adds	r3, #2
 800256a:	b212      	sxth	r2, r2
 800256c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3302      	adds	r3, #2
 8002572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002576:	b29b      	uxth	r3, r3
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	b29a      	uxth	r2, r3
 800257c:	7bbb      	ldrb	r3, [r7, #14]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4413      	add	r3, r2
 8002582:	b29a      	uxth	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	3302      	adds	r3, #2
 8002588:	b212      	sxth	r2, r2
 800258a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800258c:	7c7a      	ldrb	r2, [r7, #17]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3304      	adds	r3, #4
 8002592:	b212      	sxth	r2, r2
 8002594:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	3304      	adds	r3, #4
 800259a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	7c3b      	ldrb	r3, [r7, #16]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	3304      	adds	r3, #4
 80025b0:	b212      	sxth	r2, r2
 80025b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80025b4:	697b      	ldr	r3, [r7, #20]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80025c8:	2301      	movs	r3, #1
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	210f      	movs	r1, #15
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fcde 	bl	8001f90 <lis2dw12_read_reg>
 80025d4:	60f8      	str	r0, [r7, #12]

  return ret;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80025ec:	f107 0208 	add.w	r2, r7, #8
 80025f0:	2301      	movs	r3, #1
 80025f2:	2121      	movs	r1, #33	; 0x21
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fccb 	bl	8001f90 <lis2dw12_read_reg>
 80025fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	7a3b      	ldrb	r3, [r7, #8]
 800260c:	f362 0382 	bfi	r3, r2, #2, #1
 8002610:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002612:	f107 0208 	add.w	r2, r7, #8
 8002616:	2301      	movs	r3, #1
 8002618:	2121      	movs	r1, #33	; 0x21
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fcd0 	bl	8001fc0 <lis2dw12_write_reg>
 8002620:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002638:	f107 0208 	add.w	r2, r7, #8
 800263c:	2301      	movs	r3, #1
 800263e:	212e      	movs	r1, #46	; 0x2e
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff fca5 	bl	8001f90 <lis2dw12_read_reg>
 8002646:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	b2da      	uxtb	r2, r3
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	f362 1347 	bfi	r3, r2, #5, #3
 800265c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800265e:	f107 0208 	add.w	r2, r7, #8
 8002662:	2301      	movs	r3, #1
 8002664:	212e      	movs	r1, #46	; 0x2e
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fcaa 	bl	8001fc0 <lis2dw12_write_reg>
 800266c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e067      	b.n	8002764 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	7b1a      	ldrb	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a28      	ldr	r2, [pc, #160]	; (8002770 <LIS2MDL_RegisterBusIO+0xf8>)
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <LIS2MDL_RegisterBusIO+0xfc>)
 80026d6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e036      	b.n	8002764 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4798      	blx	r3
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e02c      	b.n	8002764 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d028      	beq.n	8002764 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002718:	2b00      	cmp	r3, #0
 800271a:	d123      	bne.n	8002764 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10d      	bne.n	8002740 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8002724:	2334      	movs	r3, #52	; 0x34
 8002726:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	461a      	mov	r2, r3
 800272c:	2162      	movs	r1, #98	; 0x62
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fb1b 	bl	8002d6a <LIS2MDL_Write_Reg>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d014      	beq.n	8002764 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e012      	b.n	8002766 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d101      	bne.n	800274c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	e00c      	b.n	8002766 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3320      	adds	r3, #32
 8002750:	2101      	movs	r1, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ff70 	bl	8003638 <lis2mdl_i2c_interface_set>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e000      	b.n	8002766 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8002764:	68fb      	ldr	r3, [r7, #12]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	08002dc1 	.word	0x08002dc1
 8002774:	08002e43 	.word	0x08002e43

08002778 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d144      	bne.n	8002812 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002788:	f107 0208 	add.w	r2, r7, #8
 800278c:	2301      	movs	r3, #1
 800278e:	2162      	movs	r1, #98	; 0x62
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fb97 	bl	8002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	e06c      	b.n	800287c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80027a2:	f107 020c 	add.w	r2, r7, #12
 80027a6:	2301      	movs	r3, #1
 80027a8:	2160      	movs	r1, #96	; 0x60
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fb8a 	bl	8002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e05f      	b.n	800287c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80027bc:	7a3b      	ldrb	r3, [r7, #8]
 80027be:	f043 0310 	orr.w	r3, r3, #16
 80027c2:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80027c4:	7a3b      	ldrb	r3, [r7, #8]
 80027c6:	f36f 0341 	bfc	r3, #1, #1
 80027ca:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80027cc:	7b3b      	ldrb	r3, [r7, #12]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f362 0301 	bfi	r3, r2, #0, #2
 80027d4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80027d6:	7b3b      	ldrb	r3, [r7, #12]
 80027d8:	f043 030c 	orr.w	r3, r3, #12
 80027dc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80027de:	f107 0208 	add.w	r2, r7, #8
 80027e2:	2301      	movs	r3, #1
 80027e4:	2162      	movs	r1, #98	; 0x62
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fcab 	bl	8003142 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e041      	b.n	800287c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80027f8:	f107 020c 	add.w	r2, r7, #12
 80027fc:	2301      	movs	r3, #1
 80027fe:	2160      	movs	r1, #96	; 0x60
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fc9e 	bl	8003142 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d032      	beq.n	8002872 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e034      	b.n	800287c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3320      	adds	r3, #32
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fe65 	bl	80034e8 <lis2mdl_block_data_update_set>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8002824:	f04f 33ff 	mov.w	r3, #4294967295
 8002828:	e028      	b.n	800287c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3320      	adds	r3, #32
 800282e:	2102      	movs	r1, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fdd4 	bl	80033de <lis2mdl_operating_mode_set>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	e01c      	b.n	800287c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3320      	adds	r3, #32
 8002846:	2103      	movs	r1, #3
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fdee 	bl	800342a <lis2mdl_data_rate_set>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	e010      	b.n	800287c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3320      	adds	r3, #32
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fec3 	bl	80035ec <lis2mdl_self_test_set>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	e004      	b.n	800287c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f8a5 	bl	80029dc <LIS2MDL_MAG_Disable>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
 800289c:	e004      	b.n	80028a8 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d10b      	bne.n	80028da <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80028c2:	2301      	movs	r3, #1
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	214f      	movs	r1, #79	; 0x4f
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fafb 	bl	8002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
 80028d8:	e00c      	b.n	80028f4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3320      	adds	r3, #32
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fe72 	bl	80035ca <lis2mdl_device_id_get>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e000      	b.n	80028f4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2201      	movs	r2, #1
 8002916:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2232      	movs	r2, #50	; 0x32
 800292e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4a04      	ldr	r2, [pc, #16]	; (8002954 <LIS2MDL_GetCapabilities+0x58>)
 8002944:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	42c80000 	.word	0x42c80000

08002958 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e032      	b.n	80029d4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d11d      	bne.n	80029b2 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002976:	f107 020c 	add.w	r2, r7, #12
 800297a:	2301      	movs	r3, #1
 800297c:	2160      	movs	r1, #96	; 0x60
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 faa0 	bl	8002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e021      	b.n	80029d4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002990:	7b3b      	ldrb	r3, [r7, #12]
 8002992:	f36f 0301 	bfc	r3, #0, #2
 8002996:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002998:	f107 020c 	add.w	r2, r7, #12
 800299c:	2301      	movs	r3, #1
 800299e:	2160      	movs	r1, #96	; 0x60
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fbce 	bl	8003142 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00e      	beq.n	80029ca <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	e010      	b.n	80029d4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3320      	adds	r3, #32
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fd10 	bl	80033de <lis2mdl_operating_mode_set>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e004      	b.n	80029d4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e033      	b.n	8002a5a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d11e      	bne.n	8002a38 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80029fa:	f107 020c 	add.w	r2, r7, #12
 80029fe:	2301      	movs	r3, #1
 8002a00:	2160      	movs	r1, #96	; 0x60
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa5e 	bl	8002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	e022      	b.n	8002a5a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002a14:	7b3b      	ldrb	r3, [r7, #12]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f362 0301 	bfi	r3, r2, #0, #2
 8002a1c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002a1e:	f107 020c 	add.w	r2, r7, #12
 8002a22:	2301      	movs	r3, #1
 8002a24:	2160      	movs	r1, #96	; 0x60
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fb8b 	bl	8003142 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00e      	beq.n	8002a50 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	e010      	b.n	8002a5a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3320      	adds	r3, #32
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fccd 	bl	80033de <lis2mdl_operating_mode_set>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	e004      	b.n	8002a5a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002a72:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3320      	adds	r3, #32
 8002a96:	f107 020b 	add.w	r2, r7, #11
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fceb 	bl	8003478 <lis2mdl_data_rate_get>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	e023      	b.n	8002af6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d81b      	bhi.n	8002aec <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002ad5 	.word	0x08002ad5
 8002ac4:	08002add 	.word	0x08002add
 8002ac8:	08002ae5 	.word	0x08002ae5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002ad0:	601a      	str	r2, [r3, #0]
      break;
 8002ad2:	e00f      	b.n	8002af4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002ad8:	601a      	str	r2, [r3, #0]
      break;
 8002ada:	e00b      	b.n	8002af4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002ae0:	601a      	str	r2, [r3, #0]
      break;
 8002ae2:	e007      	b.n	8002af4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002ae8:	601a      	str	r2, [r3, #0]
      break;
 8002aea:	e003      	b.n	8002af4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	60fb      	str	r3, [r7, #12]
      break;
 8002af2:	bf00      	nop
  }

  return ret;
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	41200000 	.word	0x41200000
 8002b04:	41a00000 	.word	0x41a00000
 8002b08:	42480000 	.word	0x42480000
 8002b0c:	42c80000 	.word	0x42c80000

08002b10 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002b1c:	edd7 7a00 	vldr	s15, [r7]
 8002b20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	d801      	bhi.n	8002b32 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e016      	b.n	8002b60 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b32:	edd7 7a00 	vldr	s15, [r7]
 8002b36:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	d801      	bhi.n	8002b48 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e00b      	b.n	8002b60 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b48:	edd7 7a00 	vldr	s15, [r7]
 8002b4c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002bd4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	d801      	bhi.n	8002b5e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e000      	b.n	8002b60 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b5e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002b60:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d121      	bne.n	8002bae <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002b6a:	f107 020c 	add.w	r2, r7, #12
 8002b6e:	2301      	movs	r3, #1
 8002b70:	2160      	movs	r1, #96	; 0x60
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f9a6 	bl	8002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b82:	e022      	b.n	8002bca <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	7b3b      	ldrb	r3, [r7, #12]
 8002b8e:	f362 0383 	bfi	r3, r2, #2, #2
 8002b92:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002b94:	f107 020c 	add.w	r2, r7, #12
 8002b98:	2301      	movs	r3, #1
 8002b9a:	2160      	movs	r1, #96	; 0x60
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fad0 	bl	8003142 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00f      	beq.n	8002bc8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	e00d      	b.n	8002bca <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3320      	adds	r3, #32
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fc37 	bl	800342a <lis2mdl_data_rate_set>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	e000      	b.n	8002bca <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	42480000 	.word	0x42480000

08002bd8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2232      	movs	r2, #50	; 0x32
 8002be6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3320      	adds	r3, #32
 8002c1c:	f107 0208 	add.w	r2, r7, #8
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fc86 	bl	8003534 <lis2mdl_magnetic_raw_get>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e00c      	b.n	8002c4e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002c34:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002c3c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b088      	sub	sp, #32
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d137      	bne.n	8002cd8 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002c68:	f107 0218 	add.w	r2, r7, #24
 8002c6c:	2306      	movs	r3, #6
 8002c6e:	2168      	movs	r1, #104	; 0x68
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f927 	bl	8002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8002c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c80:	e06f      	b.n	8002d62 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002c82:	7e7b      	ldrb	r3, [r7, #25]
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002c88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	7e3b      	ldrb	r3, [r7, #24]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8002c9e:	7efb      	ldrb	r3, [r7, #27]
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002ca4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	7ebb      	ldrb	r3, [r7, #26]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002cba:	7f7b      	ldrb	r3, [r7, #29]
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002cc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	7f3b      	ldrb	r3, [r7, #28]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	82bb      	strh	r3, [r7, #20]
 8002cd6:	e00d      	b.n	8002cf4 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3320      	adds	r3, #32
 8002cdc:	f107 0210 	add.w	r2, r7, #16
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fc26 	bl	8003534 <lis2mdl_magnetic_raw_get>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e036      	b.n	8002d62 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff feb1 	bl	8002a62 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d18:	ee17 2a90 	vmov	r2, s15
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d38:	ee17 2a90 	vmov	r2, s15
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d58:	ee17 2a90 	vmov	r2, s15
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	70fb      	strb	r3, [r7, #3]
 8002d76:	4613      	mov	r3, r2
 8002d78:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d10b      	bne.n	8002d9a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002d82:	1cba      	adds	r2, r7, #2
 8002d84:	78f9      	ldrb	r1, [r7, #3]
 8002d86:	2301      	movs	r3, #1
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f9da 	bl	8003142 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	e00e      	b.n	8002db8 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f103 0020 	add.w	r0, r3, #32
 8002da0:	1cba      	adds	r2, r7, #2
 8002da2:	78f9      	ldrb	r1, [r7, #3]
 8002da4:	2301      	movs	r3, #1
 8002da6:	f000 fb02 	bl	80033ae <lis2mdl_write_reg>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	e000      	b.n	8002db8 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	460b      	mov	r3, r1
 8002dce:	72fb      	strb	r3, [r7, #11]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10e      	bne.n	8002dfe <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	695c      	ldr	r4, [r3, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	7b1b      	ldrb	r3, [r3, #12]
 8002de8:	b298      	uxth	r0, r3
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	b299      	uxth	r1, r3
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	47a0      	blx	r4
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	e01d      	b.n	8002e3a <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d10b      	bne.n	8002e1e <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	695c      	ldr	r4, [r3, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	7b1b      	ldrb	r3, [r3, #12]
 8002e0e:	b298      	uxth	r0, r3
 8002e10:	7afb      	ldrb	r3, [r7, #11]
 8002e12:	b299      	uxth	r1, r3
 8002e14:	893b      	ldrh	r3, [r7, #8]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	47a0      	blx	r4
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	e00d      	b.n	8002e3a <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	695c      	ldr	r4, [r3, #20]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	7b1b      	ldrb	r3, [r3, #12]
 8002e26:	b298      	uxth	r0, r3
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	b299      	uxth	r1, r3
 8002e32:	893b      	ldrh	r3, [r7, #8]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	47a0      	blx	r4
 8002e38:	4603      	mov	r3, r0
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}

08002e42 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e42:	b590      	push	{r4, r7, lr}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	460b      	mov	r3, r1
 8002e50:	72fb      	strb	r3, [r7, #11]
 8002e52:	4613      	mov	r3, r2
 8002e54:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	691c      	ldr	r4, [r3, #16]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	7b1b      	ldrb	r3, [r3, #12]
 8002e6a:	b298      	uxth	r0, r3
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	b299      	uxth	r1, r3
 8002e76:	893b      	ldrh	r3, [r7, #8]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	47a0      	blx	r4
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	e01d      	b.n	8002ebc <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d10b      	bne.n	8002ea0 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	691c      	ldr	r4, [r3, #16]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	7b1b      	ldrb	r3, [r3, #12]
 8002e90:	b298      	uxth	r0, r3
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	b299      	uxth	r1, r3
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	47a0      	blx	r4
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	e00d      	b.n	8002ebc <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	691c      	ldr	r4, [r3, #16]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	7b1b      	ldrb	r3, [r3, #12]
 8002ea8:	b298      	uxth	r0, r3
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	b299      	uxth	r1, r3
 8002eb4:	893b      	ldrh	r3, [r7, #8]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	47a0      	blx	r4
 8002eba:	4603      	mov	r3, r0
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	72fb      	strb	r3, [r7, #11]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002eea:	233d      	movs	r3, #61	; 0x3d
 8002eec:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002eee:	2315      	movs	r3, #21
 8002ef0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002ef4:	2316      	movs	r3, #22
 8002ef6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002efa:	2317      	movs	r3, #23
 8002efc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002f00:	2314      	movs	r3, #20
 8002f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002f06:	2344      	movs	r3, #68	; 0x44
 8002f08:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002f10:	2339      	movs	r3, #57	; 0x39
 8002f12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002f1c:	2329      	movs	r3, #41	; 0x29
 8002f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002f22:	231e      	movs	r3, #30
 8002f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002f2e:	893b      	ldrh	r3, [r7, #8]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002f34:	2310      	movs	r3, #16
 8002f36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f103 0020 	add.w	r0, r3, #32
 8002f4c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002f50:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002f54:	2301      	movs	r3, #1
 8002f56:	f000 fa2a 	bl	80033ae <lis2mdl_write_reg>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
 8002f64:	e0e9      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f103 0020 	add.w	r0, r3, #32
 8002f6c:	f107 021f 	add.w	r2, r7, #31
 8002f70:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002f74:	2301      	movs	r3, #1
 8002f76:	f000 fa1a 	bl	80033ae <lis2mdl_write_reg>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002f80:	f04f 33ff 	mov.w	r3, #4294967295
 8002f84:	e0d9      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f103 0020 	add.w	r0, r3, #32
 8002f8c:	f107 020b 	add.w	r2, r7, #11
 8002f90:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002f94:	2301      	movs	r3, #1
 8002f96:	f000 fa0a 	bl	80033ae <lis2mdl_write_reg>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	e0c9      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f103 0020 	add.w	r0, r3, #32
 8002fac:	f107 021d 	add.w	r2, r7, #29
 8002fb0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f000 f9fa 	bl	80033ae <lis2mdl_write_reg>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	e0b9      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f103 0020 	add.w	r0, r3, #32
 8002fcc:	f107 021e 	add.w	r2, r7, #30
 8002fd0:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f000 f9ea 	bl	80033ae <lis2mdl_write_reg>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	e0a9      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f103 0020 	add.w	r0, r3, #32
 8002fec:	f107 0220 	add.w	r2, r7, #32
 8002ff0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f000 f9da 	bl	80033ae <lis2mdl_write_reg>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	e099      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f103 0020 	add.w	r0, r3, #32
 800300c:	f107 021c 	add.w	r2, r7, #28
 8003010:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003014:	2301      	movs	r3, #1
 8003016:	f000 f9b2 	bl	800337e <lis2mdl_read_reg>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	e089      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003026:	7f3b      	ldrb	r3, [r7, #28]
 8003028:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800302c:	429a      	cmp	r2, r3
 800302e:	d102      	bne.n	8003036 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003030:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003034:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f103 0020 	add.w	r0, r3, #32
 800303c:	f107 021c 	add.w	r2, r7, #28
 8003040:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003044:	2301      	movs	r3, #1
 8003046:	f000 f9b2 	bl	80033ae <lis2mdl_write_reg>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	e071      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f103 0020 	add.w	r0, r3, #32
 800305c:	f107 0214 	add.w	r2, r7, #20
 8003060:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003064:	2306      	movs	r3, #6
 8003066:	f000 f98a 	bl	800337e <lis2mdl_read_reg>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
 8003074:	e061      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f103 0020 	add.w	r0, r3, #32
 800307c:	f107 021b 	add.w	r2, r7, #27
 8003080:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003084:	2301      	movs	r3, #1
 8003086:	f000 f97a 	bl	800337e <lis2mdl_read_reg>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	e051      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003096:	7efa      	ldrb	r2, [r7, #27]
 8003098:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800309c:	4013      	ands	r3, r2
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1e6      	bne.n	8003076 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f103 0020 	add.w	r0, r3, #32
 80030ae:	f107 021b 	add.w	r2, r7, #27
 80030b2:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80030b6:	2301      	movs	r3, #1
 80030b8:	f000 f961 	bl	800337e <lis2mdl_read_reg>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e038      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80030c8:	7efa      	ldrb	r2, [r7, #27]
 80030ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030ce:	4013      	ands	r3, r2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d1e6      	bne.n	80030a8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f103 0020 	add.w	r0, r3, #32
 80030e0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80030e4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80030e8:	2301      	movs	r3, #1
 80030ea:	f000 f960 	bl	80033ae <lis2mdl_write_reg>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e01f      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f103 0020 	add.w	r0, r3, #32
 8003100:	893b      	ldrh	r3, [r7, #8]
 8003102:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	f000 f939 	bl	800337e <lis2mdl_read_reg>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	e010      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f103 0020 	add.w	r0, r3, #32
 800311e:	f107 0220 	add.w	r2, r7, #32
 8003122:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003126:	2301      	movs	r3, #1
 8003128:	f000 f941 	bl	80033ae <lis2mdl_write_reg>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	e000      	b.n	800313a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3730      	adds	r7, #48	; 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b08c      	sub	sp, #48	; 0x30
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	461a      	mov	r2, r3
 800314e:	460b      	mov	r3, r1
 8003150:	72fb      	strb	r3, [r7, #11]
 8003152:	4613      	mov	r3, r2
 8003154:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800315c:	2340      	movs	r3, #64	; 0x40
 800315e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003168:	233c      	movs	r3, #60	; 0x3c
 800316a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800316c:	2315      	movs	r3, #21
 800316e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003172:	2316      	movs	r3, #22
 8003174:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003178:	2317      	movs	r3, #23
 800317a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003182:	2314      	movs	r3, #20
 8003184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003188:	2344      	movs	r3, #68	; 0x44
 800318a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 800318c:	2339      	movs	r3, #57	; 0x39
 800318e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003198:	2329      	movs	r3, #41	; 0x29
 800319a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800319e:	231e      	movs	r3, #30
 80031a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80031aa:	2310      	movs	r3, #16
 80031ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80031b6:	2340      	movs	r3, #64	; 0x40
 80031b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80031bc:	230e      	movs	r3, #14
 80031be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f103 0020 	add.w	r0, r3, #32
 80031c8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80031cc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80031d0:	2301      	movs	r3, #1
 80031d2:	f000 f8ec 	bl	80033ae <lis2mdl_write_reg>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e0c9      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f103 0020 	add.w	r0, r3, #32
 80031e8:	f107 021f 	add.w	r2, r7, #31
 80031ec:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80031f0:	2301      	movs	r3, #1
 80031f2:	f000 f8dc 	bl	80033ae <lis2mdl_write_reg>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e0b9      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f103 0020 	add.w	r0, r3, #32
 8003208:	f107 020b 	add.w	r2, r7, #11
 800320c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003210:	2301      	movs	r3, #1
 8003212:	f000 f8cc 	bl	80033ae <lis2mdl_write_reg>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	e0a9      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f103 0020 	add.w	r0, r3, #32
 8003228:	f107 021e 	add.w	r2, r7, #30
 800322c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003230:	2301      	movs	r3, #1
 8003232:	f000 f8bc 	bl	80033ae <lis2mdl_write_reg>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295
 8003240:	e099      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f103 0020 	add.w	r0, r3, #32
 8003248:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800324c:	2301      	movs	r3, #1
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	f000 f8ad 	bl	80033ae <lis2mdl_write_reg>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
 800325e:	e08a      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f103 0020 	add.w	r0, r3, #32
 8003266:	f107 021d 	add.w	r2, r7, #29
 800326a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800326e:	2301      	movs	r3, #1
 8003270:	f000 f89d 	bl	80033ae <lis2mdl_write_reg>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e07a      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f103 0020 	add.w	r0, r3, #32
 8003286:	f107 0220 	add.w	r2, r7, #32
 800328a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800328e:	2301      	movs	r3, #1
 8003290:	f000 f88d 	bl	80033ae <lis2mdl_write_reg>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	e06a      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f103 0020 	add.w	r0, r3, #32
 80032a6:	f107 021c 	add.w	r2, r7, #28
 80032aa:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80032ae:	2301      	movs	r3, #1
 80032b0:	f000 f865 	bl	800337e <lis2mdl_read_reg>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295
 80032be:	e05a      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80032c0:	7f3b      	ldrb	r3, [r7, #28]
 80032c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d102      	bne.n	80032d0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80032ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ce:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f103 0020 	add.w	r0, r3, #32
 80032d6:	f107 021c 	add.w	r2, r7, #28
 80032da:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80032de:	2301      	movs	r3, #1
 80032e0:	f000 f865 	bl	80033ae <lis2mdl_write_reg>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	e042      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f103 0020 	add.w	r0, r3, #32
 80032f6:	f107 0214 	add.w	r2, r7, #20
 80032fa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80032fe:	2306      	movs	r3, #6
 8003300:	f000 f83d 	bl	800337e <lis2mdl_read_reg>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e032      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f103 0020 	add.w	r0, r3, #32
 8003316:	f107 021b 	add.w	r2, r7, #27
 800331a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800331e:	2301      	movs	r3, #1
 8003320:	f000 f82d 	bl	800337e <lis2mdl_read_reg>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e022      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003330:	7efa      	ldrb	r2, [r7, #27]
 8003332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003336:	4013      	ands	r3, r2
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800333e:	429a      	cmp	r2, r3
 8003340:	d1e6      	bne.n	8003310 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f103 0020 	add.w	r0, r3, #32
 8003348:	f107 021b 	add.w	r2, r7, #27
 800334c:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003350:	2301      	movs	r3, #1
 8003352:	f000 f814 	bl	800337e <lis2mdl_read_reg>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
 8003360:	e009      	b.n	8003376 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003362:	7efa      	ldrb	r2, [r7, #27]
 8003364:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003368:	4013      	ands	r3, r2
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003370:	429a      	cmp	r2, r3
 8003372:	d1e6      	bne.n	8003342 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3730      	adds	r7, #48	; 0x30
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800337e:	b590      	push	{r4, r7, lr}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	461a      	mov	r2, r3
 800338a:	460b      	mov	r3, r1
 800338c:	72fb      	strb	r3, [r7, #11]
 800338e:	4613      	mov	r3, r2
 8003390:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685c      	ldr	r4, [r3, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68d8      	ldr	r0, [r3, #12]
 800339a:	893b      	ldrh	r3, [r7, #8]
 800339c:	7af9      	ldrb	r1, [r7, #11]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	47a0      	blx	r4
 80033a2:	6178      	str	r0, [r7, #20]

  return ret;
 80033a4:	697b      	ldr	r3, [r7, #20]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}

080033ae <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80033ae:	b590      	push	{r4, r7, lr}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	461a      	mov	r2, r3
 80033ba:	460b      	mov	r3, r1
 80033bc:	72fb      	strb	r3, [r7, #11]
 80033be:	4613      	mov	r3, r2
 80033c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681c      	ldr	r4, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68d8      	ldr	r0, [r3, #12]
 80033ca:	893b      	ldrh	r3, [r7, #8]
 80033cc:	7af9      	ldrb	r1, [r7, #11]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	47a0      	blx	r4
 80033d2:	6178      	str	r0, [r7, #20]

  return ret;
 80033d4:	697b      	ldr	r3, [r7, #20]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd90      	pop	{r4, r7, pc}

080033de <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80033ea:	f107 0208 	add.w	r2, r7, #8
 80033ee:	2301      	movs	r3, #1
 80033f0:	2160      	movs	r1, #96	; 0x60
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffc3 	bl	800337e <lis2mdl_read_reg>
 80033f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10f      	bne.n	8003420 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	b2da      	uxtb	r2, r3
 8003408:	7a3b      	ldrb	r3, [r7, #8]
 800340a:	f362 0301 	bfi	r3, r2, #0, #2
 800340e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003410:	f107 0208 	add.w	r2, r7, #8
 8003414:	2301      	movs	r3, #1
 8003416:	2160      	movs	r1, #96	; 0x60
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ffc8 	bl	80033ae <lis2mdl_write_reg>
 800341e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003420:	68fb      	ldr	r3, [r7, #12]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003436:	f107 0208 	add.w	r2, r7, #8
 800343a:	2301      	movs	r3, #1
 800343c:	2160      	movs	r1, #96	; 0x60
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff9d 	bl	800337e <lis2mdl_read_reg>
 8003444:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10f      	bne.n	800346c <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	b2da      	uxtb	r2, r3
 8003454:	7a3b      	ldrb	r3, [r7, #8]
 8003456:	f362 0383 	bfi	r3, r2, #2, #2
 800345a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800345c:	f107 0208 	add.w	r2, r7, #8
 8003460:	2301      	movs	r3, #1
 8003462:	2160      	movs	r1, #96	; 0x60
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ffa2 	bl	80033ae <lis2mdl_write_reg>
 800346a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800346c:	68fb      	ldr	r3, [r7, #12]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003482:	f107 0208 	add.w	r2, r7, #8
 8003486:	2301      	movs	r3, #1
 8003488:	2160      	movs	r1, #96	; 0x60
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ff77 	bl	800337e <lis2mdl_read_reg>
 8003490:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003492:	7a3b      	ldrb	r3, [r7, #8]
 8003494:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b03      	cmp	r3, #3
 800349c:	d81a      	bhi.n	80034d4 <lis2mdl_data_rate_get+0x5c>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <lis2mdl_data_rate_get+0x2c>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034bd 	.word	0x080034bd
 80034ac:	080034c5 	.word	0x080034c5
 80034b0:	080034cd 	.word	0x080034cd
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
      break;
 80034ba:	e00f      	b.n	80034dc <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
      break;
 80034c2:	e00b      	b.n	80034dc <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
      break;
 80034ca:	e007      	b.n	80034dc <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2203      	movs	r2, #3
 80034d0:	701a      	strb	r2, [r3, #0]
      break;
 80034d2:	e003      	b.n	80034dc <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	701a      	strb	r2, [r3, #0]
      break;
 80034da:	bf00      	nop
  }

  return ret;
 80034dc:	68fb      	ldr	r3, [r7, #12]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop

080034e8 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80034f4:	f107 0208 	add.w	r2, r7, #8
 80034f8:	2301      	movs	r3, #1
 80034fa:	2162      	movs	r1, #98	; 0x62
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff3e 	bl	800337e <lis2mdl_read_reg>
 8003502:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	7a3b      	ldrb	r3, [r7, #8]
 8003514:	f362 1304 	bfi	r3, r2, #4, #1
 8003518:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800351a:	f107 0208 	add.w	r2, r7, #8
 800351e:	2301      	movs	r3, #1
 8003520:	2162      	movs	r1, #98	; 0x62
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff43 	bl	80033ae <lis2mdl_write_reg>
 8003528:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800353e:	f107 020c 	add.w	r2, r7, #12
 8003542:	2306      	movs	r3, #6
 8003544:	2168      	movs	r1, #104	; 0x68
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ff19 	bl	800337e <lis2mdl_read_reg>
 800354c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800354e:	7b7b      	ldrb	r3, [r7, #13]
 8003550:	b21a      	sxth	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800355c:	b29b      	uxth	r3, r3
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	b29a      	uxth	r2, r3
 8003562:	7b3b      	ldrb	r3, [r7, #12]
 8003564:	b29b      	uxth	r3, r3
 8003566:	4413      	add	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	b21a      	sxth	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	3302      	adds	r3, #2
 8003576:	b212      	sxth	r2, r2
 8003578:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	3302      	adds	r3, #2
 800357e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003582:	b29b      	uxth	r3, r3
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	b29a      	uxth	r2, r3
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	b29b      	uxth	r3, r3
 800358c:	4413      	add	r3, r2
 800358e:	b29a      	uxth	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	3302      	adds	r3, #2
 8003594:	b212      	sxth	r2, r2
 8003596:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003598:	7c7a      	ldrb	r2, [r7, #17]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3304      	adds	r3, #4
 800359e:	b212      	sxth	r2, r2
 80035a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	3304      	adds	r3, #4
 80035a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	7c3b      	ldrb	r3, [r7, #16]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	3304      	adds	r3, #4
 80035bc:	b212      	sxth	r2, r2
 80035be:	801a      	strh	r2, [r3, #0]

  return ret;
 80035c0:	697b      	ldr	r3, [r7, #20]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80035d4:	2301      	movs	r3, #1
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	214f      	movs	r1, #79	; 0x4f
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fecf 	bl	800337e <lis2mdl_read_reg>
 80035e0:	60f8      	str	r0, [r7, #12]

  return ret;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80035f8:	f107 0208 	add.w	r2, r7, #8
 80035fc:	2301      	movs	r3, #1
 80035fe:	2162      	movs	r1, #98	; 0x62
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff febc 	bl	800337e <lis2mdl_read_reg>
 8003606:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	7a3b      	ldrb	r3, [r7, #8]
 8003618:	f362 0341 	bfi	r3, r2, #1, #1
 800361c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800361e:	f107 0208 	add.w	r2, r7, #8
 8003622:	2301      	movs	r3, #1
 8003624:	2162      	movs	r1, #98	; 0x62
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fec1 	bl	80033ae <lis2mdl_write_reg>
 800362c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003644:	f107 0208 	add.w	r2, r7, #8
 8003648:	2301      	movs	r3, #1
 800364a:	2162      	movs	r1, #98	; 0x62
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fe96 	bl	800337e <lis2mdl_read_reg>
 8003652:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	b2da      	uxtb	r2, r3
 8003662:	7a3b      	ldrb	r3, [r7, #8]
 8003664:	f362 1345 	bfi	r3, r2, #5, #1
 8003668:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800366a:	f107 0208 	add.w	r2, r7, #8
 800366e:	2301      	movs	r3, #1
 8003670:	2162      	movs	r1, #98	; 0x62
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fe9b 	bl	80033ae <lis2mdl_write_reg>
 8003678:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e051      	b.n	8003744 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	7b1a      	ldrb	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <LSM6DSO_RegisterBusIO+0xcc>)
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <LSM6DSO_RegisterBusIO+0xd0>)
 80036e2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e020      	b.n	8003744 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4798      	blx	r3
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e016      	b.n	8003744 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d112      	bne.n	8003744 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10d      	bne.n	8003744 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003728:	230c      	movs	r3, #12
 800372a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	461a      	mov	r2, r3
 8003730:	2112      	movs	r1, #18
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 ff5d 	bl	80045f2 <LSM6DSO_Write_Reg>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003744:	68fb      	ldr	r3, [r7, #12]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	08004a95 	.word	0x08004a95
 8003754:	08004acb 	.word	0x08004acb

08003758 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d00b      	beq.n	8003780 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3320      	adds	r3, #32
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fe8a 	bl	8005488 <lsm6dso_i3c_disable_set>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	e060      	b.n	8003842 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3320      	adds	r3, #32
 8003784:	2101      	movs	r1, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fe58 	bl	800543c <lsm6dso_auto_increment_set>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e054      	b.n	8003842 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3320      	adds	r3, #32
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fd62 	bl	8005268 <lsm6dso_block_data_update_set>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e048      	b.n	8003842 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 feae 	bl	8005518 <lsm6dso_fifo_mode_set>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e03c      	b.n	8003842 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2204      	movs	r2, #4
 80037cc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3320      	adds	r3, #32
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fa20 	bl	8004c1c <lsm6dso_xl_data_rate_set>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	e02c      	b.n	8003842 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3320      	adds	r3, #32
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 f9b6 	bl	8004b60 <lsm6dso_xl_full_scale_set>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	e020      	b.n	8003842 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2204      	movs	r2, #4
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3320      	adds	r3, #32
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f001 fbce 	bl	8004fb0 <lsm6dso_gy_data_rate_set>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	e010      	b.n	8003842 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3320      	adds	r3, #32
 8003824:	2106      	movs	r1, #6
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fb5a 	bl	8004ee0 <lsm6dso_gy_full_scale_set>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e004      	b.n	8003842 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f888 	bl	8003968 <LSM6DSO_ACC_Disable>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
 8003862:	e015      	b.n	8003890 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fc2e 	bl	80040c6 <LSM6DSO_GYRO_Disable>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
 8003874:	e00c      	b.n	8003890 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3320      	adds	r3, #32
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 fdb6 	bl	800541a <lsm6dso_device_id_get>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
 80038b8:	e000      	b.n	80038bc <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2201      	movs	r2, #1
 80038d8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80038ec:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2210      	movs	r2, #16
 80038f2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	4a07      	ldr	r2, [pc, #28]	; (800391c <LSM6DSO_GetCapabilities+0x58>)
 80038fe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	4a06      	ldr	r2, [pc, #24]	; (800391c <LSM6DSO_GetCapabilities+0x58>)
 8003904:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	45d02000 	.word	0x45d02000

08003920 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e014      	b.n	8003960 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f103 0220 	add.w	r2, r3, #32
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f001 f969 	bl	8004c1c <lsm6dso_xl_data_rate_set>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e004      	b.n	8003960 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e01f      	b.n	80039be <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f103 0220 	add.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3333      	adds	r3, #51	; 0x33
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f001 fa40 	bl	8004e10 <lsm6dso_xl_data_rate_get>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	e010      	b.n	80039be <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3320      	adds	r3, #32
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 f93a 	bl	8004c1c <lsm6dso_xl_data_rate_set>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	e004      	b.n	80039be <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3320      	adds	r3, #32
 80039da:	f107 020b 	add.w	r2, r7, #11
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f8e3 	bl	8004bac <lsm6dso_xl_full_scale_get>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
 80039f0:	e023      	b.n	8003a3a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80039f2:	7afb      	ldrb	r3, [r7, #11]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d81b      	bhi.n	8003a30 <LSM6DSO_ACC_GetSensitivity+0x68>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a21 	.word	0x08003a21
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003a14:	601a      	str	r2, [r3, #0]
      break;
 8003a16:	e00f      	b.n	8003a38 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003a1c:	601a      	str	r2, [r3, #0]
      break;
 8003a1e:	e00b      	b.n	8003a38 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003a24:	601a      	str	r2, [r3, #0]
      break;
 8003a26:	e007      	b.n	8003a38 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003a2c:	601a      	str	r2, [r3, #0]
      break;
 8003a2e:	e003      	b.n	8003a38 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295
 8003a34:	60fb      	str	r3, [r7, #12]
      break;
 8003a36:	bf00      	nop
  }

  return ret;
 8003a38:	68fb      	ldr	r3, [r7, #12]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	3d79db23 	.word	0x3d79db23
 8003a48:	3df9db23 	.word	0x3df9db23
 8003a4c:	3e79db23 	.word	0x3e79db23
 8003a50:	3ef9db23 	.word	0x3ef9db23

08003a54 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3320      	adds	r3, #32
 8003a66:	f107 020b 	add.w	r2, r7, #11
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 f9cf 	bl	8004e10 <lsm6dso_xl_data_rate_get>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7c:	e054      	b.n	8003b28 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	2b0b      	cmp	r3, #11
 8003a82:	d84c      	bhi.n	8003b1e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003abd 	.word	0x08003abd
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003ad7 	.word	0x08003ad7
 8003a98:	08003adf 	.word	0x08003adf
 8003a9c:	08003ae7 	.word	0x08003ae7
 8003aa0:	08003aef 	.word	0x08003aef
 8003aa4:	08003af7 	.word	0x08003af7
 8003aa8:	08003aff 	.word	0x08003aff
 8003aac:	08003b07 	.word	0x08003b07
 8003ab0:	08003b0f 	.word	0x08003b0f
 8003ab4:	08003b17 	.word	0x08003b17
 8003ab8:	08003ac7 	.word	0x08003ac7
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
      break;
 8003ac4:	e02f      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003aca:	601a      	str	r2, [r3, #0]
      break;
 8003acc:	e02b      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003ad2:	601a      	str	r2, [r3, #0]
      break;
 8003ad4:	e027      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003ada:	601a      	str	r2, [r3, #0]
      break;
 8003adc:	e023      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003ae2:	601a      	str	r2, [r3, #0]
      break;
 8003ae4:	e01f      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003aea:	601a      	str	r2, [r3, #0]
      break;
 8003aec:	e01b      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003af2:	601a      	str	r2, [r3, #0]
      break;
 8003af4:	e017      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003afa:	601a      	str	r2, [r3, #0]
      break;
 8003afc:	e013      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003b02:	601a      	str	r2, [r3, #0]
      break;
 8003b04:	e00f      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003b0a:	601a      	str	r2, [r3, #0]
      break;
 8003b0c:	e00b      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	4a10      	ldr	r2, [pc, #64]	; (8003b54 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003b12:	601a      	str	r2, [r3, #0]
      break;
 8003b14:	e007      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4a0f      	ldr	r2, [pc, #60]	; (8003b58 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003b1a:	601a      	str	r2, [r3, #0]
      break;
 8003b1c:	e003      	b.n	8003b26 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	60fb      	str	r3, [r7, #12]
      break;
 8003b24:	bf00      	nop
  }

  return ret;
 8003b26:	68fb      	ldr	r3, [r7, #12]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	3fcccccd 	.word	0x3fcccccd
 8003b34:	41480000 	.word	0x41480000
 8003b38:	41d00000 	.word	0x41d00000
 8003b3c:	42500000 	.word	0x42500000
 8003b40:	42d00000 	.word	0x42d00000
 8003b44:	43500000 	.word	0x43500000
 8003b48:	43d08000 	.word	0x43d08000
 8003b4c:	44504000 	.word	0x44504000
 8003b50:	44d06000 	.word	0x44d06000
 8003b54:	45505000 	.word	0x45505000
 8003b58:	45d05800 	.word	0x45d05800

08003b5c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	ed97 0a00 	vldr	s0, [r7]
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f806 	bl	8003b80 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	; 0x30
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	f000 80ea 	beq.w	8003d74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	f300 8163 	bgt.w	8003e6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d074      	beq.n	8003c98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003bae:	e15d      	b.n	8003e6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f103 0020 	add.w	r0, r3, #32
 8003bb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003bba:	2301      	movs	r3, #1
 8003bbc:	2114      	movs	r1, #20
 8003bbe:	f000 ff9f 	bl	8004b00 <lsm6dso_read_reg>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bcc:	e16c      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003bce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d025      	beq.n	8003c28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10b      	bne.n	8003bfe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3320      	adds	r3, #32
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 f815 	bl	8004c1c <lsm6dso_xl_data_rate_set>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	e154      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c02:	f36f 13c7 	bfc	r3, #7, #1
 8003c06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f103 0020 	add.w	r0, r3, #32
 8003c10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003c14:	2301      	movs	r3, #1
 8003c16:	2114      	movs	r1, #20
 8003c18:	f000 ff8a 	bl	8004b30 <lsm6dso_write_reg>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	e13f      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f103 0020 	add.w	r0, r3, #32
 8003c2e:	f107 0220 	add.w	r2, r7, #32
 8003c32:	2301      	movs	r3, #1
 8003c34:	2115      	movs	r1, #21
 8003c36:	f000 ff63 	bl	8004b00 <lsm6dso_read_reg>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	e130      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003c46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d014      	beq.n	8003c7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c58:	f36f 1304 	bfc	r3, #4, #1
 8003c5c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f103 0020 	add.w	r0, r3, #32
 8003c66:	f107 0220 	add.w	r2, r7, #32
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	2115      	movs	r1, #21
 8003c6e:	f000 ff5f 	bl	8004b30 <lsm6dso_write_reg>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7c:	e114      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003c7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c82:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8e:	d400      	bmi.n	8003c92 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003c90:	e0f0      	b.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003c92:	4b87      	ldr	r3, [pc, #540]	; (8003eb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c96:	e0ed      	b.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f103 0020 	add.w	r0, r3, #32
 8003c9e:	f107 021c 	add.w	r2, r7, #28
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	2114      	movs	r1, #20
 8003ca6:	f000 ff2b 	bl	8004b00 <lsm6dso_read_reg>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	e0f8      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003cb6:	7f3b      	ldrb	r3, [r7, #28]
 8003cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d023      	beq.n	8003d0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10b      	bne.n	8003ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3320      	adds	r3, #32
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 ffa2 	bl	8004c1c <lsm6dso_xl_data_rate_set>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	e0e1      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003ce4:	7f3b      	ldrb	r3, [r7, #28]
 8003ce6:	f36f 13c7 	bfc	r3, #7, #1
 8003cea:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f103 0020 	add.w	r0, r3, #32
 8003cf2:	f107 021c 	add.w	r2, r7, #28
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	2114      	movs	r1, #20
 8003cfa:	f000 ff19 	bl	8004b30 <lsm6dso_write_reg>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	e0ce      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f103 0020 	add.w	r0, r3, #32
 8003d10:	f107 0218 	add.w	r2, r7, #24
 8003d14:	2301      	movs	r3, #1
 8003d16:	2115      	movs	r1, #21
 8003d18:	f000 fef2 	bl	8004b00 <lsm6dso_read_reg>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	e0bf      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003d28:	7e3b      	ldrb	r3, [r7, #24]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d112      	bne.n	8003d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003d34:	7e3b      	ldrb	r3, [r7, #24]
 8003d36:	f043 0310 	orr.w	r3, r3, #16
 8003d3a:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f103 0020 	add.w	r0, r3, #32
 8003d42:	f107 0218 	add.w	r2, r7, #24
 8003d46:	2301      	movs	r3, #1
 8003d48:	2115      	movs	r1, #21
 8003d4a:	f000 fef1 	bl	8004b30 <lsm6dso_write_reg>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
 8003d58:	e0a6      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003d5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d5e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003eb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	dc00      	bgt.n	8003d6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003d6c:	e082      	b.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003d6e:	4b52      	ldr	r3, [pc, #328]	; (8003eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d72:	e07f      	b.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f103 0020 	add.w	r0, r3, #32
 8003d7a:	f107 0210 	add.w	r2, r7, #16
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2115      	movs	r1, #21
 8003d82:	f000 febd 	bl	8004b00 <lsm6dso_read_reg>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	e08a      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003d92:	7c3b      	ldrb	r3, [r7, #16]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d012      	beq.n	8003dc4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003d9e:	7c3b      	ldrb	r3, [r7, #16]
 8003da0:	f36f 1304 	bfc	r3, #4, #1
 8003da4:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f103 0020 	add.w	r0, r3, #32
 8003dac:	f107 0210 	add.w	r2, r7, #16
 8003db0:	2301      	movs	r3, #1
 8003db2:	2115      	movs	r1, #21
 8003db4:	f000 febc 	bl	8004b30 <lsm6dso_write_reg>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	e071      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d108      	bne.n	8003de0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f979 	bl	80040c6 <LSM6DSO_GYRO_Disable>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	e063      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f103 0020 	add.w	r0, r3, #32
 8003de6:	f107 0214 	add.w	r2, r7, #20
 8003dea:	2301      	movs	r3, #1
 8003dec:	2114      	movs	r1, #20
 8003dee:	f000 fe87 	bl	8004b00 <lsm6dso_read_reg>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003df8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfc:	e054      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003dfe:	7d3b      	ldrb	r3, [r7, #20]
 8003e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d123      	bne.n	8003e52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10b      	bne.n	8003e2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3320      	adds	r3, #32
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fefe 	bl	8004c1c <lsm6dso_xl_data_rate_set>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	e03d      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003e2c:	7d3b      	ldrb	r3, [r7, #20]
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f103 0020 	add.w	r0, r3, #32
 8003e3a:	f107 0214 	add.w	r2, r7, #20
 8003e3e:	2301      	movs	r3, #1
 8003e40:	2114      	movs	r1, #20
 8003e42:	f000 fe75 	bl	8004b30 <lsm6dso_write_reg>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	e02a      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003e52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e56:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003eb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e62:	dc00      	bgt.n	8003e66 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003e64:	e006      	b.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6a:	e003      	b.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003e72:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d102      	bne.n	8003e82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e012      	b.n	8003ea8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003e8c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fbc9 	bl	8004628 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003e96:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e98:	e005      	b.n	8003ea6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003e9a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fc5a 	bl	8004758 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003ea4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	41480000 	.word	0x41480000
 8003eb4:	43500000 	.word	0x43500000
 8003eb8:	43500000 	.word	0x43500000

08003ebc <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3320      	adds	r3, #32
 8003ece:	f107 020b 	add.w	r2, r7, #11
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fe69 	bl	8004bac <lsm6dso_xl_full_scale_get>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	e023      	b.n	8003f2e <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d81b      	bhi.n	8003f24 <LSM6DSO_ACC_GetFullScale+0x68>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <LSM6DSO_ACC_GetFullScale+0x38>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f15 	.word	0x08003f15
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2202      	movs	r2, #2
 8003f08:	601a      	str	r2, [r3, #0]
      break;
 8003f0a:	e00f      	b.n	8003f2c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	601a      	str	r2, [r3, #0]
      break;
 8003f12:	e00b      	b.n	8003f2c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2208      	movs	r2, #8
 8003f18:	601a      	str	r2, [r3, #0]
      break;
 8003f1a:	e007      	b.n	8003f2c <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	601a      	str	r2, [r3, #0]
      break;
 8003f22:	e003      	b.n	8003f2c <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003f24:	f04f 33ff 	mov.w	r3, #4294967295
 8003f28:	60fb      	str	r3, [r7, #12]
      break;
 8003f2a:	bf00      	nop
  }

  return ret;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop

08003f38 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	dd0b      	ble.n	8003f60 <LSM6DSO_ACC_SetFullScale+0x28>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	dd06      	ble.n	8003f5c <LSM6DSO_ACC_SetFullScale+0x24>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	dc01      	bgt.n	8003f58 <LSM6DSO_ACC_SetFullScale+0x20>
 8003f54:	2303      	movs	r3, #3
 8003f56:	e004      	b.n	8003f62 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e002      	b.n	8003f62 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e000      	b.n	8003f62 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f60:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003f62:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3320      	adds	r3, #32
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fdf7 	bl	8004b60 <lsm6dso_xl_full_scale_set>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e000      	b.n	8003f80 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3320      	adds	r3, #32
 8003f96:	f107 0208 	add.w	r2, r7, #8
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 f9d4 	bl	800534a <lsm6dso_acceleration_raw_get>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fac:	e00c      	b.n	8003fc8 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003fae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003fb6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003fbe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3320      	adds	r3, #32
 8003fe4:	f107 0210 	add.w	r2, r7, #16
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 f9ad 	bl	800534a <lsm6dso_acceleration_raw_get>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	e03c      	b.n	8004076 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff fce0 	bl	80039c8 <LSM6DSO_ACC_GetSensitivity>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e030      	b.n	8004076 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004014:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004020:	edd7 7a03 	vldr	s15, [r7, #12]
 8004024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800402c:	ee17 2a90 	vmov	r2, s15
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004040:	edd7 7a03 	vldr	s15, [r7, #12]
 8004044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404c:	ee17 2a90 	vmov	r2, s15
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004054:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004060:	edd7 7a03 	vldr	s15, [r7, #12]
 8004064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 2a90 	vmov	r2, s15
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e014      	b.n	80040be <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f103 0220 	add.w	r2, r3, #32
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 ff84 	bl	8004fb0 <lsm6dso_gy_data_rate_set>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	e004      	b.n	80040be <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e01f      	b.n	800411c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f103 0220 	add.w	r2, r3, #32
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3334      	adds	r3, #52	; 0x34
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f001 f85b 	bl	80051a4 <lsm6dso_gy_data_rate_get>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	e010      	b.n	800411c <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3320      	adds	r3, #32
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f000 ff55 	bl	8004fb0 <lsm6dso_gy_data_rate_set>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800410c:	f04f 33ff 	mov.w	r3, #4294967295
 8004110:	e004      	b.n	800411c <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3320      	adds	r3, #32
 8004136:	f107 020b 	add.w	r2, r7, #11
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fef5 	bl	8004f2c <lsm6dso_gy_full_scale_get>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004148:	f04f 33ff 	mov.w	r3, #4294967295
 800414c:	e02d      	b.n	80041aa <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800414e:	7afb      	ldrb	r3, [r7, #11]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d825      	bhi.n	80041a0 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004181 	.word	0x08004181
 8004160:	08004179 	.word	0x08004179
 8004164:	08004189 	.word	0x08004189
 8004168:	080041a1 	.word	0x080041a1
 800416c:	08004191 	.word	0x08004191
 8004170:	080041a1 	.word	0x080041a1
 8004174:	08004199 	.word	0x08004199
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 800417c:	601a      	str	r2, [r3, #0]
      break;
 800417e:	e013      	b.n	80041a8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004184:	601a      	str	r2, [r3, #0]
      break;
 8004186:	e00f      	b.n	80041a8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <LSM6DSO_GYRO_GetSensitivity+0x98>)
 800418c:	601a      	str	r2, [r3, #0]
      break;
 800418e:	e00b      	b.n	80041a8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004194:	601a      	str	r2, [r3, #0]
      break;
 8004196:	e007      	b.n	80041a8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 800419c:	601a      	str	r2, [r3, #0]
      break;
 800419e:	e003      	b.n	80041a8 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	60fb      	str	r3, [r7, #12]
      break;
 80041a6:	bf00      	nop
  }

  return ret;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	408c0000 	.word	0x408c0000
 80041b8:	410c0000 	.word	0x410c0000
 80041bc:	418c0000 	.word	0x418c0000
 80041c0:	420c0000 	.word	0x420c0000
 80041c4:	428c0000 	.word	0x428c0000

080041c8 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3320      	adds	r3, #32
 80041da:	f107 020b 	add.w	r2, r7, #11
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 ffdf 	bl	80051a4 <lsm6dso_gy_data_rate_get>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80041ec:	f04f 33ff 	mov.w	r3, #4294967295
 80041f0:	e04e      	b.n	8004290 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	2b0a      	cmp	r3, #10
 80041f6:	d846      	bhi.n	8004286 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	0800422d 	.word	0x0800422d
 8004204:	08004237 	.word	0x08004237
 8004208:	0800423f 	.word	0x0800423f
 800420c:	08004247 	.word	0x08004247
 8004210:	0800424f 	.word	0x0800424f
 8004214:	08004257 	.word	0x08004257
 8004218:	0800425f 	.word	0x0800425f
 800421c:	08004267 	.word	0x08004267
 8004220:	0800426f 	.word	0x0800426f
 8004224:	08004277 	.word	0x08004277
 8004228:	0800427f 	.word	0x0800427f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
      break;
 8004234:	e02b      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	4a17      	ldr	r2, [pc, #92]	; (8004298 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800423a:	601a      	str	r2, [r3, #0]
      break;
 800423c:	e027      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	; (800429c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004242:	601a      	str	r2, [r3, #0]
      break;
 8004244:	e023      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800424a:	601a      	str	r2, [r3, #0]
      break;
 800424c:	e01f      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004252:	601a      	str	r2, [r3, #0]
      break;
 8004254:	e01b      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800425a:	601a      	str	r2, [r3, #0]
      break;
 800425c:	e017      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	4a12      	ldr	r2, [pc, #72]	; (80042ac <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004262:	601a      	str	r2, [r3, #0]
      break;
 8004264:	e013      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800426a:	601a      	str	r2, [r3, #0]
      break;
 800426c:	e00f      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004272:	601a      	str	r2, [r3, #0]
      break;
 8004274:	e00b      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4a0f      	ldr	r2, [pc, #60]	; (80042b8 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800427a:	601a      	str	r2, [r3, #0]
      break;
 800427c:	e007      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004282:	601a      	str	r2, [r3, #0]
      break;
 8004284:	e003      	b.n	800428e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	60fb      	str	r3, [r7, #12]
      break;
 800428c:	bf00      	nop
  }

  return ret;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	41480000 	.word	0x41480000
 800429c:	41d00000 	.word	0x41d00000
 80042a0:	42500000 	.word	0x42500000
 80042a4:	42d00000 	.word	0x42d00000
 80042a8:	43500000 	.word	0x43500000
 80042ac:	43d08000 	.word	0x43d08000
 80042b0:	44504000 	.word	0x44504000
 80042b4:	44d06000 	.word	0x44d06000
 80042b8:	45505000 	.word	0x45505000
 80042bc:	45d05800 	.word	0x45d05800

080042c0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80042cc:	2100      	movs	r1, #0
 80042ce:	ed97 0a00 	vldr	s0, [r7]
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f806 	bl	80042e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80042d8:	4603      	mov	r3, r0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80042f0:	460b      	mov	r3, r1
 80042f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004302:	2b01      	cmp	r3, #1
 8004304:	d028      	beq.n	8004358 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004306:	e05c      	b.n	80043c2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f103 0020 	add.w	r0, r3, #32
 800430e:	f107 0214 	add.w	r2, r7, #20
 8004312:	2301      	movs	r3, #1
 8004314:	2116      	movs	r1, #22
 8004316:	f000 fbf3 	bl	8004b00 <lsm6dso_read_reg>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	e06c      	b.n	8004400 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004326:	7d3b      	ldrb	r3, [r7, #20]
 8004328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d04b      	beq.n	80043ca <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004332:	7d3b      	ldrb	r3, [r7, #20]
 8004334:	f36f 13c7 	bfc	r3, #7, #1
 8004338:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f103 0020 	add.w	r0, r3, #32
 8004340:	f107 0214 	add.w	r2, r7, #20
 8004344:	2301      	movs	r3, #1
 8004346:	2116      	movs	r1, #22
 8004348:	f000 fbf2 	bl	8004b30 <lsm6dso_write_reg>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d03b      	beq.n	80043ca <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	e053      	b.n	8004400 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f103 0020 	add.w	r0, r3, #32
 800435e:	f107 0210 	add.w	r2, r7, #16
 8004362:	2301      	movs	r3, #1
 8004364:	2116      	movs	r1, #22
 8004366:	f000 fbcb 	bl	8004b00 <lsm6dso_read_reg>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004370:	f04f 33ff 	mov.w	r3, #4294967295
 8004374:	e044      	b.n	8004400 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8004376:	7c3b      	ldrb	r3, [r7, #16]
 8004378:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d112      	bne.n	80043a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004382:	7c3b      	ldrb	r3, [r7, #16]
 8004384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004388:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f103 0020 	add.w	r0, r3, #32
 8004390:	f107 0210 	add.w	r2, r7, #16
 8004394:	2301      	movs	r3, #1
 8004396:	2116      	movs	r1, #22
 8004398:	f000 fbca 	bl	8004b30 <lsm6dso_write_reg>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	e02b      	b.n	8004400 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80043a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80043ac:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004408 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80043b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	dc00      	bgt.n	80043bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80043ba:	e007      	b.n	80043cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e004      	b.n	80043cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295
 80043c6:	61fb      	str	r3, [r7, #28]
      break;
 80043c8:	e000      	b.n	80043cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80043ca:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d102      	bne.n	80043da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	e012      	b.n	8004400 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80043e4:	ed97 0a06 	vldr	s0, [r7, #24]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fa45 	bl	8004878 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80043ee:	61f8      	str	r0, [r7, #28]
 80043f0:	e005      	b.n	80043fe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80043f2:	ed97 0a06 	vldr	s0, [r7, #24]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 faca 	bl	8004990 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80043fc:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80043fe:	69fb      	ldr	r3, [r7, #28]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	43500000 	.word	0x43500000
 800440c:	43500000 	.word	0x43500000

08004410 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3320      	adds	r3, #32
 8004422:	f107 020b 	add.w	r2, r7, #11
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fd7f 	bl	8004f2c <lsm6dso_gy_full_scale_get>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	e030      	b.n	800449c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800443a:	7afb      	ldrb	r3, [r7, #11]
 800443c:	2b06      	cmp	r3, #6
 800443e:	d828      	bhi.n	8004492 <LSM6DSO_GYRO_GetFullScale+0x82>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800446d 	.word	0x0800446d
 800444c:	08004465 	.word	0x08004465
 8004450:	08004475 	.word	0x08004475
 8004454:	08004493 	.word	0x08004493
 8004458:	0800447f 	.word	0x0800447f
 800445c:	08004493 	.word	0x08004493
 8004460:	08004489 	.word	0x08004489
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	227d      	movs	r2, #125	; 0x7d
 8004468:	601a      	str	r2, [r3, #0]
      break;
 800446a:	e016      	b.n	800449a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	22fa      	movs	r2, #250	; 0xfa
 8004470:	601a      	str	r2, [r3, #0]
      break;
 8004472:	e012      	b.n	800449a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800447a:	601a      	str	r2, [r3, #0]
      break;
 800447c:	e00d      	b.n	800449a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004484:	601a      	str	r2, [r3, #0]
      break;
 8004486:	e008      	b.n	800449a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800448e:	601a      	str	r2, [r3, #0]
      break;
 8004490:	e003      	b.n	800449a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	60fb      	str	r3, [r7, #12]
      break;
 8004498:	bf00      	nop
  }

  return ret;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b7d      	cmp	r3, #125	; 0x7d
 80044b2:	dd12      	ble.n	80044da <LSM6DSO_GYRO_SetFullScale+0x36>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2bfa      	cmp	r3, #250	; 0xfa
 80044b8:	dd0d      	ble.n	80044d6 <LSM6DSO_GYRO_SetFullScale+0x32>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044c0:	dd07      	ble.n	80044d2 <LSM6DSO_GYRO_SetFullScale+0x2e>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c8:	dc01      	bgt.n	80044ce <LSM6DSO_GYRO_SetFullScale+0x2a>
 80044ca:	2304      	movs	r3, #4
 80044cc:	e006      	b.n	80044dc <LSM6DSO_GYRO_SetFullScale+0x38>
 80044ce:	2306      	movs	r3, #6
 80044d0:	e004      	b.n	80044dc <LSM6DSO_GYRO_SetFullScale+0x38>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e002      	b.n	80044dc <LSM6DSO_GYRO_SetFullScale+0x38>
 80044d6:	2300      	movs	r3, #0
 80044d8:	e000      	b.n	80044dc <LSM6DSO_GYRO_SetFullScale+0x38>
 80044da:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80044dc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3320      	adds	r3, #32
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fcfa 	bl	8004ee0 <lsm6dso_gy_full_scale_set>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	e000      	b.n	80044fa <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3320      	adds	r3, #32
 8004510:	f107 0208 	add.w	r2, r7, #8
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fecc 	bl	80052b4 <lsm6dso_angular_rate_raw_get>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	e00c      	b.n	8004542 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004528:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004530:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004538:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3320      	adds	r3, #32
 8004558:	f107 0210 	add.w	r2, r7, #16
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fea8 	bl	80052b4 <lsm6dso_angular_rate_raw_get>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	e03c      	b.n	80045ea <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004570:	f107 030c 	add.w	r3, r7, #12
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fdd4 	bl	8004124 <LSM6DSO_GYRO_GetSensitivity>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	e030      	b.n	80045ea <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004588:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004594:	edd7 7a03 	vldr	s15, [r7, #12]
 8004598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80045a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c0:	ee17 2a90 	vmov	r2, s15
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80045c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e0:	ee17 2a90 	vmov	r2, s15
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
 80045fe:	4613      	mov	r3, r2
 8004600:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f103 0020 	add.w	r0, r3, #32
 8004608:	1cba      	adds	r2, r7, #2
 800460a:	78f9      	ldrb	r1, [r7, #3]
 800460c:	2301      	movs	r3, #1
 800460e:	f000 fa8f 	bl	8004b30 <lsm6dso_write_reg>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	e000      	b.n	8004620 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004634:	edd7 7a00 	vldr	s15, [r7]
 8004638:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004738 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 800463c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d801      	bhi.n	800464a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004646:	230b      	movs	r3, #11
 8004648:	e063      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800464a:	edd7 7a00 	vldr	s15, [r7]
 800464e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	d801      	bhi.n	8004660 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 800465c:	2301      	movs	r3, #1
 800465e:	e058      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004660:	edd7 7a00 	vldr	s15, [r7]
 8004664:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004670:	d801      	bhi.n	8004676 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004672:	2302      	movs	r3, #2
 8004674:	e04d      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004676:	edd7 7a00 	vldr	s15, [r7]
 800467a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800473c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 800467e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004686:	d801      	bhi.n	800468c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004688:	2303      	movs	r3, #3
 800468a:	e042      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800468c:	edd7 7a00 	vldr	s15, [r7]
 8004690:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004740 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	d801      	bhi.n	80046a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800469e:	2304      	movs	r3, #4
 80046a0:	e037      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046a2:	edd7 7a00 	vldr	s15, [r7]
 80046a6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004744 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80046aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	d801      	bhi.n	80046b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80046b4:	2305      	movs	r3, #5
 80046b6:	e02c      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046b8:	edd7 7a00 	vldr	s15, [r7]
 80046bc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004748 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80046c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d801      	bhi.n	80046ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80046ca:	2306      	movs	r3, #6
 80046cc:	e021      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046ce:	edd7 7a00 	vldr	s15, [r7]
 80046d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800474c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80046d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d801      	bhi.n	80046e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80046e0:	2307      	movs	r3, #7
 80046e2:	e016      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046e4:	edd7 7a00 	vldr	s15, [r7]
 80046e8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004750 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80046ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d801      	bhi.n	80046fa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80046f6:	2308      	movs	r3, #8
 80046f8:	e00b      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046fa:	edd7 7a00 	vldr	s15, [r7]
 80046fe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004754 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	d801      	bhi.n	8004710 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 800470c:	2309      	movs	r3, #9
 800470e:	e000      	b.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004710:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004712:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3320      	adds	r3, #32
 8004718:	7bfa      	ldrb	r2, [r7, #15]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fa7d 	bl	8004c1c <lsm6dso_xl_data_rate_set>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004728:	f04f 33ff 	mov.w	r3, #4294967295
 800472c:	e000      	b.n	8004730 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	3fcccccd 	.word	0x3fcccccd
 800473c:	42500000 	.word	0x42500000
 8004740:	42d00000 	.word	0x42d00000
 8004744:	43500000 	.word	0x43500000
 8004748:	43d08000 	.word	0x43d08000
 800474c:	44504000 	.word	0x44504000
 8004750:	44d06000 	.word	0x44d06000
 8004754:	45505000 	.word	0x45505000

08004758 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004764:	edd7 7a00 	vldr	s15, [r7]
 8004768:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004858 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 800476c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	d801      	bhi.n	800477a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004776:	230b      	movs	r3, #11
 8004778:	e063      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800477a:	edd7 7a00 	vldr	s15, [r7]
 800477e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	d801      	bhi.n	8004790 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 800478c:	2301      	movs	r3, #1
 800478e:	e058      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004790:	edd7 7a00 	vldr	s15, [r7]
 8004794:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a0:	d801      	bhi.n	80047a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e04d      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047a6:	edd7 7a00 	vldr	s15, [r7]
 80047aa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800485c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80047ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d801      	bhi.n	80047bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80047b8:	2303      	movs	r3, #3
 80047ba:	e042      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047bc:	edd7 7a00 	vldr	s15, [r7]
 80047c0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004860 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d801      	bhi.n	80047d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e037      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047d2:	edd7 7a00 	vldr	s15, [r7]
 80047d6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004864 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80047da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d801      	bhi.n	80047e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80047e4:	2305      	movs	r3, #5
 80047e6:	e02c      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047e8:	edd7 7a00 	vldr	s15, [r7]
 80047ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004868 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80047f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	d801      	bhi.n	80047fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80047fa:	2306      	movs	r3, #6
 80047fc:	e021      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047fe:	edd7 7a00 	vldr	s15, [r7]
 8004802:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800486c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	d801      	bhi.n	8004814 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004810:	2307      	movs	r3, #7
 8004812:	e016      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004814:	edd7 7a00 	vldr	s15, [r7]
 8004818:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004870 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 800481c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	d801      	bhi.n	800482a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004826:	2308      	movs	r3, #8
 8004828:	e00b      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800482a:	edd7 7a00 	vldr	s15, [r7]
 800482e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004874 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	d801      	bhi.n	8004840 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800483c:	2309      	movs	r3, #9
 800483e:	e000      	b.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004840:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	3fcccccd 	.word	0x3fcccccd
 800485c:	42500000 	.word	0x42500000
 8004860:	42d00000 	.word	0x42d00000
 8004864:	43500000 	.word	0x43500000
 8004868:	43d08000 	.word	0x43d08000
 800486c:	44504000 	.word	0x44504000
 8004870:	44d06000 	.word	0x44d06000
 8004874:	45505000 	.word	0x45505000

08004878 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004884:	edd7 7a00 	vldr	s15, [r7]
 8004888:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800488c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004894:	d801      	bhi.n	800489a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004896:	2301      	movs	r3, #1
 8004898:	e058      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800489a:	edd7 7a00 	vldr	s15, [r7]
 800489e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	d801      	bhi.n	80048b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e04d      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048b0:	edd7 7a00 	vldr	s15, [r7]
 80048b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80048b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	d801      	bhi.n	80048c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e042      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048c6:	edd7 7a00 	vldr	s15, [r7]
 80048ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004978 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80048ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d6:	d801      	bhi.n	80048dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80048d8:	2304      	movs	r3, #4
 80048da:	e037      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048dc:	edd7 7a00 	vldr	s15, [r7]
 80048e0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800497c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80048e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	d801      	bhi.n	80048f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80048ee:	2305      	movs	r3, #5
 80048f0:	e02c      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048f2:	edd7 7a00 	vldr	s15, [r7]
 80048f6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004980 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80048fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	d801      	bhi.n	8004908 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004904:	2306      	movs	r3, #6
 8004906:	e021      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004908:	edd7 7a00 	vldr	s15, [r7]
 800490c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004984 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d801      	bhi.n	800491e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800491a:	2307      	movs	r3, #7
 800491c:	e016      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800491e:	edd7 7a00 	vldr	s15, [r7]
 8004922:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004988 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	d801      	bhi.n	8004934 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004930:	2308      	movs	r3, #8
 8004932:	e00b      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004934:	edd7 7a00 	vldr	s15, [r7]
 8004938:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800498c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800493c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004944:	d801      	bhi.n	800494a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004946:	2309      	movs	r3, #9
 8004948:	e000      	b.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800494a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800494c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3320      	adds	r3, #32
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fb2a 	bl	8004fb0 <lsm6dso_gy_data_rate_set>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	e000      	b.n	800496a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	42500000 	.word	0x42500000
 8004978:	42d00000 	.word	0x42d00000
 800497c:	43500000 	.word	0x43500000
 8004980:	43d08000 	.word	0x43d08000
 8004984:	44504000 	.word	0x44504000
 8004988:	44d06000 	.word	0x44d06000
 800498c:	45505000 	.word	0x45505000

08004990 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800499c:	edd7 7a00 	vldr	s15, [r7]
 80049a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ac:	d801      	bhi.n	80049b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e058      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049b2:	edd7 7a00 	vldr	s15, [r7]
 80049b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c2:	d801      	bhi.n	80049c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e04d      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049c8:	edd7 7a00 	vldr	s15, [r7]
 80049cc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a78 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80049d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d8:	d801      	bhi.n	80049de <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80049da:	2303      	movs	r3, #3
 80049dc:	e042      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049de:	edd7 7a00 	vldr	s15, [r7]
 80049e2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80049e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d801      	bhi.n	80049f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80049f0:	2304      	movs	r3, #4
 80049f2:	e037      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049f4:	edd7 7a00 	vldr	s15, [r7]
 80049f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004a80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80049fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a04:	d801      	bhi.n	8004a0a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004a06:	2305      	movs	r3, #5
 8004a08:	e02c      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a0a:	edd7 7a00 	vldr	s15, [r7]
 8004a0e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1a:	d801      	bhi.n	8004a20 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004a1c:	2306      	movs	r3, #6
 8004a1e:	e021      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a20:	edd7 7a00 	vldr	s15, [r7]
 8004a24:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004a88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a30:	d801      	bhi.n	8004a36 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004a32:	2307      	movs	r3, #7
 8004a34:	e016      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a36:	edd7 7a00 	vldr	s15, [r7]
 8004a3a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	d801      	bhi.n	8004a4c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	e00b      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a4c:	edd7 7a00 	vldr	s15, [r7]
 8004a50:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a90 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	d801      	bhi.n	8004a62 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004a5e:	2309      	movs	r3, #9
 8004a60:	e000      	b.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a62:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	42500000 	.word	0x42500000
 8004a7c:	42d00000 	.word	0x42d00000
 8004a80:	43500000 	.word	0x43500000
 8004a84:	43d08000 	.word	0x43d08000
 8004a88:	44504000 	.word	0x44504000
 8004a8c:	44d06000 	.word	0x44d06000
 8004a90:	45505000 	.word	0x45505000

08004a94 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a94:	b590      	push	{r4, r7, lr}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	72fb      	strb	r3, [r7, #11]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	695c      	ldr	r4, [r3, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	7b1b      	ldrb	r3, [r3, #12]
 8004ab4:	b298      	uxth	r0, r3
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
 8004ab8:	b299      	uxth	r1, r3
 8004aba:	893b      	ldrh	r3, [r7, #8]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	47a0      	blx	r4
 8004ac0:	4603      	mov	r3, r0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd90      	pop	{r4, r7, pc}

08004aca <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004aca:	b590      	push	{r4, r7, lr}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	72fb      	strb	r3, [r7, #11]
 8004ada:	4613      	mov	r3, r2
 8004adc:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	691c      	ldr	r4, [r3, #16]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	7b1b      	ldrb	r3, [r3, #12]
 8004aea:	b298      	uxth	r0, r3
 8004aec:	7afb      	ldrb	r3, [r7, #11]
 8004aee:	b299      	uxth	r1, r3
 8004af0:	893b      	ldrh	r3, [r7, #8]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	47a0      	blx	r4
 8004af6:	4603      	mov	r3, r0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}

08004b00 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	72fb      	strb	r3, [r7, #11]
 8004b10:	4613      	mov	r3, r2
 8004b12:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685c      	ldr	r4, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68d8      	ldr	r0, [r3, #12]
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	7af9      	ldrb	r1, [r7, #11]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	47a0      	blx	r4
 8004b24:	6178      	str	r0, [r7, #20]

  return ret;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd90      	pop	{r4, r7, pc}

08004b30 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	72fb      	strb	r3, [r7, #11]
 8004b40:	4613      	mov	r3, r2
 8004b42:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681c      	ldr	r4, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68d8      	ldr	r0, [r3, #12]
 8004b4c:	893b      	ldrh	r3, [r7, #8]
 8004b4e:	7af9      	ldrb	r1, [r7, #11]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	47a0      	blx	r4
 8004b54:	6178      	str	r0, [r7, #20]

  return ret;
 8004b56:	697b      	ldr	r3, [r7, #20]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}

08004b60 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b6c:	f107 0208 	add.w	r2, r7, #8
 8004b70:	2301      	movs	r3, #1
 8004b72:	2110      	movs	r1, #16
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ffc3 	bl	8004b00 <lsm6dso_read_reg>
 8004b7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	7a3b      	ldrb	r3, [r7, #8]
 8004b8c:	f362 0383 	bfi	r3, r2, #2, #2
 8004b90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b92:	f107 0208 	add.w	r2, r7, #8
 8004b96:	2301      	movs	r3, #1
 8004b98:	2110      	movs	r1, #16
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff ffc8 	bl	8004b30 <lsm6dso_write_reg>
 8004ba0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004bb6:	f107 0208 	add.w	r2, r7, #8
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2110      	movs	r1, #16
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ff9e 	bl	8004b00 <lsm6dso_read_reg>
 8004bc4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004bc6:	7a3b      	ldrb	r3, [r7, #8]
 8004bc8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d81a      	bhi.n	8004c08 <lsm6dso_xl_full_scale_get+0x5c>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <lsm6dso_xl_full_scale_get+0x2c>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bf1 	.word	0x08004bf1
 8004be0:	08004bf9 	.word	0x08004bf9
 8004be4:	08004c01 	.word	0x08004c01
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
      break;
 8004bee:	e00f      	b.n	8004c10 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
      break;
 8004bf6:	e00b      	b.n	8004c10 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
      break;
 8004bfe:	e007      	b.n	8004c10 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2203      	movs	r2, #3
 8004c04:	701a      	strb	r2, [r3, #0]
      break;
 8004c06:	e003      	b.n	8004c10 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
      break;
 8004c0e:	bf00      	nop
  }

  return ret;
 8004c10:	68fb      	ldr	r3, [r7, #12]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fc96 	bl	8005564 <lsm6dso_fsm_enable_get>
 8004c38:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <lsm6dso_xl_data_rate_set+0x28>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	e0e1      	b.n	8004e08 <lsm6dso_xl_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c44:	7b3b      	ldrb	r3, [r7, #12]
 8004c46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c4a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c4c:	7b3b      	ldrb	r3, [r7, #12]
 8004c4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c52:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c58:	7b3b      	ldrb	r3, [r7, #12]
 8004c5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c5e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c60:	4313      	orrs	r3, r2
 8004c62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c64:	7b3b      	ldrb	r3, [r7, #12]
 8004c66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c6a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c70:	7b3b      	ldrb	r3, [r7, #12]
 8004c72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004c7c:	7b3b      	ldrb	r3, [r7, #12]
 8004c7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004c88:	7b3b      	ldrb	r3, [r7, #12]
 8004c8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004c94:	7b3b      	ldrb	r3, [r7, #12]
 8004c96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004ca0:	7b7b      	ldrb	r3, [r7, #13]
 8004ca2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ca6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004cac:	7b7b      	ldrb	r3, [r7, #13]
 8004cae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cb2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004cb8:	7b7b      	ldrb	r3, [r7, #13]
 8004cba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004cbe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004cc4:	7b7b      	ldrb	r3, [r7, #13]
 8004cc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004cca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004cd0:	7b7b      	ldrb	r3, [r7, #13]
 8004cd2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004cd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004cdc:	7b7b      	ldrb	r3, [r7, #13]
 8004cde:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ce2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004ce8:	7b7b      	ldrb	r3, [r7, #13]
 8004cea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004cee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004cf4:	7b7b      	ldrb	r3, [r7, #13]
 8004cf6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cfa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d164      	bne.n	8004dce <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004d04:	f107 030b 	add.w	r3, r7, #11
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fc4c 	bl	80055a8 <lsm6dso_fsm_data_rate_get>
 8004d10:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <lsm6dso_xl_data_rate_set+0x100>
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	e075      	b.n	8004e08 <lsm6dso_xl_data_rate_set+0x1ec>

    switch (fsm_odr)
 8004d1c:	7afb      	ldrb	r3, [r7, #11]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d852      	bhi.n	8004dc8 <lsm6dso_xl_data_rate_set+0x1ac>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <lsm6dso_xl_data_rate_set+0x10c>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d4b 	.word	0x08004d4b
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d93 	.word	0x08004d93
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d42:	e045      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	75fb      	strb	r3, [r7, #23]
        break;
 8004d48:	e042      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d50:	2302      	movs	r3, #2
 8004d52:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d54:	e03c      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d60:	e036      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	75fb      	strb	r3, [r7, #23]
        break;
 8004d66:	e033      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d72:	e02d      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d102      	bne.n	8004d80 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	75fb      	strb	r3, [r7, #23]
        break;
 8004d7e:	e027      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d102      	bne.n	8004d8c <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
        break;
 8004d8a:	e021      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d90:	e01e      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d98:	2304      	movs	r3, #4
 8004d9a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d9c:	e018      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d102      	bne.n	8004daa <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004da4:	2304      	movs	r3, #4
 8004da6:	75fb      	strb	r3, [r7, #23]
        break;
 8004da8:	e012      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d102      	bne.n	8004db6 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004db0:	2304      	movs	r3, #4
 8004db2:	75fb      	strb	r3, [r7, #23]
        break;
 8004db4:	e00c      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d102      	bne.n	8004dc2 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8004dc0:	e006      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	75fb      	strb	r3, [r7, #23]
        break;
 8004dc6:	e003      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>

      default:
        odr_xl = val;
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	75fb      	strb	r3, [r7, #23]
        break;
 8004dcc:	e000      	b.n	8004dd0 <lsm6dso_xl_data_rate_set+0x1b4>
    }
  }
 8004dce:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004dd0:	f107 0208 	add.w	r2, r7, #8
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	2110      	movs	r1, #16
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fe91 	bl	8004b00 <lsm6dso_read_reg>
 8004dde:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	7a3b      	ldrb	r3, [r7, #8]
 8004dea:	f362 1307 	bfi	r3, r2, #4, #4
 8004dee:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	2301      	movs	r3, #1
 8004df6:	2110      	movs	r1, #16
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fe99 	bl	8004b30 <lsm6dso_write_reg>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]

  return ret;
 8004e06:	693b      	ldr	r3, [r7, #16]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004e1a:	f107 0208 	add.w	r2, r7, #8
 8004e1e:	2301      	movs	r3, #1
 8004e20:	2110      	movs	r1, #16
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fe6c 	bl	8004b00 <lsm6dso_read_reg>
 8004e28:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004e2a:	7a3b      	ldrb	r3, [r7, #8]
 8004e2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b0b      	cmp	r3, #11
 8004e34:	d84a      	bhi.n	8004ecc <lsm6dso_xl_data_rate_get+0xbc>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <lsm6dso_xl_data_rate_get+0x2c>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e6d 	.word	0x08004e6d
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004e7d 	.word	0x08004e7d
 8004e48:	08004e85 	.word	0x08004e85
 8004e4c:	08004e8d 	.word	0x08004e8d
 8004e50:	08004e95 	.word	0x08004e95
 8004e54:	08004e9d 	.word	0x08004e9d
 8004e58:	08004ea5 	.word	0x08004ea5
 8004e5c:	08004ead 	.word	0x08004ead
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004ebd 	.word	0x08004ebd
 8004e68:	08004ec5 	.word	0x08004ec5
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
      break;
 8004e72:	e02f      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2201      	movs	r2, #1
 8004e78:	701a      	strb	r2, [r3, #0]
      break;
 8004e7a:	e02b      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	701a      	strb	r2, [r3, #0]
      break;
 8004e82:	e027      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2203      	movs	r2, #3
 8004e88:	701a      	strb	r2, [r3, #0]
      break;
 8004e8a:	e023      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	701a      	strb	r2, [r3, #0]
      break;
 8004e92:	e01f      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2205      	movs	r2, #5
 8004e98:	701a      	strb	r2, [r3, #0]
      break;
 8004e9a:	e01b      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2206      	movs	r2, #6
 8004ea0:	701a      	strb	r2, [r3, #0]
      break;
 8004ea2:	e017      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2207      	movs	r2, #7
 8004ea8:	701a      	strb	r2, [r3, #0]
      break;
 8004eaa:	e013      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2208      	movs	r2, #8
 8004eb0:	701a      	strb	r2, [r3, #0]
      break;
 8004eb2:	e00f      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2209      	movs	r2, #9
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e00b      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	220a      	movs	r2, #10
 8004ec0:	701a      	strb	r2, [r3, #0]
      break;
 8004ec2:	e007      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	220b      	movs	r2, #11
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e003      	b.n	8004ed4 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
      break;
 8004ed2:	bf00      	nop
  }

  return ret;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop

08004ee0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004eec:	f107 0208 	add.w	r2, r7, #8
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	2111      	movs	r1, #17
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fe03 	bl	8004b00 <lsm6dso_read_reg>
 8004efa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	7a3b      	ldrb	r3, [r7, #8]
 8004f0c:	f362 0343 	bfi	r3, r2, #1, #3
 8004f10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f12:	f107 0208 	add.w	r2, r7, #8
 8004f16:	2301      	movs	r3, #1
 8004f18:	2111      	movs	r1, #17
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fe08 	bl	8004b30 <lsm6dso_write_reg>
 8004f20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f36:	f107 0208 	add.w	r2, r7, #8
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	2111      	movs	r1, #17
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fdde 	bl	8004b00 <lsm6dso_read_reg>
 8004f44:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004f46:	7a3b      	ldrb	r3, [r7, #8]
 8004f48:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d824      	bhi.n	8004f9c <lsm6dso_gy_full_scale_get+0x70>
 8004f52:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <lsm6dso_gy_full_scale_get+0x2c>)
 8004f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f7d 	.word	0x08004f7d
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004f95 	.word	0x08004f95
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	e013      	b.n	8004fa4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
      break;
 8004f82:	e00f      	b.n	8004fa4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2202      	movs	r2, #2
 8004f88:	701a      	strb	r2, [r3, #0]
      break;
 8004f8a:	e00b      	b.n	8004fa4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2204      	movs	r2, #4
 8004f90:	701a      	strb	r2, [r3, #0]
      break;
 8004f92:	e007      	b.n	8004fa4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2206      	movs	r2, #6
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	e003      	b.n	8004fa4 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
      break;
 8004fa2:	bf00      	nop
  }

  return ret;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop

08004fb0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004fc0:	f107 030c 	add.w	r3, r7, #12
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 facc 	bl	8005564 <lsm6dso_fsm_enable_get>
 8004fcc:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <lsm6dso_gy_data_rate_set+0x28>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	e0e1      	b.n	800519c <lsm6dso_gy_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004fd8:	7b3b      	ldrb	r3, [r7, #12]
 8004fda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fde:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004fe0:	7b3b      	ldrb	r3, [r7, #12]
 8004fe2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004fe6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004fec:	7b3b      	ldrb	r3, [r7, #12]
 8004fee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ff2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004ff8:	7b3b      	ldrb	r3, [r7, #12]
 8004ffa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ffe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005000:	4313      	orrs	r3, r2
 8005002:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005004:	7b3b      	ldrb	r3, [r7, #12]
 8005006:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800500a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800500c:	4313      	orrs	r3, r2
 800500e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005010:	7b3b      	ldrb	r3, [r7, #12]
 8005012:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005016:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005018:	4313      	orrs	r3, r2
 800501a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800501c:	7b3b      	ldrb	r3, [r7, #12]
 800501e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005022:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005024:	4313      	orrs	r3, r2
 8005026:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005028:	7b3b      	ldrb	r3, [r7, #12]
 800502a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800502e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005030:	4313      	orrs	r3, r2
 8005032:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005034:	7b7b      	ldrb	r3, [r7, #13]
 8005036:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800503a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800503c:	4313      	orrs	r3, r2
 800503e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005040:	7b7b      	ldrb	r3, [r7, #13]
 8005042:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005046:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005048:	4313      	orrs	r3, r2
 800504a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800504c:	7b7b      	ldrb	r3, [r7, #13]
 800504e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005052:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005054:	4313      	orrs	r3, r2
 8005056:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005058:	7b7b      	ldrb	r3, [r7, #13]
 800505a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800505e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005060:	4313      	orrs	r3, r2
 8005062:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005064:	7b7b      	ldrb	r3, [r7, #13]
 8005066:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800506a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800506c:	4313      	orrs	r3, r2
 800506e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005070:	7b7b      	ldrb	r3, [r7, #13]
 8005072:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005076:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005078:	4313      	orrs	r3, r2
 800507a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800507c:	7b7b      	ldrb	r3, [r7, #13]
 800507e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005082:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005084:	4313      	orrs	r3, r2
 8005086:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005088:	7b7b      	ldrb	r3, [r7, #13]
 800508a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800508e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005090:	4313      	orrs	r3, r2
 8005092:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005094:	2b01      	cmp	r3, #1
 8005096:	d164      	bne.n	8005162 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005098:	f107 030b 	add.w	r3, r7, #11
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa82 	bl	80055a8 <lsm6dso_fsm_data_rate_get>
 80050a4:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <lsm6dso_gy_data_rate_set+0x100>
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	e075      	b.n	800519c <lsm6dso_gy_data_rate_set+0x1ec>

    switch (fsm_odr)
 80050b0:	7afb      	ldrb	r3, [r7, #11]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d852      	bhi.n	800515c <lsm6dso_gy_data_rate_set+0x1ac>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <lsm6dso_gy_data_rate_set+0x10c>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	080050df 	.word	0x080050df
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	08005127 	.word	0x08005127
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80050d6:	e045      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	75fb      	strb	r3, [r7, #23]
        break;
 80050dc:	e042      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80050e4:	2302      	movs	r3, #2
 80050e6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80050e8:	e03c      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d102      	bne.n	80050f6 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80050f0:	2302      	movs	r3, #2
 80050f2:	75fb      	strb	r3, [r7, #23]
        break;
 80050f4:	e036      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	75fb      	strb	r3, [r7, #23]
        break;
 80050fa:	e033      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d102      	bne.n	8005108 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005102:	2303      	movs	r3, #3
 8005104:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005106:	e02d      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d102      	bne.n	8005114 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800510e:	2303      	movs	r3, #3
 8005110:	75fb      	strb	r3, [r7, #23]
        break;
 8005112:	e027      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d102      	bne.n	8005120 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800511a:	2303      	movs	r3, #3
 800511c:	75fb      	strb	r3, [r7, #23]
        break;
 800511e:	e021      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	75fb      	strb	r3, [r7, #23]
        break;
 8005124:	e01e      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800512c:	2304      	movs	r3, #4
 800512e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005130:	e018      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005138:	2304      	movs	r3, #4
 800513a:	75fb      	strb	r3, [r7, #23]
        break;
 800513c:	e012      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d102      	bne.n	800514a <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005144:	2304      	movs	r3, #4
 8005146:	75fb      	strb	r3, [r7, #23]
        break;
 8005148:	e00c      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d102      	bne.n	8005156 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005150:	2304      	movs	r3, #4
 8005152:	75fb      	strb	r3, [r7, #23]
        break;
 8005154:	e006      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	75fb      	strb	r3, [r7, #23]
        break;
 800515a:	e003      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>

      default:
        odr_gy = val;
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	75fb      	strb	r3, [r7, #23]
        break;
 8005160:	e000      	b.n	8005164 <lsm6dso_gy_data_rate_set+0x1b4>
    }
  }
 8005162:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005164:	f107 0208 	add.w	r2, r7, #8
 8005168:	2301      	movs	r3, #1
 800516a:	2111      	movs	r1, #17
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fcc7 	bl	8004b00 <lsm6dso_read_reg>
 8005172:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	b2da      	uxtb	r2, r3
 800517c:	7a3b      	ldrb	r3, [r7, #8]
 800517e:	f362 1307 	bfi	r3, r2, #4, #4
 8005182:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005184:	f107 0208 	add.w	r2, r7, #8
 8005188:	2301      	movs	r3, #1
 800518a:	2111      	movs	r1, #17
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fccf 	bl	8004b30 <lsm6dso_write_reg>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  return ret;
 800519a:	693b      	ldr	r3, [r7, #16]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80051ae:	f107 0208 	add.w	r2, r7, #8
 80051b2:	2301      	movs	r3, #1
 80051b4:	2111      	movs	r1, #17
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fca2 	bl	8004b00 <lsm6dso_read_reg>
 80051bc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80051be:	7a3b      	ldrb	r3, [r7, #8]
 80051c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b0a      	cmp	r3, #10
 80051c8:	d844      	bhi.n	8005254 <lsm6dso_gy_data_rate_get+0xb0>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <lsm6dso_gy_data_rate_get+0x2c>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051fd 	.word	0x080051fd
 80051d4:	08005205 	.word	0x08005205
 80051d8:	0800520d 	.word	0x0800520d
 80051dc:	08005215 	.word	0x08005215
 80051e0:	0800521d 	.word	0x0800521d
 80051e4:	08005225 	.word	0x08005225
 80051e8:	0800522d 	.word	0x0800522d
 80051ec:	08005235 	.word	0x08005235
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	08005245 	.word	0x08005245
 80051f8:	0800524d 	.word	0x0800524d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
      break;
 8005202:	e02b      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
      break;
 800520a:	e027      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]
      break;
 8005212:	e023      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2203      	movs	r2, #3
 8005218:	701a      	strb	r2, [r3, #0]
      break;
 800521a:	e01f      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2204      	movs	r2, #4
 8005220:	701a      	strb	r2, [r3, #0]
      break;
 8005222:	e01b      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2205      	movs	r2, #5
 8005228:	701a      	strb	r2, [r3, #0]
      break;
 800522a:	e017      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2206      	movs	r2, #6
 8005230:	701a      	strb	r2, [r3, #0]
      break;
 8005232:	e013      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2207      	movs	r2, #7
 8005238:	701a      	strb	r2, [r3, #0]
      break;
 800523a:	e00f      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2208      	movs	r2, #8
 8005240:	701a      	strb	r2, [r3, #0]
      break;
 8005242:	e00b      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2209      	movs	r2, #9
 8005248:	701a      	strb	r2, [r3, #0]
      break;
 800524a:	e007      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	220a      	movs	r2, #10
 8005250:	701a      	strb	r2, [r3, #0]
      break;
 8005252:	e003      	b.n	800525c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
      break;
 800525a:	bf00      	nop
  }

  return ret;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop

08005268 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005274:	f107 0208 	add.w	r2, r7, #8
 8005278:	2301      	movs	r3, #1
 800527a:	2112      	movs	r1, #18
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fc3f 	bl	8004b00 <lsm6dso_read_reg>
 8005282:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	7a3b      	ldrb	r3, [r7, #8]
 8005294:	f362 1386 	bfi	r3, r2, #6, #1
 8005298:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800529a:	f107 0208 	add.w	r2, r7, #8
 800529e:	2301      	movs	r3, #1
 80052a0:	2112      	movs	r1, #18
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fc44 	bl	8004b30 <lsm6dso_write_reg>
 80052a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80052be:	f107 020c 	add.w	r2, r7, #12
 80052c2:	2306      	movs	r3, #6
 80052c4:	2122      	movs	r1, #34	; 0x22
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fc1a 	bl	8004b00 <lsm6dso_read_reg>
 80052cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80052ce:	7b7b      	ldrb	r3, [r7, #13]
 80052d0:	b21a      	sxth	r2, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	7b3b      	ldrb	r3, [r7, #12]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	b21a      	sxth	r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	3302      	adds	r3, #2
 80052f6:	b212      	sxth	r2, r2
 80052f8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	3302      	adds	r3, #2
 80052fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005302:	b29b      	uxth	r3, r3
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	b29a      	uxth	r2, r3
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	b29b      	uxth	r3, r3
 800530c:	4413      	add	r3, r2
 800530e:	b29a      	uxth	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	3302      	adds	r3, #2
 8005314:	b212      	sxth	r2, r2
 8005316:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005318:	7c7a      	ldrb	r2, [r7, #17]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	3304      	adds	r3, #4
 800531e:	b212      	sxth	r2, r2
 8005320:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	3304      	adds	r3, #4
 8005326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800532a:	b29b      	uxth	r3, r3
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	b29a      	uxth	r2, r3
 8005330:	7c3b      	ldrb	r3, [r7, #16]
 8005332:	b29b      	uxth	r3, r3
 8005334:	4413      	add	r3, r2
 8005336:	b29a      	uxth	r2, r3
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	3304      	adds	r3, #4
 800533c:	b212      	sxth	r2, r2
 800533e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005340:	697b      	ldr	r3, [r7, #20]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b086      	sub	sp, #24
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005354:	f107 020c 	add.w	r2, r7, #12
 8005358:	2306      	movs	r3, #6
 800535a:	2128      	movs	r1, #40	; 0x28
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fbcf 	bl	8004b00 <lsm6dso_read_reg>
 8005362:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005364:	7b7b      	ldrb	r3, [r7, #13]
 8005366:	b21a      	sxth	r2, r3
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005372:	b29b      	uxth	r3, r3
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	b29a      	uxth	r2, r3
 8005378:	7b3b      	ldrb	r3, [r7, #12]
 800537a:	b29b      	uxth	r3, r3
 800537c:	4413      	add	r3, r2
 800537e:	b29b      	uxth	r3, r3
 8005380:	b21a      	sxth	r2, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	3302      	adds	r3, #2
 800538c:	b212      	sxth	r2, r2
 800538e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	3302      	adds	r3, #2
 8005394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005398:	b29b      	uxth	r3, r3
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	b29a      	uxth	r2, r3
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3302      	adds	r3, #2
 80053aa:	b212      	sxth	r2, r2
 80053ac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80053ae:	7c7a      	ldrb	r2, [r7, #17]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	3304      	adds	r3, #4
 80053b4:	b212      	sxth	r2, r2
 80053b6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	3304      	adds	r3, #4
 80053bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	7c3b      	ldrb	r3, [r7, #16]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	3304      	adds	r3, #4
 80053d2:	b212      	sxth	r2, r2
 80053d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80053d6:	697b      	ldr	r3, [r7, #20]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80053ec:	2300      	movs	r3, #0
 80053ee:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	7a3b      	ldrb	r3, [r7, #8]
 80053fa:	f362 1387 	bfi	r3, r2, #6, #2
 80053fe:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005400:	f107 0208 	add.w	r2, r7, #8
 8005404:	2301      	movs	r3, #1
 8005406:	2101      	movs	r1, #1
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fb91 	bl	8004b30 <lsm6dso_write_reg>
 800540e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005410:	68fb      	ldr	r3, [r7, #12]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005424:	2301      	movs	r3, #1
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	210f      	movs	r1, #15
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fb68 	bl	8004b00 <lsm6dso_read_reg>
 8005430:	60f8      	str	r0, [r7, #12]

  return ret;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005448:	f107 0208 	add.w	r2, r7, #8
 800544c:	2301      	movs	r3, #1
 800544e:	2112      	movs	r1, #18
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fb55 	bl	8004b00 <lsm6dso_read_reg>
 8005456:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	7a3b      	ldrb	r3, [r7, #8]
 8005468:	f362 0382 	bfi	r3, r2, #2, #1
 800546c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800546e:	f107 0208 	add.w	r2, r7, #8
 8005472:	2301      	movs	r3, #1
 8005474:	2112      	movs	r1, #18
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fb5a 	bl	8004b30 <lsm6dso_write_reg>
 800547c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800547e:	68fb      	ldr	r3, [r7, #12]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005494:	f107 020c 	add.w	r2, r7, #12
 8005498:	2301      	movs	r3, #1
 800549a:	2118      	movs	r1, #24
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fb2f 	bl	8004b00 <lsm6dso_read_reg>
 80054a2:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	09db      	lsrs	r3, r3, #7
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	7b3b      	ldrb	r3, [r7, #12]
 80054b2:	f362 0341 	bfi	r3, r2, #1, #1
 80054b6:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80054b8:	f107 020c 	add.w	r2, r7, #12
 80054bc:	2301      	movs	r3, #1
 80054be:	2118      	movs	r1, #24
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff fb35 	bl	8004b30 <lsm6dso_write_reg>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	4413      	add	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <lsm6dso_i3c_disable_set+0x50>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	e01b      	b.n	8005510 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80054d8:	f107 0210 	add.w	r2, r7, #16
 80054dc:	2301      	movs	r3, #1
 80054de:	2162      	movs	r1, #98	; 0x62
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff fb0d 	bl	8004b00 <lsm6dso_read_reg>
 80054e6:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	7c3b      	ldrb	r3, [r7, #16]
 80054f2:	f362 03c4 	bfi	r3, r2, #3, #2
 80054f6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80054f8:	f107 0210 	add.w	r2, r7, #16
 80054fc:	2301      	movs	r3, #1
 80054fe:	2162      	movs	r1, #98	; 0x62
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fb15 	bl	8004b30 <lsm6dso_write_reg>
 8005506:	4602      	mov	r2, r0
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  return ret;
 800550e:	697b      	ldr	r3, [r7, #20]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005524:	f107 0208 	add.w	r2, r7, #8
 8005528:	2301      	movs	r3, #1
 800552a:	210a      	movs	r1, #10
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fae7 	bl	8004b00 <lsm6dso_read_reg>
 8005532:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	b2da      	uxtb	r2, r3
 8005542:	7a3b      	ldrb	r3, [r7, #8]
 8005544:	f362 0302 	bfi	r3, r2, #0, #3
 8005548:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	2301      	movs	r3, #1
 8005550:	210a      	movs	r1, #10
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff faec 	bl	8004b30 <lsm6dso_write_reg>
 8005558:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800556e:	2102      	movs	r1, #2
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ff35 	bl	80053e0 <lsm6dso_mem_bank_set>
 8005576:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005578:	2302      	movs	r3, #2
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	2146      	movs	r1, #70	; 0x46
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fabe 	bl	8004b00 <lsm6dso_read_reg>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800558c:	2100      	movs	r1, #0
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff ff26 	bl	80053e0 <lsm6dso_mem_bank_set>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  return ret;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80055b2:	2102      	movs	r1, #2
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ff13 	bl	80053e0 <lsm6dso_mem_bank_set>
 80055ba:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <lsm6dso_fsm_data_rate_get+0x1e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	e03a      	b.n	800563c <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 80055c6:	f107 0208 	add.w	r2, r7, #8
 80055ca:	2301      	movs	r3, #1
 80055cc:	215f      	movs	r1, #95	; 0x5f
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fa96 	bl	8004b00 <lsm6dso_read_reg>
 80055d4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d125      	bne.n	8005628 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 80055dc:	7a3b      	ldrb	r3, [r7, #8]
 80055de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d81b      	bhi.n	8005620 <lsm6dso_fsm_data_rate_get+0x78>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <lsm6dso_fsm_data_rate_get+0x48>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005609 	.word	0x08005609
 80055f8:	08005611 	.word	0x08005611
 80055fc:	08005619 	.word	0x08005619
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
      break;
 8005606:	e010      	b.n	800562a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
      break;
 800560e:	e00c      	b.n	800562a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2202      	movs	r2, #2
 8005614:	701a      	strb	r2, [r3, #0]
      break;
 8005616:	e008      	b.n	800562a <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2203      	movs	r2, #3
 800561c:	701a      	strb	r2, [r3, #0]
      break;
 800561e:	e004      	b.n	800562a <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
      break;
 8005626:	e000      	b.n	800562a <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005628:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800562a:	2100      	movs	r1, #0
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fed7 	bl	80053e0 <lsm6dso_mem_bank_set>
 8005632:	4602      	mov	r2, r0
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  return ret;
 800563a:	68fb      	ldr	r3, [r7, #12]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005652:	2301      	movs	r3, #1
 8005654:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d06e      	beq.n	800573e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b02      	cmp	r3, #2
 8005664:	f200 809d 	bhi.w	80057a2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d032      	beq.n	80056da <IKS01A3_MOTION_SENSOR_Init+0x96>
 8005674:	e095      	b.n	80057a2 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8005676:	6838      	ldr	r0, [r7, #0]
 8005678:	f000 f966 	bl	8005948 <LSM6DSO_0_Probe>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295
 8005686:	e0cc      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005688:	4a68      	ldr	r2, [pc, #416]	; (800582c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4967      	ldr	r1, [pc, #412]	; (8005830 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800569a:	f107 010c 	add.w	r1, r7, #12
 800569e:	4610      	mov	r0, r2
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80056a8:	f06f 0306 	mvn.w	r3, #6
 80056ac:	e0b9      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80056ae:	7b3b      	ldrb	r3, [r7, #12]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d103      	bne.n	80056bc <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	f043 0302 	orr.w	r3, r3, #2
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80056bc:	7b7b      	ldrb	r3, [r7, #13]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d103      	bne.n	80056ca <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80056ca:	7bbb      	ldrb	r3, [r7, #14]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d16c      	bne.n	80057aa <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	f043 0304 	orr.w	r3, r3, #4
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80056d8:	e067      	b.n	80057aa <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80056da:	6838      	ldr	r0, [r7, #0]
 80056dc:	f000 f9f4 	bl	8005ac8 <LIS2DW12_0_Probe>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ea:	e09a      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056ec:	4a4f      	ldr	r2, [pc, #316]	; (800582c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	494e      	ldr	r1, [pc, #312]	; (8005830 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056fe:	f107 010c 	add.w	r1, r7, #12
 8005702:	4610      	mov	r0, r2
 8005704:	4798      	blx	r3
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800570c:	f06f 0306 	mvn.w	r3, #6
 8005710:	e087      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005712:	7b3b      	ldrb	r3, [r7, #12]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d103      	bne.n	8005720 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005720:	7b7b      	ldrb	r3, [r7, #13]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d103      	bne.n	800572e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d13c      	bne.n	80057ae <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	f043 0304 	orr.w	r3, r3, #4
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800573c:	e037      	b.n	80057ae <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800573e:	6838      	ldr	r0, [r7, #0]
 8005740:	f000 fa6a 	bl	8005c18 <LIS2MDL_0_Probe>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	e068      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005750:	4a36      	ldr	r2, [pc, #216]	; (800582c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4935      	ldr	r1, [pc, #212]	; (8005830 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005762:	f107 010c 	add.w	r1, r7, #12
 8005766:	4610      	mov	r0, r2
 8005768:	4798      	blx	r3
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005770:	f06f 0306 	mvn.w	r3, #6
 8005774:	e055      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005776:	7b3b      	ldrb	r3, [r7, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d103      	bne.n	8005784 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f043 0302 	orr.w	r3, r3, #2
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005784:	7b7b      	ldrb	r3, [r7, #13]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d103      	bne.n	8005792 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10c      	bne.n	80057b2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	f043 0304 	orr.w	r3, r3, #4
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80057a0:	e007      	b.n	80057b2 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80057a2:	f06f 0301 	mvn.w	r3, #1
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80057a8:	e004      	b.n	80057b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057b2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	e031      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c2:	e02a      	b.n	800581a <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	4013      	ands	r3, r2
 80057ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d11e      	bne.n	800580e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80057d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	4013      	ands	r3, r2
 80057d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d8:	429a      	cmp	r2, r3
 80057da:	d118      	bne.n	800580e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057e4:	4814      	ldr	r0, [pc, #80]	; (8005838 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4413      	add	r3, r2
 80057ee:	440b      	add	r3, r1
 80057f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	490e      	ldr	r1, [pc, #56]	; (8005830 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057fe:	4610      	mov	r0, r2
 8005800:	4798      	blx	r3
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005808:	f06f 0304 	mvn.w	r3, #4
 800580c:	e009      	b.n	8005822 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	3301      	adds	r3, #1
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b02      	cmp	r3, #2
 800581e:	d9d1      	bls.n	80057c4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005822:	4618      	mov	r0, r3
 8005824:	3738      	adds	r7, #56	; 0x38
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000190 	.word	0x20000190
 8005830:	200003e4 	.word	0x200003e4
 8005834:	200000c4 	.word	0x200000c4
 8005838:	2000016c 	.word	0x2000016c

0800583c <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d903      	bls.n	8005854 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800584c:	f06f 0301 	mvn.w	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e028      	b.n	80058a6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005854:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	4013      	ands	r3, r2
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d11c      	bne.n	80058a0 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005866:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800586e:	4812      	ldr	r0, [pc, #72]	; (80058b8 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	440b      	add	r3, r1
 800587a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	490e      	ldr	r1, [pc, #56]	; (80058bc <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005892:	f06f 0304 	mvn.w	r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e005      	b.n	80058a6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e002      	b.n	80058a6 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80058a0:	f06f 0301 	mvn.w	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80058a6:	68fb      	ldr	r3, [r7, #12]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	2000019c 	.word	0x2000019c
 80058b4:	200000c4 	.word	0x200000c4
 80058b8:	2000016c 	.word	0x2000016c
 80058bc:	200003e4 	.word	0x200003e4

080058c0 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d903      	bls.n	80058da <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058d2:	f06f 0301 	mvn.w	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e029      	b.n	800592e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d11d      	bne.n	8005928 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058f4:	4812      	ldr	r0, [pc, #72]	; (8005940 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	440b      	add	r3, r1
 8005900:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	490f      	ldr	r1, [pc, #60]	; (8005944 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4610      	mov	r0, r2
 8005912:	4798      	blx	r3
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800591a:	f06f 0304 	mvn.w	r3, #4
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e005      	b.n	800592e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e002      	b.n	800592e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005928:	f06f 0301 	mvn.w	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800592e:	697b      	ldr	r3, [r7, #20]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	2000019c 	.word	0x2000019c
 800593c:	200000c4 	.word	0x200000c4
 8005940:	2000016c 	.word	0x2000016c
 8005944:	200003e4 	.word	0x200003e4

08005948 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b094      	sub	sp, #80	; 0x50
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005950:	2300      	movs	r3, #0
 8005952:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8005954:	2300      	movs	r3, #0
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8005958:	23d7      	movs	r3, #215	; 0xd7
 800595a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800595e:	4b4b      	ldr	r3, [pc, #300]	; (8005a8c <LSM6DSO_0_Probe+0x144>)
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005962:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <LSM6DSO_0_Probe+0x148>)
 8005964:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005966:	4b4b      	ldr	r3, [pc, #300]	; (8005a94 <LSM6DSO_0_Probe+0x14c>)
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800596a:	4b4b      	ldr	r3, [pc, #300]	; (8005a98 <LSM6DSO_0_Probe+0x150>)
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800596e:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <LSM6DSO_0_Probe+0x154>)
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005972:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <LSM6DSO_0_Probe+0x158>)
 8005974:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8005976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800597a:	4619      	mov	r1, r3
 800597c:	4849      	ldr	r0, [pc, #292]	; (8005aa4 <LSM6DSO_0_Probe+0x15c>)
 800597e:	f7fd fe81 	bl	8003684 <LSM6DSO_RegisterBusIO>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005988:	f06f 0306 	mvn.w	r3, #6
 800598c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598e:	e077      	b.n	8005a80 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8005990:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005994:	4619      	mov	r1, r3
 8005996:	4843      	ldr	r0, [pc, #268]	; (8005aa4 <LSM6DSO_0_Probe+0x15c>)
 8005998:	f7fd ff7e 	bl	8003898 <LSM6DSO_ReadID>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059a2:	f06f 0306 	mvn.w	r3, #6
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	e06a      	b.n	8005a80 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80059aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059ae:	2b6c      	cmp	r3, #108	; 0x6c
 80059b0:	d003      	beq.n	80059ba <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059b2:	f06f 0306 	mvn.w	r3, #6
 80059b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b8:	e062      	b.n	8005a80 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80059ba:	f107 030c 	add.w	r3, r7, #12
 80059be:	4619      	mov	r1, r3
 80059c0:	4838      	ldr	r0, [pc, #224]	; (8005aa4 <LSM6DSO_0_Probe+0x15c>)
 80059c2:	f7fd ff7f 	bl	80038c4 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80059c6:	7b7b      	ldrb	r3, [r7, #13]
 80059c8:	461a      	mov	r2, r3
 80059ca:	7b3b      	ldrb	r3, [r7, #12]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	431a      	orrs	r2, r3
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4313      	orrs	r3, r2
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <LSM6DSO_0_Probe+0x160>)
 80059d8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80059da:	4b34      	ldr	r3, [pc, #208]	; (8005aac <LSM6DSO_0_Probe+0x164>)
 80059dc:	4a31      	ldr	r2, [pc, #196]	; (8005aa4 <LSM6DSO_0_Probe+0x15c>)
 80059de:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <LSM6DSO_0_Probe+0x168>)
 80059e2:	4a34      	ldr	r2, [pc, #208]	; (8005ab4 <LSM6DSO_0_Probe+0x16c>)
 80059e4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d11d      	bne.n	8005a28 <LSM6DSO_0_Probe+0xe0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d018      	beq.n	8005a28 <LSM6DSO_0_Probe+0xe0>
 80059f6:	7b7b      	ldrb	r3, [r7, #13]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d115      	bne.n	8005a28 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80059fc:	4b2e      	ldr	r3, [pc, #184]	; (8005ab8 <LSM6DSO_0_Probe+0x170>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a2e      	ldr	r2, [pc, #184]	; (8005abc <LSM6DSO_0_Probe+0x174>)
 8005a02:	492f      	ldr	r1, [pc, #188]	; (8005ac0 <LSM6DSO_0_Probe+0x178>)
 8005a04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005a08:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <LSM6DSO_0_Probe+0x168>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a27      	ldr	r2, [pc, #156]	; (8005aac <LSM6DSO_0_Probe+0x164>)
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	4610      	mov	r0, r2
 8005a14:	4798      	blx	r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a1c:	f06f 0304 	mvn.w	r3, #4
 8005a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a22:	e001      	b.n	8005a28 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d11d      	bne.n	8005a6a <LSM6DSO_0_Probe+0x122>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d018      	beq.n	8005a6a <LSM6DSO_0_Probe+0x122>
 8005a38:	7b3b      	ldrb	r3, [r7, #12]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d115      	bne.n	8005a6a <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a3e:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <LSM6DSO_0_Probe+0x170>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <LSM6DSO_0_Probe+0x174>)
 8005a44:	491f      	ldr	r1, [pc, #124]	; (8005ac4 <LSM6DSO_0_Probe+0x17c>)
 8005a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005a4a:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <LSM6DSO_0_Probe+0x168>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <LSM6DSO_0_Probe+0x164>)
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a5e:	f06f 0304 	mvn.w	r3, #4
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	e001      	b.n	8005a6a <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <LSM6DSO_0_Probe+0x138>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a7a:	f06f 0304 	mvn.w	r3, #4
 8005a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3750      	adds	r7, #80	; 0x50
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08000c2d 	.word	0x08000c2d
 8005a90:	08000c91 	.word	0x08000c91
 8005a94:	08000d45 	.word	0x08000d45
 8005a98:	08000ce1 	.word	0x08000ce1
 8005a9c:	08000da9 	.word	0x08000da9
 8005aa0:	08005e4d 	.word	0x08005e4d
 8005aa4:	200001a8 	.word	0x200001a8
 8005aa8:	2000019c 	.word	0x2000019c
 8005aac:	200003e4 	.word	0x200003e4
 8005ab0:	20000190 	.word	0x20000190
 8005ab4:	2000006c 	.word	0x2000006c
 8005ab8:	200000c4 	.word	0x200000c4
 8005abc:	2000016c 	.word	0x2000016c
 8005ac0:	200000a0 	.word	0x200000a0
 8005ac4:	2000007c 	.word	0x2000007c

08005ac8 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b094      	sub	sp, #80	; 0x50
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005ad8:	2333      	movs	r3, #51	; 0x33
 8005ada:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005ade:	4b40      	ldr	r3, [pc, #256]	; (8005be0 <LIS2DW12_0_Probe+0x118>)
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005ae2:	4b40      	ldr	r3, [pc, #256]	; (8005be4 <LIS2DW12_0_Probe+0x11c>)
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005ae6:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <LIS2DW12_0_Probe+0x120>)
 8005ae8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005aea:	4b40      	ldr	r3, [pc, #256]	; (8005bec <LIS2DW12_0_Probe+0x124>)
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005aee:	4b40      	ldr	r3, [pc, #256]	; (8005bf0 <LIS2DW12_0_Probe+0x128>)
 8005af0:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005af2:	4b40      	ldr	r3, [pc, #256]	; (8005bf4 <LIS2DW12_0_Probe+0x12c>)
 8005af4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8005af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005afa:	4619      	mov	r1, r3
 8005afc:	483e      	ldr	r0, [pc, #248]	; (8005bf8 <LIS2DW12_0_Probe+0x130>)
 8005afe:	f7fb fa67 	bl	8000fd0 <LIS2DW12_RegisterBusIO>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b08:	f06f 0306 	mvn.w	r3, #6
 8005b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b0e:	e062      	b.n	8005bd6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005b10:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005b14:	4619      	mov	r1, r3
 8005b16:	4838      	ldr	r0, [pc, #224]	; (8005bf8 <LIS2DW12_0_Probe+0x130>)
 8005b18:	f7fb fb48 	bl	80011ac <LIS2DW12_ReadID>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b22:	f06f 0306 	mvn.w	r3, #6
 8005b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b28:	e055      	b.n	8005bd6 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8005b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b2e:	2b44      	cmp	r3, #68	; 0x44
 8005b30:	d003      	beq.n	8005b3a <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b32:	f06f 0306 	mvn.w	r3, #6
 8005b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b38:	e04d      	b.n	8005bd6 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	4619      	mov	r1, r3
 8005b40:	482d      	ldr	r0, [pc, #180]	; (8005bf8 <LIS2DW12_0_Probe+0x130>)
 8005b42:	f7fb fb49 	bl	80011d8 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b46:	7b7b      	ldrb	r3, [r7, #13]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	7b3b      	ldrb	r3, [r7, #12]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4313      	orrs	r3, r2
 8005b56:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <LIS2DW12_0_Probe+0x134>)
 8005b58:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8005b5a:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <LIS2DW12_0_Probe+0x138>)
 8005b5c:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <LIS2DW12_0_Probe+0x130>)
 8005b5e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <LIS2DW12_0_Probe+0x13c>)
 8005b62:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <LIS2DW12_0_Probe+0x140>)
 8005b64:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11e      	bne.n	8005baa <LIS2DW12_0_Probe+0xe2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d019      	beq.n	8005baa <LIS2DW12_0_Probe+0xe2>
 8005b76:	7b3b      	ldrb	r3, [r7, #12]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d116      	bne.n	8005baa <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005b7c:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <LIS2DW12_0_Probe+0x144>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a23      	ldr	r2, [pc, #140]	; (8005c10 <LIS2DW12_0_Probe+0x148>)
 8005b82:	3303      	adds	r3, #3
 8005b84:	4923      	ldr	r1, [pc, #140]	; (8005c14 <LIS2DW12_0_Probe+0x14c>)
 8005b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8005b8a:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <LIS2DW12_0_Probe+0x13c>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <LIS2DW12_0_Probe+0x138>)
 8005b92:	6852      	ldr	r2, [r2, #4]
 8005b94:	4610      	mov	r0, r2
 8005b96:	4798      	blx	r3
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b9e:	f06f 0304 	mvn.w	r3, #4
 8005ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba4:	e001      	b.n	8005baa <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <LIS2DW12_0_Probe+0xf8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bba:	f06f 0304 	mvn.w	r3, #4
 8005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <LIS2DW12_0_Probe+0x10e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bd0:	f06f 0304 	mvn.w	r3, #4
 8005bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3750      	adds	r7, #80	; 0x50
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08000c2d 	.word	0x08000c2d
 8005be4:	08000c91 	.word	0x08000c91
 8005be8:	08000d45 	.word	0x08000d45
 8005bec:	08000ce1 	.word	0x08000ce1
 8005bf0:	08000da9 	.word	0x08000da9
 8005bf4:	08005e4d 	.word	0x08005e4d
 8005bf8:	200001e0 	.word	0x200001e0
 8005bfc:	2000019c 	.word	0x2000019c
 8005c00:	200003e4 	.word	0x200003e4
 8005c04:	20000190 	.word	0x20000190
 8005c08:	20000004 	.word	0x20000004
 8005c0c:	200000c4 	.word	0x200000c4
 8005c10:	2000016c 	.word	0x2000016c
 8005c14:	20000014 	.word	0x20000014

08005c18 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b094      	sub	sp, #80	; 0x50
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005c24:	2300      	movs	r3, #0
 8005c26:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005c28:	233d      	movs	r3, #61	; 0x3d
 8005c2a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005c2e:	4b40      	ldr	r3, [pc, #256]	; (8005d30 <LIS2MDL_0_Probe+0x118>)
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005c32:	4b40      	ldr	r3, [pc, #256]	; (8005d34 <LIS2MDL_0_Probe+0x11c>)
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005c36:	4b40      	ldr	r3, [pc, #256]	; (8005d38 <LIS2MDL_0_Probe+0x120>)
 8005c38:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005c3a:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <LIS2MDL_0_Probe+0x124>)
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005c3e:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <LIS2MDL_0_Probe+0x128>)
 8005c40:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005c42:	4b40      	ldr	r3, [pc, #256]	; (8005d44 <LIS2MDL_0_Probe+0x12c>)
 8005c44:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8005c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	483e      	ldr	r0, [pc, #248]	; (8005d48 <LIS2MDL_0_Probe+0x130>)
 8005c4e:	f7fc fd13 	bl	8002678 <LIS2MDL_RegisterBusIO>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c58:	f06f 0306 	mvn.w	r3, #6
 8005c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5e:	e062      	b.n	8005d26 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005c60:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005c64:	4619      	mov	r1, r3
 8005c66:	4838      	ldr	r0, [pc, #224]	; (8005d48 <LIS2MDL_0_Probe+0x130>)
 8005c68:	f7fc fe22 	bl	80028b0 <LIS2MDL_ReadID>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c72:	f06f 0306 	mvn.w	r3, #6
 8005c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c78:	e055      	b.n	8005d26 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8005c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d003      	beq.n	8005c8a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c82:	f06f 0306 	mvn.w	r3, #6
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c88:	e04d      	b.n	8005d26 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8005c8a:	f107 030c 	add.w	r3, r7, #12
 8005c8e:	4619      	mov	r1, r3
 8005c90:	482d      	ldr	r0, [pc, #180]	; (8005d48 <LIS2MDL_0_Probe+0x130>)
 8005c92:	f7fc fe33 	bl	80028fc <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005c96:	7b7b      	ldrb	r3, [r7, #13]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	7b3b      	ldrb	r3, [r7, #12]
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	4a29      	ldr	r2, [pc, #164]	; (8005d4c <LIS2MDL_0_Probe+0x134>)
 8005ca8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8005caa:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <LIS2MDL_0_Probe+0x138>)
 8005cac:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <LIS2MDL_0_Probe+0x130>)
 8005cae:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8005cb0:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <LIS2MDL_0_Probe+0x13c>)
 8005cb2:	4a29      	ldr	r2, [pc, #164]	; (8005d58 <LIS2MDL_0_Probe+0x140>)
 8005cb4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11e      	bne.n	8005cfa <LIS2MDL_0_Probe+0xe2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d019      	beq.n	8005cfa <LIS2MDL_0_Probe+0xe2>
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d116      	bne.n	8005cfa <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005ccc:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <LIS2MDL_0_Probe+0x144>)
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <LIS2MDL_0_Probe+0x148>)
 8005cd2:	3306      	adds	r3, #6
 8005cd4:	4923      	ldr	r1, [pc, #140]	; (8005d64 <LIS2MDL_0_Probe+0x14c>)
 8005cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005cda:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <LIS2MDL_0_Probe+0x13c>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1b      	ldr	r2, [pc, #108]	; (8005d50 <LIS2MDL_0_Probe+0x138>)
 8005ce2:	6892      	ldr	r2, [r2, #8]
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cee:	f06f 0304 	mvn.w	r3, #4
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf4:	e001      	b.n	8005cfa <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <LIS2MDL_0_Probe+0xf8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d0a:	f06f 0304 	mvn.w	r3, #4
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d107      	bne.n	8005d26 <LIS2MDL_0_Probe+0x10e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d20:	f06f 0304 	mvn.w	r3, #4
 8005d24:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3750      	adds	r7, #80	; 0x50
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	08000c2d 	.word	0x08000c2d
 8005d34:	08000c91 	.word	0x08000c91
 8005d38:	08000d45 	.word	0x08000d45
 8005d3c:	08000ce1 	.word	0x08000ce1
 8005d40:	08000da9 	.word	0x08000da9
 8005d44:	08005e4d 	.word	0x08005e4d
 8005d48:	2000021c 	.word	0x2000021c
 8005d4c:	2000019c 	.word	0x2000019c
 8005d50:	200003e4 	.word	0x200003e4
 8005d54:	20000190 	.word	0x20000190
 8005d58:	20000038 	.word	0x20000038
 8005d5c:	200000c4 	.word	0x200000c4
 8005d60:	2000016c 	.word	0x2000016c
 8005d64:	20000048 	.word	0x20000048

08005d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <HAL_Init+0x40>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0d      	ldr	r2, [pc, #52]	; (8005da8 <HAL_Init+0x40>)
 8005d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <HAL_Init+0x40>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <HAL_Init+0x40>)
 8005d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <HAL_Init+0x40>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <HAL_Init+0x40>)
 8005d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d90:	2003      	movs	r0, #3
 8005d92:	f000 f94f 	bl	8006034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d96:	2000      	movs	r0, #0
 8005d98:	f000 f808 	bl	8005dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d9c:	f7fa fe68 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40023c00 	.word	0x40023c00

08005dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005db4:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_InitTick+0x54>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <HAL_InitTick+0x58>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f967 	bl	800609e <HAL_SYSTICK_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e00e      	b.n	8005df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d80a      	bhi.n	8005df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005de0:	2200      	movs	r2, #0
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	f000 f92f 	bl	800604a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005dec:	4a06      	ldr	r2, [pc, #24]	; (8005e08 <HAL_InitTick+0x5c>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e000      	b.n	8005df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000000 	.word	0x20000000
 8005e04:	200000dc 	.word	0x200000dc
 8005e08:	200000d8 	.word	0x200000d8

08005e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_IncTick+0x20>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_IncTick+0x24>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <HAL_IncTick+0x24>)
 8005e1e:	6013      	str	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	200000dc 	.word	0x200000dc
 8005e30:	200003f0 	.word	0x200003f0

08005e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  return uwTick;
 8005e38:	4b03      	ldr	r3, [pc, #12]	; (8005e48 <HAL_GetTick+0x14>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	200003f0 	.word	0x200003f0

08005e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e54:	f7ff ffee 	bl	8005e34 <HAL_GetTick>
 8005e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d005      	beq.n	8005e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <HAL_Delay+0x44>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e72:	bf00      	nop
 8005e74:	f7ff ffde 	bl	8005e34 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d8f7      	bhi.n	8005e74 <HAL_Delay+0x28>
  {
  }
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200000dc 	.word	0x200000dc

08005e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ec6:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	60d3      	str	r3, [r2, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0307 	and.w	r3, r3, #7
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	e000ed00 	.word	0xe000ed00

08005ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db0b      	blt.n	8005f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	f003 021f 	and.w	r2, r3, #31
 8005f10:	4907      	ldr	r1, [pc, #28]	; (8005f30 <__NVIC_EnableIRQ+0x38>)
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2001      	movs	r0, #1
 8005f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	e000e100 	.word	0xe000e100

08005f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	db0a      	blt.n	8005f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	490c      	ldr	r1, [pc, #48]	; (8005f80 <__NVIC_SetPriority+0x4c>)
 8005f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f52:	0112      	lsls	r2, r2, #4
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	440b      	add	r3, r1
 8005f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f5c:	e00a      	b.n	8005f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	4908      	ldr	r1, [pc, #32]	; (8005f84 <__NVIC_SetPriority+0x50>)
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	3b04      	subs	r3, #4
 8005f6c:	0112      	lsls	r2, r2, #4
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	440b      	add	r3, r1
 8005f72:	761a      	strb	r2, [r3, #24]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	e000e100 	.word	0xe000e100
 8005f84:	e000ed00 	.word	0xe000ed00

08005f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f1c3 0307 	rsb	r3, r3, #7
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	bf28      	it	cs
 8005fa6:	2304      	movcs	r3, #4
 8005fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d902      	bls.n	8005fb8 <NVIC_EncodePriority+0x30>
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	3b03      	subs	r3, #3
 8005fb6:	e000      	b.n	8005fba <NVIC_EncodePriority+0x32>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43da      	mvns	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	401a      	ands	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	43d9      	mvns	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe0:	4313      	orrs	r3, r2
         );
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3724      	adds	r7, #36	; 0x24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006000:	d301      	bcc.n	8006006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006002:	2301      	movs	r3, #1
 8006004:	e00f      	b.n	8006026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <SysTick_Config+0x40>)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3b01      	subs	r3, #1
 800600c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800600e:	210f      	movs	r1, #15
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	f7ff ff8e 	bl	8005f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <SysTick_Config+0x40>)
 800601a:	2200      	movs	r2, #0
 800601c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800601e:	4b04      	ldr	r3, [pc, #16]	; (8006030 <SysTick_Config+0x40>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	e000e010 	.word	0xe000e010

08006034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff ff29 	bl	8005e94 <__NVIC_SetPriorityGrouping>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	4603      	mov	r3, r0
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800605c:	f7ff ff3e 	bl	8005edc <__NVIC_GetPriorityGrouping>
 8006060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	f7ff ff8e 	bl	8005f88 <NVIC_EncodePriority>
 800606c:	4602      	mov	r2, r0
 800606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff ff5d 	bl	8005f34 <__NVIC_SetPriority>
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	4603      	mov	r3, r0
 800608a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800608c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff ff31 	bl	8005ef8 <__NVIC_EnableIRQ>
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ffa2 	bl	8005ff0 <SysTick_Config>
 80060ac:	4603      	mov	r3, r0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060c4:	f7ff feb6 	bl	8005e34 <HAL_GetTick>
 80060c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d008      	beq.n	80060e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e052      	b.n	800618e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0216 	bic.w	r2, r2, #22
 80060f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006106:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d103      	bne.n	8006118 <HAL_DMA_Abort+0x62>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0208 	bic.w	r2, r2, #8
 8006126:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006138:	e013      	b.n	8006162 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800613a:	f7ff fe7b 	bl	8005e34 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b05      	cmp	r3, #5
 8006146:	d90c      	bls.n	8006162 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2203      	movs	r2, #3
 8006152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e015      	b.n	800618e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e4      	bne.n	800613a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	223f      	movs	r2, #63	; 0x3f
 8006176:	409a      	lsls	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d004      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2280      	movs	r2, #128	; 0x80
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e00c      	b.n	80061ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2205      	movs	r2, #5
 80061b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061dc:	b480      	push	{r7}
 80061de:	b089      	sub	sp, #36	; 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	e159      	b.n	80064ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061f8:	2201      	movs	r2, #1
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4013      	ands	r3, r2
 800620a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	429a      	cmp	r2, r3
 8006212:	f040 8148 	bne.w	80064a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d005      	beq.n	800622e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800622a:	2b02      	cmp	r3, #2
 800622c:	d130      	bne.n	8006290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	2203      	movs	r2, #3
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	43db      	mvns	r3, r3
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	4013      	ands	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006264:	2201      	movs	r2, #1
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	43db      	mvns	r3, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4013      	ands	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 0201 	and.w	r2, r3, #1
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	2b03      	cmp	r3, #3
 800629a:	d017      	beq.n	80062cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	2203      	movs	r2, #3
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d123      	bne.n	8006320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	08da      	lsrs	r2, r3, #3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3208      	adds	r2, #8
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	220f      	movs	r2, #15
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	43db      	mvns	r3, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4013      	ands	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	08da      	lsrs	r2, r3, #3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3208      	adds	r2, #8
 800631a:	69b9      	ldr	r1, [r7, #24]
 800631c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	2203      	movs	r2, #3
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 0203 	and.w	r2, r3, #3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	4313      	orrs	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80a2 	beq.w	80064a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	4b57      	ldr	r3, [pc, #348]	; (80064c4 <HAL_GPIO_Init+0x2e8>)
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	4a56      	ldr	r2, [pc, #344]	; (80064c4 <HAL_GPIO_Init+0x2e8>)
 800636c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006370:	6453      	str	r3, [r2, #68]	; 0x44
 8006372:	4b54      	ldr	r3, [pc, #336]	; (80064c4 <HAL_GPIO_Init+0x2e8>)
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800637e:	4a52      	ldr	r2, [pc, #328]	; (80064c8 <HAL_GPIO_Init+0x2ec>)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	3302      	adds	r3, #2
 8006386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	220f      	movs	r2, #15
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4013      	ands	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a49      	ldr	r2, [pc, #292]	; (80064cc <HAL_GPIO_Init+0x2f0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d019      	beq.n	80063de <HAL_GPIO_Init+0x202>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a48      	ldr	r2, [pc, #288]	; (80064d0 <HAL_GPIO_Init+0x2f4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_GPIO_Init+0x1fe>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a47      	ldr	r2, [pc, #284]	; (80064d4 <HAL_GPIO_Init+0x2f8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00d      	beq.n	80063d6 <HAL_GPIO_Init+0x1fa>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a46      	ldr	r2, [pc, #280]	; (80064d8 <HAL_GPIO_Init+0x2fc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <HAL_GPIO_Init+0x1f6>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a45      	ldr	r2, [pc, #276]	; (80064dc <HAL_GPIO_Init+0x300>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d101      	bne.n	80063ce <HAL_GPIO_Init+0x1f2>
 80063ca:	2304      	movs	r3, #4
 80063cc:	e008      	b.n	80063e0 <HAL_GPIO_Init+0x204>
 80063ce:	2307      	movs	r3, #7
 80063d0:	e006      	b.n	80063e0 <HAL_GPIO_Init+0x204>
 80063d2:	2303      	movs	r3, #3
 80063d4:	e004      	b.n	80063e0 <HAL_GPIO_Init+0x204>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e002      	b.n	80063e0 <HAL_GPIO_Init+0x204>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <HAL_GPIO_Init+0x204>
 80063de:	2300      	movs	r3, #0
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	f002 0203 	and.w	r2, r2, #3
 80063e6:	0092      	lsls	r2, r2, #2
 80063e8:	4093      	lsls	r3, r2
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063f0:	4935      	ldr	r1, [pc, #212]	; (80064c8 <HAL_GPIO_Init+0x2ec>)
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	089b      	lsrs	r3, r3, #2
 80063f6:	3302      	adds	r3, #2
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063fe:	4b38      	ldr	r3, [pc, #224]	; (80064e0 <HAL_GPIO_Init+0x304>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	43db      	mvns	r3, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4013      	ands	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006422:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <HAL_GPIO_Init+0x304>)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006428:	4b2d      	ldr	r3, [pc, #180]	; (80064e0 <HAL_GPIO_Init+0x304>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	43db      	mvns	r3, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800644c:	4a24      	ldr	r2, [pc, #144]	; (80064e0 <HAL_GPIO_Init+0x304>)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006452:	4b23      	ldr	r3, [pc, #140]	; (80064e0 <HAL_GPIO_Init+0x304>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	43db      	mvns	r3, r3
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	4013      	ands	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006476:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <HAL_GPIO_Init+0x304>)
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800647c:	4b18      	ldr	r3, [pc, #96]	; (80064e0 <HAL_GPIO_Init+0x304>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	43db      	mvns	r3, r3
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	4013      	ands	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <HAL_GPIO_Init+0x304>)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3301      	adds	r3, #1
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	f67f aea2 	bls.w	80061f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3724      	adds	r7, #36	; 0x24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40023800 	.word	0x40023800
 80064c8:	40013800 	.word	0x40013800
 80064cc:	40020000 	.word	0x40020000
 80064d0:	40020400 	.word	0x40020400
 80064d4:	40020800 	.word	0x40020800
 80064d8:	40020c00 	.word	0x40020c00
 80064dc:	40021000 	.word	0x40021000
 80064e0:	40013c00 	.word	0x40013c00

080064e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e0bb      	b.n	8006678 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006500:	2201      	movs	r2, #1
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4013      	ands	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	f040 80ab 	bne.w	8006672 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800651c:	4a5c      	ldr	r2, [pc, #368]	; (8006690 <HAL_GPIO_DeInit+0x1ac>)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	089b      	lsrs	r3, r3, #2
 8006522:	3302      	adds	r3, #2
 8006524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006528:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	220f      	movs	r2, #15
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	4013      	ands	r3, r2
 800653c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a54      	ldr	r2, [pc, #336]	; (8006694 <HAL_GPIO_DeInit+0x1b0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d019      	beq.n	800657a <HAL_GPIO_DeInit+0x96>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a53      	ldr	r2, [pc, #332]	; (8006698 <HAL_GPIO_DeInit+0x1b4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_GPIO_DeInit+0x92>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a52      	ldr	r2, [pc, #328]	; (800669c <HAL_GPIO_DeInit+0x1b8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00d      	beq.n	8006572 <HAL_GPIO_DeInit+0x8e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a51      	ldr	r2, [pc, #324]	; (80066a0 <HAL_GPIO_DeInit+0x1bc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d007      	beq.n	800656e <HAL_GPIO_DeInit+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a50      	ldr	r2, [pc, #320]	; (80066a4 <HAL_GPIO_DeInit+0x1c0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d101      	bne.n	800656a <HAL_GPIO_DeInit+0x86>
 8006566:	2304      	movs	r3, #4
 8006568:	e008      	b.n	800657c <HAL_GPIO_DeInit+0x98>
 800656a:	2307      	movs	r3, #7
 800656c:	e006      	b.n	800657c <HAL_GPIO_DeInit+0x98>
 800656e:	2303      	movs	r3, #3
 8006570:	e004      	b.n	800657c <HAL_GPIO_DeInit+0x98>
 8006572:	2302      	movs	r3, #2
 8006574:	e002      	b.n	800657c <HAL_GPIO_DeInit+0x98>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_GPIO_DeInit+0x98>
 800657a:	2300      	movs	r3, #0
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	f002 0203 	and.w	r2, r2, #3
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	4093      	lsls	r3, r2
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d132      	bne.n	80065f2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800658c:	4b46      	ldr	r3, [pc, #280]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	43db      	mvns	r3, r3
 8006594:	4944      	ldr	r1, [pc, #272]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 8006596:	4013      	ands	r3, r2
 8006598:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800659a:	4b43      	ldr	r3, [pc, #268]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	4941      	ldr	r1, [pc, #260]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065a8:	4b3f      	ldr	r3, [pc, #252]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	43db      	mvns	r3, r3
 80065b0:	493d      	ldr	r1, [pc, #244]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065b6:	4b3c      	ldr	r3, [pc, #240]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	43db      	mvns	r3, r3
 80065be:	493a      	ldr	r1, [pc, #232]	; (80066a8 <HAL_GPIO_DeInit+0x1c4>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	220f      	movs	r2, #15
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80065d4:	4a2e      	ldr	r2, [pc, #184]	; (8006690 <HAL_GPIO_DeInit+0x1ac>)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	089b      	lsrs	r3, r3, #2
 80065da:	3302      	adds	r3, #2
 80065dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	43da      	mvns	r2, r3
 80065e4:	482a      	ldr	r0, [pc, #168]	; (8006690 <HAL_GPIO_DeInit+0x1ac>)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	089b      	lsrs	r3, r3, #2
 80065ea:	400a      	ands	r2, r1
 80065ec:	3302      	adds	r3, #2
 80065ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	2103      	movs	r1, #3
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	401a      	ands	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	08da      	lsrs	r2, r3, #3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3208      	adds	r2, #8
 8006610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	220f      	movs	r2, #15
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43db      	mvns	r3, r3
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	08d2      	lsrs	r2, r2, #3
 8006628:	4019      	ands	r1, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3208      	adds	r2, #8
 800662e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	2103      	movs	r1, #3
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	2101      	movs	r1, #1
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	2103      	movs	r1, #3
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	401a      	ands	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	3301      	adds	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b0f      	cmp	r3, #15
 800667c:	f67f af40 	bls.w	8006500 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40013800 	.word	0x40013800
 8006694:	40020000 	.word	0x40020000
 8006698:	40020400 	.word	0x40020400
 800669c:	40020800 	.word	0x40020800
 80066a0:	40020c00 	.word	0x40020c00
 80066a4:	40021000 	.word	0x40021000
 80066a8:	40013c00 	.word	0x40013c00

080066ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
 80066b8:	4613      	mov	r3, r2
 80066ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066bc:	787b      	ldrb	r3, [r7, #1]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066c2:	887a      	ldrh	r2, [r7, #2]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066c8:	e003      	b.n	80066d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066ca:	887b      	ldrh	r3, [r7, #2]
 80066cc:	041a      	lsls	r2, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	619a      	str	r2, [r3, #24]
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066f0:	887a      	ldrh	r2, [r7, #2]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4013      	ands	r3, r2
 80066f6:	041a      	lsls	r2, r3, #16
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	43d9      	mvns	r1, r3
 80066fc:	887b      	ldrh	r3, [r7, #2]
 80066fe:	400b      	ands	r3, r1
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	619a      	str	r2, [r3, #24]
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e12b      	b.n	800697e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f95d 	bl	80069fa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2224      	movs	r2, #36	; 0x24
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006778:	f001 fc36 	bl	8007fe8 <HAL_RCC_GetPCLK1Freq>
 800677c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4a81      	ldr	r2, [pc, #516]	; (8006988 <HAL_I2C_Init+0x274>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d807      	bhi.n	8006798 <HAL_I2C_Init+0x84>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a80      	ldr	r2, [pc, #512]	; (800698c <HAL_I2C_Init+0x278>)
 800678c:	4293      	cmp	r3, r2
 800678e:	bf94      	ite	ls
 8006790:	2301      	movls	r3, #1
 8006792:	2300      	movhi	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e006      	b.n	80067a6 <HAL_I2C_Init+0x92>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4a7d      	ldr	r2, [pc, #500]	; (8006990 <HAL_I2C_Init+0x27c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	bf94      	ite	ls
 80067a0:	2301      	movls	r3, #1
 80067a2:	2300      	movhi	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e0e7      	b.n	800697e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a78      	ldr	r2, [pc, #480]	; (8006994 <HAL_I2C_Init+0x280>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	0c9b      	lsrs	r3, r3, #18
 80067b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4a6a      	ldr	r2, [pc, #424]	; (8006988 <HAL_I2C_Init+0x274>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d802      	bhi.n	80067e8 <HAL_I2C_Init+0xd4>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	3301      	adds	r3, #1
 80067e6:	e009      	b.n	80067fc <HAL_I2C_Init+0xe8>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
 80067f2:	4a69      	ldr	r2, [pc, #420]	; (8006998 <HAL_I2C_Init+0x284>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	099b      	lsrs	r3, r3, #6
 80067fa:	3301      	adds	r3, #1
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6812      	ldr	r2, [r2, #0]
 8006800:	430b      	orrs	r3, r1
 8006802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800680e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	495c      	ldr	r1, [pc, #368]	; (8006988 <HAL_I2C_Init+0x274>)
 8006818:	428b      	cmp	r3, r1
 800681a:	d819      	bhi.n	8006850 <HAL_I2C_Init+0x13c>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	1e59      	subs	r1, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	fbb1 f3f3 	udiv	r3, r1, r3
 800682a:	1c59      	adds	r1, r3, #1
 800682c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006830:	400b      	ands	r3, r1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_I2C_Init+0x138>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	1e59      	subs	r1, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	fbb1 f3f3 	udiv	r3, r1, r3
 8006844:	3301      	adds	r3, #1
 8006846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800684a:	e051      	b.n	80068f0 <HAL_I2C_Init+0x1dc>
 800684c:	2304      	movs	r3, #4
 800684e:	e04f      	b.n	80068f0 <HAL_I2C_Init+0x1dc>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d111      	bne.n	800687c <HAL_I2C_Init+0x168>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1e58      	subs	r0, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6859      	ldr	r1, [r3, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	440b      	add	r3, r1
 8006866:	fbb0 f3f3 	udiv	r3, r0, r3
 800686a:	3301      	adds	r3, #1
 800686c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	e012      	b.n	80068a2 <HAL_I2C_Init+0x18e>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1e58      	subs	r0, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	0099      	lsls	r1, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006892:	3301      	adds	r3, #1
 8006894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006898:	2b00      	cmp	r3, #0
 800689a:	bf0c      	ite	eq
 800689c:	2301      	moveq	r3, #1
 800689e:	2300      	movne	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_I2C_Init+0x196>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e022      	b.n	80068f0 <HAL_I2C_Init+0x1dc>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10e      	bne.n	80068d0 <HAL_I2C_Init+0x1bc>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1e58      	subs	r0, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	440b      	add	r3, r1
 80068c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80068c4:	3301      	adds	r3, #1
 80068c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ce:	e00f      	b.n	80068f0 <HAL_I2C_Init+0x1dc>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	1e58      	subs	r0, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6859      	ldr	r1, [r3, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	0099      	lsls	r1, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068e6:	3301      	adds	r3, #1
 80068e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	6809      	ldr	r1, [r1, #0]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69da      	ldr	r2, [r3, #28]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800691e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6911      	ldr	r1, [r2, #16]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68d2      	ldr	r2, [r2, #12]
 800692a:	4311      	orrs	r1, r2
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	430b      	orrs	r3, r1
 8006932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	000186a0 	.word	0x000186a0
 800698c:	001e847f 	.word	0x001e847f
 8006990:	003d08ff 	.word	0x003d08ff
 8006994:	431bde83 	.word	0x431bde83
 8006998:	10624dd3 	.word	0x10624dd3

0800699c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e021      	b.n	80069f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2224      	movs	r2, #36	; 0x24
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f821 	bl	8006a0e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	4611      	mov	r1, r2
 8006a30:	461a      	mov	r2, r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	817b      	strh	r3, [r7, #10]
 8006a36:	460b      	mov	r3, r1
 8006a38:	813b      	strh	r3, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a3e:	f7ff f9f9 	bl	8005e34 <HAL_GetTick>
 8006a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	f040 80d9 	bne.w	8006c04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	2319      	movs	r3, #25
 8006a58:	2201      	movs	r2, #1
 8006a5a:	496d      	ldr	r1, [pc, #436]	; (8006c10 <HAL_I2C_Mem_Write+0x1ec>)
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fc99 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e0cc      	b.n	8006c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_I2C_Mem_Write+0x56>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e0c5      	b.n	8006c06 <HAL_I2C_Mem_Write+0x1e2>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d007      	beq.n	8006aa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2221      	movs	r2, #33	; 0x21
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a4d      	ldr	r2, [pc, #308]	; (8006c14 <HAL_I2C_Mem_Write+0x1f0>)
 8006ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ae2:	88f8      	ldrh	r0, [r7, #6]
 8006ae4:	893a      	ldrh	r2, [r7, #8]
 8006ae6:	8979      	ldrh	r1, [r7, #10]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4603      	mov	r3, r0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fad0 	bl	8007098 <I2C_RequestMemoryWrite>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d052      	beq.n	8006ba4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e081      	b.n	8006c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fd1a 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00d      	beq.n	8006b2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d107      	bne.n	8006b2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e06b      	b.n	8006c06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_I2C_Mem_Write+0x180>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d017      	beq.n	8006ba4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1aa      	bne.n	8006b02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fd06 	bl	80075c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00d      	beq.n	8006bd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	d107      	bne.n	8006bd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e016      	b.n	8006c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	00100002 	.word	0x00100002
 8006c14:	ffff0000 	.word	0xffff0000

08006c18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08c      	sub	sp, #48	; 0x30
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	4608      	mov	r0, r1
 8006c22:	4611      	mov	r1, r2
 8006c24:	461a      	mov	r2, r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	817b      	strh	r3, [r7, #10]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	813b      	strh	r3, [r7, #8]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c32:	f7ff f8ff 	bl	8005e34 <HAL_GetTick>
 8006c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	f040 8208 	bne.w	8007056 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	2319      	movs	r3, #25
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	497b      	ldr	r1, [pc, #492]	; (8006e3c <HAL_I2C_Mem_Read+0x224>)
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fb9f 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e1fb      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_I2C_Mem_Read+0x56>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e1f4      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d007      	beq.n	8006c94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2222      	movs	r2, #34	; 0x22
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2240      	movs	r2, #64	; 0x40
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a5b      	ldr	r2, [pc, #364]	; (8006e40 <HAL_I2C_Mem_Read+0x228>)
 8006cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cd6:	88f8      	ldrh	r0, [r7, #6]
 8006cd8:	893a      	ldrh	r2, [r7, #8]
 8006cda:	8979      	ldrh	r1, [r7, #10]
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fa6c 	bl	80071c4 <I2C_RequestMemoryRead>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e1b0      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d113      	bne.n	8006d26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cfe:	2300      	movs	r3, #0
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	623b      	str	r3, [r7, #32]
 8006d12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e184      	b.n	8007030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d11b      	bne.n	8006d66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	61fb      	str	r3, [r7, #28]
 8006d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e164      	b.n	8007030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d11b      	bne.n	8006da6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	e144      	b.n	8007030 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dbc:	e138      	b.n	8007030 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	f200 80f1 	bhi.w	8006faa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d123      	bne.n	8006e18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fc35 	bl	8007644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e139      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e16:	e10b      	b.n	8007030 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d14e      	bne.n	8006ebe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	2200      	movs	r2, #0
 8006e28:	4906      	ldr	r1, [pc, #24]	; (8006e44 <HAL_I2C_Mem_Read+0x22c>)
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fab2 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e10e      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
 8006e3a:	bf00      	nop
 8006e3c:	00100002 	.word	0x00100002
 8006e40:	ffff0000 	.word	0xffff0000
 8006e44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ebc:	e0b8      	b.n	8007030 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4966      	ldr	r1, [pc, #408]	; (8007060 <HAL_I2C_Mem_Read+0x448>)
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fa63 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0bf      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	2200      	movs	r2, #0
 8006f22:	494f      	ldr	r1, [pc, #316]	; (8007060 <HAL_I2C_Mem_Read+0x448>)
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 fa35 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e091      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fa8:	e042      	b.n	8007030 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fb48 	bl	8007644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e04c      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d118      	bne.n	8007030 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007034:	2b00      	cmp	r3, #0
 8007036:	f47f aec2 	bne.w	8006dbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	e000      	b.n	8007058 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007056:	2302      	movs	r3, #2
  }
}
 8007058:	4618      	mov	r0, r3
 800705a:	3728      	adds	r7, #40	; 0x28
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	00010004 	.word	0x00010004

08007064 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007072:	b2db      	uxtb	r3, r3
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	461a      	mov	r2, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	817b      	strh	r3, [r7, #10]
 80070aa:	460b      	mov	r3, r1
 80070ac:	813b      	strh	r3, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f960 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e8:	d103      	bne.n	80070f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e05f      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070f6:	897b      	ldrh	r3, [r7, #10]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007104:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	6a3a      	ldr	r2, [r7, #32]
 800710a:	492d      	ldr	r1, [pc, #180]	; (80071c0 <I2C_RequestMemoryWrite+0x128>)
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f998 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e04c      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007134:	6a39      	ldr	r1, [r7, #32]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fa02 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	2b04      	cmp	r3, #4
 8007148:	d107      	bne.n	800715a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e02b      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d105      	bne.n	8007170 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007164:	893b      	ldrh	r3, [r7, #8]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	611a      	str	r2, [r3, #16]
 800716e:	e021      	b.n	80071b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007170:	893b      	ldrh	r3, [r7, #8]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	b29b      	uxth	r3, r3
 8007176:	b2da      	uxtb	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800717e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007180:	6a39      	ldr	r1, [r7, #32]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f9dc 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	2b04      	cmp	r3, #4
 8007194:	d107      	bne.n	80071a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e005      	b.n	80071b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071aa:	893b      	ldrh	r3, [r7, #8]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	00010002 	.word	0x00010002

080071c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	817b      	strh	r3, [r7, #10]
 80071d6:	460b      	mov	r3, r1
 80071d8:	813b      	strh	r3, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	2200      	movs	r2, #0
 8007206:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f8c2 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007224:	d103      	bne.n	800722e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e0aa      	b.n	8007388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007232:	897b      	ldrh	r3, [r7, #10]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	461a      	mov	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007240:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	4952      	ldr	r1, [pc, #328]	; (8007390 <I2C_RequestMemoryRead+0x1cc>)
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f8fa 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e097      	b.n	8007388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007270:	6a39      	ldr	r1, [r7, #32]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f964 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	2b04      	cmp	r3, #4
 8007284:	d107      	bne.n	8007296 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007294:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e076      	b.n	8007388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d105      	bne.n	80072ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072a0:	893b      	ldrh	r3, [r7, #8]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	611a      	str	r2, [r3, #16]
 80072aa:	e021      	b.n	80072f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072ac:	893b      	ldrh	r3, [r7, #8]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072bc:	6a39      	ldr	r1, [r7, #32]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f93e 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d107      	bne.n	80072e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e050      	b.n	8007388 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072e6:	893b      	ldrh	r3, [r7, #8]
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f2:	6a39      	ldr	r1, [r7, #32]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f923 	bl	8007540 <I2C_WaitOnTXEFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00d      	beq.n	800731c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	2b04      	cmp	r3, #4
 8007306:	d107      	bne.n	8007318 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007316:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e035      	b.n	8007388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800732a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	2200      	movs	r2, #0
 8007334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f82b 	bl	8007394 <I2C_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00d      	beq.n	8007360 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007352:	d103      	bne.n	800735c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e013      	b.n	8007388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007360:	897b      	ldrh	r3, [r7, #10]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	b2da      	uxtb	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	4906      	ldr	r1, [pc, #24]	; (8007390 <I2C_RequestMemoryRead+0x1cc>)
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f863 	bl	8007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	00010002 	.word	0x00010002

08007394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a4:	e025      	b.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ac:	d021      	beq.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ae:	f7fe fd41 	bl	8005e34 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d302      	bcc.n	80073c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d116      	bne.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f043 0220 	orr.w	r2, r3, #32
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e023      	b.n	800743a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d10d      	bne.n	8007418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	43da      	mvns	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4013      	ands	r3, r2
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	bf0c      	ite	eq
 800740e:	2301      	moveq	r3, #1
 8007410:	2300      	movne	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	e00c      	b.n	8007432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	43da      	mvns	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4013      	ands	r3, r2
 8007424:	b29b      	uxth	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	bf0c      	ite	eq
 800742a:	2301      	moveq	r3, #1
 800742c:	2300      	movne	r3, #0
 800742e:	b2db      	uxtb	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	429a      	cmp	r2, r3
 8007436:	d0b6      	beq.n	80073a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007450:	e051      	b.n	80074f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007460:	d123      	bne.n	80074aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800747a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e046      	b.n	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b0:	d021      	beq.n	80074f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b2:	f7fe fcbf 	bl	8005e34 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d302      	bcc.n	80074c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d116      	bne.n	80074f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e020      	b.n	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d10c      	bne.n	800751a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	43da      	mvns	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4013      	ands	r3, r2
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e00b      	b.n	8007532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	43da      	mvns	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4013      	ands	r3, r2
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d18d      	bne.n	8007452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800754c:	e02d      	b.n	80075aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f8ce 	bl	80076f0 <I2C_IsAcknowledgeFailed>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e02d      	b.n	80075ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d021      	beq.n	80075aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007566:	f7fe fc65 	bl	8005e34 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	429a      	cmp	r2, r3
 8007574:	d302      	bcc.n	800757c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d116      	bne.n	80075aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e007      	b.n	80075ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d1ca      	bne.n	800754e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075ce:	e02d      	b.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f88d 	bl	80076f0 <I2C_IsAcknowledgeFailed>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e02d      	b.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e6:	d021      	beq.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e8:	f7fe fc24 	bl	8005e34 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d302      	bcc.n	80075fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d116      	bne.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e007      	b.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0304 	and.w	r3, r3, #4
 8007636:	2b04      	cmp	r3, #4
 8007638:	d1ca      	bne.n	80075d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007650:	e042      	b.n	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b10      	cmp	r3, #16
 800765e:	d119      	bne.n	8007694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0210 	mvn.w	r2, #16
 8007668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e029      	b.n	80076e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007694:	f7fe fbce 	bl	8005e34 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d302      	bcc.n	80076aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	f043 0220 	orr.w	r2, r3, #32
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e007      	b.n	80076e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d1b5      	bne.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007706:	d11b      	bne.n	8007740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	f043 0204 	orr.w	r2, r3, #4
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e264      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d075      	beq.n	800785a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800776e:	4ba3      	ldr	r3, [pc, #652]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 030c 	and.w	r3, r3, #12
 8007776:	2b04      	cmp	r3, #4
 8007778:	d00c      	beq.n	8007794 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800777a:	4ba0      	ldr	r3, [pc, #640]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007782:	2b08      	cmp	r3, #8
 8007784:	d112      	bne.n	80077ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007786:	4b9d      	ldr	r3, [pc, #628]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007792:	d10b      	bne.n	80077ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007794:	4b99      	ldr	r3, [pc, #612]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d05b      	beq.n	8007858 <HAL_RCC_OscConfig+0x108>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d157      	bne.n	8007858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e23f      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d106      	bne.n	80077c4 <HAL_RCC_OscConfig+0x74>
 80077b6:	4b91      	ldr	r3, [pc, #580]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a90      	ldr	r2, [pc, #576]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e01d      	b.n	8007800 <HAL_RCC_OscConfig+0xb0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCC_OscConfig+0x98>
 80077ce:	4b8b      	ldr	r3, [pc, #556]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a8a      	ldr	r2, [pc, #552]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	4b88      	ldr	r3, [pc, #544]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a87      	ldr	r2, [pc, #540]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e00b      	b.n	8007800 <HAL_RCC_OscConfig+0xb0>
 80077e8:	4b84      	ldr	r3, [pc, #528]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a83      	ldr	r2, [pc, #524]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	4b81      	ldr	r3, [pc, #516]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a80      	ldr	r2, [pc, #512]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80077fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d013      	beq.n	8007830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007808:	f7fe fb14 	bl	8005e34 <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007810:	f7fe fb10 	bl	8005e34 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b64      	cmp	r3, #100	; 0x64
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e204      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007822:	4b76      	ldr	r3, [pc, #472]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f0      	beq.n	8007810 <HAL_RCC_OscConfig+0xc0>
 800782e:	e014      	b.n	800785a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007830:	f7fe fb00 	bl	8005e34 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007838:	f7fe fafc 	bl	8005e34 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b64      	cmp	r3, #100	; 0x64
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e1f0      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784a:	4b6c      	ldr	r3, [pc, #432]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f0      	bne.n	8007838 <HAL_RCC_OscConfig+0xe8>
 8007856:	e000      	b.n	800785a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d063      	beq.n	800792e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007866:	4b65      	ldr	r3, [pc, #404]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 030c 	and.w	r3, r3, #12
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007872:	4b62      	ldr	r3, [pc, #392]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787a:	2b08      	cmp	r3, #8
 800787c:	d11c      	bne.n	80078b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800787e:	4b5f      	ldr	r3, [pc, #380]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d116      	bne.n	80078b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800788a:	4b5c      	ldr	r3, [pc, #368]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_RCC_OscConfig+0x152>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d001      	beq.n	80078a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e1c4      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a2:	4b56      	ldr	r3, [pc, #344]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4952      	ldr	r1, [pc, #328]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078b6:	e03a      	b.n	800792e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d020      	beq.n	8007902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078c0:	4b4f      	ldr	r3, [pc, #316]	; (8007a00 <HAL_RCC_OscConfig+0x2b0>)
 80078c2:	2201      	movs	r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c6:	f7fe fab5 	bl	8005e34 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ce:	f7fe fab1 	bl	8005e34 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e1a5      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	4b46      	ldr	r3, [pc, #280]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0f0      	beq.n	80078ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ec:	4b43      	ldr	r3, [pc, #268]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	4940      	ldr	r1, [pc, #256]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	600b      	str	r3, [r1, #0]
 8007900:	e015      	b.n	800792e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007902:	4b3f      	ldr	r3, [pc, #252]	; (8007a00 <HAL_RCC_OscConfig+0x2b0>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fe fa94 	bl	8005e34 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007910:	f7fe fa90 	bl	8005e34 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e184      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007922:	4b36      	ldr	r3, [pc, #216]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d030      	beq.n	800799c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d016      	beq.n	8007970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007942:	4b30      	ldr	r3, [pc, #192]	; (8007a04 <HAL_RCC_OscConfig+0x2b4>)
 8007944:	2201      	movs	r2, #1
 8007946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007948:	f7fe fa74 	bl	8005e34 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007950:	f7fe fa70 	bl	8005e34 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e164      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007962:	4b26      	ldr	r3, [pc, #152]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0f0      	beq.n	8007950 <HAL_RCC_OscConfig+0x200>
 800796e:	e015      	b.n	800799c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007970:	4b24      	ldr	r3, [pc, #144]	; (8007a04 <HAL_RCC_OscConfig+0x2b4>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007976:	f7fe fa5d 	bl	8005e34 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	e008      	b.n	8007990 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800797e:	f7fe fa59 	bl	8005e34 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e14d      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 8007992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1f0      	bne.n	800797e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80a0 	beq.w	8007aea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10f      	bne.n	80079da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	4a0e      	ldr	r2, [pc, #56]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <HAL_RCC_OscConfig+0x2ac>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <HAL_RCC_OscConfig+0x2b8>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d121      	bne.n	8007a2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <HAL_RCC_OscConfig+0x2b8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a07      	ldr	r2, [pc, #28]	; (8007a08 <HAL_RCC_OscConfig+0x2b8>)
 80079ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f2:	f7fe fa1f 	bl	8005e34 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f8:	e011      	b.n	8007a1e <HAL_RCC_OscConfig+0x2ce>
 80079fa:	bf00      	nop
 80079fc:	40023800 	.word	0x40023800
 8007a00:	42470000 	.word	0x42470000
 8007a04:	42470e80 	.word	0x42470e80
 8007a08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0c:	f7fe fa12 	bl	8005e34 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e106      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a1e:	4b85      	ldr	r3, [pc, #532]	; (8007c34 <HAL_RCC_OscConfig+0x4e4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0f0      	beq.n	8007a0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d106      	bne.n	8007a40 <HAL_RCC_OscConfig+0x2f0>
 8007a32:	4b81      	ldr	r3, [pc, #516]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	4a80      	ldr	r2, [pc, #512]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a3e:	e01c      	b.n	8007a7a <HAL_RCC_OscConfig+0x32a>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	d10c      	bne.n	8007a62 <HAL_RCC_OscConfig+0x312>
 8007a48:	4b7b      	ldr	r3, [pc, #492]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a7a      	ldr	r2, [pc, #488]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a4e:	f043 0304 	orr.w	r3, r3, #4
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
 8007a54:	4b78      	ldr	r3, [pc, #480]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4a77      	ldr	r2, [pc, #476]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a60:	e00b      	b.n	8007a7a <HAL_RCC_OscConfig+0x32a>
 8007a62:	4b75      	ldr	r3, [pc, #468]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a74      	ldr	r2, [pc, #464]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	4b72      	ldr	r3, [pc, #456]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	4a71      	ldr	r2, [pc, #452]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007a74:	f023 0304 	bic.w	r3, r3, #4
 8007a78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d015      	beq.n	8007aae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a82:	f7fe f9d7 	bl	8005e34 <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a88:	e00a      	b.n	8007aa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a8a:	f7fe f9d3 	bl	8005e34 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e0c5      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa0:	4b65      	ldr	r3, [pc, #404]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0ee      	beq.n	8007a8a <HAL_RCC_OscConfig+0x33a>
 8007aac:	e014      	b.n	8007ad8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aae:	f7fe f9c1 	bl	8005e34 <HAL_GetTick>
 8007ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ab4:	e00a      	b.n	8007acc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ab6:	f7fe f9bd 	bl	8005e34 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e0af      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007acc:	4b5a      	ldr	r3, [pc, #360]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1ee      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d105      	bne.n	8007aea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ade:	4b56      	ldr	r3, [pc, #344]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	4a55      	ldr	r2, [pc, #340]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 809b 	beq.w	8007c2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007af4:	4b50      	ldr	r3, [pc, #320]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 030c 	and.w	r3, r3, #12
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d05c      	beq.n	8007bba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d141      	bne.n	8007b8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b08:	4b4c      	ldr	r3, [pc, #304]	; (8007c3c <HAL_RCC_OscConfig+0x4ec>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0e:	f7fe f991 	bl	8005e34 <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b16:	f7fe f98d 	bl	8005e34 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e081      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b28:	4b43      	ldr	r3, [pc, #268]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	019b      	lsls	r3, r3, #6
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	4937      	ldr	r1, [pc, #220]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b5e:	4b37      	ldr	r3, [pc, #220]	; (8007c3c <HAL_RCC_OscConfig+0x4ec>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b64:	f7fe f966 	bl	8005e34 <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fe f962 	bl	8005e34 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e056      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0f0      	beq.n	8007b6c <HAL_RCC_OscConfig+0x41c>
 8007b8a:	e04e      	b.n	8007c2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8c:	4b2b      	ldr	r3, [pc, #172]	; (8007c3c <HAL_RCC_OscConfig+0x4ec>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b92:	f7fe f94f 	bl	8005e34 <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b9a:	f7fe f94b 	bl	8005e34 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e03f      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bac:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f0      	bne.n	8007b9a <HAL_RCC_OscConfig+0x44a>
 8007bb8:	e037      	b.n	8007c2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e032      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bc6:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <HAL_RCC_OscConfig+0x4e8>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d028      	beq.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d121      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d11a      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d111      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d107      	bne.n	8007c26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d001      	beq.n	8007c2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e000      	b.n	8007c2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40007000 	.word	0x40007000
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	42470060 	.word	0x42470060

08007c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0cc      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c54:	4b68      	ldr	r3, [pc, #416]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d90c      	bls.n	8007c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c62:	4b65      	ldr	r3, [pc, #404]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6a:	4b63      	ldr	r3, [pc, #396]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d001      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0b8      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d020      	beq.n	8007cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c94:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4a58      	ldr	r2, [pc, #352]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cac:	4b53      	ldr	r3, [pc, #332]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	4a52      	ldr	r2, [pc, #328]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cb8:	4b50      	ldr	r3, [pc, #320]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	494d      	ldr	r1, [pc, #308]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d044      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cde:	4b47      	ldr	r3, [pc, #284]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d119      	bne.n	8007d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e07f      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d107      	bne.n	8007d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cfe:	4b3f      	ldr	r3, [pc, #252]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e06f      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d0e:	4b3b      	ldr	r3, [pc, #236]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e067      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d1e:	4b37      	ldr	r3, [pc, #220]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f023 0203 	bic.w	r2, r3, #3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4934      	ldr	r1, [pc, #208]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d30:	f7fe f880 	bl	8005e34 <HAL_GetTick>
 8007d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d36:	e00a      	b.n	8007d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d38:	f7fe f87c 	bl	8005e34 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e04f      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4e:	4b2b      	ldr	r3, [pc, #172]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 020c 	and.w	r2, r3, #12
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d1eb      	bne.n	8007d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d60:	4b25      	ldr	r3, [pc, #148]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d20c      	bcs.n	8007d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6e:	4b22      	ldr	r3, [pc, #136]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d76:	4b20      	ldr	r3, [pc, #128]	; (8007df8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d001      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e032      	b.n	8007dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d94:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4916      	ldr	r1, [pc, #88]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d009      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007db2:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	490e      	ldr	r1, [pc, #56]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dc6:	f000 f821 	bl	8007e0c <HAL_RCC_GetSysClockFreq>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <HAL_RCC_ClockConfig+0x1bc>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	490a      	ldr	r1, [pc, #40]	; (8007e00 <HAL_RCC_ClockConfig+0x1c0>)
 8007dd8:	5ccb      	ldrb	r3, [r1, r3]
 8007dda:	fa22 f303 	lsr.w	r3, r2, r3
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <HAL_RCC_ClockConfig+0x1c4>)
 8007de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007de2:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <HAL_RCC_ClockConfig+0x1c8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fd ffe0 	bl	8005dac <HAL_InitTick>

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40023c00 	.word	0x40023c00
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	0800a520 	.word	0x0800a520
 8007e04:	20000000 	.word	0x20000000
 8007e08:	200000d8 	.word	0x200000d8

08007e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	607b      	str	r3, [r7, #4]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e24:	4b67      	ldr	r3, [pc, #412]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f003 030c 	and.w	r3, r3, #12
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d00d      	beq.n	8007e4c <HAL_RCC_GetSysClockFreq+0x40>
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	f200 80bd 	bhi.w	8007fb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_RCC_GetSysClockFreq+0x34>
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d003      	beq.n	8007e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e3e:	e0b7      	b.n	8007fb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e40:	4b61      	ldr	r3, [pc, #388]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e42:	60bb      	str	r3, [r7, #8]
       break;
 8007e44:	e0b7      	b.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e46:	4b61      	ldr	r3, [pc, #388]	; (8007fcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e48:	60bb      	str	r3, [r7, #8]
      break;
 8007e4a:	e0b4      	b.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e4c:	4b5d      	ldr	r3, [pc, #372]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e56:	4b5b      	ldr	r3, [pc, #364]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04d      	beq.n	8007efe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e62:	4b58      	ldr	r3, [pc, #352]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e72:	f04f 0100 	mov.w	r1, #0
 8007e76:	ea02 0800 	and.w	r8, r2, r0
 8007e7a:	ea03 0901 	and.w	r9, r3, r1
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	014b      	lsls	r3, r1, #5
 8007e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e90:	0142      	lsls	r2, r0, #5
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	ebb0 0008 	subs.w	r0, r0, r8
 8007e9a:	eb61 0109 	sbc.w	r1, r1, r9
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	018b      	lsls	r3, r1, #6
 8007ea8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007eac:	0182      	lsls	r2, r0, #6
 8007eae:	1a12      	subs	r2, r2, r0
 8007eb0:	eb63 0301 	sbc.w	r3, r3, r1
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	00d9      	lsls	r1, r3, #3
 8007ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ec2:	00d0      	lsls	r0, r2, #3
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	eb12 0208 	adds.w	r2, r2, r8
 8007ecc:	eb43 0309 	adc.w	r3, r3, r9
 8007ed0:	f04f 0000 	mov.w	r0, #0
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	0259      	lsls	r1, r3, #9
 8007eda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007ede:	0250      	lsls	r0, r2, #9
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	f7f8 f9c6 	bl	8000280 <__aeabi_uldivmod>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4613      	mov	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e04a      	b.n	8007f94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007efe:	4b31      	ldr	r3, [pc, #196]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	099b      	lsrs	r3, r3, #6
 8007f04:	461a      	mov	r2, r3
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f0e:	f04f 0100 	mov.w	r1, #0
 8007f12:	ea02 0400 	and.w	r4, r2, r0
 8007f16:	ea03 0501 	and.w	r5, r3, r1
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	014b      	lsls	r3, r1, #5
 8007f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f2c:	0142      	lsls	r2, r0, #5
 8007f2e:	4610      	mov	r0, r2
 8007f30:	4619      	mov	r1, r3
 8007f32:	1b00      	subs	r0, r0, r4
 8007f34:	eb61 0105 	sbc.w	r1, r1, r5
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	018b      	lsls	r3, r1, #6
 8007f42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f46:	0182      	lsls	r2, r0, #6
 8007f48:	1a12      	subs	r2, r2, r0
 8007f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8007f4e:	f04f 0000 	mov.w	r0, #0
 8007f52:	f04f 0100 	mov.w	r1, #0
 8007f56:	00d9      	lsls	r1, r3, #3
 8007f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f5c:	00d0      	lsls	r0, r2, #3
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	1912      	adds	r2, r2, r4
 8007f64:	eb45 0303 	adc.w	r3, r5, r3
 8007f68:	f04f 0000 	mov.w	r0, #0
 8007f6c:	f04f 0100 	mov.w	r1, #0
 8007f70:	0299      	lsls	r1, r3, #10
 8007f72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f76:	0290      	lsls	r0, r2, #10
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	f7f8 f97a 	bl	8000280 <__aeabi_uldivmod>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4613      	mov	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f94:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	0c1b      	lsrs	r3, r3, #16
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	60bb      	str	r3, [r7, #8]
      break;
 8007fae:	e002      	b.n	8007fb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007fb2:	60bb      	str	r3, [r7, #8]
      break;
 8007fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40023800 	.word	0x40023800
 8007fc8:	00f42400 	.word	0x00f42400
 8007fcc:	007a1200 	.word	0x007a1200

08007fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fd4:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000000 	.word	0x20000000

08007fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fec:	f7ff fff0 	bl	8007fd0 <HAL_RCC_GetHCLKFreq>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4b05      	ldr	r3, [pc, #20]	; (8008008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	0a9b      	lsrs	r3, r3, #10
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	4903      	ldr	r1, [pc, #12]	; (800800c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ffe:	5ccb      	ldrb	r3, [r1, r3]
 8008000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008004:	4618      	mov	r0, r3
 8008006:	bd80      	pop	{r7, pc}
 8008008:	40023800 	.word	0x40023800
 800800c:	0800a530 	.word	0x0800a530

08008010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008014:	f7ff ffdc 	bl	8007fd0 <HAL_RCC_GetHCLKFreq>
 8008018:	4602      	mov	r2, r0
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	0b5b      	lsrs	r3, r3, #13
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	4903      	ldr	r1, [pc, #12]	; (8008034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008026:	5ccb      	ldrb	r3, [r1, r3]
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800802c:	4618      	mov	r0, r3
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40023800 	.word	0x40023800
 8008034:	0800a530 	.word	0x0800a530

08008038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e041      	b.n	80080ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d106      	bne.n	8008064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7f8 fd2e 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f000 fbd8 	bl	800882c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e041      	b.n	800816c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d106      	bne.n	8008102 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f839 	bl	8008174 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2202      	movs	r2, #2
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f000 fb89 	bl	800882c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d109      	bne.n	80081b0 <HAL_TIM_OC_Start_IT+0x28>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	bf14      	ite	ne
 80081a8:	2301      	movne	r3, #1
 80081aa:	2300      	moveq	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	e022      	b.n	80081f6 <HAL_TIM_OC_Start_IT+0x6e>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d109      	bne.n	80081ca <HAL_TIM_OC_Start_IT+0x42>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	bf14      	ite	ne
 80081c2:	2301      	movne	r3, #1
 80081c4:	2300      	moveq	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	e015      	b.n	80081f6 <HAL_TIM_OC_Start_IT+0x6e>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d109      	bne.n	80081e4 <HAL_TIM_OC_Start_IT+0x5c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	bf14      	ite	ne
 80081dc:	2301      	movne	r3, #1
 80081de:	2300      	moveq	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	e008      	b.n	80081f6 <HAL_TIM_OC_Start_IT+0x6e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	bf14      	ite	ne
 80081f0:	2301      	movne	r3, #1
 80081f2:	2300      	moveq	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e0b3      	b.n	8008366 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <HAL_TIM_OC_Start_IT+0x86>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800820c:	e013      	b.n	8008236 <HAL_TIM_OC_Start_IT+0xae>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b04      	cmp	r3, #4
 8008212:	d104      	bne.n	800821e <HAL_TIM_OC_Start_IT+0x96>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800821c:	e00b      	b.n	8008236 <HAL_TIM_OC_Start_IT+0xae>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b08      	cmp	r3, #8
 8008222:	d104      	bne.n	800822e <HAL_TIM_OC_Start_IT+0xa6>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800822c:	e003      	b.n	8008236 <HAL_TIM_OC_Start_IT+0xae>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b0c      	cmp	r3, #12
 800823a:	d841      	bhi.n	80082c0 <HAL_TIM_OC_Start_IT+0x138>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <HAL_TIM_OC_Start_IT+0xbc>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008279 	.word	0x08008279
 8008248:	080082c1 	.word	0x080082c1
 800824c:	080082c1 	.word	0x080082c1
 8008250:	080082c1 	.word	0x080082c1
 8008254:	0800828b 	.word	0x0800828b
 8008258:	080082c1 	.word	0x080082c1
 800825c:	080082c1 	.word	0x080082c1
 8008260:	080082c1 	.word	0x080082c1
 8008264:	0800829d 	.word	0x0800829d
 8008268:	080082c1 	.word	0x080082c1
 800826c:	080082c1 	.word	0x080082c1
 8008270:	080082c1 	.word	0x080082c1
 8008274:	080082af 	.word	0x080082af
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0202 	orr.w	r2, r2, #2
 8008286:	60da      	str	r2, [r3, #12]
      break;
 8008288:	e01d      	b.n	80082c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0204 	orr.w	r2, r2, #4
 8008298:	60da      	str	r2, [r3, #12]
      break;
 800829a:	e014      	b.n	80082c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0208 	orr.w	r2, r2, #8
 80082aa:	60da      	str	r2, [r3, #12]
      break;
 80082ac:	e00b      	b.n	80082c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0210 	orr.w	r2, r2, #16
 80082bc:	60da      	str	r2, [r3, #12]
      break;
 80082be:	e002      	b.n	80082c6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
      break;
 80082c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d14b      	bne.n	8008364 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2201      	movs	r2, #1
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fd4f 	bl	8008d78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a24      	ldr	r2, [pc, #144]	; (8008370 <HAL_TIM_OC_Start_IT+0x1e8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1d      	ldr	r2, [pc, #116]	; (8008370 <HAL_TIM_OC_Start_IT+0x1e8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d018      	beq.n	8008330 <HAL_TIM_OC_Start_IT+0x1a8>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008306:	d013      	beq.n	8008330 <HAL_TIM_OC_Start_IT+0x1a8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a19      	ldr	r2, [pc, #100]	; (8008374 <HAL_TIM_OC_Start_IT+0x1ec>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00e      	beq.n	8008330 <HAL_TIM_OC_Start_IT+0x1a8>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a18      	ldr	r2, [pc, #96]	; (8008378 <HAL_TIM_OC_Start_IT+0x1f0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d009      	beq.n	8008330 <HAL_TIM_OC_Start_IT+0x1a8>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a16      	ldr	r2, [pc, #88]	; (800837c <HAL_TIM_OC_Start_IT+0x1f4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <HAL_TIM_OC_Start_IT+0x1a8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a15      	ldr	r2, [pc, #84]	; (8008380 <HAL_TIM_OC_Start_IT+0x1f8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d111      	bne.n	8008354 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b06      	cmp	r3, #6
 8008340:	d010      	beq.n	8008364 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f042 0201 	orr.w	r2, r2, #1
 8008350:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008352:	e007      	b.n	8008364 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0201 	orr.w	r2, r2, #1
 8008362:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	40010000 	.word	0x40010000
 8008374:	40000400 	.word	0x40000400
 8008378:	40000800 	.word	0x40000800
 800837c:	40000c00 	.word	0x40000c00
 8008380:	40014000 	.word	0x40014000

08008384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b02      	cmp	r3, #2
 8008398:	d122      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d11b      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0202 	mvn.w	r2, #2
 80083b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa11 	bl	80087ee <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f8 fb0e 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa14 	bl	8008802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d122      	bne.n	8008434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d11b      	bne.n	8008434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0204 	mvn.w	r2, #4
 8008404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9e7 	bl	80087ee <HAL_TIM_IC_CaptureCallback>
 8008420:	e005      	b.n	800842e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7f8 fae4 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f9ea 	bl	8008802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b08      	cmp	r3, #8
 8008440:	d122      	bne.n	8008488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b08      	cmp	r3, #8
 800844e:	d11b      	bne.n	8008488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f06f 0208 	mvn.w	r2, #8
 8008458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2204      	movs	r2, #4
 800845e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9bd 	bl	80087ee <HAL_TIM_IC_CaptureCallback>
 8008474:	e005      	b.n	8008482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f8 faba 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9c0 	bl	8008802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0310 	and.w	r3, r3, #16
 8008492:	2b10      	cmp	r3, #16
 8008494:	d122      	bne.n	80084dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d11b      	bne.n	80084dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0210 	mvn.w	r2, #16
 80084ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2208      	movs	r2, #8
 80084b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f993 	bl	80087ee <HAL_TIM_IC_CaptureCallback>
 80084c8:	e005      	b.n	80084d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7f8 fa90 	bl	80009f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f996 	bl	8008802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d10e      	bne.n	8008508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d107      	bne.n	8008508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0201 	mvn.w	r2, #1
 8008500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f969 	bl	80087da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b80      	cmp	r3, #128	; 0x80
 8008514:	d10e      	bne.n	8008534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008520:	2b80      	cmp	r3, #128	; 0x80
 8008522:	d107      	bne.n	8008534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fcc0 	bl	8008eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	d10e      	bne.n	8008560 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854c:	2b40      	cmp	r3, #64	; 0x40
 800854e:	d107      	bne.n	8008560 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f95b 	bl	8008816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b20      	cmp	r3, #32
 800856c:	d10e      	bne.n	800858c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b20      	cmp	r3, #32
 800857a:	d107      	bne.n	800858c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f06f 0220 	mvn.w	r2, #32
 8008584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fc8a 	bl	8008ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e048      	b.n	8008644 <HAL_TIM_OC_ConfigChannel+0xb0>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b0c      	cmp	r3, #12
 80085be:	d839      	bhi.n	8008634 <HAL_TIM_OC_ConfigChannel+0xa0>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085fd 	.word	0x080085fd
 80085cc:	08008635 	.word	0x08008635
 80085d0:	08008635 	.word	0x08008635
 80085d4:	08008635 	.word	0x08008635
 80085d8:	0800860b 	.word	0x0800860b
 80085dc:	08008635 	.word	0x08008635
 80085e0:	08008635 	.word	0x08008635
 80085e4:	08008635 	.word	0x08008635
 80085e8:	08008619 	.word	0x08008619
 80085ec:	08008635 	.word	0x08008635
 80085f0:	08008635 	.word	0x08008635
 80085f4:	08008635 	.word	0x08008635
 80085f8:	08008627 	.word	0x08008627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f992 	bl	800892c <TIM_OC1_SetConfig>
      break;
 8008608:	e017      	b.n	800863a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f9f1 	bl	80089f8 <TIM_OC2_SetConfig>
      break;
 8008616:	e010      	b.n	800863a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fa56 	bl	8008ad0 <TIM_OC3_SetConfig>
      break;
 8008624:	e009      	b.n	800863a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fab9 	bl	8008ba4 <TIM_OC4_SetConfig>
      break;
 8008632:	e002      	b.n	800863a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	75fb      	strb	r3, [r7, #23]
      break;
 8008638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008660:	2b01      	cmp	r3, #1
 8008662:	d101      	bne.n	8008668 <HAL_TIM_ConfigClockSource+0x1c>
 8008664:	2302      	movs	r3, #2
 8008666:	e0b4      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x186>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800868e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a0:	d03e      	beq.n	8008720 <HAL_TIM_ConfigClockSource+0xd4>
 80086a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a6:	f200 8087 	bhi.w	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ae:	f000 8086 	beq.w	80087be <HAL_TIM_ConfigClockSource+0x172>
 80086b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b6:	d87f      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086b8:	2b70      	cmp	r3, #112	; 0x70
 80086ba:	d01a      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0xa6>
 80086bc:	2b70      	cmp	r3, #112	; 0x70
 80086be:	d87b      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086c0:	2b60      	cmp	r3, #96	; 0x60
 80086c2:	d050      	beq.n	8008766 <HAL_TIM_ConfigClockSource+0x11a>
 80086c4:	2b60      	cmp	r3, #96	; 0x60
 80086c6:	d877      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086c8:	2b50      	cmp	r3, #80	; 0x50
 80086ca:	d03c      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0xfa>
 80086cc:	2b50      	cmp	r3, #80	; 0x50
 80086ce:	d873      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086d0:	2b40      	cmp	r3, #64	; 0x40
 80086d2:	d058      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x13a>
 80086d4:	2b40      	cmp	r3, #64	; 0x40
 80086d6:	d86f      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086d8:	2b30      	cmp	r3, #48	; 0x30
 80086da:	d064      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15a>
 80086dc:	2b30      	cmp	r3, #48	; 0x30
 80086de:	d86b      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d060      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15a>
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d867      	bhi.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d05c      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15a>
 80086ec:	2b10      	cmp	r3, #16
 80086ee:	d05a      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0x15a>
 80086f0:	e062      	b.n	80087b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6899      	ldr	r1, [r3, #8]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f000 fb19 	bl	8008d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	609a      	str	r2, [r3, #8]
      break;
 800871e:	e04f      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	6899      	ldr	r1, [r3, #8]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f000 fb02 	bl	8008d38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008742:	609a      	str	r2, [r3, #8]
      break;
 8008744:	e03c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6859      	ldr	r1, [r3, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	461a      	mov	r2, r3
 8008754:	f000 fa76 	bl	8008c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2150      	movs	r1, #80	; 0x50
 800875e:	4618      	mov	r0, r3
 8008760:	f000 facf 	bl	8008d02 <TIM_ITRx_SetConfig>
      break;
 8008764:	e02c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	6859      	ldr	r1, [r3, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	461a      	mov	r2, r3
 8008774:	f000 fa95 	bl	8008ca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2160      	movs	r1, #96	; 0x60
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fabf 	bl	8008d02 <TIM_ITRx_SetConfig>
      break;
 8008784:	e01c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6859      	ldr	r1, [r3, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	461a      	mov	r2, r3
 8008794:	f000 fa56 	bl	8008c44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2140      	movs	r1, #64	; 0x40
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 faaf 	bl	8008d02 <TIM_ITRx_SetConfig>
      break;
 80087a4:	e00c      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4619      	mov	r1, r3
 80087b0:	4610      	mov	r0, r2
 80087b2:	f000 faa6 	bl	8008d02 <TIM_ITRx_SetConfig>
      break;
 80087b6:	e003      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	73fb      	strb	r3, [r7, #15]
      break;
 80087bc:	e000      	b.n	80087c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
	...

0800882c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a34      	ldr	r2, [pc, #208]	; (8008910 <TIM_Base_SetConfig+0xe4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00f      	beq.n	8008864 <TIM_Base_SetConfig+0x38>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884a:	d00b      	beq.n	8008864 <TIM_Base_SetConfig+0x38>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a31      	ldr	r2, [pc, #196]	; (8008914 <TIM_Base_SetConfig+0xe8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d007      	beq.n	8008864 <TIM_Base_SetConfig+0x38>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a30      	ldr	r2, [pc, #192]	; (8008918 <TIM_Base_SetConfig+0xec>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d003      	beq.n	8008864 <TIM_Base_SetConfig+0x38>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a2f      	ldr	r2, [pc, #188]	; (800891c <TIM_Base_SetConfig+0xf0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d108      	bne.n	8008876 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a25      	ldr	r2, [pc, #148]	; (8008910 <TIM_Base_SetConfig+0xe4>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d01b      	beq.n	80088b6 <TIM_Base_SetConfig+0x8a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008884:	d017      	beq.n	80088b6 <TIM_Base_SetConfig+0x8a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a22      	ldr	r2, [pc, #136]	; (8008914 <TIM_Base_SetConfig+0xe8>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d013      	beq.n	80088b6 <TIM_Base_SetConfig+0x8a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a21      	ldr	r2, [pc, #132]	; (8008918 <TIM_Base_SetConfig+0xec>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00f      	beq.n	80088b6 <TIM_Base_SetConfig+0x8a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a20      	ldr	r2, [pc, #128]	; (800891c <TIM_Base_SetConfig+0xf0>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00b      	beq.n	80088b6 <TIM_Base_SetConfig+0x8a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a1f      	ldr	r2, [pc, #124]	; (8008920 <TIM_Base_SetConfig+0xf4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d007      	beq.n	80088b6 <TIM_Base_SetConfig+0x8a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a1e      	ldr	r2, [pc, #120]	; (8008924 <TIM_Base_SetConfig+0xf8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <TIM_Base_SetConfig+0x8a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a1d      	ldr	r2, [pc, #116]	; (8008928 <TIM_Base_SetConfig+0xfc>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d108      	bne.n	80088c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a08      	ldr	r2, [pc, #32]	; (8008910 <TIM_Base_SetConfig+0xe4>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d103      	bne.n	80088fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	615a      	str	r2, [r3, #20]
}
 8008902:	bf00      	nop
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40010000 	.word	0x40010000
 8008914:	40000400 	.word	0x40000400
 8008918:	40000800 	.word	0x40000800
 800891c:	40000c00 	.word	0x40000c00
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400
 8008928:	40014800 	.word	0x40014800

0800892c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	f023 0201 	bic.w	r2, r3, #1
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 0302 	bic.w	r3, r3, #2
 8008974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <TIM_OC1_SetConfig+0xc8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d10c      	bne.n	80089a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f023 0308 	bic.w	r3, r3, #8
 800898e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	4313      	orrs	r3, r2
 8008998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f023 0304 	bic.w	r3, r3, #4
 80089a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a13      	ldr	r2, [pc, #76]	; (80089f4 <TIM_OC1_SetConfig+0xc8>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d111      	bne.n	80089ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	621a      	str	r2, [r3, #32]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	40010000 	.word	0x40010000

080089f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f023 0210 	bic.w	r2, r3, #16
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f023 0320 	bic.w	r3, r3, #32
 8008a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a1e      	ldr	r2, [pc, #120]	; (8008acc <TIM_OC2_SetConfig+0xd4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d10d      	bne.n	8008a74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	011b      	lsls	r3, r3, #4
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a15      	ldr	r2, [pc, #84]	; (8008acc <TIM_OC2_SetConfig+0xd4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d113      	bne.n	8008aa4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	621a      	str	r2, [r3, #32]
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40010000 	.word	0x40010000

08008ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	021b      	lsls	r3, r3, #8
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	; (8008ba0 <TIM_OC3_SetConfig+0xd0>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d10d      	bne.n	8008b4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a14      	ldr	r2, [pc, #80]	; (8008ba0 <TIM_OC3_SetConfig+0xd0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d113      	bne.n	8008b7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	621a      	str	r2, [r3, #32]
}
 8008b94:	bf00      	nop
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	40010000 	.word	0x40010000

08008ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	031b      	lsls	r3, r3, #12
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a10      	ldr	r2, [pc, #64]	; (8008c40 <TIM_OC4_SetConfig+0x9c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d109      	bne.n	8008c18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	019b      	lsls	r3, r3, #6
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	621a      	str	r2, [r3, #32]
}
 8008c32:	bf00      	nop
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	40010000 	.word	0x40010000

08008c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	f023 0201 	bic.w	r2, r3, #1
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f023 030a 	bic.w	r3, r3, #10
 8008c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	621a      	str	r2, [r3, #32]
}
 8008c96:	bf00      	nop
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b087      	sub	sp, #28
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	f023 0210 	bic.w	r2, r3, #16
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	031b      	lsls	r3, r3, #12
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	621a      	str	r2, [r3, #32]
}
 8008cf6:	bf00      	nop
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	f043 0307 	orr.w	r3, r3, #7
 8008d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	609a      	str	r2, [r3, #8]
}
 8008d2c:	bf00      	nop
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	021a      	lsls	r2, r3, #8
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	609a      	str	r2, [r3, #8]
}
 8008d6c:	bf00      	nop
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f003 031f 	and.w	r3, r3, #31
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6a1a      	ldr	r2, [r3, #32]
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	43db      	mvns	r3, r3
 8008d9a:	401a      	ands	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a1a      	ldr	r2, [r3, #32]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f003 031f 	and.w	r3, r3, #31
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	fa01 f303 	lsl.w	r3, r1, r3
 8008db0:	431a      	orrs	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	bf00      	nop
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
	...

08008dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d101      	bne.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	e050      	b.n	8008e7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a1c      	ldr	r2, [pc, #112]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d018      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e28:	d013      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a18      	ldr	r2, [pc, #96]	; (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00e      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a16      	ldr	r2, [pc, #88]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d009      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a15      	ldr	r2, [pc, #84]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d004      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a13      	ldr	r2, [pc, #76]	; (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d10c      	bne.n	8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40010000 	.word	0x40010000
 8008e90:	40000400 	.word	0x40000400
 8008e94:	40000800 	.word	0x40000800
 8008e98:	40000c00 	.word	0x40000c00
 8008e9c:	40014000 	.word	0x40014000

08008ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e03f      	b.n	8008f5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7f7 fe0e 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2224      	movs	r2, #36	; 0x24
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fcbf 	bl	8009890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	695a      	ldr	r2, [r3, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d130      	bne.n	8008fde <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <HAL_UART_Transmit_IT+0x26>
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e029      	b.n	8008fe0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_UART_Transmit_IT+0x38>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e022      	b.n	8008fe0 <HAL_UART_Transmit_IT+0x7e>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	88fa      	ldrh	r2, [r7, #6]
 8008fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2221      	movs	r2, #33	; 0x21
 8008fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fd8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e000      	b.n	8008fe0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008fde:	2302      	movs	r3, #2
  }
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b0ba      	sub	sp, #232	; 0xe8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009012:	2300      	movs	r3, #0
 8009014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009018:	2300      	movs	r3, #0
 800901a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800901e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800902a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10f      	bne.n	8009052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d009      	beq.n	8009052 <HAL_UART_IRQHandler+0x66>
 800903e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fb65 	bl	800971a <UART_Receive_IT>
      return;
 8009050:	e256      	b.n	8009500 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 80de 	beq.w	8009218 <HAL_UART_IRQHandler+0x22c>
 800905c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d106      	bne.n	8009076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800906c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80d1 	beq.w	8009218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <HAL_UART_IRQHandler+0xae>
 8009082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	f043 0201 	orr.w	r2, r3, #1
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909e:	f003 0304 	and.w	r3, r3, #4
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <HAL_UART_IRQHandler+0xd2>
 80090a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	f043 0202 	orr.w	r2, r3, #2
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <HAL_UART_IRQHandler+0xf6>
 80090ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	f043 0204 	orr.w	r2, r3, #4
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e6:	f003 0308 	and.w	r3, r3, #8
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d011      	beq.n	8009112 <HAL_UART_IRQHandler+0x126>
 80090ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d105      	bne.n	8009106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	f043 0208 	orr.w	r2, r3, #8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 81ed 	beq.w	80094f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800911c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009120:	f003 0320 	and.w	r3, r3, #32
 8009124:	2b00      	cmp	r3, #0
 8009126:	d008      	beq.n	800913a <HAL_UART_IRQHandler+0x14e>
 8009128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 faf0 	bl	800971a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009144:	2b40      	cmp	r3, #64	; 0x40
 8009146:	bf0c      	ite	eq
 8009148:	2301      	moveq	r3, #1
 800914a:	2300      	movne	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	f003 0308 	and.w	r3, r3, #8
 800915a:	2b00      	cmp	r3, #0
 800915c:	d103      	bne.n	8009166 <HAL_UART_IRQHandler+0x17a>
 800915e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009162:	2b00      	cmp	r3, #0
 8009164:	d04f      	beq.n	8009206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f9f8 	bl	800955c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009176:	2b40      	cmp	r3, #64	; 0x40
 8009178:	d141      	bne.n	80091fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3314      	adds	r3, #20
 8009180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3314      	adds	r3, #20
 80091a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1d9      	bne.n	800917a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d013      	beq.n	80091f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	4a7d      	ldr	r2, [pc, #500]	; (80093c8 <HAL_UART_IRQHandler+0x3dc>)
 80091d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fc ffdb 	bl	8006196 <HAL_DMA_Abort_IT>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d016      	beq.n	8009214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f4:	e00e      	b.n	8009214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f99a 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091fc:	e00a      	b.n	8009214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f996 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009204:	e006      	b.n	8009214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f992 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009212:	e170      	b.n	80094f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009214:	bf00      	nop
    return;
 8009216:	e16e      	b.n	80094f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921c:	2b01      	cmp	r3, #1
 800921e:	f040 814a 	bne.w	80094b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009226:	f003 0310 	and.w	r3, r3, #16
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8143 	beq.w	80094b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009234:	f003 0310 	and.w	r3, r3, #16
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 813c 	beq.w	80094b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60bb      	str	r3, [r7, #8]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	60bb      	str	r3, [r7, #8]
 8009252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b40      	cmp	r3, #64	; 0x40
 8009260:	f040 80b4 	bne.w	80093cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 8140 	beq.w	80094fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800927e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009282:	429a      	cmp	r2, r3
 8009284:	f080 8139 	bcs.w	80094fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800928e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800929a:	f000 8088 	beq.w	80093ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330c      	adds	r3, #12
 80092a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	330c      	adds	r3, #12
 80092c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1d9      	bne.n	800929e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3314      	adds	r3, #20
 80092f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092fc:	f023 0301 	bic.w	r3, r3, #1
 8009300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3314      	adds	r3, #20
 800930a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800930e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e1      	bne.n	80092ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3314      	adds	r3, #20
 800932c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800933c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3314      	adds	r3, #20
 8009346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800934a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800934c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800937c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	330c      	adds	r3, #12
 800938c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009390:	65ba      	str	r2, [r7, #88]	; 0x58
 8009392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800939e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e3      	bne.n	800936c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fc fe84 	bl	80060b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f8c0 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093c4:	e099      	b.n	80094fa <HAL_UART_IRQHandler+0x50e>
 80093c6:	bf00      	nop
 80093c8:	08009623 	.word	0x08009623
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 808b 	beq.w	80094fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80093e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8086 	beq.w	80094fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	330c      	adds	r3, #12
 80093f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	330c      	adds	r3, #12
 8009412:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009416:	647a      	str	r2, [r7, #68]	; 0x44
 8009418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800941c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e3      	bne.n	80093f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3314      	adds	r3, #20
 8009430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	623b      	str	r3, [r7, #32]
   return(result);
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	f023 0301 	bic.w	r3, r3, #1
 8009440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3314      	adds	r3, #20
 800944a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800944e:	633a      	str	r2, [r7, #48]	; 0x30
 8009450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e3      	bne.n	800942a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	330c      	adds	r3, #12
 8009476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0310 	bic.w	r3, r3, #16
 8009486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	330c      	adds	r3, #12
 8009490:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009494:	61fa      	str	r2, [r7, #28]
 8009496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	69b9      	ldr	r1, [r7, #24]
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	617b      	str	r3, [r7, #20]
   return(result);
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e3      	bne.n	8009470 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f848 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094b4:	e023      	b.n	80094fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <HAL_UART_IRQHandler+0x4ea>
 80094c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f8bb 	bl	800964a <UART_Transmit_IT>
    return;
 80094d4:	e014      	b.n	8009500 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00e      	beq.n	8009500 <HAL_UART_IRQHandler+0x514>
 80094e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d008      	beq.n	8009500 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f8fb 	bl	80096ea <UART_EndTransmit_IT>
    return;
 80094f4:	e004      	b.n	8009500 <HAL_UART_IRQHandler+0x514>
    return;
 80094f6:	bf00      	nop
 80094f8:	e002      	b.n	8009500 <HAL_UART_IRQHandler+0x514>
      return;
 80094fa:	bf00      	nop
 80094fc:	e000      	b.n	8009500 <HAL_UART_IRQHandler+0x514>
      return;
 80094fe:	bf00      	nop
  }
}
 8009500:	37e8      	adds	r7, #232	; 0xe8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop

08009508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b095      	sub	sp, #84	; 0x54
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800957a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	330c      	adds	r3, #12
 8009582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009584:	643a      	str	r2, [r7, #64]	; 0x40
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800958a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e5      	bne.n	8009564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3314      	adds	r3, #20
 800959e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f023 0301 	bic.w	r3, r3, #1
 80095ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3314      	adds	r3, #20
 80095b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e5      	bne.n	8009598 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d119      	bne.n	8009608 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	330c      	adds	r3, #12
 80095da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f023 0310 	bic.w	r3, r3, #16
 80095ea:	647b      	str	r3, [r7, #68]	; 0x44
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	330c      	adds	r3, #12
 80095f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095f4:	61ba      	str	r2, [r7, #24]
 80095f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6979      	ldr	r1, [r7, #20]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	e841 2300 	strex	r3, r2, [r1]
 8009600:	613b      	str	r3, [r7, #16]
   return(result);
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e5      	bne.n	80095d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009616:	bf00      	nop
 8009618:	3754      	adds	r7, #84	; 0x54
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff ff77 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800964a:	b480      	push	{r7}
 800964c:	b085      	sub	sp, #20
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b21      	cmp	r3, #33	; 0x21
 800965c:	d13e      	bne.n	80096dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009666:	d114      	bne.n	8009692 <UART_Transmit_IT+0x48>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d110      	bne.n	8009692 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009684:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	1c9a      	adds	r2, r3, #2
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	621a      	str	r2, [r3, #32]
 8009690:	e008      	b.n	80096a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	1c59      	adds	r1, r3, #1
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6211      	str	r1, [r2, #32]
 800969c:	781a      	ldrb	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3b01      	subs	r3, #1
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	4619      	mov	r1, r3
 80096b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10f      	bne.n	80096d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	e000      	b.n	80096de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096dc:	2302      	movs	r3, #2
  }
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009700:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff fefc 	bl	8009508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b08c      	sub	sp, #48	; 0x30
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b22      	cmp	r3, #34	; 0x22
 800972c:	f040 80ab 	bne.w	8009886 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009738:	d117      	bne.n	800976a <UART_Receive_IT+0x50>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d113      	bne.n	800976a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	b29b      	uxth	r3, r3
 8009754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009758:	b29a      	uxth	r2, r3
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009762:	1c9a      	adds	r2, r3, #2
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	629a      	str	r2, [r3, #40]	; 0x28
 8009768:	e026      	b.n	80097b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009770:	2300      	movs	r3, #0
 8009772:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977c:	d007      	beq.n	800978e <UART_Receive_IT+0x74>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <UART_Receive_IT+0x82>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d106      	bne.n	800979c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	b2da      	uxtb	r2, r3
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	e008      	b.n	80097ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	4619      	mov	r1, r3
 80097c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d15a      	bne.n	8009882 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0220 	bic.w	r2, r2, #32
 80097da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695a      	ldr	r2, [r3, #20]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009808:	2b01      	cmp	r3, #1
 800980a:	d135      	bne.n	8009878 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	330c      	adds	r3, #12
 8009818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	613b      	str	r3, [r7, #16]
   return(result);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f023 0310 	bic.w	r3, r3, #16
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	330c      	adds	r3, #12
 8009830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009832:	623a      	str	r2, [r7, #32]
 8009834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	69f9      	ldr	r1, [r7, #28]
 8009838:	6a3a      	ldr	r2, [r7, #32]
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b10      	cmp	r3, #16
 8009852:	d10a      	bne.n	800986a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fe67 	bl	8009544 <HAL_UARTEx_RxEventCallback>
 8009876:	e002      	b.n	800987e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff fe4f 	bl	800951c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	e002      	b.n	8009888 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	e000      	b.n	8009888 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009886:	2302      	movs	r3, #2
  }
}
 8009888:	4618      	mov	r0, r3
 800988a:	3730      	adds	r7, #48	; 0x30
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	b09f      	sub	sp, #124	; 0x7c
 8009896:	af00      	add	r7, sp, #0
 8009898:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800989a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a6:	68d9      	ldr	r1, [r3, #12]
 80098a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	ea40 0301 	orr.w	r3, r0, r1
 80098b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	431a      	orrs	r2, r3
 80098bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	431a      	orrs	r2, r3
 80098c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80098ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098d4:	f021 010c 	bic.w	r1, r1, #12
 80098d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098de:	430b      	orrs	r3, r1
 80098e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ee:	6999      	ldr	r1, [r3, #24]
 80098f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	ea40 0301 	orr.w	r3, r0, r1
 80098f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	4bc5      	ldr	r3, [pc, #788]	; (8009c14 <UART_SetConfig+0x384>)
 8009900:	429a      	cmp	r2, r3
 8009902:	d004      	beq.n	800990e <UART_SetConfig+0x7e>
 8009904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	4bc3      	ldr	r3, [pc, #780]	; (8009c18 <UART_SetConfig+0x388>)
 800990a:	429a      	cmp	r2, r3
 800990c:	d103      	bne.n	8009916 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800990e:	f7fe fb7f 	bl	8008010 <HAL_RCC_GetPCLK2Freq>
 8009912:	6778      	str	r0, [r7, #116]	; 0x74
 8009914:	e002      	b.n	800991c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009916:	f7fe fb67 	bl	8007fe8 <HAL_RCC_GetPCLK1Freq>
 800991a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800991c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009924:	f040 80b6 	bne.w	8009a94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800992a:	461c      	mov	r4, r3
 800992c:	f04f 0500 	mov.w	r5, #0
 8009930:	4622      	mov	r2, r4
 8009932:	462b      	mov	r3, r5
 8009934:	1891      	adds	r1, r2, r2
 8009936:	6439      	str	r1, [r7, #64]	; 0x40
 8009938:	415b      	adcs	r3, r3
 800993a:	647b      	str	r3, [r7, #68]	; 0x44
 800993c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009940:	1912      	adds	r2, r2, r4
 8009942:	eb45 0303 	adc.w	r3, r5, r3
 8009946:	f04f 0000 	mov.w	r0, #0
 800994a:	f04f 0100 	mov.w	r1, #0
 800994e:	00d9      	lsls	r1, r3, #3
 8009950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009954:	00d0      	lsls	r0, r2, #3
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	1911      	adds	r1, r2, r4
 800995c:	6639      	str	r1, [r7, #96]	; 0x60
 800995e:	416b      	adcs	r3, r5
 8009960:	667b      	str	r3, [r7, #100]	; 0x64
 8009962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	461a      	mov	r2, r3
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	1891      	adds	r1, r2, r2
 800996e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009970:	415b      	adcs	r3, r3
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009978:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800997c:	f7f6 fc80 	bl	8000280 <__aeabi_uldivmod>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4ba5      	ldr	r3, [pc, #660]	; (8009c1c <UART_SetConfig+0x38c>)
 8009986:	fba3 2302 	umull	r2, r3, r3, r2
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	011e      	lsls	r6, r3, #4
 800998e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009990:	461c      	mov	r4, r3
 8009992:	f04f 0500 	mov.w	r5, #0
 8009996:	4622      	mov	r2, r4
 8009998:	462b      	mov	r3, r5
 800999a:	1891      	adds	r1, r2, r2
 800999c:	6339      	str	r1, [r7, #48]	; 0x30
 800999e:	415b      	adcs	r3, r3
 80099a0:	637b      	str	r3, [r7, #52]	; 0x34
 80099a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80099a6:	1912      	adds	r2, r2, r4
 80099a8:	eb45 0303 	adc.w	r3, r5, r3
 80099ac:	f04f 0000 	mov.w	r0, #0
 80099b0:	f04f 0100 	mov.w	r1, #0
 80099b4:	00d9      	lsls	r1, r3, #3
 80099b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099ba:	00d0      	lsls	r0, r2, #3
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	1911      	adds	r1, r2, r4
 80099c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80099c4:	416b      	adcs	r3, r5
 80099c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	461a      	mov	r2, r3
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	1891      	adds	r1, r2, r2
 80099d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80099d6:	415b      	adcs	r3, r3
 80099d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099e2:	f7f6 fc4d 	bl	8000280 <__aeabi_uldivmod>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	4b8c      	ldr	r3, [pc, #560]	; (8009c1c <UART_SetConfig+0x38c>)
 80099ec:	fba3 1302 	umull	r1, r3, r3, r2
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	2164      	movs	r1, #100	; 0x64
 80099f4:	fb01 f303 	mul.w	r3, r1, r3
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	3332      	adds	r3, #50	; 0x32
 80099fe:	4a87      	ldr	r2, [pc, #540]	; (8009c1c <UART_SetConfig+0x38c>)
 8009a00:	fba2 2303 	umull	r2, r3, r2, r3
 8009a04:	095b      	lsrs	r3, r3, #5
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a0c:	441e      	add	r6, r3
 8009a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a10:	4618      	mov	r0, r3
 8009a12:	f04f 0100 	mov.w	r1, #0
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	1894      	adds	r4, r2, r2
 8009a1c:	623c      	str	r4, [r7, #32]
 8009a1e:	415b      	adcs	r3, r3
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
 8009a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a26:	1812      	adds	r2, r2, r0
 8009a28:	eb41 0303 	adc.w	r3, r1, r3
 8009a2c:	f04f 0400 	mov.w	r4, #0
 8009a30:	f04f 0500 	mov.w	r5, #0
 8009a34:	00dd      	lsls	r5, r3, #3
 8009a36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a3a:	00d4      	lsls	r4, r2, #3
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	462b      	mov	r3, r5
 8009a40:	1814      	adds	r4, r2, r0
 8009a42:	653c      	str	r4, [r7, #80]	; 0x50
 8009a44:	414b      	adcs	r3, r1
 8009a46:	657b      	str	r3, [r7, #84]	; 0x54
 8009a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	1891      	adds	r1, r2, r2
 8009a54:	61b9      	str	r1, [r7, #24]
 8009a56:	415b      	adcs	r3, r3
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a62:	f7f6 fc0d 	bl	8000280 <__aeabi_uldivmod>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4b6c      	ldr	r3, [pc, #432]	; (8009c1c <UART_SetConfig+0x38c>)
 8009a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a70:	095b      	lsrs	r3, r3, #5
 8009a72:	2164      	movs	r1, #100	; 0x64
 8009a74:	fb01 f303 	mul.w	r3, r1, r3
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	3332      	adds	r3, #50	; 0x32
 8009a7e:	4a67      	ldr	r2, [pc, #412]	; (8009c1c <UART_SetConfig+0x38c>)
 8009a80:	fba2 2303 	umull	r2, r3, r2, r3
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	f003 0207 	and.w	r2, r3, #7
 8009a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4432      	add	r2, r6
 8009a90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a92:	e0b9      	b.n	8009c08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a96:	461c      	mov	r4, r3
 8009a98:	f04f 0500 	mov.w	r5, #0
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	462b      	mov	r3, r5
 8009aa0:	1891      	adds	r1, r2, r2
 8009aa2:	6139      	str	r1, [r7, #16]
 8009aa4:	415b      	adcs	r3, r3
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009aac:	1912      	adds	r2, r2, r4
 8009aae:	eb45 0303 	adc.w	r3, r5, r3
 8009ab2:	f04f 0000 	mov.w	r0, #0
 8009ab6:	f04f 0100 	mov.w	r1, #0
 8009aba:	00d9      	lsls	r1, r3, #3
 8009abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ac0:	00d0      	lsls	r0, r2, #3
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	eb12 0804 	adds.w	r8, r2, r4
 8009aca:	eb43 0905 	adc.w	r9, r3, r5
 8009ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f04f 0100 	mov.w	r1, #0
 8009ad8:	f04f 0200 	mov.w	r2, #0
 8009adc:	f04f 0300 	mov.w	r3, #0
 8009ae0:	008b      	lsls	r3, r1, #2
 8009ae2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ae6:	0082      	lsls	r2, r0, #2
 8009ae8:	4640      	mov	r0, r8
 8009aea:	4649      	mov	r1, r9
 8009aec:	f7f6 fbc8 	bl	8000280 <__aeabi_uldivmod>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4b49      	ldr	r3, [pc, #292]	; (8009c1c <UART_SetConfig+0x38c>)
 8009af6:	fba3 2302 	umull	r2, r3, r3, r2
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	011e      	lsls	r6, r3, #4
 8009afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b00:	4618      	mov	r0, r3
 8009b02:	f04f 0100 	mov.w	r1, #0
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	1894      	adds	r4, r2, r2
 8009b0c:	60bc      	str	r4, [r7, #8]
 8009b0e:	415b      	adcs	r3, r3
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b16:	1812      	adds	r2, r2, r0
 8009b18:	eb41 0303 	adc.w	r3, r1, r3
 8009b1c:	f04f 0400 	mov.w	r4, #0
 8009b20:	f04f 0500 	mov.w	r5, #0
 8009b24:	00dd      	lsls	r5, r3, #3
 8009b26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b2a:	00d4      	lsls	r4, r2, #3
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	462b      	mov	r3, r5
 8009b30:	1814      	adds	r4, r2, r0
 8009b32:	64bc      	str	r4, [r7, #72]	; 0x48
 8009b34:	414b      	adcs	r3, r1
 8009b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f04f 0100 	mov.w	r1, #0
 8009b42:	f04f 0200 	mov.w	r2, #0
 8009b46:	f04f 0300 	mov.w	r3, #0
 8009b4a:	008b      	lsls	r3, r1, #2
 8009b4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b50:	0082      	lsls	r2, r0, #2
 8009b52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009b56:	f7f6 fb93 	bl	8000280 <__aeabi_uldivmod>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4b2f      	ldr	r3, [pc, #188]	; (8009c1c <UART_SetConfig+0x38c>)
 8009b60:	fba3 1302 	umull	r1, r3, r3, r2
 8009b64:	095b      	lsrs	r3, r3, #5
 8009b66:	2164      	movs	r1, #100	; 0x64
 8009b68:	fb01 f303 	mul.w	r3, r1, r3
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	011b      	lsls	r3, r3, #4
 8009b70:	3332      	adds	r3, #50	; 0x32
 8009b72:	4a2a      	ldr	r2, [pc, #168]	; (8009c1c <UART_SetConfig+0x38c>)
 8009b74:	fba2 2303 	umull	r2, r3, r2, r3
 8009b78:	095b      	lsrs	r3, r3, #5
 8009b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b7e:	441e      	add	r6, r3
 8009b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b82:	4618      	mov	r0, r3
 8009b84:	f04f 0100 	mov.w	r1, #0
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	1894      	adds	r4, r2, r2
 8009b8e:	603c      	str	r4, [r7, #0]
 8009b90:	415b      	adcs	r3, r3
 8009b92:	607b      	str	r3, [r7, #4]
 8009b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b98:	1812      	adds	r2, r2, r0
 8009b9a:	eb41 0303 	adc.w	r3, r1, r3
 8009b9e:	f04f 0400 	mov.w	r4, #0
 8009ba2:	f04f 0500 	mov.w	r5, #0
 8009ba6:	00dd      	lsls	r5, r3, #3
 8009ba8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009bac:	00d4      	lsls	r4, r2, #3
 8009bae:	4622      	mov	r2, r4
 8009bb0:	462b      	mov	r3, r5
 8009bb2:	eb12 0a00 	adds.w	sl, r2, r0
 8009bb6:	eb43 0b01 	adc.w	fp, r3, r1
 8009bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f04f 0100 	mov.w	r1, #0
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	008b      	lsls	r3, r1, #2
 8009bce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009bd2:	0082      	lsls	r2, r0, #2
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	4659      	mov	r1, fp
 8009bd8:	f7f6 fb52 	bl	8000280 <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4b0e      	ldr	r3, [pc, #56]	; (8009c1c <UART_SetConfig+0x38c>)
 8009be2:	fba3 1302 	umull	r1, r3, r3, r2
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	2164      	movs	r1, #100	; 0x64
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	3332      	adds	r3, #50	; 0x32
 8009bf4:	4a09      	ldr	r2, [pc, #36]	; (8009c1c <UART_SetConfig+0x38c>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4432      	add	r2, r6
 8009c06:	609a      	str	r2, [r3, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	377c      	adds	r7, #124	; 0x7c
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c12:	bf00      	nop
 8009c14:	40011000 	.word	0x40011000
 8009c18:	40011400 	.word	0x40011400
 8009c1c:	51eb851f 	.word	0x51eb851f

08009c20 <__errno>:
 8009c20:	4b01      	ldr	r3, [pc, #4]	; (8009c28 <__errno+0x8>)
 8009c22:	6818      	ldr	r0, [r3, #0]
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	200000e0 	.word	0x200000e0

08009c2c <__libc_init_array>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	4d0d      	ldr	r5, [pc, #52]	; (8009c64 <__libc_init_array+0x38>)
 8009c30:	4c0d      	ldr	r4, [pc, #52]	; (8009c68 <__libc_init_array+0x3c>)
 8009c32:	1b64      	subs	r4, r4, r5
 8009c34:	10a4      	asrs	r4, r4, #2
 8009c36:	2600      	movs	r6, #0
 8009c38:	42a6      	cmp	r6, r4
 8009c3a:	d109      	bne.n	8009c50 <__libc_init_array+0x24>
 8009c3c:	4d0b      	ldr	r5, [pc, #44]	; (8009c6c <__libc_init_array+0x40>)
 8009c3e:	4c0c      	ldr	r4, [pc, #48]	; (8009c70 <__libc_init_array+0x44>)
 8009c40:	f000 fc4e 	bl	800a4e0 <_init>
 8009c44:	1b64      	subs	r4, r4, r5
 8009c46:	10a4      	asrs	r4, r4, #2
 8009c48:	2600      	movs	r6, #0
 8009c4a:	42a6      	cmp	r6, r4
 8009c4c:	d105      	bne.n	8009c5a <__libc_init_array+0x2e>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c54:	4798      	blx	r3
 8009c56:	3601      	adds	r6, #1
 8009c58:	e7ee      	b.n	8009c38 <__libc_init_array+0xc>
 8009c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5e:	4798      	blx	r3
 8009c60:	3601      	adds	r6, #1
 8009c62:	e7f2      	b.n	8009c4a <__libc_init_array+0x1e>
 8009c64:	0800a574 	.word	0x0800a574
 8009c68:	0800a574 	.word	0x0800a574
 8009c6c:	0800a574 	.word	0x0800a574
 8009c70:	0800a578 	.word	0x0800a578

08009c74 <memcpy>:
 8009c74:	440a      	add	r2, r1
 8009c76:	4291      	cmp	r1, r2
 8009c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c7c:	d100      	bne.n	8009c80 <memcpy+0xc>
 8009c7e:	4770      	bx	lr
 8009c80:	b510      	push	{r4, lr}
 8009c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c8a:	4291      	cmp	r1, r2
 8009c8c:	d1f9      	bne.n	8009c82 <memcpy+0xe>
 8009c8e:	bd10      	pop	{r4, pc}

08009c90 <memset>:
 8009c90:	4402      	add	r2, r0
 8009c92:	4603      	mov	r3, r0
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d100      	bne.n	8009c9a <memset+0xa>
 8009c98:	4770      	bx	lr
 8009c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c9e:	e7f9      	b.n	8009c94 <memset+0x4>

08009ca0 <siprintf>:
 8009ca0:	b40e      	push	{r1, r2, r3}
 8009ca2:	b500      	push	{lr}
 8009ca4:	b09c      	sub	sp, #112	; 0x70
 8009ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ca8:	9002      	str	r0, [sp, #8]
 8009caa:	9006      	str	r0, [sp, #24]
 8009cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cb0:	4809      	ldr	r0, [pc, #36]	; (8009cd8 <siprintf+0x38>)
 8009cb2:	9107      	str	r1, [sp, #28]
 8009cb4:	9104      	str	r1, [sp, #16]
 8009cb6:	4909      	ldr	r1, [pc, #36]	; (8009cdc <siprintf+0x3c>)
 8009cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cbc:	9105      	str	r1, [sp, #20]
 8009cbe:	6800      	ldr	r0, [r0, #0]
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	a902      	add	r1, sp, #8
 8009cc4:	f000 f868 	bl	8009d98 <_svfiprintf_r>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	701a      	strb	r2, [r3, #0]
 8009cce:	b01c      	add	sp, #112	; 0x70
 8009cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cd4:	b003      	add	sp, #12
 8009cd6:	4770      	bx	lr
 8009cd8:	200000e0 	.word	0x200000e0
 8009cdc:	ffff0208 	.word	0xffff0208

08009ce0 <__ssputs_r>:
 8009ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce4:	688e      	ldr	r6, [r1, #8]
 8009ce6:	429e      	cmp	r6, r3
 8009ce8:	4682      	mov	sl, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	4690      	mov	r8, r2
 8009cee:	461f      	mov	r7, r3
 8009cf0:	d838      	bhi.n	8009d64 <__ssputs_r+0x84>
 8009cf2:	898a      	ldrh	r2, [r1, #12]
 8009cf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cf8:	d032      	beq.n	8009d60 <__ssputs_r+0x80>
 8009cfa:	6825      	ldr	r5, [r4, #0]
 8009cfc:	6909      	ldr	r1, [r1, #16]
 8009cfe:	eba5 0901 	sub.w	r9, r5, r1
 8009d02:	6965      	ldr	r5, [r4, #20]
 8009d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	444b      	add	r3, r9
 8009d10:	106d      	asrs	r5, r5, #1
 8009d12:	429d      	cmp	r5, r3
 8009d14:	bf38      	it	cc
 8009d16:	461d      	movcc	r5, r3
 8009d18:	0553      	lsls	r3, r2, #21
 8009d1a:	d531      	bpl.n	8009d80 <__ssputs_r+0xa0>
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f000 fb39 	bl	800a394 <_malloc_r>
 8009d22:	4606      	mov	r6, r0
 8009d24:	b950      	cbnz	r0, 8009d3c <__ssputs_r+0x5c>
 8009d26:	230c      	movs	r3, #12
 8009d28:	f8ca 3000 	str.w	r3, [sl]
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	f04f 30ff 	mov.w	r0, #4294967295
 8009d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3c:	6921      	ldr	r1, [r4, #16]
 8009d3e:	464a      	mov	r2, r9
 8009d40:	f7ff ff98 	bl	8009c74 <memcpy>
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4e:	81a3      	strh	r3, [r4, #12]
 8009d50:	6126      	str	r6, [r4, #16]
 8009d52:	6165      	str	r5, [r4, #20]
 8009d54:	444e      	add	r6, r9
 8009d56:	eba5 0509 	sub.w	r5, r5, r9
 8009d5a:	6026      	str	r6, [r4, #0]
 8009d5c:	60a5      	str	r5, [r4, #8]
 8009d5e:	463e      	mov	r6, r7
 8009d60:	42be      	cmp	r6, r7
 8009d62:	d900      	bls.n	8009d66 <__ssputs_r+0x86>
 8009d64:	463e      	mov	r6, r7
 8009d66:	4632      	mov	r2, r6
 8009d68:	6820      	ldr	r0, [r4, #0]
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	f000 faa8 	bl	800a2c0 <memmove>
 8009d70:	68a3      	ldr	r3, [r4, #8]
 8009d72:	6822      	ldr	r2, [r4, #0]
 8009d74:	1b9b      	subs	r3, r3, r6
 8009d76:	4432      	add	r2, r6
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	6022      	str	r2, [r4, #0]
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e7db      	b.n	8009d38 <__ssputs_r+0x58>
 8009d80:	462a      	mov	r2, r5
 8009d82:	f000 fb61 	bl	800a448 <_realloc_r>
 8009d86:	4606      	mov	r6, r0
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1e1      	bne.n	8009d50 <__ssputs_r+0x70>
 8009d8c:	6921      	ldr	r1, [r4, #16]
 8009d8e:	4650      	mov	r0, sl
 8009d90:	f000 fab0 	bl	800a2f4 <_free_r>
 8009d94:	e7c7      	b.n	8009d26 <__ssputs_r+0x46>
	...

08009d98 <_svfiprintf_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	4698      	mov	r8, r3
 8009d9e:	898b      	ldrh	r3, [r1, #12]
 8009da0:	061b      	lsls	r3, r3, #24
 8009da2:	b09d      	sub	sp, #116	; 0x74
 8009da4:	4607      	mov	r7, r0
 8009da6:	460d      	mov	r5, r1
 8009da8:	4614      	mov	r4, r2
 8009daa:	d50e      	bpl.n	8009dca <_svfiprintf_r+0x32>
 8009dac:	690b      	ldr	r3, [r1, #16]
 8009dae:	b963      	cbnz	r3, 8009dca <_svfiprintf_r+0x32>
 8009db0:	2140      	movs	r1, #64	; 0x40
 8009db2:	f000 faef 	bl	800a394 <_malloc_r>
 8009db6:	6028      	str	r0, [r5, #0]
 8009db8:	6128      	str	r0, [r5, #16]
 8009dba:	b920      	cbnz	r0, 8009dc6 <_svfiprintf_r+0x2e>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	e0d1      	b.n	8009f6a <_svfiprintf_r+0x1d2>
 8009dc6:	2340      	movs	r3, #64	; 0x40
 8009dc8:	616b      	str	r3, [r5, #20]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dce:	2320      	movs	r3, #32
 8009dd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dd8:	2330      	movs	r3, #48	; 0x30
 8009dda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f84 <_svfiprintf_r+0x1ec>
 8009dde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009de2:	f04f 0901 	mov.w	r9, #1
 8009de6:	4623      	mov	r3, r4
 8009de8:	469a      	mov	sl, r3
 8009dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dee:	b10a      	cbz	r2, 8009df4 <_svfiprintf_r+0x5c>
 8009df0:	2a25      	cmp	r2, #37	; 0x25
 8009df2:	d1f9      	bne.n	8009de8 <_svfiprintf_r+0x50>
 8009df4:	ebba 0b04 	subs.w	fp, sl, r4
 8009df8:	d00b      	beq.n	8009e12 <_svfiprintf_r+0x7a>
 8009dfa:	465b      	mov	r3, fp
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff ff6d 	bl	8009ce0 <__ssputs_r>
 8009e06:	3001      	adds	r0, #1
 8009e08:	f000 80aa 	beq.w	8009f60 <_svfiprintf_r+0x1c8>
 8009e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e0e:	445a      	add	r2, fp
 8009e10:	9209      	str	r2, [sp, #36]	; 0x24
 8009e12:	f89a 3000 	ldrb.w	r3, [sl]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 80a2 	beq.w	8009f60 <_svfiprintf_r+0x1c8>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e26:	f10a 0a01 	add.w	sl, sl, #1
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	9307      	str	r3, [sp, #28]
 8009e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e32:	931a      	str	r3, [sp, #104]	; 0x68
 8009e34:	4654      	mov	r4, sl
 8009e36:	2205      	movs	r2, #5
 8009e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3c:	4851      	ldr	r0, [pc, #324]	; (8009f84 <_svfiprintf_r+0x1ec>)
 8009e3e:	f7f6 f9cf 	bl	80001e0 <memchr>
 8009e42:	9a04      	ldr	r2, [sp, #16]
 8009e44:	b9d8      	cbnz	r0, 8009e7e <_svfiprintf_r+0xe6>
 8009e46:	06d0      	lsls	r0, r2, #27
 8009e48:	bf44      	itt	mi
 8009e4a:	2320      	movmi	r3, #32
 8009e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e50:	0711      	lsls	r1, r2, #28
 8009e52:	bf44      	itt	mi
 8009e54:	232b      	movmi	r3, #43	; 0x2b
 8009e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e60:	d015      	beq.n	8009e8e <_svfiprintf_r+0xf6>
 8009e62:	9a07      	ldr	r2, [sp, #28]
 8009e64:	4654      	mov	r4, sl
 8009e66:	2000      	movs	r0, #0
 8009e68:	f04f 0c0a 	mov.w	ip, #10
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e72:	3b30      	subs	r3, #48	; 0x30
 8009e74:	2b09      	cmp	r3, #9
 8009e76:	d94e      	bls.n	8009f16 <_svfiprintf_r+0x17e>
 8009e78:	b1b0      	cbz	r0, 8009ea8 <_svfiprintf_r+0x110>
 8009e7a:	9207      	str	r2, [sp, #28]
 8009e7c:	e014      	b.n	8009ea8 <_svfiprintf_r+0x110>
 8009e7e:	eba0 0308 	sub.w	r3, r0, r8
 8009e82:	fa09 f303 	lsl.w	r3, r9, r3
 8009e86:	4313      	orrs	r3, r2
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	46a2      	mov	sl, r4
 8009e8c:	e7d2      	b.n	8009e34 <_svfiprintf_r+0x9c>
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	1d19      	adds	r1, r3, #4
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	9103      	str	r1, [sp, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	bfbb      	ittet	lt
 8009e9a:	425b      	neglt	r3, r3
 8009e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea0:	9307      	strge	r3, [sp, #28]
 8009ea2:	9307      	strlt	r3, [sp, #28]
 8009ea4:	bfb8      	it	lt
 8009ea6:	9204      	strlt	r2, [sp, #16]
 8009ea8:	7823      	ldrb	r3, [r4, #0]
 8009eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8009eac:	d10c      	bne.n	8009ec8 <_svfiprintf_r+0x130>
 8009eae:	7863      	ldrb	r3, [r4, #1]
 8009eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb2:	d135      	bne.n	8009f20 <_svfiprintf_r+0x188>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	1d1a      	adds	r2, r3, #4
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	9203      	str	r2, [sp, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bfb8      	it	lt
 8009ec0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ec4:	3402      	adds	r4, #2
 8009ec6:	9305      	str	r3, [sp, #20]
 8009ec8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f94 <_svfiprintf_r+0x1fc>
 8009ecc:	7821      	ldrb	r1, [r4, #0]
 8009ece:	2203      	movs	r2, #3
 8009ed0:	4650      	mov	r0, sl
 8009ed2:	f7f6 f985 	bl	80001e0 <memchr>
 8009ed6:	b140      	cbz	r0, 8009eea <_svfiprintf_r+0x152>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	eba0 000a 	sub.w	r0, r0, sl
 8009ede:	fa03 f000 	lsl.w	r0, r3, r0
 8009ee2:	9b04      	ldr	r3, [sp, #16]
 8009ee4:	4303      	orrs	r3, r0
 8009ee6:	3401      	adds	r4, #1
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eee:	4826      	ldr	r0, [pc, #152]	; (8009f88 <_svfiprintf_r+0x1f0>)
 8009ef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ef4:	2206      	movs	r2, #6
 8009ef6:	f7f6 f973 	bl	80001e0 <memchr>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d038      	beq.n	8009f70 <_svfiprintf_r+0x1d8>
 8009efe:	4b23      	ldr	r3, [pc, #140]	; (8009f8c <_svfiprintf_r+0x1f4>)
 8009f00:	bb1b      	cbnz	r3, 8009f4a <_svfiprintf_r+0x1b2>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	3307      	adds	r3, #7
 8009f06:	f023 0307 	bic.w	r3, r3, #7
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	9303      	str	r3, [sp, #12]
 8009f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f10:	4433      	add	r3, r6
 8009f12:	9309      	str	r3, [sp, #36]	; 0x24
 8009f14:	e767      	b.n	8009de6 <_svfiprintf_r+0x4e>
 8009f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	e7a5      	b.n	8009e6c <_svfiprintf_r+0xd4>
 8009f20:	2300      	movs	r3, #0
 8009f22:	3401      	adds	r4, #1
 8009f24:	9305      	str	r3, [sp, #20]
 8009f26:	4619      	mov	r1, r3
 8009f28:	f04f 0c0a 	mov.w	ip, #10
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f32:	3a30      	subs	r2, #48	; 0x30
 8009f34:	2a09      	cmp	r2, #9
 8009f36:	d903      	bls.n	8009f40 <_svfiprintf_r+0x1a8>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0c5      	beq.n	8009ec8 <_svfiprintf_r+0x130>
 8009f3c:	9105      	str	r1, [sp, #20]
 8009f3e:	e7c3      	b.n	8009ec8 <_svfiprintf_r+0x130>
 8009f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f44:	4604      	mov	r4, r0
 8009f46:	2301      	movs	r3, #1
 8009f48:	e7f0      	b.n	8009f2c <_svfiprintf_r+0x194>
 8009f4a:	ab03      	add	r3, sp, #12
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <_svfiprintf_r+0x1f8>)
 8009f52:	a904      	add	r1, sp, #16
 8009f54:	4638      	mov	r0, r7
 8009f56:	f3af 8000 	nop.w
 8009f5a:	1c42      	adds	r2, r0, #1
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	d1d6      	bne.n	8009f0e <_svfiprintf_r+0x176>
 8009f60:	89ab      	ldrh	r3, [r5, #12]
 8009f62:	065b      	lsls	r3, r3, #25
 8009f64:	f53f af2c 	bmi.w	8009dc0 <_svfiprintf_r+0x28>
 8009f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f6a:	b01d      	add	sp, #116	; 0x74
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f70:	ab03      	add	r3, sp, #12
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	462a      	mov	r2, r5
 8009f76:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <_svfiprintf_r+0x1f8>)
 8009f78:	a904      	add	r1, sp, #16
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f000 f87a 	bl	800a074 <_printf_i>
 8009f80:	e7eb      	b.n	8009f5a <_svfiprintf_r+0x1c2>
 8009f82:	bf00      	nop
 8009f84:	0800a538 	.word	0x0800a538
 8009f88:	0800a542 	.word	0x0800a542
 8009f8c:	00000000 	.word	0x00000000
 8009f90:	08009ce1 	.word	0x08009ce1
 8009f94:	0800a53e 	.word	0x0800a53e

08009f98 <_printf_common>:
 8009f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9c:	4616      	mov	r6, r2
 8009f9e:	4699      	mov	r9, r3
 8009fa0:	688a      	ldr	r2, [r1, #8]
 8009fa2:	690b      	ldr	r3, [r1, #16]
 8009fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	bfb8      	it	lt
 8009fac:	4613      	movlt	r3, r2
 8009fae:	6033      	str	r3, [r6, #0]
 8009fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	b10a      	cbz	r2, 8009fbe <_printf_common+0x26>
 8009fba:	3301      	adds	r3, #1
 8009fbc:	6033      	str	r3, [r6, #0]
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	0699      	lsls	r1, r3, #26
 8009fc2:	bf42      	ittt	mi
 8009fc4:	6833      	ldrmi	r3, [r6, #0]
 8009fc6:	3302      	addmi	r3, #2
 8009fc8:	6033      	strmi	r3, [r6, #0]
 8009fca:	6825      	ldr	r5, [r4, #0]
 8009fcc:	f015 0506 	ands.w	r5, r5, #6
 8009fd0:	d106      	bne.n	8009fe0 <_printf_common+0x48>
 8009fd2:	f104 0a19 	add.w	sl, r4, #25
 8009fd6:	68e3      	ldr	r3, [r4, #12]
 8009fd8:	6832      	ldr	r2, [r6, #0]
 8009fda:	1a9b      	subs	r3, r3, r2
 8009fdc:	42ab      	cmp	r3, r5
 8009fde:	dc26      	bgt.n	800a02e <_printf_common+0x96>
 8009fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fe4:	1e13      	subs	r3, r2, #0
 8009fe6:	6822      	ldr	r2, [r4, #0]
 8009fe8:	bf18      	it	ne
 8009fea:	2301      	movne	r3, #1
 8009fec:	0692      	lsls	r2, r2, #26
 8009fee:	d42b      	bmi.n	800a048 <_printf_common+0xb0>
 8009ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	47c0      	blx	r8
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d01e      	beq.n	800a03c <_printf_common+0xa4>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	68e5      	ldr	r5, [r4, #12]
 800a002:	6832      	ldr	r2, [r6, #0]
 800a004:	f003 0306 	and.w	r3, r3, #6
 800a008:	2b04      	cmp	r3, #4
 800a00a:	bf08      	it	eq
 800a00c:	1aad      	subeq	r5, r5, r2
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	6922      	ldr	r2, [r4, #16]
 800a012:	bf0c      	ite	eq
 800a014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a018:	2500      	movne	r5, #0
 800a01a:	4293      	cmp	r3, r2
 800a01c:	bfc4      	itt	gt
 800a01e:	1a9b      	subgt	r3, r3, r2
 800a020:	18ed      	addgt	r5, r5, r3
 800a022:	2600      	movs	r6, #0
 800a024:	341a      	adds	r4, #26
 800a026:	42b5      	cmp	r5, r6
 800a028:	d11a      	bne.n	800a060 <_printf_common+0xc8>
 800a02a:	2000      	movs	r0, #0
 800a02c:	e008      	b.n	800a040 <_printf_common+0xa8>
 800a02e:	2301      	movs	r3, #1
 800a030:	4652      	mov	r2, sl
 800a032:	4649      	mov	r1, r9
 800a034:	4638      	mov	r0, r7
 800a036:	47c0      	blx	r8
 800a038:	3001      	adds	r0, #1
 800a03a:	d103      	bne.n	800a044 <_printf_common+0xac>
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a044:	3501      	adds	r5, #1
 800a046:	e7c6      	b.n	8009fd6 <_printf_common+0x3e>
 800a048:	18e1      	adds	r1, r4, r3
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	2030      	movs	r0, #48	; 0x30
 800a04e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a052:	4422      	add	r2, r4
 800a054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a05c:	3302      	adds	r3, #2
 800a05e:	e7c7      	b.n	8009ff0 <_printf_common+0x58>
 800a060:	2301      	movs	r3, #1
 800a062:	4622      	mov	r2, r4
 800a064:	4649      	mov	r1, r9
 800a066:	4638      	mov	r0, r7
 800a068:	47c0      	blx	r8
 800a06a:	3001      	adds	r0, #1
 800a06c:	d0e6      	beq.n	800a03c <_printf_common+0xa4>
 800a06e:	3601      	adds	r6, #1
 800a070:	e7d9      	b.n	800a026 <_printf_common+0x8e>
	...

0800a074 <_printf_i>:
 800a074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	460c      	mov	r4, r1
 800a07a:	4691      	mov	r9, r2
 800a07c:	7e27      	ldrb	r7, [r4, #24]
 800a07e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a080:	2f78      	cmp	r7, #120	; 0x78
 800a082:	4680      	mov	r8, r0
 800a084:	469a      	mov	sl, r3
 800a086:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a08a:	d807      	bhi.n	800a09c <_printf_i+0x28>
 800a08c:	2f62      	cmp	r7, #98	; 0x62
 800a08e:	d80a      	bhi.n	800a0a6 <_printf_i+0x32>
 800a090:	2f00      	cmp	r7, #0
 800a092:	f000 80d8 	beq.w	800a246 <_printf_i+0x1d2>
 800a096:	2f58      	cmp	r7, #88	; 0x58
 800a098:	f000 80a3 	beq.w	800a1e2 <_printf_i+0x16e>
 800a09c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0a4:	e03a      	b.n	800a11c <_printf_i+0xa8>
 800a0a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0aa:	2b15      	cmp	r3, #21
 800a0ac:	d8f6      	bhi.n	800a09c <_printf_i+0x28>
 800a0ae:	a001      	add	r0, pc, #4	; (adr r0, 800a0b4 <_printf_i+0x40>)
 800a0b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a09d 	.word	0x0800a09d
 800a0c0:	0800a09d 	.word	0x0800a09d
 800a0c4:	0800a09d 	.word	0x0800a09d
 800a0c8:	0800a09d 	.word	0x0800a09d
 800a0cc:	0800a121 	.word	0x0800a121
 800a0d0:	0800a09d 	.word	0x0800a09d
 800a0d4:	0800a09d 	.word	0x0800a09d
 800a0d8:	0800a09d 	.word	0x0800a09d
 800a0dc:	0800a09d 	.word	0x0800a09d
 800a0e0:	0800a22d 	.word	0x0800a22d
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a20f 	.word	0x0800a20f
 800a0ec:	0800a09d 	.word	0x0800a09d
 800a0f0:	0800a09d 	.word	0x0800a09d
 800a0f4:	0800a24f 	.word	0x0800a24f
 800a0f8:	0800a09d 	.word	0x0800a09d
 800a0fc:	0800a151 	.word	0x0800a151
 800a100:	0800a09d 	.word	0x0800a09d
 800a104:	0800a09d 	.word	0x0800a09d
 800a108:	0800a217 	.word	0x0800a217
 800a10c:	680b      	ldr	r3, [r1, #0]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	600a      	str	r2, [r1, #0]
 800a114:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a11c:	2301      	movs	r3, #1
 800a11e:	e0a3      	b.n	800a268 <_printf_i+0x1f4>
 800a120:	6825      	ldr	r5, [r4, #0]
 800a122:	6808      	ldr	r0, [r1, #0]
 800a124:	062e      	lsls	r6, r5, #24
 800a126:	f100 0304 	add.w	r3, r0, #4
 800a12a:	d50a      	bpl.n	800a142 <_printf_i+0xce>
 800a12c:	6805      	ldr	r5, [r0, #0]
 800a12e:	600b      	str	r3, [r1, #0]
 800a130:	2d00      	cmp	r5, #0
 800a132:	da03      	bge.n	800a13c <_printf_i+0xc8>
 800a134:	232d      	movs	r3, #45	; 0x2d
 800a136:	426d      	negs	r5, r5
 800a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a13c:	485e      	ldr	r0, [pc, #376]	; (800a2b8 <_printf_i+0x244>)
 800a13e:	230a      	movs	r3, #10
 800a140:	e019      	b.n	800a176 <_printf_i+0x102>
 800a142:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a146:	6805      	ldr	r5, [r0, #0]
 800a148:	600b      	str	r3, [r1, #0]
 800a14a:	bf18      	it	ne
 800a14c:	b22d      	sxthne	r5, r5
 800a14e:	e7ef      	b.n	800a130 <_printf_i+0xbc>
 800a150:	680b      	ldr	r3, [r1, #0]
 800a152:	6825      	ldr	r5, [r4, #0]
 800a154:	1d18      	adds	r0, r3, #4
 800a156:	6008      	str	r0, [r1, #0]
 800a158:	0628      	lsls	r0, r5, #24
 800a15a:	d501      	bpl.n	800a160 <_printf_i+0xec>
 800a15c:	681d      	ldr	r5, [r3, #0]
 800a15e:	e002      	b.n	800a166 <_printf_i+0xf2>
 800a160:	0669      	lsls	r1, r5, #25
 800a162:	d5fb      	bpl.n	800a15c <_printf_i+0xe8>
 800a164:	881d      	ldrh	r5, [r3, #0]
 800a166:	4854      	ldr	r0, [pc, #336]	; (800a2b8 <_printf_i+0x244>)
 800a168:	2f6f      	cmp	r7, #111	; 0x6f
 800a16a:	bf0c      	ite	eq
 800a16c:	2308      	moveq	r3, #8
 800a16e:	230a      	movne	r3, #10
 800a170:	2100      	movs	r1, #0
 800a172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a176:	6866      	ldr	r6, [r4, #4]
 800a178:	60a6      	str	r6, [r4, #8]
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	bfa2      	ittt	ge
 800a17e:	6821      	ldrge	r1, [r4, #0]
 800a180:	f021 0104 	bicge.w	r1, r1, #4
 800a184:	6021      	strge	r1, [r4, #0]
 800a186:	b90d      	cbnz	r5, 800a18c <_printf_i+0x118>
 800a188:	2e00      	cmp	r6, #0
 800a18a:	d04d      	beq.n	800a228 <_printf_i+0x1b4>
 800a18c:	4616      	mov	r6, r2
 800a18e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a192:	fb03 5711 	mls	r7, r3, r1, r5
 800a196:	5dc7      	ldrb	r7, [r0, r7]
 800a198:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a19c:	462f      	mov	r7, r5
 800a19e:	42bb      	cmp	r3, r7
 800a1a0:	460d      	mov	r5, r1
 800a1a2:	d9f4      	bls.n	800a18e <_printf_i+0x11a>
 800a1a4:	2b08      	cmp	r3, #8
 800a1a6:	d10b      	bne.n	800a1c0 <_printf_i+0x14c>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	07df      	lsls	r7, r3, #31
 800a1ac:	d508      	bpl.n	800a1c0 <_printf_i+0x14c>
 800a1ae:	6923      	ldr	r3, [r4, #16]
 800a1b0:	6861      	ldr	r1, [r4, #4]
 800a1b2:	4299      	cmp	r1, r3
 800a1b4:	bfde      	ittt	le
 800a1b6:	2330      	movle	r3, #48	; 0x30
 800a1b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1c0:	1b92      	subs	r2, r2, r6
 800a1c2:	6122      	str	r2, [r4, #16]
 800a1c4:	f8cd a000 	str.w	sl, [sp]
 800a1c8:	464b      	mov	r3, r9
 800a1ca:	aa03      	add	r2, sp, #12
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	f7ff fee2 	bl	8009f98 <_printf_common>
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d14c      	bne.n	800a272 <_printf_i+0x1fe>
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	b004      	add	sp, #16
 800a1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e2:	4835      	ldr	r0, [pc, #212]	; (800a2b8 <_printf_i+0x244>)
 800a1e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	680e      	ldr	r6, [r1, #0]
 800a1ec:	061f      	lsls	r7, r3, #24
 800a1ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1f2:	600e      	str	r6, [r1, #0]
 800a1f4:	d514      	bpl.n	800a220 <_printf_i+0x1ac>
 800a1f6:	07d9      	lsls	r1, r3, #31
 800a1f8:	bf44      	itt	mi
 800a1fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a1fe:	6023      	strmi	r3, [r4, #0]
 800a200:	b91d      	cbnz	r5, 800a20a <_printf_i+0x196>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	f023 0320 	bic.w	r3, r3, #32
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	2310      	movs	r3, #16
 800a20c:	e7b0      	b.n	800a170 <_printf_i+0xfc>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	f043 0320 	orr.w	r3, r3, #32
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	2378      	movs	r3, #120	; 0x78
 800a218:	4828      	ldr	r0, [pc, #160]	; (800a2bc <_printf_i+0x248>)
 800a21a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a21e:	e7e3      	b.n	800a1e8 <_printf_i+0x174>
 800a220:	065e      	lsls	r6, r3, #25
 800a222:	bf48      	it	mi
 800a224:	b2ad      	uxthmi	r5, r5
 800a226:	e7e6      	b.n	800a1f6 <_printf_i+0x182>
 800a228:	4616      	mov	r6, r2
 800a22a:	e7bb      	b.n	800a1a4 <_printf_i+0x130>
 800a22c:	680b      	ldr	r3, [r1, #0]
 800a22e:	6826      	ldr	r6, [r4, #0]
 800a230:	6960      	ldr	r0, [r4, #20]
 800a232:	1d1d      	adds	r5, r3, #4
 800a234:	600d      	str	r5, [r1, #0]
 800a236:	0635      	lsls	r5, r6, #24
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	d501      	bpl.n	800a240 <_printf_i+0x1cc>
 800a23c:	6018      	str	r0, [r3, #0]
 800a23e:	e002      	b.n	800a246 <_printf_i+0x1d2>
 800a240:	0671      	lsls	r1, r6, #25
 800a242:	d5fb      	bpl.n	800a23c <_printf_i+0x1c8>
 800a244:	8018      	strh	r0, [r3, #0]
 800a246:	2300      	movs	r3, #0
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	4616      	mov	r6, r2
 800a24c:	e7ba      	b.n	800a1c4 <_printf_i+0x150>
 800a24e:	680b      	ldr	r3, [r1, #0]
 800a250:	1d1a      	adds	r2, r3, #4
 800a252:	600a      	str	r2, [r1, #0]
 800a254:	681e      	ldr	r6, [r3, #0]
 800a256:	6862      	ldr	r2, [r4, #4]
 800a258:	2100      	movs	r1, #0
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7f5 ffc0 	bl	80001e0 <memchr>
 800a260:	b108      	cbz	r0, 800a266 <_printf_i+0x1f2>
 800a262:	1b80      	subs	r0, r0, r6
 800a264:	6060      	str	r0, [r4, #4]
 800a266:	6863      	ldr	r3, [r4, #4]
 800a268:	6123      	str	r3, [r4, #16]
 800a26a:	2300      	movs	r3, #0
 800a26c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a270:	e7a8      	b.n	800a1c4 <_printf_i+0x150>
 800a272:	6923      	ldr	r3, [r4, #16]
 800a274:	4632      	mov	r2, r6
 800a276:	4649      	mov	r1, r9
 800a278:	4640      	mov	r0, r8
 800a27a:	47d0      	blx	sl
 800a27c:	3001      	adds	r0, #1
 800a27e:	d0ab      	beq.n	800a1d8 <_printf_i+0x164>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	079b      	lsls	r3, r3, #30
 800a284:	d413      	bmi.n	800a2ae <_printf_i+0x23a>
 800a286:	68e0      	ldr	r0, [r4, #12]
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	4298      	cmp	r0, r3
 800a28c:	bfb8      	it	lt
 800a28e:	4618      	movlt	r0, r3
 800a290:	e7a4      	b.n	800a1dc <_printf_i+0x168>
 800a292:	2301      	movs	r3, #1
 800a294:	4632      	mov	r2, r6
 800a296:	4649      	mov	r1, r9
 800a298:	4640      	mov	r0, r8
 800a29a:	47d0      	blx	sl
 800a29c:	3001      	adds	r0, #1
 800a29e:	d09b      	beq.n	800a1d8 <_printf_i+0x164>
 800a2a0:	3501      	adds	r5, #1
 800a2a2:	68e3      	ldr	r3, [r4, #12]
 800a2a4:	9903      	ldr	r1, [sp, #12]
 800a2a6:	1a5b      	subs	r3, r3, r1
 800a2a8:	42ab      	cmp	r3, r5
 800a2aa:	dcf2      	bgt.n	800a292 <_printf_i+0x21e>
 800a2ac:	e7eb      	b.n	800a286 <_printf_i+0x212>
 800a2ae:	2500      	movs	r5, #0
 800a2b0:	f104 0619 	add.w	r6, r4, #25
 800a2b4:	e7f5      	b.n	800a2a2 <_printf_i+0x22e>
 800a2b6:	bf00      	nop
 800a2b8:	0800a549 	.word	0x0800a549
 800a2bc:	0800a55a 	.word	0x0800a55a

0800a2c0 <memmove>:
 800a2c0:	4288      	cmp	r0, r1
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	eb01 0402 	add.w	r4, r1, r2
 800a2c8:	d902      	bls.n	800a2d0 <memmove+0x10>
 800a2ca:	4284      	cmp	r4, r0
 800a2cc:	4623      	mov	r3, r4
 800a2ce:	d807      	bhi.n	800a2e0 <memmove+0x20>
 800a2d0:	1e43      	subs	r3, r0, #1
 800a2d2:	42a1      	cmp	r1, r4
 800a2d4:	d008      	beq.n	800a2e8 <memmove+0x28>
 800a2d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2de:	e7f8      	b.n	800a2d2 <memmove+0x12>
 800a2e0:	4402      	add	r2, r0
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	428a      	cmp	r2, r1
 800a2e6:	d100      	bne.n	800a2ea <memmove+0x2a>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2f2:	e7f7      	b.n	800a2e4 <memmove+0x24>

0800a2f4 <_free_r>:
 800a2f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2f6:	2900      	cmp	r1, #0
 800a2f8:	d048      	beq.n	800a38c <_free_r+0x98>
 800a2fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2fe:	9001      	str	r0, [sp, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	f1a1 0404 	sub.w	r4, r1, #4
 800a306:	bfb8      	it	lt
 800a308:	18e4      	addlt	r4, r4, r3
 800a30a:	f000 f8d3 	bl	800a4b4 <__malloc_lock>
 800a30e:	4a20      	ldr	r2, [pc, #128]	; (800a390 <_free_r+0x9c>)
 800a310:	9801      	ldr	r0, [sp, #4]
 800a312:	6813      	ldr	r3, [r2, #0]
 800a314:	4615      	mov	r5, r2
 800a316:	b933      	cbnz	r3, 800a326 <_free_r+0x32>
 800a318:	6063      	str	r3, [r4, #4]
 800a31a:	6014      	str	r4, [r2, #0]
 800a31c:	b003      	add	sp, #12
 800a31e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a322:	f000 b8cd 	b.w	800a4c0 <__malloc_unlock>
 800a326:	42a3      	cmp	r3, r4
 800a328:	d90b      	bls.n	800a342 <_free_r+0x4e>
 800a32a:	6821      	ldr	r1, [r4, #0]
 800a32c:	1862      	adds	r2, r4, r1
 800a32e:	4293      	cmp	r3, r2
 800a330:	bf04      	itt	eq
 800a332:	681a      	ldreq	r2, [r3, #0]
 800a334:	685b      	ldreq	r3, [r3, #4]
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	bf04      	itt	eq
 800a33a:	1852      	addeq	r2, r2, r1
 800a33c:	6022      	streq	r2, [r4, #0]
 800a33e:	602c      	str	r4, [r5, #0]
 800a340:	e7ec      	b.n	800a31c <_free_r+0x28>
 800a342:	461a      	mov	r2, r3
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	b10b      	cbz	r3, 800a34c <_free_r+0x58>
 800a348:	42a3      	cmp	r3, r4
 800a34a:	d9fa      	bls.n	800a342 <_free_r+0x4e>
 800a34c:	6811      	ldr	r1, [r2, #0]
 800a34e:	1855      	adds	r5, r2, r1
 800a350:	42a5      	cmp	r5, r4
 800a352:	d10b      	bne.n	800a36c <_free_r+0x78>
 800a354:	6824      	ldr	r4, [r4, #0]
 800a356:	4421      	add	r1, r4
 800a358:	1854      	adds	r4, r2, r1
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	6011      	str	r1, [r2, #0]
 800a35e:	d1dd      	bne.n	800a31c <_free_r+0x28>
 800a360:	681c      	ldr	r4, [r3, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	6053      	str	r3, [r2, #4]
 800a366:	4421      	add	r1, r4
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	e7d7      	b.n	800a31c <_free_r+0x28>
 800a36c:	d902      	bls.n	800a374 <_free_r+0x80>
 800a36e:	230c      	movs	r3, #12
 800a370:	6003      	str	r3, [r0, #0]
 800a372:	e7d3      	b.n	800a31c <_free_r+0x28>
 800a374:	6825      	ldr	r5, [r4, #0]
 800a376:	1961      	adds	r1, r4, r5
 800a378:	428b      	cmp	r3, r1
 800a37a:	bf04      	itt	eq
 800a37c:	6819      	ldreq	r1, [r3, #0]
 800a37e:	685b      	ldreq	r3, [r3, #4]
 800a380:	6063      	str	r3, [r4, #4]
 800a382:	bf04      	itt	eq
 800a384:	1949      	addeq	r1, r1, r5
 800a386:	6021      	streq	r1, [r4, #0]
 800a388:	6054      	str	r4, [r2, #4]
 800a38a:	e7c7      	b.n	800a31c <_free_r+0x28>
 800a38c:	b003      	add	sp, #12
 800a38e:	bd30      	pop	{r4, r5, pc}
 800a390:	20000250 	.word	0x20000250

0800a394 <_malloc_r>:
 800a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a396:	1ccd      	adds	r5, r1, #3
 800a398:	f025 0503 	bic.w	r5, r5, #3
 800a39c:	3508      	adds	r5, #8
 800a39e:	2d0c      	cmp	r5, #12
 800a3a0:	bf38      	it	cc
 800a3a2:	250c      	movcc	r5, #12
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	db01      	blt.n	800a3ae <_malloc_r+0x1a>
 800a3aa:	42a9      	cmp	r1, r5
 800a3ac:	d903      	bls.n	800a3b6 <_malloc_r+0x22>
 800a3ae:	230c      	movs	r3, #12
 800a3b0:	6033      	str	r3, [r6, #0]
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b6:	f000 f87d 	bl	800a4b4 <__malloc_lock>
 800a3ba:	4921      	ldr	r1, [pc, #132]	; (800a440 <_malloc_r+0xac>)
 800a3bc:	680a      	ldr	r2, [r1, #0]
 800a3be:	4614      	mov	r4, r2
 800a3c0:	b99c      	cbnz	r4, 800a3ea <_malloc_r+0x56>
 800a3c2:	4f20      	ldr	r7, [pc, #128]	; (800a444 <_malloc_r+0xb0>)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	b923      	cbnz	r3, 800a3d2 <_malloc_r+0x3e>
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f000 f862 	bl	800a494 <_sbrk_r>
 800a3d0:	6038      	str	r0, [r7, #0]
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f000 f85d 	bl	800a494 <_sbrk_r>
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	d123      	bne.n	800a426 <_malloc_r+0x92>
 800a3de:	230c      	movs	r3, #12
 800a3e0:	6033      	str	r3, [r6, #0]
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f86c 	bl	800a4c0 <__malloc_unlock>
 800a3e8:	e7e3      	b.n	800a3b2 <_malloc_r+0x1e>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	1b5b      	subs	r3, r3, r5
 800a3ee:	d417      	bmi.n	800a420 <_malloc_r+0x8c>
 800a3f0:	2b0b      	cmp	r3, #11
 800a3f2:	d903      	bls.n	800a3fc <_malloc_r+0x68>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	441c      	add	r4, r3
 800a3f8:	6025      	str	r5, [r4, #0]
 800a3fa:	e004      	b.n	800a406 <_malloc_r+0x72>
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	42a2      	cmp	r2, r4
 800a400:	bf0c      	ite	eq
 800a402:	600b      	streq	r3, [r1, #0]
 800a404:	6053      	strne	r3, [r2, #4]
 800a406:	4630      	mov	r0, r6
 800a408:	f000 f85a 	bl	800a4c0 <__malloc_unlock>
 800a40c:	f104 000b 	add.w	r0, r4, #11
 800a410:	1d23      	adds	r3, r4, #4
 800a412:	f020 0007 	bic.w	r0, r0, #7
 800a416:	1ac2      	subs	r2, r0, r3
 800a418:	d0cc      	beq.n	800a3b4 <_malloc_r+0x20>
 800a41a:	1a1b      	subs	r3, r3, r0
 800a41c:	50a3      	str	r3, [r4, r2]
 800a41e:	e7c9      	b.n	800a3b4 <_malloc_r+0x20>
 800a420:	4622      	mov	r2, r4
 800a422:	6864      	ldr	r4, [r4, #4]
 800a424:	e7cc      	b.n	800a3c0 <_malloc_r+0x2c>
 800a426:	1cc4      	adds	r4, r0, #3
 800a428:	f024 0403 	bic.w	r4, r4, #3
 800a42c:	42a0      	cmp	r0, r4
 800a42e:	d0e3      	beq.n	800a3f8 <_malloc_r+0x64>
 800a430:	1a21      	subs	r1, r4, r0
 800a432:	4630      	mov	r0, r6
 800a434:	f000 f82e 	bl	800a494 <_sbrk_r>
 800a438:	3001      	adds	r0, #1
 800a43a:	d1dd      	bne.n	800a3f8 <_malloc_r+0x64>
 800a43c:	e7cf      	b.n	800a3de <_malloc_r+0x4a>
 800a43e:	bf00      	nop
 800a440:	20000250 	.word	0x20000250
 800a444:	20000254 	.word	0x20000254

0800a448 <_realloc_r>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	4607      	mov	r7, r0
 800a44c:	4614      	mov	r4, r2
 800a44e:	460e      	mov	r6, r1
 800a450:	b921      	cbnz	r1, 800a45c <_realloc_r+0x14>
 800a452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a456:	4611      	mov	r1, r2
 800a458:	f7ff bf9c 	b.w	800a394 <_malloc_r>
 800a45c:	b922      	cbnz	r2, 800a468 <_realloc_r+0x20>
 800a45e:	f7ff ff49 	bl	800a2f4 <_free_r>
 800a462:	4625      	mov	r5, r4
 800a464:	4628      	mov	r0, r5
 800a466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a468:	f000 f830 	bl	800a4cc <_malloc_usable_size_r>
 800a46c:	42a0      	cmp	r0, r4
 800a46e:	d20f      	bcs.n	800a490 <_realloc_r+0x48>
 800a470:	4621      	mov	r1, r4
 800a472:	4638      	mov	r0, r7
 800a474:	f7ff ff8e 	bl	800a394 <_malloc_r>
 800a478:	4605      	mov	r5, r0
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d0f2      	beq.n	800a464 <_realloc_r+0x1c>
 800a47e:	4631      	mov	r1, r6
 800a480:	4622      	mov	r2, r4
 800a482:	f7ff fbf7 	bl	8009c74 <memcpy>
 800a486:	4631      	mov	r1, r6
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff ff33 	bl	800a2f4 <_free_r>
 800a48e:	e7e9      	b.n	800a464 <_realloc_r+0x1c>
 800a490:	4635      	mov	r5, r6
 800a492:	e7e7      	b.n	800a464 <_realloc_r+0x1c>

0800a494 <_sbrk_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d06      	ldr	r5, [pc, #24]	; (800a4b0 <_sbrk_r+0x1c>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	f7f6 fd24 	bl	8000eec <_sbrk>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_sbrk_r+0x1a>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_sbrk_r+0x1a>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	200003f4 	.word	0x200003f4

0800a4b4 <__malloc_lock>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	; (800a4bc <__malloc_lock+0x8>)
 800a4b6:	f000 b811 	b.w	800a4dc <__retarget_lock_acquire_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	200003fc 	.word	0x200003fc

0800a4c0 <__malloc_unlock>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	; (800a4c8 <__malloc_unlock+0x8>)
 800a4c2:	f000 b80c 	b.w	800a4de <__retarget_lock_release_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	200003fc 	.word	0x200003fc

0800a4cc <_malloc_usable_size_r>:
 800a4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d0:	1f18      	subs	r0, r3, #4
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bfbc      	itt	lt
 800a4d6:	580b      	ldrlt	r3, [r1, r0]
 800a4d8:	18c0      	addlt	r0, r0, r3
 800a4da:	4770      	bx	lr

0800a4dc <__retarget_lock_acquire_recursive>:
 800a4dc:	4770      	bx	lr

0800a4de <__retarget_lock_release_recursive>:
 800a4de:	4770      	bx	lr

0800a4e0 <_init>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr

0800a4ec <_fini>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr

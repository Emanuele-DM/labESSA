
LAB05_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a32c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a540  0800a540  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a548  0800a548  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800a550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000144  0800a694  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800a694  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034d55  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038bc  00000000  00000000  00054ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002508  00000000  00000000  00058788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0005ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da9  00000000  00000000  0005d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6bf  00000000  00000000  00075e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec3b  00000000  00000000  00095508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a594  00000000  00000000  00134198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000144 	.word	0x20000144
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4b4 	.word	0x0800a4b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000148 	.word	0x20000148
 80001dc:	0800a4b4 	.word	0x0800a4b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fbdd 	bl	8005d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8a5 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9af 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f983 	bl	8000894 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800058e:	f000 f90b 	bl	80007a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4848      	ldr	r0, [pc, #288]	; (80006b8 <main+0x140>)
 8000596:	f007 fde1 	bl	800815c <HAL_TIM_OC_Start_IT>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800059a:	2102      	movs	r1, #2
 800059c:	2001      	movs	r0, #1
 800059e:	f005 f83b 	bl	8005618 <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 80005a2:	2102      	movs	r1, #2
 80005a4:	2001      	movs	r0, #1
 80005a6:	f005 f933 	bl	8005810 <IKS01A3_MOTION_SENSOR_Enable>
  filtered_accelero_axes.x = 0;
 80005aa:	4b44      	ldr	r3, [pc, #272]	; (80006bc <main+0x144>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  filtered_accelero_axes.y = 0;
 80005b0:	4b42      	ldr	r3, [pc, #264]	; (80006bc <main+0x144>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  filtered_accelero_axes.z = 0;
 80005b6:	4b41      	ldr	r3, [pc, #260]	; (80006bc <main+0x144>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time_to_read == 1){
 80005bc:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <main+0x148>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d1fb      	bne.n	80005bc <main+0x44>
		  time_to_read = 0;
 80005c4:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <main+0x148>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &circular_buffer[0]);
 80005ca:	4a3e      	ldr	r2, [pc, #248]	; (80006c4 <main+0x14c>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	2001      	movs	r0, #1
 80005d0:	f005 f960 	bl	8005894 <IKS01A3_MOTION_SENSOR_GetAxes>
		  for (int i = 0; i<5; ++i){
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	e02b      	b.n	8000632 <main+0xba>
			  filtered_accelero_axes.x += circular_buffer[i].x;
 80005da:	4b38      	ldr	r3, [pc, #224]	; (80006bc <main+0x144>)
 80005dc:	6819      	ldr	r1, [r3, #0]
 80005de:	4839      	ldr	r0, [pc, #228]	; (80006c4 <main+0x14c>)
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4613      	mov	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4403      	add	r3, r0
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	440b      	add	r3, r1
 80005f0:	4a32      	ldr	r2, [pc, #200]	; (80006bc <main+0x144>)
 80005f2:	6013      	str	r3, [r2, #0]
			  filtered_accelero_axes.y += circular_buffer[i].y;
 80005f4:	4b31      	ldr	r3, [pc, #196]	; (80006bc <main+0x144>)
 80005f6:	6859      	ldr	r1, [r3, #4]
 80005f8:	4832      	ldr	r0, [pc, #200]	; (80006c4 <main+0x14c>)
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4403      	add	r3, r0
 8000606:	3304      	adds	r3, #4
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	440b      	add	r3, r1
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <main+0x144>)
 800060e:	6053      	str	r3, [r2, #4]
			  filtered_accelero_axes.z += circular_buffer[i].z;
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <main+0x144>)
 8000612:	6899      	ldr	r1, [r3, #8]
 8000614:	482b      	ldr	r0, [pc, #172]	; (80006c4 <main+0x14c>)
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4403      	add	r3, r0
 8000622:	3308      	adds	r3, #8
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	440b      	add	r3, r1
 8000628:	4a24      	ldr	r2, [pc, #144]	; (80006bc <main+0x144>)
 800062a:	6093      	str	r3, [r2, #8]
		  for (int i = 0; i<5; ++i){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b04      	cmp	r3, #4
 8000636:	ddd0      	ble.n	80005da <main+0x62>
		  }
		  filtered_accelero_axes.x /= 5;
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <main+0x144>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <main+0x150>)
 800063e:	fb82 1203 	smull	r1, r2, r2, r3
 8000642:	1052      	asrs	r2, r2, #1
 8000644:	17db      	asrs	r3, r3, #31
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <main+0x144>)
 800064a:	6013      	str	r3, [r2, #0]
		  filtered_accelero_axes.y /= 5;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <main+0x144>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	4a1d      	ldr	r2, [pc, #116]	; (80006c8 <main+0x150>)
 8000652:	fb82 1203 	smull	r1, r2, r2, r3
 8000656:	1052      	asrs	r2, r2, #1
 8000658:	17db      	asrs	r3, r3, #31
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <main+0x144>)
 800065e:	6053      	str	r3, [r2, #4]
		  filtered_accelero_axes.z /= 5;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <main+0x144>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <main+0x150>)
 8000666:	fb82 1203 	smull	r1, r2, r2, r3
 800066a:	1052      	asrs	r2, r2, #1
 800066c:	17db      	asrs	r3, r3, #31
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <main+0x144>)
 8000672:	6093      	str	r3, [r2, #8]
		  for (int j = 4; j > 0; --j) {
 8000674:	2304      	movs	r3, #4
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e015      	b.n	80006a6 <main+0x12e>
			  memcpy(&circular_buffer[j-1], &circular_buffer[j], sizeof(circular_buffer[j]));
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <main+0x14c>)
 8000688:	1898      	adds	r0, r3, r2
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <main+0x14c>)
 8000696:	4413      	add	r3, r2
 8000698:	220c      	movs	r2, #12
 800069a:	4619      	mov	r1, r3
 800069c:	f009 fad4 	bl	8009c48 <memcpy>
		  for (int j = 4; j > 0; --j) {
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dce6      	bgt.n	800067a <main+0x102>
		  }
//		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, &magneto_axes);
//		  transmitSensorData(&gyro_axes, "Gyro");
		  transmitSensorData(filtered_accelero_axes, "Accelero");
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <main+0x144>)
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <main+0x154>)
 80006b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006b2:	f000 f99b 	bl	80009ec <transmitSensorData>
	  if (time_to_read == 1){
 80006b6:	e781      	b.n	80005bc <main+0x44>
 80006b8:	200002c8 	.word	0x200002c8
 80006bc:	20000258 	.word	0x20000258
 80006c0:	20000160 	.word	0x20000160
 80006c4:	20000310 	.word	0x20000310
 80006c8:	66666667 	.word	0x66666667
 80006cc:	0800a4cc 	.word	0x0800a4cc

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f009 fac0 	bl	8009c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd4>)
 800071e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000752:	2307      	movs	r3, #7
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f006 ffe2 	bl	8007724 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000766:	f000 f967 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f007 fa44 	bl	8007c14 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000792:	f000 f951 	bl	8000a38 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	; 0x38
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_TIM3_Init+0xe4>)
 80007da:	4a2d      	ldr	r2, [pc, #180]	; (8000890 <MX_TIM3_Init+0xe8>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4199;
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_TIM3_Init+0xe4>)
 80007e0:	f241 0267 	movw	r2, #4199	; 0x1067
 80007e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_TIM3_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_TIM3_Init+0xe4>)
 80007ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80007f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_TIM3_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_TIM3_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <MX_TIM3_Init+0xe4>)
 8000802:	f007 fc03 	bl	800800c <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800080c:	f000 f914 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081a:	4619      	mov	r1, r3
 800081c:	481b      	ldr	r0, [pc, #108]	; (800088c <MX_TIM3_Init+0xe4>)
 800081e:	f007 feff 	bl	8008620 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000828:	f000 f906 	bl	8000a38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800082c:	4817      	ldr	r0, [pc, #92]	; (800088c <MX_TIM3_Init+0xe4>)
 800082e:	f007 fc3c 	bl	80080aa <HAL_TIM_OC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000838:	f000 f8fe 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4619      	mov	r1, r3
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <MX_TIM3_Init+0xe4>)
 800084c:	f008 faa4 	bl	8008d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000856:	f000 f8ef 	bl	8000a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 800085e:	f241 3387 	movw	r3, #4999	; 0x1387
 8000862:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_TIM3_Init+0xe4>)
 8000874:	f007 fe78 	bl	8008568 <HAL_TIM_OC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800087e:	f000 f8db 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3738      	adds	r7, #56	; 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002c8 	.word	0x200002c8
 8000890:	40000400 	.word	0x40000400

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f008 fae6 	bl	8008e9c <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f8af 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000034c 	.word	0x2000034c
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000974:	f005 fe84 	bl	8006680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0xd8>)
 8000990:	f005 fc0e 	bl	80061b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000994:	2320      	movs	r3, #32
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0xd4>)
 80009ac:	f005 fc00 	bl	80061b0 <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020800 	.word	0x40020800

080009c4 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	time_to_read = 1;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009d2:	2120      	movs	r1, #32
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 80009d6:	f005 fe6c 	bl	80066b2 <HAL_GPIO_TogglePin>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000160 	.word	0x20000160
 80009e8:	40020000 	.word	0x40020000

080009ec <transmitSensorData>:

void transmitSensorData(IKS01A3_MOTION_SENSOR_Axes_t sensor_axes, const char *sensorName){
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	1d3c      	adds	r4, r7, #4
 80009f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009f8:	603b      	str	r3, [r7, #0]
	uint8_t length = sprintf(msg, "%s X:%ld, Y:%ld, Z:%ld\n\r",
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	460b      	mov	r3, r1
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	4908      	ldr	r1, [pc, #32]	; (8000a2c <transmitSensorData+0x40>)
 8000a0a:	4809      	ldr	r0, [pc, #36]	; (8000a30 <transmitSensorData+0x44>)
 8000a0c:	f009 f932 	bl	8009c74 <siprintf>
 8000a10:	4603      	mov	r3, r0
 8000a12:	75fb      	strb	r3, [r7, #23]
			sensorName, sensor_axes.x, sensor_axes.y, sensor_axes.z);
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4905      	ldr	r1, [pc, #20]	; (8000a30 <transmitSensorData+0x44>)
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <transmitSensorData+0x48>)
 8000a1e:	f008 fa8a 	bl	8008f36 <HAL_UART_Transmit_IT>
}
 8000a22:	bf00      	nop
 8000a24:	371c      	adds	r7, #28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	0800a4d8 	.word	0x0800a4d8
 8000a30:	20000264 	.word	0x20000264
 8000a34:	2000034c 	.word	0x2000034c

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a82:	2007      	movs	r0, #7
 8000a84:	f005 fac0 	bl	8006008 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_TIM_Base_MspInit+0x48>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d115      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_TIM_Base_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <HAL_TIM_Base_MspInit+0x4c>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_TIM_Base_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	201d      	movs	r0, #29
 8000ac8:	f005 faa9 	bl	800601e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000acc:	201d      	movs	r0, #29
 8000ace:	f005 fac2 	bl	8006056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40000400 	.word	0x40000400
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <HAL_UART_MspInit+0x94>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d133      	bne.n	8000b6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_UART_MspInit+0x98>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3e:	230c      	movs	r3, #12
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <HAL_UART_MspInit+0x9c>)
 8000b5a:	f005 fb29 	bl	80061b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2026      	movs	r0, #38	; 0x26
 8000b64:	f005 fa5b 	bl	800601e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b68:	2026      	movs	r0, #38	; 0x26
 8000b6a:	f005 fa74 	bl	8006056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f005 f906 	bl	8005de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM3_IRQHandler+0x10>)
 8000bde:	f007 fbbb 	bl	8008358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200002c8 	.word	0x200002c8

08000bec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <USART2_IRQHandler+0x10>)
 8000bf2:	f008 f9e5 	bl	8008fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000034c 	.word	0x2000034c

08000c00 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <BSP_I2C1_Init+0x58>)
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <BSP_I2C1_Init+0x5c>)
 8000c0e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <BSP_I2C1_Init+0x60>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	4912      	ldr	r1, [pc, #72]	; (8000c60 <BSP_I2C1_Init+0x60>)
 8000c18:	600a      	str	r2, [r1, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d117      	bne.n	8000c4e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <BSP_I2C1_Init+0x58>)
 8000c20:	f006 fa0a 	bl	8007038 <HAL_I2C_GetState>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d111      	bne.n	8000c4e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <BSP_I2C1_Init+0x58>)
 8000c2c:	f000 f8e2 	bl	8000df4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10b      	bne.n	8000c4e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <BSP_I2C1_Init+0x58>)
 8000c38:	f000 f8a8 	bl	8000d8c <MX_I2C1_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c42:	f06f 0307 	mvn.w	r3, #7
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	e001      	b.n	8000c4e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c4e:	687b      	ldr	r3, [r7, #4]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000390 	.word	0x20000390
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	20000164 	.word	0x20000164

08000c64 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <BSP_I2C1_DeInit+0x48>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d014      	beq.n	8000ca0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <BSP_I2C1_DeInit+0x48>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <BSP_I2C1_DeInit+0x48>)
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <BSP_I2C1_DeInit+0x48>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10b      	bne.n	8000ca0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <BSP_I2C1_DeInit+0x4c>)
 8000c8a:	f000 f8fd 	bl	8000e88 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <BSP_I2C1_DeInit+0x4c>)
 8000c90:	f005 fe6e 	bl	8006970 <HAL_I2C_DeInit>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000c9a:	f06f 0307 	mvn.w	r3, #7
 8000c9e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000164 	.word	0x20000164
 8000cb0:	20000390 	.word	0x20000390

08000cb4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af04      	add	r7, sp, #16
 8000cba:	60ba      	str	r2, [r7, #8]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	81fb      	strh	r3, [r7, #14]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	81bb      	strh	r3, [r7, #12]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000cce:	89ba      	ldrh	r2, [r7, #12]
 8000cd0:	89f9      	ldrh	r1, [r7, #14]
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <BSP_I2C1_WriteReg+0x60>)
 8000ce4:	f005 fe88 	bl	80069f8 <HAL_I2C_Mem_Write>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00c      	beq.n	8000d08 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000cee:	4809      	ldr	r0, [pc, #36]	; (8000d14 <BSP_I2C1_WriteReg+0x60>)
 8000cf0:	f006 f9b0 	bl	8007054 <HAL_I2C_GetError>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d103      	bne.n	8000d02 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000cfa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e002      	b.n	8000d08 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d02:	f06f 0303 	mvn.w	r3, #3
 8000d06:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d08:	697b      	ldr	r3, [r7, #20]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000390 	.word	0x20000390

08000d18 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	60ba      	str	r2, [r7, #8]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	81fb      	strh	r3, [r7, #14]
 8000d26:	460b      	mov	r3, r1
 8000d28:	81bb      	strh	r3, [r7, #12]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d32:	89ba      	ldrh	r2, [r7, #12]
 8000d34:	89f9      	ldrh	r1, [r7, #14]
 8000d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <BSP_I2C1_ReadReg+0x60>)
 8000d48:	f005 ff50 	bl	8006bec <HAL_I2C_Mem_Read>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00c      	beq.n	8000d6c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <BSP_I2C1_ReadReg+0x60>)
 8000d54:	f006 f97e 	bl	8007054 <HAL_I2C_GetError>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d103      	bne.n	8000d66 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d5e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e002      	b.n	8000d6c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d66:	f06f 0303 	mvn.w	r3, #3
 8000d6a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d6c:	697b      	ldr	r3, [r7, #20]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000390 	.word	0x20000390

08000d7c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d80:	f005 f842 	bl	8005e08 <HAL_GetTick>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <MX_I2C1_Init+0x60>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <MX_I2C1_Init+0x64>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f005 fc89 	bl	80066e8 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40005400 	.word	0x40005400
 8000df0:	00061a80 	.word	0x00061a80

08000df4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <I2C1_MspInit+0x8c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <I2C1_MspInit+0x8c>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <I2C1_MspInit+0x8c>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <I2C1_MspInit+0x90>)
 8000e36:	f005 f9bb 	bl	80061b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e40:	2312      	movs	r3, #18
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <I2C1_MspInit+0x90>)
 8000e58:	f005 f9aa 	bl	80061b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <I2C1_MspInit+0x8c>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <I2C1_MspInit+0x8c>)
 8000e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <I2C1_MspInit+0x8c>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400

08000e88 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <I2C1_MspDeInit+0x30>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <I2C1_MspDeInit+0x30>)
 8000e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <I2C1_MspDeInit+0x34>)
 8000ea2:	f005 fb09 	bl	80064b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eaa:	4804      	ldr	r0, [pc, #16]	; (8000ebc <I2C1_MspDeInit+0x34>)
 8000eac:	f005 fb04 	bl	80064b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f008 fe80 	bl	8009bf4 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20018000 	.word	0x20018000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000168 	.word	0x20000168
 8000f28:	20000408 	.word	0x20000408

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f008 fe3f 	bl	8009c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff faf9 	bl	8000578 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000f94:	0800a550 	.word	0x0800a550
  ldr r2, =_sbss
 8000f98:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000f9c:	20000404 	.word	0x20000404

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d103      	bne.n	8000fc0 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e051      	b.n	8001064 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	7b1a      	ldrb	r2, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <LIS2DW12_RegisterBusIO+0xcc>)
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <LIS2DW12_RegisterBusIO+0xd0>)
 8001002:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	69da      	ldr	r2, [r3, #28]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e020      	b.n	8001064 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4798      	blx	r3
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e016      	b.n	8001064 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d112      	bne.n	8001064 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10d      	bne.n	8001064 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001048:	2305      	movs	r3, #5
 800104a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 800104c:	7afb      	ldrb	r3, [r7, #11]
 800104e:	461a      	mov	r2, r3
 8001050:	2121      	movs	r1, #33	; 0x21
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fd87 	bl	8001b66 <LIS2DW12_Write_Reg>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001064:	68fb      	ldr	r3, [r7, #12]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08001ef9 	.word	0x08001ef9
 8001074:	08001f2f 	.word	0x08001f2f

08001078 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3320      	adds	r3, #32
 8001084:	2101      	movs	r1, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fa94 	bl	80025b4 <lis2dw12_auto_increment_set>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e04b      	b.n	8001130 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3320      	adds	r3, #32
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f9a8 	bl	80023f4 <lis2dw12_block_data_update_set>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e03f      	b.n	8001130 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3320      	adds	r3, #32
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 faa2 	bl	8002600 <lis2dw12_fifo_mode_set>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e033      	b.n	8001130 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3320      	adds	r3, #32
 80010cc:	2104      	movs	r1, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 ff78 	bl	8001fc4 <lis2dw12_power_mode_set>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e027      	b.n	8001130 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <LIS2DW12_Init+0xc0>)
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3320      	adds	r3, #32
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f869 	bl	80021d4 <lis2dw12_data_rate_set>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	e010      	b.n	8001130 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3320      	adds	r3, #32
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f001 f993 	bl	8002440 <lis2dw12_full_scale_set>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	e004      	b.n	8001130 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	42c80000 	.word	0x42c80000

0800113c <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f888 	bl	800125a <LIS2DW12_ACC_Disable>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	e010      	b.n	8001178 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3320      	adds	r3, #32
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f001 f9fe 	bl	8002592 <lis2dw12_device_id_get>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	e000      	b.n	80011a4 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2210      	movs	r2, #16
 80011d8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4a06      	ldr	r2, [pc, #24]	; (8001204 <LIS2DW12_GetCapabilities+0x58>)
 80011ec:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	44c80000 	.word	0x44c80000

08001208 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e019      	b.n	8001252 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001230:	461a      	mov	r2, r3
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fcb0 	bl	8001b9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e004      	b.n	8001252 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	e010      	b.n	8001292 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3320      	adds	r3, #32
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f000 ffac 	bl	80021d4 <lis2dw12_data_rate_set>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e004      	b.n	8001292 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3320      	adds	r3, #32
 80012ae:	f107 020b 	add.w	r2, r7, #11
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 f8e9 	bl	800248c <lis2dw12_full_scale_get>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	e0a0      	b.n	8001408 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3320      	adds	r3, #32
 80012ca:	f107 020a 	add.w	r2, r7, #10
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fec5 	bl	8002060 <lis2dw12_power_mode_get>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	e092      	b.n	8001408 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	2b1b      	cmp	r3, #27
 80012e6:	f200 8087 	bhi.w	80013f8 <LIS2DW12_ACC_GetSensitivity+0x15c>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <LIS2DW12_ACC_GetSensitivity+0x54>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	08001361 	.word	0x08001361
 80012f4:	080013ad 	.word	0x080013ad
 80012f8:	080013ad 	.word	0x080013ad
 80012fc:	080013ad 	.word	0x080013ad
 8001300:	080013ad 	.word	0x080013ad
 8001304:	080013f9 	.word	0x080013f9
 8001308:	080013f9 	.word	0x080013f9
 800130c:	080013f9 	.word	0x080013f9
 8001310:	08001361 	.word	0x08001361
 8001314:	080013ad 	.word	0x080013ad
 8001318:	080013ad 	.word	0x080013ad
 800131c:	080013ad 	.word	0x080013ad
 8001320:	080013f9 	.word	0x080013f9
 8001324:	080013f9 	.word	0x080013f9
 8001328:	080013f9 	.word	0x080013f9
 800132c:	080013f9 	.word	0x080013f9
 8001330:	08001361 	.word	0x08001361
 8001334:	080013ad 	.word	0x080013ad
 8001338:	080013ad 	.word	0x080013ad
 800133c:	080013ad 	.word	0x080013ad
 8001340:	080013ad 	.word	0x080013ad
 8001344:	080013f9 	.word	0x080013f9
 8001348:	080013f9 	.word	0x080013f9
 800134c:	080013f9 	.word	0x080013f9
 8001350:	08001361 	.word	0x08001361
 8001354:	080013ad 	.word	0x080013ad
 8001358:	080013ad 	.word	0x080013ad
 800135c:	080013ad 	.word	0x080013ad
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001360:	7afb      	ldrb	r3, [r7, #11]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d81a      	bhi.n	800139c <LIS2DW12_ACC_GetSensitivity+0x100>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	0800137d 	.word	0x0800137d
 8001370:	08001385 	.word	0x08001385
 8001374:	0800138d 	.word	0x0800138d
 8001378:	08001395 	.word	0x08001395
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4a24      	ldr	r2, [pc, #144]	; (8001410 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001380:	601a      	str	r2, [r3, #0]
          break;
 8001382:	e012      	b.n	80013aa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001388:	601a      	str	r2, [r3, #0]
          break;
 800138a:	e00e      	b.n	80013aa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4a22      	ldr	r2, [pc, #136]	; (8001418 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8001390:	601a      	str	r2, [r3, #0]
          break;
 8001392:	e00a      	b.n	80013aa <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4a21      	ldr	r2, [pc, #132]	; (800141c <LIS2DW12_ACC_GetSensitivity+0x180>)
 8001398:	601a      	str	r2, [r3, #0]
          break;
 800139a:	e006      	b.n	80013aa <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80013a0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	60fb      	str	r3, [r7, #12]
          break;
 80013a8:	bf00      	nop
      }
      break;
 80013aa:	e02c      	b.n	8001406 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d81a      	bhi.n	80013e8 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013d1 	.word	0x080013d1
 80013c0:	080013d9 	.word	0x080013d9
 80013c4:	080013e1 	.word	0x080013e1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <LIS2DW12_ACC_GetSensitivity+0x188>)
 80013cc:	601a      	str	r2, [r3, #0]
          break;
 80013ce:	e012      	b.n	80013f6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 80013d4:	601a      	str	r2, [r3, #0]
          break;
 80013d6:	e00e      	b.n	80013f6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80013dc:	601a      	str	r2, [r3, #0]
          break;
 80013de:	e00a      	b.n	80013f6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80013e4:	601a      	str	r2, [r3, #0]
          break;
 80013e6:	e006      	b.n	80013f6 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80013ec:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	60fb      	str	r3, [r7, #12]
          break;
 80013f4:	bf00      	nop
      }
      break;
 80013f6:	e006      	b.n	8001406 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80013fc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	60fb      	str	r3, [r7, #12]
      break;
 8001404:	bf00      	nop
  }

  return ret;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	3f79db23 	.word	0x3f79db23
 8001414:	3ff9db23 	.word	0x3ff9db23
 8001418:	4079db23 	.word	0x4079db23
 800141c:	40f9db23 	.word	0x40f9db23
 8001420:	bf800000 	.word	0xbf800000
 8001424:	3e79db23 	.word	0x3e79db23
 8001428:	3ef9db23 	.word	0x3ef9db23

0800142c <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3320      	adds	r3, #32
 800143e:	f107 020b 	add.w	r2, r7, #11
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f000 ff0b 	bl	8002260 <lis2dw12_data_rate_get>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	e1d4      	b.n	8001800 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3320      	adds	r3, #32
 800145a:	f107 020a 	add.w	r2, r7, #10
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fdfd 	bl	8002060 <lis2dw12_power_mode_get>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	e1c6      	b.n	8001800 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	2b32      	cmp	r3, #50	; 0x32
 8001476:	f200 81bb 	bhi.w	80017f0 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	0800154d 	.word	0x0800154d
 8001484:	08001557 	.word	0x08001557
 8001488:	080015f5 	.word	0x080015f5
 800148c:	080015fd 	.word	0x080015fd
 8001490:	08001605 	.word	0x08001605
 8001494:	0800160d 	.word	0x0800160d
 8001498:	08001615 	.word	0x08001615
 800149c:	0800161d 	.word	0x0800161d
 80014a0:	080016b9 	.word	0x080016b9
 80014a4:	08001755 	.word	0x08001755
 80014a8:	080017f1 	.word	0x080017f1
 80014ac:	080017f1 	.word	0x080017f1
 80014b0:	080017f1 	.word	0x080017f1
 80014b4:	080017f1 	.word	0x080017f1
 80014b8:	080017f1 	.word	0x080017f1
 80014bc:	080017f1 	.word	0x080017f1
 80014c0:	080017f1 	.word	0x080017f1
 80014c4:	080017f1 	.word	0x080017f1
 80014c8:	0800154d 	.word	0x0800154d
 80014cc:	080017f1 	.word	0x080017f1
 80014d0:	080017f1 	.word	0x080017f1
 80014d4:	080017f1 	.word	0x080017f1
 80014d8:	080017f1 	.word	0x080017f1
 80014dc:	080017f1 	.word	0x080017f1
 80014e0:	080017f1 	.word	0x080017f1
 80014e4:	080017f1 	.word	0x080017f1
 80014e8:	080017f1 	.word	0x080017f1
 80014ec:	080017f1 	.word	0x080017f1
 80014f0:	080017f1 	.word	0x080017f1
 80014f4:	080017f1 	.word	0x080017f1
 80014f8:	080017f1 	.word	0x080017f1
 80014fc:	080017f1 	.word	0x080017f1
 8001500:	080017f1 	.word	0x080017f1
 8001504:	080017f1 	.word	0x080017f1
 8001508:	080017f1 	.word	0x080017f1
 800150c:	080017f1 	.word	0x080017f1
 8001510:	080017f1 	.word	0x080017f1
 8001514:	080017f1 	.word	0x080017f1
 8001518:	080017f1 	.word	0x080017f1
 800151c:	080017f1 	.word	0x080017f1
 8001520:	080017f1 	.word	0x080017f1
 8001524:	080017f1 	.word	0x080017f1
 8001528:	080017f1 	.word	0x080017f1
 800152c:	080017f1 	.word	0x080017f1
 8001530:	080017f1 	.word	0x080017f1
 8001534:	080017f1 	.word	0x080017f1
 8001538:	080017f1 	.word	0x080017f1
 800153c:	080017f1 	.word	0x080017f1
 8001540:	080017f1 	.word	0x080017f1
 8001544:	080017f1 	.word	0x080017f1
 8001548:	0800154d 	.word	0x0800154d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
      break;
 8001554:	e153      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001556:	7abb      	ldrb	r3, [r7, #10]
 8001558:	2b1b      	cmp	r3, #27
 800155a:	d843      	bhi.n	80015e4 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	080015dd 	.word	0x080015dd
 8001568:	080015dd 	.word	0x080015dd
 800156c:	080015dd 	.word	0x080015dd
 8001570:	080015dd 	.word	0x080015dd
 8001574:	080015d5 	.word	0x080015d5
 8001578:	080015e5 	.word	0x080015e5
 800157c:	080015e5 	.word	0x080015e5
 8001580:	080015e5 	.word	0x080015e5
 8001584:	080015dd 	.word	0x080015dd
 8001588:	080015dd 	.word	0x080015dd
 800158c:	080015dd 	.word	0x080015dd
 8001590:	080015dd 	.word	0x080015dd
 8001594:	080015e5 	.word	0x080015e5
 8001598:	080015e5 	.word	0x080015e5
 800159c:	080015e5 	.word	0x080015e5
 80015a0:	080015e5 	.word	0x080015e5
 80015a4:	080015dd 	.word	0x080015dd
 80015a8:	080015dd 	.word	0x080015dd
 80015ac:	080015dd 	.word	0x080015dd
 80015b0:	080015dd 	.word	0x080015dd
 80015b4:	080015d5 	.word	0x080015d5
 80015b8:	080015e5 	.word	0x080015e5
 80015bc:	080015e5 	.word	0x080015e5
 80015c0:	080015e5 	.word	0x080015e5
 80015c4:	080015dd 	.word	0x080015dd
 80015c8:	080015dd 	.word	0x080015dd
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015dd 	.word	0x080015dd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4a8c      	ldr	r2, [pc, #560]	; (8001808 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80015d8:	601a      	str	r2, [r3, #0]
          break;
 80015da:	e00a      	b.n	80015f2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4a8b      	ldr	r2, [pc, #556]	; (800180c <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80015e0:	601a      	str	r2, [r3, #0]
          break;
 80015e2:	e006      	b.n	80015f2 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4a8a      	ldr	r2, [pc, #552]	; (8001810 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80015e8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	60fb      	str	r3, [r7, #12]
          break;
 80015f0:	bf00      	nop
      }
      break;
 80015f2:	e104      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	4a84      	ldr	r2, [pc, #528]	; (8001808 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80015f8:	601a      	str	r2, [r3, #0]
      break;
 80015fa:	e100      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4a85      	ldr	r2, [pc, #532]	; (8001814 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8001600:	601a      	str	r2, [r3, #0]
      break;
 8001602:	e0fc      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4a84      	ldr	r2, [pc, #528]	; (8001818 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8001608:	601a      	str	r2, [r3, #0]
      break;
 800160a:	e0f8      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4a83      	ldr	r2, [pc, #524]	; (800181c <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8001610:	601a      	str	r2, [r3, #0]
      break;
 8001612:	e0f4      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4a82      	ldr	r2, [pc, #520]	; (8001820 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001618:	601a      	str	r2, [r3, #0]
      break;
 800161a:	e0f0      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 800161c:	7abb      	ldrb	r3, [r7, #10]
 800161e:	2b1b      	cmp	r3, #27
 8001620:	d842      	bhi.n	80016a8 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8001622:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	080016a1 	.word	0x080016a1
 800162c:	080016a1 	.word	0x080016a1
 8001630:	080016a1 	.word	0x080016a1
 8001634:	080016a1 	.word	0x080016a1
 8001638:	08001699 	.word	0x08001699
 800163c:	080016a9 	.word	0x080016a9
 8001640:	080016a9 	.word	0x080016a9
 8001644:	080016a9 	.word	0x080016a9
 8001648:	080016a1 	.word	0x080016a1
 800164c:	080016a1 	.word	0x080016a1
 8001650:	080016a1 	.word	0x080016a1
 8001654:	080016a1 	.word	0x080016a1
 8001658:	080016a9 	.word	0x080016a9
 800165c:	080016a9 	.word	0x080016a9
 8001660:	080016a9 	.word	0x080016a9
 8001664:	080016a9 	.word	0x080016a9
 8001668:	080016a1 	.word	0x080016a1
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016a1 	.word	0x080016a1
 8001674:	080016a1 	.word	0x080016a1
 8001678:	08001699 	.word	0x08001699
 800167c:	080016a9 	.word	0x080016a9
 8001680:	080016a9 	.word	0x080016a9
 8001684:	080016a9 	.word	0x080016a9
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016a1 	.word	0x080016a1
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016a1 	.word	0x080016a1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4a62      	ldr	r2, [pc, #392]	; (8001824 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 800169c:	601a      	str	r2, [r3, #0]
          break;
 800169e:	e00a      	b.n	80016b6 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4a5f      	ldr	r2, [pc, #380]	; (8001820 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80016a4:	601a      	str	r2, [r3, #0]
          break;
 80016a6:	e006      	b.n	80016b6 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	4a59      	ldr	r2, [pc, #356]	; (8001810 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80016ac:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	60fb      	str	r3, [r7, #12]
          break;
 80016b4:	bf00      	nop
      }
      break;
 80016b6:	e0a2      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80016b8:	7abb      	ldrb	r3, [r7, #10]
 80016ba:	2b1b      	cmp	r3, #27
 80016bc:	d842      	bhi.n	8001744 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80016be:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	0800173d 	.word	0x0800173d
 80016c8:	0800173d 	.word	0x0800173d
 80016cc:	0800173d 	.word	0x0800173d
 80016d0:	0800173d 	.word	0x0800173d
 80016d4:	08001735 	.word	0x08001735
 80016d8:	08001745 	.word	0x08001745
 80016dc:	08001745 	.word	0x08001745
 80016e0:	08001745 	.word	0x08001745
 80016e4:	0800173d 	.word	0x0800173d
 80016e8:	0800173d 	.word	0x0800173d
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	0800173d 	.word	0x0800173d
 80016f4:	08001745 	.word	0x08001745
 80016f8:	08001745 	.word	0x08001745
 80016fc:	08001745 	.word	0x08001745
 8001700:	08001745 	.word	0x08001745
 8001704:	0800173d 	.word	0x0800173d
 8001708:	0800173d 	.word	0x0800173d
 800170c:	0800173d 	.word	0x0800173d
 8001710:	0800173d 	.word	0x0800173d
 8001714:	08001735 	.word	0x08001735
 8001718:	08001745 	.word	0x08001745
 800171c:	08001745 	.word	0x08001745
 8001720:	08001745 	.word	0x08001745
 8001724:	0800173d 	.word	0x0800173d
 8001728:	0800173d 	.word	0x0800173d
 800172c:	0800173d 	.word	0x0800173d
 8001730:	0800173d 	.word	0x0800173d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4a3c      	ldr	r2, [pc, #240]	; (8001828 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8001738:	601a      	str	r2, [r3, #0]
          break;
 800173a:	e00a      	b.n	8001752 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4a38      	ldr	r2, [pc, #224]	; (8001820 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001740:	601a      	str	r2, [r3, #0]
          break;
 8001742:	e006      	b.n	8001752 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4a32      	ldr	r2, [pc, #200]	; (8001810 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001748:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	60fb      	str	r3, [r7, #12]
          break;
 8001750:	bf00      	nop
      }
      break;
 8001752:	e054      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001754:	7abb      	ldrb	r3, [r7, #10]
 8001756:	2b1b      	cmp	r3, #27
 8001758:	d842      	bhi.n	80017e0 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017d9 	.word	0x080017d9
 8001764:	080017d9 	.word	0x080017d9
 8001768:	080017d9 	.word	0x080017d9
 800176c:	080017d9 	.word	0x080017d9
 8001770:	080017d1 	.word	0x080017d1
 8001774:	080017e1 	.word	0x080017e1
 8001778:	080017e1 	.word	0x080017e1
 800177c:	080017e1 	.word	0x080017e1
 8001780:	080017d9 	.word	0x080017d9
 8001784:	080017d9 	.word	0x080017d9
 8001788:	080017d9 	.word	0x080017d9
 800178c:	080017d9 	.word	0x080017d9
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017e1 	.word	0x080017e1
 8001798:	080017e1 	.word	0x080017e1
 800179c:	080017e1 	.word	0x080017e1
 80017a0:	080017d9 	.word	0x080017d9
 80017a4:	080017d9 	.word	0x080017d9
 80017a8:	080017d9 	.word	0x080017d9
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	080017d1 	.word	0x080017d1
 80017b4:	080017e1 	.word	0x080017e1
 80017b8:	080017e1 	.word	0x080017e1
 80017bc:	080017e1 	.word	0x080017e1
 80017c0:	080017d9 	.word	0x080017d9
 80017c4:	080017d9 	.word	0x080017d9
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017d9 	.word	0x080017d9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4a16      	ldr	r2, [pc, #88]	; (800182c <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80017d4:	601a      	str	r2, [r3, #0]
          break;
 80017d6:	e00a      	b.n	80017ee <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4a11      	ldr	r2, [pc, #68]	; (8001820 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80017dc:	601a      	str	r2, [r3, #0]
          break;
 80017de:	e006      	b.n	80017ee <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80017e4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	60fb      	str	r3, [r7, #12]
          break;
 80017ec:	bf00      	nop
      }
      break;
 80017ee:	e006      	b.n	80017fe <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80017f4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	60fb      	str	r3, [r7, #12]
      break;
 80017fc:	bf00      	nop
  }

  return ret;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	41480000 	.word	0x41480000
 800180c:	3fcccccd 	.word	0x3fcccccd
 8001810:	bf800000 	.word	0xbf800000
 8001814:	41c80000 	.word	0x41c80000
 8001818:	42480000 	.word	0x42480000
 800181c:	42c80000 	.word	0x42c80000
 8001820:	43480000 	.word	0x43480000
 8001824:	43c80000 	.word	0x43c80000
 8001828:	44480000 	.word	0x44480000
 800182c:	44c80000 	.word	0x44c80000

08001830 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	ed97 0a00 	vldr	s0, [r7]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f805 	bl	8001854 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800184a:	4603      	mov	r3, r0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001860:	460b      	mov	r3, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800186e:	2b01      	cmp	r3, #1
 8001870:	d109      	bne.n	8001886 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001872:	79ba      	ldrb	r2, [r7, #6]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4619      	mov	r1, r3
 8001878:	ed97 0a02 	vldr	s0, [r7, #8]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f98d 	bl	8001b9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001882:	4603      	mov	r3, r0
 8001884:	e008      	b.n	8001898 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001886:	79ba      	ldrb	r2, [r7, #6]
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4619      	mov	r1, r3
 800188c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 fa9f 	bl	8001dd4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8001896:	4603      	mov	r3, r0
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3320      	adds	r3, #32
 80018b2:	f107 020b 	add.w	r2, r7, #11
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fde7 	bl	800248c <lis2dw12_full_scale_get>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	e027      	b.n	800191a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80018ca:	7afb      	ldrb	r3, [r7, #11]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d81b      	bhi.n	8001908 <LIS2DW12_ACC_GetFullScale+0x68>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <LIS2DW12_ACC_GetFullScale+0x38>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	080018f1 	.word	0x080018f1
 80018e0:	080018f9 	.word	0x080018f9
 80018e4:	08001901 	.word	0x08001901
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
      break;
 80018ee:	e013      	b.n	8001918 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	601a      	str	r2, [r3, #0]
      break;
 80018f6:	e00f      	b.n	8001918 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2208      	movs	r2, #8
 80018fc:	601a      	str	r2, [r3, #0]
      break;
 80018fe:	e00b      	b.n	8001918 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2210      	movs	r2, #16
 8001904:	601a      	str	r2, [r3, #0]
      break;
 8001906:	e007      	b.n	8001918 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f04f 32ff 	mov.w	r2, #4294967295
 800190e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
 8001914:	60fb      	str	r3, [r7, #12]
      break;
 8001916:	bf00      	nop
  }

  return ret;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop

08001924 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b02      	cmp	r3, #2
 8001932:	dd0b      	ble.n	800194c <LIS2DW12_ACC_SetFullScale+0x28>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b04      	cmp	r3, #4
 8001938:	dd06      	ble.n	8001948 <LIS2DW12_ACC_SetFullScale+0x24>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b08      	cmp	r3, #8
 800193e:	dc01      	bgt.n	8001944 <LIS2DW12_ACC_SetFullScale+0x20>
 8001940:	2302      	movs	r3, #2
 8001942:	e004      	b.n	800194e <LIS2DW12_ACC_SetFullScale+0x2a>
 8001944:	2303      	movs	r3, #3
 8001946:	e002      	b.n	800194e <LIS2DW12_ACC_SetFullScale+0x2a>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <LIS2DW12_ACC_SetFullScale+0x2a>
 800194c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800194e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3320      	adds	r3, #32
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fd71 	bl	8002440 <lis2dw12_full_scale_set>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	e000      	b.n	800196c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3320      	adds	r3, #32
 8001986:	f107 020b 	add.w	r2, r7, #11
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fb67 	bl	8002060 <lis2dw12_power_mode_get>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	e089      	b.n	8001ab2 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3320      	adds	r3, #32
 80019a2:	f107 020c 	add.w	r2, r7, #12
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fda7 	bl	80024fc <lis2dw12_acceleration_raw_get>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	e07b      	b.n	8001ab2 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	2b1b      	cmp	r3, #27
 80019be:	d873      	bhi.n	8001aa8 <LIS2DW12_ACC_GetAxesRaw+0x134>
 80019c0:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	08001a39 	.word	0x08001a39
 80019cc:	08001a71 	.word	0x08001a71
 80019d0:	08001a71 	.word	0x08001a71
 80019d4:	08001a71 	.word	0x08001a71
 80019d8:	08001a71 	.word	0x08001a71
 80019dc:	08001aa9 	.word	0x08001aa9
 80019e0:	08001aa9 	.word	0x08001aa9
 80019e4:	08001aa9 	.word	0x08001aa9
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a71 	.word	0x08001a71
 80019f0:	08001a71 	.word	0x08001a71
 80019f4:	08001a71 	.word	0x08001a71
 80019f8:	08001aa9 	.word	0x08001aa9
 80019fc:	08001aa9 	.word	0x08001aa9
 8001a00:	08001aa9 	.word	0x08001aa9
 8001a04:	08001aa9 	.word	0x08001aa9
 8001a08:	08001a39 	.word	0x08001a39
 8001a0c:	08001a71 	.word	0x08001a71
 8001a10:	08001a71 	.word	0x08001a71
 8001a14:	08001a71 	.word	0x08001a71
 8001a18:	08001a71 	.word	0x08001a71
 8001a1c:	08001aa9 	.word	0x08001aa9
 8001a20:	08001aa9 	.word	0x08001aa9
 8001a24:	08001aa9 	.word	0x08001aa9
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a71 	.word	0x08001a71
 8001a30:	08001a71 	.word	0x08001a71
 8001a34:	08001a71 	.word	0x08001a71
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001a38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da00      	bge.n	8001a42 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001a40:	330f      	adds	r3, #15
 8001a42:	111b      	asrs	r3, r3, #4
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da00      	bge.n	8001a54 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001a52:	330f      	adds	r3, #15
 8001a54:	111b      	asrs	r3, r3, #4
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001a5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da00      	bge.n	8001a66 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001a64:	330f      	adds	r3, #15
 8001a66:	111b      	asrs	r3, r3, #4
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	809a      	strh	r2, [r3, #4]
      break;
 8001a6e:	e01f      	b.n	8001ab0 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001a70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da00      	bge.n	8001a7a <LIS2DW12_ACC_GetAxesRaw+0x106>
 8001a78:	3303      	adds	r3, #3
 8001a7a:	109b      	asrs	r3, r3, #2
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da00      	bge.n	8001a8c <LIS2DW12_ACC_GetAxesRaw+0x118>
 8001a8a:	3303      	adds	r3, #3
 8001a8c:	109b      	asrs	r3, r3, #2
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001a94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da00      	bge.n	8001a9e <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8001a9c:	3303      	adds	r3, #3
 8001a9e:	109b      	asrs	r3, r3, #2
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	809a      	strh	r2, [r3, #4]
      break;
 8001aa6:	e003      	b.n	8001ab0 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	617b      	str	r3, [r7, #20]
      break;
 8001aae:	bf00      	nop
  }

  return ret;
 8001ab0:	697b      	ldr	r3, [r7, #20]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop

08001abc <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff4e 	bl	8001974 <LIS2DW12_ACC_GetAxesRaw>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e03c      	b.n	8001b5e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fbd6 	bl	800129c <LIS2DW12_ACC_GetSensitivity>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e030      	b.n	8001b5e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001afc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 2a90 	vmov	r2, s15
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001b1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b34:	ee17 2a90 	vmov	r2, s15
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001b3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b54:	ee17 2a90 	vmov	r2, s15
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
 8001b72:	4613      	mov	r3, r2
 8001b74:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f103 0020 	add.w	r0, r3, #32
 8001b7c:	1cba      	adds	r2, r7, #2
 8001b7e:	78f9      	ldrb	r1, [r7, #3]
 8001b80:	2301      	movs	r3, #1
 8001b82:	f000 fa07 	bl	8001f94 <lis2dw12_write_reg>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b90:	e000      	b.n	8001b94 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d80b      	bhi.n	8001bd0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001bb8:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bfd 	.word	0x08001bfd
 8001bc4:	08001c29 	.word	0x08001c29
 8001bc8:	08001c55 	.word	0x08001c55
 8001bcc:	08001c81 	.word	0x08001c81
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d002      	beq.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8001bda:	e002      	b.n	8001be2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001bdc:	2314      	movs	r3, #20
 8001bde:	75fb      	strb	r3, [r7, #23]
          break;
 8001be0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8001be2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	d400      	bmi.n	8001bf6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001bf4:	e05a      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001bf8:	60bb      	str	r3, [r7, #8]
      break;
 8001bfa:	e057      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d002      	beq.n	8001c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001c02:	2303      	movs	r3, #3
 8001c04:	75fb      	strb	r3, [r7, #23]
          break;
 8001c06:	e002      	b.n	8001c0e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001c08:	2313      	movs	r3, #19
 8001c0a:	75fb      	strb	r3, [r7, #23]
          break;
 8001c0c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c12:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	dc00      	bgt.n	8001c22 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001c20:	e044      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c22:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c24:	60bb      	str	r3, [r7, #8]
      break;
 8001c26:	e041      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d002      	beq.n	8001c34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	75fb      	strb	r3, [r7, #23]
          break;
 8001c32:	e002      	b.n	8001c3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001c34:	2312      	movs	r3, #18
 8001c36:	75fb      	strb	r3, [r7, #23]
          break;
 8001c38:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c3e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dc00      	bgt.n	8001c4e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001c4c:	e02e      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c50:	60bb      	str	r3, [r7, #8]
      break;
 8001c52:	e02b      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d002      	beq.n	8001c60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8001c5e:	e002      	b.n	8001c66 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001c60:	2311      	movs	r3, #17
 8001c62:	75fb      	strb	r3, [r7, #23]
          break;
 8001c64:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	dc00      	bgt.n	8001c7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001c78:	e018      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c7a:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c7c:	60bb      	str	r3, [r7, #8]
      break;
 8001c7e:	e015      	b.n	8001cac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d002      	beq.n	8001c8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
          break;
 8001c8a:	e002      	b.n	8001c92 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	75fb      	strb	r3, [r7, #23]
          break;
 8001c90:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c96:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	dc00      	bgt.n	8001ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001ca4:	e001      	b.n	8001caa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001ca8:	60bb      	str	r3, [r7, #8]
      break;
 8001caa:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001dc0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbc:	d801      	bhi.n	8001cc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e04d      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	d801      	bhi.n	8001cd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e042      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cdc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d801      	bhi.n	8001cee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e037      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001dc4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d801      	bhi.n	8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e02c      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d08:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001dc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	d801      	bhi.n	8001d1a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e021      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d1e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	d801      	bhi.n	8001d30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001d2c:	2306      	movs	r3, #6
 8001d2e:	e016      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d34:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001dcc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d801      	bhi.n	8001d46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00b      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d4a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001dd0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	d801      	bhi.n	8001d5c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001d58:	2308      	movs	r3, #8
 8001d5a:	e000      	b.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d5c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001d5e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3320      	adds	r3, #32
 8001d64:	7dba      	ldrb	r2, [r7, #22]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fa33 	bl	80021d4 <lis2dw12_data_rate_set>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e018      	b.n	8001dac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3320      	adds	r3, #32
 8001d7e:	7dfa      	ldrb	r2, [r7, #23]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f91e 	bl	8001fc4 <lis2dw12_power_mode_set>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e00b      	b.n	8001dac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	79ba      	ldrb	r2, [r7, #6]
 8001da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	41480000 	.word	0x41480000
 8001db8:	43480000 	.word	0x43480000
 8001dbc:	43480000 	.word	0x43480000
 8001dc0:	3fcccccd 	.word	0x3fcccccd
 8001dc4:	42480000 	.word	0x42480000
 8001dc8:	42c80000 	.word	0x42c80000
 8001dcc:	43c80000 	.word	0x43c80000
 8001dd0:	44480000 	.word	0x44480000

08001dd4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001de0:	460b      	mov	r3, r1
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	79ba      	ldrb	r2, [r7, #6]
 8001df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001df8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dfc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ebc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d801      	bhi.n	8001e0e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001e0c:	e04d      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001e0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e12:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d801      	bhi.n	8001e24 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001e22:	e042      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e28:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d801      	bhi.n	8001e3a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001e38:	e037      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e3e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001ecc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4a:	d801      	bhi.n	8001e50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001e4e:	e02c      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e54:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ed4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d801      	bhi.n	8001e66 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001e64:	e021      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001e66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001edc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d801      	bhi.n	8001e7c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001e7a:	e016      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e80:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ee4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d801      	bhi.n	8001e92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001e90:	e00b      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e96:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001eec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d801      	bhi.n	8001ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001ea6:	e000      	b.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	3fcccccd 	.word	0x3fcccccd
 8001ec0:	3fcccccd 	.word	0x3fcccccd
 8001ec4:	41480000 	.word	0x41480000
 8001ec8:	41c80000 	.word	0x41c80000
 8001ecc:	42480000 	.word	0x42480000
 8001ed0:	42480000 	.word	0x42480000
 8001ed4:	42c80000 	.word	0x42c80000
 8001ed8:	42c80000 	.word	0x42c80000
 8001edc:	43480000 	.word	0x43480000
 8001ee0:	43480000 	.word	0x43480000
 8001ee4:	43c80000 	.word	0x43c80000
 8001ee8:	43c80000 	.word	0x43c80000
 8001eec:	44480000 	.word	0x44480000
 8001ef0:	44480000 	.word	0x44480000
 8001ef4:	44c80000 	.word	0x44c80000

08001ef8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	460b      	mov	r3, r1
 8001f06:	72fb      	strb	r3, [r7, #11]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	695c      	ldr	r4, [r3, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	7b1b      	ldrb	r3, [r3, #12]
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	893b      	ldrh	r3, [r7, #8]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	47a0      	blx	r4
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}

08001f2e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f2e:	b590      	push	{r4, r7, lr}
 8001f30:	b087      	sub	sp, #28
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	691c      	ldr	r4, [r3, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	7b1b      	ldrb	r3, [r3, #12]
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	b299      	uxth	r1, r3
 8001f54:	893b      	ldrh	r3, [r7, #8]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	47a0      	blx	r4
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}

08001f64 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	72fb      	strb	r3, [r7, #11]
 8001f74:	4613      	mov	r3, r2
 8001f76:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685c      	ldr	r4, [r3, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68d8      	ldr	r0, [r3, #12]
 8001f80:	893b      	ldrh	r3, [r7, #8]
 8001f82:	7af9      	ldrb	r1, [r7, #11]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	47a0      	blx	r4
 8001f88:	6178      	str	r0, [r7, #20]

  return ret;
 8001f8a:	697b      	ldr	r3, [r7, #20]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd90      	pop	{r4, r7, pc}

08001f94 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	72fb      	strb	r3, [r7, #11]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681c      	ldr	r4, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68d8      	ldr	r0, [r3, #12]
 8001fb0:	893b      	ldrh	r3, [r7, #8]
 8001fb2:	7af9      	ldrb	r1, [r7, #11]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	47a0      	blx	r4
 8001fb8:	6178      	str	r0, [r7, #20]

  return ret;
 8001fba:	697b      	ldr	r3, [r7, #20]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}

08001fc4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001fd0:	f107 0210 	add.w	r2, r7, #16
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffc3 	bl	8001f64 <lis2dw12_read_reg>
 8001fde:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	7c3b      	ldrb	r3, [r7, #16]
 8001ff2:	f362 0383 	bfi	r3, r2, #2, #2
 8001ff6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	7c3b      	ldrb	r3, [r7, #16]
 8002002:	f362 0301 	bfi	r3, r2, #0, #2
 8002006:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002008:	f107 0210 	add.w	r2, r7, #16
 800200c:	2301      	movs	r3, #1
 800200e:	2120      	movs	r1, #32
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffbf 	bl	8001f94 <lis2dw12_write_reg>
 8002016:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800201e:	f107 020c 	add.w	r2, r7, #12
 8002022:	2301      	movs	r3, #1
 8002024:	2125      	movs	r1, #37	; 0x25
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff9c 	bl	8001f64 <lis2dw12_read_reg>
 800202c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d110      	bne.n	8002056 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	7b3b      	ldrb	r3, [r7, #12]
 8002040:	f362 0382 	bfi	r3, r2, #2, #1
 8002044:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002046:	f107 020c 	add.w	r2, r7, #12
 800204a:	2301      	movs	r3, #1
 800204c:	2125      	movs	r1, #37	; 0x25
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa0 	bl	8001f94 <lis2dw12_write_reg>
 8002054:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002056:	697b      	ldr	r3, [r7, #20]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800206a:	f107 0210 	add.w	r2, r7, #16
 800206e:	2301      	movs	r3, #1
 8002070:	2120      	movs	r1, #32
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff76 	bl	8001f64 <lis2dw12_read_reg>
 8002078:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 80a3 	bne.w	80021c8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002082:	f107 020c 	add.w	r2, r7, #12
 8002086:	2301      	movs	r3, #1
 8002088:	2125      	movs	r1, #37	; 0x25
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff6a 	bl	8001f64 <lis2dw12_read_reg>
 8002090:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002092:	7b3b      	ldrb	r3, [r7, #12]
 8002094:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	011a      	lsls	r2, r3, #4
 800209c:	7c3b      	ldrb	r3, [r7, #16]
 800209e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80020a8:	7c3a      	ldrb	r2, [r7, #16]
 80020aa:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80020ae:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80020b0:	4413      	add	r3, r2
 80020b2:	2b1b      	cmp	r3, #27
 80020b4:	f200 8084 	bhi.w	80021c0 <lis2dw12_power_mode_get+0x160>
 80020b8:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <lis2dw12_power_mode_get+0x60>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	08002151 	.word	0x08002151
 80020c4:	08002149 	.word	0x08002149
 80020c8:	08002141 	.word	0x08002141
 80020cc:	08002139 	.word	0x08002139
 80020d0:	08002131 	.word	0x08002131
 80020d4:	080021c1 	.word	0x080021c1
 80020d8:	080021c1 	.word	0x080021c1
 80020dc:	080021c1 	.word	0x080021c1
 80020e0:	08002171 	.word	0x08002171
 80020e4:	08002169 	.word	0x08002169
 80020e8:	08002161 	.word	0x08002161
 80020ec:	08002159 	.word	0x08002159
 80020f0:	080021c1 	.word	0x080021c1
 80020f4:	080021c1 	.word	0x080021c1
 80020f8:	080021c1 	.word	0x080021c1
 80020fc:	080021c1 	.word	0x080021c1
 8002100:	08002199 	.word	0x08002199
 8002104:	08002191 	.word	0x08002191
 8002108:	08002189 	.word	0x08002189
 800210c:	08002181 	.word	0x08002181
 8002110:	08002179 	.word	0x08002179
 8002114:	080021c1 	.word	0x080021c1
 8002118:	080021c1 	.word	0x080021c1
 800211c:	080021c1 	.word	0x080021c1
 8002120:	080021b9 	.word	0x080021b9
 8002124:	080021b1 	.word	0x080021b1
 8002128:	080021a9 	.word	0x080021a9
 800212c:	080021a1 	.word	0x080021a1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2204      	movs	r2, #4
 8002134:	701a      	strb	r2, [r3, #0]
        break;
 8002136:	e048      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2203      	movs	r2, #3
 800213c:	701a      	strb	r2, [r3, #0]
        break;
 800213e:	e044      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]
        break;
 8002146:	e040      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
        break;
 800214e:	e03c      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
        break;
 8002156:	e038      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	220b      	movs	r2, #11
 800215c:	701a      	strb	r2, [r3, #0]
        break;
 800215e:	e034      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	220a      	movs	r2, #10
 8002164:	701a      	strb	r2, [r3, #0]
        break;
 8002166:	e030      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2209      	movs	r2, #9
 800216c:	701a      	strb	r2, [r3, #0]
        break;
 800216e:	e02c      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2208      	movs	r2, #8
 8002174:	701a      	strb	r2, [r3, #0]
        break;
 8002176:	e028      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2214      	movs	r2, #20
 800217c:	701a      	strb	r2, [r3, #0]
        break;
 800217e:	e024      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2213      	movs	r2, #19
 8002184:	701a      	strb	r2, [r3, #0]
        break;
 8002186:	e020      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2212      	movs	r2, #18
 800218c:	701a      	strb	r2, [r3, #0]
        break;
 800218e:	e01c      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2211      	movs	r2, #17
 8002194:	701a      	strb	r2, [r3, #0]
        break;
 8002196:	e018      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2210      	movs	r2, #16
 800219c:	701a      	strb	r2, [r3, #0]
        break;
 800219e:	e014      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	221b      	movs	r2, #27
 80021a4:	701a      	strb	r2, [r3, #0]
        break;
 80021a6:	e010      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	221a      	movs	r2, #26
 80021ac:	701a      	strb	r2, [r3, #0]
        break;
 80021ae:	e00c      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2219      	movs	r2, #25
 80021b4:	701a      	strb	r2, [r3, #0]
        break;
 80021b6:	e008      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2218      	movs	r2, #24
 80021bc:	701a      	strb	r2, [r3, #0]
        break;
 80021be:	e004      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2204      	movs	r2, #4
 80021c4:	701a      	strb	r2, [r3, #0]
        break;
 80021c6:	e000      	b.n	80021ca <lis2dw12_power_mode_get+0x16a>
    }
  }
 80021c8:	bf00      	nop

  return ret;
 80021ca:	697b      	ldr	r3, [r7, #20]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80021e0:	f107 0210 	add.w	r2, r7, #16
 80021e4:	2301      	movs	r3, #1
 80021e6:	2120      	movs	r1, #32
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff febb 	bl	8001f64 <lis2dw12_read_reg>
 80021ee:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10f      	bne.n	8002216 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	7c3b      	ldrb	r3, [r7, #16]
 8002200:	f362 1307 	bfi	r3, r2, #4, #4
 8002204:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002206:	f107 0210 	add.w	r2, r7, #16
 800220a:	2301      	movs	r3, #1
 800220c:	2120      	movs	r1, #32
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fec0 	bl	8001f94 <lis2dw12_write_reg>
 8002214:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800221c:	f107 020c 	add.w	r2, r7, #12
 8002220:	2301      	movs	r3, #1
 8002222:	2122      	movs	r1, #34	; 0x22
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fe9d 	bl	8001f64 <lis2dw12_read_reg>
 800222a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d110      	bne.n	8002254 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	b2da      	uxtb	r2, r3
 800223c:	7b3b      	ldrb	r3, [r7, #12]
 800223e:	f362 0301 	bfi	r3, r2, #0, #2
 8002242:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	2301      	movs	r3, #1
 800224a:	2122      	movs	r1, #34	; 0x22
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff fea1 	bl	8001f94 <lis2dw12_write_reg>
 8002252:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002254:	697b      	ldr	r3, [r7, #20]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800226a:	f107 0210 	add.w	r2, r7, #16
 800226e:	2301      	movs	r3, #1
 8002270:	2120      	movs	r1, #32
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fe76 	bl	8001f64 <lis2dw12_read_reg>
 8002278:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 80b3 	bne.w	80023e8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	2301      	movs	r3, #1
 8002288:	2122      	movs	r1, #34	; 0x22
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fe6a 	bl	8001f64 <lis2dw12_read_reg>
 8002290:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002298:	b2db      	uxtb	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	7c3a      	ldrb	r2, [r7, #16]
 800229e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	4413      	add	r3, r2
 80022a6:	2b32      	cmp	r3, #50	; 0x32
 80022a8:	f200 809a 	bhi.w	80023e0 <lis2dw12_data_rate_get+0x180>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <lis2dw12_data_rate_get+0x54>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	08002381 	.word	0x08002381
 80022b8:	08002389 	.word	0x08002389
 80022bc:	08002391 	.word	0x08002391
 80022c0:	08002399 	.word	0x08002399
 80022c4:	080023a1 	.word	0x080023a1
 80022c8:	080023a9 	.word	0x080023a9
 80022cc:	080023b1 	.word	0x080023b1
 80022d0:	080023b9 	.word	0x080023b9
 80022d4:	080023c1 	.word	0x080023c1
 80022d8:	080023c9 	.word	0x080023c9
 80022dc:	080023e1 	.word	0x080023e1
 80022e0:	080023e1 	.word	0x080023e1
 80022e4:	080023e1 	.word	0x080023e1
 80022e8:	080023e1 	.word	0x080023e1
 80022ec:	080023e1 	.word	0x080023e1
 80022f0:	080023e1 	.word	0x080023e1
 80022f4:	080023e1 	.word	0x080023e1
 80022f8:	080023e1 	.word	0x080023e1
 80022fc:	080023d9 	.word	0x080023d9
 8002300:	080023e1 	.word	0x080023e1
 8002304:	080023e1 	.word	0x080023e1
 8002308:	080023e1 	.word	0x080023e1
 800230c:	080023e1 	.word	0x080023e1
 8002310:	080023e1 	.word	0x080023e1
 8002314:	080023e1 	.word	0x080023e1
 8002318:	080023e1 	.word	0x080023e1
 800231c:	080023e1 	.word	0x080023e1
 8002320:	080023e1 	.word	0x080023e1
 8002324:	080023e1 	.word	0x080023e1
 8002328:	080023e1 	.word	0x080023e1
 800232c:	080023e1 	.word	0x080023e1
 8002330:	080023e1 	.word	0x080023e1
 8002334:	080023e1 	.word	0x080023e1
 8002338:	080023e1 	.word	0x080023e1
 800233c:	080023e1 	.word	0x080023e1
 8002340:	080023e1 	.word	0x080023e1
 8002344:	080023e1 	.word	0x080023e1
 8002348:	080023e1 	.word	0x080023e1
 800234c:	080023e1 	.word	0x080023e1
 8002350:	080023e1 	.word	0x080023e1
 8002354:	080023e1 	.word	0x080023e1
 8002358:	080023e1 	.word	0x080023e1
 800235c:	080023e1 	.word	0x080023e1
 8002360:	080023e1 	.word	0x080023e1
 8002364:	080023e1 	.word	0x080023e1
 8002368:	080023e1 	.word	0x080023e1
 800236c:	080023e1 	.word	0x080023e1
 8002370:	080023e1 	.word	0x080023e1
 8002374:	080023e1 	.word	0x080023e1
 8002378:	080023e1 	.word	0x080023e1
 800237c:	080023d1 	.word	0x080023d1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
        break;
 8002386:	e030      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
        break;
 800238e:	e02c      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
        break;
 8002396:	e028      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2203      	movs	r2, #3
 800239c:	701a      	strb	r2, [r3, #0]
        break;
 800239e:	e024      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2204      	movs	r2, #4
 80023a4:	701a      	strb	r2, [r3, #0]
        break;
 80023a6:	e020      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2205      	movs	r2, #5
 80023ac:	701a      	strb	r2, [r3, #0]
        break;
 80023ae:	e01c      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2206      	movs	r2, #6
 80023b4:	701a      	strb	r2, [r3, #0]
        break;
 80023b6:	e018      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2207      	movs	r2, #7
 80023bc:	701a      	strb	r2, [r3, #0]
        break;
 80023be:	e014      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2208      	movs	r2, #8
 80023c4:	701a      	strb	r2, [r3, #0]
        break;
 80023c6:	e010      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2209      	movs	r2, #9
 80023cc:	701a      	strb	r2, [r3, #0]
        break;
 80023ce:	e00c      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2232      	movs	r2, #50	; 0x32
 80023d4:	701a      	strb	r2, [r3, #0]
        break;
 80023d6:	e008      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2212      	movs	r2, #18
 80023dc:	701a      	strb	r2, [r3, #0]
        break;
 80023de:	e004      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
        break;
 80023e6:	e000      	b.n	80023ea <lis2dw12_data_rate_get+0x18a>
    }
  }
 80023e8:	bf00      	nop

  return ret;
 80023ea:	697b      	ldr	r3, [r7, #20]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002400:	f107 0208 	add.w	r2, r7, #8
 8002404:	2301      	movs	r3, #1
 8002406:	2121      	movs	r1, #33	; 0x21
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fdab 	bl	8001f64 <lis2dw12_read_reg>
 800240e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	7a3b      	ldrb	r3, [r7, #8]
 8002420:	f362 03c3 	bfi	r3, r2, #3, #1
 8002424:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002426:	f107 0208 	add.w	r2, r7, #8
 800242a:	2301      	movs	r3, #1
 800242c:	2121      	movs	r1, #33	; 0x21
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fdb0 	bl	8001f94 <lis2dw12_write_reg>
 8002434:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800244c:	f107 0208 	add.w	r2, r7, #8
 8002450:	2301      	movs	r3, #1
 8002452:	2125      	movs	r1, #37	; 0x25
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff fd85 	bl	8001f64 <lis2dw12_read_reg>
 800245a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	b2da      	uxtb	r2, r3
 800246a:	7a3b      	ldrb	r3, [r7, #8]
 800246c:	f362 1305 	bfi	r3, r2, #4, #2
 8002470:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002472:	f107 0208 	add.w	r2, r7, #8
 8002476:	2301      	movs	r3, #1
 8002478:	2125      	movs	r1, #37	; 0x25
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fd8a 	bl	8001f94 <lis2dw12_write_reg>
 8002480:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002496:	f107 0208 	add.w	r2, r7, #8
 800249a:	2301      	movs	r3, #1
 800249c:	2125      	movs	r1, #37	; 0x25
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fd60 	bl	8001f64 <lis2dw12_read_reg>
 80024a4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80024a6:	7a3b      	ldrb	r3, [r7, #8]
 80024a8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d81a      	bhi.n	80024e8 <lis2dw12_full_scale_get+0x5c>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <lis2dw12_full_scale_get+0x2c>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024d1 	.word	0x080024d1
 80024c0:	080024d9 	.word	0x080024d9
 80024c4:	080024e1 	.word	0x080024e1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
      break;
 80024ce:	e00f      	b.n	80024f0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
      break;
 80024d6:	e00b      	b.n	80024f0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
      break;
 80024de:	e007      	b.n	80024f0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2203      	movs	r2, #3
 80024e4:	701a      	strb	r2, [r3, #0]
      break;
 80024e6:	e003      	b.n	80024f0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
      break;
 80024ee:	bf00      	nop
  }

  return ret;
 80024f0:	68fb      	ldr	r3, [r7, #12]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop

080024fc <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002506:	f107 020c 	add.w	r2, r7, #12
 800250a:	2306      	movs	r3, #6
 800250c:	2128      	movs	r1, #40	; 0x28
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fd28 	bl	8001f64 <lis2dw12_read_reg>
 8002514:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002516:	7b7b      	ldrb	r3, [r7, #13]
 8002518:	b21a      	sxth	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002524:	b29b      	uxth	r3, r3
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	b29a      	uxth	r2, r3
 800252a:	7b3b      	ldrb	r3, [r7, #12]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4413      	add	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	b21a      	sxth	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3302      	adds	r3, #2
 800253e:	b212      	sxth	r2, r2
 8002540:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	3302      	adds	r3, #2
 8002546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254a:	b29b      	uxth	r3, r3
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	b29a      	uxth	r2, r3
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4413      	add	r3, r2
 8002556:	b29a      	uxth	r2, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	3302      	adds	r3, #2
 800255c:	b212      	sxth	r2, r2
 800255e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002560:	7c7a      	ldrb	r2, [r7, #17]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	3304      	adds	r3, #4
 8002566:	b212      	sxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3304      	adds	r3, #4
 800256e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002572:	b29b      	uxth	r3, r3
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	b29a      	uxth	r2, r3
 8002578:	7c3b      	ldrb	r3, [r7, #16]
 800257a:	b29b      	uxth	r3, r3
 800257c:	4413      	add	r3, r2
 800257e:	b29a      	uxth	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	3304      	adds	r3, #4
 8002584:	b212      	sxth	r2, r2
 8002586:	801a      	strh	r2, [r3, #0]

  return ret;
 8002588:	697b      	ldr	r3, [r7, #20]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800259c:	2301      	movs	r3, #1
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	210f      	movs	r1, #15
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fcde 	bl	8001f64 <lis2dw12_read_reg>
 80025a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80025c0:	f107 0208 	add.w	r2, r7, #8
 80025c4:	2301      	movs	r3, #1
 80025c6:	2121      	movs	r1, #33	; 0x21
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fccb 	bl	8001f64 <lis2dw12_read_reg>
 80025ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	7a3b      	ldrb	r3, [r7, #8]
 80025e0:	f362 0382 	bfi	r3, r2, #2, #1
 80025e4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	2301      	movs	r3, #1
 80025ec:	2121      	movs	r1, #33	; 0x21
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fcd0 	bl	8001f94 <lis2dw12_write_reg>
 80025f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800260c:	f107 0208 	add.w	r2, r7, #8
 8002610:	2301      	movs	r3, #1
 8002612:	212e      	movs	r1, #46	; 0x2e
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff fca5 	bl	8001f64 <lis2dw12_read_reg>
 800261a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	b2da      	uxtb	r2, r3
 800262a:	7a3b      	ldrb	r3, [r7, #8]
 800262c:	f362 1347 	bfi	r3, r2, #5, #3
 8002630:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002632:	f107 0208 	add.w	r2, r7, #8
 8002636:	2301      	movs	r3, #1
 8002638:	212e      	movs	r1, #46	; 0x2e
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fcaa 	bl	8001f94 <lis2dw12_write_reg>
 8002640:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e067      	b.n	8002738 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7b1a      	ldrb	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a28      	ldr	r2, [pc, #160]	; (8002744 <LIS2MDL_RegisterBusIO+0xf8>)
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <LIS2MDL_RegisterBusIO+0xfc>)
 80026aa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e036      	b.n	8002738 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4798      	blx	r3
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e02c      	b.n	8002738 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d028      	beq.n	8002738 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d123      	bne.n	8002738 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10d      	bne.n	8002714 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80026f8:	2334      	movs	r3, #52	; 0x34
 80026fa:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	461a      	mov	r2, r3
 8002700:	2162      	movs	r1, #98	; 0x62
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fb1b 	bl	8002d3e <LIS2MDL_Write_Reg>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	e012      	b.n	800273a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d101      	bne.n	8002720 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	e00c      	b.n	800273a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3320      	adds	r3, #32
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f000 ff70 	bl	800360c <lis2mdl_i2c_interface_set>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e000      	b.n	800273a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8002738:	68fb      	ldr	r3, [r7, #12]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	08002d95 	.word	0x08002d95
 8002748:	08002e17 	.word	0x08002e17

0800274c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d144      	bne.n	80027e6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800275c:	f107 0208 	add.w	r2, r7, #8
 8002760:	2301      	movs	r3, #1
 8002762:	2162      	movs	r1, #98	; 0x62
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fb97 	bl	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	e06c      	b.n	8002850 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002776:	f107 020c 	add.w	r2, r7, #12
 800277a:	2301      	movs	r3, #1
 800277c:	2160      	movs	r1, #96	; 0x60
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fb8a 	bl	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e05f      	b.n	8002850 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8002790:	7a3b      	ldrb	r3, [r7, #8]
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8002798:	7a3b      	ldrb	r3, [r7, #8]
 800279a:	f36f 0341 	bfc	r3, #1, #1
 800279e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80027a0:	7b3b      	ldrb	r3, [r7, #12]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f362 0301 	bfi	r3, r2, #0, #2
 80027a8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80027aa:	7b3b      	ldrb	r3, [r7, #12]
 80027ac:	f043 030c 	orr.w	r3, r3, #12
 80027b0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80027b2:	f107 0208 	add.w	r2, r7, #8
 80027b6:	2301      	movs	r3, #1
 80027b8:	2162      	movs	r1, #98	; 0x62
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fcab 	bl	8003116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e041      	b.n	8002850 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80027cc:	f107 020c 	add.w	r2, r7, #12
 80027d0:	2301      	movs	r3, #1
 80027d2:	2160      	movs	r1, #96	; 0x60
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fc9e 	bl	8003116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d032      	beq.n	8002846 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	e034      	b.n	8002850 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3320      	adds	r3, #32
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fe65 	bl	80034bc <lis2mdl_block_data_update_set>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	e028      	b.n	8002850 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3320      	adds	r3, #32
 8002802:	2102      	movs	r1, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fdd4 	bl	80033b2 <lis2mdl_operating_mode_set>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
 8002814:	e01c      	b.n	8002850 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3320      	adds	r3, #32
 800281a:	2103      	movs	r1, #3
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fdee 	bl	80033fe <lis2mdl_data_rate_set>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	e010      	b.n	8002850 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3320      	adds	r3, #32
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fec3 	bl	80035c0 <lis2mdl_self_test_set>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e004      	b.n	8002850 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f8a5 	bl	80029b0 <LIS2MDL_MAG_Disable>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	e004      	b.n	800287c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b03      	cmp	r3, #3
 8002894:	d10b      	bne.n	80028ae <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8002896:	2301      	movs	r3, #1
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	214f      	movs	r1, #79	; 0x4f
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fafb 	bl	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	e00c      	b.n	80028c8 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3320      	adds	r3, #32
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fe72 	bl	800359e <lis2mdl_device_id_get>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	e000      	b.n	80028c8 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2200      	movs	r2, #0
 80028e4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2201      	movs	r2, #1
 80028ea:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2232      	movs	r2, #50	; 0x32
 8002902:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <LIS2MDL_GetCapabilities+0x58>)
 8002918:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	42c80000 	.word	0x42c80000

0800292c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e032      	b.n	80029a8 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d11d      	bne.n	8002986 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800294a:	f107 020c 	add.w	r2, r7, #12
 800294e:	2301      	movs	r3, #1
 8002950:	2160      	movs	r1, #96	; 0x60
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 faa0 	bl	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e021      	b.n	80029a8 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002964:	7b3b      	ldrb	r3, [r7, #12]
 8002966:	f36f 0301 	bfc	r3, #0, #2
 800296a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800296c:	f107 020c 	add.w	r2, r7, #12
 8002970:	2301      	movs	r3, #1
 8002972:	2160      	movs	r1, #96	; 0x60
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fbce 	bl	8003116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
 8002984:	e010      	b.n	80029a8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3320      	adds	r3, #32
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fd10 	bl	80033b2 <lis2mdl_operating_mode_set>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295
 800299c:	e004      	b.n	80029a8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e033      	b.n	8002a2e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d11e      	bne.n	8002a0c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80029ce:	f107 020c 	add.w	r2, r7, #12
 80029d2:	2301      	movs	r3, #1
 80029d4:	2160      	movs	r1, #96	; 0x60
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa5e 	bl	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	e022      	b.n	8002a2e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80029e8:	7b3b      	ldrb	r3, [r7, #12]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f362 0301 	bfi	r3, r2, #0, #2
 80029f0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80029f2:	f107 020c 	add.w	r2, r7, #12
 80029f6:	2301      	movs	r3, #1
 80029f8:	2160      	movs	r1, #96	; 0x60
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fb8b 	bl	8003116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e010      	b.n	8002a2e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3320      	adds	r3, #32
 8002a10:	2102      	movs	r1, #2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fccd 	bl	80033b2 <lis2mdl_operating_mode_set>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e004      	b.n	8002a2e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002a46:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3320      	adds	r3, #32
 8002a6a:	f107 020b 	add.w	r2, r7, #11
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fceb 	bl	800344c <lis2mdl_data_rate_get>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	e023      	b.n	8002aca <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d81b      	bhi.n	8002ac0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002aa9 	.word	0x08002aa9
 8002a98:	08002ab1 	.word	0x08002ab1
 8002a9c:	08002ab9 	.word	0x08002ab9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002aa4:	601a      	str	r2, [r3, #0]
      break;
 8002aa6:	e00f      	b.n	8002ac8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002aac:	601a      	str	r2, [r3, #0]
      break;
 8002aae:	e00b      	b.n	8002ac8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002ab4:	601a      	str	r2, [r3, #0]
      break;
 8002ab6:	e007      	b.n	8002ac8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002abc:	601a      	str	r2, [r3, #0]
      break;
 8002abe:	e003      	b.n	8002ac8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	60fb      	str	r3, [r7, #12]
      break;
 8002ac6:	bf00      	nop
  }

  return ret;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	41200000 	.word	0x41200000
 8002ad8:	41a00000 	.word	0x41a00000
 8002adc:	42480000 	.word	0x42480000
 8002ae0:	42c80000 	.word	0x42c80000

08002ae4 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002af0:	edd7 7a00 	vldr	s15, [r7]
 8002af4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	d801      	bhi.n	8002b06 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002b02:	2300      	movs	r3, #0
 8002b04:	e016      	b.n	8002b34 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b06:	edd7 7a00 	vldr	s15, [r7]
 8002b0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b16:	d801      	bhi.n	8002b1c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e00b      	b.n	8002b34 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b1c:	edd7 7a00 	vldr	s15, [r7]
 8002b20:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ba8 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	d801      	bhi.n	8002b32 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e000      	b.n	8002b34 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b32:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002b34:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d121      	bne.n	8002b82 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002b3e:	f107 020c 	add.w	r2, r7, #12
 8002b42:	2301      	movs	r3, #1
 8002b44:	2160      	movs	r1, #96	; 0x60
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9a6 	bl	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e022      	b.n	8002b9e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	7b3b      	ldrb	r3, [r7, #12]
 8002b62:	f362 0383 	bfi	r3, r2, #2, #2
 8002b66:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002b68:	f107 020c 	add.w	r2, r7, #12
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	2160      	movs	r1, #96	; 0x60
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fad0 	bl	8003116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00f      	beq.n	8002b9c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	e00d      	b.n	8002b9e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3320      	adds	r3, #32
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fc37 	bl	80033fe <lis2mdl_data_rate_set>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	e000      	b.n	8002b9e <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	42480000 	.word	0x42480000

08002bac <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2232      	movs	r2, #50	; 0x32
 8002bba:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3320      	adds	r3, #32
 8002bf0:	f107 0208 	add.w	r2, r7, #8
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fc86 	bl	8003508 <lis2mdl_magnetic_raw_get>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e00c      	b.n	8002c22 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002c08:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002c10:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c18:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b088      	sub	sp, #32
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d137      	bne.n	8002cac <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002c3c:	f107 0218 	add.w	r2, r7, #24
 8002c40:	2306      	movs	r3, #6
 8002c42:	2168      	movs	r1, #104	; 0x68
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f927 	bl	8002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	e06f      	b.n	8002d36 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002c56:	7e7b      	ldrb	r3, [r7, #25]
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002c5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	7e3b      	ldrb	r3, [r7, #24]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8002c72:	7efb      	ldrb	r3, [r7, #27]
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002c78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	7ebb      	ldrb	r3, [r7, #26]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002c8e:	7f7b      	ldrb	r3, [r7, #29]
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002c94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	7f3b      	ldrb	r3, [r7, #28]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b21b      	sxth	r3, r3
 8002ca8:	82bb      	strh	r3, [r7, #20]
 8002caa:	e00d      	b.n	8002cc8 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3320      	adds	r3, #32
 8002cb0:	f107 0210 	add.w	r2, r7, #16
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fc26 	bl	8003508 <lis2mdl_magnetic_raw_get>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	e036      	b.n	8002d36 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff feb1 	bl	8002a36 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002cd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cec:	ee17 2a90 	vmov	r2, s15
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002cf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d0c:	ee17 2a90 	vmov	r2, s15
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d2c:	ee17 2a90 	vmov	r2, s15
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	70fb      	strb	r3, [r7, #3]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d10b      	bne.n	8002d6e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002d56:	1cba      	adds	r2, r7, #2
 8002d58:	78f9      	ldrb	r1, [r7, #3]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f9da 	bl	8003116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e00e      	b.n	8002d8c <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f103 0020 	add.w	r0, r3, #32
 8002d74:	1cba      	adds	r2, r7, #2
 8002d76:	78f9      	ldrb	r1, [r7, #3]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f000 fb02 	bl	8003382 <lis2mdl_write_reg>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	e000      	b.n	8002d8c <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	460b      	mov	r3, r1
 8002da2:	72fb      	strb	r3, [r7, #11]
 8002da4:	4613      	mov	r3, r2
 8002da6:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10e      	bne.n	8002dd2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	695c      	ldr	r4, [r3, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	7b1b      	ldrb	r3, [r3, #12]
 8002dbc:	b298      	uxth	r0, r3
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
 8002dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	b299      	uxth	r1, r3
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	47a0      	blx	r4
 8002dce:	4603      	mov	r3, r0
 8002dd0:	e01d      	b.n	8002e0e <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d10b      	bne.n	8002df2 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	695c      	ldr	r4, [r3, #20]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	7b1b      	ldrb	r3, [r3, #12]
 8002de2:	b298      	uxth	r0, r3
 8002de4:	7afb      	ldrb	r3, [r7, #11]
 8002de6:	b299      	uxth	r1, r3
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	47a0      	blx	r4
 8002dee:	4603      	mov	r3, r0
 8002df0:	e00d      	b.n	8002e0e <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	695c      	ldr	r4, [r3, #20]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	7b1b      	ldrb	r3, [r3, #12]
 8002dfa:	b298      	uxth	r0, r3
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	b299      	uxth	r1, r3
 8002e06:	893b      	ldrh	r3, [r7, #8]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	47a0      	blx	r4
 8002e0c:	4603      	mov	r3, r0
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd90      	pop	{r4, r7, pc}

08002e16 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e16:	b590      	push	{r4, r7, lr}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	461a      	mov	r2, r3
 8002e22:	460b      	mov	r3, r1
 8002e24:	72fb      	strb	r3, [r7, #11]
 8002e26:	4613      	mov	r3, r2
 8002e28:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	691c      	ldr	r4, [r3, #16]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	7b1b      	ldrb	r3, [r3, #12]
 8002e3e:	b298      	uxth	r0, r3
 8002e40:	7afb      	ldrb	r3, [r7, #11]
 8002e42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	b299      	uxth	r1, r3
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	47a0      	blx	r4
 8002e50:	4603      	mov	r3, r0
 8002e52:	e01d      	b.n	8002e90 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d10b      	bne.n	8002e74 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	691c      	ldr	r4, [r3, #16]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	7b1b      	ldrb	r3, [r3, #12]
 8002e64:	b298      	uxth	r0, r3
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	b299      	uxth	r1, r3
 8002e6a:	893b      	ldrh	r3, [r7, #8]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	47a0      	blx	r4
 8002e70:	4603      	mov	r3, r0
 8002e72:	e00d      	b.n	8002e90 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	691c      	ldr	r4, [r3, #16]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	7b1b      	ldrb	r3, [r3, #12]
 8002e7c:	b298      	uxth	r0, r3
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	b299      	uxth	r1, r3
 8002e88:	893b      	ldrh	r3, [r7, #8]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	47a0      	blx	r4
 8002e8e:	4603      	mov	r3, r0
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}

08002e98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	72fb      	strb	r3, [r7, #11]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002ebe:	233d      	movs	r3, #61	; 0x3d
 8002ec0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002ec2:	2315      	movs	r3, #21
 8002ec4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002ec8:	2316      	movs	r3, #22
 8002eca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002ece:	2317      	movs	r3, #23
 8002ed0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002ed4:	2314      	movs	r3, #20
 8002ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002eda:	2344      	movs	r3, #68	; 0x44
 8002edc:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002ee4:	2339      	movs	r3, #57	; 0x39
 8002ee6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002ef0:	2329      	movs	r3, #41	; 0x29
 8002ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002ef6:	231e      	movs	r3, #30
 8002ef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002f02:	893b      	ldrh	r3, [r7, #8]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002f08:	2310      	movs	r3, #16
 8002f0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002f14:	2340      	movs	r3, #64	; 0x40
 8002f16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f103 0020 	add.w	r0, r3, #32
 8002f20:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002f24:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f000 fa2a 	bl	8003382 <lis2mdl_write_reg>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	e0e9      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f103 0020 	add.w	r0, r3, #32
 8002f40:	f107 021f 	add.w	r2, r7, #31
 8002f44:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f000 fa1a 	bl	8003382 <lis2mdl_write_reg>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295
 8002f58:	e0d9      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f103 0020 	add.w	r0, r3, #32
 8002f60:	f107 020b 	add.w	r2, r7, #11
 8002f64:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f000 fa0a 	bl	8003382 <lis2mdl_write_reg>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	e0c9      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f103 0020 	add.w	r0, r3, #32
 8002f80:	f107 021d 	add.w	r2, r7, #29
 8002f84:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f000 f9fa 	bl	8003382 <lis2mdl_write_reg>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	e0b9      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f103 0020 	add.w	r0, r3, #32
 8002fa0:	f107 021e 	add.w	r2, r7, #30
 8002fa4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f000 f9ea 	bl	8003382 <lis2mdl_write_reg>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	e0a9      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f103 0020 	add.w	r0, r3, #32
 8002fc0:	f107 0220 	add.w	r2, r7, #32
 8002fc4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f000 f9da 	bl	8003382 <lis2mdl_write_reg>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	e099      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f103 0020 	add.w	r0, r3, #32
 8002fe0:	f107 021c 	add.w	r2, r7, #28
 8002fe4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f000 f9b2 	bl	8003352 <lis2mdl_read_reg>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff8:	e089      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002ffa:	7f3b      	ldrb	r3, [r7, #28]
 8002ffc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003000:	429a      	cmp	r2, r3
 8003002:	d102      	bne.n	800300a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003004:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003008:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f103 0020 	add.w	r0, r3, #32
 8003010:	f107 021c 	add.w	r2, r7, #28
 8003014:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003018:	2301      	movs	r3, #1
 800301a:	f000 f9b2 	bl	8003382 <lis2mdl_write_reg>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	e071      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f103 0020 	add.w	r0, r3, #32
 8003030:	f107 0214 	add.w	r2, r7, #20
 8003034:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003038:	2306      	movs	r3, #6
 800303a:	f000 f98a 	bl	8003352 <lis2mdl_read_reg>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	e061      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f103 0020 	add.w	r0, r3, #32
 8003050:	f107 021b 	add.w	r2, r7, #27
 8003054:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003058:	2301      	movs	r3, #1
 800305a:	f000 f97a 	bl	8003352 <lis2mdl_read_reg>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	e051      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 800306a:	7efa      	ldrb	r2, [r7, #27]
 800306c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003070:	4013      	ands	r3, r2
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003078:	429a      	cmp	r2, r3
 800307a:	d1e6      	bne.n	800304a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f103 0020 	add.w	r0, r3, #32
 8003082:	f107 021b 	add.w	r2, r7, #27
 8003086:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800308a:	2301      	movs	r3, #1
 800308c:	f000 f961 	bl	8003352 <lis2mdl_read_reg>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	e038      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 800309c:	7efa      	ldrb	r2, [r7, #27]
 800309e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030a2:	4013      	ands	r3, r2
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d1e6      	bne.n	800307c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f103 0020 	add.w	r0, r3, #32
 80030b4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80030b8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80030bc:	2301      	movs	r3, #1
 80030be:	f000 f960 	bl	8003382 <lis2mdl_write_reg>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295
 80030cc:	e01f      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f103 0020 	add.w	r0, r3, #32
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	f000 f939 	bl	8003352 <lis2mdl_read_reg>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e010      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f103 0020 	add.w	r0, r3, #32
 80030f2:	f107 0220 	add.w	r2, r7, #32
 80030f6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80030fa:	2301      	movs	r3, #1
 80030fc:	f000 f941 	bl	8003382 <lis2mdl_write_reg>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	e000      	b.n	800310e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3730      	adds	r7, #48	; 0x30
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b08c      	sub	sp, #48	; 0x30
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	461a      	mov	r2, r3
 8003122:	460b      	mov	r3, r1
 8003124:	72fb      	strb	r3, [r7, #11]
 8003126:	4613      	mov	r3, r2
 8003128:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003130:	2340      	movs	r3, #64	; 0x40
 8003132:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 800313c:	233c      	movs	r3, #60	; 0x3c
 800313e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003140:	2315      	movs	r3, #21
 8003142:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003146:	2316      	movs	r3, #22
 8003148:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800314c:	2317      	movs	r3, #23
 800314e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003156:	2314      	movs	r3, #20
 8003158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800315c:	2344      	movs	r3, #68	; 0x44
 800315e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003160:	2339      	movs	r3, #57	; 0x39
 8003162:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800316c:	2329      	movs	r3, #41	; 0x29
 800316e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003172:	231e      	movs	r3, #30
 8003174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800317e:	2310      	movs	r3, #16
 8003180:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003190:	230e      	movs	r3, #14
 8003192:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f103 0020 	add.w	r0, r3, #32
 800319c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80031a0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80031a4:	2301      	movs	r3, #1
 80031a6:	f000 f8ec 	bl	8003382 <lis2mdl_write_reg>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
 80031b4:	e0c9      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f103 0020 	add.w	r0, r3, #32
 80031bc:	f107 021f 	add.w	r2, r7, #31
 80031c0:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80031c4:	2301      	movs	r3, #1
 80031c6:	f000 f8dc 	bl	8003382 <lis2mdl_write_reg>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	e0b9      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f103 0020 	add.w	r0, r3, #32
 80031dc:	f107 020b 	add.w	r2, r7, #11
 80031e0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80031e4:	2301      	movs	r3, #1
 80031e6:	f000 f8cc 	bl	8003382 <lis2mdl_write_reg>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
 80031f4:	e0a9      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f103 0020 	add.w	r0, r3, #32
 80031fc:	f107 021e 	add.w	r2, r7, #30
 8003200:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003204:	2301      	movs	r3, #1
 8003206:	f000 f8bc 	bl	8003382 <lis2mdl_write_reg>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	e099      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f103 0020 	add.w	r0, r3, #32
 800321c:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003220:	2301      	movs	r3, #1
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	f000 f8ad 	bl	8003382 <lis2mdl_write_reg>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e08a      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f103 0020 	add.w	r0, r3, #32
 800323a:	f107 021d 	add.w	r2, r7, #29
 800323e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003242:	2301      	movs	r3, #1
 8003244:	f000 f89d 	bl	8003382 <lis2mdl_write_reg>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	e07a      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f103 0020 	add.w	r0, r3, #32
 800325a:	f107 0220 	add.w	r2, r7, #32
 800325e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003262:	2301      	movs	r3, #1
 8003264:	f000 f88d 	bl	8003382 <lis2mdl_write_reg>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	e06a      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f103 0020 	add.w	r0, r3, #32
 800327a:	f107 021c 	add.w	r2, r7, #28
 800327e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003282:	2301      	movs	r3, #1
 8003284:	f000 f865 	bl	8003352 <lis2mdl_read_reg>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e05a      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003294:	7f3b      	ldrb	r3, [r7, #28]
 8003296:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800329a:	429a      	cmp	r2, r3
 800329c:	d102      	bne.n	80032a4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800329e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a2:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f103 0020 	add.w	r0, r3, #32
 80032aa:	f107 021c 	add.w	r2, r7, #28
 80032ae:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80032b2:	2301      	movs	r3, #1
 80032b4:	f000 f865 	bl	8003382 <lis2mdl_write_reg>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	e042      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f103 0020 	add.w	r0, r3, #32
 80032ca:	f107 0214 	add.w	r2, r7, #20
 80032ce:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80032d2:	2306      	movs	r3, #6
 80032d4:	f000 f83d 	bl	8003352 <lis2mdl_read_reg>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	e032      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f103 0020 	add.w	r0, r3, #32
 80032ea:	f107 021b 	add.w	r2, r7, #27
 80032ee:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80032f2:	2301      	movs	r3, #1
 80032f4:	f000 f82d 	bl	8003352 <lis2mdl_read_reg>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	e022      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003304:	7efa      	ldrb	r2, [r7, #27]
 8003306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800330a:	4013      	ands	r3, r2
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003312:	429a      	cmp	r2, r3
 8003314:	d1e6      	bne.n	80032e4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f103 0020 	add.w	r0, r3, #32
 800331c:	f107 021b 	add.w	r2, r7, #27
 8003320:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003324:	2301      	movs	r3, #1
 8003326:	f000 f814 	bl	8003352 <lis2mdl_read_reg>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	e009      	b.n	800334a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003336:	7efa      	ldrb	r2, [r7, #27]
 8003338:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800333c:	4013      	ands	r3, r2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003344:	429a      	cmp	r2, r3
 8003346:	d1e6      	bne.n	8003316 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3730      	adds	r7, #48	; 0x30
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003352:	b590      	push	{r4, r7, lr}
 8003354:	b087      	sub	sp, #28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	461a      	mov	r2, r3
 800335e:	460b      	mov	r3, r1
 8003360:	72fb      	strb	r3, [r7, #11]
 8003362:	4613      	mov	r3, r2
 8003364:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685c      	ldr	r4, [r3, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68d8      	ldr	r0, [r3, #12]
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	7af9      	ldrb	r1, [r7, #11]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	47a0      	blx	r4
 8003376:	6178      	str	r0, [r7, #20]

  return ret;
 8003378:	697b      	ldr	r3, [r7, #20]
}
 800337a:	4618      	mov	r0, r3
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}

08003382 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003382:	b590      	push	{r4, r7, lr}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	461a      	mov	r2, r3
 800338e:	460b      	mov	r3, r1
 8003390:	72fb      	strb	r3, [r7, #11]
 8003392:	4613      	mov	r3, r2
 8003394:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681c      	ldr	r4, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68d8      	ldr	r0, [r3, #12]
 800339e:	893b      	ldrh	r3, [r7, #8]
 80033a0:	7af9      	ldrb	r1, [r7, #11]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	47a0      	blx	r4
 80033a6:	6178      	str	r0, [r7, #20]

  return ret;
 80033a8:	697b      	ldr	r3, [r7, #20]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd90      	pop	{r4, r7, pc}

080033b2 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80033be:	f107 0208 	add.w	r2, r7, #8
 80033c2:	2301      	movs	r3, #1
 80033c4:	2160      	movs	r1, #96	; 0x60
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ffc3 	bl	8003352 <lis2mdl_read_reg>
 80033cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10f      	bne.n	80033f4 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	7a3b      	ldrb	r3, [r7, #8]
 80033de:	f362 0301 	bfi	r3, r2, #0, #2
 80033e2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80033e4:	f107 0208 	add.w	r2, r7, #8
 80033e8:	2301      	movs	r3, #1
 80033ea:	2160      	movs	r1, #96	; 0x60
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ffc8 	bl	8003382 <lis2mdl_write_reg>
 80033f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033f4:	68fb      	ldr	r3, [r7, #12]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800340a:	f107 0208 	add.w	r2, r7, #8
 800340e:	2301      	movs	r3, #1
 8003410:	2160      	movs	r1, #96	; 0x60
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff9d 	bl	8003352 <lis2mdl_read_reg>
 8003418:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10f      	bne.n	8003440 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	b2da      	uxtb	r2, r3
 8003428:	7a3b      	ldrb	r3, [r7, #8]
 800342a:	f362 0383 	bfi	r3, r2, #2, #2
 800342e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003430:	f107 0208 	add.w	r2, r7, #8
 8003434:	2301      	movs	r3, #1
 8003436:	2160      	movs	r1, #96	; 0x60
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffa2 	bl	8003382 <lis2mdl_write_reg>
 800343e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003440:	68fb      	ldr	r3, [r7, #12]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003456:	f107 0208 	add.w	r2, r7, #8
 800345a:	2301      	movs	r3, #1
 800345c:	2160      	movs	r1, #96	; 0x60
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ff77 	bl	8003352 <lis2mdl_read_reg>
 8003464:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003466:	7a3b      	ldrb	r3, [r7, #8]
 8003468:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b03      	cmp	r3, #3
 8003470:	d81a      	bhi.n	80034a8 <lis2mdl_data_rate_get+0x5c>
 8003472:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <lis2mdl_data_rate_get+0x2c>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	08003489 	.word	0x08003489
 800347c:	08003491 	.word	0x08003491
 8003480:	08003499 	.word	0x08003499
 8003484:	080034a1 	.word	0x080034a1
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
      break;
 800348e:	e00f      	b.n	80034b0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
      break;
 8003496:	e00b      	b.n	80034b0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2202      	movs	r2, #2
 800349c:	701a      	strb	r2, [r3, #0]
      break;
 800349e:	e007      	b.n	80034b0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2203      	movs	r2, #3
 80034a4:	701a      	strb	r2, [r3, #0]
      break;
 80034a6:	e003      	b.n	80034b0 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
      break;
 80034ae:	bf00      	nop
  }

  return ret;
 80034b0:	68fb      	ldr	r3, [r7, #12]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop

080034bc <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80034c8:	f107 0208 	add.w	r2, r7, #8
 80034cc:	2301      	movs	r3, #1
 80034ce:	2162      	movs	r1, #98	; 0x62
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff3e 	bl	8003352 <lis2mdl_read_reg>
 80034d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	7a3b      	ldrb	r3, [r7, #8]
 80034e8:	f362 1304 	bfi	r3, r2, #4, #1
 80034ec:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	2301      	movs	r3, #1
 80034f4:	2162      	movs	r1, #98	; 0x62
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff43 	bl	8003382 <lis2mdl_write_reg>
 80034fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003512:	f107 020c 	add.w	r2, r7, #12
 8003516:	2306      	movs	r3, #6
 8003518:	2168      	movs	r1, #104	; 0x68
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff19 	bl	8003352 <lis2mdl_read_reg>
 8003520:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003522:	7b7b      	ldrb	r3, [r7, #13]
 8003524:	b21a      	sxth	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003530:	b29b      	uxth	r3, r3
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	b29a      	uxth	r2, r3
 8003536:	7b3b      	ldrb	r3, [r7, #12]
 8003538:	b29b      	uxth	r3, r3
 800353a:	4413      	add	r3, r2
 800353c:	b29b      	uxth	r3, r3
 800353e:	b21a      	sxth	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	3302      	adds	r3, #2
 800354a:	b212      	sxth	r2, r2
 800354c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	3302      	adds	r3, #2
 8003552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003556:	b29b      	uxth	r3, r3
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	b29a      	uxth	r2, r3
 800355c:	7bbb      	ldrb	r3, [r7, #14]
 800355e:	b29b      	uxth	r3, r3
 8003560:	4413      	add	r3, r2
 8003562:	b29a      	uxth	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	3302      	adds	r3, #2
 8003568:	b212      	sxth	r2, r2
 800356a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800356c:	7c7a      	ldrb	r2, [r7, #17]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	b212      	sxth	r2, r2
 8003574:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	3304      	adds	r3, #4
 800357a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800357e:	b29b      	uxth	r3, r3
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	b29a      	uxth	r2, r3
 8003584:	7c3b      	ldrb	r3, [r7, #16]
 8003586:	b29b      	uxth	r3, r3
 8003588:	4413      	add	r3, r2
 800358a:	b29a      	uxth	r2, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	3304      	adds	r3, #4
 8003590:	b212      	sxth	r2, r2
 8003592:	801a      	strh	r2, [r3, #0]

  return ret;
 8003594:	697b      	ldr	r3, [r7, #20]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80035a8:	2301      	movs	r3, #1
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	214f      	movs	r1, #79	; 0x4f
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fecf 	bl	8003352 <lis2mdl_read_reg>
 80035b4:	60f8      	str	r0, [r7, #12]

  return ret;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80035cc:	f107 0208 	add.w	r2, r7, #8
 80035d0:	2301      	movs	r3, #1
 80035d2:	2162      	movs	r1, #98	; 0x62
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff febc 	bl	8003352 <lis2mdl_read_reg>
 80035da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	7a3b      	ldrb	r3, [r7, #8]
 80035ec:	f362 0341 	bfi	r3, r2, #1, #1
 80035f0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80035f2:	f107 0208 	add.w	r2, r7, #8
 80035f6:	2301      	movs	r3, #1
 80035f8:	2162      	movs	r1, #98	; 0x62
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fec1 	bl	8003382 <lis2mdl_write_reg>
 8003600:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003618:	f107 0208 	add.w	r2, r7, #8
 800361c:	2301      	movs	r3, #1
 800361e:	2162      	movs	r1, #98	; 0x62
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff fe96 	bl	8003352 <lis2mdl_read_reg>
 8003626:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	b2da      	uxtb	r2, r3
 8003636:	7a3b      	ldrb	r3, [r7, #8]
 8003638:	f362 1345 	bfi	r3, r2, #5, #1
 800363c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800363e:	f107 0208 	add.w	r2, r7, #8
 8003642:	2301      	movs	r3, #1
 8003644:	2162      	movs	r1, #98	; 0x62
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fe9b 	bl	8003382 <lis2mdl_write_reg>
 800364c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d103      	bne.n	8003674 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800366c:	f04f 33ff 	mov.w	r3, #4294967295
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e051      	b.n	8003718 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	7b1a      	ldrb	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <LSM6DSO_RegisterBusIO+0xcc>)
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <LSM6DSO_RegisterBusIO+0xd0>)
 80036b6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e020      	b.n	8003718 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4798      	blx	r3
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e016      	b.n	8003718 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d112      	bne.n	8003718 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10d      	bne.n	8003718 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80036fc:	230c      	movs	r3, #12
 80036fe:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003700:	7afb      	ldrb	r3, [r7, #11]
 8003702:	461a      	mov	r2, r3
 8003704:	2112      	movs	r1, #18
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff5d 	bl	80045c6 <LSM6DSO_Write_Reg>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	08004a69 	.word	0x08004a69
 8003728:	08004a9f 	.word	0x08004a9f

0800372c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d00b      	beq.n	8003754 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3320      	adds	r3, #32
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	4618      	mov	r0, r3
 8003744:	f001 fe8a 	bl	800545c <lsm6dso_i3c_disable_set>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e060      	b.n	8003816 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3320      	adds	r3, #32
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fe58 	bl	8005410 <lsm6dso_auto_increment_set>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	e054      	b.n	8003816 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3320      	adds	r3, #32
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fd62 	bl	800523c <lsm6dso_block_data_update_set>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	e048      	b.n	8003816 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3320      	adds	r3, #32
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 feae 	bl	80054ec <lsm6dso_fifo_mode_set>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	e03c      	b.n	8003816 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2204      	movs	r2, #4
 80037a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3320      	adds	r3, #32
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fa20 	bl	8004bf0 <lsm6dso_xl_data_rate_set>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e02c      	b.n	8003816 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3320      	adds	r3, #32
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f9b6 	bl	8004b34 <lsm6dso_xl_full_scale_set>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e020      	b.n	8003816 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3320      	adds	r3, #32
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fbce 	bl	8004f84 <lsm6dso_gy_data_rate_set>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e010      	b.n	8003816 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3320      	adds	r3, #32
 80037f8:	2106      	movs	r1, #6
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fb5a 	bl	8004eb4 <lsm6dso_gy_full_scale_set>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	e004      	b.n	8003816 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f888 	bl	800393c <LSM6DSO_ACC_Disable>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e015      	b.n	8003864 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fc2e 	bl	800409a <LSM6DSO_GYRO_Disable>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295
 8003848:	e00c      	b.n	8003864 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3320      	adds	r3, #32
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fdb6 	bl	80053ee <lsm6dso_device_id_get>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	e000      	b.n	8003890 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80038c0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <LSM6DSO_GetCapabilities+0x58>)
 80038d2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4a06      	ldr	r2, [pc, #24]	; (80038f0 <LSM6DSO_GetCapabilities+0x58>)
 80038d8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	45d02000 	.word	0x45d02000

080038f4 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e014      	b.n	8003934 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f103 0220 	add.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f001 f969 	bl	8004bf0 <lsm6dso_xl_data_rate_set>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	e004      	b.n	8003934 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e01f      	b.n	8003992 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 0220 	add.w	r2, r3, #32
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3333      	adds	r3, #51	; 0x33
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f001 fa40 	bl	8004de4 <lsm6dso_xl_data_rate_get>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	e010      	b.n	8003992 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3320      	adds	r3, #32
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f001 f93a 	bl	8004bf0 <lsm6dso_xl_data_rate_set>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e004      	b.n	8003992 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3320      	adds	r3, #32
 80039ae:	f107 020b 	add.w	r2, r7, #11
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f8e3 	bl	8004b80 <lsm6dso_xl_full_scale_get>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	e023      	b.n	8003a0e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d81b      	bhi.n	8003a04 <LSM6DSO_ACC_GetSensitivity+0x68>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	080039ed 	.word	0x080039ed
 80039e0:	080039f5 	.word	0x080039f5
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80039e8:	601a      	str	r2, [r3, #0]
      break;
 80039ea:	e00f      	b.n	8003a0c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <LSM6DSO_ACC_GetSensitivity+0x80>)
 80039f0:	601a      	str	r2, [r3, #0]
      break;
 80039f2:	e00b      	b.n	8003a0c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80039f8:	601a      	str	r2, [r3, #0]
      break;
 80039fa:	e007      	b.n	8003a0c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003a00:	601a      	str	r2, [r3, #0]
      break;
 8003a02:	e003      	b.n	8003a0c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	60fb      	str	r3, [r7, #12]
      break;
 8003a0a:	bf00      	nop
  }

  return ret;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	3d79db23 	.word	0x3d79db23
 8003a1c:	3df9db23 	.word	0x3df9db23
 8003a20:	3e79db23 	.word	0x3e79db23
 8003a24:	3ef9db23 	.word	0x3ef9db23

08003a28 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3320      	adds	r3, #32
 8003a3a:	f107 020b 	add.w	r2, r7, #11
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f9cf 	bl	8004de4 <lsm6dso_xl_data_rate_get>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	e054      	b.n	8003afc <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	2b0b      	cmp	r3, #11
 8003a56:	d84c      	bhi.n	8003af2 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a91 	.word	0x08003a91
 8003a64:	08003aa3 	.word	0x08003aa3
 8003a68:	08003aab 	.word	0x08003aab
 8003a6c:	08003ab3 	.word	0x08003ab3
 8003a70:	08003abb 	.word	0x08003abb
 8003a74:	08003ac3 	.word	0x08003ac3
 8003a78:	08003acb 	.word	0x08003acb
 8003a7c:	08003ad3 	.word	0x08003ad3
 8003a80:	08003adb 	.word	0x08003adb
 8003a84:	08003ae3 	.word	0x08003ae3
 8003a88:	08003aeb 	.word	0x08003aeb
 8003a8c:	08003a9b 	.word	0x08003a9b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
      break;
 8003a98:	e02f      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003a9e:	601a      	str	r2, [r3, #0]
      break;
 8003aa0:	e02b      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003aa6:	601a      	str	r2, [r3, #0]
      break;
 8003aa8:	e027      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003aae:	601a      	str	r2, [r3, #0]
      break;
 8003ab0:	e023      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003ab6:	601a      	str	r2, [r3, #0]
      break;
 8003ab8:	e01f      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003abe:	601a      	str	r2, [r3, #0]
      break;
 8003ac0:	e01b      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003ac6:	601a      	str	r2, [r3, #0]
      break;
 8003ac8:	e017      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003ace:	601a      	str	r2, [r3, #0]
      break;
 8003ad0:	e013      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003ad6:	601a      	str	r2, [r3, #0]
      break;
 8003ad8:	e00f      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003ade:	601a      	str	r2, [r3, #0]
      break;
 8003ae0:	e00b      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003ae6:	601a      	str	r2, [r3, #0]
      break;
 8003ae8:	e007      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	4a0f      	ldr	r2, [pc, #60]	; (8003b2c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003aee:	601a      	str	r2, [r3, #0]
      break;
 8003af0:	e003      	b.n	8003afa <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295
 8003af6:	60fb      	str	r3, [r7, #12]
      break;
 8003af8:	bf00      	nop
  }

  return ret;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	3fcccccd 	.word	0x3fcccccd
 8003b08:	41480000 	.word	0x41480000
 8003b0c:	41d00000 	.word	0x41d00000
 8003b10:	42500000 	.word	0x42500000
 8003b14:	42d00000 	.word	0x42d00000
 8003b18:	43500000 	.word	0x43500000
 8003b1c:	43d08000 	.word	0x43d08000
 8003b20:	44504000 	.word	0x44504000
 8003b24:	44d06000 	.word	0x44d06000
 8003b28:	45505000 	.word	0x45505000
 8003b2c:	45d05800 	.word	0x45d05800

08003b30 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	ed97 0a00 	vldr	s0, [r7]
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f806 	bl	8003b54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b60:	460b      	mov	r3, r1
 8003b62:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	f000 80ea 	beq.w	8003d48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	f300 8163 	bgt.w	8003e40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d074      	beq.n	8003c6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003b82:	e15d      	b.n	8003e40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f103 0020 	add.w	r0, r3, #32
 8003b8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003b8e:	2301      	movs	r3, #1
 8003b90:	2114      	movs	r1, #20
 8003b92:	f000 ff9f 	bl	8004ad4 <lsm6dso_read_reg>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	e16c      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003ba2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ba6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d025      	beq.n	8003bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10b      	bne.n	8003bd2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3320      	adds	r3, #32
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f001 f815 	bl	8004bf0 <lsm6dso_xl_data_rate_set>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd0:	e154      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003bd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bd6:	f36f 13c7 	bfc	r3, #7, #1
 8003bda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f103 0020 	add.w	r0, r3, #32
 8003be4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003be8:	2301      	movs	r3, #1
 8003bea:	2114      	movs	r1, #20
 8003bec:	f000 ff8a 	bl	8004b04 <lsm6dso_write_reg>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	e13f      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f103 0020 	add.w	r0, r3, #32
 8003c02:	f107 0220 	add.w	r2, r7, #32
 8003c06:	2301      	movs	r3, #1
 8003c08:	2115      	movs	r1, #21
 8003c0a:	f000 ff63 	bl	8004ad4 <lsm6dso_read_reg>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	e130      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d014      	beq.n	8003c52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003c28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c2c:	f36f 1304 	bfc	r3, #4, #1
 8003c30:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f103 0020 	add.w	r0, r3, #32
 8003c3a:	f107 0220 	add.w	r2, r7, #32
 8003c3e:	2301      	movs	r3, #1
 8003c40:	2115      	movs	r1, #21
 8003c42:	f000 ff5f 	bl	8004b04 <lsm6dso_write_reg>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	e114      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003c52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c56:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c62:	d400      	bmi.n	8003c66 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003c64:	e0f0      	b.n	8003e48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003c66:	4b87      	ldr	r3, [pc, #540]	; (8003e84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c6a:	e0ed      	b.n	8003e48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f103 0020 	add.w	r0, r3, #32
 8003c72:	f107 021c 	add.w	r2, r7, #28
 8003c76:	2301      	movs	r3, #1
 8003c78:	2114      	movs	r1, #20
 8003c7a:	f000 ff2b 	bl	8004ad4 <lsm6dso_read_reg>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	e0f8      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003c8a:	7f3b      	ldrb	r3, [r7, #28]
 8003c8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10b      	bne.n	8003cb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3320      	adds	r3, #32
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 ffa2 	bl	8004bf0 <lsm6dso_xl_data_rate_set>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e0e1      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003cb8:	7f3b      	ldrb	r3, [r7, #28]
 8003cba:	f36f 13c7 	bfc	r3, #7, #1
 8003cbe:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f103 0020 	add.w	r0, r3, #32
 8003cc6:	f107 021c 	add.w	r2, r7, #28
 8003cca:	2301      	movs	r3, #1
 8003ccc:	2114      	movs	r1, #20
 8003cce:	f000 ff19 	bl	8004b04 <lsm6dso_write_reg>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e0ce      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f103 0020 	add.w	r0, r3, #32
 8003ce4:	f107 0218 	add.w	r2, r7, #24
 8003ce8:	2301      	movs	r3, #1
 8003cea:	2115      	movs	r1, #21
 8003cec:	f000 fef2 	bl	8004ad4 <lsm6dso_read_reg>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	e0bf      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003cfc:	7e3b      	ldrb	r3, [r7, #24]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d112      	bne.n	8003d2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003d08:	7e3b      	ldrb	r3, [r7, #24]
 8003d0a:	f043 0310 	orr.w	r3, r3, #16
 8003d0e:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f103 0020 	add.w	r0, r3, #32
 8003d16:	f107 0218 	add.w	r2, r7, #24
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2115      	movs	r1, #21
 8003d1e:	f000 fef1 	bl	8004b04 <lsm6dso_write_reg>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003d28:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2c:	e0a6      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003d2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d32:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003e88 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3e:	dc00      	bgt.n	8003d42 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003d40:	e082      	b.n	8003e48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003d42:	4b52      	ldr	r3, [pc, #328]	; (8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d46:	e07f      	b.n	8003e48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f103 0020 	add.w	r0, r3, #32
 8003d4e:	f107 0210 	add.w	r2, r7, #16
 8003d52:	2301      	movs	r3, #1
 8003d54:	2115      	movs	r1, #21
 8003d56:	f000 febd 	bl	8004ad4 <lsm6dso_read_reg>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	e08a      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003d66:	7c3b      	ldrb	r3, [r7, #16]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d012      	beq.n	8003d98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003d72:	7c3b      	ldrb	r3, [r7, #16]
 8003d74:	f36f 1304 	bfc	r3, #4, #1
 8003d78:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f103 0020 	add.w	r0, r3, #32
 8003d80:	f107 0210 	add.w	r2, r7, #16
 8003d84:	2301      	movs	r3, #1
 8003d86:	2115      	movs	r1, #21
 8003d88:	f000 febc 	bl	8004b04 <lsm6dso_write_reg>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	e071      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d108      	bne.n	8003db4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f979 	bl	800409a <LSM6DSO_GYRO_Disable>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
 8003db2:	e063      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f103 0020 	add.w	r0, r3, #32
 8003dba:	f107 0214 	add.w	r2, r7, #20
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	2114      	movs	r1, #20
 8003dc2:	f000 fe87 	bl	8004ad4 <lsm6dso_read_reg>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd0:	e054      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003dd2:	7d3b      	ldrb	r3, [r7, #20]
 8003dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d123      	bne.n	8003e26 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10b      	bne.n	8003e00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3320      	adds	r3, #32
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fefe 	bl	8004bf0 <lsm6dso_xl_data_rate_set>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	e03d      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003e00:	7d3b      	ldrb	r3, [r7, #20]
 8003e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e06:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f103 0020 	add.w	r0, r3, #32
 8003e0e:	f107 0214 	add.w	r2, r7, #20
 8003e12:	2301      	movs	r3, #1
 8003e14:	2114      	movs	r1, #20
 8003e16:	f000 fe75 	bl	8004b04 <lsm6dso_write_reg>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	e02a      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003e26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e2a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003e88 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e36:	dc00      	bgt.n	8003e3a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003e38:	e006      	b.n	8003e48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3e:	e003      	b.n	8003e48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003e46:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d102      	bne.n	8003e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	e012      	b.n	8003e7c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003e60:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fbc9 	bl	80045fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e6c:	e005      	b.n	8003e7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003e6e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fc5a 	bl	800472c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003e78:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3730      	adds	r7, #48	; 0x30
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	41480000 	.word	0x41480000
 8003e88:	43500000 	.word	0x43500000
 8003e8c:	43500000 	.word	0x43500000

08003e90 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3320      	adds	r3, #32
 8003ea2:	f107 020b 	add.w	r2, r7, #11
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fe69 	bl	8004b80 <lsm6dso_xl_full_scale_get>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	e023      	b.n	8003f02 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003eba:	7afb      	ldrb	r3, [r7, #11]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d81b      	bhi.n	8003ef8 <LSM6DSO_ACC_GetFullScale+0x68>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <LSM6DSO_ACC_GetFullScale+0x38>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ee9 	.word	0x08003ee9
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2202      	movs	r2, #2
 8003edc:	601a      	str	r2, [r3, #0]
      break;
 8003ede:	e00f      	b.n	8003f00 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	601a      	str	r2, [r3, #0]
      break;
 8003ee6:	e00b      	b.n	8003f00 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2208      	movs	r2, #8
 8003eec:	601a      	str	r2, [r3, #0]
      break;
 8003eee:	e007      	b.n	8003f00 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	601a      	str	r2, [r3, #0]
      break;
 8003ef6:	e003      	b.n	8003f00 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	60fb      	str	r3, [r7, #12]
      break;
 8003efe:	bf00      	nop
  }

  return ret;
 8003f00:	68fb      	ldr	r3, [r7, #12]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop

08003f0c <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	dd0b      	ble.n	8003f34 <LSM6DSO_ACC_SetFullScale+0x28>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	dd06      	ble.n	8003f30 <LSM6DSO_ACC_SetFullScale+0x24>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	dc01      	bgt.n	8003f2c <LSM6DSO_ACC_SetFullScale+0x20>
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e004      	b.n	8003f36 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e002      	b.n	8003f36 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e000      	b.n	8003f36 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f34:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003f36:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3320      	adds	r3, #32
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fdf7 	bl	8004b34 <lsm6dso_xl_full_scale_set>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	e000      	b.n	8003f54 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3320      	adds	r3, #32
 8003f6a:	f107 0208 	add.w	r2, r7, #8
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f9d4 	bl	800531e <lsm6dso_acceleration_raw_get>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f80:	e00c      	b.n	8003f9c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003f82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003f8a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003f92:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3320      	adds	r3, #32
 8003fb8:	f107 0210 	add.w	r2, r7, #16
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f9ad 	bl	800531e <lsm6dso_acceleration_raw_get>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	e03c      	b.n	800404a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fce0 	bl	800399c <LSM6DSO_ACC_GetSensitivity>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8003fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe6:	e030      	b.n	800404a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003fe8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004000:	ee17 2a90 	vmov	r2, s15
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004008:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004014:	edd7 7a03 	vldr	s15, [r7, #12]
 8004018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004020:	ee17 2a90 	vmov	r2, s15
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004028:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004034:	edd7 7a03 	vldr	s15, [r7, #12]
 8004038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004040:	ee17 2a90 	vmov	r2, s15
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e014      	b.n	8004092 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f103 0220 	add.w	r2, r3, #32
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 ff84 	bl	8004f84 <lsm6dso_gy_data_rate_set>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	e004      	b.n	8004092 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e01f      	b.n	80040f0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f103 0220 	add.w	r2, r3, #32
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3334      	adds	r3, #52	; 0x34
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f001 f85b 	bl	8005178 <lsm6dso_gy_data_rate_get>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	e010      	b.n	80040f0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3320      	adds	r3, #32
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 ff55 	bl	8004f84 <lsm6dso_gy_data_rate_set>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	e004      	b.n	80040f0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3320      	adds	r3, #32
 800410a:	f107 020b 	add.w	r2, r7, #11
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fef5 	bl	8004f00 <lsm6dso_gy_full_scale_get>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	e02d      	b.n	800417e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	2b06      	cmp	r3, #6
 8004126:	d825      	bhi.n	8004174 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004155 	.word	0x08004155
 8004134:	0800414d 	.word	0x0800414d
 8004138:	0800415d 	.word	0x0800415d
 800413c:	08004175 	.word	0x08004175
 8004140:	08004165 	.word	0x08004165
 8004144:	08004175 	.word	0x08004175
 8004148:	0800416d 	.word	0x0800416d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004150:	601a      	str	r2, [r3, #0]
      break;
 8004152:	e013      	b.n	800417c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4a0d      	ldr	r2, [pc, #52]	; (800418c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004158:	601a      	str	r2, [r3, #0]
      break;
 800415a:	e00f      	b.n	800417c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004160:	601a      	str	r2, [r3, #0]
      break;
 8004162:	e00b      	b.n	800417c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4a0b      	ldr	r2, [pc, #44]	; (8004194 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004168:	601a      	str	r2, [r3, #0]
      break;
 800416a:	e007      	b.n	800417c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004170:	601a      	str	r2, [r3, #0]
      break;
 8004172:	e003      	b.n	800417c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	60fb      	str	r3, [r7, #12]
      break;
 800417a:	bf00      	nop
  }

  return ret;
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	408c0000 	.word	0x408c0000
 800418c:	410c0000 	.word	0x410c0000
 8004190:	418c0000 	.word	0x418c0000
 8004194:	420c0000 	.word	0x420c0000
 8004198:	428c0000 	.word	0x428c0000

0800419c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3320      	adds	r3, #32
 80041ae:	f107 020b 	add.w	r2, r7, #11
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 ffdf 	bl	8005178 <lsm6dso_gy_data_rate_get>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295
 80041c4:	e04e      	b.n	8004264 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80041c6:	7afb      	ldrb	r3, [r7, #11]
 80041c8:	2b0a      	cmp	r3, #10
 80041ca:	d846      	bhi.n	800425a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	08004201 	.word	0x08004201
 80041d8:	0800420b 	.word	0x0800420b
 80041dc:	08004213 	.word	0x08004213
 80041e0:	0800421b 	.word	0x0800421b
 80041e4:	08004223 	.word	0x08004223
 80041e8:	0800422b 	.word	0x0800422b
 80041ec:	08004233 	.word	0x08004233
 80041f0:	0800423b 	.word	0x0800423b
 80041f4:	08004243 	.word	0x08004243
 80041f8:	0800424b 	.word	0x0800424b
 80041fc:	08004253 	.word	0x08004253
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
      break;
 8004208:	e02b      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800420e:	601a      	str	r2, [r3, #0]
      break;
 8004210:	e027      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4a16      	ldr	r2, [pc, #88]	; (8004270 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004216:	601a      	str	r2, [r3, #0]
      break;
 8004218:	e023      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800421e:	601a      	str	r2, [r3, #0]
      break;
 8004220:	e01f      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004226:	601a      	str	r2, [r3, #0]
      break;
 8004228:	e01b      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4a13      	ldr	r2, [pc, #76]	; (800427c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800422e:	601a      	str	r2, [r3, #0]
      break;
 8004230:	e017      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004236:	601a      	str	r2, [r3, #0]
      break;
 8004238:	e013      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	4a11      	ldr	r2, [pc, #68]	; (8004284 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800423e:	601a      	str	r2, [r3, #0]
      break;
 8004240:	e00f      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	4a10      	ldr	r2, [pc, #64]	; (8004288 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004246:	601a      	str	r2, [r3, #0]
      break;
 8004248:	e00b      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800424e:	601a      	str	r2, [r3, #0]
      break;
 8004250:	e007      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004256:	601a      	str	r2, [r3, #0]
      break;
 8004258:	e003      	b.n	8004262 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
 800425e:	60fb      	str	r3, [r7, #12]
      break;
 8004260:	bf00      	nop
  }

  return ret;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	41480000 	.word	0x41480000
 8004270:	41d00000 	.word	0x41d00000
 8004274:	42500000 	.word	0x42500000
 8004278:	42d00000 	.word	0x42d00000
 800427c:	43500000 	.word	0x43500000
 8004280:	43d08000 	.word	0x43d08000
 8004284:	44504000 	.word	0x44504000
 8004288:	44d06000 	.word	0x44d06000
 800428c:	45505000 	.word	0x45505000
 8004290:	45d05800 	.word	0x45d05800

08004294 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80042a0:	2100      	movs	r1, #0
 80042a2:	ed97 0a00 	vldr	s0, [r7]
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f806 	bl	80042b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80042ac:	4603      	mov	r3, r0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80042c4:	460b      	mov	r3, r1
 80042c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80042da:	e05c      	b.n	8004396 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f103 0020 	add.w	r0, r3, #32
 80042e2:	f107 0214 	add.w	r2, r7, #20
 80042e6:	2301      	movs	r3, #1
 80042e8:	2116      	movs	r1, #22
 80042ea:	f000 fbf3 	bl	8004ad4 <lsm6dso_read_reg>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295
 80042f8:	e06c      	b.n	80043d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80042fa:	7d3b      	ldrb	r3, [r7, #20]
 80042fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04b      	beq.n	800439e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004306:	7d3b      	ldrb	r3, [r7, #20]
 8004308:	f36f 13c7 	bfc	r3, #7, #1
 800430c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f103 0020 	add.w	r0, r3, #32
 8004314:	f107 0214 	add.w	r2, r7, #20
 8004318:	2301      	movs	r3, #1
 800431a:	2116      	movs	r1, #22
 800431c:	f000 fbf2 	bl	8004b04 <lsm6dso_write_reg>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d03b      	beq.n	800439e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	e053      	b.n	80043d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f103 0020 	add.w	r0, r3, #32
 8004332:	f107 0210 	add.w	r2, r7, #16
 8004336:	2301      	movs	r3, #1
 8004338:	2116      	movs	r1, #22
 800433a:	f000 fbcb 	bl	8004ad4 <lsm6dso_read_reg>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
 8004348:	e044      	b.n	80043d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800434a:	7c3b      	ldrb	r3, [r7, #16]
 800434c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d112      	bne.n	800437c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004356:	7c3b      	ldrb	r3, [r7, #16]
 8004358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f103 0020 	add.w	r0, r3, #32
 8004364:	f107 0210 	add.w	r2, r7, #16
 8004368:	2301      	movs	r3, #1
 800436a:	2116      	movs	r1, #22
 800436c:	f000 fbca 	bl	8004b04 <lsm6dso_write_reg>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	e02b      	b.n	80043d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800437c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004380:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80043dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	dc00      	bgt.n	8004390 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800438e:	e007      	b.n	80043a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e004      	b.n	80043a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	61fb      	str	r3, [r7, #28]
      break;
 800439c:	e000      	b.n	80043a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800439e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d102      	bne.n	80043ae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80043a8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ac:	e012      	b.n	80043d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d106      	bne.n	80043c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80043b8:	ed97 0a06 	vldr	s0, [r7, #24]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fa45 	bl	800484c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80043c2:	61f8      	str	r0, [r7, #28]
 80043c4:	e005      	b.n	80043d2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80043c6:	ed97 0a06 	vldr	s0, [r7, #24]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 faca 	bl	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80043d0:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80043d2:	69fb      	ldr	r3, [r7, #28]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	43500000 	.word	0x43500000
 80043e0:	43500000 	.word	0x43500000

080043e4 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3320      	adds	r3, #32
 80043f6:	f107 020b 	add.w	r2, r7, #11
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fd7f 	bl	8004f00 <lsm6dso_gy_full_scale_get>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	e030      	b.n	8004470 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	2b06      	cmp	r3, #6
 8004412:	d828      	bhi.n	8004466 <LSM6DSO_GYRO_GetFullScale+0x82>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004441 	.word	0x08004441
 8004420:	08004439 	.word	0x08004439
 8004424:	08004449 	.word	0x08004449
 8004428:	08004467 	.word	0x08004467
 800442c:	08004453 	.word	0x08004453
 8004430:	08004467 	.word	0x08004467
 8004434:	0800445d 	.word	0x0800445d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	227d      	movs	r2, #125	; 0x7d
 800443c:	601a      	str	r2, [r3, #0]
      break;
 800443e:	e016      	b.n	800446e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	22fa      	movs	r2, #250	; 0xfa
 8004444:	601a      	str	r2, [r3, #0]
      break;
 8004446:	e012      	b.n	800446e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800444e:	601a      	str	r2, [r3, #0]
      break;
 8004450:	e00d      	b.n	800446e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004458:	601a      	str	r2, [r3, #0]
      break;
 800445a:	e008      	b.n	800446e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004462:	601a      	str	r2, [r3, #0]
      break;
 8004464:	e003      	b.n	800446e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	60fb      	str	r3, [r7, #12]
      break;
 800446c:	bf00      	nop
  }

  return ret;
 800446e:	68fb      	ldr	r3, [r7, #12]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b7d      	cmp	r3, #125	; 0x7d
 8004486:	dd12      	ble.n	80044ae <LSM6DSO_GYRO_SetFullScale+0x36>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2bfa      	cmp	r3, #250	; 0xfa
 800448c:	dd0d      	ble.n	80044aa <LSM6DSO_GYRO_SetFullScale+0x32>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004494:	dd07      	ble.n	80044a6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800449c:	dc01      	bgt.n	80044a2 <LSM6DSO_GYRO_SetFullScale+0x2a>
 800449e:	2304      	movs	r3, #4
 80044a0:	e006      	b.n	80044b0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044a2:	2306      	movs	r3, #6
 80044a4:	e004      	b.n	80044b0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e002      	b.n	80044b0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044ae:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80044b0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3320      	adds	r3, #32
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fcfa 	bl	8004eb4 <lsm6dso_gy_full_scale_set>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80044c6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ca:	e000      	b.n	80044ce <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3320      	adds	r3, #32
 80044e4:	f107 0208 	add.w	r2, r7, #8
 80044e8:	4611      	mov	r1, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fecc 	bl	8005288 <lsm6dso_angular_rate_raw_get>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e00c      	b.n	8004516 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80044fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004504:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800450c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3320      	adds	r3, #32
 800452c:	f107 0210 	add.w	r2, r7, #16
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fea8 	bl	8005288 <lsm6dso_angular_rate_raw_get>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	e03c      	b.n	80045be <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff fdd4 	bl	80040f8 <LSM6DSO_GYRO_GetSensitivity>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	e030      	b.n	80045be <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800455c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004560:	ee07 3a90 	vmov	s15, r3
 8004564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004568:	edd7 7a03 	vldr	s15, [r7, #12]
 800456c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004574:	ee17 2a90 	vmov	r2, s15
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800457c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004588:	edd7 7a03 	vldr	s15, [r7, #12]
 800458c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004594:	ee17 2a90 	vmov	r2, s15
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800459c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80045ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045b4:	ee17 2a90 	vmov	r2, s15
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	460b      	mov	r3, r1
 80045d0:	70fb      	strb	r3, [r7, #3]
 80045d2:	4613      	mov	r3, r2
 80045d4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f103 0020 	add.w	r0, r3, #32
 80045dc:	1cba      	adds	r2, r7, #2
 80045de:	78f9      	ldrb	r1, [r7, #3]
 80045e0:	2301      	movs	r3, #1
 80045e2:	f000 fa8f 	bl	8004b04 <lsm6dso_write_reg>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	e000      	b.n	80045f4 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004608:	edd7 7a00 	vldr	s15, [r7]
 800460c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800470c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	d801      	bhi.n	800461e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800461a:	230b      	movs	r3, #11
 800461c:	e063      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800461e:	edd7 7a00 	vldr	s15, [r7]
 8004622:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d801      	bhi.n	8004634 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004630:	2301      	movs	r3, #1
 8004632:	e058      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004634:	edd7 7a00 	vldr	s15, [r7]
 8004638:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800463c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d801      	bhi.n	800464a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004646:	2302      	movs	r3, #2
 8004648:	e04d      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800464a:	edd7 7a00 	vldr	s15, [r7]
 800464e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004710 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	d801      	bhi.n	8004660 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 800465c:	2303      	movs	r3, #3
 800465e:	e042      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004660:	edd7 7a00 	vldr	s15, [r7]
 8004664:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004714 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004670:	d801      	bhi.n	8004676 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004672:	2304      	movs	r3, #4
 8004674:	e037      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004676:	edd7 7a00 	vldr	s15, [r7]
 800467a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004718 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 800467e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004686:	d801      	bhi.n	800468c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004688:	2305      	movs	r3, #5
 800468a:	e02c      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800468c:	edd7 7a00 	vldr	s15, [r7]
 8004690:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800471c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	d801      	bhi.n	80046a2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800469e:	2306      	movs	r3, #6
 80046a0:	e021      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046a2:	edd7 7a00 	vldr	s15, [r7]
 80046a6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004720 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80046aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	d801      	bhi.n	80046b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80046b4:	2307      	movs	r3, #7
 80046b6:	e016      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046b8:	edd7 7a00 	vldr	s15, [r7]
 80046bc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004724 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80046c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d801      	bhi.n	80046ce <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80046ca:	2308      	movs	r3, #8
 80046cc:	e00b      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046ce:	edd7 7a00 	vldr	s15, [r7]
 80046d2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004728 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80046d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046de:	d801      	bhi.n	80046e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80046e0:	2309      	movs	r3, #9
 80046e2:	e000      	b.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046e4:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80046e6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3320      	adds	r3, #32
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fa7d 	bl	8004bf0 <lsm6dso_xl_data_rate_set>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	e000      	b.n	8004704 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	3fcccccd 	.word	0x3fcccccd
 8004710:	42500000 	.word	0x42500000
 8004714:	42d00000 	.word	0x42d00000
 8004718:	43500000 	.word	0x43500000
 800471c:	43d08000 	.word	0x43d08000
 8004720:	44504000 	.word	0x44504000
 8004724:	44d06000 	.word	0x44d06000
 8004728:	45505000 	.word	0x45505000

0800472c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004738:	edd7 7a00 	vldr	s15, [r7]
 800473c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800482c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004748:	d801      	bhi.n	800474e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800474a:	230b      	movs	r3, #11
 800474c:	e063      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800474e:	edd7 7a00 	vldr	s15, [r7]
 8004752:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	d801      	bhi.n	8004764 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004760:	2301      	movs	r3, #1
 8004762:	e058      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004764:	edd7 7a00 	vldr	s15, [r7]
 8004768:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800476c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	d801      	bhi.n	800477a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004776:	2302      	movs	r3, #2
 8004778:	e04d      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800477a:	edd7 7a00 	vldr	s15, [r7]
 800477e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004830 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	d801      	bhi.n	8004790 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 800478c:	2303      	movs	r3, #3
 800478e:	e042      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004790:	edd7 7a00 	vldr	s15, [r7]
 8004794:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004834 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a0:	d801      	bhi.n	80047a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80047a2:	2304      	movs	r3, #4
 80047a4:	e037      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047a6:	edd7 7a00 	vldr	s15, [r7]
 80047aa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004838 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80047ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d801      	bhi.n	80047bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80047b8:	2305      	movs	r3, #5
 80047ba:	e02c      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047bc:	edd7 7a00 	vldr	s15, [r7]
 80047c0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800483c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d801      	bhi.n	80047d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80047ce:	2306      	movs	r3, #6
 80047d0:	e021      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047d2:	edd7 7a00 	vldr	s15, [r7]
 80047d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004840 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80047da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d801      	bhi.n	80047e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80047e4:	2307      	movs	r3, #7
 80047e6:	e016      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047e8:	edd7 7a00 	vldr	s15, [r7]
 80047ec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004844 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80047f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	d801      	bhi.n	80047fe <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80047fa:	2308      	movs	r3, #8
 80047fc:	e00b      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047fe:	edd7 7a00 	vldr	s15, [r7]
 8004802:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004848 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	d801      	bhi.n	8004814 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004810:	2309      	movs	r3, #9
 8004812:	e000      	b.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004814:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	3fcccccd 	.word	0x3fcccccd
 8004830:	42500000 	.word	0x42500000
 8004834:	42d00000 	.word	0x42d00000
 8004838:	43500000 	.word	0x43500000
 800483c:	43d08000 	.word	0x43d08000
 8004840:	44504000 	.word	0x44504000
 8004844:	44d06000 	.word	0x44d06000
 8004848:	45505000 	.word	0x45505000

0800484c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004858:	edd7 7a00 	vldr	s15, [r7]
 800485c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d801      	bhi.n	800486e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800486a:	2301      	movs	r3, #1
 800486c:	e058      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800486e:	edd7 7a00 	vldr	s15, [r7]
 8004872:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	d801      	bhi.n	8004884 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004880:	2302      	movs	r3, #2
 8004882:	e04d      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004884:	edd7 7a00 	vldr	s15, [r7]
 8004888:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004948 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800488c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004894:	d801      	bhi.n	800489a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004896:	2303      	movs	r3, #3
 8004898:	e042      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800489a:	edd7 7a00 	vldr	s15, [r7]
 800489e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80048a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	d801      	bhi.n	80048b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80048ac:	2304      	movs	r3, #4
 80048ae:	e037      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048b0:	edd7 7a00 	vldr	s15, [r7]
 80048b4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004950 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80048b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	d801      	bhi.n	80048c6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80048c2:	2305      	movs	r3, #5
 80048c4:	e02c      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048c6:	edd7 7a00 	vldr	s15, [r7]
 80048ca:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004954 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80048ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d6:	d801      	bhi.n	80048dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80048d8:	2306      	movs	r3, #6
 80048da:	e021      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048dc:	edd7 7a00 	vldr	s15, [r7]
 80048e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004958 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80048e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	d801      	bhi.n	80048f2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80048ee:	2307      	movs	r3, #7
 80048f0:	e016      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048f2:	edd7 7a00 	vldr	s15, [r7]
 80048f6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800495c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80048fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	d801      	bhi.n	8004908 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004904:	2308      	movs	r3, #8
 8004906:	e00b      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004908:	edd7 7a00 	vldr	s15, [r7]
 800490c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004960 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d801      	bhi.n	800491e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800491a:	2309      	movs	r3, #9
 800491c:	e000      	b.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800491e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004920:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3320      	adds	r3, #32
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fb2a 	bl	8004f84 <lsm6dso_gy_data_rate_set>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e000      	b.n	800493e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	42500000 	.word	0x42500000
 800494c:	42d00000 	.word	0x42d00000
 8004950:	43500000 	.word	0x43500000
 8004954:	43d08000 	.word	0x43d08000
 8004958:	44504000 	.word	0x44504000
 800495c:	44d06000 	.word	0x44d06000
 8004960:	45505000 	.word	0x45505000

08004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004970:	edd7 7a00 	vldr	s15, [r7]
 8004974:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800497c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004980:	d801      	bhi.n	8004986 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004982:	2301      	movs	r3, #1
 8004984:	e058      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004986:	edd7 7a00 	vldr	s15, [r7]
 800498a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800498e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d801      	bhi.n	800499c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004998:	2302      	movs	r3, #2
 800499a:	e04d      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800499c:	edd7 7a00 	vldr	s15, [r7]
 80049a0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a4c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80049a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ac:	d801      	bhi.n	80049b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80049ae:	2303      	movs	r3, #3
 80049b0:	e042      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049b2:	edd7 7a00 	vldr	s15, [r7]
 80049b6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a50 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80049ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c2:	d801      	bhi.n	80049c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80049c4:	2304      	movs	r3, #4
 80049c6:	e037      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049c8:	edd7 7a00 	vldr	s15, [r7]
 80049cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004a54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80049d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d8:	d801      	bhi.n	80049de <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80049da:	2305      	movs	r3, #5
 80049dc:	e02c      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049de:	edd7 7a00 	vldr	s15, [r7]
 80049e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a58 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80049e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d801      	bhi.n	80049f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80049f0:	2306      	movs	r3, #6
 80049f2:	e021      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049f4:	edd7 7a00 	vldr	s15, [r7]
 80049f8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004a5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80049fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a04:	d801      	bhi.n	8004a0a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004a06:	2307      	movs	r3, #7
 8004a08:	e016      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a0a:	edd7 7a00 	vldr	s15, [r7]
 8004a0e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1a:	d801      	bhi.n	8004a20 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	e00b      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a20:	edd7 7a00 	vldr	s15, [r7]
 8004a24:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a30:	d801      	bhi.n	8004a36 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004a32:	2309      	movs	r3, #9
 8004a34:	e000      	b.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a36:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	42500000 	.word	0x42500000
 8004a50:	42d00000 	.word	0x42d00000
 8004a54:	43500000 	.word	0x43500000
 8004a58:	43d08000 	.word	0x43d08000
 8004a5c:	44504000 	.word	0x44504000
 8004a60:	44d06000 	.word	0x44d06000
 8004a64:	45505000 	.word	0x45505000

08004a68 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	461a      	mov	r2, r3
 8004a74:	460b      	mov	r3, r1
 8004a76:	72fb      	strb	r3, [r7, #11]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	695c      	ldr	r4, [r3, #20]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	7b1b      	ldrb	r3, [r3, #12]
 8004a88:	b298      	uxth	r0, r3
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	b299      	uxth	r1, r3
 8004a8e:	893b      	ldrh	r3, [r7, #8]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	47a0      	blx	r4
 8004a94:	4603      	mov	r3, r0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd90      	pop	{r4, r7, pc}

08004a9e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a9e:	b590      	push	{r4, r7, lr}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	460b      	mov	r3, r1
 8004aac:	72fb      	strb	r3, [r7, #11]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	691c      	ldr	r4, [r3, #16]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	7b1b      	ldrb	r3, [r3, #12]
 8004abe:	b298      	uxth	r0, r3
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	b299      	uxth	r1, r3
 8004ac4:	893b      	ldrh	r3, [r7, #8]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	47a0      	blx	r4
 8004aca:	4603      	mov	r3, r0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd90      	pop	{r4, r7, pc}

08004ad4 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	72fb      	strb	r3, [r7, #11]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685c      	ldr	r4, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68d8      	ldr	r0, [r3, #12]
 8004af0:	893b      	ldrh	r3, [r7, #8]
 8004af2:	7af9      	ldrb	r1, [r7, #11]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	47a0      	blx	r4
 8004af8:	6178      	str	r0, [r7, #20]

  return ret;
 8004afa:	697b      	ldr	r3, [r7, #20]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}

08004b04 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	460b      	mov	r3, r1
 8004b12:	72fb      	strb	r3, [r7, #11]
 8004b14:	4613      	mov	r3, r2
 8004b16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681c      	ldr	r4, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68d8      	ldr	r0, [r3, #12]
 8004b20:	893b      	ldrh	r3, [r7, #8]
 8004b22:	7af9      	ldrb	r1, [r7, #11]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	47a0      	blx	r4
 8004b28:	6178      	str	r0, [r7, #20]

  return ret;
 8004b2a:	697b      	ldr	r3, [r7, #20]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd90      	pop	{r4, r7, pc}

08004b34 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b40:	f107 0208 	add.w	r2, r7, #8
 8004b44:	2301      	movs	r3, #1
 8004b46:	2110      	movs	r1, #16
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffc3 	bl	8004ad4 <lsm6dso_read_reg>
 8004b4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	7a3b      	ldrb	r3, [r7, #8]
 8004b60:	f362 0383 	bfi	r3, r2, #2, #2
 8004b64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b66:	f107 0208 	add.w	r2, r7, #8
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	2110      	movs	r1, #16
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ffc8 	bl	8004b04 <lsm6dso_write_reg>
 8004b74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b8a:	f107 0208 	add.w	r2, r7, #8
 8004b8e:	2301      	movs	r3, #1
 8004b90:	2110      	movs	r1, #16
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ff9e 	bl	8004ad4 <lsm6dso_read_reg>
 8004b98:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004b9a:	7a3b      	ldrb	r3, [r7, #8]
 8004b9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d81a      	bhi.n	8004bdc <lsm6dso_xl_full_scale_get+0x5c>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <lsm6dso_xl_full_scale_get+0x2c>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bc5 	.word	0x08004bc5
 8004bb4:	08004bcd 	.word	0x08004bcd
 8004bb8:	08004bd5 	.word	0x08004bd5
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
      break;
 8004bc2:	e00f      	b.n	8004be4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e00b      	b.n	8004be4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	701a      	strb	r2, [r3, #0]
      break;
 8004bd2:	e007      	b.n	8004be4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	701a      	strb	r2, [r3, #0]
      break;
 8004bda:	e003      	b.n	8004be4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
      break;
 8004be2:	bf00      	nop
  }

  return ret;
 8004be4:	68fb      	ldr	r3, [r7, #12]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop

08004bf0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004c00:	f107 030c 	add.w	r3, r7, #12
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fc96 	bl	8005538 <lsm6dso_fsm_enable_get>
 8004c0c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <lsm6dso_xl_data_rate_set+0x28>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	e0e1      	b.n	8004ddc <lsm6dso_xl_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c18:	7b3b      	ldrb	r3, [r7, #12]
 8004c1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c1e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c20:	7b3b      	ldrb	r3, [r7, #12]
 8004c22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c26:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c2c:	7b3b      	ldrb	r3, [r7, #12]
 8004c2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c32:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c38:	7b3b      	ldrb	r3, [r7, #12]
 8004c3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c3e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c40:	4313      	orrs	r3, r2
 8004c42:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c44:	7b3b      	ldrb	r3, [r7, #12]
 8004c46:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c4a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004c50:	7b3b      	ldrb	r3, [r7, #12]
 8004c52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c56:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004c5c:	7b3b      	ldrb	r3, [r7, #12]
 8004c5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c62:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004c64:	4313      	orrs	r3, r2
 8004c66:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004c68:	7b3b      	ldrb	r3, [r7, #12]
 8004c6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c6e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004c74:	7b7b      	ldrb	r3, [r7, #13]
 8004c76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c7a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004c80:	7b7b      	ldrb	r3, [r7, #13]
 8004c82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c86:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004c8c:	7b7b      	ldrb	r3, [r7, #13]
 8004c8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c92:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004c98:	7b7b      	ldrb	r3, [r7, #13]
 8004c9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c9e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004ca4:	7b7b      	ldrb	r3, [r7, #13]
 8004ca6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004caa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004cac:	4313      	orrs	r3, r2
 8004cae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004cb0:	7b7b      	ldrb	r3, [r7, #13]
 8004cb2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004cb6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004cbc:	7b7b      	ldrb	r3, [r7, #13]
 8004cbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004cc2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004cc8:	7b7b      	ldrb	r3, [r7, #13]
 8004cca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d164      	bne.n	8004da2 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004cd8:	f107 030b 	add.w	r3, r7, #11
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fc4c 	bl	800557c <lsm6dso_fsm_data_rate_get>
 8004ce4:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <lsm6dso_xl_data_rate_set+0x100>
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	e075      	b.n	8004ddc <lsm6dso_xl_data_rate_set+0x1ec>

    switch (fsm_odr)
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d852      	bhi.n	8004d9c <lsm6dso_xl_data_rate_set+0x1ac>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <lsm6dso_xl_data_rate_set+0x10c>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d1f 	.word	0x08004d1f
 8004d04:	08004d3d 	.word	0x08004d3d
 8004d08:	08004d67 	.word	0x08004d67
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d16:	e045      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	75fb      	strb	r3, [r7, #23]
        break;
 8004d1c:	e042      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d24:	2302      	movs	r3, #2
 8004d26:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d28:	e03c      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d102      	bne.n	8004d36 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d30:	2302      	movs	r3, #2
 8004d32:	75fb      	strb	r3, [r7, #23]
        break;
 8004d34:	e036      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	75fb      	strb	r3, [r7, #23]
        break;
 8004d3a:	e033      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d42:	2303      	movs	r3, #3
 8004d44:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d46:	e02d      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d102      	bne.n	8004d54 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	75fb      	strb	r3, [r7, #23]
        break;
 8004d52:	e027      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d102      	bne.n	8004d60 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	75fb      	strb	r3, [r7, #23]
        break;
 8004d5e:	e021      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	75fb      	strb	r3, [r7, #23]
        break;
 8004d64:	e01e      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d70:	e018      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d78:	2304      	movs	r3, #4
 8004d7a:	75fb      	strb	r3, [r7, #23]
        break;
 8004d7c:	e012      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d102      	bne.n	8004d8a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d84:	2304      	movs	r3, #4
 8004d86:	75fb      	strb	r3, [r7, #23]
        break;
 8004d88:	e00c      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d102      	bne.n	8004d96 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004d90:	2304      	movs	r3, #4
 8004d92:	75fb      	strb	r3, [r7, #23]
        break;
 8004d94:	e006      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	75fb      	strb	r3, [r7, #23]
        break;
 8004d9a:	e003      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>

      default:
        odr_xl = val;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	75fb      	strb	r3, [r7, #23]
        break;
 8004da0:	e000      	b.n	8004da4 <lsm6dso_xl_data_rate_set+0x1b4>
    }
  }
 8004da2:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004da4:	f107 0208 	add.w	r2, r7, #8
 8004da8:	2301      	movs	r3, #1
 8004daa:	2110      	movs	r1, #16
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fe91 	bl	8004ad4 <lsm6dso_read_reg>
 8004db2:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	7a3b      	ldrb	r3, [r7, #8]
 8004dbe:	f362 1307 	bfi	r3, r2, #4, #4
 8004dc2:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004dc4:	f107 0208 	add.w	r2, r7, #8
 8004dc8:	2301      	movs	r3, #1
 8004dca:	2110      	movs	r1, #16
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff fe99 	bl	8004b04 <lsm6dso_write_reg>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  return ret;
 8004dda:	693b      	ldr	r3, [r7, #16]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004dee:	f107 0208 	add.w	r2, r7, #8
 8004df2:	2301      	movs	r3, #1
 8004df4:	2110      	movs	r1, #16
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fe6c 	bl	8004ad4 <lsm6dso_read_reg>
 8004dfc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004dfe:	7a3b      	ldrb	r3, [r7, #8]
 8004e00:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b0b      	cmp	r3, #11
 8004e08:	d84a      	bhi.n	8004ea0 <lsm6dso_xl_data_rate_get+0xbc>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <lsm6dso_xl_data_rate_get+0x2c>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e41 	.word	0x08004e41
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e51 	.word	0x08004e51
 8004e1c:	08004e59 	.word	0x08004e59
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e69 	.word	0x08004e69
 8004e28:	08004e71 	.word	0x08004e71
 8004e2c:	08004e79 	.word	0x08004e79
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08004e89 	.word	0x08004e89
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004e99 	.word	0x08004e99
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
      break;
 8004e46:	e02f      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	701a      	strb	r2, [r3, #0]
      break;
 8004e4e:	e02b      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2202      	movs	r2, #2
 8004e54:	701a      	strb	r2, [r3, #0]
      break;
 8004e56:	e027      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	701a      	strb	r2, [r3, #0]
      break;
 8004e5e:	e023      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2204      	movs	r2, #4
 8004e64:	701a      	strb	r2, [r3, #0]
      break;
 8004e66:	e01f      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2205      	movs	r2, #5
 8004e6c:	701a      	strb	r2, [r3, #0]
      break;
 8004e6e:	e01b      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2206      	movs	r2, #6
 8004e74:	701a      	strb	r2, [r3, #0]
      break;
 8004e76:	e017      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2207      	movs	r2, #7
 8004e7c:	701a      	strb	r2, [r3, #0]
      break;
 8004e7e:	e013      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2208      	movs	r2, #8
 8004e84:	701a      	strb	r2, [r3, #0]
      break;
 8004e86:	e00f      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2209      	movs	r2, #9
 8004e8c:	701a      	strb	r2, [r3, #0]
      break;
 8004e8e:	e00b      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	220a      	movs	r2, #10
 8004e94:	701a      	strb	r2, [r3, #0]
      break;
 8004e96:	e007      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	220b      	movs	r2, #11
 8004e9c:	701a      	strb	r2, [r3, #0]
      break;
 8004e9e:	e003      	b.n	8004ea8 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
      break;
 8004ea6:	bf00      	nop
  }

  return ret;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop

08004eb4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004ec0:	f107 0208 	add.w	r2, r7, #8
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	2111      	movs	r1, #17
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fe03 	bl	8004ad4 <lsm6dso_read_reg>
 8004ece:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	7a3b      	ldrb	r3, [r7, #8]
 8004ee0:	f362 0343 	bfi	r3, r2, #1, #3
 8004ee4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004ee6:	f107 0208 	add.w	r2, r7, #8
 8004eea:	2301      	movs	r3, #1
 8004eec:	2111      	movs	r1, #17
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff fe08 	bl	8004b04 <lsm6dso_write_reg>
 8004ef4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f0a:	f107 0208 	add.w	r2, r7, #8
 8004f0e:	2301      	movs	r3, #1
 8004f10:	2111      	movs	r1, #17
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fdde 	bl	8004ad4 <lsm6dso_read_reg>
 8004f18:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004f1a:	7a3b      	ldrb	r3, [r7, #8]
 8004f1c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d824      	bhi.n	8004f70 <lsm6dso_gy_full_scale_get+0x70>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <lsm6dso_gy_full_scale_get+0x2c>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f49 	.word	0x08004f49
 8004f30:	08004f51 	.word	0x08004f51
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f69 	.word	0x08004f69
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
      break;
 8004f4e:	e013      	b.n	8004f78 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
      break;
 8004f56:	e00f      	b.n	8004f78 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e00b      	b.n	8004f78 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2204      	movs	r2, #4
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e007      	b.n	8004f78 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2206      	movs	r2, #6
 8004f6c:	701a      	strb	r2, [r3, #0]
      break;
 8004f6e:	e003      	b.n	8004f78 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
      break;
 8004f76:	bf00      	nop
  }

  return ret;
 8004f78:	68fb      	ldr	r3, [r7, #12]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop

08004f84 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 facc 	bl	8005538 <lsm6dso_fsm_enable_get>
 8004fa0:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <lsm6dso_gy_data_rate_set+0x28>
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	e0e1      	b.n	8005170 <lsm6dso_gy_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004fac:	7b3b      	ldrb	r3, [r7, #12]
 8004fae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fb2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004fb4:	7b3b      	ldrb	r3, [r7, #12]
 8004fb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004fba:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004fc0:	7b3b      	ldrb	r3, [r7, #12]
 8004fc2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004fc6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004fcc:	7b3b      	ldrb	r3, [r7, #12]
 8004fce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004fd2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004fd8:	7b3b      	ldrb	r3, [r7, #12]
 8004fda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004fde:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004fe4:	7b3b      	ldrb	r3, [r7, #12]
 8004fe6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004fec:	4313      	orrs	r3, r2
 8004fee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004ff0:	7b3b      	ldrb	r3, [r7, #12]
 8004ff2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ff6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004ffc:	7b3b      	ldrb	r3, [r7, #12]
 8004ffe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005002:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005004:	4313      	orrs	r3, r2
 8005006:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005008:	7b7b      	ldrb	r3, [r7, #13]
 800500a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800500e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005010:	4313      	orrs	r3, r2
 8005012:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005014:	7b7b      	ldrb	r3, [r7, #13]
 8005016:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800501a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800501c:	4313      	orrs	r3, r2
 800501e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005020:	7b7b      	ldrb	r3, [r7, #13]
 8005022:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005026:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005028:	4313      	orrs	r3, r2
 800502a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800502c:	7b7b      	ldrb	r3, [r7, #13]
 800502e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005032:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005034:	4313      	orrs	r3, r2
 8005036:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005038:	7b7b      	ldrb	r3, [r7, #13]
 800503a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800503e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005040:	4313      	orrs	r3, r2
 8005042:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005044:	7b7b      	ldrb	r3, [r7, #13]
 8005046:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800504a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800504c:	4313      	orrs	r3, r2
 800504e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005050:	7b7b      	ldrb	r3, [r7, #13]
 8005052:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005056:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005058:	4313      	orrs	r3, r2
 800505a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800505c:	7b7b      	ldrb	r3, [r7, #13]
 800505e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005062:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005064:	4313      	orrs	r3, r2
 8005066:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005068:	2b01      	cmp	r3, #1
 800506a:	d164      	bne.n	8005136 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800506c:	f107 030b 	add.w	r3, r7, #11
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa82 	bl	800557c <lsm6dso_fsm_data_rate_get>
 8005078:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <lsm6dso_gy_data_rate_set+0x100>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	e075      	b.n	8005170 <lsm6dso_gy_data_rate_set+0x1ec>

    switch (fsm_odr)
 8005084:	7afb      	ldrb	r3, [r7, #11]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d852      	bhi.n	8005130 <lsm6dso_gy_data_rate_set+0x1ac>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <lsm6dso_gy_data_rate_set+0x10c>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050b3 	.word	0x080050b3
 8005098:	080050d1 	.word	0x080050d1
 800509c:	080050fb 	.word	0x080050fb
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80050aa:	e045      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	75fb      	strb	r3, [r7, #23]
        break;
 80050b0:	e042      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80050b8:	2302      	movs	r3, #2
 80050ba:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80050bc:	e03c      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d102      	bne.n	80050ca <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80050c4:	2302      	movs	r3, #2
 80050c6:	75fb      	strb	r3, [r7, #23]
        break;
 80050c8:	e036      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	75fb      	strb	r3, [r7, #23]
        break;
 80050ce:	e033      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80050d6:	2303      	movs	r3, #3
 80050d8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80050da:	e02d      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d102      	bne.n	80050e8 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80050e2:	2303      	movs	r3, #3
 80050e4:	75fb      	strb	r3, [r7, #23]
        break;
 80050e6:	e027      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d102      	bne.n	80050f4 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80050ee:	2303      	movs	r3, #3
 80050f0:	75fb      	strb	r3, [r7, #23]
        break;
 80050f2:	e021      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	75fb      	strb	r3, [r7, #23]
        break;
 80050f8:	e01e      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005100:	2304      	movs	r3, #4
 8005102:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005104:	e018      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d102      	bne.n	8005112 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800510c:	2304      	movs	r3, #4
 800510e:	75fb      	strb	r3, [r7, #23]
        break;
 8005110:	e012      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d102      	bne.n	800511e <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005118:	2304      	movs	r3, #4
 800511a:	75fb      	strb	r3, [r7, #23]
        break;
 800511c:	e00c      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d102      	bne.n	800512a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005124:	2304      	movs	r3, #4
 8005126:	75fb      	strb	r3, [r7, #23]
        break;
 8005128:	e006      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	75fb      	strb	r3, [r7, #23]
        break;
 800512e:	e003      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>

      default:
        odr_gy = val;
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	75fb      	strb	r3, [r7, #23]
        break;
 8005134:	e000      	b.n	8005138 <lsm6dso_gy_data_rate_set+0x1b4>
    }
  }
 8005136:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005138:	f107 0208 	add.w	r2, r7, #8
 800513c:	2301      	movs	r3, #1
 800513e:	2111      	movs	r1, #17
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fcc7 	bl	8004ad4 <lsm6dso_read_reg>
 8005146:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	b2da      	uxtb	r2, r3
 8005150:	7a3b      	ldrb	r3, [r7, #8]
 8005152:	f362 1307 	bfi	r3, r2, #4, #4
 8005156:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005158:	f107 0208 	add.w	r2, r7, #8
 800515c:	2301      	movs	r3, #1
 800515e:	2111      	movs	r1, #17
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff fccf 	bl	8004b04 <lsm6dso_write_reg>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4413      	add	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  return ret;
 800516e:	693b      	ldr	r3, [r7, #16]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005182:	f107 0208 	add.w	r2, r7, #8
 8005186:	2301      	movs	r3, #1
 8005188:	2111      	movs	r1, #17
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fca2 	bl	8004ad4 <lsm6dso_read_reg>
 8005190:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005192:	7a3b      	ldrb	r3, [r7, #8]
 8005194:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b0a      	cmp	r3, #10
 800519c:	d844      	bhi.n	8005228 <lsm6dso_gy_data_rate_get+0xb0>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <lsm6dso_gy_data_rate_get+0x2c>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	080051d9 	.word	0x080051d9
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051f1 	.word	0x080051f1
 80051b8:	080051f9 	.word	0x080051f9
 80051bc:	08005201 	.word	0x08005201
 80051c0:	08005209 	.word	0x08005209
 80051c4:	08005211 	.word	0x08005211
 80051c8:	08005219 	.word	0x08005219
 80051cc:	08005221 	.word	0x08005221
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
      break;
 80051d6:	e02b      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
      break;
 80051de:	e027      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      break;
 80051e6:	e023      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2203      	movs	r2, #3
 80051ec:	701a      	strb	r2, [r3, #0]
      break;
 80051ee:	e01f      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2204      	movs	r2, #4
 80051f4:	701a      	strb	r2, [r3, #0]
      break;
 80051f6:	e01b      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2205      	movs	r2, #5
 80051fc:	701a      	strb	r2, [r3, #0]
      break;
 80051fe:	e017      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2206      	movs	r2, #6
 8005204:	701a      	strb	r2, [r3, #0]
      break;
 8005206:	e013      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2207      	movs	r2, #7
 800520c:	701a      	strb	r2, [r3, #0]
      break;
 800520e:	e00f      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	701a      	strb	r2, [r3, #0]
      break;
 8005216:	e00b      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2209      	movs	r2, #9
 800521c:	701a      	strb	r2, [r3, #0]
      break;
 800521e:	e007      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	220a      	movs	r2, #10
 8005224:	701a      	strb	r2, [r3, #0]
      break;
 8005226:	e003      	b.n	8005230 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
      break;
 800522e:	bf00      	nop
  }

  return ret;
 8005230:	68fb      	ldr	r3, [r7, #12]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005248:	f107 0208 	add.w	r2, r7, #8
 800524c:	2301      	movs	r3, #1
 800524e:	2112      	movs	r1, #18
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fc3f 	bl	8004ad4 <lsm6dso_read_reg>
 8005256:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	7a3b      	ldrb	r3, [r7, #8]
 8005268:	f362 1386 	bfi	r3, r2, #6, #1
 800526c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800526e:	f107 0208 	add.w	r2, r7, #8
 8005272:	2301      	movs	r3, #1
 8005274:	2112      	movs	r1, #18
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fc44 	bl	8004b04 <lsm6dso_write_reg>
 800527c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005292:	f107 020c 	add.w	r2, r7, #12
 8005296:	2306      	movs	r3, #6
 8005298:	2122      	movs	r1, #34	; 0x22
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff fc1a 	bl	8004ad4 <lsm6dso_read_reg>
 80052a0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80052a2:	7b7b      	ldrb	r3, [r7, #13]
 80052a4:	b21a      	sxth	r2, r3
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	7b3b      	ldrb	r3, [r7, #12]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	b29b      	uxth	r3, r3
 80052be:	b21a      	sxth	r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	3302      	adds	r3, #2
 80052ca:	b212      	sxth	r2, r2
 80052cc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3302      	adds	r3, #2
 80052d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	b29a      	uxth	r2, r3
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	3302      	adds	r3, #2
 80052e8:	b212      	sxth	r2, r2
 80052ea:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80052ec:	7c7a      	ldrb	r2, [r7, #17]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	3304      	adds	r3, #4
 80052f2:	b212      	sxth	r2, r2
 80052f4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	3304      	adds	r3, #4
 80052fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	b29a      	uxth	r2, r3
 8005304:	7c3b      	ldrb	r3, [r7, #16]
 8005306:	b29b      	uxth	r3, r3
 8005308:	4413      	add	r3, r2
 800530a:	b29a      	uxth	r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	3304      	adds	r3, #4
 8005310:	b212      	sxth	r2, r2
 8005312:	801a      	strh	r2, [r3, #0]

  return ret;
 8005314:	697b      	ldr	r3, [r7, #20]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b086      	sub	sp, #24
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005328:	f107 020c 	add.w	r2, r7, #12
 800532c:	2306      	movs	r3, #6
 800532e:	2128      	movs	r1, #40	; 0x28
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fbcf 	bl	8004ad4 <lsm6dso_read_reg>
 8005336:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005338:	7b7b      	ldrb	r3, [r7, #13]
 800533a:	b21a      	sxth	r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005346:	b29b      	uxth	r3, r3
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	b29a      	uxth	r2, r3
 800534c:	7b3b      	ldrb	r3, [r7, #12]
 800534e:	b29b      	uxth	r3, r3
 8005350:	4413      	add	r3, r2
 8005352:	b29b      	uxth	r3, r3
 8005354:	b21a      	sxth	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800535a:	7bfa      	ldrb	r2, [r7, #15]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	3302      	adds	r3, #2
 8005360:	b212      	sxth	r2, r2
 8005362:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	3302      	adds	r3, #2
 8005368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800536c:	b29b      	uxth	r3, r3
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	b29a      	uxth	r2, r3
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	b29b      	uxth	r3, r3
 8005376:	4413      	add	r3, r2
 8005378:	b29a      	uxth	r2, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	3302      	adds	r3, #2
 800537e:	b212      	sxth	r2, r2
 8005380:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005382:	7c7a      	ldrb	r2, [r7, #17]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	3304      	adds	r3, #4
 8005388:	b212      	sxth	r2, r2
 800538a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	3304      	adds	r3, #4
 8005390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005394:	b29b      	uxth	r3, r3
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	b29a      	uxth	r2, r3
 800539a:	7c3b      	ldrb	r3, [r7, #16]
 800539c:	b29b      	uxth	r3, r3
 800539e:	4413      	add	r3, r2
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	3304      	adds	r3, #4
 80053a6:	b212      	sxth	r2, r2
 80053a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80053aa:	697b      	ldr	r3, [r7, #20]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80053c0:	2300      	movs	r3, #0
 80053c2:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	7a3b      	ldrb	r3, [r7, #8]
 80053ce:	f362 1387 	bfi	r3, r2, #6, #2
 80053d2:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80053d4:	f107 0208 	add.w	r2, r7, #8
 80053d8:	2301      	movs	r3, #1
 80053da:	2101      	movs	r1, #1
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fb91 	bl	8004b04 <lsm6dso_write_reg>
 80053e2:	60f8      	str	r0, [r7, #12]

  return ret;
 80053e4:	68fb      	ldr	r3, [r7, #12]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80053f8:	2301      	movs	r3, #1
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	210f      	movs	r1, #15
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff fb68 	bl	8004ad4 <lsm6dso_read_reg>
 8005404:	60f8      	str	r0, [r7, #12]

  return ret;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800541c:	f107 0208 	add.w	r2, r7, #8
 8005420:	2301      	movs	r3, #1
 8005422:	2112      	movs	r1, #18
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fb55 	bl	8004ad4 <lsm6dso_read_reg>
 800542a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	b2da      	uxtb	r2, r3
 800543a:	7a3b      	ldrb	r3, [r7, #8]
 800543c:	f362 0382 	bfi	r3, r2, #2, #1
 8005440:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005442:	f107 0208 	add.w	r2, r7, #8
 8005446:	2301      	movs	r3, #1
 8005448:	2112      	movs	r1, #18
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fb5a 	bl	8004b04 <lsm6dso_write_reg>
 8005450:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005452:	68fb      	ldr	r3, [r7, #12]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005468:	f107 020c 	add.w	r2, r7, #12
 800546c:	2301      	movs	r3, #1
 800546e:	2118      	movs	r1, #24
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fb2f 	bl	8004ad4 <lsm6dso_read_reg>
 8005476:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	09db      	lsrs	r3, r3, #7
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	7b3b      	ldrb	r3, [r7, #12]
 8005486:	f362 0341 	bfi	r3, r2, #1, #1
 800548a:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800548c:	f107 020c 	add.w	r2, r7, #12
 8005490:	2301      	movs	r3, #1
 8005492:	2118      	movs	r1, #24
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fb35 	bl	8004b04 <lsm6dso_write_reg>
 800549a:	4602      	mov	r2, r0
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <lsm6dso_i3c_disable_set+0x50>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	e01b      	b.n	80054e4 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80054ac:	f107 0210 	add.w	r2, r7, #16
 80054b0:	2301      	movs	r3, #1
 80054b2:	2162      	movs	r1, #98	; 0x62
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff fb0d 	bl	8004ad4 <lsm6dso_read_reg>
 80054ba:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	7c3b      	ldrb	r3, [r7, #16]
 80054c6:	f362 03c4 	bfi	r3, r2, #3, #2
 80054ca:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80054cc:	f107 0210 	add.w	r2, r7, #16
 80054d0:	2301      	movs	r3, #1
 80054d2:	2162      	movs	r1, #98	; 0x62
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fb15 	bl	8004b04 <lsm6dso_write_reg>
 80054da:	4602      	mov	r2, r0
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  return ret;
 80054e2:	697b      	ldr	r3, [r7, #20]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80054f8:	f107 0208 	add.w	r2, r7, #8
 80054fc:	2301      	movs	r3, #1
 80054fe:	210a      	movs	r1, #10
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fae7 	bl	8004ad4 <lsm6dso_read_reg>
 8005506:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	b2da      	uxtb	r2, r3
 8005516:	7a3b      	ldrb	r3, [r7, #8]
 8005518:	f362 0302 	bfi	r3, r2, #0, #3
 800551c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800551e:	f107 0208 	add.w	r2, r7, #8
 8005522:	2301      	movs	r3, #1
 8005524:	210a      	movs	r1, #10
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff faec 	bl	8004b04 <lsm6dso_write_reg>
 800552c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800552e:	68fb      	ldr	r3, [r7, #12]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005542:	2102      	movs	r1, #2
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff35 	bl	80053b4 <lsm6dso_mem_bank_set>
 800554a:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800554c:	2302      	movs	r3, #2
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	2146      	movs	r1, #70	; 0x46
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fabe 	bl	8004ad4 <lsm6dso_read_reg>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005560:	2100      	movs	r1, #0
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff ff26 	bl	80053b4 <lsm6dso_mem_bank_set>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  return ret;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005586:	2102      	movs	r1, #2
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff13 	bl	80053b4 <lsm6dso_mem_bank_set>
 800558e:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <lsm6dso_fsm_data_rate_get+0x1e>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	e03a      	b.n	8005610 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800559a:	f107 0208 	add.w	r2, r7, #8
 800559e:	2301      	movs	r3, #1
 80055a0:	215f      	movs	r1, #95	; 0x5f
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fa96 	bl	8004ad4 <lsm6dso_read_reg>
 80055a8:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d125      	bne.n	80055fc <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 80055b0:	7a3b      	ldrb	r3, [r7, #8]
 80055b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d81b      	bhi.n	80055f4 <lsm6dso_fsm_data_rate_get+0x78>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <lsm6dso_fsm_data_rate_get+0x48>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	080055d5 	.word	0x080055d5
 80055c8:	080055dd 	.word	0x080055dd
 80055cc:	080055e5 	.word	0x080055e5
 80055d0:	080055ed 	.word	0x080055ed
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
      break;
 80055da:	e010      	b.n	80055fe <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
      break;
 80055e2:	e00c      	b.n	80055fe <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2202      	movs	r2, #2
 80055e8:	701a      	strb	r2, [r3, #0]
      break;
 80055ea:	e008      	b.n	80055fe <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2203      	movs	r2, #3
 80055f0:	701a      	strb	r2, [r3, #0]
      break;
 80055f2:	e004      	b.n	80055fe <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
      break;
 80055fa:	e000      	b.n	80055fe <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 80055fc:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80055fe:	2100      	movs	r1, #0
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fed7 	bl	80053b4 <lsm6dso_mem_bank_set>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  return ret;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	; 0x38
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005626:	2301      	movs	r3, #1
 8005628:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d06e      	beq.n	8005712 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	f200 809d 	bhi.w	8005776 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <IKS01A3_MOTION_SENSOR_Init+0x32>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d032      	beq.n	80056ae <IKS01A3_MOTION_SENSOR_Init+0x96>
 8005648:	e095      	b.n	8005776 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800564a:	6838      	ldr	r0, [r7, #0]
 800564c:	f000 f966 	bl	800591c <LSM6DSO_0_Probe>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	e0cc      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800565c:	4a68      	ldr	r2, [pc, #416]	; (8005800 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	4967      	ldr	r1, [pc, #412]	; (8005804 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800566e:	f107 010c 	add.w	r1, r7, #12
 8005672:	4610      	mov	r0, r2
 8005674:	4798      	blx	r3
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800567c:	f06f 0306 	mvn.w	r3, #6
 8005680:	e0b9      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005682:	7b3b      	ldrb	r3, [r7, #12]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d103      	bne.n	8005690 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	f043 0302 	orr.w	r3, r3, #2
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005690:	7b7b      	ldrb	r3, [r7, #13]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d103      	bne.n	800569e <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d16c      	bne.n	800577e <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	f043 0304 	orr.w	r3, r3, #4
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80056ac:	e067      	b.n	800577e <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80056ae:	6838      	ldr	r0, [r7, #0]
 80056b0:	f000 f9f4 	bl	8005a9c <LIS2DW12_0_Probe>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	e09a      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056c0:	4a4f      	ldr	r2, [pc, #316]	; (8005800 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	494e      	ldr	r1, [pc, #312]	; (8005804 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056d2:	f107 010c 	add.w	r1, r7, #12
 80056d6:	4610      	mov	r0, r2
 80056d8:	4798      	blx	r3
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80056e0:	f06f 0306 	mvn.w	r3, #6
 80056e4:	e087      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80056e6:	7b3b      	ldrb	r3, [r7, #12]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d103      	bne.n	80056f4 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	f043 0302 	orr.w	r3, r3, #2
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80056f4:	7b7b      	ldrb	r3, [r7, #13]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d103      	bne.n	8005702 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005702:	7bbb      	ldrb	r3, [r7, #14]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d13c      	bne.n	8005782 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005710:	e037      	b.n	8005782 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005712:	6838      	ldr	r0, [r7, #0]
 8005714:	f000 fa6a 	bl	8005bec <LIS2MDL_0_Probe>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	e068      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005724:	4a36      	ldr	r2, [pc, #216]	; (8005800 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	4935      	ldr	r1, [pc, #212]	; (8005804 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005736:	f107 010c 	add.w	r1, r7, #12
 800573a:	4610      	mov	r0, r2
 800573c:	4798      	blx	r3
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005744:	f06f 0306 	mvn.w	r3, #6
 8005748:	e055      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800574a:	7b3b      	ldrb	r3, [r7, #12]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d103      	bne.n	8005758 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f043 0302 	orr.w	r3, r3, #2
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005758:	7b7b      	ldrb	r3, [r7, #13]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d103      	bne.n	8005766 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005766:	7bbb      	ldrb	r3, [r7, #14]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10c      	bne.n	8005786 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	f043 0304 	orr.w	r3, r3, #4
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005774:	e007      	b.n	8005786 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005776:	f06f 0301 	mvn.w	r3, #1
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800577c:	e004      	b.n	8005788 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8005786:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	e031      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005796:	e02a      	b.n	80057ee <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	4013      	ands	r3, r2
 800579e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d11e      	bne.n	80057e2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80057a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	4013      	ands	r3, r2
 80057aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d118      	bne.n	80057e2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057b8:	4814      	ldr	r0, [pc, #80]	; (800580c <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	440b      	add	r3, r1
 80057c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	490e      	ldr	r1, [pc, #56]	; (8005804 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057d2:	4610      	mov	r0, r2
 80057d4:	4798      	blx	r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80057dc:	f06f 0304 	mvn.w	r3, #4
 80057e0:	e009      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	3301      	adds	r3, #1
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d9d1      	bls.n	8005798 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80057f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3738      	adds	r7, #56	; 0x38
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000190 	.word	0x20000190
 8005804:	200003e4 	.word	0x200003e4
 8005808:	200000c4 	.word	0x200000c4
 800580c:	2000016c 	.word	0x2000016c

08005810 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d903      	bls.n	8005828 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005820:	f06f 0301 	mvn.w	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	e028      	b.n	800587a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4013      	ands	r3, r2
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d11c      	bne.n	8005874 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005842:	4812      	ldr	r0, [pc, #72]	; (800588c <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	440b      	add	r3, r1
 800584e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	490e      	ldr	r1, [pc, #56]	; (8005890 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005866:	f06f 0304 	mvn.w	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e005      	b.n	800587a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e002      	b.n	800587a <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005874:	f06f 0301 	mvn.w	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800587a:	68fb      	ldr	r3, [r7, #12]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	2000019c 	.word	0x2000019c
 8005888:	200000c4 	.word	0x200000c4
 800588c:	2000016c 	.word	0x2000016c
 8005890:	200003e4 	.word	0x200003e4

08005894 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d903      	bls.n	80058ae <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058a6:	f06f 0301 	mvn.w	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e029      	b.n	8005902 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4013      	ands	r3, r2
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d11d      	bne.n	80058fc <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80058c0:	4a13      	ldr	r2, [pc, #76]	; (8005910 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058c8:	4812      	ldr	r0, [pc, #72]	; (8005914 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4613      	mov	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4413      	add	r3, r2
 80058d2:	440b      	add	r3, r1
 80058d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	490f      	ldr	r1, [pc, #60]	; (8005918 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4610      	mov	r0, r2
 80058e6:	4798      	blx	r3
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058ee:	f06f 0304 	mvn.w	r3, #4
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e005      	b.n	8005902 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	e002      	b.n	8005902 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80058fc:	f06f 0301 	mvn.w	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005902:	697b      	ldr	r3, [r7, #20]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	2000019c 	.word	0x2000019c
 8005910:	200000c4 	.word	0x200000c4
 8005914:	2000016c 	.word	0x2000016c
 8005918:	200003e4 	.word	0x200003e4

0800591c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b094      	sub	sp, #80	; 0x50
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005924:	2300      	movs	r3, #0
 8005926:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8005928:	2300      	movs	r3, #0
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800592c:	23d7      	movs	r3, #215	; 0xd7
 800592e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005932:	4b4b      	ldr	r3, [pc, #300]	; (8005a60 <LSM6DSO_0_Probe+0x144>)
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005936:	4b4b      	ldr	r3, [pc, #300]	; (8005a64 <LSM6DSO_0_Probe+0x148>)
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800593a:	4b4b      	ldr	r3, [pc, #300]	; (8005a68 <LSM6DSO_0_Probe+0x14c>)
 800593c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800593e:	4b4b      	ldr	r3, [pc, #300]	; (8005a6c <LSM6DSO_0_Probe+0x150>)
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005942:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <LSM6DSO_0_Probe+0x154>)
 8005944:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005946:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <LSM6DSO_0_Probe+0x158>)
 8005948:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800594a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800594e:	4619      	mov	r1, r3
 8005950:	4849      	ldr	r0, [pc, #292]	; (8005a78 <LSM6DSO_0_Probe+0x15c>)
 8005952:	f7fd fe81 	bl	8003658 <LSM6DSO_RegisterBusIO>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800595c:	f06f 0306 	mvn.w	r3, #6
 8005960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005962:	e077      	b.n	8005a54 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8005964:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005968:	4619      	mov	r1, r3
 800596a:	4843      	ldr	r0, [pc, #268]	; (8005a78 <LSM6DSO_0_Probe+0x15c>)
 800596c:	f7fd ff7e 	bl	800386c <LSM6DSO_ReadID>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005976:	f06f 0306 	mvn.w	r3, #6
 800597a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597c:	e06a      	b.n	8005a54 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 800597e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005982:	2b6c      	cmp	r3, #108	; 0x6c
 8005984:	d003      	beq.n	800598e <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005986:	f06f 0306 	mvn.w	r3, #6
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598c:	e062      	b.n	8005a54 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800598e:	f107 030c 	add.w	r3, r7, #12
 8005992:	4619      	mov	r1, r3
 8005994:	4838      	ldr	r0, [pc, #224]	; (8005a78 <LSM6DSO_0_Probe+0x15c>)
 8005996:	f7fd ff7f 	bl	8003898 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800599a:	7b7b      	ldrb	r3, [r7, #13]
 800599c:	461a      	mov	r2, r3
 800599e:	7b3b      	ldrb	r3, [r7, #12]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	431a      	orrs	r2, r3
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4313      	orrs	r3, r2
 80059aa:	4a34      	ldr	r2, [pc, #208]	; (8005a7c <LSM6DSO_0_Probe+0x160>)
 80059ac:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80059ae:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <LSM6DSO_0_Probe+0x164>)
 80059b0:	4a31      	ldr	r2, [pc, #196]	; (8005a78 <LSM6DSO_0_Probe+0x15c>)
 80059b2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80059b4:	4b33      	ldr	r3, [pc, #204]	; (8005a84 <LSM6DSO_0_Probe+0x168>)
 80059b6:	4a34      	ldr	r2, [pc, #208]	; (8005a88 <LSM6DSO_0_Probe+0x16c>)
 80059b8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d11d      	bne.n	80059fc <LSM6DSO_0_Probe+0xe0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d018      	beq.n	80059fc <LSM6DSO_0_Probe+0xe0>
 80059ca:	7b7b      	ldrb	r3, [r7, #13]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d115      	bne.n	80059fc <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80059d0:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <LSM6DSO_0_Probe+0x170>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4a2e      	ldr	r2, [pc, #184]	; (8005a90 <LSM6DSO_0_Probe+0x174>)
 80059d6:	492f      	ldr	r1, [pc, #188]	; (8005a94 <LSM6DSO_0_Probe+0x178>)
 80059d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80059dc:	4b29      	ldr	r3, [pc, #164]	; (8005a84 <LSM6DSO_0_Probe+0x168>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a27      	ldr	r2, [pc, #156]	; (8005a80 <LSM6DSO_0_Probe+0x164>)
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	4610      	mov	r0, r2
 80059e8:	4798      	blx	r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80059f0:	f06f 0304 	mvn.w	r3, #4
 80059f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f6:	e001      	b.n	80059fc <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80059fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11d      	bne.n	8005a3e <LSM6DSO_0_Probe+0x122>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d018      	beq.n	8005a3e <LSM6DSO_0_Probe+0x122>
 8005a0c:	7b3b      	ldrb	r3, [r7, #12]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d115      	bne.n	8005a3e <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a12:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <LSM6DSO_0_Probe+0x170>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <LSM6DSO_0_Probe+0x174>)
 8005a18:	491f      	ldr	r1, [pc, #124]	; (8005a98 <LSM6DSO_0_Probe+0x17c>)
 8005a1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005a1e:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <LSM6DSO_0_Probe+0x168>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <LSM6DSO_0_Probe+0x164>)
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a32:	f06f 0304 	mvn.w	r3, #4
 8005a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a38:	e001      	b.n	8005a3e <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <LSM6DSO_0_Probe+0x138>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a4e:	f06f 0304 	mvn.w	r3, #4
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3750      	adds	r7, #80	; 0x50
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	08000c01 	.word	0x08000c01
 8005a64:	08000c65 	.word	0x08000c65
 8005a68:	08000d19 	.word	0x08000d19
 8005a6c:	08000cb5 	.word	0x08000cb5
 8005a70:	08000d7d 	.word	0x08000d7d
 8005a74:	08005e21 	.word	0x08005e21
 8005a78:	200001a8 	.word	0x200001a8
 8005a7c:	2000019c 	.word	0x2000019c
 8005a80:	200003e4 	.word	0x200003e4
 8005a84:	20000190 	.word	0x20000190
 8005a88:	2000006c 	.word	0x2000006c
 8005a8c:	200000c4 	.word	0x200000c4
 8005a90:	2000016c 	.word	0x2000016c
 8005a94:	200000a0 	.word	0x200000a0
 8005a98:	2000007c 	.word	0x2000007c

08005a9c <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b094      	sub	sp, #80	; 0x50
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005aac:	2333      	movs	r3, #51	; 0x33
 8005aae:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005ab2:	4b40      	ldr	r3, [pc, #256]	; (8005bb4 <LIS2DW12_0_Probe+0x118>)
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005ab6:	4b40      	ldr	r3, [pc, #256]	; (8005bb8 <LIS2DW12_0_Probe+0x11c>)
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005aba:	4b40      	ldr	r3, [pc, #256]	; (8005bbc <LIS2DW12_0_Probe+0x120>)
 8005abc:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005abe:	4b40      	ldr	r3, [pc, #256]	; (8005bc0 <LIS2DW12_0_Probe+0x124>)
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005ac2:	4b40      	ldr	r3, [pc, #256]	; (8005bc4 <LIS2DW12_0_Probe+0x128>)
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005ac6:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <LIS2DW12_0_Probe+0x12c>)
 8005ac8:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8005aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ace:	4619      	mov	r1, r3
 8005ad0:	483e      	ldr	r0, [pc, #248]	; (8005bcc <LIS2DW12_0_Probe+0x130>)
 8005ad2:	f7fb fa67 	bl	8000fa4 <LIS2DW12_RegisterBusIO>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005adc:	f06f 0306 	mvn.w	r3, #6
 8005ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae2:	e062      	b.n	8005baa <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005ae4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4838      	ldr	r0, [pc, #224]	; (8005bcc <LIS2DW12_0_Probe+0x130>)
 8005aec:	f7fb fb48 	bl	8001180 <LIS2DW12_ReadID>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005af6:	f06f 0306 	mvn.w	r3, #6
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afc:	e055      	b.n	8005baa <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8005afe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b02:	2b44      	cmp	r3, #68	; 0x44
 8005b04:	d003      	beq.n	8005b0e <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b06:	f06f 0306 	mvn.w	r3, #6
 8005b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b0c:	e04d      	b.n	8005baa <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	4619      	mov	r1, r3
 8005b14:	482d      	ldr	r0, [pc, #180]	; (8005bcc <LIS2DW12_0_Probe+0x130>)
 8005b16:	f7fb fb49 	bl	80011ac <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b1a:	7b7b      	ldrb	r3, [r7, #13]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	7b3b      	ldrb	r3, [r7, #12]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	431a      	orrs	r2, r3
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <LIS2DW12_0_Probe+0x134>)
 8005b2c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8005b2e:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <LIS2DW12_0_Probe+0x138>)
 8005b30:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <LIS2DW12_0_Probe+0x130>)
 8005b32:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005b34:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <LIS2DW12_0_Probe+0x13c>)
 8005b36:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <LIS2DW12_0_Probe+0x140>)
 8005b38:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11e      	bne.n	8005b7e <LIS2DW12_0_Probe+0xe2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d019      	beq.n	8005b7e <LIS2DW12_0_Probe+0xe2>
 8005b4a:	7b3b      	ldrb	r3, [r7, #12]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d116      	bne.n	8005b7e <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005b50:	4b23      	ldr	r3, [pc, #140]	; (8005be0 <LIS2DW12_0_Probe+0x144>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4a23      	ldr	r2, [pc, #140]	; (8005be4 <LIS2DW12_0_Probe+0x148>)
 8005b56:	3303      	adds	r3, #3
 8005b58:	4923      	ldr	r1, [pc, #140]	; (8005be8 <LIS2DW12_0_Probe+0x14c>)
 8005b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	; (8005bd8 <LIS2DW12_0_Probe+0x13c>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <LIS2DW12_0_Probe+0x138>)
 8005b66:	6852      	ldr	r2, [r2, #4]
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4798      	blx	r3
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b72:	f06f 0304 	mvn.w	r3, #4
 8005b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b78:	e001      	b.n	8005b7e <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <LIS2DW12_0_Probe+0xf8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b8e:	f06f 0304 	mvn.w	r3, #4
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d107      	bne.n	8005baa <LIS2DW12_0_Probe+0x10e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ba4:	f06f 0304 	mvn.w	r3, #4
 8005ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3750      	adds	r7, #80	; 0x50
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	08000c01 	.word	0x08000c01
 8005bb8:	08000c65 	.word	0x08000c65
 8005bbc:	08000d19 	.word	0x08000d19
 8005bc0:	08000cb5 	.word	0x08000cb5
 8005bc4:	08000d7d 	.word	0x08000d7d
 8005bc8:	08005e21 	.word	0x08005e21
 8005bcc:	200001e0 	.word	0x200001e0
 8005bd0:	2000019c 	.word	0x2000019c
 8005bd4:	200003e4 	.word	0x200003e4
 8005bd8:	20000190 	.word	0x20000190
 8005bdc:	20000004 	.word	0x20000004
 8005be0:	200000c4 	.word	0x200000c4
 8005be4:	2000016c 	.word	0x2000016c
 8005be8:	20000014 	.word	0x20000014

08005bec <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b094      	sub	sp, #80	; 0x50
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005bfc:	233d      	movs	r3, #61	; 0x3d
 8005bfe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005c02:	4b40      	ldr	r3, [pc, #256]	; (8005d04 <LIS2MDL_0_Probe+0x118>)
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005c06:	4b40      	ldr	r3, [pc, #256]	; (8005d08 <LIS2MDL_0_Probe+0x11c>)
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005c0a:	4b40      	ldr	r3, [pc, #256]	; (8005d0c <LIS2MDL_0_Probe+0x120>)
 8005c0c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005c0e:	4b40      	ldr	r3, [pc, #256]	; (8005d10 <LIS2MDL_0_Probe+0x124>)
 8005c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005c12:	4b40      	ldr	r3, [pc, #256]	; (8005d14 <LIS2MDL_0_Probe+0x128>)
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005c16:	4b40      	ldr	r3, [pc, #256]	; (8005d18 <LIS2MDL_0_Probe+0x12c>)
 8005c18:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8005c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c1e:	4619      	mov	r1, r3
 8005c20:	483e      	ldr	r0, [pc, #248]	; (8005d1c <LIS2MDL_0_Probe+0x130>)
 8005c22:	f7fc fd13 	bl	800264c <LIS2MDL_RegisterBusIO>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c2c:	f06f 0306 	mvn.w	r3, #6
 8005c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c32:	e062      	b.n	8005cfa <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005c34:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4838      	ldr	r0, [pc, #224]	; (8005d1c <LIS2MDL_0_Probe+0x130>)
 8005c3c:	f7fc fe22 	bl	8002884 <LIS2MDL_ReadID>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c46:	f06f 0306 	mvn.w	r3, #6
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4c:	e055      	b.n	8005cfa <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8005c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d003      	beq.n	8005c5e <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c56:	f06f 0306 	mvn.w	r3, #6
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	e04d      	b.n	8005cfa <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8005c5e:	f107 030c 	add.w	r3, r7, #12
 8005c62:	4619      	mov	r1, r3
 8005c64:	482d      	ldr	r0, [pc, #180]	; (8005d1c <LIS2MDL_0_Probe+0x130>)
 8005c66:	f7fc fe33 	bl	80028d0 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005c6a:	7b7b      	ldrb	r3, [r7, #13]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	7b3b      	ldrb	r3, [r7, #12]
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	431a      	orrs	r2, r3
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <LIS2MDL_0_Probe+0x134>)
 8005c7c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8005c7e:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <LIS2MDL_0_Probe+0x138>)
 8005c80:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <LIS2MDL_0_Probe+0x130>)
 8005c82:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8005c84:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <LIS2MDL_0_Probe+0x13c>)
 8005c86:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <LIS2MDL_0_Probe+0x140>)
 8005c88:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d11e      	bne.n	8005cce <LIS2MDL_0_Probe+0xe2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d019      	beq.n	8005cce <LIS2MDL_0_Probe+0xe2>
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d116      	bne.n	8005cce <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005ca0:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <LIS2MDL_0_Probe+0x144>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	4a23      	ldr	r2, [pc, #140]	; (8005d34 <LIS2MDL_0_Probe+0x148>)
 8005ca6:	3306      	adds	r3, #6
 8005ca8:	4923      	ldr	r1, [pc, #140]	; (8005d38 <LIS2MDL_0_Probe+0x14c>)
 8005caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005cae:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <LIS2MDL_0_Probe+0x13c>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <LIS2MDL_0_Probe+0x138>)
 8005cb6:	6892      	ldr	r2, [r2, #8]
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cc2:	f06f 0304 	mvn.w	r3, #4
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc8:	e001      	b.n	8005cce <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <LIS2MDL_0_Probe+0xf8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cde:	f06f 0304 	mvn.w	r3, #4
 8005ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <LIS2MDL_0_Probe+0x10e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cf4:	f06f 0304 	mvn.w	r3, #4
 8005cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3750      	adds	r7, #80	; 0x50
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	08000c01 	.word	0x08000c01
 8005d08:	08000c65 	.word	0x08000c65
 8005d0c:	08000d19 	.word	0x08000d19
 8005d10:	08000cb5 	.word	0x08000cb5
 8005d14:	08000d7d 	.word	0x08000d7d
 8005d18:	08005e21 	.word	0x08005e21
 8005d1c:	2000021c 	.word	0x2000021c
 8005d20:	2000019c 	.word	0x2000019c
 8005d24:	200003e4 	.word	0x200003e4
 8005d28:	20000190 	.word	0x20000190
 8005d2c:	20000038 	.word	0x20000038
 8005d30:	200000c4 	.word	0x200000c4
 8005d34:	2000016c 	.word	0x2000016c
 8005d38:	20000048 	.word	0x20000048

08005d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <HAL_Init+0x40>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <HAL_Init+0x40>)
 8005d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_Init+0x40>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <HAL_Init+0x40>)
 8005d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d58:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <HAL_Init+0x40>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <HAL_Init+0x40>)
 8005d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d64:	2003      	movs	r0, #3
 8005d66:	f000 f94f 	bl	8006008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	f000 f808 	bl	8005d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d70:	f7fa fe68 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40023c00 	.word	0x40023c00

08005d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d88:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <HAL_InitTick+0x54>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <HAL_InitTick+0x58>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	4619      	mov	r1, r3
 8005d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f967 	bl	8006072 <HAL_SYSTICK_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e00e      	b.n	8005dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b0f      	cmp	r3, #15
 8005db2:	d80a      	bhi.n	8005dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005db4:	2200      	movs	r2, #0
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	f000 f92f 	bl	800601e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005dc0:	4a06      	ldr	r2, [pc, #24]	; (8005ddc <HAL_InitTick+0x5c>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000000 	.word	0x20000000
 8005dd8:	200000dc 	.word	0x200000dc
 8005ddc:	200000d8 	.word	0x200000d8

08005de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_IncTick+0x20>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_IncTick+0x24>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <HAL_IncTick+0x24>)
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200000dc 	.word	0x200000dc
 8005e04:	200003f0 	.word	0x200003f0

08005e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <HAL_GetTick+0x14>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200003f0 	.word	0x200003f0

08005e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e28:	f7ff ffee 	bl	8005e08 <HAL_GetTick>
 8005e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d005      	beq.n	8005e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_Delay+0x44>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e46:	bf00      	nop
 8005e48:	f7ff ffde 	bl	8005e08 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d8f7      	bhi.n	8005e48 <HAL_Delay+0x28>
  {
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200000dc 	.word	0x200000dc

08005e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <__NVIC_SetPriorityGrouping+0x44>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e84:	4013      	ands	r3, r2
 8005e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e9a:	4a04      	ldr	r2, [pc, #16]	; (8005eac <__NVIC_SetPriorityGrouping+0x44>)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	60d3      	str	r3, [r2, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	e000ed00 	.word	0xe000ed00

08005eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f003 0307 	and.w	r3, r3, #7
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db0b      	blt.n	8005ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	f003 021f 	and.w	r2, r3, #31
 8005ee4:	4907      	ldr	r1, [pc, #28]	; (8005f04 <__NVIC_EnableIRQ+0x38>)
 8005ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2001      	movs	r0, #1
 8005eee:	fa00 f202 	lsl.w	r2, r0, r2
 8005ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	e000e100 	.word	0xe000e100

08005f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db0a      	blt.n	8005f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	490c      	ldr	r1, [pc, #48]	; (8005f54 <__NVIC_SetPriority+0x4c>)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	0112      	lsls	r2, r2, #4
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f30:	e00a      	b.n	8005f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4908      	ldr	r1, [pc, #32]	; (8005f58 <__NVIC_SetPriority+0x50>)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	0112      	lsls	r2, r2, #4
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	440b      	add	r3, r1
 8005f46:	761a      	strb	r2, [r3, #24]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	e000e100 	.word	0xe000e100
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f1c3 0307 	rsb	r3, r3, #7
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	bf28      	it	cs
 8005f7a:	2304      	movcs	r3, #4
 8005f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3304      	adds	r3, #4
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d902      	bls.n	8005f8c <NVIC_EncodePriority+0x30>
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3b03      	subs	r3, #3
 8005f8a:	e000      	b.n	8005f8e <NVIC_EncodePriority+0x32>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	fa01 f303 	lsl.w	r3, r1, r3
 8005fae:	43d9      	mvns	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb4:	4313      	orrs	r3, r2
         );
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fd4:	d301      	bcc.n	8005fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e00f      	b.n	8005ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <SysTick_Config+0x40>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fe2:	210f      	movs	r1, #15
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe8:	f7ff ff8e 	bl	8005f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <SysTick_Config+0x40>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ff2:	4b04      	ldr	r3, [pc, #16]	; (8006004 <SysTick_Config+0x40>)
 8005ff4:	2207      	movs	r2, #7
 8005ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	e000e010 	.word	0xe000e010

08006008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ff29 	bl	8005e68 <__NVIC_SetPriorityGrouping>
}
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	4603      	mov	r3, r0
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006030:	f7ff ff3e 	bl	8005eb0 <__NVIC_GetPriorityGrouping>
 8006034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	6978      	ldr	r0, [r7, #20]
 800603c:	f7ff ff8e 	bl	8005f5c <NVIC_EncodePriority>
 8006040:	4602      	mov	r2, r0
 8006042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff5d 	bl	8005f08 <__NVIC_SetPriority>
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	4603      	mov	r3, r0
 800605e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff31 	bl	8005ecc <__NVIC_EnableIRQ>
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff ffa2 	bl	8005fc4 <SysTick_Config>
 8006080:	4603      	mov	r3, r0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006096:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006098:	f7ff feb6 	bl	8005e08 <HAL_GetTick>
 800609c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d008      	beq.n	80060bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2280      	movs	r2, #128	; 0x80
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e052      	b.n	8006162 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0216 	bic.w	r2, r2, #22
 80060ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <HAL_DMA_Abort+0x62>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0208 	bic.w	r2, r2, #8
 80060fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800610c:	e013      	b.n	8006136 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800610e:	f7ff fe7b 	bl	8005e08 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b05      	cmp	r3, #5
 800611a:	d90c      	bls.n	8006136 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2203      	movs	r2, #3
 8006126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e015      	b.n	8006162 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e4      	bne.n	800610e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	223f      	movs	r2, #63	; 0x3f
 800614a:	409a      	lsls	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d004      	beq.n	8006188 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2280      	movs	r2, #128	; 0x80
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e00c      	b.n	80061a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2205      	movs	r2, #5
 800618c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b089      	sub	sp, #36	; 0x24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e159      	b.n	8006480 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061cc:	2201      	movs	r2, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4013      	ands	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	f040 8148 	bne.w	800647a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d005      	beq.n	8006202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d130      	bne.n	8006264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	2203      	movs	r2, #3
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	43db      	mvns	r3, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4013      	ands	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4313      	orrs	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006238:	2201      	movs	r2, #1
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4013      	ands	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 0201 	and.w	r2, r3, #1
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4313      	orrs	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b03      	cmp	r3, #3
 800626e:	d017      	beq.n	80062a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	2203      	movs	r2, #3
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4313      	orrs	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d123      	bne.n	80062f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	08da      	lsrs	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3208      	adds	r2, #8
 80062b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	220f      	movs	r2, #15
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	08da      	lsrs	r2, r3, #3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3208      	adds	r2, #8
 80062ee:	69b9      	ldr	r1, [r7, #24]
 80062f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	2203      	movs	r2, #3
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0203 	and.w	r2, r3, #3
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80a2 	beq.w	800647a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	4b57      	ldr	r3, [pc, #348]	; (8006498 <HAL_GPIO_Init+0x2e8>)
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	4a56      	ldr	r2, [pc, #344]	; (8006498 <HAL_GPIO_Init+0x2e8>)
 8006340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006344:	6453      	str	r3, [r2, #68]	; 0x44
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <HAL_GPIO_Init+0x2e8>)
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006352:	4a52      	ldr	r2, [pc, #328]	; (800649c <HAL_GPIO_Init+0x2ec>)
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	3302      	adds	r3, #2
 800635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	220f      	movs	r2, #15
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	43db      	mvns	r3, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4013      	ands	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a49      	ldr	r2, [pc, #292]	; (80064a0 <HAL_GPIO_Init+0x2f0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d019      	beq.n	80063b2 <HAL_GPIO_Init+0x202>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a48      	ldr	r2, [pc, #288]	; (80064a4 <HAL_GPIO_Init+0x2f4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <HAL_GPIO_Init+0x1fe>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a47      	ldr	r2, [pc, #284]	; (80064a8 <HAL_GPIO_Init+0x2f8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00d      	beq.n	80063aa <HAL_GPIO_Init+0x1fa>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a46      	ldr	r2, [pc, #280]	; (80064ac <HAL_GPIO_Init+0x2fc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d007      	beq.n	80063a6 <HAL_GPIO_Init+0x1f6>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a45      	ldr	r2, [pc, #276]	; (80064b0 <HAL_GPIO_Init+0x300>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_GPIO_Init+0x1f2>
 800639e:	2304      	movs	r3, #4
 80063a0:	e008      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063a2:	2307      	movs	r3, #7
 80063a4:	e006      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063a6:	2303      	movs	r3, #3
 80063a8:	e004      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e002      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <HAL_GPIO_Init+0x204>
 80063b2:	2300      	movs	r3, #0
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	f002 0203 	and.w	r2, r2, #3
 80063ba:	0092      	lsls	r2, r2, #2
 80063bc:	4093      	lsls	r3, r2
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063c4:	4935      	ldr	r1, [pc, #212]	; (800649c <HAL_GPIO_Init+0x2ec>)
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	089b      	lsrs	r3, r3, #2
 80063ca:	3302      	adds	r3, #2
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063d2:	4b38      	ldr	r3, [pc, #224]	; (80064b4 <HAL_GPIO_Init+0x304>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063f6:	4a2f      	ldr	r2, [pc, #188]	; (80064b4 <HAL_GPIO_Init+0x304>)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063fc:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <HAL_GPIO_Init+0x304>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006420:	4a24      	ldr	r2, [pc, #144]	; (80064b4 <HAL_GPIO_Init+0x304>)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006426:	4b23      	ldr	r3, [pc, #140]	; (80064b4 <HAL_GPIO_Init+0x304>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800644a:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <HAL_GPIO_Init+0x304>)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006450:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <HAL_GPIO_Init+0x304>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006474:	4a0f      	ldr	r2, [pc, #60]	; (80064b4 <HAL_GPIO_Init+0x304>)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3301      	adds	r3, #1
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	f67f aea2 	bls.w	80061cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	3724      	adds	r7, #36	; 0x24
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800
 800649c:	40013800 	.word	0x40013800
 80064a0:	40020000 	.word	0x40020000
 80064a4:	40020400 	.word	0x40020400
 80064a8:	40020800 	.word	0x40020800
 80064ac:	40020c00 	.word	0x40020c00
 80064b0:	40021000 	.word	0x40021000
 80064b4:	40013c00 	.word	0x40013c00

080064b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e0bb      	b.n	800664c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064d4:	2201      	movs	r2, #1
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4013      	ands	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f040 80ab 	bne.w	8006646 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80064f0:	4a5c      	ldr	r2, [pc, #368]	; (8006664 <HAL_GPIO_DeInit+0x1ac>)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	3302      	adds	r3, #2
 80064f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	220f      	movs	r2, #15
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a54      	ldr	r2, [pc, #336]	; (8006668 <HAL_GPIO_DeInit+0x1b0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d019      	beq.n	800654e <HAL_GPIO_DeInit+0x96>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a53      	ldr	r2, [pc, #332]	; (800666c <HAL_GPIO_DeInit+0x1b4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_GPIO_DeInit+0x92>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a52      	ldr	r2, [pc, #328]	; (8006670 <HAL_GPIO_DeInit+0x1b8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00d      	beq.n	8006546 <HAL_GPIO_DeInit+0x8e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a51      	ldr	r2, [pc, #324]	; (8006674 <HAL_GPIO_DeInit+0x1bc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d007      	beq.n	8006542 <HAL_GPIO_DeInit+0x8a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a50      	ldr	r2, [pc, #320]	; (8006678 <HAL_GPIO_DeInit+0x1c0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d101      	bne.n	800653e <HAL_GPIO_DeInit+0x86>
 800653a:	2304      	movs	r3, #4
 800653c:	e008      	b.n	8006550 <HAL_GPIO_DeInit+0x98>
 800653e:	2307      	movs	r3, #7
 8006540:	e006      	b.n	8006550 <HAL_GPIO_DeInit+0x98>
 8006542:	2303      	movs	r3, #3
 8006544:	e004      	b.n	8006550 <HAL_GPIO_DeInit+0x98>
 8006546:	2302      	movs	r3, #2
 8006548:	e002      	b.n	8006550 <HAL_GPIO_DeInit+0x98>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_GPIO_DeInit+0x98>
 800654e:	2300      	movs	r3, #0
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	f002 0203 	and.w	r2, r2, #3
 8006556:	0092      	lsls	r2, r2, #2
 8006558:	4093      	lsls	r3, r2
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	d132      	bne.n	80065c6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006560:	4b46      	ldr	r3, [pc, #280]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	43db      	mvns	r3, r3
 8006568:	4944      	ldr	r1, [pc, #272]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 800656a:	4013      	ands	r3, r2
 800656c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800656e:	4b43      	ldr	r3, [pc, #268]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	43db      	mvns	r3, r3
 8006576:	4941      	ldr	r1, [pc, #260]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 8006578:	4013      	ands	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800657c:	4b3f      	ldr	r3, [pc, #252]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	43db      	mvns	r3, r3
 8006584:	493d      	ldr	r1, [pc, #244]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 8006586:	4013      	ands	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800658a:	4b3c      	ldr	r3, [pc, #240]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	43db      	mvns	r3, r3
 8006592:	493a      	ldr	r1, [pc, #232]	; (800667c <HAL_GPIO_DeInit+0x1c4>)
 8006594:	4013      	ands	r3, r2
 8006596:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	220f      	movs	r2, #15
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80065a8:	4a2e      	ldr	r2, [pc, #184]	; (8006664 <HAL_GPIO_DeInit+0x1ac>)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	089b      	lsrs	r3, r3, #2
 80065ae:	3302      	adds	r3, #2
 80065b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	43da      	mvns	r2, r3
 80065b8:	482a      	ldr	r0, [pc, #168]	; (8006664 <HAL_GPIO_DeInit+0x1ac>)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	089b      	lsrs	r3, r3, #2
 80065be:	400a      	ands	r2, r1
 80065c0:	3302      	adds	r3, #2
 80065c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	2103      	movs	r1, #3
 80065d0:	fa01 f303 	lsl.w	r3, r1, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	401a      	ands	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	08da      	lsrs	r2, r3, #3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3208      	adds	r2, #8
 80065e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	220f      	movs	r2, #15
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	08d2      	lsrs	r2, r2, #3
 80065fc:	4019      	ands	r1, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3208      	adds	r2, #8
 8006602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	2103      	movs	r1, #3
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	401a      	ands	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	2101      	movs	r1, #1
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	fa01 f303 	lsl.w	r3, r1, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	401a      	ands	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	2103      	movs	r1, #3
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	43db      	mvns	r3, r3
 8006640:	401a      	ands	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	3301      	adds	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b0f      	cmp	r3, #15
 8006650:	f67f af40 	bls.w	80064d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40013800 	.word	0x40013800
 8006668:	40020000 	.word	0x40020000
 800666c:	40020400 	.word	0x40020400
 8006670:	40020800 	.word	0x40020800
 8006674:	40020c00 	.word	0x40020c00
 8006678:	40021000 	.word	0x40021000
 800667c:	40013c00 	.word	0x40013c00

08006680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	807b      	strh	r3, [r7, #2]
 800668c:	4613      	mov	r3, r2
 800668e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006690:	787b      	ldrb	r3, [r7, #1]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006696:	887a      	ldrh	r2, [r7, #2]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800669c:	e003      	b.n	80066a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800669e:	887b      	ldrh	r3, [r7, #2]
 80066a0:	041a      	lsls	r2, r3, #16
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	619a      	str	r2, [r3, #24]
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066c4:	887a      	ldrh	r2, [r7, #2]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4013      	ands	r3, r2
 80066ca:	041a      	lsls	r2, r3, #16
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	43d9      	mvns	r1, r3
 80066d0:	887b      	ldrh	r3, [r7, #2]
 80066d2:	400b      	ands	r3, r1
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	619a      	str	r2, [r3, #24]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
	...

080066e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e12b      	b.n	8006952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f95d 	bl	80069ce <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2224      	movs	r2, #36	; 0x24
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800673a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800674a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800674c:	f001 fc36 	bl	8007fbc <HAL_RCC_GetPCLK1Freq>
 8006750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4a81      	ldr	r2, [pc, #516]	; (800695c <HAL_I2C_Init+0x274>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d807      	bhi.n	800676c <HAL_I2C_Init+0x84>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4a80      	ldr	r2, [pc, #512]	; (8006960 <HAL_I2C_Init+0x278>)
 8006760:	4293      	cmp	r3, r2
 8006762:	bf94      	ite	ls
 8006764:	2301      	movls	r3, #1
 8006766:	2300      	movhi	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	e006      	b.n	800677a <HAL_I2C_Init+0x92>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a7d      	ldr	r2, [pc, #500]	; (8006964 <HAL_I2C_Init+0x27c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	bf94      	ite	ls
 8006774:	2301      	movls	r3, #1
 8006776:	2300      	movhi	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e0e7      	b.n	8006952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a78      	ldr	r2, [pc, #480]	; (8006968 <HAL_I2C_Init+0x280>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	0c9b      	lsrs	r3, r3, #18
 800678c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	4a6a      	ldr	r2, [pc, #424]	; (800695c <HAL_I2C_Init+0x274>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d802      	bhi.n	80067bc <HAL_I2C_Init+0xd4>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	3301      	adds	r3, #1
 80067ba:	e009      	b.n	80067d0 <HAL_I2C_Init+0xe8>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	4a69      	ldr	r2, [pc, #420]	; (800696c <HAL_I2C_Init+0x284>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	099b      	lsrs	r3, r3, #6
 80067ce:	3301      	adds	r3, #1
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	495c      	ldr	r1, [pc, #368]	; (800695c <HAL_I2C_Init+0x274>)
 80067ec:	428b      	cmp	r3, r1
 80067ee:	d819      	bhi.n	8006824 <HAL_I2C_Init+0x13c>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	1e59      	subs	r1, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006804:	400b      	ands	r3, r1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <HAL_I2C_Init+0x138>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1e59      	subs	r1, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	fbb1 f3f3 	udiv	r3, r1, r3
 8006818:	3301      	adds	r3, #1
 800681a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800681e:	e051      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 8006820:	2304      	movs	r3, #4
 8006822:	e04f      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d111      	bne.n	8006850 <HAL_I2C_Init+0x168>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	1e58      	subs	r0, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	440b      	add	r3, r1
 800683a:	fbb0 f3f3 	udiv	r3, r0, r3
 800683e:	3301      	adds	r3, #1
 8006840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006844:	2b00      	cmp	r3, #0
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e012      	b.n	8006876 <HAL_I2C_Init+0x18e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1e58      	subs	r0, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	0099      	lsls	r1, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	fbb0 f3f3 	udiv	r3, r0, r3
 8006866:	3301      	adds	r3, #1
 8006868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800686c:	2b00      	cmp	r3, #0
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_I2C_Init+0x196>
 800687a:	2301      	movs	r3, #1
 800687c:	e022      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10e      	bne.n	80068a4 <HAL_I2C_Init+0x1bc>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1e58      	subs	r0, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6859      	ldr	r1, [r3, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	440b      	add	r3, r1
 8006894:	fbb0 f3f3 	udiv	r3, r0, r3
 8006898:	3301      	adds	r3, #1
 800689a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a2:	e00f      	b.n	80068c4 <HAL_I2C_Init+0x1dc>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1e58      	subs	r0, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	0099      	lsls	r1, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ba:	3301      	adds	r3, #1
 80068bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	6809      	ldr	r1, [r1, #0]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6911      	ldr	r1, [r2, #16]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68d2      	ldr	r2, [r2, #12]
 80068fe:	4311      	orrs	r1, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	430b      	orrs	r3, r1
 8006906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	000186a0 	.word	0x000186a0
 8006960:	001e847f 	.word	0x001e847f
 8006964:	003d08ff 	.word	0x003d08ff
 8006968:	431bde83 	.word	0x431bde83
 800696c:	10624dd3 	.word	0x10624dd3

08006970 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e021      	b.n	80069c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2224      	movs	r2, #36	; 0x24
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f821 	bl	80069e2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
	...

080069f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	4608      	mov	r0, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	461a      	mov	r2, r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	817b      	strh	r3, [r7, #10]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	813b      	strh	r3, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a12:	f7ff f9f9 	bl	8005e08 <HAL_GetTick>
 8006a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	f040 80d9 	bne.w	8006bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2319      	movs	r3, #25
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	496d      	ldr	r1, [pc, #436]	; (8006be4 <HAL_I2C_Mem_Write+0x1ec>)
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fc99 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e0cc      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_I2C_Mem_Write+0x56>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e0c5      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d007      	beq.n	8006a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2221      	movs	r2, #33	; 0x21
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2240      	movs	r2, #64	; 0x40
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a4d      	ldr	r2, [pc, #308]	; (8006be8 <HAL_I2C_Mem_Write+0x1f0>)
 8006ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ab6:	88f8      	ldrh	r0, [r7, #6]
 8006ab8:	893a      	ldrh	r2, [r7, #8]
 8006aba:	8979      	ldrh	r1, [r7, #10]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fad0 	bl	800706c <I2C_RequestMemoryWrite>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d052      	beq.n	8006b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e081      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fd1a 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d107      	bne.n	8006afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e06b      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	781a      	ldrb	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d11b      	bne.n	8006b78 <HAL_I2C_Mem_Write+0x180>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d017      	beq.n	8006b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1aa      	bne.n	8006ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fd06 	bl	8007596 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00d      	beq.n	8006bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d107      	bne.n	8006ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e016      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	00100002 	.word	0x00100002
 8006be8:	ffff0000 	.word	0xffff0000

08006bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	; 0x30
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	817b      	strh	r3, [r7, #10]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	813b      	strh	r3, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c06:	f7ff f8ff 	bl	8005e08 <HAL_GetTick>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	f040 8208 	bne.w	800702a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	2319      	movs	r3, #25
 8006c20:	2201      	movs	r2, #1
 8006c22:	497b      	ldr	r1, [pc, #492]	; (8006e10 <HAL_I2C_Mem_Read+0x224>)
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fb9f 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c30:	2302      	movs	r3, #2
 8006c32:	e1fb      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_I2C_Mem_Read+0x56>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e1f4      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d007      	beq.n	8006c68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2222      	movs	r2, #34	; 0x22
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2240      	movs	r2, #64	; 0x40
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	; (8006e14 <HAL_I2C_Mem_Read+0x228>)
 8006ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006caa:	88f8      	ldrh	r0, [r7, #6]
 8006cac:	893a      	ldrh	r2, [r7, #8]
 8006cae:	8979      	ldrh	r1, [r7, #10]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4603      	mov	r3, r0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fa6c 	bl	8007198 <I2C_RequestMemoryRead>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e1b0      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d113      	bne.n	8006cfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	623b      	str	r3, [r7, #32]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	623b      	str	r3, [r7, #32]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e184      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d11b      	bne.n	8006d3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	e164      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d11b      	bne.n	8006d7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d62:	2300      	movs	r3, #0
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	e144      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d90:	e138      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	f200 80f1 	bhi.w	8006f7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d123      	bne.n	8006dec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fc35 	bl	8007618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e139      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dea:	e10b      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d14e      	bne.n	8006e92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4906      	ldr	r1, [pc, #24]	; (8006e18 <HAL_I2C_Mem_Read+0x22c>)
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fab2 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d008      	beq.n	8006e1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e10e      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
 8006e0e:	bf00      	nop
 8006e10:	00100002 	.word	0x00100002
 8006e14:	ffff0000 	.word	0xffff0000
 8006e18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e90:	e0b8      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4966      	ldr	r1, [pc, #408]	; (8007034 <HAL_I2C_Mem_Read+0x448>)
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fa63 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0bf      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	494f      	ldr	r1, [pc, #316]	; (8007034 <HAL_I2C_Mem_Read+0x448>)
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa35 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e091      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f7c:	e042      	b.n	8007004 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 fb48 	bl	8007618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e04c      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d118      	bne.n	8007004 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	f47f aec2 	bne.w	8006d92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	e000      	b.n	800702c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3728      	adds	r7, #40	; 0x28
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	00010004 	.word	0x00010004

08007038 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007046:	b2db      	uxtb	r3, r3
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4603      	mov	r3, r0
 800707c:	817b      	strh	r3, [r7, #10]
 800707e:	460b      	mov	r3, r1
 8007080:	813b      	strh	r3, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2200      	movs	r2, #0
 800709e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f960 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070bc:	d103      	bne.n	80070c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e05f      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	492d      	ldr	r1, [pc, #180]	; (8007194 <I2C_RequestMemoryWrite+0x128>)
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f998 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e04c      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fa02 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	2b04      	cmp	r3, #4
 800711c:	d107      	bne.n	800712e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e02b      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007138:	893b      	ldrh	r3, [r7, #8]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	611a      	str	r2, [r3, #16]
 8007142:	e021      	b.n	8007188 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007144:	893b      	ldrh	r3, [r7, #8]
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b29b      	uxth	r3, r3
 800714a:	b2da      	uxtb	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007154:	6a39      	ldr	r1, [r7, #32]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f9dc 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	2b04      	cmp	r3, #4
 8007168:	d107      	bne.n	800717a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e005      	b.n	800718a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	00010002 	.word	0x00010002

08007198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	4608      	mov	r0, r1
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	817b      	strh	r3, [r7, #10]
 80071aa:	460b      	mov	r3, r1
 80071ac:	813b      	strh	r3, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	2200      	movs	r2, #0
 80071da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f8c2 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f8:	d103      	bne.n	8007202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e0aa      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007206:	897b      	ldrh	r3, [r7, #10]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	6a3a      	ldr	r2, [r7, #32]
 800721a:	4952      	ldr	r1, [pc, #328]	; (8007364 <I2C_RequestMemoryRead+0x1cc>)
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f8fa 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e097      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007244:	6a39      	ldr	r1, [r7, #32]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f964 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00d      	beq.n	800726e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	2b04      	cmp	r3, #4
 8007258:	d107      	bne.n	800726a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e076      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d105      	bne.n	8007280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007274:	893b      	ldrh	r3, [r7, #8]
 8007276:	b2da      	uxtb	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	611a      	str	r2, [r3, #16]
 800727e:	e021      	b.n	80072c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007280:	893b      	ldrh	r3, [r7, #8]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	b29b      	uxth	r3, r3
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800728e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007290:	6a39      	ldr	r1, [r7, #32]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f93e 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d107      	bne.n	80072b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e050      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072ba:	893b      	ldrh	r3, [r7, #8]
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c6:	6a39      	ldr	r1, [r7, #32]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f923 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d107      	bne.n	80072ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e035      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2200      	movs	r2, #0
 8007308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f82b 	bl	8007368 <I2C_WaitOnFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00d      	beq.n	8007334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007326:	d103      	bne.n	8007330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800732e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e013      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007334:	897b      	ldrh	r3, [r7, #10]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	6a3a      	ldr	r2, [r7, #32]
 8007348:	4906      	ldr	r1, [pc, #24]	; (8007364 <I2C_RequestMemoryRead+0x1cc>)
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f863 	bl	8007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	00010002 	.word	0x00010002

08007368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007378:	e025      	b.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d021      	beq.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007382:	f7fe fd41 	bl	8005e08 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d302      	bcc.n	8007398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d116      	bne.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0220 	orr.w	r2, r3, #32
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e023      	b.n	800740e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10d      	bne.n	80073ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	43da      	mvns	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4013      	ands	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bf0c      	ite	eq
 80073e2:	2301      	moveq	r3, #1
 80073e4:	2300      	movne	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	e00c      	b.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	43da      	mvns	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	429a      	cmp	r2, r3
 800740a:	d0b6      	beq.n	800737a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007424:	e051      	b.n	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007434:	d123      	bne.n	800747e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007444:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800744e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f043 0204 	orr.w	r2, r3, #4
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e046      	b.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d021      	beq.n	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007486:	f7fe fcbf 	bl	8005e08 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d116      	bne.n	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f043 0220 	orr.w	r2, r3, #32
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e020      	b.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10c      	bne.n	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	43da      	mvns	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e00b      	b.n	8007506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	43da      	mvns	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4013      	ands	r3, r2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf14      	ite	ne
 8007500:	2301      	movne	r3, #1
 8007502:	2300      	moveq	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d18d      	bne.n	8007426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007520:	e02d      	b.n	800757e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f8ce 	bl	80076c4 <I2C_IsAcknowledgeFailed>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e02d      	b.n	800758e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d021      	beq.n	800757e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753a:	f7fe fc65 	bl	8005e08 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d116      	bne.n	800757e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e007      	b.n	800758e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007588:	2b80      	cmp	r3, #128	; 0x80
 800758a:	d1ca      	bne.n	8007522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075a2:	e02d      	b.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f88d 	bl	80076c4 <I2C_IsAcknowledgeFailed>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e02d      	b.n	8007610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d021      	beq.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075bc:	f7fe fc24 	bl	8005e08 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d302      	bcc.n	80075d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d116      	bne.n	8007600 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e007      	b.n	8007610 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b04      	cmp	r3, #4
 800760c:	d1ca      	bne.n	80075a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007624:	e042      	b.n	80076ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b10      	cmp	r3, #16
 8007632:	d119      	bne.n	8007668 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0210 	mvn.w	r2, #16
 800763c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e029      	b.n	80076bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007668:	f7fe fbce 	bl	8005e08 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d116      	bne.n	80076ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	f043 0220 	orr.w	r2, r3, #32
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e007      	b.n	80076bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b6:	2b40      	cmp	r3, #64	; 0x40
 80076b8:	d1b5      	bne.n	8007626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076da:	d11b      	bne.n	8007714 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	f043 0204 	orr.w	r2, r3, #4
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e264      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d075      	beq.n	800782e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007742:	4ba3      	ldr	r3, [pc, #652]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 030c 	and.w	r3, r3, #12
 800774a:	2b04      	cmp	r3, #4
 800774c:	d00c      	beq.n	8007768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800774e:	4ba0      	ldr	r3, [pc, #640]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007756:	2b08      	cmp	r3, #8
 8007758:	d112      	bne.n	8007780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775a:	4b9d      	ldr	r3, [pc, #628]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007766:	d10b      	bne.n	8007780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007768:	4b99      	ldr	r3, [pc, #612]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d05b      	beq.n	800782c <HAL_RCC_OscConfig+0x108>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d157      	bne.n	800782c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e23f      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007788:	d106      	bne.n	8007798 <HAL_RCC_OscConfig+0x74>
 800778a:	4b91      	ldr	r3, [pc, #580]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a90      	ldr	r2, [pc, #576]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	e01d      	b.n	80077d4 <HAL_RCC_OscConfig+0xb0>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077a0:	d10c      	bne.n	80077bc <HAL_RCC_OscConfig+0x98>
 80077a2:	4b8b      	ldr	r3, [pc, #556]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a8a      	ldr	r2, [pc, #552]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	4b88      	ldr	r3, [pc, #544]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a87      	ldr	r2, [pc, #540]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	e00b      	b.n	80077d4 <HAL_RCC_OscConfig+0xb0>
 80077bc:	4b84      	ldr	r3, [pc, #528]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a83      	ldr	r2, [pc, #524]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	4b81      	ldr	r3, [pc, #516]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a80      	ldr	r2, [pc, #512]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d013      	beq.n	8007804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077dc:	f7fe fb14 	bl	8005e08 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077e4:	f7fe fb10 	bl	8005e08 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b64      	cmp	r3, #100	; 0x64
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e204      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f6:	4b76      	ldr	r3, [pc, #472]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0xc0>
 8007802:	e014      	b.n	800782e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007804:	f7fe fb00 	bl	8005e08 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800780a:	e008      	b.n	800781e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800780c:	f7fe fafc 	bl	8005e08 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b64      	cmp	r3, #100	; 0x64
 8007818:	d901      	bls.n	800781e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e1f0      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800781e:	4b6c      	ldr	r3, [pc, #432]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f0      	bne.n	800780c <HAL_RCC_OscConfig+0xe8>
 800782a:	e000      	b.n	800782e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800782c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d063      	beq.n	8007902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800783a:	4b65      	ldr	r3, [pc, #404]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 030c 	and.w	r3, r3, #12
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007846:	4b62      	ldr	r3, [pc, #392]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800784e:	2b08      	cmp	r3, #8
 8007850:	d11c      	bne.n	800788c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007852:	4b5f      	ldr	r3, [pc, #380]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d116      	bne.n	800788c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800785e:	4b5c      	ldr	r3, [pc, #368]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <HAL_RCC_OscConfig+0x152>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d001      	beq.n	8007876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e1c4      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007876:	4b56      	ldr	r3, [pc, #344]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4952      	ldr	r1, [pc, #328]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007886:	4313      	orrs	r3, r2
 8007888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800788a:	e03a      	b.n	8007902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d020      	beq.n	80078d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007894:	4b4f      	ldr	r3, [pc, #316]	; (80079d4 <HAL_RCC_OscConfig+0x2b0>)
 8007896:	2201      	movs	r2, #1
 8007898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789a:	f7fe fab5 	bl	8005e08 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078a2:	f7fe fab1 	bl	8005e08 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e1a5      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b4:	4b46      	ldr	r3, [pc, #280]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0f0      	beq.n	80078a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c0:	4b43      	ldr	r3, [pc, #268]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	4940      	ldr	r1, [pc, #256]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	600b      	str	r3, [r1, #0]
 80078d4:	e015      	b.n	8007902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078d6:	4b3f      	ldr	r3, [pc, #252]	; (80079d4 <HAL_RCC_OscConfig+0x2b0>)
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078dc:	f7fe fa94 	bl	8005e08 <HAL_GetTick>
 80078e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078e2:	e008      	b.n	80078f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e4:	f7fe fa90 	bl	8005e08 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e184      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078f6:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f0      	bne.n	80078e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d030      	beq.n	8007970 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d016      	beq.n	8007944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007916:	4b30      	ldr	r3, [pc, #192]	; (80079d8 <HAL_RCC_OscConfig+0x2b4>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791c:	f7fe fa74 	bl	8005e08 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007924:	f7fe fa70 	bl	8005e08 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e164      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007936:	4b26      	ldr	r3, [pc, #152]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCC_OscConfig+0x200>
 8007942:	e015      	b.n	8007970 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007944:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <HAL_RCC_OscConfig+0x2b4>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800794a:	f7fe fa5d 	bl	8005e08 <HAL_GetTick>
 800794e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007950:	e008      	b.n	8007964 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007952:	f7fe fa59 	bl	8005e08 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e14d      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007964:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f0      	bne.n	8007952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80a0 	beq.w	8007abe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007982:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10f      	bne.n	80079ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 8007998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799c:	6413      	str	r3, [r2, #64]	; 0x40
 800799e:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a6:	60bb      	str	r3, [r7, #8]
 80079a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079aa:	2301      	movs	r3, #1
 80079ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ae:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <HAL_RCC_OscConfig+0x2b8>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d121      	bne.n	80079fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079ba:	4b08      	ldr	r3, [pc, #32]	; (80079dc <HAL_RCC_OscConfig+0x2b8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a07      	ldr	r2, [pc, #28]	; (80079dc <HAL_RCC_OscConfig+0x2b8>)
 80079c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079c6:	f7fe fa1f 	bl	8005e08 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079cc:	e011      	b.n	80079f2 <HAL_RCC_OscConfig+0x2ce>
 80079ce:	bf00      	nop
 80079d0:	40023800 	.word	0x40023800
 80079d4:	42470000 	.word	0x42470000
 80079d8:	42470e80 	.word	0x42470e80
 80079dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e0:	f7fe fa12 	bl	8005e08 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e106      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f2:	4b85      	ldr	r3, [pc, #532]	; (8007c08 <HAL_RCC_OscConfig+0x4e4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d106      	bne.n	8007a14 <HAL_RCC_OscConfig+0x2f0>
 8007a06:	4b81      	ldr	r3, [pc, #516]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	4a80      	ldr	r2, [pc, #512]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	6713      	str	r3, [r2, #112]	; 0x70
 8007a12:	e01c      	b.n	8007a4e <HAL_RCC_OscConfig+0x32a>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b05      	cmp	r3, #5
 8007a1a:	d10c      	bne.n	8007a36 <HAL_RCC_OscConfig+0x312>
 8007a1c:	4b7b      	ldr	r3, [pc, #492]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	4a7a      	ldr	r2, [pc, #488]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a22:	f043 0304 	orr.w	r3, r3, #4
 8007a26:	6713      	str	r3, [r2, #112]	; 0x70
 8007a28:	4b78      	ldr	r3, [pc, #480]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2c:	4a77      	ldr	r2, [pc, #476]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	6713      	str	r3, [r2, #112]	; 0x70
 8007a34:	e00b      	b.n	8007a4e <HAL_RCC_OscConfig+0x32a>
 8007a36:	4b75      	ldr	r3, [pc, #468]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	4a74      	ldr	r2, [pc, #464]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	6713      	str	r3, [r2, #112]	; 0x70
 8007a42:	4b72      	ldr	r3, [pc, #456]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	4a71      	ldr	r2, [pc, #452]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d015      	beq.n	8007a82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a56:	f7fe f9d7 	bl	8005e08 <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a5c:	e00a      	b.n	8007a74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a5e:	f7fe f9d3 	bl	8005e08 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e0c5      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a74:	4b65      	ldr	r3, [pc, #404]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ee      	beq.n	8007a5e <HAL_RCC_OscConfig+0x33a>
 8007a80:	e014      	b.n	8007aac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a82:	f7fe f9c1 	bl	8005e08 <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a88:	e00a      	b.n	8007aa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a8a:	f7fe f9bd 	bl	8005e08 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e0af      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa0:	4b5a      	ldr	r3, [pc, #360]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1ee      	bne.n	8007a8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d105      	bne.n	8007abe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab2:	4b56      	ldr	r3, [pc, #344]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	4a55      	ldr	r2, [pc, #340]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 809b 	beq.w	8007bfe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ac8:	4b50      	ldr	r3, [pc, #320]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 030c 	and.w	r3, r3, #12
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d05c      	beq.n	8007b8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d141      	bne.n	8007b60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007adc:	4b4c      	ldr	r3, [pc, #304]	; (8007c10 <HAL_RCC_OscConfig+0x4ec>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae2:	f7fe f991 	bl	8005e08 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aea:	f7fe f98d 	bl	8005e08 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e081      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007afc:	4b43      	ldr	r3, [pc, #268]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1f0      	bne.n	8007aea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	019b      	lsls	r3, r3, #6
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	3b01      	subs	r3, #1
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	061b      	lsls	r3, r3, #24
 8007b2c:	4937      	ldr	r1, [pc, #220]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b32:	4b37      	ldr	r3, [pc, #220]	; (8007c10 <HAL_RCC_OscConfig+0x4ec>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b38:	f7fe f966 	bl	8005e08 <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b40:	f7fe f962 	bl	8005e08 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e056      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b52:	4b2e      	ldr	r3, [pc, #184]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f0      	beq.n	8007b40 <HAL_RCC_OscConfig+0x41c>
 8007b5e:	e04e      	b.n	8007bfe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b60:	4b2b      	ldr	r3, [pc, #172]	; (8007c10 <HAL_RCC_OscConfig+0x4ec>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b66:	f7fe f94f 	bl	8005e08 <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6e:	f7fe f94b 	bl	8005e08 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e03f      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b80:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f0      	bne.n	8007b6e <HAL_RCC_OscConfig+0x44a>
 8007b8c:	e037      	b.n	8007bfe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e032      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b9a:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <HAL_RCC_OscConfig+0x4e8>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d028      	beq.n	8007bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d121      	bne.n	8007bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d11a      	bne.n	8007bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bca:	4013      	ands	r3, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bd0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d111      	bne.n	8007bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	3b01      	subs	r3, #1
 8007be4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d107      	bne.n	8007bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d001      	beq.n	8007bfe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40007000 	.word	0x40007000
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	42470060 	.word	0x42470060

08007c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e0cc      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c28:	4b68      	ldr	r3, [pc, #416]	; (8007dcc <HAL_RCC_ClockConfig+0x1b8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d90c      	bls.n	8007c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c36:	4b65      	ldr	r3, [pc, #404]	; (8007dcc <HAL_RCC_ClockConfig+0x1b8>)
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c3e:	4b63      	ldr	r3, [pc, #396]	; (8007dcc <HAL_RCC_ClockConfig+0x1b8>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d001      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e0b8      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d020      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c68:	4b59      	ldr	r3, [pc, #356]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	4a58      	ldr	r2, [pc, #352]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c80:	4b53      	ldr	r3, [pc, #332]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	4a52      	ldr	r2, [pc, #328]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c8c:	4b50      	ldr	r3, [pc, #320]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	494d      	ldr	r1, [pc, #308]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d044      	beq.n	8007d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d107      	bne.n	8007cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cb2:	4b47      	ldr	r3, [pc, #284]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d119      	bne.n	8007cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e07f      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d003      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d107      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cd2:	4b3f      	ldr	r3, [pc, #252]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e06f      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce2:	4b3b      	ldr	r3, [pc, #236]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e067      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cf2:	4b37      	ldr	r3, [pc, #220]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f023 0203 	bic.w	r2, r3, #3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4934      	ldr	r1, [pc, #208]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d04:	f7fe f880 	bl	8005e08 <HAL_GetTick>
 8007d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0a:	e00a      	b.n	8007d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d0c:	f7fe f87c 	bl	8005e08 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e04f      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d22:	4b2b      	ldr	r3, [pc, #172]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 020c 	and.w	r2, r3, #12
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d1eb      	bne.n	8007d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d34:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <HAL_RCC_ClockConfig+0x1b8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d20c      	bcs.n	8007d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d42:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <HAL_RCC_ClockConfig+0x1b8>)
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4a:	4b20      	ldr	r3, [pc, #128]	; (8007dcc <HAL_RCC_ClockConfig+0x1b8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d001      	beq.n	8007d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e032      	b.n	8007dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d68:	4b19      	ldr	r3, [pc, #100]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4916      	ldr	r1, [pc, #88]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d86:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	490e      	ldr	r1, [pc, #56]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d9a:	f000 f821 	bl	8007de0 <HAL_RCC_GetSysClockFreq>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	091b      	lsrs	r3, r3, #4
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	490a      	ldr	r1, [pc, #40]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8007dac:	5ccb      	ldrb	r3, [r1, r3]
 8007dae:	fa22 f303 	lsr.w	r3, r2, r3
 8007db2:	4a09      	ldr	r2, [pc, #36]	; (8007dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <HAL_RCC_ClockConfig+0x1c8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fd ffe0 	bl	8005d80 <HAL_InitTick>

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	40023c00 	.word	0x40023c00
 8007dd0:	40023800 	.word	0x40023800
 8007dd4:	0800a4f4 	.word	0x0800a4f4
 8007dd8:	20000000 	.word	0x20000000
 8007ddc:	200000d8 	.word	0x200000d8

08007de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	2300      	movs	r3, #0
 8007df2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007df8:	4b67      	ldr	r3, [pc, #412]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 030c 	and.w	r3, r3, #12
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d00d      	beq.n	8007e20 <HAL_RCC_GetSysClockFreq+0x40>
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	f200 80bd 	bhi.w	8007f84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_RCC_GetSysClockFreq+0x34>
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d003      	beq.n	8007e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e12:	e0b7      	b.n	8007f84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e14:	4b61      	ldr	r3, [pc, #388]	; (8007f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e16:	60bb      	str	r3, [r7, #8]
       break;
 8007e18:	e0b7      	b.n	8007f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e1a:	4b61      	ldr	r3, [pc, #388]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e1c:	60bb      	str	r3, [r7, #8]
      break;
 8007e1e:	e0b4      	b.n	8007f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e20:	4b5d      	ldr	r3, [pc, #372]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e2a:	4b5b      	ldr	r3, [pc, #364]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d04d      	beq.n	8007ed2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e36:	4b58      	ldr	r3, [pc, #352]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	099b      	lsrs	r3, r3, #6
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e46:	f04f 0100 	mov.w	r1, #0
 8007e4a:	ea02 0800 	and.w	r8, r2, r0
 8007e4e:	ea03 0901 	and.w	r9, r3, r1
 8007e52:	4640      	mov	r0, r8
 8007e54:	4649      	mov	r1, r9
 8007e56:	f04f 0200 	mov.w	r2, #0
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	014b      	lsls	r3, r1, #5
 8007e60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e64:	0142      	lsls	r2, r0, #5
 8007e66:	4610      	mov	r0, r2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	ebb0 0008 	subs.w	r0, r0, r8
 8007e6e:	eb61 0109 	sbc.w	r1, r1, r9
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	018b      	lsls	r3, r1, #6
 8007e7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e80:	0182      	lsls	r2, r0, #6
 8007e82:	1a12      	subs	r2, r2, r0
 8007e84:	eb63 0301 	sbc.w	r3, r3, r1
 8007e88:	f04f 0000 	mov.w	r0, #0
 8007e8c:	f04f 0100 	mov.w	r1, #0
 8007e90:	00d9      	lsls	r1, r3, #3
 8007e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e96:	00d0      	lsls	r0, r2, #3
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	eb12 0208 	adds.w	r2, r2, r8
 8007ea0:	eb43 0309 	adc.w	r3, r3, r9
 8007ea4:	f04f 0000 	mov.w	r0, #0
 8007ea8:	f04f 0100 	mov.w	r1, #0
 8007eac:	0259      	lsls	r1, r3, #9
 8007eae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007eb2:	0250      	lsls	r0, r2, #9
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4619      	mov	r1, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	f7f8 f9dc 	bl	8000280 <__aeabi_uldivmod>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4613      	mov	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e04a      	b.n	8007f68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ed2:	4b31      	ldr	r3, [pc, #196]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ee2:	f04f 0100 	mov.w	r1, #0
 8007ee6:	ea02 0400 	and.w	r4, r2, r0
 8007eea:	ea03 0501 	and.w	r5, r3, r1
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	014b      	lsls	r3, r1, #5
 8007efc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f00:	0142      	lsls	r2, r0, #5
 8007f02:	4610      	mov	r0, r2
 8007f04:	4619      	mov	r1, r3
 8007f06:	1b00      	subs	r0, r0, r4
 8007f08:	eb61 0105 	sbc.w	r1, r1, r5
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	018b      	lsls	r3, r1, #6
 8007f16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f1a:	0182      	lsls	r2, r0, #6
 8007f1c:	1a12      	subs	r2, r2, r0
 8007f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	00d9      	lsls	r1, r3, #3
 8007f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f30:	00d0      	lsls	r0, r2, #3
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	1912      	adds	r2, r2, r4
 8007f38:	eb45 0303 	adc.w	r3, r5, r3
 8007f3c:	f04f 0000 	mov.w	r0, #0
 8007f40:	f04f 0100 	mov.w	r1, #0
 8007f44:	0299      	lsls	r1, r3, #10
 8007f46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f4a:	0290      	lsls	r0, r2, #10
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4610      	mov	r0, r2
 8007f52:	4619      	mov	r1, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f04f 0300 	mov.w	r3, #0
 8007f5c:	f7f8 f990 	bl	8000280 <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4613      	mov	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f68:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	3301      	adds	r3, #1
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	60bb      	str	r3, [r7, #8]
      break;
 8007f82:	e002      	b.n	8007f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f84:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f86:	60bb      	str	r3, [r7, #8]
      break;
 8007f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007f96:	bf00      	nop
 8007f98:	40023800 	.word	0x40023800
 8007f9c:	00f42400 	.word	0x00f42400
 8007fa0:	007a1200 	.word	0x007a1200

08007fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fa8:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007faa:	681b      	ldr	r3, [r3, #0]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000000 	.word	0x20000000

08007fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fc0:	f7ff fff0 	bl	8007fa4 <HAL_RCC_GetHCLKFreq>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	0a9b      	lsrs	r3, r3, #10
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	4903      	ldr	r1, [pc, #12]	; (8007fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fd2:	5ccb      	ldrb	r3, [r1, r3]
 8007fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	0800a504 	.word	0x0800a504

08007fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fe8:	f7ff ffdc 	bl	8007fa4 <HAL_RCC_GetHCLKFreq>
 8007fec:	4602      	mov	r2, r0
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	0b5b      	lsrs	r3, r3, #13
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	4903      	ldr	r1, [pc, #12]	; (8008008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ffa:	5ccb      	ldrb	r3, [r1, r3]
 8007ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008000:	4618      	mov	r0, r3
 8008002:	bd80      	pop	{r7, pc}
 8008004:	40023800 	.word	0x40023800
 8008008:	0800a504 	.word	0x0800a504

0800800c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e041      	b.n	80080a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7f8 fd2e 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	4619      	mov	r1, r3
 800804a:	4610      	mov	r0, r2
 800804c:	f000 fbd8 	bl	8008800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e041      	b.n	8008140 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f839 	bl	8008148 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f000 fb89 	bl	8008800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <HAL_TIM_OC_Start_IT+0x28>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b01      	cmp	r3, #1
 800817a:	bf14      	ite	ne
 800817c:	2301      	movne	r3, #1
 800817e:	2300      	moveq	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	e022      	b.n	80081ca <HAL_TIM_OC_Start_IT+0x6e>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b04      	cmp	r3, #4
 8008188:	d109      	bne.n	800819e <HAL_TIM_OC_Start_IT+0x42>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b01      	cmp	r3, #1
 8008194:	bf14      	ite	ne
 8008196:	2301      	movne	r3, #1
 8008198:	2300      	moveq	r3, #0
 800819a:	b2db      	uxtb	r3, r3
 800819c:	e015      	b.n	80081ca <HAL_TIM_OC_Start_IT+0x6e>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d109      	bne.n	80081b8 <HAL_TIM_OC_Start_IT+0x5c>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	bf14      	ite	ne
 80081b0:	2301      	movne	r3, #1
 80081b2:	2300      	moveq	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	e008      	b.n	80081ca <HAL_TIM_OC_Start_IT+0x6e>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	bf14      	ite	ne
 80081c4:	2301      	movne	r3, #1
 80081c6:	2300      	moveq	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e0b3      	b.n	800833a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <HAL_TIM_OC_Start_IT+0x86>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e0:	e013      	b.n	800820a <HAL_TIM_OC_Start_IT+0xae>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_OC_Start_IT+0x96>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081f0:	e00b      	b.n	800820a <HAL_TIM_OC_Start_IT+0xae>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d104      	bne.n	8008202 <HAL_TIM_OC_Start_IT+0xa6>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008200:	e003      	b.n	800820a <HAL_TIM_OC_Start_IT+0xae>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b0c      	cmp	r3, #12
 800820e:	d841      	bhi.n	8008294 <HAL_TIM_OC_Start_IT+0x138>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <HAL_TIM_OC_Start_IT+0xbc>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	0800824d 	.word	0x0800824d
 800821c:	08008295 	.word	0x08008295
 8008220:	08008295 	.word	0x08008295
 8008224:	08008295 	.word	0x08008295
 8008228:	0800825f 	.word	0x0800825f
 800822c:	08008295 	.word	0x08008295
 8008230:	08008295 	.word	0x08008295
 8008234:	08008295 	.word	0x08008295
 8008238:	08008271 	.word	0x08008271
 800823c:	08008295 	.word	0x08008295
 8008240:	08008295 	.word	0x08008295
 8008244:	08008295 	.word	0x08008295
 8008248:	08008283 	.word	0x08008283
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0202 	orr.w	r2, r2, #2
 800825a:	60da      	str	r2, [r3, #12]
      break;
 800825c:	e01d      	b.n	800829a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f042 0204 	orr.w	r2, r2, #4
 800826c:	60da      	str	r2, [r3, #12]
      break;
 800826e:	e014      	b.n	800829a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0208 	orr.w	r2, r2, #8
 800827e:	60da      	str	r2, [r3, #12]
      break;
 8008280:	e00b      	b.n	800829a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0210 	orr.w	r2, r2, #16
 8008290:	60da      	str	r2, [r3, #12]
      break;
 8008292:	e002      	b.n	800829a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]
      break;
 8008298:	bf00      	nop
  }

  if (status == HAL_OK)
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d14b      	bne.n	8008338 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2201      	movs	r2, #1
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fd4f 	bl	8008d4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a24      	ldr	r2, [pc, #144]	; (8008344 <HAL_TIM_OC_Start_IT+0x1e8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d107      	bne.n	80082c8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <HAL_TIM_OC_Start_IT+0x1e8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <HAL_TIM_OC_Start_IT+0x1a8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082da:	d013      	beq.n	8008304 <HAL_TIM_OC_Start_IT+0x1a8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a19      	ldr	r2, [pc, #100]	; (8008348 <HAL_TIM_OC_Start_IT+0x1ec>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <HAL_TIM_OC_Start_IT+0x1a8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a18      	ldr	r2, [pc, #96]	; (800834c <HAL_TIM_OC_Start_IT+0x1f0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_TIM_OC_Start_IT+0x1a8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a16      	ldr	r2, [pc, #88]	; (8008350 <HAL_TIM_OC_Start_IT+0x1f4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIM_OC_Start_IT+0x1a8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a15      	ldr	r2, [pc, #84]	; (8008354 <HAL_TIM_OC_Start_IT+0x1f8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d111      	bne.n	8008328 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b06      	cmp	r3, #6
 8008314:	d010      	beq.n	8008338 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0201 	orr.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008326:	e007      	b.n	8008338 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0201 	orr.w	r2, r2, #1
 8008336:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40010000 	.word	0x40010000
 8008348:	40000400 	.word	0x40000400
 800834c:	40000800 	.word	0x40000800
 8008350:	40000c00 	.word	0x40000c00
 8008354:	40014000 	.word	0x40014000

08008358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b02      	cmp	r3, #2
 800836c:	d122      	bne.n	80083b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b02      	cmp	r3, #2
 800837a:	d11b      	bne.n	80083b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f06f 0202 	mvn.w	r2, #2
 8008384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa11 	bl	80087c2 <HAL_TIM_IC_CaptureCallback>
 80083a0:	e005      	b.n	80083ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7f8 fb0e 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fa14 	bl	80087d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d122      	bne.n	8008408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d11b      	bne.n	8008408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f06f 0204 	mvn.w	r2, #4
 80083d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2202      	movs	r2, #2
 80083de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9e7 	bl	80087c2 <HAL_TIM_IC_CaptureCallback>
 80083f4:	e005      	b.n	8008402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7f8 fae4 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f9ea 	bl	80087d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b08      	cmp	r3, #8
 8008414:	d122      	bne.n	800845c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b08      	cmp	r3, #8
 8008422:	d11b      	bne.n	800845c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f06f 0208 	mvn.w	r2, #8
 800842c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2204      	movs	r2, #4
 8008432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9bd 	bl	80087c2 <HAL_TIM_IC_CaptureCallback>
 8008448:	e005      	b.n	8008456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7f8 faba 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f9c0 	bl	80087d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	2b10      	cmp	r3, #16
 8008468:	d122      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0310 	and.w	r3, r3, #16
 8008474:	2b10      	cmp	r3, #16
 8008476:	d11b      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0210 	mvn.w	r2, #16
 8008480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2208      	movs	r2, #8
 8008486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f993 	bl	80087c2 <HAL_TIM_IC_CaptureCallback>
 800849c:	e005      	b.n	80084aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7f8 fa90 	bl	80009c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f996 	bl	80087d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d10e      	bne.n	80084dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d107      	bne.n	80084dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0201 	mvn.w	r2, #1
 80084d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f969 	bl	80087ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	d10e      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f4:	2b80      	cmp	r3, #128	; 0x80
 80084f6:	d107      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fcc0 	bl	8008e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	d10e      	bne.n	8008534 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008520:	2b40      	cmp	r3, #64	; 0x40
 8008522:	d107      	bne.n	8008534 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f95b 	bl	80087ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b20      	cmp	r3, #32
 8008540:	d10e      	bne.n	8008560 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b20      	cmp	r3, #32
 800854e:	d107      	bne.n	8008560 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0220 	mvn.w	r2, #32
 8008558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fc8a 	bl	8008e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008582:	2302      	movs	r3, #2
 8008584:	e048      	b.n	8008618 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b0c      	cmp	r3, #12
 8008592:	d839      	bhi.n	8008608 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008594:	a201      	add	r2, pc, #4	; (adr r2, 800859c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085d1 	.word	0x080085d1
 80085a0:	08008609 	.word	0x08008609
 80085a4:	08008609 	.word	0x08008609
 80085a8:	08008609 	.word	0x08008609
 80085ac:	080085df 	.word	0x080085df
 80085b0:	08008609 	.word	0x08008609
 80085b4:	08008609 	.word	0x08008609
 80085b8:	08008609 	.word	0x08008609
 80085bc:	080085ed 	.word	0x080085ed
 80085c0:	08008609 	.word	0x08008609
 80085c4:	08008609 	.word	0x08008609
 80085c8:	08008609 	.word	0x08008609
 80085cc:	080085fb 	.word	0x080085fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f992 	bl	8008900 <TIM_OC1_SetConfig>
      break;
 80085dc:	e017      	b.n	800860e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 f9f1 	bl	80089cc <TIM_OC2_SetConfig>
      break;
 80085ea:	e010      	b.n	800860e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fa56 	bl	8008aa4 <TIM_OC3_SetConfig>
      break;
 80085f8:	e009      	b.n	800860e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fab9 	bl	8008b78 <TIM_OC4_SetConfig>
      break;
 8008606:	e002      	b.n	800860e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	75fb      	strb	r3, [r7, #23]
      break;
 800860c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_TIM_ConfigClockSource+0x1c>
 8008638:	2302      	movs	r3, #2
 800863a:	e0b4      	b.n	80087a6 <HAL_TIM_ConfigClockSource+0x186>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800865a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008674:	d03e      	beq.n	80086f4 <HAL_TIM_ConfigClockSource+0xd4>
 8008676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800867a:	f200 8087 	bhi.w	800878c <HAL_TIM_ConfigClockSource+0x16c>
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008682:	f000 8086 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x172>
 8008686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868a:	d87f      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 800868c:	2b70      	cmp	r3, #112	; 0x70
 800868e:	d01a      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0xa6>
 8008690:	2b70      	cmp	r3, #112	; 0x70
 8008692:	d87b      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 8008694:	2b60      	cmp	r3, #96	; 0x60
 8008696:	d050      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x11a>
 8008698:	2b60      	cmp	r3, #96	; 0x60
 800869a:	d877      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b50      	cmp	r3, #80	; 0x50
 800869e:	d03c      	beq.n	800871a <HAL_TIM_ConfigClockSource+0xfa>
 80086a0:	2b50      	cmp	r3, #80	; 0x50
 80086a2:	d873      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b40      	cmp	r3, #64	; 0x40
 80086a6:	d058      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x13a>
 80086a8:	2b40      	cmp	r3, #64	; 0x40
 80086aa:	d86f      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b30      	cmp	r3, #48	; 0x30
 80086ae:	d064      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086b0:	2b30      	cmp	r3, #48	; 0x30
 80086b2:	d86b      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d060      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	d867      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d05c      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d05a      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086c4:	e062      	b.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6899      	ldr	r1, [r3, #8]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f000 fb19 	bl	8008d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	609a      	str	r2, [r3, #8]
      break;
 80086f2:	e04f      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	6899      	ldr	r1, [r3, #8]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f000 fb02 	bl	8008d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008716:	609a      	str	r2, [r3, #8]
      break;
 8008718:	e03c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6859      	ldr	r1, [r3, #4]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	461a      	mov	r2, r3
 8008728:	f000 fa76 	bl	8008c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2150      	movs	r1, #80	; 0x50
 8008732:	4618      	mov	r0, r3
 8008734:	f000 facf 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 8008738:	e02c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6859      	ldr	r1, [r3, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	461a      	mov	r2, r3
 8008748:	f000 fa95 	bl	8008c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2160      	movs	r1, #96	; 0x60
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fabf 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 8008758:	e01c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fa56 	bl	8008c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2140      	movs	r1, #64	; 0x40
 8008772:	4618      	mov	r0, r3
 8008774:	f000 faaf 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 8008778:	e00c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4619      	mov	r1, r3
 8008784:	4610      	mov	r0, r2
 8008786:	f000 faa6 	bl	8008cd6 <TIM_ITRx_SetConfig>
      break;
 800878a:	e003      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
      break;
 8008790:	e000      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a34      	ldr	r2, [pc, #208]	; (80088e4 <TIM_Base_SetConfig+0xe4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00f      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881e:	d00b      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a31      	ldr	r2, [pc, #196]	; (80088e8 <TIM_Base_SetConfig+0xe8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d007      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a30      	ldr	r2, [pc, #192]	; (80088ec <TIM_Base_SetConfig+0xec>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_Base_SetConfig+0x38>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a2f      	ldr	r2, [pc, #188]	; (80088f0 <TIM_Base_SetConfig+0xf0>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d108      	bne.n	800884a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a25      	ldr	r2, [pc, #148]	; (80088e4 <TIM_Base_SetConfig+0xe4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d01b      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008858:	d017      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a22      	ldr	r2, [pc, #136]	; (80088e8 <TIM_Base_SetConfig+0xe8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d013      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a21      	ldr	r2, [pc, #132]	; (80088ec <TIM_Base_SetConfig+0xec>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00f      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a20      	ldr	r2, [pc, #128]	; (80088f0 <TIM_Base_SetConfig+0xf0>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00b      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <TIM_Base_SetConfig+0xf4>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d007      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1e      	ldr	r2, [pc, #120]	; (80088f8 <TIM_Base_SetConfig+0xf8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_Base_SetConfig+0x8a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <TIM_Base_SetConfig+0xfc>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d108      	bne.n	800889c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4313      	orrs	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <TIM_Base_SetConfig+0xe4>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d103      	bne.n	80088d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	691a      	ldr	r2, [r3, #16]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	615a      	str	r2, [r3, #20]
}
 80088d6:	bf00      	nop
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40000400 	.word	0x40000400
 80088ec:	40000800 	.word	0x40000800
 80088f0:	40000c00 	.word	0x40000c00
 80088f4:	40014000 	.word	0x40014000
 80088f8:	40014400 	.word	0x40014400
 80088fc:	40014800 	.word	0x40014800

08008900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f023 0201 	bic.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f023 0302 	bic.w	r3, r3, #2
 8008948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a1c      	ldr	r2, [pc, #112]	; (80089c8 <TIM_OC1_SetConfig+0xc8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d10c      	bne.n	8008976 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f023 0308 	bic.w	r3, r3, #8
 8008962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 0304 	bic.w	r3, r3, #4
 8008974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <TIM_OC1_SetConfig+0xc8>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d111      	bne.n	80089a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800898c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	621a      	str	r2, [r3, #32]
}
 80089bc:	bf00      	nop
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	40010000 	.word	0x40010000

080089cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	f023 0210 	bic.w	r2, r3, #16
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	021b      	lsls	r3, r3, #8
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0320 	bic.w	r3, r3, #32
 8008a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <TIM_OC2_SetConfig+0xd4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d10d      	bne.n	8008a48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <TIM_OC2_SetConfig+0xd4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d113      	bne.n	8008a78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	621a      	str	r2, [r3, #32]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	40010000 	.word	0x40010000

08008aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0303 	bic.w	r3, r3, #3
 8008ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a1d      	ldr	r2, [pc, #116]	; (8008b74 <TIM_OC3_SetConfig+0xd0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d10d      	bne.n	8008b1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <TIM_OC3_SetConfig+0xd0>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d113      	bne.n	8008b4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	621a      	str	r2, [r3, #32]
}
 8008b68:	bf00      	nop
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	40010000 	.word	0x40010000

08008b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	021b      	lsls	r3, r3, #8
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	031b      	lsls	r3, r3, #12
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a10      	ldr	r2, [pc, #64]	; (8008c14 <TIM_OC4_SetConfig+0x9c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d109      	bne.n	8008bec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	019b      	lsls	r3, r3, #6
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	621a      	str	r2, [r3, #32]
}
 8008c06:	bf00      	nop
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	40010000 	.word	0x40010000

08008c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f023 030a 	bic.w	r3, r3, #10
 8008c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	621a      	str	r2, [r3, #32]
}
 8008c6a:	bf00      	nop
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b087      	sub	sp, #28
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	f023 0210 	bic.w	r2, r3, #16
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	031b      	lsls	r3, r3, #12
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	011b      	lsls	r3, r3, #4
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	621a      	str	r2, [r3, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	f043 0307 	orr.w	r3, r3, #7
 8008cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	609a      	str	r2, [r3, #8]
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	021a      	lsls	r2, r3, #8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	609a      	str	r2, [r3, #8]
}
 8008d40:	bf00      	nop
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2201      	movs	r2, #1
 8008d60:	fa02 f303 	lsl.w	r3, r2, r3
 8008d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1a      	ldr	r2, [r3, #32]
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	43db      	mvns	r3, r3
 8008d6e:	401a      	ands	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1a      	ldr	r2, [r3, #32]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	fa01 f303 	lsl.w	r3, r1, r3
 8008d84:	431a      	orrs	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
	...

08008d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e050      	b.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a1c      	ldr	r2, [pc, #112]	; (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d018      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfc:	d013      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00e      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a16      	ldr	r2, [pc, #88]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d009      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a15      	ldr	r2, [pc, #84]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d004      	beq.n	8008e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a13      	ldr	r2, [pc, #76]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d10c      	bne.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	40010000 	.word	0x40010000
 8008e64:	40000400 	.word	0x40000400
 8008e68:	40000800 	.word	0x40000800
 8008e6c:	40000c00 	.word	0x40000c00
 8008e70:	40014000 	.word	0x40014000

08008e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e03f      	b.n	8008f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d106      	bne.n	8008ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7f7 fe0e 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2224      	movs	r2, #36	; 0x24
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fcbf 	bl	8009864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	695a      	ldr	r2, [r3, #20]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b085      	sub	sp, #20
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	4613      	mov	r3, r2
 8008f42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	d130      	bne.n	8008fb2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <HAL_UART_Transmit_IT+0x26>
 8008f56:	88fb      	ldrh	r3, [r7, #6]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e029      	b.n	8008fb4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Transmit_IT+0x38>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e022      	b.n	8008fb4 <HAL_UART_Transmit_IT+0x7e>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	88fa      	ldrh	r2, [r7, #6]
 8008f80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	88fa      	ldrh	r2, [r7, #6]
 8008f86:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2221      	movs	r2, #33	; 0x21
 8008f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e000      	b.n	8008fb4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008fb2:	2302      	movs	r3, #2
  }
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b0ba      	sub	sp, #232	; 0xe8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10f      	bne.n	8009026 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d009      	beq.n	8009026 <HAL_UART_IRQHandler+0x66>
 8009012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb65 	bl	80096ee <UART_Receive_IT>
      return;
 8009024:	e256      	b.n	80094d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80de 	beq.w	80091ec <HAL_UART_IRQHandler+0x22c>
 8009030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800903c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009040:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80d1 	beq.w	80091ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800904a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <HAL_UART_IRQHandler+0xae>
 8009056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	f043 0201 	orr.w	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800906e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00b      	beq.n	8009092 <HAL_UART_IRQHandler+0xd2>
 800907a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	f043 0202 	orr.w	r2, r3, #2
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00b      	beq.n	80090b6 <HAL_UART_IRQHandler+0xf6>
 800909e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ae:	f043 0204 	orr.w	r2, r3, #4
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d011      	beq.n	80090e6 <HAL_UART_IRQHandler+0x126>
 80090c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	f043 0208 	orr.w	r2, r3, #8
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 81ed 	beq.w	80094ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d008      	beq.n	800910e <HAL_UART_IRQHandler+0x14e>
 80090fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 faf0 	bl	80096ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009118:	2b40      	cmp	r3, #64	; 0x40
 800911a:	bf0c      	ite	eq
 800911c:	2301      	moveq	r3, #1
 800911e:	2300      	movne	r3, #0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <HAL_UART_IRQHandler+0x17a>
 8009132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d04f      	beq.n	80091da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f9f8 	bl	8009530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914a:	2b40      	cmp	r3, #64	; 0x40
 800914c:	d141      	bne.n	80091d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3314      	adds	r3, #20
 8009154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800916c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3314      	adds	r3, #20
 8009176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800917a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800917e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1d9      	bne.n	800914e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d013      	beq.n	80091ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	4a7d      	ldr	r2, [pc, #500]	; (800939c <HAL_UART_IRQHandler+0x3dc>)
 80091a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fc ffdb 	bl	800616a <HAL_DMA_Abort_IT>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d016      	beq.n	80091e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091c4:	4610      	mov	r0, r2
 80091c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c8:	e00e      	b.n	80091e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f99a 	bl	8009504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d0:	e00a      	b.n	80091e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f996 	bl	8009504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d8:	e006      	b.n	80091e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f992 	bl	8009504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80091e6:	e170      	b.n	80094ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e8:	bf00      	nop
    return;
 80091ea:	e16e      	b.n	80094ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	f040 814a 	bne.w	800948a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	f003 0310 	and.w	r3, r3, #16
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 8143 	beq.w	800948a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009208:	f003 0310 	and.w	r3, r3, #16
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 813c 	beq.w	800948a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	60bb      	str	r3, [r7, #8]
 8009226:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009232:	2b40      	cmp	r3, #64	; 0x40
 8009234:	f040 80b4 	bne.w	80093a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 8140 	beq.w	80094ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009256:	429a      	cmp	r2, r3
 8009258:	f080 8139 	bcs.w	80094ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009262:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926e:	f000 8088 	beq.w	8009382 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	330c      	adds	r3, #12
 8009278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009280:	e853 3f00 	ldrex	r3, [r3]
 8009284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800928c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	330c      	adds	r3, #12
 800929a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800929e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1d9      	bne.n	8009272 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3314      	adds	r3, #20
 80092c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092d0:	f023 0301 	bic.w	r3, r3, #1
 80092d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3314      	adds	r3, #20
 80092de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80092e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80092e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e1      	bne.n	80092be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3314      	adds	r3, #20
 8009300:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800930a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800930c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3314      	adds	r3, #20
 800931a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800931e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009320:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009324:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800932c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e3      	bne.n	80092fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2220      	movs	r2, #32
 8009336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	330c      	adds	r3, #12
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009352:	f023 0310 	bic.w	r3, r3, #16
 8009356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	330c      	adds	r3, #12
 8009360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009364:	65ba      	str	r2, [r7, #88]	; 0x58
 8009366:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800936a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e3      	bne.n	8009340 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	4618      	mov	r0, r3
 800937e:	f7fc fe84 	bl	800608a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800938a:	b29b      	uxth	r3, r3
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	b29b      	uxth	r3, r3
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f8c0 	bl	8009518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009398:	e099      	b.n	80094ce <HAL_UART_IRQHandler+0x50e>
 800939a:	bf00      	nop
 800939c:	080095f7 	.word	0x080095f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 808b 	beq.w	80094d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80093bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8086 	beq.w	80094d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	330c      	adds	r3, #12
 80093cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	330c      	adds	r3, #12
 80093e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80093ea:	647a      	str	r2, [r7, #68]	; 0x44
 80093ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093f2:	e841 2300 	strex	r3, r2, [r1]
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e3      	bne.n	80093c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3314      	adds	r3, #20
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	623b      	str	r3, [r7, #32]
   return(result);
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	f023 0301 	bic.w	r3, r3, #1
 8009414:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3314      	adds	r3, #20
 800941e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009422:	633a      	str	r2, [r7, #48]	; 0x30
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e3      	bne.n	80093fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	e853 3f00 	ldrex	r3, [r3]
 8009452:	60fb      	str	r3, [r7, #12]
   return(result);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0310 	bic.w	r3, r3, #16
 800945a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	330c      	adds	r3, #12
 8009464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009468:	61fa      	str	r2, [r7, #28]
 800946a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	69b9      	ldr	r1, [r7, #24]
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	617b      	str	r3, [r7, #20]
   return(result);
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e3      	bne.n	8009444 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800947c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f848 	bl	8009518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009488:	e023      	b.n	80094d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800948a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <HAL_UART_IRQHandler+0x4ea>
 8009496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800949a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f8bb 	bl	800961e <UART_Transmit_IT>
    return;
 80094a8:	e014      	b.n	80094d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00e      	beq.n	80094d4 <HAL_UART_IRQHandler+0x514>
 80094b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8fb 	bl	80096be <UART_EndTransmit_IT>
    return;
 80094c8:	e004      	b.n	80094d4 <HAL_UART_IRQHandler+0x514>
    return;
 80094ca:	bf00      	nop
 80094cc:	e002      	b.n	80094d4 <HAL_UART_IRQHandler+0x514>
      return;
 80094ce:	bf00      	nop
 80094d0:	e000      	b.n	80094d4 <HAL_UART_IRQHandler+0x514>
      return;
 80094d2:	bf00      	nop
  }
}
 80094d4:	37e8      	adds	r7, #232	; 0xe8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b095      	sub	sp, #84	; 0x54
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	330c      	adds	r3, #12
 800953e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800954e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009558:	643a      	str	r2, [r7, #64]	; 0x40
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800955e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e5      	bne.n	8009538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3314      	adds	r3, #20
 8009572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	61fb      	str	r3, [r7, #28]
   return(result);
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f023 0301 	bic.w	r3, r3, #1
 8009582:	64bb      	str	r3, [r7, #72]	; 0x48
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3314      	adds	r3, #20
 800958a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800958c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800958e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e5      	bne.n	800956c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d119      	bne.n	80095dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	330c      	adds	r3, #12
 80095ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	e853 3f00 	ldrex	r3, [r3]
 80095b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f023 0310 	bic.w	r3, r3, #16
 80095be:	647b      	str	r3, [r7, #68]	; 0x44
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	330c      	adds	r3, #12
 80095c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095c8:	61ba      	str	r2, [r7, #24]
 80095ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	6979      	ldr	r1, [r7, #20]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	613b      	str	r3, [r7, #16]
   return(result);
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e5      	bne.n	80095a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80095ea:	bf00      	nop
 80095ec:	3754      	adds	r7, #84	; 0x54
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7ff ff77 	bl	8009504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b21      	cmp	r3, #33	; 0x21
 8009630:	d13e      	bne.n	80096b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963a:	d114      	bne.n	8009666 <UART_Transmit_IT+0x48>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d110      	bne.n	8009666 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009658:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	1c9a      	adds	r2, r3, #2
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	621a      	str	r2, [r3, #32]
 8009664:	e008      	b.n	8009678 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	1c59      	adds	r1, r3, #1
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6211      	str	r1, [r2, #32]
 8009670:	781a      	ldrb	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29b      	uxth	r3, r3
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	4619      	mov	r1, r3
 8009686:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10f      	bne.n	80096ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800969a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	e000      	b.n	80096b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096b0:	2302      	movs	r3, #2
  }
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2220      	movs	r2, #32
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff fefc 	bl	80094dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b08c      	sub	sp, #48	; 0x30
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b22      	cmp	r3, #34	; 0x22
 8009700:	f040 80ab 	bne.w	800985a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970c:	d117      	bne.n	800973e <UART_Receive_IT+0x50>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d113      	bne.n	800973e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	b29b      	uxth	r3, r3
 8009728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972c:	b29a      	uxth	r2, r3
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009736:	1c9a      	adds	r2, r3, #2
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	629a      	str	r2, [r3, #40]	; 0x28
 800973c:	e026      	b.n	800978c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009750:	d007      	beq.n	8009762 <UART_Receive_IT+0x74>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <UART_Receive_IT+0x82>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	b2da      	uxtb	r2, r3
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	701a      	strb	r2, [r3, #0]
 800976e:	e008      	b.n	8009782 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977c:	b2da      	uxtb	r2, r3
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009790:	b29b      	uxth	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	b29b      	uxth	r3, r3
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	4619      	mov	r1, r3
 800979a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800979c:	2b00      	cmp	r3, #0
 800979e:	d15a      	bne.n	8009856 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0220 	bic.w	r2, r2, #32
 80097ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	695a      	ldr	r2, [r3, #20]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0201 	bic.w	r2, r2, #1
 80097ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d135      	bne.n	800984c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	330c      	adds	r3, #12
 80097ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	613b      	str	r3, [r7, #16]
   return(result);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f023 0310 	bic.w	r3, r3, #16
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	330c      	adds	r3, #12
 8009804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009806:	623a      	str	r2, [r7, #32]
 8009808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	69f9      	ldr	r1, [r7, #28]
 800980c:	6a3a      	ldr	r2, [r7, #32]
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	61bb      	str	r3, [r7, #24]
   return(result);
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e5      	bne.n	80097e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0310 	and.w	r3, r3, #16
 8009824:	2b10      	cmp	r3, #16
 8009826:	d10a      	bne.n	800983e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff fe67 	bl	8009518 <HAL_UARTEx_RxEventCallback>
 800984a:	e002      	b.n	8009852 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fe4f 	bl	80094f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	e002      	b.n	800985c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	e000      	b.n	800985c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800985a:	2302      	movs	r3, #2
  }
}
 800985c:	4618      	mov	r0, r3
 800985e:	3730      	adds	r7, #48	; 0x30
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	b09f      	sub	sp, #124	; 0x7c
 800986a:	af00      	add	r7, sp, #0
 800986c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800986e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987a:	68d9      	ldr	r1, [r3, #12]
 800987c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	ea40 0301 	orr.w	r3, r0, r1
 8009884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009888:	689a      	ldr	r2, [r3, #8]
 800988a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	431a      	orrs	r2, r3
 8009890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	431a      	orrs	r2, r3
 8009896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	4313      	orrs	r3, r2
 800989c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800989e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098a8:	f021 010c 	bic.w	r1, r1, #12
 80098ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098b2:	430b      	orrs	r3, r1
 80098b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c2:	6999      	ldr	r1, [r3, #24]
 80098c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	ea40 0301 	orr.w	r3, r0, r1
 80098cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4bc5      	ldr	r3, [pc, #788]	; (8009be8 <UART_SetConfig+0x384>)
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d004      	beq.n	80098e2 <UART_SetConfig+0x7e>
 80098d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	4bc3      	ldr	r3, [pc, #780]	; (8009bec <UART_SetConfig+0x388>)
 80098de:	429a      	cmp	r2, r3
 80098e0:	d103      	bne.n	80098ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098e2:	f7fe fb7f 	bl	8007fe4 <HAL_RCC_GetPCLK2Freq>
 80098e6:	6778      	str	r0, [r7, #116]	; 0x74
 80098e8:	e002      	b.n	80098f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098ea:	f7fe fb67 	bl	8007fbc <HAL_RCC_GetPCLK1Freq>
 80098ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f8:	f040 80b6 	bne.w	8009a68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098fe:	461c      	mov	r4, r3
 8009900:	f04f 0500 	mov.w	r5, #0
 8009904:	4622      	mov	r2, r4
 8009906:	462b      	mov	r3, r5
 8009908:	1891      	adds	r1, r2, r2
 800990a:	6439      	str	r1, [r7, #64]	; 0x40
 800990c:	415b      	adcs	r3, r3
 800990e:	647b      	str	r3, [r7, #68]	; 0x44
 8009910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009914:	1912      	adds	r2, r2, r4
 8009916:	eb45 0303 	adc.w	r3, r5, r3
 800991a:	f04f 0000 	mov.w	r0, #0
 800991e:	f04f 0100 	mov.w	r1, #0
 8009922:	00d9      	lsls	r1, r3, #3
 8009924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009928:	00d0      	lsls	r0, r2, #3
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	1911      	adds	r1, r2, r4
 8009930:	6639      	str	r1, [r7, #96]	; 0x60
 8009932:	416b      	adcs	r3, r5
 8009934:	667b      	str	r3, [r7, #100]	; 0x64
 8009936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	461a      	mov	r2, r3
 800993c:	f04f 0300 	mov.w	r3, #0
 8009940:	1891      	adds	r1, r2, r2
 8009942:	63b9      	str	r1, [r7, #56]	; 0x38
 8009944:	415b      	adcs	r3, r3
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800994c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009950:	f7f6 fc96 	bl	8000280 <__aeabi_uldivmod>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4ba5      	ldr	r3, [pc, #660]	; (8009bf0 <UART_SetConfig+0x38c>)
 800995a:	fba3 2302 	umull	r2, r3, r3, r2
 800995e:	095b      	lsrs	r3, r3, #5
 8009960:	011e      	lsls	r6, r3, #4
 8009962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009964:	461c      	mov	r4, r3
 8009966:	f04f 0500 	mov.w	r5, #0
 800996a:	4622      	mov	r2, r4
 800996c:	462b      	mov	r3, r5
 800996e:	1891      	adds	r1, r2, r2
 8009970:	6339      	str	r1, [r7, #48]	; 0x30
 8009972:	415b      	adcs	r3, r3
 8009974:	637b      	str	r3, [r7, #52]	; 0x34
 8009976:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800997a:	1912      	adds	r2, r2, r4
 800997c:	eb45 0303 	adc.w	r3, r5, r3
 8009980:	f04f 0000 	mov.w	r0, #0
 8009984:	f04f 0100 	mov.w	r1, #0
 8009988:	00d9      	lsls	r1, r3, #3
 800998a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800998e:	00d0      	lsls	r0, r2, #3
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	1911      	adds	r1, r2, r4
 8009996:	65b9      	str	r1, [r7, #88]	; 0x58
 8009998:	416b      	adcs	r3, r5
 800999a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800999c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	461a      	mov	r2, r3
 80099a2:	f04f 0300 	mov.w	r3, #0
 80099a6:	1891      	adds	r1, r2, r2
 80099a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80099aa:	415b      	adcs	r3, r3
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099b6:	f7f6 fc63 	bl	8000280 <__aeabi_uldivmod>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4b8c      	ldr	r3, [pc, #560]	; (8009bf0 <UART_SetConfig+0x38c>)
 80099c0:	fba3 1302 	umull	r1, r3, r3, r2
 80099c4:	095b      	lsrs	r3, r3, #5
 80099c6:	2164      	movs	r1, #100	; 0x64
 80099c8:	fb01 f303 	mul.w	r3, r1, r3
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	3332      	adds	r3, #50	; 0x32
 80099d2:	4a87      	ldr	r2, [pc, #540]	; (8009bf0 <UART_SetConfig+0x38c>)
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099e0:	441e      	add	r6, r3
 80099e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099e4:	4618      	mov	r0, r3
 80099e6:	f04f 0100 	mov.w	r1, #0
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	1894      	adds	r4, r2, r2
 80099f0:	623c      	str	r4, [r7, #32]
 80099f2:	415b      	adcs	r3, r3
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
 80099f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099fa:	1812      	adds	r2, r2, r0
 80099fc:	eb41 0303 	adc.w	r3, r1, r3
 8009a00:	f04f 0400 	mov.w	r4, #0
 8009a04:	f04f 0500 	mov.w	r5, #0
 8009a08:	00dd      	lsls	r5, r3, #3
 8009a0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a0e:	00d4      	lsls	r4, r2, #3
 8009a10:	4622      	mov	r2, r4
 8009a12:	462b      	mov	r3, r5
 8009a14:	1814      	adds	r4, r2, r0
 8009a16:	653c      	str	r4, [r7, #80]	; 0x50
 8009a18:	414b      	adcs	r3, r1
 8009a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	461a      	mov	r2, r3
 8009a22:	f04f 0300 	mov.w	r3, #0
 8009a26:	1891      	adds	r1, r2, r2
 8009a28:	61b9      	str	r1, [r7, #24]
 8009a2a:	415b      	adcs	r3, r3
 8009a2c:	61fb      	str	r3, [r7, #28]
 8009a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a36:	f7f6 fc23 	bl	8000280 <__aeabi_uldivmod>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4b6c      	ldr	r3, [pc, #432]	; (8009bf0 <UART_SetConfig+0x38c>)
 8009a40:	fba3 1302 	umull	r1, r3, r3, r2
 8009a44:	095b      	lsrs	r3, r3, #5
 8009a46:	2164      	movs	r1, #100	; 0x64
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	3332      	adds	r3, #50	; 0x32
 8009a52:	4a67      	ldr	r2, [pc, #412]	; (8009bf0 <UART_SetConfig+0x38c>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	f003 0207 	and.w	r2, r3, #7
 8009a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4432      	add	r2, r6
 8009a64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a66:	e0b9      	b.n	8009bdc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a6a:	461c      	mov	r4, r3
 8009a6c:	f04f 0500 	mov.w	r5, #0
 8009a70:	4622      	mov	r2, r4
 8009a72:	462b      	mov	r3, r5
 8009a74:	1891      	adds	r1, r2, r2
 8009a76:	6139      	str	r1, [r7, #16]
 8009a78:	415b      	adcs	r3, r3
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a80:	1912      	adds	r2, r2, r4
 8009a82:	eb45 0303 	adc.w	r3, r5, r3
 8009a86:	f04f 0000 	mov.w	r0, #0
 8009a8a:	f04f 0100 	mov.w	r1, #0
 8009a8e:	00d9      	lsls	r1, r3, #3
 8009a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a94:	00d0      	lsls	r0, r2, #3
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	eb12 0804 	adds.w	r8, r2, r4
 8009a9e:	eb43 0905 	adc.w	r9, r3, r5
 8009aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f04f 0100 	mov.w	r1, #0
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	008b      	lsls	r3, r1, #2
 8009ab6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009aba:	0082      	lsls	r2, r0, #2
 8009abc:	4640      	mov	r0, r8
 8009abe:	4649      	mov	r1, r9
 8009ac0:	f7f6 fbde 	bl	8000280 <__aeabi_uldivmod>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4b49      	ldr	r3, [pc, #292]	; (8009bf0 <UART_SetConfig+0x38c>)
 8009aca:	fba3 2302 	umull	r2, r3, r3, r2
 8009ace:	095b      	lsrs	r3, r3, #5
 8009ad0:	011e      	lsls	r6, r3, #4
 8009ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f04f 0100 	mov.w	r1, #0
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	1894      	adds	r4, r2, r2
 8009ae0:	60bc      	str	r4, [r7, #8]
 8009ae2:	415b      	adcs	r3, r3
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009aea:	1812      	adds	r2, r2, r0
 8009aec:	eb41 0303 	adc.w	r3, r1, r3
 8009af0:	f04f 0400 	mov.w	r4, #0
 8009af4:	f04f 0500 	mov.w	r5, #0
 8009af8:	00dd      	lsls	r5, r3, #3
 8009afa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009afe:	00d4      	lsls	r4, r2, #3
 8009b00:	4622      	mov	r2, r4
 8009b02:	462b      	mov	r3, r5
 8009b04:	1814      	adds	r4, r2, r0
 8009b06:	64bc      	str	r4, [r7, #72]	; 0x48
 8009b08:	414b      	adcs	r3, r1
 8009b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f04f 0100 	mov.w	r1, #0
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	008b      	lsls	r3, r1, #2
 8009b20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b24:	0082      	lsls	r2, r0, #2
 8009b26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009b2a:	f7f6 fba9 	bl	8000280 <__aeabi_uldivmod>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4b2f      	ldr	r3, [pc, #188]	; (8009bf0 <UART_SetConfig+0x38c>)
 8009b34:	fba3 1302 	umull	r1, r3, r3, r2
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	2164      	movs	r1, #100	; 0x64
 8009b3c:	fb01 f303 	mul.w	r3, r1, r3
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	3332      	adds	r3, #50	; 0x32
 8009b46:	4a2a      	ldr	r2, [pc, #168]	; (8009bf0 <UART_SetConfig+0x38c>)
 8009b48:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4c:	095b      	lsrs	r3, r3, #5
 8009b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b52:	441e      	add	r6, r3
 8009b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b56:	4618      	mov	r0, r3
 8009b58:	f04f 0100 	mov.w	r1, #0
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	1894      	adds	r4, r2, r2
 8009b62:	603c      	str	r4, [r7, #0]
 8009b64:	415b      	adcs	r3, r3
 8009b66:	607b      	str	r3, [r7, #4]
 8009b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b6c:	1812      	adds	r2, r2, r0
 8009b6e:	eb41 0303 	adc.w	r3, r1, r3
 8009b72:	f04f 0400 	mov.w	r4, #0
 8009b76:	f04f 0500 	mov.w	r5, #0
 8009b7a:	00dd      	lsls	r5, r3, #3
 8009b7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b80:	00d4      	lsls	r4, r2, #3
 8009b82:	4622      	mov	r2, r4
 8009b84:	462b      	mov	r3, r5
 8009b86:	eb12 0a00 	adds.w	sl, r2, r0
 8009b8a:	eb43 0b01 	adc.w	fp, r3, r1
 8009b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f04f 0100 	mov.w	r1, #0
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	f04f 0300 	mov.w	r3, #0
 8009ba0:	008b      	lsls	r3, r1, #2
 8009ba2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ba6:	0082      	lsls	r2, r0, #2
 8009ba8:	4650      	mov	r0, sl
 8009baa:	4659      	mov	r1, fp
 8009bac:	f7f6 fb68 	bl	8000280 <__aeabi_uldivmod>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4b0e      	ldr	r3, [pc, #56]	; (8009bf0 <UART_SetConfig+0x38c>)
 8009bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	2164      	movs	r1, #100	; 0x64
 8009bbe:	fb01 f303 	mul.w	r3, r1, r3
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	3332      	adds	r3, #50	; 0x32
 8009bc8:	4a09      	ldr	r2, [pc, #36]	; (8009bf0 <UART_SetConfig+0x38c>)
 8009bca:	fba2 2303 	umull	r2, r3, r2, r3
 8009bce:	095b      	lsrs	r3, r3, #5
 8009bd0:	f003 020f 	and.w	r2, r3, #15
 8009bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4432      	add	r2, r6
 8009bda:	609a      	str	r2, [r3, #8]
}
 8009bdc:	bf00      	nop
 8009bde:	377c      	adds	r7, #124	; 0x7c
 8009be0:	46bd      	mov	sp, r7
 8009be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be6:	bf00      	nop
 8009be8:	40011000 	.word	0x40011000
 8009bec:	40011400 	.word	0x40011400
 8009bf0:	51eb851f 	.word	0x51eb851f

08009bf4 <__errno>:
 8009bf4:	4b01      	ldr	r3, [pc, #4]	; (8009bfc <__errno+0x8>)
 8009bf6:	6818      	ldr	r0, [r3, #0]
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	200000e0 	.word	0x200000e0

08009c00 <__libc_init_array>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	4d0d      	ldr	r5, [pc, #52]	; (8009c38 <__libc_init_array+0x38>)
 8009c04:	4c0d      	ldr	r4, [pc, #52]	; (8009c3c <__libc_init_array+0x3c>)
 8009c06:	1b64      	subs	r4, r4, r5
 8009c08:	10a4      	asrs	r4, r4, #2
 8009c0a:	2600      	movs	r6, #0
 8009c0c:	42a6      	cmp	r6, r4
 8009c0e:	d109      	bne.n	8009c24 <__libc_init_array+0x24>
 8009c10:	4d0b      	ldr	r5, [pc, #44]	; (8009c40 <__libc_init_array+0x40>)
 8009c12:	4c0c      	ldr	r4, [pc, #48]	; (8009c44 <__libc_init_array+0x44>)
 8009c14:	f000 fc4e 	bl	800a4b4 <_init>
 8009c18:	1b64      	subs	r4, r4, r5
 8009c1a:	10a4      	asrs	r4, r4, #2
 8009c1c:	2600      	movs	r6, #0
 8009c1e:	42a6      	cmp	r6, r4
 8009c20:	d105      	bne.n	8009c2e <__libc_init_array+0x2e>
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
 8009c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c28:	4798      	blx	r3
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	e7ee      	b.n	8009c0c <__libc_init_array+0xc>
 8009c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c32:	4798      	blx	r3
 8009c34:	3601      	adds	r6, #1
 8009c36:	e7f2      	b.n	8009c1e <__libc_init_array+0x1e>
 8009c38:	0800a548 	.word	0x0800a548
 8009c3c:	0800a548 	.word	0x0800a548
 8009c40:	0800a548 	.word	0x0800a548
 8009c44:	0800a54c 	.word	0x0800a54c

08009c48 <memcpy>:
 8009c48:	440a      	add	r2, r1
 8009c4a:	4291      	cmp	r1, r2
 8009c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c50:	d100      	bne.n	8009c54 <memcpy+0xc>
 8009c52:	4770      	bx	lr
 8009c54:	b510      	push	{r4, lr}
 8009c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c5e:	4291      	cmp	r1, r2
 8009c60:	d1f9      	bne.n	8009c56 <memcpy+0xe>
 8009c62:	bd10      	pop	{r4, pc}

08009c64 <memset>:
 8009c64:	4402      	add	r2, r0
 8009c66:	4603      	mov	r3, r0
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d100      	bne.n	8009c6e <memset+0xa>
 8009c6c:	4770      	bx	lr
 8009c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c72:	e7f9      	b.n	8009c68 <memset+0x4>

08009c74 <siprintf>:
 8009c74:	b40e      	push	{r1, r2, r3}
 8009c76:	b500      	push	{lr}
 8009c78:	b09c      	sub	sp, #112	; 0x70
 8009c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c7c:	9002      	str	r0, [sp, #8]
 8009c7e:	9006      	str	r0, [sp, #24]
 8009c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c84:	4809      	ldr	r0, [pc, #36]	; (8009cac <siprintf+0x38>)
 8009c86:	9107      	str	r1, [sp, #28]
 8009c88:	9104      	str	r1, [sp, #16]
 8009c8a:	4909      	ldr	r1, [pc, #36]	; (8009cb0 <siprintf+0x3c>)
 8009c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c90:	9105      	str	r1, [sp, #20]
 8009c92:	6800      	ldr	r0, [r0, #0]
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	a902      	add	r1, sp, #8
 8009c98:	f000 f868 	bl	8009d6c <_svfiprintf_r>
 8009c9c:	9b02      	ldr	r3, [sp, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	701a      	strb	r2, [r3, #0]
 8009ca2:	b01c      	add	sp, #112	; 0x70
 8009ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ca8:	b003      	add	sp, #12
 8009caa:	4770      	bx	lr
 8009cac:	200000e0 	.word	0x200000e0
 8009cb0:	ffff0208 	.word	0xffff0208

08009cb4 <__ssputs_r>:
 8009cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	688e      	ldr	r6, [r1, #8]
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	4690      	mov	r8, r2
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	d838      	bhi.n	8009d38 <__ssputs_r+0x84>
 8009cc6:	898a      	ldrh	r2, [r1, #12]
 8009cc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ccc:	d032      	beq.n	8009d34 <__ssputs_r+0x80>
 8009cce:	6825      	ldr	r5, [r4, #0]
 8009cd0:	6909      	ldr	r1, [r1, #16]
 8009cd2:	eba5 0901 	sub.w	r9, r5, r1
 8009cd6:	6965      	ldr	r5, [r4, #20]
 8009cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	444b      	add	r3, r9
 8009ce4:	106d      	asrs	r5, r5, #1
 8009ce6:	429d      	cmp	r5, r3
 8009ce8:	bf38      	it	cc
 8009cea:	461d      	movcc	r5, r3
 8009cec:	0553      	lsls	r3, r2, #21
 8009cee:	d531      	bpl.n	8009d54 <__ssputs_r+0xa0>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	f000 fb39 	bl	800a368 <_malloc_r>
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	b950      	cbnz	r0, 8009d10 <__ssputs_r+0x5c>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	f8ca 3000 	str.w	r3, [sl]
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d06:	81a3      	strh	r3, [r4, #12]
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d10:	6921      	ldr	r1, [r4, #16]
 8009d12:	464a      	mov	r2, r9
 8009d14:	f7ff ff98 	bl	8009c48 <memcpy>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	6126      	str	r6, [r4, #16]
 8009d26:	6165      	str	r5, [r4, #20]
 8009d28:	444e      	add	r6, r9
 8009d2a:	eba5 0509 	sub.w	r5, r5, r9
 8009d2e:	6026      	str	r6, [r4, #0]
 8009d30:	60a5      	str	r5, [r4, #8]
 8009d32:	463e      	mov	r6, r7
 8009d34:	42be      	cmp	r6, r7
 8009d36:	d900      	bls.n	8009d3a <__ssputs_r+0x86>
 8009d38:	463e      	mov	r6, r7
 8009d3a:	4632      	mov	r2, r6
 8009d3c:	6820      	ldr	r0, [r4, #0]
 8009d3e:	4641      	mov	r1, r8
 8009d40:	f000 faa8 	bl	800a294 <memmove>
 8009d44:	68a3      	ldr	r3, [r4, #8]
 8009d46:	6822      	ldr	r2, [r4, #0]
 8009d48:	1b9b      	subs	r3, r3, r6
 8009d4a:	4432      	add	r2, r6
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	6022      	str	r2, [r4, #0]
 8009d50:	2000      	movs	r0, #0
 8009d52:	e7db      	b.n	8009d0c <__ssputs_r+0x58>
 8009d54:	462a      	mov	r2, r5
 8009d56:	f000 fb61 	bl	800a41c <_realloc_r>
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1e1      	bne.n	8009d24 <__ssputs_r+0x70>
 8009d60:	6921      	ldr	r1, [r4, #16]
 8009d62:	4650      	mov	r0, sl
 8009d64:	f000 fab0 	bl	800a2c8 <_free_r>
 8009d68:	e7c7      	b.n	8009cfa <__ssputs_r+0x46>
	...

08009d6c <_svfiprintf_r>:
 8009d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	4698      	mov	r8, r3
 8009d72:	898b      	ldrh	r3, [r1, #12]
 8009d74:	061b      	lsls	r3, r3, #24
 8009d76:	b09d      	sub	sp, #116	; 0x74
 8009d78:	4607      	mov	r7, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	d50e      	bpl.n	8009d9e <_svfiprintf_r+0x32>
 8009d80:	690b      	ldr	r3, [r1, #16]
 8009d82:	b963      	cbnz	r3, 8009d9e <_svfiprintf_r+0x32>
 8009d84:	2140      	movs	r1, #64	; 0x40
 8009d86:	f000 faef 	bl	800a368 <_malloc_r>
 8009d8a:	6028      	str	r0, [r5, #0]
 8009d8c:	6128      	str	r0, [r5, #16]
 8009d8e:	b920      	cbnz	r0, 8009d9a <_svfiprintf_r+0x2e>
 8009d90:	230c      	movs	r3, #12
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	e0d1      	b.n	8009f3e <_svfiprintf_r+0x1d2>
 8009d9a:	2340      	movs	r3, #64	; 0x40
 8009d9c:	616b      	str	r3, [r5, #20]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9309      	str	r3, [sp, #36]	; 0x24
 8009da2:	2320      	movs	r3, #32
 8009da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dac:	2330      	movs	r3, #48	; 0x30
 8009dae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f58 <_svfiprintf_r+0x1ec>
 8009db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009db6:	f04f 0901 	mov.w	r9, #1
 8009dba:	4623      	mov	r3, r4
 8009dbc:	469a      	mov	sl, r3
 8009dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc2:	b10a      	cbz	r2, 8009dc8 <_svfiprintf_r+0x5c>
 8009dc4:	2a25      	cmp	r2, #37	; 0x25
 8009dc6:	d1f9      	bne.n	8009dbc <_svfiprintf_r+0x50>
 8009dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8009dcc:	d00b      	beq.n	8009de6 <_svfiprintf_r+0x7a>
 8009dce:	465b      	mov	r3, fp
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f7ff ff6d 	bl	8009cb4 <__ssputs_r>
 8009dda:	3001      	adds	r0, #1
 8009ddc:	f000 80aa 	beq.w	8009f34 <_svfiprintf_r+0x1c8>
 8009de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de2:	445a      	add	r2, fp
 8009de4:	9209      	str	r2, [sp, #36]	; 0x24
 8009de6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 80a2 	beq.w	8009f34 <_svfiprintf_r+0x1c8>
 8009df0:	2300      	movs	r3, #0
 8009df2:	f04f 32ff 	mov.w	r2, #4294967295
 8009df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dfa:	f10a 0a01 	add.w	sl, sl, #1
 8009dfe:	9304      	str	r3, [sp, #16]
 8009e00:	9307      	str	r3, [sp, #28]
 8009e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e06:	931a      	str	r3, [sp, #104]	; 0x68
 8009e08:	4654      	mov	r4, sl
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e10:	4851      	ldr	r0, [pc, #324]	; (8009f58 <_svfiprintf_r+0x1ec>)
 8009e12:	f7f6 f9e5 	bl	80001e0 <memchr>
 8009e16:	9a04      	ldr	r2, [sp, #16]
 8009e18:	b9d8      	cbnz	r0, 8009e52 <_svfiprintf_r+0xe6>
 8009e1a:	06d0      	lsls	r0, r2, #27
 8009e1c:	bf44      	itt	mi
 8009e1e:	2320      	movmi	r3, #32
 8009e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e24:	0711      	lsls	r1, r2, #28
 8009e26:	bf44      	itt	mi
 8009e28:	232b      	movmi	r3, #43	; 0x2b
 8009e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e32:	2b2a      	cmp	r3, #42	; 0x2a
 8009e34:	d015      	beq.n	8009e62 <_svfiprintf_r+0xf6>
 8009e36:	9a07      	ldr	r2, [sp, #28]
 8009e38:	4654      	mov	r4, sl
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	f04f 0c0a 	mov.w	ip, #10
 8009e40:	4621      	mov	r1, r4
 8009e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e46:	3b30      	subs	r3, #48	; 0x30
 8009e48:	2b09      	cmp	r3, #9
 8009e4a:	d94e      	bls.n	8009eea <_svfiprintf_r+0x17e>
 8009e4c:	b1b0      	cbz	r0, 8009e7c <_svfiprintf_r+0x110>
 8009e4e:	9207      	str	r2, [sp, #28]
 8009e50:	e014      	b.n	8009e7c <_svfiprintf_r+0x110>
 8009e52:	eba0 0308 	sub.w	r3, r0, r8
 8009e56:	fa09 f303 	lsl.w	r3, r9, r3
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	46a2      	mov	sl, r4
 8009e60:	e7d2      	b.n	8009e08 <_svfiprintf_r+0x9c>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	1d19      	adds	r1, r3, #4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	9103      	str	r1, [sp, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bfbb      	ittet	lt
 8009e6e:	425b      	neglt	r3, r3
 8009e70:	f042 0202 	orrlt.w	r2, r2, #2
 8009e74:	9307      	strge	r3, [sp, #28]
 8009e76:	9307      	strlt	r3, [sp, #28]
 8009e78:	bfb8      	it	lt
 8009e7a:	9204      	strlt	r2, [sp, #16]
 8009e7c:	7823      	ldrb	r3, [r4, #0]
 8009e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e80:	d10c      	bne.n	8009e9c <_svfiprintf_r+0x130>
 8009e82:	7863      	ldrb	r3, [r4, #1]
 8009e84:	2b2a      	cmp	r3, #42	; 0x2a
 8009e86:	d135      	bne.n	8009ef4 <_svfiprintf_r+0x188>
 8009e88:	9b03      	ldr	r3, [sp, #12]
 8009e8a:	1d1a      	adds	r2, r3, #4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	9203      	str	r2, [sp, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	bfb8      	it	lt
 8009e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e98:	3402      	adds	r4, #2
 8009e9a:	9305      	str	r3, [sp, #20]
 8009e9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f68 <_svfiprintf_r+0x1fc>
 8009ea0:	7821      	ldrb	r1, [r4, #0]
 8009ea2:	2203      	movs	r2, #3
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	f7f6 f99b 	bl	80001e0 <memchr>
 8009eaa:	b140      	cbz	r0, 8009ebe <_svfiprintf_r+0x152>
 8009eac:	2340      	movs	r3, #64	; 0x40
 8009eae:	eba0 000a 	sub.w	r0, r0, sl
 8009eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	4303      	orrs	r3, r0
 8009eba:	3401      	adds	r4, #1
 8009ebc:	9304      	str	r3, [sp, #16]
 8009ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec2:	4826      	ldr	r0, [pc, #152]	; (8009f5c <_svfiprintf_r+0x1f0>)
 8009ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ec8:	2206      	movs	r2, #6
 8009eca:	f7f6 f989 	bl	80001e0 <memchr>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d038      	beq.n	8009f44 <_svfiprintf_r+0x1d8>
 8009ed2:	4b23      	ldr	r3, [pc, #140]	; (8009f60 <_svfiprintf_r+0x1f4>)
 8009ed4:	bb1b      	cbnz	r3, 8009f1e <_svfiprintf_r+0x1b2>
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	3307      	adds	r3, #7
 8009eda:	f023 0307 	bic.w	r3, r3, #7
 8009ede:	3308      	adds	r3, #8
 8009ee0:	9303      	str	r3, [sp, #12]
 8009ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee4:	4433      	add	r3, r6
 8009ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee8:	e767      	b.n	8009dba <_svfiprintf_r+0x4e>
 8009eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eee:	460c      	mov	r4, r1
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	e7a5      	b.n	8009e40 <_svfiprintf_r+0xd4>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	3401      	adds	r4, #1
 8009ef8:	9305      	str	r3, [sp, #20]
 8009efa:	4619      	mov	r1, r3
 8009efc:	f04f 0c0a 	mov.w	ip, #10
 8009f00:	4620      	mov	r0, r4
 8009f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f06:	3a30      	subs	r2, #48	; 0x30
 8009f08:	2a09      	cmp	r2, #9
 8009f0a:	d903      	bls.n	8009f14 <_svfiprintf_r+0x1a8>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d0c5      	beq.n	8009e9c <_svfiprintf_r+0x130>
 8009f10:	9105      	str	r1, [sp, #20]
 8009f12:	e7c3      	b.n	8009e9c <_svfiprintf_r+0x130>
 8009f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f18:	4604      	mov	r4, r0
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e7f0      	b.n	8009f00 <_svfiprintf_r+0x194>
 8009f1e:	ab03      	add	r3, sp, #12
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	462a      	mov	r2, r5
 8009f24:	4b0f      	ldr	r3, [pc, #60]	; (8009f64 <_svfiprintf_r+0x1f8>)
 8009f26:	a904      	add	r1, sp, #16
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f3af 8000 	nop.w
 8009f2e:	1c42      	adds	r2, r0, #1
 8009f30:	4606      	mov	r6, r0
 8009f32:	d1d6      	bne.n	8009ee2 <_svfiprintf_r+0x176>
 8009f34:	89ab      	ldrh	r3, [r5, #12]
 8009f36:	065b      	lsls	r3, r3, #25
 8009f38:	f53f af2c 	bmi.w	8009d94 <_svfiprintf_r+0x28>
 8009f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f3e:	b01d      	add	sp, #116	; 0x74
 8009f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f44:	ab03      	add	r3, sp, #12
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	462a      	mov	r2, r5
 8009f4a:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <_svfiprintf_r+0x1f8>)
 8009f4c:	a904      	add	r1, sp, #16
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f000 f87a 	bl	800a048 <_printf_i>
 8009f54:	e7eb      	b.n	8009f2e <_svfiprintf_r+0x1c2>
 8009f56:	bf00      	nop
 8009f58:	0800a50c 	.word	0x0800a50c
 8009f5c:	0800a516 	.word	0x0800a516
 8009f60:	00000000 	.word	0x00000000
 8009f64:	08009cb5 	.word	0x08009cb5
 8009f68:	0800a512 	.word	0x0800a512

08009f6c <_printf_common>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	4616      	mov	r6, r2
 8009f72:	4699      	mov	r9, r3
 8009f74:	688a      	ldr	r2, [r1, #8]
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	bfb8      	it	lt
 8009f80:	4613      	movlt	r3, r2
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f88:	4607      	mov	r7, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	b10a      	cbz	r2, 8009f92 <_printf_common+0x26>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	0699      	lsls	r1, r3, #26
 8009f96:	bf42      	ittt	mi
 8009f98:	6833      	ldrmi	r3, [r6, #0]
 8009f9a:	3302      	addmi	r3, #2
 8009f9c:	6033      	strmi	r3, [r6, #0]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	f015 0506 	ands.w	r5, r5, #6
 8009fa4:	d106      	bne.n	8009fb4 <_printf_common+0x48>
 8009fa6:	f104 0a19 	add.w	sl, r4, #25
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	6832      	ldr	r2, [r6, #0]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	dc26      	bgt.n	800a002 <_printf_common+0x96>
 8009fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb8:	1e13      	subs	r3, r2, #0
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	bf18      	it	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	0692      	lsls	r2, r2, #26
 8009fc2:	d42b      	bmi.n	800a01c <_printf_common+0xb0>
 8009fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc8:	4649      	mov	r1, r9
 8009fca:	4638      	mov	r0, r7
 8009fcc:	47c0      	blx	r8
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d01e      	beq.n	800a010 <_printf_common+0xa4>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	68e5      	ldr	r5, [r4, #12]
 8009fd6:	6832      	ldr	r2, [r6, #0]
 8009fd8:	f003 0306 	and.w	r3, r3, #6
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	bf08      	it	eq
 8009fe0:	1aad      	subeq	r5, r5, r2
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	6922      	ldr	r2, [r4, #16]
 8009fe6:	bf0c      	ite	eq
 8009fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fec:	2500      	movne	r5, #0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bfc4      	itt	gt
 8009ff2:	1a9b      	subgt	r3, r3, r2
 8009ff4:	18ed      	addgt	r5, r5, r3
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	341a      	adds	r4, #26
 8009ffa:	42b5      	cmp	r5, r6
 8009ffc:	d11a      	bne.n	800a034 <_printf_common+0xc8>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e008      	b.n	800a014 <_printf_common+0xa8>
 800a002:	2301      	movs	r3, #1
 800a004:	4652      	mov	r2, sl
 800a006:	4649      	mov	r1, r9
 800a008:	4638      	mov	r0, r7
 800a00a:	47c0      	blx	r8
 800a00c:	3001      	adds	r0, #1
 800a00e:	d103      	bne.n	800a018 <_printf_common+0xac>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a018:	3501      	adds	r5, #1
 800a01a:	e7c6      	b.n	8009faa <_printf_common+0x3e>
 800a01c:	18e1      	adds	r1, r4, r3
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	2030      	movs	r0, #48	; 0x30
 800a022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a026:	4422      	add	r2, r4
 800a028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a02c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a030:	3302      	adds	r3, #2
 800a032:	e7c7      	b.n	8009fc4 <_printf_common+0x58>
 800a034:	2301      	movs	r3, #1
 800a036:	4622      	mov	r2, r4
 800a038:	4649      	mov	r1, r9
 800a03a:	4638      	mov	r0, r7
 800a03c:	47c0      	blx	r8
 800a03e:	3001      	adds	r0, #1
 800a040:	d0e6      	beq.n	800a010 <_printf_common+0xa4>
 800a042:	3601      	adds	r6, #1
 800a044:	e7d9      	b.n	8009ffa <_printf_common+0x8e>
	...

0800a048 <_printf_i>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	460c      	mov	r4, r1
 800a04e:	4691      	mov	r9, r2
 800a050:	7e27      	ldrb	r7, [r4, #24]
 800a052:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a054:	2f78      	cmp	r7, #120	; 0x78
 800a056:	4680      	mov	r8, r0
 800a058:	469a      	mov	sl, r3
 800a05a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a05e:	d807      	bhi.n	800a070 <_printf_i+0x28>
 800a060:	2f62      	cmp	r7, #98	; 0x62
 800a062:	d80a      	bhi.n	800a07a <_printf_i+0x32>
 800a064:	2f00      	cmp	r7, #0
 800a066:	f000 80d8 	beq.w	800a21a <_printf_i+0x1d2>
 800a06a:	2f58      	cmp	r7, #88	; 0x58
 800a06c:	f000 80a3 	beq.w	800a1b6 <_printf_i+0x16e>
 800a070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a078:	e03a      	b.n	800a0f0 <_printf_i+0xa8>
 800a07a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a07e:	2b15      	cmp	r3, #21
 800a080:	d8f6      	bhi.n	800a070 <_printf_i+0x28>
 800a082:	a001      	add	r0, pc, #4	; (adr r0, 800a088 <_printf_i+0x40>)
 800a084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a088:	0800a0e1 	.word	0x0800a0e1
 800a08c:	0800a0f5 	.word	0x0800a0f5
 800a090:	0800a071 	.word	0x0800a071
 800a094:	0800a071 	.word	0x0800a071
 800a098:	0800a071 	.word	0x0800a071
 800a09c:	0800a071 	.word	0x0800a071
 800a0a0:	0800a0f5 	.word	0x0800a0f5
 800a0a4:	0800a071 	.word	0x0800a071
 800a0a8:	0800a071 	.word	0x0800a071
 800a0ac:	0800a071 	.word	0x0800a071
 800a0b0:	0800a071 	.word	0x0800a071
 800a0b4:	0800a201 	.word	0x0800a201
 800a0b8:	0800a125 	.word	0x0800a125
 800a0bc:	0800a1e3 	.word	0x0800a1e3
 800a0c0:	0800a071 	.word	0x0800a071
 800a0c4:	0800a071 	.word	0x0800a071
 800a0c8:	0800a223 	.word	0x0800a223
 800a0cc:	0800a071 	.word	0x0800a071
 800a0d0:	0800a125 	.word	0x0800a125
 800a0d4:	0800a071 	.word	0x0800a071
 800a0d8:	0800a071 	.word	0x0800a071
 800a0dc:	0800a1eb 	.word	0x0800a1eb
 800a0e0:	680b      	ldr	r3, [r1, #0]
 800a0e2:	1d1a      	adds	r2, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	600a      	str	r2, [r1, #0]
 800a0e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e0a3      	b.n	800a23c <_printf_i+0x1f4>
 800a0f4:	6825      	ldr	r5, [r4, #0]
 800a0f6:	6808      	ldr	r0, [r1, #0]
 800a0f8:	062e      	lsls	r6, r5, #24
 800a0fa:	f100 0304 	add.w	r3, r0, #4
 800a0fe:	d50a      	bpl.n	800a116 <_printf_i+0xce>
 800a100:	6805      	ldr	r5, [r0, #0]
 800a102:	600b      	str	r3, [r1, #0]
 800a104:	2d00      	cmp	r5, #0
 800a106:	da03      	bge.n	800a110 <_printf_i+0xc8>
 800a108:	232d      	movs	r3, #45	; 0x2d
 800a10a:	426d      	negs	r5, r5
 800a10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a110:	485e      	ldr	r0, [pc, #376]	; (800a28c <_printf_i+0x244>)
 800a112:	230a      	movs	r3, #10
 800a114:	e019      	b.n	800a14a <_printf_i+0x102>
 800a116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a11a:	6805      	ldr	r5, [r0, #0]
 800a11c:	600b      	str	r3, [r1, #0]
 800a11e:	bf18      	it	ne
 800a120:	b22d      	sxthne	r5, r5
 800a122:	e7ef      	b.n	800a104 <_printf_i+0xbc>
 800a124:	680b      	ldr	r3, [r1, #0]
 800a126:	6825      	ldr	r5, [r4, #0]
 800a128:	1d18      	adds	r0, r3, #4
 800a12a:	6008      	str	r0, [r1, #0]
 800a12c:	0628      	lsls	r0, r5, #24
 800a12e:	d501      	bpl.n	800a134 <_printf_i+0xec>
 800a130:	681d      	ldr	r5, [r3, #0]
 800a132:	e002      	b.n	800a13a <_printf_i+0xf2>
 800a134:	0669      	lsls	r1, r5, #25
 800a136:	d5fb      	bpl.n	800a130 <_printf_i+0xe8>
 800a138:	881d      	ldrh	r5, [r3, #0]
 800a13a:	4854      	ldr	r0, [pc, #336]	; (800a28c <_printf_i+0x244>)
 800a13c:	2f6f      	cmp	r7, #111	; 0x6f
 800a13e:	bf0c      	ite	eq
 800a140:	2308      	moveq	r3, #8
 800a142:	230a      	movne	r3, #10
 800a144:	2100      	movs	r1, #0
 800a146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a14a:	6866      	ldr	r6, [r4, #4]
 800a14c:	60a6      	str	r6, [r4, #8]
 800a14e:	2e00      	cmp	r6, #0
 800a150:	bfa2      	ittt	ge
 800a152:	6821      	ldrge	r1, [r4, #0]
 800a154:	f021 0104 	bicge.w	r1, r1, #4
 800a158:	6021      	strge	r1, [r4, #0]
 800a15a:	b90d      	cbnz	r5, 800a160 <_printf_i+0x118>
 800a15c:	2e00      	cmp	r6, #0
 800a15e:	d04d      	beq.n	800a1fc <_printf_i+0x1b4>
 800a160:	4616      	mov	r6, r2
 800a162:	fbb5 f1f3 	udiv	r1, r5, r3
 800a166:	fb03 5711 	mls	r7, r3, r1, r5
 800a16a:	5dc7      	ldrb	r7, [r0, r7]
 800a16c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a170:	462f      	mov	r7, r5
 800a172:	42bb      	cmp	r3, r7
 800a174:	460d      	mov	r5, r1
 800a176:	d9f4      	bls.n	800a162 <_printf_i+0x11a>
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d10b      	bne.n	800a194 <_printf_i+0x14c>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07df      	lsls	r7, r3, #31
 800a180:	d508      	bpl.n	800a194 <_printf_i+0x14c>
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	4299      	cmp	r1, r3
 800a188:	bfde      	ittt	le
 800a18a:	2330      	movle	r3, #48	; 0x30
 800a18c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a190:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a194:	1b92      	subs	r2, r2, r6
 800a196:	6122      	str	r2, [r4, #16]
 800a198:	f8cd a000 	str.w	sl, [sp]
 800a19c:	464b      	mov	r3, r9
 800a19e:	aa03      	add	r2, sp, #12
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	f7ff fee2 	bl	8009f6c <_printf_common>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d14c      	bne.n	800a246 <_printf_i+0x1fe>
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	b004      	add	sp, #16
 800a1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b6:	4835      	ldr	r0, [pc, #212]	; (800a28c <_printf_i+0x244>)
 800a1b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	680e      	ldr	r6, [r1, #0]
 800a1c0:	061f      	lsls	r7, r3, #24
 800a1c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1c6:	600e      	str	r6, [r1, #0]
 800a1c8:	d514      	bpl.n	800a1f4 <_printf_i+0x1ac>
 800a1ca:	07d9      	lsls	r1, r3, #31
 800a1cc:	bf44      	itt	mi
 800a1ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a1d2:	6023      	strmi	r3, [r4, #0]
 800a1d4:	b91d      	cbnz	r5, 800a1de <_printf_i+0x196>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	f023 0320 	bic.w	r3, r3, #32
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	2310      	movs	r3, #16
 800a1e0:	e7b0      	b.n	800a144 <_printf_i+0xfc>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	f043 0320 	orr.w	r3, r3, #32
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	2378      	movs	r3, #120	; 0x78
 800a1ec:	4828      	ldr	r0, [pc, #160]	; (800a290 <_printf_i+0x248>)
 800a1ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1f2:	e7e3      	b.n	800a1bc <_printf_i+0x174>
 800a1f4:	065e      	lsls	r6, r3, #25
 800a1f6:	bf48      	it	mi
 800a1f8:	b2ad      	uxthmi	r5, r5
 800a1fa:	e7e6      	b.n	800a1ca <_printf_i+0x182>
 800a1fc:	4616      	mov	r6, r2
 800a1fe:	e7bb      	b.n	800a178 <_printf_i+0x130>
 800a200:	680b      	ldr	r3, [r1, #0]
 800a202:	6826      	ldr	r6, [r4, #0]
 800a204:	6960      	ldr	r0, [r4, #20]
 800a206:	1d1d      	adds	r5, r3, #4
 800a208:	600d      	str	r5, [r1, #0]
 800a20a:	0635      	lsls	r5, r6, #24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	d501      	bpl.n	800a214 <_printf_i+0x1cc>
 800a210:	6018      	str	r0, [r3, #0]
 800a212:	e002      	b.n	800a21a <_printf_i+0x1d2>
 800a214:	0671      	lsls	r1, r6, #25
 800a216:	d5fb      	bpl.n	800a210 <_printf_i+0x1c8>
 800a218:	8018      	strh	r0, [r3, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	4616      	mov	r6, r2
 800a220:	e7ba      	b.n	800a198 <_printf_i+0x150>
 800a222:	680b      	ldr	r3, [r1, #0]
 800a224:	1d1a      	adds	r2, r3, #4
 800a226:	600a      	str	r2, [r1, #0]
 800a228:	681e      	ldr	r6, [r3, #0]
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	2100      	movs	r1, #0
 800a22e:	4630      	mov	r0, r6
 800a230:	f7f5 ffd6 	bl	80001e0 <memchr>
 800a234:	b108      	cbz	r0, 800a23a <_printf_i+0x1f2>
 800a236:	1b80      	subs	r0, r0, r6
 800a238:	6060      	str	r0, [r4, #4]
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	2300      	movs	r3, #0
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a244:	e7a8      	b.n	800a198 <_printf_i+0x150>
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	4632      	mov	r2, r6
 800a24a:	4649      	mov	r1, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	47d0      	blx	sl
 800a250:	3001      	adds	r0, #1
 800a252:	d0ab      	beq.n	800a1ac <_printf_i+0x164>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	079b      	lsls	r3, r3, #30
 800a258:	d413      	bmi.n	800a282 <_printf_i+0x23a>
 800a25a:	68e0      	ldr	r0, [r4, #12]
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	4298      	cmp	r0, r3
 800a260:	bfb8      	it	lt
 800a262:	4618      	movlt	r0, r3
 800a264:	e7a4      	b.n	800a1b0 <_printf_i+0x168>
 800a266:	2301      	movs	r3, #1
 800a268:	4632      	mov	r2, r6
 800a26a:	4649      	mov	r1, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	47d0      	blx	sl
 800a270:	3001      	adds	r0, #1
 800a272:	d09b      	beq.n	800a1ac <_printf_i+0x164>
 800a274:	3501      	adds	r5, #1
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	9903      	ldr	r1, [sp, #12]
 800a27a:	1a5b      	subs	r3, r3, r1
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	dcf2      	bgt.n	800a266 <_printf_i+0x21e>
 800a280:	e7eb      	b.n	800a25a <_printf_i+0x212>
 800a282:	2500      	movs	r5, #0
 800a284:	f104 0619 	add.w	r6, r4, #25
 800a288:	e7f5      	b.n	800a276 <_printf_i+0x22e>
 800a28a:	bf00      	nop
 800a28c:	0800a51d 	.word	0x0800a51d
 800a290:	0800a52e 	.word	0x0800a52e

0800a294 <memmove>:
 800a294:	4288      	cmp	r0, r1
 800a296:	b510      	push	{r4, lr}
 800a298:	eb01 0402 	add.w	r4, r1, r2
 800a29c:	d902      	bls.n	800a2a4 <memmove+0x10>
 800a29e:	4284      	cmp	r4, r0
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	d807      	bhi.n	800a2b4 <memmove+0x20>
 800a2a4:	1e43      	subs	r3, r0, #1
 800a2a6:	42a1      	cmp	r1, r4
 800a2a8:	d008      	beq.n	800a2bc <memmove+0x28>
 800a2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2b2:	e7f8      	b.n	800a2a6 <memmove+0x12>
 800a2b4:	4402      	add	r2, r0
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	428a      	cmp	r2, r1
 800a2ba:	d100      	bne.n	800a2be <memmove+0x2a>
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2c6:	e7f7      	b.n	800a2b8 <memmove+0x24>

0800a2c8 <_free_r>:
 800a2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	d048      	beq.n	800a360 <_free_r+0x98>
 800a2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d2:	9001      	str	r0, [sp, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2da:	bfb8      	it	lt
 800a2dc:	18e4      	addlt	r4, r4, r3
 800a2de:	f000 f8d3 	bl	800a488 <__malloc_lock>
 800a2e2:	4a20      	ldr	r2, [pc, #128]	; (800a364 <_free_r+0x9c>)
 800a2e4:	9801      	ldr	r0, [sp, #4]
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	4615      	mov	r5, r2
 800a2ea:	b933      	cbnz	r3, 800a2fa <_free_r+0x32>
 800a2ec:	6063      	str	r3, [r4, #4]
 800a2ee:	6014      	str	r4, [r2, #0]
 800a2f0:	b003      	add	sp, #12
 800a2f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f6:	f000 b8cd 	b.w	800a494 <__malloc_unlock>
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	d90b      	bls.n	800a316 <_free_r+0x4e>
 800a2fe:	6821      	ldr	r1, [r4, #0]
 800a300:	1862      	adds	r2, r4, r1
 800a302:	4293      	cmp	r3, r2
 800a304:	bf04      	itt	eq
 800a306:	681a      	ldreq	r2, [r3, #0]
 800a308:	685b      	ldreq	r3, [r3, #4]
 800a30a:	6063      	str	r3, [r4, #4]
 800a30c:	bf04      	itt	eq
 800a30e:	1852      	addeq	r2, r2, r1
 800a310:	6022      	streq	r2, [r4, #0]
 800a312:	602c      	str	r4, [r5, #0]
 800a314:	e7ec      	b.n	800a2f0 <_free_r+0x28>
 800a316:	461a      	mov	r2, r3
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b10b      	cbz	r3, 800a320 <_free_r+0x58>
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d9fa      	bls.n	800a316 <_free_r+0x4e>
 800a320:	6811      	ldr	r1, [r2, #0]
 800a322:	1855      	adds	r5, r2, r1
 800a324:	42a5      	cmp	r5, r4
 800a326:	d10b      	bne.n	800a340 <_free_r+0x78>
 800a328:	6824      	ldr	r4, [r4, #0]
 800a32a:	4421      	add	r1, r4
 800a32c:	1854      	adds	r4, r2, r1
 800a32e:	42a3      	cmp	r3, r4
 800a330:	6011      	str	r1, [r2, #0]
 800a332:	d1dd      	bne.n	800a2f0 <_free_r+0x28>
 800a334:	681c      	ldr	r4, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	6053      	str	r3, [r2, #4]
 800a33a:	4421      	add	r1, r4
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	e7d7      	b.n	800a2f0 <_free_r+0x28>
 800a340:	d902      	bls.n	800a348 <_free_r+0x80>
 800a342:	230c      	movs	r3, #12
 800a344:	6003      	str	r3, [r0, #0]
 800a346:	e7d3      	b.n	800a2f0 <_free_r+0x28>
 800a348:	6825      	ldr	r5, [r4, #0]
 800a34a:	1961      	adds	r1, r4, r5
 800a34c:	428b      	cmp	r3, r1
 800a34e:	bf04      	itt	eq
 800a350:	6819      	ldreq	r1, [r3, #0]
 800a352:	685b      	ldreq	r3, [r3, #4]
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	bf04      	itt	eq
 800a358:	1949      	addeq	r1, r1, r5
 800a35a:	6021      	streq	r1, [r4, #0]
 800a35c:	6054      	str	r4, [r2, #4]
 800a35e:	e7c7      	b.n	800a2f0 <_free_r+0x28>
 800a360:	b003      	add	sp, #12
 800a362:	bd30      	pop	{r4, r5, pc}
 800a364:	20000250 	.word	0x20000250

0800a368 <_malloc_r>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	1ccd      	adds	r5, r1, #3
 800a36c:	f025 0503 	bic.w	r5, r5, #3
 800a370:	3508      	adds	r5, #8
 800a372:	2d0c      	cmp	r5, #12
 800a374:	bf38      	it	cc
 800a376:	250c      	movcc	r5, #12
 800a378:	2d00      	cmp	r5, #0
 800a37a:	4606      	mov	r6, r0
 800a37c:	db01      	blt.n	800a382 <_malloc_r+0x1a>
 800a37e:	42a9      	cmp	r1, r5
 800a380:	d903      	bls.n	800a38a <_malloc_r+0x22>
 800a382:	230c      	movs	r3, #12
 800a384:	6033      	str	r3, [r6, #0]
 800a386:	2000      	movs	r0, #0
 800a388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38a:	f000 f87d 	bl	800a488 <__malloc_lock>
 800a38e:	4921      	ldr	r1, [pc, #132]	; (800a414 <_malloc_r+0xac>)
 800a390:	680a      	ldr	r2, [r1, #0]
 800a392:	4614      	mov	r4, r2
 800a394:	b99c      	cbnz	r4, 800a3be <_malloc_r+0x56>
 800a396:	4f20      	ldr	r7, [pc, #128]	; (800a418 <_malloc_r+0xb0>)
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	b923      	cbnz	r3, 800a3a6 <_malloc_r+0x3e>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f000 f862 	bl	800a468 <_sbrk_r>
 800a3a4:	6038      	str	r0, [r7, #0]
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 f85d 	bl	800a468 <_sbrk_r>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	d123      	bne.n	800a3fa <_malloc_r+0x92>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	6033      	str	r3, [r6, #0]
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f000 f86c 	bl	800a494 <__malloc_unlock>
 800a3bc:	e7e3      	b.n	800a386 <_malloc_r+0x1e>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	1b5b      	subs	r3, r3, r5
 800a3c2:	d417      	bmi.n	800a3f4 <_malloc_r+0x8c>
 800a3c4:	2b0b      	cmp	r3, #11
 800a3c6:	d903      	bls.n	800a3d0 <_malloc_r+0x68>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	441c      	add	r4, r3
 800a3cc:	6025      	str	r5, [r4, #0]
 800a3ce:	e004      	b.n	800a3da <_malloc_r+0x72>
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	42a2      	cmp	r2, r4
 800a3d4:	bf0c      	ite	eq
 800a3d6:	600b      	streq	r3, [r1, #0]
 800a3d8:	6053      	strne	r3, [r2, #4]
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f000 f85a 	bl	800a494 <__malloc_unlock>
 800a3e0:	f104 000b 	add.w	r0, r4, #11
 800a3e4:	1d23      	adds	r3, r4, #4
 800a3e6:	f020 0007 	bic.w	r0, r0, #7
 800a3ea:	1ac2      	subs	r2, r0, r3
 800a3ec:	d0cc      	beq.n	800a388 <_malloc_r+0x20>
 800a3ee:	1a1b      	subs	r3, r3, r0
 800a3f0:	50a3      	str	r3, [r4, r2]
 800a3f2:	e7c9      	b.n	800a388 <_malloc_r+0x20>
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	6864      	ldr	r4, [r4, #4]
 800a3f8:	e7cc      	b.n	800a394 <_malloc_r+0x2c>
 800a3fa:	1cc4      	adds	r4, r0, #3
 800a3fc:	f024 0403 	bic.w	r4, r4, #3
 800a400:	42a0      	cmp	r0, r4
 800a402:	d0e3      	beq.n	800a3cc <_malloc_r+0x64>
 800a404:	1a21      	subs	r1, r4, r0
 800a406:	4630      	mov	r0, r6
 800a408:	f000 f82e 	bl	800a468 <_sbrk_r>
 800a40c:	3001      	adds	r0, #1
 800a40e:	d1dd      	bne.n	800a3cc <_malloc_r+0x64>
 800a410:	e7cf      	b.n	800a3b2 <_malloc_r+0x4a>
 800a412:	bf00      	nop
 800a414:	20000250 	.word	0x20000250
 800a418:	20000254 	.word	0x20000254

0800a41c <_realloc_r>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	4607      	mov	r7, r0
 800a420:	4614      	mov	r4, r2
 800a422:	460e      	mov	r6, r1
 800a424:	b921      	cbnz	r1, 800a430 <_realloc_r+0x14>
 800a426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a42a:	4611      	mov	r1, r2
 800a42c:	f7ff bf9c 	b.w	800a368 <_malloc_r>
 800a430:	b922      	cbnz	r2, 800a43c <_realloc_r+0x20>
 800a432:	f7ff ff49 	bl	800a2c8 <_free_r>
 800a436:	4625      	mov	r5, r4
 800a438:	4628      	mov	r0, r5
 800a43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43c:	f000 f830 	bl	800a4a0 <_malloc_usable_size_r>
 800a440:	42a0      	cmp	r0, r4
 800a442:	d20f      	bcs.n	800a464 <_realloc_r+0x48>
 800a444:	4621      	mov	r1, r4
 800a446:	4638      	mov	r0, r7
 800a448:	f7ff ff8e 	bl	800a368 <_malloc_r>
 800a44c:	4605      	mov	r5, r0
 800a44e:	2800      	cmp	r0, #0
 800a450:	d0f2      	beq.n	800a438 <_realloc_r+0x1c>
 800a452:	4631      	mov	r1, r6
 800a454:	4622      	mov	r2, r4
 800a456:	f7ff fbf7 	bl	8009c48 <memcpy>
 800a45a:	4631      	mov	r1, r6
 800a45c:	4638      	mov	r0, r7
 800a45e:	f7ff ff33 	bl	800a2c8 <_free_r>
 800a462:	e7e9      	b.n	800a438 <_realloc_r+0x1c>
 800a464:	4635      	mov	r5, r6
 800a466:	e7e7      	b.n	800a438 <_realloc_r+0x1c>

0800a468 <_sbrk_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d06      	ldr	r5, [pc, #24]	; (800a484 <_sbrk_r+0x1c>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7f6 fd24 	bl	8000ec0 <_sbrk>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_sbrk_r+0x1a>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_sbrk_r+0x1a>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	200003f4 	.word	0x200003f4

0800a488 <__malloc_lock>:
 800a488:	4801      	ldr	r0, [pc, #4]	; (800a490 <__malloc_lock+0x8>)
 800a48a:	f000 b811 	b.w	800a4b0 <__retarget_lock_acquire_recursive>
 800a48e:	bf00      	nop
 800a490:	200003fc 	.word	0x200003fc

0800a494 <__malloc_unlock>:
 800a494:	4801      	ldr	r0, [pc, #4]	; (800a49c <__malloc_unlock+0x8>)
 800a496:	f000 b80c 	b.w	800a4b2 <__retarget_lock_release_recursive>
 800a49a:	bf00      	nop
 800a49c:	200003fc 	.word	0x200003fc

0800a4a0 <_malloc_usable_size_r>:
 800a4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a4:	1f18      	subs	r0, r3, #4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bfbc      	itt	lt
 800a4aa:	580b      	ldrlt	r3, [r1, r0]
 800a4ac:	18c0      	addlt	r0, r0, r3
 800a4ae:	4770      	bx	lr

0800a4b0 <__retarget_lock_acquire_recursive>:
 800a4b0:	4770      	bx	lr

0800a4b2 <__retarget_lock_release_recursive>:
 800a4b2:	4770      	bx	lr

0800a4b4 <_init>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_fini>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr

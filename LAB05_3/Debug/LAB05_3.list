
LAB05_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a370  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b0  0800a5b0  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5b0  0800a5b0  0001a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b8  0800a5b8  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800a5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000144  0800a704  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800a704  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034daa  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038bc  00000000  00000000  00054f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002500  00000000  00000000  000587e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002408  00000000  00000000  0005ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da9  00000000  00000000  0005d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6d2  00000000  00000000  00075e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec61  00000000  00000000  00095563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001341c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a570  00000000  00000000  00134218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000144 	.word	0x20000144
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4f8 	.word	0x0800a4f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000148 	.word	0x20000148
 80001dc:	0800a4f8 	.word	0x0800a4f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fbff 	bl	8005d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8ed 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9f7 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f9cb 	bl	8000924 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800058e:	f000 f953 	bl	8000838 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4867      	ldr	r0, [pc, #412]	; (8000734 <main+0x1bc>)
 8000596:	f007 fe03 	bl	80081a0 <HAL_TIM_OC_Start_IT>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800059a:	2102      	movs	r1, #2
 800059c:	2001      	movs	r0, #1
 800059e:	f005 f85d 	bl	800565c <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 80005a2:	2102      	movs	r1, #2
 80005a4:	2001      	movs	r0, #1
 80005a6:	f005 f955 	bl	8005854 <IKS01A3_MOTION_SENSOR_Enable>
  MA5_filtered_accelero_axes.x = 0;
 80005aa:	4b63      	ldr	r3, [pc, #396]	; (8000738 <main+0x1c0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  MA5_filtered_accelero_axes.y = 0;
 80005b0:	4b61      	ldr	r3, [pc, #388]	; (8000738 <main+0x1c0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  MA5_filtered_accelero_axes.z = 0;
 80005b6:	4b60      	ldr	r3, [pc, #384]	; (8000738 <main+0x1c0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  for (int i = 0; i < 5; ++i) {
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e00e      	b.n	80005e0 <main+0x68>
      // Set the entire structure to zero
      memset(&circular_buffer[i], 0, sizeof(circular_buffer[i]));
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4a5b      	ldr	r2, [pc, #364]	; (800073c <main+0x1c4>)
 80005ce:	4413      	add	r3, r2
 80005d0:	220c      	movs	r2, #12
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f009 fb67 	bl	8009ca8 <memset>
  for (int i = 0; i < 5; ++i) {
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	dded      	ble.n	80005c2 <main+0x4a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time_to_read == 1){
 80005e6:	4b56      	ldr	r3, [pc, #344]	; (8000740 <main+0x1c8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d1fb      	bne.n	80005e6 <main+0x6e>
		  ++cnt;
 80005ee:	4b55      	ldr	r3, [pc, #340]	; (8000744 <main+0x1cc>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b53      	ldr	r3, [pc, #332]	; (8000744 <main+0x1cc>)
 80005f8:	701a      	strb	r2, [r3, #0]
//		  if (cnt == 51) 51_data_acquired = 1;
		  time_to_read = 0;
 80005fa:	4b51      	ldr	r3, [pc, #324]	; (8000740 <main+0x1c8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &circular_buffer[0]);
 8000600:	4a4e      	ldr	r2, [pc, #312]	; (800073c <main+0x1c4>)
 8000602:	2102      	movs	r1, #2
 8000604:	2001      	movs	r0, #1
 8000606:	f005 f967 	bl	80058d8 <IKS01A3_MOTION_SENSOR_GetAxes>
		  // moving averge FIR filter with 5 coefficients
		  for (int i = 0; i<5; ++i){
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	e02b      	b.n	8000668 <main+0xf0>
			  MA5_filtered_accelero_axes.x += circular_buffer[i].x;
 8000610:	4b49      	ldr	r3, [pc, #292]	; (8000738 <main+0x1c0>)
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	4849      	ldr	r0, [pc, #292]	; (800073c <main+0x1c4>)
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4403      	add	r3, r0
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	4a44      	ldr	r2, [pc, #272]	; (8000738 <main+0x1c0>)
 8000628:	6013      	str	r3, [r2, #0]
			  MA5_filtered_accelero_axes.y += circular_buffer[i].y;
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <main+0x1c0>)
 800062c:	6859      	ldr	r1, [r3, #4]
 800062e:	4843      	ldr	r0, [pc, #268]	; (800073c <main+0x1c4>)
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	4613      	mov	r3, r2
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4403      	add	r3, r0
 800063c:	3304      	adds	r3, #4
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	440b      	add	r3, r1
 8000642:	4a3d      	ldr	r2, [pc, #244]	; (8000738 <main+0x1c0>)
 8000644:	6053      	str	r3, [r2, #4]
			  MA5_filtered_accelero_axes.z += circular_buffer[i].z;
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <main+0x1c0>)
 8000648:	6899      	ldr	r1, [r3, #8]
 800064a:	483c      	ldr	r0, [pc, #240]	; (800073c <main+0x1c4>)
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4403      	add	r3, r0
 8000658:	3308      	adds	r3, #8
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	4a36      	ldr	r2, [pc, #216]	; (8000738 <main+0x1c0>)
 8000660:	6093      	str	r3, [r2, #8]
		  for (int i = 0; i<5; ++i){
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3301      	adds	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b04      	cmp	r3, #4
 800066c:	ddd0      	ble.n	8000610 <main+0x98>
		  }
		  MA5_filtered_accelero_axes.x /= 5;
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <main+0x1c0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a35      	ldr	r2, [pc, #212]	; (8000748 <main+0x1d0>)
 8000674:	fb82 1203 	smull	r1, r2, r2, r3
 8000678:	1052      	asrs	r2, r2, #1
 800067a:	17db      	asrs	r3, r3, #31
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	4a2e      	ldr	r2, [pc, #184]	; (8000738 <main+0x1c0>)
 8000680:	6013      	str	r3, [r2, #0]
		  MA5_filtered_accelero_axes.y /= 5;
 8000682:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <main+0x1c0>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4a30      	ldr	r2, [pc, #192]	; (8000748 <main+0x1d0>)
 8000688:	fb82 1203 	smull	r1, r2, r2, r3
 800068c:	1052      	asrs	r2, r2, #1
 800068e:	17db      	asrs	r3, r3, #31
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	4a29      	ldr	r2, [pc, #164]	; (8000738 <main+0x1c0>)
 8000694:	6053      	str	r3, [r2, #4]
		  MA5_filtered_accelero_axes.z /= 5;
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <main+0x1c0>)
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <main+0x1d0>)
 800069c:	fb82 1203 	smull	r1, r2, r2, r3
 80006a0:	1052      	asrs	r2, r2, #1
 80006a2:	17db      	asrs	r3, r3, #31
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	4a24      	ldr	r2, [pc, #144]	; (8000738 <main+0x1c0>)
 80006a8:	6093      	str	r3, [r2, #8]
		  uint8_t length = sprintf(msg, "%s X:%ld, Y:%ld, Z:%ld\n\r%s X:%ld, Y:%ld, Z:%ld\n\r",
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <main+0x1c4>)
 80006ac:	681d      	ldr	r5, [r3, #0]
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <main+0x1c4>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <main+0x1c4>)
 80006b4:	6892      	ldr	r2, [r2, #8]
 80006b6:	4920      	ldr	r1, [pc, #128]	; (8000738 <main+0x1c0>)
 80006b8:	6809      	ldr	r1, [r1, #0]
 80006ba:	481f      	ldr	r0, [pc, #124]	; (8000738 <main+0x1c0>)
 80006bc:	6840      	ldr	r0, [r0, #4]
 80006be:	4c1e      	ldr	r4, [pc, #120]	; (8000738 <main+0x1c0>)
 80006c0:	68a4      	ldr	r4, [r4, #8]
 80006c2:	9405      	str	r4, [sp, #20]
 80006c4:	9004      	str	r0, [sp, #16]
 80006c6:	9103      	str	r1, [sp, #12]
 80006c8:	4920      	ldr	r1, [pc, #128]	; (800074c <main+0x1d4>)
 80006ca:	9102      	str	r1, [sp, #8]
 80006cc:	9201      	str	r2, [sp, #4]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	462b      	mov	r3, r5
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <main+0x1d8>)
 80006d4:	491f      	ldr	r1, [pc, #124]	; (8000754 <main+0x1dc>)
 80006d6:	4820      	ldr	r0, [pc, #128]	; (8000758 <main+0x1e0>)
 80006d8:	f009 faee 	bl	8009cb8 <siprintf>
 80006dc:	4603      	mov	r3, r0
 80006de:	70fb      	strb	r3, [r7, #3]
		  			"Unfiltered acc", circular_buffer[0].x, circular_buffer[0].y, circular_buffer[0].z,
					"Filtered acc", MA5_filtered_accelero_axes.x, MA5_filtered_accelero_axes.y, MA5_filtered_accelero_axes.z);
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	491c      	ldr	r1, [pc, #112]	; (8000758 <main+0x1e0>)
 80006e8:	481c      	ldr	r0, [pc, #112]	; (800075c <main+0x1e4>)
 80006ea:	f008 fc46 	bl	8008f7a <HAL_UART_Transmit_IT>
//		  uint8_t length = sprintf(msg, "%s X:%ld, Y:%ld, Z:%ld\n\r",
//		  			"Unfiltered acc", circular_buffer[3].x, circular_buffer[3].y, circular_buffer[3].z);
		  for (int j = 4; j > 0; --j) {
 80006ee:	2304      	movs	r3, #4
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e015      	b.n	8000720 <main+0x1a8>
			  memcpy(&circular_buffer[j], &circular_buffer[j-1], sizeof(circular_buffer[j]));
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <main+0x1c4>)
 8000700:	1898      	adds	r0, r3, r2
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1e5a      	subs	r2, r3, #1
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <main+0x1c4>)
 8000710:	4413      	add	r3, r2
 8000712:	220c      	movs	r2, #12
 8000714:	4619      	mov	r1, r3
 8000716:	f009 fab9 	bl	8009c8c <memcpy>
		  for (int j = 4; j > 0; --j) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3b01      	subs	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	dce6      	bgt.n	80006f4 <main+0x17c>
		  }
		  memset(&MA5_filtered_accelero_axes, 0, sizeof(MA5_filtered_accelero_axes));
 8000726:	220c      	movs	r2, #12
 8000728:	2100      	movs	r1, #0
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <main+0x1c0>)
 800072c:	f009 fabc 	bl	8009ca8 <memset>
	  if (time_to_read == 1){
 8000730:	e759      	b.n	80005e6 <main+0x6e>
 8000732:	bf00      	nop
 8000734:	200002d8 	.word	0x200002d8
 8000738:	20000338 	.word	0x20000338
 800073c:	20000344 	.word	0x20000344
 8000740:	20000160 	.word	0x20000160
 8000744:	20000164 	.word	0x20000164
 8000748:	66666667 	.word	0x66666667
 800074c:	0800a554 	.word	0x0800a554
 8000750:	0800a510 	.word	0x0800a510
 8000754:	0800a520 	.word	0x0800a520
 8000758:	20000274 	.word	0x20000274
 800075c:	20000380 	.word	0x20000380

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f009 fa9a 	bl	8009ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <SystemClock_Config+0xd0>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <SystemClock_Config+0xd0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd4>)
 80007ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d4:	2310      	movs	r3, #16
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007de:	2304      	movs	r3, #4
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 ffbc 	bl	8007768 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007f6:	f000 f941 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f007 fa1e 	bl	8007c58 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000822:	f000 f92b 	bl	8000a7c <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
 8000866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <MX_TIM3_Init+0xe4>)
 800086a:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <MX_TIM3_Init+0xe8>)
 800086c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_TIM3_Init+0xe4>)
 8000870:	f240 3247 	movw	r2, #839	; 0x347
 8000874:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_TIM3_Init+0xe4>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_TIM3_Init+0xe4>)
 800087e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000882:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_TIM3_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_TIM3_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000890:	4822      	ldr	r0, [pc, #136]	; (800091c <MX_TIM3_Init+0xe4>)
 8000892:	f007 fbdd 	bl	8008050 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800089c:	f000 f8ee 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008aa:	4619      	mov	r1, r3
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_TIM3_Init+0xe4>)
 80008ae:	f007 fed9 	bl	8008664 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80008b8:	f000 f8e0 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008bc:	4817      	ldr	r0, [pc, #92]	; (800091c <MX_TIM3_Init+0xe4>)
 80008be:	f007 fc16 	bl	80080ee <HAL_TIM_OC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008c8:	f000 f8d8 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4619      	mov	r1, r3
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <MX_TIM3_Init+0xe4>)
 80008dc:	f008 fa7e 	bl	8008ddc <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008e6:	f000 f8c9 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 80008ee:	f240 13f3 	movw	r3, #499	; 0x1f3
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_TIM3_Init+0xe4>)
 8000904:	f007 fe52 	bl	80085ac <HAL_TIM_OC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800090e:	f000 f8b5 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3738      	adds	r7, #56	; 0x38
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200002d8 	.word	0x200002d8
 8000920:	40000400 	.word	0x40000400

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART2_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800095c:	f008 fac0 	bl	8008ee0 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f889 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000380 	.word	0x20000380
 8000974:	40004400 	.word	0x40004400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <MX_GPIO_Init+0xd0>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_GPIO_Init+0xd4>)
 8000a04:	f005 fe5e 	bl	80066c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_GPIO_Init+0xd8>)
 8000a20:	f005 fbe8 	bl	80061f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a24:	2320      	movs	r3, #32
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0xd4>)
 8000a3c:	f005 fbda 	bl	80061f4 <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020800 	.word	0x40020800

08000a54 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	time_to_read = 1;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a62:	2120      	movs	r1, #32
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000a66:	f005 fe46 	bl	80066f6 <HAL_GPIO_TogglePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000160 	.word	0x20000160
 8000a78:	40020000 	.word	0x40020000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f005 fac0 	bl	800604c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_TIM_Base_MspInit+0x48>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d115      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_TIM_Base_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	201d      	movs	r0, #29
 8000b0c:	f005 faa9 	bl	8006062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b10:	201d      	movs	r0, #29
 8000b12:	f005 fac2 	bl	800609a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40000400 	.word	0x40000400
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <HAL_UART_MspInit+0x94>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d133      	bne.n	8000bb2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_UART_MspInit+0x98>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <HAL_UART_MspInit+0x98>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x98>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_UART_MspInit+0x98>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <HAL_UART_MspInit+0x98>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_UART_MspInit+0x98>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b82:	230c      	movs	r3, #12
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <HAL_UART_MspInit+0x9c>)
 8000b9e:	f005 fb29 	bl	80061f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2026      	movs	r0, #38	; 0x26
 8000ba8:	f005 fa5b 	bl	8006062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bac:	2026      	movs	r0, #38	; 0x26
 8000bae:	f005 fa74 	bl	800609a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f005 f906 	bl	8005e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM3_IRQHandler+0x10>)
 8000c22:	f007 fbbb 	bl	800839c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200002d8 	.word	0x200002d8

08000c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USART2_IRQHandler+0x10>)
 8000c36:	f008 f9e5 	bl	8009004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000380 	.word	0x20000380

08000c44 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <BSP_I2C1_Init+0x58>)
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <BSP_I2C1_Init+0x5c>)
 8000c52:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <BSP_I2C1_Init+0x60>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	4912      	ldr	r1, [pc, #72]	; (8000ca4 <BSP_I2C1_Init+0x60>)
 8000c5c:	600a      	str	r2, [r1, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d117      	bne.n	8000c92 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <BSP_I2C1_Init+0x58>)
 8000c64:	f006 fa0a 	bl	800707c <HAL_I2C_GetState>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d111      	bne.n	8000c92 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c6e:	480b      	ldr	r0, [pc, #44]	; (8000c9c <BSP_I2C1_Init+0x58>)
 8000c70:	f000 f8e2 	bl	8000e38 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10b      	bne.n	8000c92 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <BSP_I2C1_Init+0x58>)
 8000c7c:	f000 f8a8 	bl	8000dd0 <MX_I2C1_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c86:	f06f 0307 	mvn.w	r3, #7
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	e001      	b.n	8000c92 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c92:	687b      	ldr	r3, [r7, #4]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000628 	.word	0x20000628
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	20000168 	.word	0x20000168

08000ca8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <BSP_I2C1_DeInit+0x48>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d014      	beq.n	8000ce4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <BSP_I2C1_DeInit+0x48>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <BSP_I2C1_DeInit+0x48>)
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <BSP_I2C1_DeInit+0x48>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10b      	bne.n	8000ce4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <BSP_I2C1_DeInit+0x4c>)
 8000cce:	f000 f8fd 	bl	8000ecc <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <BSP_I2C1_DeInit+0x4c>)
 8000cd4:	f005 fe6e 	bl	80069b4 <HAL_I2C_DeInit>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000cde:	f06f 0307 	mvn.w	r3, #7
 8000ce2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000168 	.word	0x20000168
 8000cf4:	20000628 	.word	0x20000628

08000cf8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af04      	add	r7, sp, #16
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4603      	mov	r3, r0
 8000d04:	81fb      	strh	r3, [r7, #14]
 8000d06:	460b      	mov	r3, r1
 8000d08:	81bb      	strh	r3, [r7, #12]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d12:	89ba      	ldrh	r2, [r7, #12]
 8000d14:	89f9      	ldrh	r1, [r7, #14]
 8000d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <BSP_I2C1_WriteReg+0x60>)
 8000d28:	f005 fe88 	bl	8006a3c <HAL_I2C_Mem_Write>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <BSP_I2C1_WriteReg+0x60>)
 8000d34:	f006 f9b0 	bl	8007098 <HAL_I2C_GetError>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d103      	bne.n	8000d46 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d3e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e002      	b.n	8000d4c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d46:	f06f 0303 	mvn.w	r3, #3
 8000d4a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d4c:	697b      	ldr	r3, [r7, #20]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000628 	.word	0x20000628

08000d5c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60ba      	str	r2, [r7, #8]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4603      	mov	r3, r0
 8000d68:	81fb      	strh	r3, [r7, #14]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	81bb      	strh	r3, [r7, #12]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d76:	89ba      	ldrh	r2, [r7, #12]
 8000d78:	89f9      	ldrh	r1, [r7, #14]
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <BSP_I2C1_ReadReg+0x60>)
 8000d8c:	f005 ff50 	bl	8006c30 <HAL_I2C_Mem_Read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00c      	beq.n	8000db0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <BSP_I2C1_ReadReg+0x60>)
 8000d98:	f006 f97e 	bl	8007098 <HAL_I2C_GetError>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d103      	bne.n	8000daa <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000da2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e002      	b.n	8000db0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000daa:	f06f 0303 	mvn.w	r3, #3
 8000dae:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000db0:	697b      	ldr	r3, [r7, #20]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000628 	.word	0x20000628

08000dc0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000dc4:	f005 f842 	bl	8005e4c <HAL_GetTick>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <MX_I2C1_Init+0x60>)
 8000de0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <MX_I2C1_Init+0x64>)
 8000de6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfa:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f005 fc89 	bl	800672c <HAL_I2C_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40005400 	.word	0x40005400
 8000e34:	00061a80 	.word	0x00061a80

08000e38 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <I2C1_MspInit+0x8c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <I2C1_MspInit+0x8c>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <I2C1_MspInit+0x8c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e62:	2312      	movs	r3, #18
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <I2C1_MspInit+0x90>)
 8000e7a:	f005 f9bb 	bl	80061f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e90:	2304      	movs	r3, #4
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <I2C1_MspInit+0x90>)
 8000e9c:	f005 f9aa 	bl	80061f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <I2C1_MspInit+0x8c>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <I2C1_MspInit+0x8c>)
 8000eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <I2C1_MspInit+0x8c>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020400 	.word	0x40020400

08000ecc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <I2C1_MspDeInit+0x30>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <I2C1_MspDeInit+0x30>)
 8000eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <I2C1_MspDeInit+0x34>)
 8000ee6:	f005 fb09 	bl	80064fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <I2C1_MspDeInit+0x34>)
 8000ef0:	f005 fb04 	bl	80064fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f008 fe80 	bl	8009c38 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20018000 	.word	0x20018000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	2000016c 	.word	0x2000016c
 8000f6c:	200006a0 	.word	0x200006a0

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff ffd7 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f008 fe3f 	bl	8009c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fad7 	bl	8000578 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000fd8:	0800a5c0 	.word	0x0800a5c0
  ldr r2, =_sbss
 8000fdc:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000fe0:	2000069c 	.word	0x2000069c

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d103      	bne.n	8001004 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e051      	b.n	80010a8 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	7b1a      	ldrb	r2, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <LIS2DW12_RegisterBusIO+0xcc>)
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <LIS2DW12_RegisterBusIO+0xd0>)
 8001046:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	69da      	ldr	r2, [r3, #28]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e020      	b.n	80010a8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4798      	blx	r3
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e016      	b.n	80010a8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d112      	bne.n	80010a8 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10d      	bne.n	80010a8 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 800108c:	2305      	movs	r3, #5
 800108e:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	461a      	mov	r2, r3
 8001094:	2121      	movs	r1, #33	; 0x21
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fd87 	bl	8001baa <LIS2DW12_Write_Reg>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08001f3d 	.word	0x08001f3d
 80010b8:	08001f73 	.word	0x08001f73

080010bc <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3320      	adds	r3, #32
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fa94 	bl	80025f8 <lis2dw12_auto_increment_set>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e04b      	b.n	8001174 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3320      	adds	r3, #32
 80010e0:	2101      	movs	r1, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f9a8 	bl	8002438 <lis2dw12_block_data_update_set>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e03f      	b.n	8001174 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3320      	adds	r3, #32
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 faa2 	bl	8002644 <lis2dw12_fifo_mode_set>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e033      	b.n	8001174 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3320      	adds	r3, #32
 8001110:	2104      	movs	r1, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ff78 	bl	8002008 <lis2dw12_power_mode_set>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e027      	b.n	8001174 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <LIS2DW12_Init+0xc0>)
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3320      	adds	r3, #32
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f001 f869 	bl	8002218 <lis2dw12_data_rate_set>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	e010      	b.n	8001174 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3320      	adds	r3, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f001 f993 	bl	8002484 <lis2dw12_full_scale_set>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	e004      	b.n	8001174 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	42c80000 	.word	0x42c80000

08001180 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f888 	bl	800129e <LIS2DW12_ACC_Disable>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	e010      	b.n	80011bc <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3320      	adds	r3, #32
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 f9fe 	bl	80025d6 <lis2dw12_device_id_get>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	e000      	b.n	80011e8 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2210      	movs	r2, #16
 800121c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	4a06      	ldr	r2, [pc, #24]	; (8001248 <LIS2DW12_GetCapabilities+0x58>)
 8001230:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	44c80000 	.word	0x44c80000

0800124c <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e019      	b.n	8001296 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001274:	461a      	mov	r2, r3
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fcb0 	bl	8001be0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e004      	b.n	8001296 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e010      	b.n	80012d6 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3320      	adds	r3, #32
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 ffac 	bl	8002218 <lis2dw12_data_rate_set>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e004      	b.n	80012d6 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3320      	adds	r3, #32
 80012f2:	f107 020b 	add.w	r2, r7, #11
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 f8e9 	bl	80024d0 <lis2dw12_full_scale_get>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	e0a0      	b.n	800144c <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3320      	adds	r3, #32
 800130e:	f107 020a 	add.w	r2, r7, #10
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fec5 	bl	80020a4 <lis2dw12_power_mode_get>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	e092      	b.n	800144c <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8001326:	7abb      	ldrb	r3, [r7, #10]
 8001328:	2b1b      	cmp	r3, #27
 800132a:	f200 8087 	bhi.w	800143c <LIS2DW12_ACC_GetSensitivity+0x15c>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	080013a5 	.word	0x080013a5
 8001338:	080013f1 	.word	0x080013f1
 800133c:	080013f1 	.word	0x080013f1
 8001340:	080013f1 	.word	0x080013f1
 8001344:	080013f1 	.word	0x080013f1
 8001348:	0800143d 	.word	0x0800143d
 800134c:	0800143d 	.word	0x0800143d
 8001350:	0800143d 	.word	0x0800143d
 8001354:	080013a5 	.word	0x080013a5
 8001358:	080013f1 	.word	0x080013f1
 800135c:	080013f1 	.word	0x080013f1
 8001360:	080013f1 	.word	0x080013f1
 8001364:	0800143d 	.word	0x0800143d
 8001368:	0800143d 	.word	0x0800143d
 800136c:	0800143d 	.word	0x0800143d
 8001370:	0800143d 	.word	0x0800143d
 8001374:	080013a5 	.word	0x080013a5
 8001378:	080013f1 	.word	0x080013f1
 800137c:	080013f1 	.word	0x080013f1
 8001380:	080013f1 	.word	0x080013f1
 8001384:	080013f1 	.word	0x080013f1
 8001388:	0800143d 	.word	0x0800143d
 800138c:	0800143d 	.word	0x0800143d
 8001390:	0800143d 	.word	0x0800143d
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013f1 	.word	0x080013f1
 800139c:	080013f1 	.word	0x080013f1
 80013a0:	080013f1 	.word	0x080013f1
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d81a      	bhi.n	80013e0 <LIS2DW12_ACC_GetSensitivity+0x100>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013c9 	.word	0x080013c9
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013d9 	.word	0x080013d9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80013c4:	601a      	str	r2, [r3, #0]
          break;
 80013c6:	e012      	b.n	80013ee <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80013cc:	601a      	str	r2, [r3, #0]
          break;
 80013ce:	e00e      	b.n	80013ee <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4a22      	ldr	r2, [pc, #136]	; (800145c <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80013d4:	601a      	str	r2, [r3, #0]
          break;
 80013d6:	e00a      	b.n	80013ee <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <LIS2DW12_ACC_GetSensitivity+0x180>)
 80013dc:	601a      	str	r2, [r3, #0]
          break;
 80013de:	e006      	b.n	80013ee <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80013e4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	60fb      	str	r3, [r7, #12]
          break;
 80013ec:	bf00      	nop
      }
      break;
 80013ee:	e02c      	b.n	800144a <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80013f0:	7afb      	ldrb	r3, [r7, #11]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d81a      	bhi.n	800142c <LIS2DW12_ACC_GetSensitivity+0x14c>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	08001415 	.word	0x08001415
 8001404:	0800141d 	.word	0x0800141d
 8001408:	08001425 	.word	0x08001425
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8001410:	601a      	str	r2, [r3, #0]
          break;
 8001412:	e012      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001418:	601a      	str	r2, [r3, #0]
          break;
 800141a:	e00e      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001420:	601a      	str	r2, [r3, #0]
          break;
 8001422:	e00a      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001428:	601a      	str	r2, [r3, #0]
          break;
 800142a:	e006      	b.n	800143a <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001430:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	60fb      	str	r3, [r7, #12]
          break;
 8001438:	bf00      	nop
      }
      break;
 800143a:	e006      	b.n	800144a <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001440:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	60fb      	str	r3, [r7, #12]
      break;
 8001448:	bf00      	nop
  }

  return ret;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	3f79db23 	.word	0x3f79db23
 8001458:	3ff9db23 	.word	0x3ff9db23
 800145c:	4079db23 	.word	0x4079db23
 8001460:	40f9db23 	.word	0x40f9db23
 8001464:	bf800000 	.word	0xbf800000
 8001468:	3e79db23 	.word	0x3e79db23
 800146c:	3ef9db23 	.word	0x3ef9db23

08001470 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3320      	adds	r3, #32
 8001482:	f107 020b 	add.w	r2, r7, #11
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f000 ff0b 	bl	80022a4 <lis2dw12_data_rate_get>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e1d4      	b.n	8001844 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3320      	adds	r3, #32
 800149e:	f107 020a 	add.w	r2, r7, #10
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fdfd 	bl	80020a4 <lis2dw12_power_mode_get>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	e1c6      	b.n	8001844 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80014b6:	7afb      	ldrb	r3, [r7, #11]
 80014b8:	2b32      	cmp	r3, #50	; 0x32
 80014ba:	f200 81bb 	bhi.w	8001834 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	08001591 	.word	0x08001591
 80014c8:	0800159b 	.word	0x0800159b
 80014cc:	08001639 	.word	0x08001639
 80014d0:	08001641 	.word	0x08001641
 80014d4:	08001649 	.word	0x08001649
 80014d8:	08001651 	.word	0x08001651
 80014dc:	08001659 	.word	0x08001659
 80014e0:	08001661 	.word	0x08001661
 80014e4:	080016fd 	.word	0x080016fd
 80014e8:	08001799 	.word	0x08001799
 80014ec:	08001835 	.word	0x08001835
 80014f0:	08001835 	.word	0x08001835
 80014f4:	08001835 	.word	0x08001835
 80014f8:	08001835 	.word	0x08001835
 80014fc:	08001835 	.word	0x08001835
 8001500:	08001835 	.word	0x08001835
 8001504:	08001835 	.word	0x08001835
 8001508:	08001835 	.word	0x08001835
 800150c:	08001591 	.word	0x08001591
 8001510:	08001835 	.word	0x08001835
 8001514:	08001835 	.word	0x08001835
 8001518:	08001835 	.word	0x08001835
 800151c:	08001835 	.word	0x08001835
 8001520:	08001835 	.word	0x08001835
 8001524:	08001835 	.word	0x08001835
 8001528:	08001835 	.word	0x08001835
 800152c:	08001835 	.word	0x08001835
 8001530:	08001835 	.word	0x08001835
 8001534:	08001835 	.word	0x08001835
 8001538:	08001835 	.word	0x08001835
 800153c:	08001835 	.word	0x08001835
 8001540:	08001835 	.word	0x08001835
 8001544:	08001835 	.word	0x08001835
 8001548:	08001835 	.word	0x08001835
 800154c:	08001835 	.word	0x08001835
 8001550:	08001835 	.word	0x08001835
 8001554:	08001835 	.word	0x08001835
 8001558:	08001835 	.word	0x08001835
 800155c:	08001835 	.word	0x08001835
 8001560:	08001835 	.word	0x08001835
 8001564:	08001835 	.word	0x08001835
 8001568:	08001835 	.word	0x08001835
 800156c:	08001835 	.word	0x08001835
 8001570:	08001835 	.word	0x08001835
 8001574:	08001835 	.word	0x08001835
 8001578:	08001835 	.word	0x08001835
 800157c:	08001835 	.word	0x08001835
 8001580:	08001835 	.word	0x08001835
 8001584:	08001835 	.word	0x08001835
 8001588:	08001835 	.word	0x08001835
 800158c:	08001591 	.word	0x08001591
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
      break;
 8001598:	e153      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	2b1b      	cmp	r3, #27
 800159e:	d843      	bhi.n	8001628 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80015a0:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	08001621 	.word	0x08001621
 80015ac:	08001621 	.word	0x08001621
 80015b0:	08001621 	.word	0x08001621
 80015b4:	08001621 	.word	0x08001621
 80015b8:	08001619 	.word	0x08001619
 80015bc:	08001629 	.word	0x08001629
 80015c0:	08001629 	.word	0x08001629
 80015c4:	08001629 	.word	0x08001629
 80015c8:	08001621 	.word	0x08001621
 80015cc:	08001621 	.word	0x08001621
 80015d0:	08001621 	.word	0x08001621
 80015d4:	08001621 	.word	0x08001621
 80015d8:	08001629 	.word	0x08001629
 80015dc:	08001629 	.word	0x08001629
 80015e0:	08001629 	.word	0x08001629
 80015e4:	08001629 	.word	0x08001629
 80015e8:	08001621 	.word	0x08001621
 80015ec:	08001621 	.word	0x08001621
 80015f0:	08001621 	.word	0x08001621
 80015f4:	08001621 	.word	0x08001621
 80015f8:	08001619 	.word	0x08001619
 80015fc:	08001629 	.word	0x08001629
 8001600:	08001629 	.word	0x08001629
 8001604:	08001629 	.word	0x08001629
 8001608:	08001621 	.word	0x08001621
 800160c:	08001621 	.word	0x08001621
 8001610:	08001621 	.word	0x08001621
 8001614:	08001621 	.word	0x08001621
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4a8c      	ldr	r2, [pc, #560]	; (800184c <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 800161c:	601a      	str	r2, [r3, #0]
          break;
 800161e:	e00a      	b.n	8001636 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4a8b      	ldr	r2, [pc, #556]	; (8001850 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8001624:	601a      	str	r2, [r3, #0]
          break;
 8001626:	e006      	b.n	8001636 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800162c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	60fb      	str	r3, [r7, #12]
          break;
 8001634:	bf00      	nop
      }
      break;
 8001636:	e104      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4a84      	ldr	r2, [pc, #528]	; (800184c <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 800163c:	601a      	str	r2, [r3, #0]
      break;
 800163e:	e100      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4a85      	ldr	r2, [pc, #532]	; (8001858 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8001644:	601a      	str	r2, [r3, #0]
      break;
 8001646:	e0fc      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4a84      	ldr	r2, [pc, #528]	; (800185c <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 800164c:	601a      	str	r2, [r3, #0]
      break;
 800164e:	e0f8      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4a83      	ldr	r2, [pc, #524]	; (8001860 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8001654:	601a      	str	r2, [r3, #0]
      break;
 8001656:	e0f4      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4a82      	ldr	r2, [pc, #520]	; (8001864 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800165c:	601a      	str	r2, [r3, #0]
      break;
 800165e:	e0f0      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001660:	7abb      	ldrb	r3, [r7, #10]
 8001662:	2b1b      	cmp	r3, #27
 8001664:	d842      	bhi.n	80016ec <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	080016e5 	.word	0x080016e5
 8001670:	080016e5 	.word	0x080016e5
 8001674:	080016e5 	.word	0x080016e5
 8001678:	080016e5 	.word	0x080016e5
 800167c:	080016dd 	.word	0x080016dd
 8001680:	080016ed 	.word	0x080016ed
 8001684:	080016ed 	.word	0x080016ed
 8001688:	080016ed 	.word	0x080016ed
 800168c:	080016e5 	.word	0x080016e5
 8001690:	080016e5 	.word	0x080016e5
 8001694:	080016e5 	.word	0x080016e5
 8001698:	080016e5 	.word	0x080016e5
 800169c:	080016ed 	.word	0x080016ed
 80016a0:	080016ed 	.word	0x080016ed
 80016a4:	080016ed 	.word	0x080016ed
 80016a8:	080016ed 	.word	0x080016ed
 80016ac:	080016e5 	.word	0x080016e5
 80016b0:	080016e5 	.word	0x080016e5
 80016b4:	080016e5 	.word	0x080016e5
 80016b8:	080016e5 	.word	0x080016e5
 80016bc:	080016dd 	.word	0x080016dd
 80016c0:	080016ed 	.word	0x080016ed
 80016c4:	080016ed 	.word	0x080016ed
 80016c8:	080016ed 	.word	0x080016ed
 80016cc:	080016e5 	.word	0x080016e5
 80016d0:	080016e5 	.word	0x080016e5
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	080016e5 	.word	0x080016e5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4a62      	ldr	r2, [pc, #392]	; (8001868 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80016e0:	601a      	str	r2, [r3, #0]
          break;
 80016e2:	e00a      	b.n	80016fa <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4a5f      	ldr	r2, [pc, #380]	; (8001864 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80016e8:	601a      	str	r2, [r3, #0]
          break;
 80016ea:	e006      	b.n	80016fa <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4a59      	ldr	r2, [pc, #356]	; (8001854 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80016f0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	60fb      	str	r3, [r7, #12]
          break;
 80016f8:	bf00      	nop
      }
      break;
 80016fa:	e0a2      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80016fc:	7abb      	ldrb	r3, [r7, #10]
 80016fe:	2b1b      	cmp	r3, #27
 8001700:	d842      	bhi.n	8001788 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001781 	.word	0x08001781
 800170c:	08001781 	.word	0x08001781
 8001710:	08001781 	.word	0x08001781
 8001714:	08001781 	.word	0x08001781
 8001718:	08001779 	.word	0x08001779
 800171c:	08001789 	.word	0x08001789
 8001720:	08001789 	.word	0x08001789
 8001724:	08001789 	.word	0x08001789
 8001728:	08001781 	.word	0x08001781
 800172c:	08001781 	.word	0x08001781
 8001730:	08001781 	.word	0x08001781
 8001734:	08001781 	.word	0x08001781
 8001738:	08001789 	.word	0x08001789
 800173c:	08001789 	.word	0x08001789
 8001740:	08001789 	.word	0x08001789
 8001744:	08001789 	.word	0x08001789
 8001748:	08001781 	.word	0x08001781
 800174c:	08001781 	.word	0x08001781
 8001750:	08001781 	.word	0x08001781
 8001754:	08001781 	.word	0x08001781
 8001758:	08001779 	.word	0x08001779
 800175c:	08001789 	.word	0x08001789
 8001760:	08001789 	.word	0x08001789
 8001764:	08001789 	.word	0x08001789
 8001768:	08001781 	.word	0x08001781
 800176c:	08001781 	.word	0x08001781
 8001770:	08001781 	.word	0x08001781
 8001774:	08001781 	.word	0x08001781
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4a3c      	ldr	r2, [pc, #240]	; (800186c <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 800177c:	601a      	str	r2, [r3, #0]
          break;
 800177e:	e00a      	b.n	8001796 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4a38      	ldr	r2, [pc, #224]	; (8001864 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001784:	601a      	str	r2, [r3, #0]
          break;
 8001786:	e006      	b.n	8001796 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	4a32      	ldr	r2, [pc, #200]	; (8001854 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800178c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	60fb      	str	r3, [r7, #12]
          break;
 8001794:	bf00      	nop
      }
      break;
 8001796:	e054      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001798:	7abb      	ldrb	r3, [r7, #10]
 800179a:	2b1b      	cmp	r3, #27
 800179c:	d842      	bhi.n	8001824 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	0800181d 	.word	0x0800181d
 80017a8:	0800181d 	.word	0x0800181d
 80017ac:	0800181d 	.word	0x0800181d
 80017b0:	0800181d 	.word	0x0800181d
 80017b4:	08001815 	.word	0x08001815
 80017b8:	08001825 	.word	0x08001825
 80017bc:	08001825 	.word	0x08001825
 80017c0:	08001825 	.word	0x08001825
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	0800181d 	.word	0x0800181d
 80017cc:	0800181d 	.word	0x0800181d
 80017d0:	0800181d 	.word	0x0800181d
 80017d4:	08001825 	.word	0x08001825
 80017d8:	08001825 	.word	0x08001825
 80017dc:	08001825 	.word	0x08001825
 80017e0:	08001825 	.word	0x08001825
 80017e4:	0800181d 	.word	0x0800181d
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	0800181d 	.word	0x0800181d
 80017f0:	0800181d 	.word	0x0800181d
 80017f4:	08001815 	.word	0x08001815
 80017f8:	08001825 	.word	0x08001825
 80017fc:	08001825 	.word	0x08001825
 8001800:	08001825 	.word	0x08001825
 8001804:	0800181d 	.word	0x0800181d
 8001808:	0800181d 	.word	0x0800181d
 800180c:	0800181d 	.word	0x0800181d
 8001810:	0800181d 	.word	0x0800181d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4a16      	ldr	r2, [pc, #88]	; (8001870 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8001818:	601a      	str	r2, [r3, #0]
          break;
 800181a:	e00a      	b.n	8001832 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001820:	601a      	str	r2, [r3, #0]
          break;
 8001822:	e006      	b.n	8001832 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001828:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	60fb      	str	r3, [r7, #12]
          break;
 8001830:	bf00      	nop
      }
      break;
 8001832:	e006      	b.n	8001842 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001838:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	60fb      	str	r3, [r7, #12]
      break;
 8001840:	bf00      	nop
  }

  return ret;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	41480000 	.word	0x41480000
 8001850:	3fcccccd 	.word	0x3fcccccd
 8001854:	bf800000 	.word	0xbf800000
 8001858:	41c80000 	.word	0x41c80000
 800185c:	42480000 	.word	0x42480000
 8001860:	42c80000 	.word	0x42c80000
 8001864:	43480000 	.word	0x43480000
 8001868:	43c80000 	.word	0x43c80000
 800186c:	44480000 	.word	0x44480000
 8001870:	44c80000 	.word	0x44c80000

08001874 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	ed97 0a00 	vldr	s0, [r7]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f805 	bl	8001898 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80018a4:	460b      	mov	r3, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d109      	bne.n	80018ca <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80018b6:	79ba      	ldrb	r2, [r7, #6]
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4619      	mov	r1, r3
 80018bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f98d 	bl	8001be0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80018c6:	4603      	mov	r3, r0
 80018c8:	e008      	b.n	80018dc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80018ca:	79ba      	ldrb	r2, [r7, #6]
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4619      	mov	r1, r3
 80018d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fa9f 	bl	8001e18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80018da:	4603      	mov	r3, r0
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3320      	adds	r3, #32
 80018f6:	f107 020b 	add.w	r2, r7, #11
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fde7 	bl	80024d0 <lis2dw12_full_scale_get>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	e027      	b.n	800195e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d81b      	bhi.n	800194c <LIS2DW12_ACC_GetFullScale+0x68>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <LIS2DW12_ACC_GetFullScale+0x38>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	0800192d 	.word	0x0800192d
 8001920:	08001935 	.word	0x08001935
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001945 	.word	0x08001945
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
      break;
 8001932:	e013      	b.n	800195c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2204      	movs	r2, #4
 8001938:	601a      	str	r2, [r3, #0]
      break;
 800193a:	e00f      	b.n	800195c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2208      	movs	r2, #8
 8001940:	601a      	str	r2, [r3, #0]
      break;
 8001942:	e00b      	b.n	800195c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2210      	movs	r2, #16
 8001948:	601a      	str	r2, [r3, #0]
      break;
 800194a:	e007      	b.n	800195c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f04f 32ff 	mov.w	r2, #4294967295
 8001952:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	60fb      	str	r3, [r7, #12]
      break;
 800195a:	bf00      	nop
  }

  return ret;
 800195c:	68fb      	ldr	r3, [r7, #12]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop

08001968 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b02      	cmp	r3, #2
 8001976:	dd0b      	ble.n	8001990 <LIS2DW12_ACC_SetFullScale+0x28>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	dd06      	ble.n	800198c <LIS2DW12_ACC_SetFullScale+0x24>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b08      	cmp	r3, #8
 8001982:	dc01      	bgt.n	8001988 <LIS2DW12_ACC_SetFullScale+0x20>
 8001984:	2302      	movs	r3, #2
 8001986:	e004      	b.n	8001992 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001988:	2303      	movs	r3, #3
 800198a:	e002      	b.n	8001992 <LIS2DW12_ACC_SetFullScale+0x2a>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <LIS2DW12_ACC_SetFullScale+0x2a>
 8001990:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8001992:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3320      	adds	r3, #32
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fd71 	bl	8002484 <lis2dw12_full_scale_set>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	e000      	b.n	80019b0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3320      	adds	r3, #32
 80019ca:	f107 020b 	add.w	r2, r7, #11
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fb67 	bl	80020a4 <lis2dw12_power_mode_get>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	e089      	b.n	8001af6 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3320      	adds	r3, #32
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fda7 	bl	8002540 <lis2dw12_acceleration_raw_get>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	e07b      	b.n	8001af6 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	2b1b      	cmp	r3, #27
 8001a02:	d873      	bhi.n	8001aec <LIS2DW12_ACC_GetAxesRaw+0x134>
 8001a04:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a7d 	.word	0x08001a7d
 8001a10:	08001ab5 	.word	0x08001ab5
 8001a14:	08001ab5 	.word	0x08001ab5
 8001a18:	08001ab5 	.word	0x08001ab5
 8001a1c:	08001ab5 	.word	0x08001ab5
 8001a20:	08001aed 	.word	0x08001aed
 8001a24:	08001aed 	.word	0x08001aed
 8001a28:	08001aed 	.word	0x08001aed
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001ab5 	.word	0x08001ab5
 8001a34:	08001ab5 	.word	0x08001ab5
 8001a38:	08001ab5 	.word	0x08001ab5
 8001a3c:	08001aed 	.word	0x08001aed
 8001a40:	08001aed 	.word	0x08001aed
 8001a44:	08001aed 	.word	0x08001aed
 8001a48:	08001aed 	.word	0x08001aed
 8001a4c:	08001a7d 	.word	0x08001a7d
 8001a50:	08001ab5 	.word	0x08001ab5
 8001a54:	08001ab5 	.word	0x08001ab5
 8001a58:	08001ab5 	.word	0x08001ab5
 8001a5c:	08001ab5 	.word	0x08001ab5
 8001a60:	08001aed 	.word	0x08001aed
 8001a64:	08001aed 	.word	0x08001aed
 8001a68:	08001aed 	.word	0x08001aed
 8001a6c:	08001a7d 	.word	0x08001a7d
 8001a70:	08001ab5 	.word	0x08001ab5
 8001a74:	08001ab5 	.word	0x08001ab5
 8001a78:	08001ab5 	.word	0x08001ab5
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001a7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da00      	bge.n	8001a86 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001a84:	330f      	adds	r3, #15
 8001a86:	111b      	asrs	r3, r3, #4
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da00      	bge.n	8001a98 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001a96:	330f      	adds	r3, #15
 8001a98:	111b      	asrs	r3, r3, #4
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001aa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da00      	bge.n	8001aaa <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001aa8:	330f      	adds	r3, #15
 8001aaa:	111b      	asrs	r3, r3, #4
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	809a      	strh	r2, [r3, #4]
      break;
 8001ab2:	e01f      	b.n	8001af4 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001ab4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da00      	bge.n	8001abe <LIS2DW12_ACC_GetAxesRaw+0x106>
 8001abc:	3303      	adds	r3, #3
 8001abe:	109b      	asrs	r3, r3, #2
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001ac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da00      	bge.n	8001ad0 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8001ace:	3303      	adds	r3, #3
 8001ad0:	109b      	asrs	r3, r3, #2
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001ad8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da00      	bge.n	8001ae2 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8001ae0:	3303      	adds	r3, #3
 8001ae2:	109b      	asrs	r3, r3, #2
 8001ae4:	b21a      	sxth	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	809a      	strh	r2, [r3, #4]
      break;
 8001aea:	e003      	b.n	8001af4 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	617b      	str	r3, [r7, #20]
      break;
 8001af2:	bf00      	nop
  }

  return ret;
 8001af4:	697b      	ldr	r3, [r7, #20]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop

08001b00 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff4e 	bl	80019b8 <LIS2DW12_ACC_GetAxesRaw>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e03c      	b.n	8001ba2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fbd6 	bl	80012e0 <LIS2DW12_ACC_GetSensitivity>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e030      	b.n	8001ba2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001b40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b58:	ee17 2a90 	vmov	r2, s15
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001b60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b78:	ee17 2a90 	vmov	r2, s15
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001b80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b98:	ee17 2a90 	vmov	r2, s15
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 0020 	add.w	r0, r3, #32
 8001bc0:	1cba      	adds	r2, r7, #2
 8001bc2:	78f9      	ldrb	r1, [r7, #3]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f000 fa07 	bl	8001fd8 <lis2dw12_write_reg>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e000      	b.n	8001bd8 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bec:	460b      	mov	r3, r1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d80b      	bhi.n	8001c14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001bfc:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c02:	bf00      	nop
 8001c04:	08001c41 	.word	0x08001c41
 8001c08:	08001c6d 	.word	0x08001c6d
 8001c0c:	08001c99 	.word	0x08001c99
 8001c10:	08001cc5 	.word	0x08001cc5
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d002      	beq.n	8001c20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8001c1e:	e002      	b.n	8001c26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001c20:	2314      	movs	r3, #20
 8001c22:	75fb      	strb	r3, [r7, #23]
          break;
 8001c24:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8001c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c2a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	d400      	bmi.n	8001c3a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001c38:	e05a      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001c3a:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001c3c:	60bb      	str	r3, [r7, #8]
      break;
 8001c3e:	e057      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d002      	beq.n	8001c4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001c46:	2303      	movs	r3, #3
 8001c48:	75fb      	strb	r3, [r7, #23]
          break;
 8001c4a:	e002      	b.n	8001c52 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001c4c:	2313      	movs	r3, #19
 8001c4e:	75fb      	strb	r3, [r7, #23]
          break;
 8001c50:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c56:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001dfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	dc00      	bgt.n	8001c66 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001c64:	e044      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c68:	60bb      	str	r3, [r7, #8]
      break;
 8001c6a:	e041      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001c6c:	79bb      	ldrb	r3, [r7, #6]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d002      	beq.n	8001c78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001c72:	2302      	movs	r3, #2
 8001c74:	75fb      	strb	r3, [r7, #23]
          break;
 8001c76:	e002      	b.n	8001c7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001c78:	2312      	movs	r3, #18
 8001c7a:	75fb      	strb	r3, [r7, #23]
          break;
 8001c7c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c82:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001dfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	dc00      	bgt.n	8001c92 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001c90:	e02e      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c94:	60bb      	str	r3, [r7, #8]
      break;
 8001c96:	e02b      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d002      	beq.n	8001ca4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8001ca2:	e002      	b.n	8001caa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001ca4:	2311      	movs	r3, #17
 8001ca6:	75fb      	strb	r3, [r7, #23]
          break;
 8001ca8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cae:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001dfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dc00      	bgt.n	8001cbe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001cbc:	e018      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001cc0:	60bb      	str	r3, [r7, #8]
      break;
 8001cc2:	e015      	b.n	8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d002      	beq.n	8001cd0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8001cce:	e002      	b.n	8001cd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	75fb      	strb	r3, [r7, #23]
          break;
 8001cd4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001cd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cda:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001dfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	dc00      	bgt.n	8001cea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001ce8:	e001      	b.n	8001cee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001cec:	60bb      	str	r3, [r7, #8]
      break;
 8001cee:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001e04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	d801      	bhi.n	8001d06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e04d      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d801      	bhi.n	8001d1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e042      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d20:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	d801      	bhi.n	8001d32 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e037      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d36:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	d801      	bhi.n	8001d48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e02c      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	d801      	bhi.n	8001d5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e021      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d62:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001dfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d801      	bhi.n	8001d74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001d70:	2306      	movs	r3, #6
 8001d72:	e016      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d78:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001e10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d801      	bhi.n	8001d8a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e00b      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d8e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001e14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d801      	bhi.n	8001da0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	e000      	b.n	8001da2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001da0:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001da2:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3320      	adds	r3, #32
 8001da8:	7dba      	ldrb	r2, [r7, #22]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fa33 	bl	8002218 <lis2dw12_data_rate_set>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	e018      	b.n	8001df0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3320      	adds	r3, #32
 8001dc2:	7dfa      	ldrb	r2, [r7, #23]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f91e 	bl	8002008 <lis2dw12_power_mode_set>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e00b      	b.n	8001df0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	79ba      	ldrb	r2, [r7, #6]
 8001dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	41480000 	.word	0x41480000
 8001dfc:	43480000 	.word	0x43480000
 8001e00:	43480000 	.word	0x43480000
 8001e04:	3fcccccd 	.word	0x3fcccccd
 8001e08:	42480000 	.word	0x42480000
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	43c80000 	.word	0x43c80000
 8001e14:	44480000 	.word	0x44480000

08001e18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e24:	460b      	mov	r3, r1
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	79ba      	ldrb	r2, [r7, #6]
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001e3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e40:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	d801      	bhi.n	8001e52 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001e50:	e04d      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001e52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e56:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	d801      	bhi.n	8001e68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001e64:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001e66:	e042      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d801      	bhi.n	8001e7e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001e7c:	e037      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001e7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e82:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	d801      	bhi.n	8001e94 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001e92:	e02c      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e98:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001f18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d801      	bhi.n	8001eaa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001ea8:	e021      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eae:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	d801      	bhi.n	8001ec0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001ebe:	e016      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001ec0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ec4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f28 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed0:	d801      	bhi.n	8001ed6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001ed4:	e00b      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001ed6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eda:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001f30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d801      	bhi.n	8001eec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001eea:	e000      	b.n	8001eee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	3fcccccd 	.word	0x3fcccccd
 8001f04:	3fcccccd 	.word	0x3fcccccd
 8001f08:	41480000 	.word	0x41480000
 8001f0c:	41c80000 	.word	0x41c80000
 8001f10:	42480000 	.word	0x42480000
 8001f14:	42480000 	.word	0x42480000
 8001f18:	42c80000 	.word	0x42c80000
 8001f1c:	42c80000 	.word	0x42c80000
 8001f20:	43480000 	.word	0x43480000
 8001f24:	43480000 	.word	0x43480000
 8001f28:	43c80000 	.word	0x43c80000
 8001f2c:	43c80000 	.word	0x43c80000
 8001f30:	44480000 	.word	0x44480000
 8001f34:	44480000 	.word	0x44480000
 8001f38:	44c80000 	.word	0x44c80000

08001f3c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	461a      	mov	r2, r3
 8001f48:	460b      	mov	r3, r1
 8001f4a:	72fb      	strb	r3, [r7, #11]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	695c      	ldr	r4, [r3, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	7b1b      	ldrb	r3, [r3, #12]
 8001f5c:	b298      	uxth	r0, r3
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	b299      	uxth	r1, r3
 8001f62:	893b      	ldrh	r3, [r7, #8]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	47a0      	blx	r4
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}

08001f72 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f72:	b590      	push	{r4, r7, lr}
 8001f74:	b087      	sub	sp, #28
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	460b      	mov	r3, r1
 8001f80:	72fb      	strb	r3, [r7, #11]
 8001f82:	4613      	mov	r3, r2
 8001f84:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	691c      	ldr	r4, [r3, #16]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	7b1b      	ldrb	r3, [r3, #12]
 8001f92:	b298      	uxth	r0, r3
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	b299      	uxth	r1, r3
 8001f98:	893b      	ldrh	r3, [r7, #8]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	47a0      	blx	r4
 8001f9e:	4603      	mov	r3, r0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}

08001fa8 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	72fb      	strb	r3, [r7, #11]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685c      	ldr	r4, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68d8      	ldr	r0, [r3, #12]
 8001fc4:	893b      	ldrh	r3, [r7, #8]
 8001fc6:	7af9      	ldrb	r1, [r7, #11]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	47a0      	blx	r4
 8001fcc:	6178      	str	r0, [r7, #20]

  return ret;
 8001fce:	697b      	ldr	r3, [r7, #20]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd90      	pop	{r4, r7, pc}

08001fd8 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	72fb      	strb	r3, [r7, #11]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681c      	ldr	r4, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68d8      	ldr	r0, [r3, #12]
 8001ff4:	893b      	ldrh	r3, [r7, #8]
 8001ff6:	7af9      	ldrb	r1, [r7, #11]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	47a0      	blx	r4
 8001ffc:	6178      	str	r0, [r7, #20]

  return ret;
 8001ffe:	697b      	ldr	r3, [r7, #20]
}
 8002000:	4618      	mov	r0, r3
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}

08002008 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002014:	f107 0210 	add.w	r2, r7, #16
 8002018:	2301      	movs	r3, #1
 800201a:	2120      	movs	r1, #32
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ffc3 	bl	8001fa8 <lis2dw12_read_reg>
 8002022:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	b2da      	uxtb	r2, r3
 8002034:	7c3b      	ldrb	r3, [r7, #16]
 8002036:	f362 0383 	bfi	r3, r2, #2, #2
 800203a:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	b2da      	uxtb	r2, r3
 8002044:	7c3b      	ldrb	r3, [r7, #16]
 8002046:	f362 0301 	bfi	r3, r2, #0, #2
 800204a:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800204c:	f107 0210 	add.w	r2, r7, #16
 8002050:	2301      	movs	r3, #1
 8002052:	2120      	movs	r1, #32
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffbf 	bl	8001fd8 <lis2dw12_write_reg>
 800205a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002062:	f107 020c 	add.w	r2, r7, #12
 8002066:	2301      	movs	r3, #1
 8002068:	2125      	movs	r1, #37	; 0x25
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff9c 	bl	8001fa8 <lis2dw12_read_reg>
 8002070:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d110      	bne.n	800209a <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	7b3b      	ldrb	r3, [r7, #12]
 8002084:	f362 0382 	bfi	r3, r2, #2, #1
 8002088:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800208a:	f107 020c 	add.w	r2, r7, #12
 800208e:	2301      	movs	r3, #1
 8002090:	2125      	movs	r1, #37	; 0x25
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa0 	bl	8001fd8 <lis2dw12_write_reg>
 8002098:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800209a:	697b      	ldr	r3, [r7, #20]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80020ae:	f107 0210 	add.w	r2, r7, #16
 80020b2:	2301      	movs	r3, #1
 80020b4:	2120      	movs	r1, #32
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff76 	bl	8001fa8 <lis2dw12_read_reg>
 80020bc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 80a3 	bne.w	800220c <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80020c6:	f107 020c 	add.w	r2, r7, #12
 80020ca:	2301      	movs	r3, #1
 80020cc:	2125      	movs	r1, #37	; 0x25
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff6a 	bl	8001fa8 <lis2dw12_read_reg>
 80020d4:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	011a      	lsls	r2, r3, #4
 80020e0:	7c3b      	ldrb	r3, [r7, #16]
 80020e2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80020ec:	7c3a      	ldrb	r2, [r7, #16]
 80020ee:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80020f2:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80020f4:	4413      	add	r3, r2
 80020f6:	2b1b      	cmp	r3, #27
 80020f8:	f200 8084 	bhi.w	8002204 <lis2dw12_power_mode_get+0x160>
 80020fc:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <lis2dw12_power_mode_get+0x60>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	08002195 	.word	0x08002195
 8002108:	0800218d 	.word	0x0800218d
 800210c:	08002185 	.word	0x08002185
 8002110:	0800217d 	.word	0x0800217d
 8002114:	08002175 	.word	0x08002175
 8002118:	08002205 	.word	0x08002205
 800211c:	08002205 	.word	0x08002205
 8002120:	08002205 	.word	0x08002205
 8002124:	080021b5 	.word	0x080021b5
 8002128:	080021ad 	.word	0x080021ad
 800212c:	080021a5 	.word	0x080021a5
 8002130:	0800219d 	.word	0x0800219d
 8002134:	08002205 	.word	0x08002205
 8002138:	08002205 	.word	0x08002205
 800213c:	08002205 	.word	0x08002205
 8002140:	08002205 	.word	0x08002205
 8002144:	080021dd 	.word	0x080021dd
 8002148:	080021d5 	.word	0x080021d5
 800214c:	080021cd 	.word	0x080021cd
 8002150:	080021c5 	.word	0x080021c5
 8002154:	080021bd 	.word	0x080021bd
 8002158:	08002205 	.word	0x08002205
 800215c:	08002205 	.word	0x08002205
 8002160:	08002205 	.word	0x08002205
 8002164:	080021fd 	.word	0x080021fd
 8002168:	080021f5 	.word	0x080021f5
 800216c:	080021ed 	.word	0x080021ed
 8002170:	080021e5 	.word	0x080021e5
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2204      	movs	r2, #4
 8002178:	701a      	strb	r2, [r3, #0]
        break;
 800217a:	e048      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2203      	movs	r2, #3
 8002180:	701a      	strb	r2, [r3, #0]
        break;
 8002182:	e044      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2202      	movs	r2, #2
 8002188:	701a      	strb	r2, [r3, #0]
        break;
 800218a:	e040      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
        break;
 8002192:	e03c      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
        break;
 800219a:	e038      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	220b      	movs	r2, #11
 80021a0:	701a      	strb	r2, [r3, #0]
        break;
 80021a2:	e034      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	220a      	movs	r2, #10
 80021a8:	701a      	strb	r2, [r3, #0]
        break;
 80021aa:	e030      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2209      	movs	r2, #9
 80021b0:	701a      	strb	r2, [r3, #0]
        break;
 80021b2:	e02c      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2208      	movs	r2, #8
 80021b8:	701a      	strb	r2, [r3, #0]
        break;
 80021ba:	e028      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2214      	movs	r2, #20
 80021c0:	701a      	strb	r2, [r3, #0]
        break;
 80021c2:	e024      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2213      	movs	r2, #19
 80021c8:	701a      	strb	r2, [r3, #0]
        break;
 80021ca:	e020      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2212      	movs	r2, #18
 80021d0:	701a      	strb	r2, [r3, #0]
        break;
 80021d2:	e01c      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2211      	movs	r2, #17
 80021d8:	701a      	strb	r2, [r3, #0]
        break;
 80021da:	e018      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2210      	movs	r2, #16
 80021e0:	701a      	strb	r2, [r3, #0]
        break;
 80021e2:	e014      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	221b      	movs	r2, #27
 80021e8:	701a      	strb	r2, [r3, #0]
        break;
 80021ea:	e010      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	221a      	movs	r2, #26
 80021f0:	701a      	strb	r2, [r3, #0]
        break;
 80021f2:	e00c      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2219      	movs	r2, #25
 80021f8:	701a      	strb	r2, [r3, #0]
        break;
 80021fa:	e008      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2218      	movs	r2, #24
 8002200:	701a      	strb	r2, [r3, #0]
        break;
 8002202:	e004      	b.n	800220e <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2204      	movs	r2, #4
 8002208:	701a      	strb	r2, [r3, #0]
        break;
 800220a:	e000      	b.n	800220e <lis2dw12_power_mode_get+0x16a>
    }
  }
 800220c:	bf00      	nop

  return ret;
 800220e:	697b      	ldr	r3, [r7, #20]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	2301      	movs	r3, #1
 800222a:	2120      	movs	r1, #32
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff febb 	bl	8001fa8 <lis2dw12_read_reg>
 8002232:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	b2da      	uxtb	r2, r3
 8002242:	7c3b      	ldrb	r3, [r7, #16]
 8002244:	f362 1307 	bfi	r3, r2, #4, #4
 8002248:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800224a:	f107 0210 	add.w	r2, r7, #16
 800224e:	2301      	movs	r3, #1
 8002250:	2120      	movs	r1, #32
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fec0 	bl	8001fd8 <lis2dw12_write_reg>
 8002258:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002260:	f107 020c 	add.w	r2, r7, #12
 8002264:	2301      	movs	r3, #1
 8002266:	2122      	movs	r1, #34	; 0x22
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fe9d 	bl	8001fa8 <lis2dw12_read_reg>
 800226e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d110      	bne.n	8002298 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	7b3b      	ldrb	r3, [r7, #12]
 8002282:	f362 0301 	bfi	r3, r2, #0, #2
 8002286:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002288:	f107 020c 	add.w	r2, r7, #12
 800228c:	2301      	movs	r3, #1
 800228e:	2122      	movs	r1, #34	; 0x22
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff fea1 	bl	8001fd8 <lis2dw12_write_reg>
 8002296:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002298:	697b      	ldr	r3, [r7, #20]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80022ae:	f107 0210 	add.w	r2, r7, #16
 80022b2:	2301      	movs	r3, #1
 80022b4:	2120      	movs	r1, #32
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe76 	bl	8001fa8 <lis2dw12_read_reg>
 80022bc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 80b3 	bne.w	800242c <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80022c6:	f107 020c 	add.w	r2, r7, #12
 80022ca:	2301      	movs	r3, #1
 80022cc:	2122      	movs	r1, #34	; 0x22
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe6a 	bl	8001fa8 <lis2dw12_read_reg>
 80022d4:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80022d6:	7b3b      	ldrb	r3, [r7, #12]
 80022d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	7c3a      	ldrb	r2, [r7, #16]
 80022e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4413      	add	r3, r2
 80022ea:	2b32      	cmp	r3, #50	; 0x32
 80022ec:	f200 809a 	bhi.w	8002424 <lis2dw12_data_rate_get+0x180>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <lis2dw12_data_rate_get+0x54>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	080023c5 	.word	0x080023c5
 80022fc:	080023cd 	.word	0x080023cd
 8002300:	080023d5 	.word	0x080023d5
 8002304:	080023dd 	.word	0x080023dd
 8002308:	080023e5 	.word	0x080023e5
 800230c:	080023ed 	.word	0x080023ed
 8002310:	080023f5 	.word	0x080023f5
 8002314:	080023fd 	.word	0x080023fd
 8002318:	08002405 	.word	0x08002405
 800231c:	0800240d 	.word	0x0800240d
 8002320:	08002425 	.word	0x08002425
 8002324:	08002425 	.word	0x08002425
 8002328:	08002425 	.word	0x08002425
 800232c:	08002425 	.word	0x08002425
 8002330:	08002425 	.word	0x08002425
 8002334:	08002425 	.word	0x08002425
 8002338:	08002425 	.word	0x08002425
 800233c:	08002425 	.word	0x08002425
 8002340:	0800241d 	.word	0x0800241d
 8002344:	08002425 	.word	0x08002425
 8002348:	08002425 	.word	0x08002425
 800234c:	08002425 	.word	0x08002425
 8002350:	08002425 	.word	0x08002425
 8002354:	08002425 	.word	0x08002425
 8002358:	08002425 	.word	0x08002425
 800235c:	08002425 	.word	0x08002425
 8002360:	08002425 	.word	0x08002425
 8002364:	08002425 	.word	0x08002425
 8002368:	08002425 	.word	0x08002425
 800236c:	08002425 	.word	0x08002425
 8002370:	08002425 	.word	0x08002425
 8002374:	08002425 	.word	0x08002425
 8002378:	08002425 	.word	0x08002425
 800237c:	08002425 	.word	0x08002425
 8002380:	08002425 	.word	0x08002425
 8002384:	08002425 	.word	0x08002425
 8002388:	08002425 	.word	0x08002425
 800238c:	08002425 	.word	0x08002425
 8002390:	08002425 	.word	0x08002425
 8002394:	08002425 	.word	0x08002425
 8002398:	08002425 	.word	0x08002425
 800239c:	08002425 	.word	0x08002425
 80023a0:	08002425 	.word	0x08002425
 80023a4:	08002425 	.word	0x08002425
 80023a8:	08002425 	.word	0x08002425
 80023ac:	08002425 	.word	0x08002425
 80023b0:	08002425 	.word	0x08002425
 80023b4:	08002425 	.word	0x08002425
 80023b8:	08002425 	.word	0x08002425
 80023bc:	08002425 	.word	0x08002425
 80023c0:	08002415 	.word	0x08002415
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
        break;
 80023ca:	e030      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
        break;
 80023d2:	e02c      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]
        break;
 80023da:	e028      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2203      	movs	r2, #3
 80023e0:	701a      	strb	r2, [r3, #0]
        break;
 80023e2:	e024      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2204      	movs	r2, #4
 80023e8:	701a      	strb	r2, [r3, #0]
        break;
 80023ea:	e020      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2205      	movs	r2, #5
 80023f0:	701a      	strb	r2, [r3, #0]
        break;
 80023f2:	e01c      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2206      	movs	r2, #6
 80023f8:	701a      	strb	r2, [r3, #0]
        break;
 80023fa:	e018      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2207      	movs	r2, #7
 8002400:	701a      	strb	r2, [r3, #0]
        break;
 8002402:	e014      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2208      	movs	r2, #8
 8002408:	701a      	strb	r2, [r3, #0]
        break;
 800240a:	e010      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2209      	movs	r2, #9
 8002410:	701a      	strb	r2, [r3, #0]
        break;
 8002412:	e00c      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2232      	movs	r2, #50	; 0x32
 8002418:	701a      	strb	r2, [r3, #0]
        break;
 800241a:	e008      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2212      	movs	r2, #18
 8002420:	701a      	strb	r2, [r3, #0]
        break;
 8002422:	e004      	b.n	800242e <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
        break;
 800242a:	e000      	b.n	800242e <lis2dw12_data_rate_get+0x18a>
    }
  }
 800242c:	bf00      	nop

  return ret;
 800242e:	697b      	ldr	r3, [r7, #20]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002444:	f107 0208 	add.w	r2, r7, #8
 8002448:	2301      	movs	r3, #1
 800244a:	2121      	movs	r1, #33	; 0x21
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fdab 	bl	8001fa8 <lis2dw12_read_reg>
 8002452:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	7a3b      	ldrb	r3, [r7, #8]
 8002464:	f362 03c3 	bfi	r3, r2, #3, #1
 8002468:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800246a:	f107 0208 	add.w	r2, r7, #8
 800246e:	2301      	movs	r3, #1
 8002470:	2121      	movs	r1, #33	; 0x21
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fdb0 	bl	8001fd8 <lis2dw12_write_reg>
 8002478:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002490:	f107 0208 	add.w	r2, r7, #8
 8002494:	2301      	movs	r3, #1
 8002496:	2125      	movs	r1, #37	; 0x25
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fd85 	bl	8001fa8 <lis2dw12_read_reg>
 800249e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	7a3b      	ldrb	r3, [r7, #8]
 80024b0:	f362 1305 	bfi	r3, r2, #4, #2
 80024b4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80024b6:	f107 0208 	add.w	r2, r7, #8
 80024ba:	2301      	movs	r3, #1
 80024bc:	2125      	movs	r1, #37	; 0x25
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fd8a 	bl	8001fd8 <lis2dw12_write_reg>
 80024c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80024da:	f107 0208 	add.w	r2, r7, #8
 80024de:	2301      	movs	r3, #1
 80024e0:	2125      	movs	r1, #37	; 0x25
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fd60 	bl	8001fa8 <lis2dw12_read_reg>
 80024e8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80024ea:	7a3b      	ldrb	r3, [r7, #8]
 80024ec:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d81a      	bhi.n	800252c <lis2dw12_full_scale_get+0x5c>
 80024f6:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <lis2dw12_full_scale_get+0x2c>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	0800250d 	.word	0x0800250d
 8002500:	08002515 	.word	0x08002515
 8002504:	0800251d 	.word	0x0800251d
 8002508:	08002525 	.word	0x08002525
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
      break;
 8002512:	e00f      	b.n	8002534 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
      break;
 800251a:	e00b      	b.n	8002534 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]
      break;
 8002522:	e007      	b.n	8002534 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2203      	movs	r2, #3
 8002528:	701a      	strb	r2, [r3, #0]
      break;
 800252a:	e003      	b.n	8002534 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
      break;
 8002532:	bf00      	nop
  }

  return ret;
 8002534:	68fb      	ldr	r3, [r7, #12]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop

08002540 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800254a:	f107 020c 	add.w	r2, r7, #12
 800254e:	2306      	movs	r3, #6
 8002550:	2128      	movs	r1, #40	; 0x28
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fd28 	bl	8001fa8 <lis2dw12_read_reg>
 8002558:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800255a:	7b7b      	ldrb	r3, [r7, #13]
 800255c:	b21a      	sxth	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002568:	b29b      	uxth	r3, r3
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	b29a      	uxth	r2, r3
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	b29b      	uxth	r3, r3
 8002572:	4413      	add	r3, r2
 8002574:	b29b      	uxth	r3, r3
 8002576:	b21a      	sxth	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	3302      	adds	r3, #2
 8002582:	b212      	sxth	r2, r2
 8002584:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	3302      	adds	r3, #2
 800258a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258e:	b29b      	uxth	r3, r3
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	b29a      	uxth	r2, r3
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4413      	add	r3, r2
 800259a:	b29a      	uxth	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	3302      	adds	r3, #2
 80025a0:	b212      	sxth	r2, r2
 80025a2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80025a4:	7c7a      	ldrb	r2, [r7, #17]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	3304      	adds	r3, #4
 80025aa:	b212      	sxth	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3304      	adds	r3, #4
 80025b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	7c3b      	ldrb	r3, [r7, #16]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	3304      	adds	r3, #4
 80025c8:	b212      	sxth	r2, r2
 80025ca:	801a      	strh	r2, [r3, #0]

  return ret;
 80025cc:	697b      	ldr	r3, [r7, #20]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80025e0:	2301      	movs	r3, #1
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	210f      	movs	r1, #15
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fcde 	bl	8001fa8 <lis2dw12_read_reg>
 80025ec:	60f8      	str	r0, [r7, #12]

  return ret;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002604:	f107 0208 	add.w	r2, r7, #8
 8002608:	2301      	movs	r3, #1
 800260a:	2121      	movs	r1, #33	; 0x21
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fccb 	bl	8001fa8 <lis2dw12_read_reg>
 8002612:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	7a3b      	ldrb	r3, [r7, #8]
 8002624:	f362 0382 	bfi	r3, r2, #2, #1
 8002628:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800262a:	f107 0208 	add.w	r2, r7, #8
 800262e:	2301      	movs	r3, #1
 8002630:	2121      	movs	r1, #33	; 0x21
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fcd0 	bl	8001fd8 <lis2dw12_write_reg>
 8002638:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002650:	f107 0208 	add.w	r2, r7, #8
 8002654:	2301      	movs	r3, #1
 8002656:	212e      	movs	r1, #46	; 0x2e
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fca5 	bl	8001fa8 <lis2dw12_read_reg>
 800265e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	b2da      	uxtb	r2, r3
 800266e:	7a3b      	ldrb	r3, [r7, #8]
 8002670:	f362 1347 	bfi	r3, r2, #5, #3
 8002674:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002676:	f107 0208 	add.w	r2, r7, #8
 800267a:	2301      	movs	r3, #1
 800267c:	212e      	movs	r1, #46	; 0x2e
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fcaa 	bl	8001fd8 <lis2dw12_write_reg>
 8002684:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e067      	b.n	800277c <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	7b1a      	ldrb	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a28      	ldr	r2, [pc, #160]	; (8002788 <LIS2MDL_RegisterBusIO+0xf8>)
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <LIS2MDL_RegisterBusIO+0xfc>)
 80026ee:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e036      	b.n	800277c <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4798      	blx	r3
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e02c      	b.n	800277c <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d028      	beq.n	800277c <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002730:	2b00      	cmp	r3, #0
 8002732:	d123      	bne.n	800277c <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10d      	bne.n	8002758 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800273c:	2334      	movs	r3, #52	; 0x34
 800273e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	461a      	mov	r2, r3
 8002744:	2162      	movs	r1, #98	; 0x62
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fb1b 	bl	8002d82 <LIS2MDL_Write_Reg>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d014      	beq.n	800277c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e012      	b.n	800277e <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d101      	bne.n	8002764 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	e00c      	b.n	800277e <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3320      	adds	r3, #32
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f000 ff70 	bl	8003650 <lis2mdl_i2c_interface_set>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e000      	b.n	800277e <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	08002dd9 	.word	0x08002dd9
 800278c:	08002e5b 	.word	0x08002e5b

08002790 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d144      	bne.n	800282a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80027a0:	f107 0208 	add.w	r2, r7, #8
 80027a4:	2301      	movs	r3, #1
 80027a6:	2162      	movs	r1, #98	; 0x62
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fb97 	bl	8002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
 80027b8:	e06c      	b.n	8002894 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80027ba:	f107 020c 	add.w	r2, r7, #12
 80027be:	2301      	movs	r3, #1
 80027c0:	2160      	movs	r1, #96	; 0x60
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fb8a 	bl	8002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e05f      	b.n	8002894 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80027d4:	7a3b      	ldrb	r3, [r7, #8]
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80027dc:	7a3b      	ldrb	r3, [r7, #8]
 80027de:	f36f 0341 	bfc	r3, #1, #1
 80027e2:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80027e4:	7b3b      	ldrb	r3, [r7, #12]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f362 0301 	bfi	r3, r2, #0, #2
 80027ec:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	f043 030c 	orr.w	r3, r3, #12
 80027f4:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80027f6:	f107 0208 	add.w	r2, r7, #8
 80027fa:	2301      	movs	r3, #1
 80027fc:	2162      	movs	r1, #98	; 0x62
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fcab 	bl	800315a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	e041      	b.n	8002894 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002810:	f107 020c 	add.w	r2, r7, #12
 8002814:	2301      	movs	r3, #1
 8002816:	2160      	movs	r1, #96	; 0x60
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fc9e 	bl	800315a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d032      	beq.n	800288a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002824:	f04f 33ff 	mov.w	r3, #4294967295
 8002828:	e034      	b.n	8002894 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3320      	adds	r3, #32
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fe65 	bl	8003500 <lis2mdl_block_data_update_set>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	e028      	b.n	8002894 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3320      	adds	r3, #32
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fdd4 	bl	80033f6 <lis2mdl_operating_mode_set>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	e01c      	b.n	8002894 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3320      	adds	r3, #32
 800285e:	2103      	movs	r1, #3
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fdee 	bl	8003442 <lis2mdl_data_rate_set>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	e010      	b.n	8002894 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3320      	adds	r3, #32
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fec3 	bl	8003604 <lis2mdl_self_test_set>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	e004      	b.n	8002894 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f8a5 	bl	80029f4 <LIS2MDL_MAG_Disable>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
 80028b4:	e004      	b.n	80028c0 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d10b      	bne.n	80028f2 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80028da:	2301      	movs	r3, #1
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	214f      	movs	r1, #79	; 0x4f
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fafb 	bl	8002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	e00c      	b.n	800290c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3320      	adds	r3, #32
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fe72 	bl	80035e2 <lis2mdl_device_id_get>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e000      	b.n	800290c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2232      	movs	r2, #50	; 0x32
 8002946:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <LIS2MDL_GetCapabilities+0x58>)
 800295c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	42c80000 	.word	0x42c80000

08002970 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e032      	b.n	80029ec <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d11d      	bne.n	80029ca <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800298e:	f107 020c 	add.w	r2, r7, #12
 8002992:	2301      	movs	r3, #1
 8002994:	2160      	movs	r1, #96	; 0x60
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 faa0 	bl	8002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	e021      	b.n	80029ec <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80029a8:	7b3b      	ldrb	r3, [r7, #12]
 80029aa:	f36f 0301 	bfc	r3, #0, #2
 80029ae:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80029b0:	f107 020c 	add.w	r2, r7, #12
 80029b4:	2301      	movs	r3, #1
 80029b6:	2160      	movs	r1, #96	; 0x60
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fbce 	bl	800315a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e010      	b.n	80029ec <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3320      	adds	r3, #32
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fd10 	bl	80033f6 <lis2mdl_operating_mode_set>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	e004      	b.n	80029ec <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e033      	b.n	8002a72 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d11e      	bne.n	8002a50 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002a12:	f107 020c 	add.w	r2, r7, #12
 8002a16:	2301      	movs	r3, #1
 8002a18:	2160      	movs	r1, #96	; 0x60
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa5e 	bl	8002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e022      	b.n	8002a72 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002a2c:	7b3b      	ldrb	r3, [r7, #12]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f362 0301 	bfi	r3, r2, #0, #2
 8002a34:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002a36:	f107 020c 	add.w	r2, r7, #12
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	2160      	movs	r1, #96	; 0x60
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fb8b 	bl	800315a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	e010      	b.n	8002a72 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3320      	adds	r3, #32
 8002a54:	2102      	movs	r1, #2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fccd 	bl	80033f6 <lis2mdl_operating_mode_set>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
 8002a66:	e004      	b.n	8002a72 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002a8a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3320      	adds	r3, #32
 8002aae:	f107 020b 	add.w	r2, r7, #11
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fceb 	bl	8003490 <lis2mdl_data_rate_get>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	e023      	b.n	8002b0e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d81b      	bhi.n	8002b04 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002aed 	.word	0x08002aed
 8002adc:	08002af5 	.word	0x08002af5
 8002ae0:	08002afd 	.word	0x08002afd
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002ae8:	601a      	str	r2, [r3, #0]
      break;
 8002aea:	e00f      	b.n	8002b0c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002af0:	601a      	str	r2, [r3, #0]
      break;
 8002af2:	e00b      	b.n	8002b0c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002af8:	601a      	str	r2, [r3, #0]
      break;
 8002afa:	e007      	b.n	8002b0c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002b00:	601a      	str	r2, [r3, #0]
      break;
 8002b02:	e003      	b.n	8002b0c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	60fb      	str	r3, [r7, #12]
      break;
 8002b0a:	bf00      	nop
  }

  return ret;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	41200000 	.word	0x41200000
 8002b1c:	41a00000 	.word	0x41a00000
 8002b20:	42480000 	.word	0x42480000
 8002b24:	42c80000 	.word	0x42c80000

08002b28 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002b34:	edd7 7a00 	vldr	s15, [r7]
 8002b38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	d801      	bhi.n	8002b4a <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002b46:	2300      	movs	r3, #0
 8002b48:	e016      	b.n	8002b78 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b4a:	edd7 7a00 	vldr	s15, [r7]
 8002b4e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	d801      	bhi.n	8002b60 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e00b      	b.n	8002b78 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b60:	edd7 7a00 	vldr	s15, [r7]
 8002b64:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002bec <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	d801      	bhi.n	8002b76 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e000      	b.n	8002b78 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b76:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002b78:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d121      	bne.n	8002bc6 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002b82:	f107 020c 	add.w	r2, r7, #12
 8002b86:	2301      	movs	r3, #1
 8002b88:	2160      	movs	r1, #96	; 0x60
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9a6 	bl	8002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	e022      	b.n	8002be2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	7b3b      	ldrb	r3, [r7, #12]
 8002ba6:	f362 0383 	bfi	r3, r2, #2, #2
 8002baa:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002bac:	f107 020c 	add.w	r2, r7, #12
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	2160      	movs	r1, #96	; 0x60
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fad0 	bl	800315a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00f      	beq.n	8002be0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc4:	e00d      	b.n	8002be2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3320      	adds	r3, #32
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fc37 	bl	8003442 <lis2mdl_data_rate_set>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e000      	b.n	8002be2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	42480000 	.word	0x42480000

08002bf0 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2232      	movs	r2, #50	; 0x32
 8002bfe:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3320      	adds	r3, #32
 8002c34:	f107 0208 	add.w	r2, r7, #8
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fc86 	bl	800354c <lis2mdl_magnetic_raw_get>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e00c      	b.n	8002c66 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002c4c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002c54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c5c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b088      	sub	sp, #32
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d137      	bne.n	8002cf0 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002c80:	f107 0218 	add.w	r2, r7, #24
 8002c84:	2306      	movs	r3, #6
 8002c86:	2168      	movs	r1, #104	; 0x68
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f927 	bl	8002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	e06f      	b.n	8002d7a <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002c9a:	7e7b      	ldrb	r3, [r7, #25]
 8002c9c:	b21b      	sxth	r3, r3
 8002c9e:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002ca0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	7e3b      	ldrb	r3, [r7, #24]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8002cb6:	7efb      	ldrb	r3, [r7, #27]
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002cbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	7ebb      	ldrb	r3, [r7, #26]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002cd2:	7f7b      	ldrb	r3, [r7, #29]
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002cd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	7f3b      	ldrb	r3, [r7, #28]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b21b      	sxth	r3, r3
 8002cec:	82bb      	strh	r3, [r7, #20]
 8002cee:	e00d      	b.n	8002d0c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3320      	adds	r3, #32
 8002cf4:	f107 0210 	add.w	r2, r7, #16
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fc26 	bl	800354c <lis2mdl_magnetic_raw_get>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	e036      	b.n	8002d7a <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff feb1 	bl	8002a7a <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d30:	ee17 2a90 	vmov	r2, s15
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d50:	ee17 2a90 	vmov	r2, s15
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d70:	ee17 2a90 	vmov	r2, s15
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	70fb      	strb	r3, [r7, #3]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d10b      	bne.n	8002db2 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002d9a:	1cba      	adds	r2, r7, #2
 8002d9c:	78f9      	ldrb	r1, [r7, #3]
 8002d9e:	2301      	movs	r3, #1
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f9da 	bl	800315a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
 8002db0:	e00e      	b.n	8002dd0 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f103 0020 	add.w	r0, r3, #32
 8002db8:	1cba      	adds	r2, r7, #2
 8002dba:	78f9      	ldrb	r1, [r7, #3]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f000 fb02 	bl	80033c6 <lis2mdl_write_reg>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	e000      	b.n	8002dd0 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	460b      	mov	r3, r1
 8002de6:	72fb      	strb	r3, [r7, #11]
 8002de8:	4613      	mov	r3, r2
 8002dea:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10e      	bne.n	8002e16 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	695c      	ldr	r4, [r3, #20]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	7b1b      	ldrb	r3, [r3, #12]
 8002e00:	b298      	uxth	r0, r3
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	b299      	uxth	r1, r3
 8002e0c:	893b      	ldrh	r3, [r7, #8]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	47a0      	blx	r4
 8002e12:	4603      	mov	r3, r0
 8002e14:	e01d      	b.n	8002e52 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d10b      	bne.n	8002e36 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	695c      	ldr	r4, [r3, #20]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	7b1b      	ldrb	r3, [r3, #12]
 8002e26:	b298      	uxth	r0, r3
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	b299      	uxth	r1, r3
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	47a0      	blx	r4
 8002e32:	4603      	mov	r3, r0
 8002e34:	e00d      	b.n	8002e52 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	695c      	ldr	r4, [r3, #20]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	7b1b      	ldrb	r3, [r3, #12]
 8002e3e:	b298      	uxth	r0, r3
 8002e40:	7afb      	ldrb	r3, [r7, #11]
 8002e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	b299      	uxth	r1, r3
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	47a0      	blx	r4
 8002e50:	4603      	mov	r3, r0
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd90      	pop	{r4, r7, pc}

08002e5a <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e5a:	b590      	push	{r4, r7, lr}
 8002e5c:	b087      	sub	sp, #28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	461a      	mov	r2, r3
 8002e66:	460b      	mov	r3, r1
 8002e68:	72fb      	strb	r3, [r7, #11]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	691c      	ldr	r4, [r3, #16]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	7b1b      	ldrb	r3, [r3, #12]
 8002e82:	b298      	uxth	r0, r3
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	893b      	ldrh	r3, [r7, #8]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	47a0      	blx	r4
 8002e94:	4603      	mov	r3, r0
 8002e96:	e01d      	b.n	8002ed4 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d10b      	bne.n	8002eb8 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	691c      	ldr	r4, [r3, #16]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	7b1b      	ldrb	r3, [r3, #12]
 8002ea8:	b298      	uxth	r0, r3
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	b299      	uxth	r1, r3
 8002eae:	893b      	ldrh	r3, [r7, #8]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	47a0      	blx	r4
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	e00d      	b.n	8002ed4 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	691c      	ldr	r4, [r3, #16]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	b298      	uxth	r0, r3
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	b299      	uxth	r1, r3
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	47a0      	blx	r4
 8002ed2:	4603      	mov	r3, r0
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}

08002edc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	72fb      	strb	r3, [r7, #11]
 8002eec:	4613      	mov	r3, r2
 8002eee:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002f02:	233d      	movs	r3, #61	; 0x3d
 8002f04:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002f06:	2315      	movs	r3, #21
 8002f08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002f0c:	2316      	movs	r3, #22
 8002f0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002f12:	2317      	movs	r3, #23
 8002f14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002f18:	2314      	movs	r3, #20
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002f1e:	2344      	movs	r3, #68	; 0x44
 8002f20:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002f22:	2302      	movs	r3, #2
 8002f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002f28:	2339      	movs	r3, #57	; 0x39
 8002f2a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002f34:	2329      	movs	r3, #41	; 0x29
 8002f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002f3a:	231e      	movs	r3, #30
 8002f3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002f58:	2340      	movs	r3, #64	; 0x40
 8002f5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f103 0020 	add.w	r0, r3, #32
 8002f64:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002f68:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f000 fa2a 	bl	80033c6 <lis2mdl_write_reg>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7c:	e0e9      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f103 0020 	add.w	r0, r3, #32
 8002f84:	f107 021f 	add.w	r2, r7, #31
 8002f88:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f000 fa1a 	bl	80033c6 <lis2mdl_write_reg>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9c:	e0d9      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f103 0020 	add.w	r0, r3, #32
 8002fa4:	f107 020b 	add.w	r2, r7, #11
 8002fa8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002fac:	2301      	movs	r3, #1
 8002fae:	f000 fa0a 	bl	80033c6 <lis2mdl_write_reg>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbc:	e0c9      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f103 0020 	add.w	r0, r3, #32
 8002fc4:	f107 021d 	add.w	r2, r7, #29
 8002fc8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f000 f9fa 	bl	80033c6 <lis2mdl_write_reg>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	e0b9      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f103 0020 	add.w	r0, r3, #32
 8002fe4:	f107 021e 	add.w	r2, r7, #30
 8002fe8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002fec:	2301      	movs	r3, #1
 8002fee:	f000 f9ea 	bl	80033c6 <lis2mdl_write_reg>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	e0a9      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f103 0020 	add.w	r0, r3, #32
 8003004:	f107 0220 	add.w	r2, r7, #32
 8003008:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800300c:	2301      	movs	r3, #1
 800300e:	f000 f9da 	bl	80033c6 <lis2mdl_write_reg>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	e099      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f103 0020 	add.w	r0, r3, #32
 8003024:	f107 021c 	add.w	r2, r7, #28
 8003028:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800302c:	2301      	movs	r3, #1
 800302e:	f000 f9b2 	bl	8003396 <lis2mdl_read_reg>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	e089      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800303e:	7f3b      	ldrb	r3, [r7, #28]
 8003040:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003044:	429a      	cmp	r2, r3
 8003046:	d102      	bne.n	800304e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003048:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800304c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f103 0020 	add.w	r0, r3, #32
 8003054:	f107 021c 	add.w	r2, r7, #28
 8003058:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800305c:	2301      	movs	r3, #1
 800305e:	f000 f9b2 	bl	80033c6 <lis2mdl_write_reg>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	e071      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f103 0020 	add.w	r0, r3, #32
 8003074:	f107 0214 	add.w	r2, r7, #20
 8003078:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800307c:	2306      	movs	r3, #6
 800307e:	f000 f98a 	bl	8003396 <lis2mdl_read_reg>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	e061      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f103 0020 	add.w	r0, r3, #32
 8003094:	f107 021b 	add.w	r2, r7, #27
 8003098:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800309c:	2301      	movs	r3, #1
 800309e:	f000 f97a 	bl	8003396 <lis2mdl_read_reg>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ac:	e051      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80030ae:	7efa      	ldrb	r2, [r7, #27]
 80030b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030b4:	4013      	ands	r3, r2
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1e6      	bne.n	800308e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f103 0020 	add.w	r0, r3, #32
 80030c6:	f107 021b 	add.w	r2, r7, #27
 80030ca:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80030ce:	2301      	movs	r3, #1
 80030d0:	f000 f961 	bl	8003396 <lis2mdl_read_reg>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80030da:	f04f 33ff 	mov.w	r3, #4294967295
 80030de:	e038      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80030e0:	7efa      	ldrb	r2, [r7, #27]
 80030e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030e6:	4013      	ands	r3, r2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d1e6      	bne.n	80030c0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f103 0020 	add.w	r0, r3, #32
 80030f8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80030fc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003100:	2301      	movs	r3, #1
 8003102:	f000 f960 	bl	80033c6 <lis2mdl_write_reg>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	e01f      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f103 0020 	add.w	r0, r3, #32
 8003118:	893b      	ldrh	r3, [r7, #8]
 800311a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	f000 f939 	bl	8003396 <lis2mdl_read_reg>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	e010      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f103 0020 	add.w	r0, r3, #32
 8003136:	f107 0220 	add.w	r2, r7, #32
 800313a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800313e:	2301      	movs	r3, #1
 8003140:	f000 f941 	bl	80033c6 <lis2mdl_write_reg>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	e000      	b.n	8003152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3730      	adds	r7, #48	; 0x30
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b08c      	sub	sp, #48	; 0x30
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	461a      	mov	r2, r3
 8003166:	460b      	mov	r3, r1
 8003168:	72fb      	strb	r3, [r7, #11]
 800316a:	4613      	mov	r3, r2
 800316c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003174:	2340      	movs	r3, #64	; 0x40
 8003176:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003180:	233c      	movs	r3, #60	; 0x3c
 8003182:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003184:	2315      	movs	r3, #21
 8003186:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 800318a:	2316      	movs	r3, #22
 800318c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003190:	2317      	movs	r3, #23
 8003192:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800319a:	2314      	movs	r3, #20
 800319c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80031a0:	2344      	movs	r3, #68	; 0x44
 80031a2:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80031a4:	2339      	movs	r3, #57	; 0x39
 80031a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80031b0:	2329      	movs	r3, #41	; 0x29
 80031b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80031b6:	231e      	movs	r3, #30
 80031b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80031c2:	2310      	movs	r3, #16
 80031c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80031ce:	2340      	movs	r3, #64	; 0x40
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80031d4:	230e      	movs	r3, #14
 80031d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f103 0020 	add.w	r0, r3, #32
 80031e0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80031e4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80031e8:	2301      	movs	r3, #1
 80031ea:	f000 f8ec 	bl	80033c6 <lis2mdl_write_reg>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	e0c9      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f103 0020 	add.w	r0, r3, #32
 8003200:	f107 021f 	add.w	r2, r7, #31
 8003204:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003208:	2301      	movs	r3, #1
 800320a:	f000 f8dc 	bl	80033c6 <lis2mdl_write_reg>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	e0b9      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f103 0020 	add.w	r0, r3, #32
 8003220:	f107 020b 	add.w	r2, r7, #11
 8003224:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003228:	2301      	movs	r3, #1
 800322a:	f000 f8cc 	bl	80033c6 <lis2mdl_write_reg>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	e0a9      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f103 0020 	add.w	r0, r3, #32
 8003240:	f107 021e 	add.w	r2, r7, #30
 8003244:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003248:	2301      	movs	r3, #1
 800324a:	f000 f8bc 	bl	80033c6 <lis2mdl_write_reg>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003254:	f04f 33ff 	mov.w	r3, #4294967295
 8003258:	e099      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f103 0020 	add.w	r0, r3, #32
 8003260:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003264:	2301      	movs	r3, #1
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	f000 f8ad 	bl	80033c6 <lis2mdl_write_reg>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	e08a      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f103 0020 	add.w	r0, r3, #32
 800327e:	f107 021d 	add.w	r2, r7, #29
 8003282:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003286:	2301      	movs	r3, #1
 8003288:	f000 f89d 	bl	80033c6 <lis2mdl_write_reg>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e07a      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f103 0020 	add.w	r0, r3, #32
 800329e:	f107 0220 	add.w	r2, r7, #32
 80032a2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80032a6:	2301      	movs	r3, #1
 80032a8:	f000 f88d 	bl	80033c6 <lis2mdl_write_reg>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	e06a      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f103 0020 	add.w	r0, r3, #32
 80032be:	f107 021c 	add.w	r2, r7, #28
 80032c2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80032c6:	2301      	movs	r3, #1
 80032c8:	f000 f865 	bl	8003396 <lis2mdl_read_reg>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	e05a      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80032d8:	7f3b      	ldrb	r3, [r7, #28]
 80032da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032de:	429a      	cmp	r2, r3
 80032e0:	d102      	bne.n	80032e8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80032e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032e6:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f103 0020 	add.w	r0, r3, #32
 80032ee:	f107 021c 	add.w	r2, r7, #28
 80032f2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80032f6:	2301      	movs	r3, #1
 80032f8:	f000 f865 	bl	80033c6 <lis2mdl_write_reg>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	e042      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f103 0020 	add.w	r0, r3, #32
 800330e:	f107 0214 	add.w	r2, r7, #20
 8003312:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003316:	2306      	movs	r3, #6
 8003318:	f000 f83d 	bl	8003396 <lis2mdl_read_reg>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	e032      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f103 0020 	add.w	r0, r3, #32
 800332e:	f107 021b 	add.w	r2, r7, #27
 8003332:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003336:	2301      	movs	r3, #1
 8003338:	f000 f82d 	bl	8003396 <lis2mdl_read_reg>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	e022      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003348:	7efa      	ldrb	r2, [r7, #27]
 800334a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800334e:	4013      	ands	r3, r2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003356:	429a      	cmp	r2, r3
 8003358:	d1e6      	bne.n	8003328 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f103 0020 	add.w	r0, r3, #32
 8003360:	f107 021b 	add.w	r2, r7, #27
 8003364:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003368:	2301      	movs	r3, #1
 800336a:	f000 f814 	bl	8003396 <lis2mdl_read_reg>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	e009      	b.n	800338e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800337a:	7efa      	ldrb	r2, [r7, #27]
 800337c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003380:	4013      	ands	r3, r2
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003388:	429a      	cmp	r2, r3
 800338a:	d1e6      	bne.n	800335a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3730      	adds	r7, #48	; 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003396:	b590      	push	{r4, r7, lr}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	461a      	mov	r2, r3
 80033a2:	460b      	mov	r3, r1
 80033a4:	72fb      	strb	r3, [r7, #11]
 80033a6:	4613      	mov	r3, r2
 80033a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685c      	ldr	r4, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68d8      	ldr	r0, [r3, #12]
 80033b2:	893b      	ldrh	r3, [r7, #8]
 80033b4:	7af9      	ldrb	r1, [r7, #11]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	47a0      	blx	r4
 80033ba:	6178      	str	r0, [r7, #20]

  return ret;
 80033bc:	697b      	ldr	r3, [r7, #20]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd90      	pop	{r4, r7, pc}

080033c6 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80033c6:	b590      	push	{r4, r7, lr}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	461a      	mov	r2, r3
 80033d2:	460b      	mov	r3, r1
 80033d4:	72fb      	strb	r3, [r7, #11]
 80033d6:	4613      	mov	r3, r2
 80033d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681c      	ldr	r4, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68d8      	ldr	r0, [r3, #12]
 80033e2:	893b      	ldrh	r3, [r7, #8]
 80033e4:	7af9      	ldrb	r1, [r7, #11]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	47a0      	blx	r4
 80033ea:	6178      	str	r0, [r7, #20]

  return ret;
 80033ec:	697b      	ldr	r3, [r7, #20]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003402:	f107 0208 	add.w	r2, r7, #8
 8003406:	2301      	movs	r3, #1
 8003408:	2160      	movs	r1, #96	; 0x60
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff ffc3 	bl	8003396 <lis2mdl_read_reg>
 8003410:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10f      	bne.n	8003438 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	b2da      	uxtb	r2, r3
 8003420:	7a3b      	ldrb	r3, [r7, #8]
 8003422:	f362 0301 	bfi	r3, r2, #0, #2
 8003426:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003428:	f107 0208 	add.w	r2, r7, #8
 800342c:	2301      	movs	r3, #1
 800342e:	2160      	movs	r1, #96	; 0x60
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ffc8 	bl	80033c6 <lis2mdl_write_reg>
 8003436:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003438:	68fb      	ldr	r3, [r7, #12]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800344e:	f107 0208 	add.w	r2, r7, #8
 8003452:	2301      	movs	r3, #1
 8003454:	2160      	movs	r1, #96	; 0x60
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ff9d 	bl	8003396 <lis2mdl_read_reg>
 800345c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10f      	bne.n	8003484 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	7a3b      	ldrb	r3, [r7, #8]
 800346e:	f362 0383 	bfi	r3, r2, #2, #2
 8003472:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003474:	f107 0208 	add.w	r2, r7, #8
 8003478:	2301      	movs	r3, #1
 800347a:	2160      	movs	r1, #96	; 0x60
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ffa2 	bl	80033c6 <lis2mdl_write_reg>
 8003482:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003484:	68fb      	ldr	r3, [r7, #12]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800349a:	f107 0208 	add.w	r2, r7, #8
 800349e:	2301      	movs	r3, #1
 80034a0:	2160      	movs	r1, #96	; 0x60
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff77 	bl	8003396 <lis2mdl_read_reg>
 80034a8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80034aa:	7a3b      	ldrb	r3, [r7, #8]
 80034ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d81a      	bhi.n	80034ec <lis2mdl_data_rate_get+0x5c>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <lis2mdl_data_rate_get+0x2c>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034cd 	.word	0x080034cd
 80034c0:	080034d5 	.word	0x080034d5
 80034c4:	080034dd 	.word	0x080034dd
 80034c8:	080034e5 	.word	0x080034e5
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
      break;
 80034d2:	e00f      	b.n	80034f4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
      break;
 80034da:	e00b      	b.n	80034f4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2202      	movs	r2, #2
 80034e0:	701a      	strb	r2, [r3, #0]
      break;
 80034e2:	e007      	b.n	80034f4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2203      	movs	r2, #3
 80034e8:	701a      	strb	r2, [r3, #0]
      break;
 80034ea:	e003      	b.n	80034f4 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
      break;
 80034f2:	bf00      	nop
  }

  return ret;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop

08003500 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800350c:	f107 0208 	add.w	r2, r7, #8
 8003510:	2301      	movs	r3, #1
 8003512:	2162      	movs	r1, #98	; 0x62
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff3e 	bl	8003396 <lis2mdl_read_reg>
 800351a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	7a3b      	ldrb	r3, [r7, #8]
 800352c:	f362 1304 	bfi	r3, r2, #4, #1
 8003530:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003532:	f107 0208 	add.w	r2, r7, #8
 8003536:	2301      	movs	r3, #1
 8003538:	2162      	movs	r1, #98	; 0x62
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff43 	bl	80033c6 <lis2mdl_write_reg>
 8003540:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003542:	68fb      	ldr	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003556:	f107 020c 	add.w	r2, r7, #12
 800355a:	2306      	movs	r3, #6
 800355c:	2168      	movs	r1, #104	; 0x68
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff19 	bl	8003396 <lis2mdl_read_reg>
 8003564:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003566:	7b7b      	ldrb	r3, [r7, #13]
 8003568:	b21a      	sxth	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003574:	b29b      	uxth	r3, r3
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	b29a      	uxth	r2, r3
 800357a:	7b3b      	ldrb	r3, [r7, #12]
 800357c:	b29b      	uxth	r3, r3
 800357e:	4413      	add	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	b21a      	sxth	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	3302      	adds	r3, #2
 800358e:	b212      	sxth	r2, r2
 8003590:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	3302      	adds	r3, #2
 8003596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359a:	b29b      	uxth	r3, r3
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	b29a      	uxth	r2, r3
 80035a0:	7bbb      	ldrb	r3, [r7, #14]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	3302      	adds	r3, #2
 80035ac:	b212      	sxth	r2, r2
 80035ae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80035b0:	7c7a      	ldrb	r2, [r7, #17]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	3304      	adds	r3, #4
 80035b6:	b212      	sxth	r2, r2
 80035b8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	3304      	adds	r3, #4
 80035be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	7c3b      	ldrb	r3, [r7, #16]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	3304      	adds	r3, #4
 80035d4:	b212      	sxth	r2, r2
 80035d6:	801a      	strh	r2, [r3, #0]

  return ret;
 80035d8:	697b      	ldr	r3, [r7, #20]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80035ec:	2301      	movs	r3, #1
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	214f      	movs	r1, #79	; 0x4f
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fecf 	bl	8003396 <lis2mdl_read_reg>
 80035f8:	60f8      	str	r0, [r7, #12]

  return ret;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003610:	f107 0208 	add.w	r2, r7, #8
 8003614:	2301      	movs	r3, #1
 8003616:	2162      	movs	r1, #98	; 0x62
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff febc 	bl	8003396 <lis2mdl_read_reg>
 800361e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	7a3b      	ldrb	r3, [r7, #8]
 8003630:	f362 0341 	bfi	r3, r2, #1, #1
 8003634:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003636:	f107 0208 	add.w	r2, r7, #8
 800363a:	2301      	movs	r3, #1
 800363c:	2162      	movs	r1, #98	; 0x62
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fec1 	bl	80033c6 <lis2mdl_write_reg>
 8003644:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800365c:	f107 0208 	add.w	r2, r7, #8
 8003660:	2301      	movs	r3, #1
 8003662:	2162      	movs	r1, #98	; 0x62
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fe96 	bl	8003396 <lis2mdl_read_reg>
 800366a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	b2da      	uxtb	r2, r3
 800367a:	7a3b      	ldrb	r3, [r7, #8]
 800367c:	f362 1345 	bfi	r3, r2, #5, #1
 8003680:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003682:	f107 0208 	add.w	r2, r7, #8
 8003686:	2301      	movs	r3, #1
 8003688:	2162      	movs	r1, #98	; 0x62
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fe9b 	bl	80033c6 <lis2mdl_write_reg>
 8003690:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e051      	b.n	800375c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	7b1a      	ldrb	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <LSM6DSO_RegisterBusIO+0xcc>)
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <LSM6DSO_RegisterBusIO+0xd0>)
 80036fa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e020      	b.n	800375c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4798      	blx	r3
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e016      	b.n	800375c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d112      	bne.n	800375c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003740:	230c      	movs	r3, #12
 8003742:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003744:	7afb      	ldrb	r3, [r7, #11]
 8003746:	461a      	mov	r2, r3
 8003748:	2112      	movs	r1, #18
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 ff5d 	bl	800460a <LSM6DSO_Write_Reg>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800375c:	68fb      	ldr	r3, [r7, #12]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	08004aad 	.word	0x08004aad
 800376c:	08004ae3 	.word	0x08004ae3

08003770 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d00b      	beq.n	8003798 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3320      	adds	r3, #32
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fe8a 	bl	80054a0 <lsm6dso_i3c_disable_set>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e060      	b.n	800385a <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3320      	adds	r3, #32
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fe58 	bl	8005454 <lsm6dso_auto_increment_set>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e054      	b.n	800385a <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fd62 	bl	8005280 <lsm6dso_block_data_update_set>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e048      	b.n	800385a <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3320      	adds	r3, #32
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 feae 	bl	8005530 <lsm6dso_fifo_mode_set>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e03c      	b.n	800385a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2204      	movs	r2, #4
 80037e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3320      	adds	r3, #32
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fa20 	bl	8004c34 <lsm6dso_xl_data_rate_set>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	e02c      	b.n	800385a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3320      	adds	r3, #32
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f9b6 	bl	8004b78 <lsm6dso_xl_full_scale_set>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	e020      	b.n	800385a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2204      	movs	r2, #4
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3320      	adds	r3, #32
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fbce 	bl	8004fc8 <lsm6dso_gy_data_rate_set>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e010      	b.n	800385a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3320      	adds	r3, #32
 800383c:	2106      	movs	r1, #6
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fb5a 	bl	8004ef8 <lsm6dso_gy_full_scale_set>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	e004      	b.n	800385a <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f888 	bl	8003980 <LSM6DSO_ACC_Disable>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	e015      	b.n	80038a8 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fc2e 	bl	80040de <LSM6DSO_GYRO_Disable>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	e00c      	b.n	80038a8 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3320      	adds	r3, #32
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fdb6 	bl	8005432 <lsm6dso_device_id_get>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295
 80038d0:	e000      	b.n	80038d4 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2200      	movs	r2, #0
 80038f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2200      	movs	r2, #0
 80038fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003904:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2210      	movs	r2, #16
 800390a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	4a07      	ldr	r2, [pc, #28]	; (8003934 <LSM6DSO_GetCapabilities+0x58>)
 8003916:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4a06      	ldr	r2, [pc, #24]	; (8003934 <LSM6DSO_GetCapabilities+0x58>)
 800391c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	45d02000 	.word	0x45d02000

08003938 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e014      	b.n	8003978 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f103 0220 	add.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800395a:	4619      	mov	r1, r3
 800395c:	4610      	mov	r0, r2
 800395e:	f001 f969 	bl	8004c34 <lsm6dso_xl_data_rate_set>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
 800396c:	e004      	b.n	8003978 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e01f      	b.n	80039d6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f103 0220 	add.w	r2, r3, #32
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3333      	adds	r3, #51	; 0x33
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f001 fa40 	bl	8004e28 <lsm6dso_xl_data_rate_get>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	e010      	b.n	80039d6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3320      	adds	r3, #32
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f93a 	bl	8004c34 <lsm6dso_xl_data_rate_set>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	e004      	b.n	80039d6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3320      	adds	r3, #32
 80039f2:	f107 020b 	add.w	r2, r7, #11
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f8e3 	bl	8004bc4 <lsm6dso_xl_full_scale_get>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	e023      	b.n	8003a52 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d81b      	bhi.n	8003a48 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a39 	.word	0x08003a39
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003a2c:	601a      	str	r2, [r3, #0]
      break;
 8003a2e:	e00f      	b.n	8003a50 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003a34:	601a      	str	r2, [r3, #0]
      break;
 8003a36:	e00b      	b.n	8003a50 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003a3c:	601a      	str	r2, [r3, #0]
      break;
 8003a3e:	e007      	b.n	8003a50 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003a44:	601a      	str	r2, [r3, #0]
      break;
 8003a46:	e003      	b.n	8003a50 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	60fb      	str	r3, [r7, #12]
      break;
 8003a4e:	bf00      	nop
  }

  return ret;
 8003a50:	68fb      	ldr	r3, [r7, #12]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	3d79db23 	.word	0x3d79db23
 8003a60:	3df9db23 	.word	0x3df9db23
 8003a64:	3e79db23 	.word	0x3e79db23
 8003a68:	3ef9db23 	.word	0x3ef9db23

08003a6c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3320      	adds	r3, #32
 8003a7e:	f107 020b 	add.w	r2, r7, #11
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 f9cf 	bl	8004e28 <lsm6dso_xl_data_rate_get>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	e054      	b.n	8003b40 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	2b0b      	cmp	r3, #11
 8003a9a:	d84c      	bhi.n	8003b36 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ad5 	.word	0x08003ad5
 8003aa8:	08003ae7 	.word	0x08003ae7
 8003aac:	08003aef 	.word	0x08003aef
 8003ab0:	08003af7 	.word	0x08003af7
 8003ab4:	08003aff 	.word	0x08003aff
 8003ab8:	08003b07 	.word	0x08003b07
 8003abc:	08003b0f 	.word	0x08003b0f
 8003ac0:	08003b17 	.word	0x08003b17
 8003ac4:	08003b1f 	.word	0x08003b1f
 8003ac8:	08003b27 	.word	0x08003b27
 8003acc:	08003b2f 	.word	0x08003b2f
 8003ad0:	08003adf 	.word	0x08003adf
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
      break;
 8003adc:	e02f      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003ae2:	601a      	str	r2, [r3, #0]
      break;
 8003ae4:	e02b      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003aea:	601a      	str	r2, [r3, #0]
      break;
 8003aec:	e027      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003af2:	601a      	str	r2, [r3, #0]
      break;
 8003af4:	e023      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003afa:	601a      	str	r2, [r3, #0]
      break;
 8003afc:	e01f      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003b02:	601a      	str	r2, [r3, #0]
      break;
 8003b04:	e01b      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003b0a:	601a      	str	r2, [r3, #0]
      break;
 8003b0c:	e017      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003b12:	601a      	str	r2, [r3, #0]
      break;
 8003b14:	e013      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003b1a:	601a      	str	r2, [r3, #0]
      break;
 8003b1c:	e00f      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003b22:	601a      	str	r2, [r3, #0]
      break;
 8003b24:	e00b      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003b2a:	601a      	str	r2, [r3, #0]
      break;
 8003b2c:	e007      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003b32:	601a      	str	r2, [r3, #0]
      break;
 8003b34:	e003      	b.n	8003b3e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	60fb      	str	r3, [r7, #12]
      break;
 8003b3c:	bf00      	nop
  }

  return ret;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	3fcccccd 	.word	0x3fcccccd
 8003b4c:	41480000 	.word	0x41480000
 8003b50:	41d00000 	.word	0x41d00000
 8003b54:	42500000 	.word	0x42500000
 8003b58:	42d00000 	.word	0x42d00000
 8003b5c:	43500000 	.word	0x43500000
 8003b60:	43d08000 	.word	0x43d08000
 8003b64:	44504000 	.word	0x44504000
 8003b68:	44d06000 	.word	0x44d06000
 8003b6c:	45505000 	.word	0x45505000
 8003b70:	45d05800 	.word	0x45d05800

08003b74 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003b80:	2100      	movs	r1, #0
 8003b82:	ed97 0a00 	vldr	s0, [r7]
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f806 	bl	8003b98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	f000 80ea 	beq.w	8003d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	f300 8163 	bgt.w	8003e84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d074      	beq.n	8003cb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003bc6:	e15d      	b.n	8003e84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f103 0020 	add.w	r0, r3, #32
 8003bce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	2114      	movs	r1, #20
 8003bd6:	f000 ff9f 	bl	8004b18 <lsm6dso_read_reg>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295
 8003be4:	e16c      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003be6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d025      	beq.n	8003c40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10b      	bne.n	8003c16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3320      	adds	r3, #32
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f815 	bl	8004c34 <lsm6dso_xl_data_rate_set>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e154      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003c16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c1a:	f36f 13c7 	bfc	r3, #7, #1
 8003c1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f103 0020 	add.w	r0, r3, #32
 8003c28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	2114      	movs	r1, #20
 8003c30:	f000 ff8a 	bl	8004b48 <lsm6dso_write_reg>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e13f      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f103 0020 	add.w	r0, r3, #32
 8003c46:	f107 0220 	add.w	r2, r7, #32
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	2115      	movs	r1, #21
 8003c4e:	f000 ff63 	bl	8004b18 <lsm6dso_read_reg>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	e130      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003c5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d014      	beq.n	8003c96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003c6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c70:	f36f 1304 	bfc	r3, #4, #1
 8003c74:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f103 0020 	add.w	r0, r3, #32
 8003c7e:	f107 0220 	add.w	r2, r7, #32
 8003c82:	2301      	movs	r3, #1
 8003c84:	2115      	movs	r1, #21
 8003c86:	f000 ff5f 	bl	8004b48 <lsm6dso_write_reg>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	e114      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003c96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c9a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca6:	d400      	bmi.n	8003caa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003ca8:	e0f0      	b.n	8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003caa:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cae:	e0ed      	b.n	8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f103 0020 	add.w	r0, r3, #32
 8003cb6:	f107 021c 	add.w	r2, r7, #28
 8003cba:	2301      	movs	r3, #1
 8003cbc:	2114      	movs	r1, #20
 8003cbe:	f000 ff2b 	bl	8004b18 <lsm6dso_read_reg>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ccc:	e0f8      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003cce:	7f3b      	ldrb	r3, [r7, #28]
 8003cd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d023      	beq.n	8003d22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d10b      	bne.n	8003cfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3320      	adds	r3, #32
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 ffa2 	bl	8004c34 <lsm6dso_xl_data_rate_set>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	e0e1      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003cfc:	7f3b      	ldrb	r3, [r7, #28]
 8003cfe:	f36f 13c7 	bfc	r3, #7, #1
 8003d02:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f103 0020 	add.w	r0, r3, #32
 8003d0a:	f107 021c 	add.w	r2, r7, #28
 8003d0e:	2301      	movs	r3, #1
 8003d10:	2114      	movs	r1, #20
 8003d12:	f000 ff19 	bl	8004b48 <lsm6dso_write_reg>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	e0ce      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f103 0020 	add.w	r0, r3, #32
 8003d28:	f107 0218 	add.w	r2, r7, #24
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	2115      	movs	r1, #21
 8003d30:	f000 fef2 	bl	8004b18 <lsm6dso_read_reg>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e0bf      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003d40:	7e3b      	ldrb	r3, [r7, #24]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d112      	bne.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003d4c:	7e3b      	ldrb	r3, [r7, #24]
 8003d4e:	f043 0310 	orr.w	r3, r3, #16
 8003d52:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f103 0020 	add.w	r0, r3, #32
 8003d5a:	f107 0218 	add.w	r2, r7, #24
 8003d5e:	2301      	movs	r3, #1
 8003d60:	2115      	movs	r1, #21
 8003d62:	f000 fef1 	bl	8004b48 <lsm6dso_write_reg>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	e0a6      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003d72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d76:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003ecc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d82:	dc00      	bgt.n	8003d86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003d84:	e082      	b.n	8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003d86:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8a:	e07f      	b.n	8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f103 0020 	add.w	r0, r3, #32
 8003d92:	f107 0210 	add.w	r2, r7, #16
 8003d96:	2301      	movs	r3, #1
 8003d98:	2115      	movs	r1, #21
 8003d9a:	f000 febd 	bl	8004b18 <lsm6dso_read_reg>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
 8003da8:	e08a      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003daa:	7c3b      	ldrb	r3, [r7, #16]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d012      	beq.n	8003ddc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003db6:	7c3b      	ldrb	r3, [r7, #16]
 8003db8:	f36f 1304 	bfc	r3, #4, #1
 8003dbc:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f103 0020 	add.w	r0, r3, #32
 8003dc4:	f107 0210 	add.w	r2, r7, #16
 8003dc8:	2301      	movs	r3, #1
 8003dca:	2115      	movs	r1, #21
 8003dcc:	f000 febc 	bl	8004b48 <lsm6dso_write_reg>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e071      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d108      	bne.n	8003df8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f979 	bl	80040de <LSM6DSO_GYRO_Disable>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	e063      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f103 0020 	add.w	r0, r3, #32
 8003dfe:	f107 0214 	add.w	r2, r7, #20
 8003e02:	2301      	movs	r3, #1
 8003e04:	2114      	movs	r1, #20
 8003e06:	f000 fe87 	bl	8004b18 <lsm6dso_read_reg>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003e10:	f04f 33ff 	mov.w	r3, #4294967295
 8003e14:	e054      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003e16:	7d3b      	ldrb	r3, [r7, #20]
 8003e18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d123      	bne.n	8003e6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10b      	bne.n	8003e44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3320      	adds	r3, #32
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fefe 	bl	8004c34 <lsm6dso_xl_data_rate_set>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	e03d      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003e44:	7d3b      	ldrb	r3, [r7, #20]
 8003e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f103 0020 	add.w	r0, r3, #32
 8003e52:	f107 0214 	add.w	r2, r7, #20
 8003e56:	2301      	movs	r3, #1
 8003e58:	2114      	movs	r1, #20
 8003e5a:	f000 fe75 	bl	8004b48 <lsm6dso_write_reg>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	e02a      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003e6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e6e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003ecc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7a:	dc00      	bgt.n	8003e7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003e7c:	e006      	b.n	8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e82:	e003      	b.n	8003e8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003e8a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d102      	bne.n	8003e9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	e012      	b.n	8003ec0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003ea4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fbc9 	bl	8004640 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003eae:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003eb0:	e005      	b.n	8003ebe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003eb2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fc5a 	bl	8004770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003ebc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3730      	adds	r7, #48	; 0x30
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	41480000 	.word	0x41480000
 8003ecc:	43500000 	.word	0x43500000
 8003ed0:	43500000 	.word	0x43500000

08003ed4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3320      	adds	r3, #32
 8003ee6:	f107 020b 	add.w	r2, r7, #11
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fe69 	bl	8004bc4 <lsm6dso_xl_full_scale_get>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	e023      	b.n	8003f46 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003efe:	7afb      	ldrb	r3, [r7, #11]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d81b      	bhi.n	8003f3c <LSM6DSO_ACC_GetFullScale+0x68>
 8003f04:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <LSM6DSO_ACC_GetFullScale+0x38>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f1d 	.word	0x08003f1d
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f2d 	.word	0x08003f2d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	601a      	str	r2, [r3, #0]
      break;
 8003f22:	e00f      	b.n	8003f44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2204      	movs	r2, #4
 8003f28:	601a      	str	r2, [r3, #0]
      break;
 8003f2a:	e00b      	b.n	8003f44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	601a      	str	r2, [r3, #0]
      break;
 8003f32:	e007      	b.n	8003f44 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2210      	movs	r2, #16
 8003f38:	601a      	str	r2, [r3, #0]
      break;
 8003f3a:	e003      	b.n	8003f44 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	60fb      	str	r3, [r7, #12]
      break;
 8003f42:	bf00      	nop
  }

  return ret;
 8003f44:	68fb      	ldr	r3, [r7, #12]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	dd0b      	ble.n	8003f78 <LSM6DSO_ACC_SetFullScale+0x28>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	dd06      	ble.n	8003f74 <LSM6DSO_ACC_SetFullScale+0x24>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	dc01      	bgt.n	8003f70 <LSM6DSO_ACC_SetFullScale+0x20>
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e004      	b.n	8003f7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e002      	b.n	8003f7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e000      	b.n	8003f7a <LSM6DSO_ACC_SetFullScale+0x2a>
 8003f78:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003f7a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3320      	adds	r3, #32
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fdf7 	bl	8004b78 <lsm6dso_xl_full_scale_set>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003f90:	f04f 33ff 	mov.w	r3, #4294967295
 8003f94:	e000      	b.n	8003f98 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3320      	adds	r3, #32
 8003fae:	f107 0208 	add.w	r2, r7, #8
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f9d4 	bl	8005362 <lsm6dso_acceleration_raw_get>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	e00c      	b.n	8003fe0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003fc6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003fce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003fd6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3320      	adds	r3, #32
 8003ffc:	f107 0210 	add.w	r2, r7, #16
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f001 f9ad 	bl	8005362 <lsm6dso_acceleration_raw_get>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e03c      	b.n	800408e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fce0 	bl	80039e0 <LSM6DSO_ACC_GetSensitivity>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e030      	b.n	800408e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800402c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004038:	edd7 7a03 	vldr	s15, [r7, #12]
 800403c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004044:	ee17 2a90 	vmov	r2, s15
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800404c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004058:	edd7 7a03 	vldr	s15, [r7, #12]
 800405c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004064:	ee17 2a90 	vmov	r2, s15
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800406c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004078:	edd7 7a03 	vldr	s15, [r7, #12]
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004084:	ee17 2a90 	vmov	r2, s15
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e014      	b.n	80040d6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f103 0220 	add.w	r2, r3, #32
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 ff84 	bl	8004fc8 <lsm6dso_gy_data_rate_set>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	e004      	b.n	80040d6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e01f      	b.n	8004134 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f103 0220 	add.w	r2, r3, #32
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3334      	adds	r3, #52	; 0x34
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f001 f85b 	bl	80051bc <lsm6dso_gy_data_rate_get>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800410c:	f04f 33ff 	mov.w	r3, #4294967295
 8004110:	e010      	b.n	8004134 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3320      	adds	r3, #32
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f000 ff55 	bl	8004fc8 <lsm6dso_gy_data_rate_set>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	e004      	b.n	8004134 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3320      	adds	r3, #32
 800414e:	f107 020b 	add.w	r2, r7, #11
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fef5 	bl	8004f44 <lsm6dso_gy_full_scale_get>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	e02d      	b.n	80041c2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004166:	7afb      	ldrb	r3, [r7, #11]
 8004168:	2b06      	cmp	r3, #6
 800416a:	d825      	bhi.n	80041b8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004199 	.word	0x08004199
 8004178:	08004191 	.word	0x08004191
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041b9 	.word	0x080041b9
 8004184:	080041a9 	.word	0x080041a9
 8004188:	080041b9 	.word	0x080041b9
 800418c:	080041b1 	.word	0x080041b1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004194:	601a      	str	r2, [r3, #0]
      break;
 8004196:	e013      	b.n	80041c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800419c:	601a      	str	r2, [r3, #0]
      break;
 800419e:	e00f      	b.n	80041c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80041a4:	601a      	str	r2, [r3, #0]
      break;
 80041a6:	e00b      	b.n	80041c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80041ac:	601a      	str	r2, [r3, #0]
      break;
 80041ae:	e007      	b.n	80041c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80041b4:	601a      	str	r2, [r3, #0]
      break;
 80041b6:	e003      	b.n	80041c0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
 80041bc:	60fb      	str	r3, [r7, #12]
      break;
 80041be:	bf00      	nop
  }

  return ret;
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	408c0000 	.word	0x408c0000
 80041d0:	410c0000 	.word	0x410c0000
 80041d4:	418c0000 	.word	0x418c0000
 80041d8:	420c0000 	.word	0x420c0000
 80041dc:	428c0000 	.word	0x428c0000

080041e0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3320      	adds	r3, #32
 80041f2:	f107 020b 	add.w	r2, r7, #11
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 ffdf 	bl	80051bc <lsm6dso_gy_data_rate_get>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004204:	f04f 33ff 	mov.w	r3, #4294967295
 8004208:	e04e      	b.n	80042a8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	2b0a      	cmp	r3, #10
 800420e:	d846      	bhi.n	800429e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004210:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	08004245 	.word	0x08004245
 800421c:	0800424f 	.word	0x0800424f
 8004220:	08004257 	.word	0x08004257
 8004224:	0800425f 	.word	0x0800425f
 8004228:	08004267 	.word	0x08004267
 800422c:	0800426f 	.word	0x0800426f
 8004230:	08004277 	.word	0x08004277
 8004234:	0800427f 	.word	0x0800427f
 8004238:	08004287 	.word	0x08004287
 800423c:	0800428f 	.word	0x0800428f
 8004240:	08004297 	.word	0x08004297
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
      break;
 800424c:	e02b      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004252:	601a      	str	r2, [r3, #0]
      break;
 8004254:	e027      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800425a:	601a      	str	r2, [r3, #0]
      break;
 800425c:	e023      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004262:	601a      	str	r2, [r3, #0]
      break;
 8004264:	e01f      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800426a:	601a      	str	r2, [r3, #0]
      break;
 800426c:	e01b      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004272:	601a      	str	r2, [r3, #0]
      break;
 8004274:	e017      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800427a:	601a      	str	r2, [r3, #0]
      break;
 800427c:	e013      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	4a11      	ldr	r2, [pc, #68]	; (80042c8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004282:	601a      	str	r2, [r3, #0]
      break;
 8004284:	e00f      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	4a10      	ldr	r2, [pc, #64]	; (80042cc <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800428a:	601a      	str	r2, [r3, #0]
      break;
 800428c:	e00b      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004292:	601a      	str	r2, [r3, #0]
      break;
 8004294:	e007      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	4a0e      	ldr	r2, [pc, #56]	; (80042d4 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800429a:	601a      	str	r2, [r3, #0]
      break;
 800429c:	e003      	b.n	80042a6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	60fb      	str	r3, [r7, #12]
      break;
 80042a4:	bf00      	nop
  }

  return ret;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	41480000 	.word	0x41480000
 80042b4:	41d00000 	.word	0x41d00000
 80042b8:	42500000 	.word	0x42500000
 80042bc:	42d00000 	.word	0x42d00000
 80042c0:	43500000 	.word	0x43500000
 80042c4:	43d08000 	.word	0x43d08000
 80042c8:	44504000 	.word	0x44504000
 80042cc:	44d06000 	.word	0x44d06000
 80042d0:	45505000 	.word	0x45505000
 80042d4:	45d05800 	.word	0x45d05800

080042d8 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80042e4:	2100      	movs	r1, #0
 80042e6:	ed97 0a00 	vldr	s0, [r7]
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f806 	bl	80042fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80042f0:	4603      	mov	r3, r0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	ed87 0a02 	vstr	s0, [r7, #8]
 8004308:	460b      	mov	r3, r1
 800430a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800431a:	2b01      	cmp	r3, #1
 800431c:	d028      	beq.n	8004370 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800431e:	e05c      	b.n	80043da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f103 0020 	add.w	r0, r3, #32
 8004326:	f107 0214 	add.w	r2, r7, #20
 800432a:	2301      	movs	r3, #1
 800432c:	2116      	movs	r1, #22
 800432e:	f000 fbf3 	bl	8004b18 <lsm6dso_read_reg>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	e06c      	b.n	8004418 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800433e:	7d3b      	ldrb	r3, [r7, #20]
 8004340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04b      	beq.n	80043e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800434a:	7d3b      	ldrb	r3, [r7, #20]
 800434c:	f36f 13c7 	bfc	r3, #7, #1
 8004350:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f103 0020 	add.w	r0, r3, #32
 8004358:	f107 0214 	add.w	r2, r7, #20
 800435c:	2301      	movs	r3, #1
 800435e:	2116      	movs	r1, #22
 8004360:	f000 fbf2 	bl	8004b48 <lsm6dso_write_reg>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d03b      	beq.n	80043e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e053      	b.n	8004418 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f103 0020 	add.w	r0, r3, #32
 8004376:	f107 0210 	add.w	r2, r7, #16
 800437a:	2301      	movs	r3, #1
 800437c:	2116      	movs	r1, #22
 800437e:	f000 fbcb 	bl	8004b18 <lsm6dso_read_reg>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004388:	f04f 33ff 	mov.w	r3, #4294967295
 800438c:	e044      	b.n	8004418 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800438e:	7c3b      	ldrb	r3, [r7, #16]
 8004390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d112      	bne.n	80043c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800439a:	7c3b      	ldrb	r3, [r7, #16]
 800439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f103 0020 	add.w	r0, r3, #32
 80043a8:	f107 0210 	add.w	r2, r7, #16
 80043ac:	2301      	movs	r3, #1
 80043ae:	2116      	movs	r1, #22
 80043b0:	f000 fbca 	bl	8004b48 <lsm6dso_write_reg>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	e02b      	b.n	8004418 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80043c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80043c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004420 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80043c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	dc00      	bgt.n	80043d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80043d2:	e007      	b.n	80043e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	e004      	b.n	80043e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	61fb      	str	r3, [r7, #28]
      break;
 80043e0:	e000      	b.n	80043e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80043e2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d102      	bne.n	80043f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	e012      	b.n	8004418 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80043fc:	ed97 0a06 	vldr	s0, [r7, #24]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fa45 	bl	8004890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004406:	61f8      	str	r0, [r7, #28]
 8004408:	e005      	b.n	8004416 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800440a:	ed97 0a06 	vldr	s0, [r7, #24]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 faca 	bl	80049a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004414:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004416:	69fb      	ldr	r3, [r7, #28]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	43500000 	.word	0x43500000
 8004424:	43500000 	.word	0x43500000

08004428 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3320      	adds	r3, #32
 800443a:	f107 020b 	add.w	r2, r7, #11
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd7f 	bl	8004f44 <lsm6dso_gy_full_scale_get>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
 8004450:	e030      	b.n	80044b4 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004452:	7afb      	ldrb	r3, [r7, #11]
 8004454:	2b06      	cmp	r3, #6
 8004456:	d828      	bhi.n	80044aa <LSM6DSO_GYRO_GetFullScale+0x82>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004485 	.word	0x08004485
 8004464:	0800447d 	.word	0x0800447d
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080044ab 	.word	0x080044ab
 8004470:	08004497 	.word	0x08004497
 8004474:	080044ab 	.word	0x080044ab
 8004478:	080044a1 	.word	0x080044a1
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	227d      	movs	r2, #125	; 0x7d
 8004480:	601a      	str	r2, [r3, #0]
      break;
 8004482:	e016      	b.n	80044b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	22fa      	movs	r2, #250	; 0xfa
 8004488:	601a      	str	r2, [r3, #0]
      break;
 800448a:	e012      	b.n	80044b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004492:	601a      	str	r2, [r3, #0]
      break;
 8004494:	e00d      	b.n	80044b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800449c:	601a      	str	r2, [r3, #0]
      break;
 800449e:	e008      	b.n	80044b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044a6:	601a      	str	r2, [r3, #0]
      break;
 80044a8:	e003      	b.n	80044b2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	60fb      	str	r3, [r7, #12]
      break;
 80044b0:	bf00      	nop
  }

  return ret;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b7d      	cmp	r3, #125	; 0x7d
 80044ca:	dd12      	ble.n	80044f2 <LSM6DSO_GYRO_SetFullScale+0x36>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2bfa      	cmp	r3, #250	; 0xfa
 80044d0:	dd0d      	ble.n	80044ee <LSM6DSO_GYRO_SetFullScale+0x32>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044d8:	dd07      	ble.n	80044ea <LSM6DSO_GYRO_SetFullScale+0x2e>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044e0:	dc01      	bgt.n	80044e6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80044e2:	2304      	movs	r3, #4
 80044e4:	e006      	b.n	80044f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044e6:	2306      	movs	r3, #6
 80044e8:	e004      	b.n	80044f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e002      	b.n	80044f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80044f2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80044f4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3320      	adds	r3, #32
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fcfa 	bl	8004ef8 <lsm6dso_gy_full_scale_set>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800450a:	f04f 33ff 	mov.w	r3, #4294967295
 800450e:	e000      	b.n	8004512 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3320      	adds	r3, #32
 8004528:	f107 0208 	add.w	r2, r7, #8
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fecc 	bl	80052cc <lsm6dso_angular_rate_raw_get>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	e00c      	b.n	800455a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004540:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004548:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004550:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3320      	adds	r3, #32
 8004570:	f107 0210 	add.w	r2, r7, #16
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fea8 	bl	80052cc <lsm6dso_angular_rate_raw_get>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	e03c      	b.n	8004602 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004588:	f107 030c 	add.w	r3, r7, #12
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fdd4 	bl	800413c <LSM6DSO_GYRO_GetSensitivity>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	e030      	b.n	8004602 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80045a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045b8:	ee17 2a90 	vmov	r2, s15
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80045c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045d8:	ee17 2a90 	vmov	r2, s15
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80045e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f8:	ee17 2a90 	vmov	r2, s15
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	70fb      	strb	r3, [r7, #3]
 8004616:	4613      	mov	r3, r2
 8004618:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f103 0020 	add.w	r0, r3, #32
 8004620:	1cba      	adds	r2, r7, #2
 8004622:	78f9      	ldrb	r1, [r7, #3]
 8004624:	2301      	movs	r3, #1
 8004626:	f000 fa8f 	bl	8004b48 <lsm6dso_write_reg>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	e000      	b.n	8004638 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800464c:	edd7 7a00 	vldr	s15, [r7]
 8004650:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004750 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	d801      	bhi.n	8004662 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800465e:	230b      	movs	r3, #11
 8004660:	e063      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004662:	edd7 7a00 	vldr	s15, [r7]
 8004666:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800466a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	d801      	bhi.n	8004678 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004674:	2301      	movs	r3, #1
 8004676:	e058      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004678:	edd7 7a00 	vldr	s15, [r7]
 800467c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	d801      	bhi.n	800468e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800468a:	2302      	movs	r3, #2
 800468c:	e04d      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800468e:	edd7 7a00 	vldr	s15, [r7]
 8004692:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004754 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	d801      	bhi.n	80046a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80046a0:	2303      	movs	r3, #3
 80046a2:	e042      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046a4:	edd7 7a00 	vldr	s15, [r7]
 80046a8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004758 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80046ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b4:	d801      	bhi.n	80046ba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80046b6:	2304      	movs	r3, #4
 80046b8:	e037      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046ba:	edd7 7a00 	vldr	s15, [r7]
 80046be:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800475c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80046c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ca:	d801      	bhi.n	80046d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80046cc:	2305      	movs	r3, #5
 80046ce:	e02c      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046d0:	edd7 7a00 	vldr	s15, [r7]
 80046d4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004760 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80046d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	d801      	bhi.n	80046e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80046e2:	2306      	movs	r3, #6
 80046e4:	e021      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046e6:	edd7 7a00 	vldr	s15, [r7]
 80046ea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004764 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80046ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f6:	d801      	bhi.n	80046fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80046f8:	2307      	movs	r3, #7
 80046fa:	e016      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046fc:	edd7 7a00 	vldr	s15, [r7]
 8004700:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004768 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470c:	d801      	bhi.n	8004712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800470e:	2308      	movs	r3, #8
 8004710:	e00b      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004712:	edd7 7a00 	vldr	s15, [r7]
 8004716:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800476c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800471a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	d801      	bhi.n	8004728 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004724:	2309      	movs	r3, #9
 8004726:	e000      	b.n	800472a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004728:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800472a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3320      	adds	r3, #32
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fa7d 	bl	8004c34 <lsm6dso_xl_data_rate_set>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004740:	f04f 33ff 	mov.w	r3, #4294967295
 8004744:	e000      	b.n	8004748 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	3fcccccd 	.word	0x3fcccccd
 8004754:	42500000 	.word	0x42500000
 8004758:	42d00000 	.word	0x42d00000
 800475c:	43500000 	.word	0x43500000
 8004760:	43d08000 	.word	0x43d08000
 8004764:	44504000 	.word	0x44504000
 8004768:	44d06000 	.word	0x44d06000
 800476c:	45505000 	.word	0x45505000

08004770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800477c:	edd7 7a00 	vldr	s15, [r7]
 8004780:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004870 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	d801      	bhi.n	8004792 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800478e:	230b      	movs	r3, #11
 8004790:	e063      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004792:	edd7 7a00 	vldr	s15, [r7]
 8004796:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800479a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	d801      	bhi.n	80047a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e058      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047a8:	edd7 7a00 	vldr	s15, [r7]
 80047ac:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80047b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b8:	d801      	bhi.n	80047be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e04d      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047be:	edd7 7a00 	vldr	s15, [r7]
 80047c2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004874 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80047c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	d801      	bhi.n	80047d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80047d0:	2303      	movs	r3, #3
 80047d2:	e042      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047d4:	edd7 7a00 	vldr	s15, [r7]
 80047d8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004878 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80047dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e4:	d801      	bhi.n	80047ea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80047e6:	2304      	movs	r3, #4
 80047e8:	e037      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047ea:	edd7 7a00 	vldr	s15, [r7]
 80047ee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800487c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80047f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	d801      	bhi.n	8004800 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80047fc:	2305      	movs	r3, #5
 80047fe:	e02c      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004800:	edd7 7a00 	vldr	s15, [r7]
 8004804:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004880 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004810:	d801      	bhi.n	8004816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004812:	2306      	movs	r3, #6
 8004814:	e021      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004816:	edd7 7a00 	vldr	s15, [r7]
 800481a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004884 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800481e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004826:	d801      	bhi.n	800482c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004828:	2307      	movs	r3, #7
 800482a:	e016      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800482c:	edd7 7a00 	vldr	s15, [r7]
 8004830:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004888 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483c:	d801      	bhi.n	8004842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800483e:	2308      	movs	r3, #8
 8004840:	e00b      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004842:	edd7 7a00 	vldr	s15, [r7]
 8004846:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800488c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800484a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	d801      	bhi.n	8004858 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004854:	2309      	movs	r3, #9
 8004856:	e000      	b.n	800485a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004858:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	3fcccccd 	.word	0x3fcccccd
 8004874:	42500000 	.word	0x42500000
 8004878:	42d00000 	.word	0x42d00000
 800487c:	43500000 	.word	0x43500000
 8004880:	43d08000 	.word	0x43d08000
 8004884:	44504000 	.word	0x44504000
 8004888:	44d06000 	.word	0x44d06000
 800488c:	45505000 	.word	0x45505000

08004890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800489c:	edd7 7a00 	vldr	s15, [r7]
 80048a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80048a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ac:	d801      	bhi.n	80048b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e058      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048b2:	edd7 7a00 	vldr	s15, [r7]
 80048b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d801      	bhi.n	80048c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e04d      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048c8:	edd7 7a00 	vldr	s15, [r7]
 80048cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800498c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80048d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d8:	d801      	bhi.n	80048de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80048da:	2303      	movs	r3, #3
 80048dc:	e042      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048de:	edd7 7a00 	vldr	s15, [r7]
 80048e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80048e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ee:	d801      	bhi.n	80048f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80048f0:	2304      	movs	r3, #4
 80048f2:	e037      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048f4:	edd7 7a00 	vldr	s15, [r7]
 80048f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80048fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	d801      	bhi.n	800490a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004906:	2305      	movs	r3, #5
 8004908:	e02c      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800490a:	edd7 7a00 	vldr	s15, [r7]
 800490e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004998 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	d801      	bhi.n	8004920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800491c:	2306      	movs	r3, #6
 800491e:	e021      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004920:	edd7 7a00 	vldr	s15, [r7]
 8004924:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800499c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004930:	d801      	bhi.n	8004936 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004932:	2307      	movs	r3, #7
 8004934:	e016      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004936:	edd7 7a00 	vldr	s15, [r7]
 800493a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80049a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800493e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d801      	bhi.n	800494c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004948:	2308      	movs	r3, #8
 800494a:	e00b      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800494c:	edd7 7a00 	vldr	s15, [r7]
 8004950:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80049a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	d801      	bhi.n	8004962 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800495e:	2309      	movs	r3, #9
 8004960:	e000      	b.n	8004964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004962:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004964:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3320      	adds	r3, #32
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fb2a 	bl	8004fc8 <lsm6dso_gy_data_rate_set>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	e000      	b.n	8004982 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	42500000 	.word	0x42500000
 8004990:	42d00000 	.word	0x42d00000
 8004994:	43500000 	.word	0x43500000
 8004998:	43d08000 	.word	0x43d08000
 800499c:	44504000 	.word	0x44504000
 80049a0:	44d06000 	.word	0x44d06000
 80049a4:	45505000 	.word	0x45505000

080049a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80049b4:	edd7 7a00 	vldr	s15, [r7]
 80049b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c4:	d801      	bhi.n	80049ca <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e058      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049ca:	edd7 7a00 	vldr	s15, [r7]
 80049ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049da:	d801      	bhi.n	80049e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80049dc:	2302      	movs	r3, #2
 80049de:	e04d      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049e0:	edd7 7a00 	vldr	s15, [r7]
 80049e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a90 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80049e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f0:	d801      	bhi.n	80049f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80049f2:	2303      	movs	r3, #3
 80049f4:	e042      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049f6:	edd7 7a00 	vldr	s15, [r7]
 80049fa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a94 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80049fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a06:	d801      	bhi.n	8004a0c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	e037      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a0c:	edd7 7a00 	vldr	s15, [r7]
 8004a10:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004a98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1c:	d801      	bhi.n	8004a22 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004a1e:	2305      	movs	r3, #5
 8004a20:	e02c      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a22:	edd7 7a00 	vldr	s15, [r7]
 8004a26:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	d801      	bhi.n	8004a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004a34:	2306      	movs	r3, #6
 8004a36:	e021      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a38:	edd7 7a00 	vldr	s15, [r7]
 8004a3c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004aa0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a48:	d801      	bhi.n	8004a4e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004a4a:	2307      	movs	r3, #7
 8004a4c:	e016      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a4e:	edd7 7a00 	vldr	s15, [r7]
 8004a52:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004aa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5e:	d801      	bhi.n	8004a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004a60:	2308      	movs	r3, #8
 8004a62:	e00b      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a64:	edd7 7a00 	vldr	s15, [r7]
 8004a68:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a74:	d801      	bhi.n	8004a7a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004a76:	2309      	movs	r3, #9
 8004a78:	e000      	b.n	8004a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a7a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	42500000 	.word	0x42500000
 8004a94:	42d00000 	.word	0x42d00000
 8004a98:	43500000 	.word	0x43500000
 8004a9c:	43d08000 	.word	0x43d08000
 8004aa0:	44504000 	.word	0x44504000
 8004aa4:	44d06000 	.word	0x44d06000
 8004aa8:	45505000 	.word	0x45505000

08004aac <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	460b      	mov	r3, r1
 8004aba:	72fb      	strb	r3, [r7, #11]
 8004abc:	4613      	mov	r3, r2
 8004abe:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	695c      	ldr	r4, [r3, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	7b1b      	ldrb	r3, [r3, #12]
 8004acc:	b298      	uxth	r0, r3
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	893b      	ldrh	r3, [r7, #8]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	47a0      	blx	r4
 8004ad8:	4603      	mov	r3, r0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}

08004ae2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ae2:	b590      	push	{r4, r7, lr}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	461a      	mov	r2, r3
 8004aee:	460b      	mov	r3, r1
 8004af0:	72fb      	strb	r3, [r7, #11]
 8004af2:	4613      	mov	r3, r2
 8004af4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	691c      	ldr	r4, [r3, #16]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	7b1b      	ldrb	r3, [r3, #12]
 8004b02:	b298      	uxth	r0, r3
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	b299      	uxth	r1, r3
 8004b08:	893b      	ldrh	r3, [r7, #8]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	47a0      	blx	r4
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}

08004b18 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	461a      	mov	r2, r3
 8004b24:	460b      	mov	r3, r1
 8004b26:	72fb      	strb	r3, [r7, #11]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685c      	ldr	r4, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68d8      	ldr	r0, [r3, #12]
 8004b34:	893b      	ldrh	r3, [r7, #8]
 8004b36:	7af9      	ldrb	r1, [r7, #11]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	47a0      	blx	r4
 8004b3c:	6178      	str	r0, [r7, #20]

  return ret;
 8004b3e:	697b      	ldr	r3, [r7, #20]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}

08004b48 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	461a      	mov	r2, r3
 8004b54:	460b      	mov	r3, r1
 8004b56:	72fb      	strb	r3, [r7, #11]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681c      	ldr	r4, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68d8      	ldr	r0, [r3, #12]
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	7af9      	ldrb	r1, [r7, #11]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	47a0      	blx	r4
 8004b6c:	6178      	str	r0, [r7, #20]

  return ret;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd90      	pop	{r4, r7, pc}

08004b78 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004b84:	f107 0208 	add.w	r2, r7, #8
 8004b88:	2301      	movs	r3, #1
 8004b8a:	2110      	movs	r1, #16
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ffc3 	bl	8004b18 <lsm6dso_read_reg>
 8004b92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	7a3b      	ldrb	r3, [r7, #8]
 8004ba4:	f362 0383 	bfi	r3, r2, #2, #2
 8004ba8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004baa:	f107 0208 	add.w	r2, r7, #8
 8004bae:	2301      	movs	r3, #1
 8004bb0:	2110      	movs	r1, #16
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff ffc8 	bl	8004b48 <lsm6dso_write_reg>
 8004bb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bba:	68fb      	ldr	r3, [r7, #12]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004bce:	f107 0208 	add.w	r2, r7, #8
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	2110      	movs	r1, #16
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ff9e 	bl	8004b18 <lsm6dso_read_reg>
 8004bdc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004bde:	7a3b      	ldrb	r3, [r7, #8]
 8004be0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d81a      	bhi.n	8004c20 <lsm6dso_xl_full_scale_get+0x5c>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <lsm6dso_xl_full_scale_get+0x2c>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c09 	.word	0x08004c09
 8004bf8:	08004c11 	.word	0x08004c11
 8004bfc:	08004c19 	.word	0x08004c19
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
      break;
 8004c06:	e00f      	b.n	8004c28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
      break;
 8004c0e:	e00b      	b.n	8004c28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2202      	movs	r2, #2
 8004c14:	701a      	strb	r2, [r3, #0]
      break;
 8004c16:	e007      	b.n	8004c28 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	701a      	strb	r2, [r3, #0]
      break;
 8004c1e:	e003      	b.n	8004c28 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
      break;
 8004c26:	bf00      	nop
  }

  return ret;
 8004c28:	68fb      	ldr	r3, [r7, #12]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop

08004c34 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004c44:	f107 030c 	add.w	r3, r7, #12
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fc96 	bl	800557c <lsm6dso_fsm_enable_get>
 8004c50:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <lsm6dso_xl_data_rate_set+0x28>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	e0e1      	b.n	8004e20 <lsm6dso_xl_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c5c:	7b3b      	ldrb	r3, [r7, #12]
 8004c5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c62:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c64:	7b3b      	ldrb	r3, [r7, #12]
 8004c66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c6a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c70:	7b3b      	ldrb	r3, [r7, #12]
 8004c72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c76:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c7c:	7b3b      	ldrb	r3, [r7, #12]
 8004c7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c82:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c88:	7b3b      	ldrb	r3, [r7, #12]
 8004c8a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c8e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004c94:	7b3b      	ldrb	r3, [r7, #12]
 8004c96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c9a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004ca0:	7b3b      	ldrb	r3, [r7, #12]
 8004ca2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ca6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004cac:	7b3b      	ldrb	r3, [r7, #12]
 8004cae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004cb2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004cb8:	7b7b      	ldrb	r3, [r7, #13]
 8004cba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cbe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004cc4:	7b7b      	ldrb	r3, [r7, #13]
 8004cc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004cd0:	7b7b      	ldrb	r3, [r7, #13]
 8004cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004cd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004cdc:	7b7b      	ldrb	r3, [r7, #13]
 8004cde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ce2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004ce8:	7b7b      	ldrb	r3, [r7, #13]
 8004cea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004cee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004cf4:	7b7b      	ldrb	r3, [r7, #13]
 8004cf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004cfa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004d00:	7b7b      	ldrb	r3, [r7, #13]
 8004d02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004d0c:	7b7b      	ldrb	r3, [r7, #13]
 8004d0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d164      	bne.n	8004de6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004d1c:	f107 030b 	add.w	r3, r7, #11
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fc4c 	bl	80055c0 <lsm6dso_fsm_data_rate_get>
 8004d28:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <lsm6dso_xl_data_rate_set+0x100>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	e075      	b.n	8004e20 <lsm6dso_xl_data_rate_set+0x1ec>

    switch (fsm_odr)
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d852      	bhi.n	8004de0 <lsm6dso_xl_data_rate_set+0x1ac>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <lsm6dso_xl_data_rate_set+0x10c>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d63 	.word	0x08004d63
 8004d48:	08004d81 	.word	0x08004d81
 8004d4c:	08004dab 	.word	0x08004dab
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d5a:	e045      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d60:	e042      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d6c:	e03c      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d74:	2302      	movs	r3, #2
 8004d76:	75fb      	strb	r3, [r7, #23]
        break;
 8004d78:	e036      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	75fb      	strb	r3, [r7, #23]
        break;
 8004d7e:	e033      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d8a:	e02d      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d92:	2303      	movs	r3, #3
 8004d94:	75fb      	strb	r3, [r7, #23]
        break;
 8004d96:	e027      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d102      	bne.n	8004da4 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	75fb      	strb	r3, [r7, #23]
        break;
 8004da2:	e021      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	75fb      	strb	r3, [r7, #23]
        break;
 8004da8:	e01e      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004db0:	2304      	movs	r3, #4
 8004db2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004db4:	e018      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8004dc0:	e012      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d102      	bne.n	8004dce <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dc8:	2304      	movs	r3, #4
 8004dca:	75fb      	strb	r3, [r7, #23]
        break;
 8004dcc:	e00c      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d102      	bne.n	8004dda <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	75fb      	strb	r3, [r7, #23]
        break;
 8004dd8:	e006      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8004dde:	e003      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>

      default:
        odr_xl = val;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	75fb      	strb	r3, [r7, #23]
        break;
 8004de4:	e000      	b.n	8004de8 <lsm6dso_xl_data_rate_set+0x1b4>
    }
  }
 8004de6:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004de8:	f107 0208 	add.w	r2, r7, #8
 8004dec:	2301      	movs	r3, #1
 8004dee:	2110      	movs	r1, #16
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fe91 	bl	8004b18 <lsm6dso_read_reg>
 8004df6:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	7a3b      	ldrb	r3, [r7, #8]
 8004e02:	f362 1307 	bfi	r3, r2, #4, #4
 8004e06:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004e08:	f107 0208 	add.w	r2, r7, #8
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	2110      	movs	r1, #16
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fe99 	bl	8004b48 <lsm6dso_write_reg>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]

  return ret;
 8004e1e:	693b      	ldr	r3, [r7, #16]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004e32:	f107 0208 	add.w	r2, r7, #8
 8004e36:	2301      	movs	r3, #1
 8004e38:	2110      	movs	r1, #16
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fe6c 	bl	8004b18 <lsm6dso_read_reg>
 8004e40:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004e42:	7a3b      	ldrb	r3, [r7, #8]
 8004e44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b0b      	cmp	r3, #11
 8004e4c:	d84a      	bhi.n	8004ee4 <lsm6dso_xl_data_rate_get+0xbc>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <lsm6dso_xl_data_rate_get+0x2c>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004e95 	.word	0x08004e95
 8004e60:	08004e9d 	.word	0x08004e9d
 8004e64:	08004ea5 	.word	0x08004ea5
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	08004eb5 	.word	0x08004eb5
 8004e70:	08004ebd 	.word	0x08004ebd
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004edd 	.word	0x08004edd
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
      break;
 8004e8a:	e02f      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	701a      	strb	r2, [r3, #0]
      break;
 8004e92:	e02b      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2202      	movs	r2, #2
 8004e98:	701a      	strb	r2, [r3, #0]
      break;
 8004e9a:	e027      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	701a      	strb	r2, [r3, #0]
      break;
 8004ea2:	e023      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	701a      	strb	r2, [r3, #0]
      break;
 8004eaa:	e01f      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2205      	movs	r2, #5
 8004eb0:	701a      	strb	r2, [r3, #0]
      break;
 8004eb2:	e01b      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2206      	movs	r2, #6
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e017      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2207      	movs	r2, #7
 8004ec0:	701a      	strb	r2, [r3, #0]
      break;
 8004ec2:	e013      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e00f      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2209      	movs	r2, #9
 8004ed0:	701a      	strb	r2, [r3, #0]
      break;
 8004ed2:	e00b      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	220a      	movs	r2, #10
 8004ed8:	701a      	strb	r2, [r3, #0]
      break;
 8004eda:	e007      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	220b      	movs	r2, #11
 8004ee0:	701a      	strb	r2, [r3, #0]
      break;
 8004ee2:	e003      	b.n	8004eec <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
      break;
 8004eea:	bf00      	nop
  }

  return ret;
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop

08004ef8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f04:	f107 0208 	add.w	r2, r7, #8
 8004f08:	2301      	movs	r3, #1
 8004f0a:	2111      	movs	r1, #17
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fe03 	bl	8004b18 <lsm6dso_read_reg>
 8004f12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	7a3b      	ldrb	r3, [r7, #8]
 8004f24:	f362 0343 	bfi	r3, r2, #1, #3
 8004f28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f2a:	f107 0208 	add.w	r2, r7, #8
 8004f2e:	2301      	movs	r3, #1
 8004f30:	2111      	movs	r1, #17
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff fe08 	bl	8004b48 <lsm6dso_write_reg>
 8004f38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f4e:	f107 0208 	add.w	r2, r7, #8
 8004f52:	2301      	movs	r3, #1
 8004f54:	2111      	movs	r1, #17
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fdde 	bl	8004b18 <lsm6dso_read_reg>
 8004f5c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004f5e:	7a3b      	ldrb	r3, [r7, #8]
 8004f60:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d824      	bhi.n	8004fb4 <lsm6dso_gy_full_scale_get+0x70>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <lsm6dso_gy_full_scale_get+0x2c>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fb5 	.word	0x08004fb5
 8004f88:	08004fad 	.word	0x08004fad
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
      break;
 8004f92:	e013      	b.n	8004fbc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	e00f      	b.n	8004fbc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	701a      	strb	r2, [r3, #0]
      break;
 8004fa2:	e00b      	b.n	8004fbc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	701a      	strb	r2, [r3, #0]
      break;
 8004faa:	e007      	b.n	8004fbc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2206      	movs	r2, #6
 8004fb0:	701a      	strb	r2, [r3, #0]
      break;
 8004fb2:	e003      	b.n	8004fbc <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
      break;
 8004fba:	bf00      	nop
  }

  return ret;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop

08004fc8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004fd8:	f107 030c 	add.w	r3, r7, #12
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 facc 	bl	800557c <lsm6dso_fsm_enable_get>
 8004fe4:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <lsm6dso_gy_data_rate_set+0x28>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	e0e1      	b.n	80051b4 <lsm6dso_gy_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004ff0:	7b3b      	ldrb	r3, [r7, #12]
 8004ff2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ff6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004ff8:	7b3b      	ldrb	r3, [r7, #12]
 8004ffa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004ffe:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005000:	4313      	orrs	r3, r2
 8005002:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005004:	7b3b      	ldrb	r3, [r7, #12]
 8005006:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800500a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800500c:	4313      	orrs	r3, r2
 800500e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005010:	7b3b      	ldrb	r3, [r7, #12]
 8005012:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005016:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005018:	4313      	orrs	r3, r2
 800501a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800501c:	7b3b      	ldrb	r3, [r7, #12]
 800501e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005022:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005024:	4313      	orrs	r3, r2
 8005026:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005028:	7b3b      	ldrb	r3, [r7, #12]
 800502a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800502e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005030:	4313      	orrs	r3, r2
 8005032:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005034:	7b3b      	ldrb	r3, [r7, #12]
 8005036:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800503a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800503c:	4313      	orrs	r3, r2
 800503e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005040:	7b3b      	ldrb	r3, [r7, #12]
 8005042:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005046:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005048:	4313      	orrs	r3, r2
 800504a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800504c:	7b7b      	ldrb	r3, [r7, #13]
 800504e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005052:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005054:	4313      	orrs	r3, r2
 8005056:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005058:	7b7b      	ldrb	r3, [r7, #13]
 800505a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800505e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005060:	4313      	orrs	r3, r2
 8005062:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005064:	7b7b      	ldrb	r3, [r7, #13]
 8005066:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800506a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800506c:	4313      	orrs	r3, r2
 800506e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005070:	7b7b      	ldrb	r3, [r7, #13]
 8005072:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005076:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005078:	4313      	orrs	r3, r2
 800507a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800507c:	7b7b      	ldrb	r3, [r7, #13]
 800507e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005082:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8005084:	4313      	orrs	r3, r2
 8005086:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8005088:	7b7b      	ldrb	r3, [r7, #13]
 800508a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800508e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8005090:	4313      	orrs	r3, r2
 8005092:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8005094:	7b7b      	ldrb	r3, [r7, #13]
 8005096:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800509a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800509c:	4313      	orrs	r3, r2
 800509e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80050a0:	7b7b      	ldrb	r3, [r7, #13]
 80050a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d164      	bne.n	800517a <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80050b0:	f107 030b 	add.w	r3, r7, #11
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa82 	bl	80055c0 <lsm6dso_fsm_data_rate_get>
 80050bc:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <lsm6dso_gy_data_rate_set+0x100>
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	e075      	b.n	80051b4 <lsm6dso_gy_data_rate_set+0x1ec>

    switch (fsm_odr)
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d852      	bhi.n	8005174 <lsm6dso_gy_data_rate_set+0x1ac>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <lsm6dso_gy_data_rate_set+0x10c>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050f7 	.word	0x080050f7
 80050dc:	08005115 	.word	0x08005115
 80050e0:	0800513f 	.word	0x0800513f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80050ee:	e045      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	75fb      	strb	r3, [r7, #23]
        break;
 80050f4:	e042      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80050fc:	2302      	movs	r3, #2
 80050fe:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005100:	e03c      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d102      	bne.n	800510e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005108:	2302      	movs	r3, #2
 800510a:	75fb      	strb	r3, [r7, #23]
        break;
 800510c:	e036      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	75fb      	strb	r3, [r7, #23]
        break;
 8005112:	e033      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800511a:	2303      	movs	r3, #3
 800511c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800511e:	e02d      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005126:	2303      	movs	r3, #3
 8005128:	75fb      	strb	r3, [r7, #23]
        break;
 800512a:	e027      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d102      	bne.n	8005138 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005132:	2303      	movs	r3, #3
 8005134:	75fb      	strb	r3, [r7, #23]
        break;
 8005136:	e021      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	75fb      	strb	r3, [r7, #23]
        break;
 800513c:	e01e      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005144:	2304      	movs	r3, #4
 8005146:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005148:	e018      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d102      	bne.n	8005156 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005150:	2304      	movs	r3, #4
 8005152:	75fb      	strb	r3, [r7, #23]
        break;
 8005154:	e012      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d102      	bne.n	8005162 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800515c:	2304      	movs	r3, #4
 800515e:	75fb      	strb	r3, [r7, #23]
        break;
 8005160:	e00c      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d102      	bne.n	800516e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005168:	2304      	movs	r3, #4
 800516a:	75fb      	strb	r3, [r7, #23]
        break;
 800516c:	e006      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	75fb      	strb	r3, [r7, #23]
        break;
 8005172:	e003      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>

      default:
        odr_gy = val;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	75fb      	strb	r3, [r7, #23]
        break;
 8005178:	e000      	b.n	800517c <lsm6dso_gy_data_rate_set+0x1b4>
    }
  }
 800517a:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800517c:	f107 0208 	add.w	r2, r7, #8
 8005180:	2301      	movs	r3, #1
 8005182:	2111      	movs	r1, #17
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fcc7 	bl	8004b18 <lsm6dso_read_reg>
 800518a:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	b2da      	uxtb	r2, r3
 8005194:	7a3b      	ldrb	r3, [r7, #8]
 8005196:	f362 1307 	bfi	r3, r2, #4, #4
 800519a:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800519c:	f107 0208 	add.w	r2, r7, #8
 80051a0:	2301      	movs	r3, #1
 80051a2:	2111      	movs	r1, #17
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fccf 	bl	8004b48 <lsm6dso_write_reg>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  return ret;
 80051b2:	693b      	ldr	r3, [r7, #16]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80051c6:	f107 0208 	add.w	r2, r7, #8
 80051ca:	2301      	movs	r3, #1
 80051cc:	2111      	movs	r1, #17
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fca2 	bl	8004b18 <lsm6dso_read_reg>
 80051d4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80051d6:	7a3b      	ldrb	r3, [r7, #8]
 80051d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b0a      	cmp	r3, #10
 80051e0:	d844      	bhi.n	800526c <lsm6dso_gy_data_rate_get+0xb0>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <lsm6dso_gy_data_rate_get+0x2c>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800521d 	.word	0x0800521d
 80051f0:	08005225 	.word	0x08005225
 80051f4:	0800522d 	.word	0x0800522d
 80051f8:	08005235 	.word	0x08005235
 80051fc:	0800523d 	.word	0x0800523d
 8005200:	08005245 	.word	0x08005245
 8005204:	0800524d 	.word	0x0800524d
 8005208:	08005255 	.word	0x08005255
 800520c:	0800525d 	.word	0x0800525d
 8005210:	08005265 	.word	0x08005265
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
      break;
 800521a:	e02b      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
      break;
 8005222:	e027      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2202      	movs	r2, #2
 8005228:	701a      	strb	r2, [r3, #0]
      break;
 800522a:	e023      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2203      	movs	r2, #3
 8005230:	701a      	strb	r2, [r3, #0]
      break;
 8005232:	e01f      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2204      	movs	r2, #4
 8005238:	701a      	strb	r2, [r3, #0]
      break;
 800523a:	e01b      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2205      	movs	r2, #5
 8005240:	701a      	strb	r2, [r3, #0]
      break;
 8005242:	e017      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2206      	movs	r2, #6
 8005248:	701a      	strb	r2, [r3, #0]
      break;
 800524a:	e013      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2207      	movs	r2, #7
 8005250:	701a      	strb	r2, [r3, #0]
      break;
 8005252:	e00f      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2208      	movs	r2, #8
 8005258:	701a      	strb	r2, [r3, #0]
      break;
 800525a:	e00b      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2209      	movs	r2, #9
 8005260:	701a      	strb	r2, [r3, #0]
      break;
 8005262:	e007      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	220a      	movs	r2, #10
 8005268:	701a      	strb	r2, [r3, #0]
      break;
 800526a:	e003      	b.n	8005274 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
      break;
 8005272:	bf00      	nop
  }

  return ret;
 8005274:	68fb      	ldr	r3, [r7, #12]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop

08005280 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800528c:	f107 0208 	add.w	r2, r7, #8
 8005290:	2301      	movs	r3, #1
 8005292:	2112      	movs	r1, #18
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fc3f 	bl	8004b18 <lsm6dso_read_reg>
 800529a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	7a3b      	ldrb	r3, [r7, #8]
 80052ac:	f362 1386 	bfi	r3, r2, #6, #1
 80052b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80052b2:	f107 0208 	add.w	r2, r7, #8
 80052b6:	2301      	movs	r3, #1
 80052b8:	2112      	movs	r1, #18
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fc44 	bl	8004b48 <lsm6dso_write_reg>
 80052c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80052d6:	f107 020c 	add.w	r2, r7, #12
 80052da:	2306      	movs	r3, #6
 80052dc:	2122      	movs	r1, #34	; 0x22
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fc1a 	bl	8004b18 <lsm6dso_read_reg>
 80052e4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80052e6:	7b7b      	ldrb	r3, [r7, #13]
 80052e8:	b21a      	sxth	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	7b3b      	ldrb	r3, [r7, #12]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4413      	add	r3, r2
 8005300:	b29b      	uxth	r3, r3
 8005302:	b21a      	sxth	r2, r3
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	3302      	adds	r3, #2
 800530e:	b212      	sxth	r2, r2
 8005310:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	3302      	adds	r3, #2
 8005316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800531a:	b29b      	uxth	r3, r3
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	b29a      	uxth	r2, r3
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	b29b      	uxth	r3, r3
 8005324:	4413      	add	r3, r2
 8005326:	b29a      	uxth	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	3302      	adds	r3, #2
 800532c:	b212      	sxth	r2, r2
 800532e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005330:	7c7a      	ldrb	r2, [r7, #17]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	b212      	sxth	r2, r2
 8005338:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	3304      	adds	r3, #4
 800533e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005342:	b29b      	uxth	r3, r3
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	b29a      	uxth	r2, r3
 8005348:	7c3b      	ldrb	r3, [r7, #16]
 800534a:	b29b      	uxth	r3, r3
 800534c:	4413      	add	r3, r2
 800534e:	b29a      	uxth	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	3304      	adds	r3, #4
 8005354:	b212      	sxth	r2, r2
 8005356:	801a      	strh	r2, [r3, #0]

  return ret;
 8005358:	697b      	ldr	r3, [r7, #20]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800536c:	f107 020c 	add.w	r2, r7, #12
 8005370:	2306      	movs	r3, #6
 8005372:	2128      	movs	r1, #40	; 0x28
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fbcf 	bl	8004b18 <lsm6dso_read_reg>
 800537a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800537c:	7b7b      	ldrb	r3, [r7, #13]
 800537e:	b21a      	sxth	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800538a:	b29b      	uxth	r3, r3
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	b29a      	uxth	r2, r3
 8005390:	7b3b      	ldrb	r3, [r7, #12]
 8005392:	b29b      	uxth	r3, r3
 8005394:	4413      	add	r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	b21a      	sxth	r2, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800539e:	7bfa      	ldrb	r2, [r7, #15]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	3302      	adds	r3, #2
 80053a4:	b212      	sxth	r2, r2
 80053a6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	3302      	adds	r3, #2
 80053ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	3302      	adds	r3, #2
 80053c2:	b212      	sxth	r2, r2
 80053c4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80053c6:	7c7a      	ldrb	r2, [r7, #17]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	3304      	adds	r3, #4
 80053cc:	b212      	sxth	r2, r2
 80053ce:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	3304      	adds	r3, #4
 80053d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	b29a      	uxth	r2, r3
 80053de:	7c3b      	ldrb	r3, [r7, #16]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	3304      	adds	r3, #4
 80053ea:	b212      	sxth	r2, r2
 80053ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80053ee:	697b      	ldr	r3, [r7, #20]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8005404:	2300      	movs	r3, #0
 8005406:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	b2da      	uxtb	r2, r3
 8005410:	7a3b      	ldrb	r3, [r7, #8]
 8005412:	f362 1387 	bfi	r3, r2, #6, #2
 8005416:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005418:	f107 0208 	add.w	r2, r7, #8
 800541c:	2301      	movs	r3, #1
 800541e:	2101      	movs	r1, #1
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fb91 	bl	8004b48 <lsm6dso_write_reg>
 8005426:	60f8      	str	r0, [r7, #12]

  return ret;
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800543c:	2301      	movs	r3, #1
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	210f      	movs	r1, #15
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff fb68 	bl	8004b18 <lsm6dso_read_reg>
 8005448:	60f8      	str	r0, [r7, #12]

  return ret;
 800544a:	68fb      	ldr	r3, [r7, #12]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005460:	f107 0208 	add.w	r2, r7, #8
 8005464:	2301      	movs	r3, #1
 8005466:	2112      	movs	r1, #18
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff fb55 	bl	8004b18 <lsm6dso_read_reg>
 800546e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10f      	bne.n	8005496 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	7a3b      	ldrb	r3, [r7, #8]
 8005480:	f362 0382 	bfi	r3, r2, #2, #1
 8005484:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005486:	f107 0208 	add.w	r2, r7, #8
 800548a:	2301      	movs	r3, #1
 800548c:	2112      	movs	r1, #18
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fb5a 	bl	8004b48 <lsm6dso_write_reg>
 8005494:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80054ac:	f107 020c 	add.w	r2, r7, #12
 80054b0:	2301      	movs	r3, #1
 80054b2:	2118      	movs	r1, #24
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff fb2f 	bl	8004b18 <lsm6dso_read_reg>
 80054ba:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	09db      	lsrs	r3, r3, #7
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	7b3b      	ldrb	r3, [r7, #12]
 80054ca:	f362 0341 	bfi	r3, r2, #1, #1
 80054ce:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80054d0:	f107 020c 	add.w	r2, r7, #12
 80054d4:	2301      	movs	r3, #1
 80054d6:	2118      	movs	r1, #24
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff fb35 	bl	8004b48 <lsm6dso_write_reg>
 80054de:	4602      	mov	r2, r0
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <lsm6dso_i3c_disable_set+0x50>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	e01b      	b.n	8005528 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80054f0:	f107 0210 	add.w	r2, r7, #16
 80054f4:	2301      	movs	r3, #1
 80054f6:	2162      	movs	r1, #98	; 0x62
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fb0d 	bl	8004b18 <lsm6dso_read_reg>
 80054fe:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	b2da      	uxtb	r2, r3
 8005508:	7c3b      	ldrb	r3, [r7, #16]
 800550a:	f362 03c4 	bfi	r3, r2, #3, #2
 800550e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005510:	f107 0210 	add.w	r2, r7, #16
 8005514:	2301      	movs	r3, #1
 8005516:	2162      	movs	r1, #98	; 0x62
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fb15 	bl	8004b48 <lsm6dso_write_reg>
 800551e:	4602      	mov	r2, r0
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  return ret;
 8005526:	697b      	ldr	r3, [r7, #20]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800553c:	f107 0208 	add.w	r2, r7, #8
 8005540:	2301      	movs	r3, #1
 8005542:	210a      	movs	r1, #10
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fae7 	bl	8004b18 <lsm6dso_read_reg>
 800554a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	b2da      	uxtb	r2, r3
 800555a:	7a3b      	ldrb	r3, [r7, #8]
 800555c:	f362 0302 	bfi	r3, r2, #0, #3
 8005560:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005562:	f107 0208 	add.w	r2, r7, #8
 8005566:	2301      	movs	r3, #1
 8005568:	210a      	movs	r1, #10
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff faec 	bl	8004b48 <lsm6dso_write_reg>
 8005570:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005586:	2102      	movs	r1, #2
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff35 	bl	80053f8 <lsm6dso_mem_bank_set>
 800558e:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005590:	2302      	movs	r3, #2
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	2146      	movs	r1, #70	; 0x46
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fabe 	bl	8004b18 <lsm6dso_read_reg>
 800559c:	4602      	mov	r2, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80055a4:	2100      	movs	r1, #0
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff ff26 	bl	80053f8 <lsm6dso_mem_bank_set>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

  return ret;
 80055b4:	68fb      	ldr	r3, [r7, #12]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80055ca:	2102      	movs	r1, #2
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff13 	bl	80053f8 <lsm6dso_mem_bank_set>
 80055d2:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <lsm6dso_fsm_data_rate_get+0x1e>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	e03a      	b.n	8005654 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 80055de:	f107 0208 	add.w	r2, r7, #8
 80055e2:	2301      	movs	r3, #1
 80055e4:	215f      	movs	r1, #95	; 0x5f
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fa96 	bl	8004b18 <lsm6dso_read_reg>
 80055ec:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d125      	bne.n	8005640 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 80055f4:	7a3b      	ldrb	r3, [r7, #8]
 80055f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d81b      	bhi.n	8005638 <lsm6dso_fsm_data_rate_get+0x78>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <lsm6dso_fsm_data_rate_get+0x48>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	08005619 	.word	0x08005619
 800560c:	08005621 	.word	0x08005621
 8005610:	08005629 	.word	0x08005629
 8005614:	08005631 	.word	0x08005631
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
      break;
 800561e:	e010      	b.n	8005642 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
      break;
 8005626:	e00c      	b.n	8005642 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2202      	movs	r2, #2
 800562c:	701a      	strb	r2, [r3, #0]
      break;
 800562e:	e008      	b.n	8005642 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2203      	movs	r2, #3
 8005634:	701a      	strb	r2, [r3, #0]
      break;
 8005636:	e004      	b.n	8005642 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
      break;
 800563e:	e000      	b.n	8005642 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005640:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005642:	2100      	movs	r1, #0
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fed7 	bl	80053f8 <lsm6dso_mem_bank_set>
 800564a:	4602      	mov	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  return ret;
 8005652:	68fb      	ldr	r3, [r7, #12]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	; 0x38
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800566a:	2301      	movs	r3, #1
 800566c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d06e      	beq.n	8005756 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b02      	cmp	r3, #2
 800567c:	f200 809d 	bhi.w	80057ba <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d032      	beq.n	80056f2 <IKS01A3_MOTION_SENSOR_Init+0x96>
 800568c:	e095      	b.n	80057ba <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800568e:	6838      	ldr	r0, [r7, #0]
 8005690:	f000 f966 	bl	8005960 <LSM6DSO_0_Probe>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295
 800569e:	e0cc      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056a0:	4a68      	ldr	r2, [pc, #416]	; (8005844 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4967      	ldr	r1, [pc, #412]	; (8005848 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056b2:	f107 010c 	add.w	r1, r7, #12
 80056b6:	4610      	mov	r0, r2
 80056b8:	4798      	blx	r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80056c0:	f06f 0306 	mvn.w	r3, #6
 80056c4:	e0b9      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80056c6:	7b3b      	ldrb	r3, [r7, #12]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d103      	bne.n	80056d4 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80056d4:	7b7b      	ldrb	r3, [r7, #13]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d103      	bne.n	80056e2 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d16c      	bne.n	80057c2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	f043 0304 	orr.w	r3, r3, #4
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80056f0:	e067      	b.n	80057c2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80056f2:	6838      	ldr	r0, [r7, #0]
 80056f4:	f000 f9f4 	bl	8005ae0 <LIS2DW12_0_Probe>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	e09a      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005704:	4a4f      	ldr	r2, [pc, #316]	; (8005844 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	494e      	ldr	r1, [pc, #312]	; (8005848 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005716:	f107 010c 	add.w	r1, r7, #12
 800571a:	4610      	mov	r0, r2
 800571c:	4798      	blx	r3
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005724:	f06f 0306 	mvn.w	r3, #6
 8005728:	e087      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800572a:	7b3b      	ldrb	r3, [r7, #12]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d103      	bne.n	8005738 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	f043 0302 	orr.w	r3, r3, #2
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005738:	7b7b      	ldrb	r3, [r7, #13]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d103      	bne.n	8005746 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005746:	7bbb      	ldrb	r3, [r7, #14]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d13c      	bne.n	80057c6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005754:	e037      	b.n	80057c6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005756:	6838      	ldr	r0, [r7, #0]
 8005758:	f000 fa6a 	bl	8005c30 <LIS2MDL_0_Probe>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005762:	f04f 33ff 	mov.w	r3, #4294967295
 8005766:	e068      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005768:	4a36      	ldr	r2, [pc, #216]	; (8005844 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4935      	ldr	r1, [pc, #212]	; (8005848 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800577a:	f107 010c 	add.w	r1, r7, #12
 800577e:	4610      	mov	r0, r2
 8005780:	4798      	blx	r3
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005788:	f06f 0306 	mvn.w	r3, #6
 800578c:	e055      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800578e:	7b3b      	ldrb	r3, [r7, #12]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d103      	bne.n	800579c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	f043 0302 	orr.w	r3, r3, #2
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800579c:	7b7b      	ldrb	r3, [r7, #13]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d103      	bne.n	80057aa <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10c      	bne.n	80057ca <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80057b8:	e007      	b.n	80057ca <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80057ba:	f06f 0301 	mvn.w	r3, #1
 80057be:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80057c0:	e004      	b.n	80057cc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057c2:	bf00      	nop
 80057c4:	e002      	b.n	80057cc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057ca:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	e031      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057da:	e02a      	b.n	8005832 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	4013      	ands	r3, r2
 80057e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d11e      	bne.n	8005826 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80057e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	4013      	ands	r3, r2
 80057ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d118      	bne.n	8005826 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80057f4:	4a15      	ldr	r2, [pc, #84]	; (800584c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057fc:	4814      	ldr	r0, [pc, #80]	; (8005850 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	440b      	add	r3, r1
 8005808:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	490e      	ldr	r1, [pc, #56]	; (8005848 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005816:	4610      	mov	r0, r2
 8005818:	4798      	blx	r3
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005820:	f06f 0304 	mvn.w	r3, #4
 8005824:	e009      	b.n	800583a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	3301      	adds	r3, #1
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	2b02      	cmp	r3, #2
 8005836:	d9d1      	bls.n	80057dc <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800583a:	4618      	mov	r0, r3
 800583c:	3738      	adds	r7, #56	; 0x38
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000194 	.word	0x20000194
 8005848:	2000067c 	.word	0x2000067c
 800584c:	200000c4 	.word	0x200000c4
 8005850:	20000170 	.word	0x20000170

08005854 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d903      	bls.n	800586c <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005864:	f06f 0301 	mvn.w	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e028      	b.n	80058be <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800586c:	4a16      	ldr	r2, [pc, #88]	; (80058c8 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	4013      	ands	r3, r2
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d11c      	bne.n	80058b8 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800587e:	4a13      	ldr	r2, [pc, #76]	; (80058cc <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005886:	4812      	ldr	r0, [pc, #72]	; (80058d0 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	4413      	add	r3, r2
 8005890:	440b      	add	r3, r1
 8005892:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	490e      	ldr	r1, [pc, #56]	; (80058d4 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058aa:	f06f 0304 	mvn.w	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e005      	b.n	80058be <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e002      	b.n	80058be <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80058b8:	f06f 0301 	mvn.w	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80058be:	68fb      	ldr	r3, [r7, #12]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	200001a0 	.word	0x200001a0
 80058cc:	200000c4 	.word	0x200000c4
 80058d0:	20000170 	.word	0x20000170
 80058d4:	2000067c 	.word	0x2000067c

080058d8 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d903      	bls.n	80058f2 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058ea:	f06f 0301 	mvn.w	r3, #1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e029      	b.n	8005946 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80058f2:	4a17      	ldr	r2, [pc, #92]	; (8005950 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	d11d      	bne.n	8005940 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005904:	4a13      	ldr	r2, [pc, #76]	; (8005954 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800590c:	4812      	ldr	r0, [pc, #72]	; (8005958 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	440b      	add	r3, r1
 8005918:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	490f      	ldr	r1, [pc, #60]	; (800595c <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005932:	f06f 0304 	mvn.w	r3, #4
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e005      	b.n	8005946 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e002      	b.n	8005946 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005940:	f06f 0301 	mvn.w	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005946:	697b      	ldr	r3, [r7, #20]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200001a0 	.word	0x200001a0
 8005954:	200000c4 	.word	0x200000c4
 8005958:	20000170 	.word	0x20000170
 800595c:	2000067c 	.word	0x2000067c

08005960 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b094      	sub	sp, #80	; 0x50
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005968:	2300      	movs	r3, #0
 800596a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800596c:	2300      	movs	r3, #0
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8005970:	23d7      	movs	r3, #215	; 0xd7
 8005972:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005976:	4b4b      	ldr	r3, [pc, #300]	; (8005aa4 <LSM6DSO_0_Probe+0x144>)
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800597a:	4b4b      	ldr	r3, [pc, #300]	; (8005aa8 <LSM6DSO_0_Probe+0x148>)
 800597c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800597e:	4b4b      	ldr	r3, [pc, #300]	; (8005aac <LSM6DSO_0_Probe+0x14c>)
 8005980:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005982:	4b4b      	ldr	r3, [pc, #300]	; (8005ab0 <LSM6DSO_0_Probe+0x150>)
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005986:	4b4b      	ldr	r3, [pc, #300]	; (8005ab4 <LSM6DSO_0_Probe+0x154>)
 8005988:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800598a:	4b4b      	ldr	r3, [pc, #300]	; (8005ab8 <LSM6DSO_0_Probe+0x158>)
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800598e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005992:	4619      	mov	r1, r3
 8005994:	4849      	ldr	r0, [pc, #292]	; (8005abc <LSM6DSO_0_Probe+0x15c>)
 8005996:	f7fd fe81 	bl	800369c <LSM6DSO_RegisterBusIO>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059a0:	f06f 0306 	mvn.w	r3, #6
 80059a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a6:	e077      	b.n	8005a98 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80059a8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80059ac:	4619      	mov	r1, r3
 80059ae:	4843      	ldr	r0, [pc, #268]	; (8005abc <LSM6DSO_0_Probe+0x15c>)
 80059b0:	f7fd ff7e 	bl	80038b0 <LSM6DSO_ReadID>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059ba:	f06f 0306 	mvn.w	r3, #6
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	e06a      	b.n	8005a98 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80059c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059c6:	2b6c      	cmp	r3, #108	; 0x6c
 80059c8:	d003      	beq.n	80059d2 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059ca:	f06f 0306 	mvn.w	r3, #6
 80059ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d0:	e062      	b.n	8005a98 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80059d2:	f107 030c 	add.w	r3, r7, #12
 80059d6:	4619      	mov	r1, r3
 80059d8:	4838      	ldr	r0, [pc, #224]	; (8005abc <LSM6DSO_0_Probe+0x15c>)
 80059da:	f7fd ff7f 	bl	80038dc <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80059de:	7b7b      	ldrb	r3, [r7, #13]
 80059e0:	461a      	mov	r2, r3
 80059e2:	7b3b      	ldrb	r3, [r7, #12]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	431a      	orrs	r2, r3
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4313      	orrs	r3, r2
 80059ee:	4a34      	ldr	r2, [pc, #208]	; (8005ac0 <LSM6DSO_0_Probe+0x160>)
 80059f0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80059f2:	4b34      	ldr	r3, [pc, #208]	; (8005ac4 <LSM6DSO_0_Probe+0x164>)
 80059f4:	4a31      	ldr	r2, [pc, #196]	; (8005abc <LSM6DSO_0_Probe+0x15c>)
 80059f6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80059f8:	4b33      	ldr	r3, [pc, #204]	; (8005ac8 <LSM6DSO_0_Probe+0x168>)
 80059fa:	4a34      	ldr	r2, [pc, #208]	; (8005acc <LSM6DSO_0_Probe+0x16c>)
 80059fc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11d      	bne.n	8005a40 <LSM6DSO_0_Probe+0xe0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <LSM6DSO_0_Probe+0xe0>
 8005a0e:	7b7b      	ldrb	r3, [r7, #13]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d115      	bne.n	8005a40 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8005a14:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <LSM6DSO_0_Probe+0x170>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a2e      	ldr	r2, [pc, #184]	; (8005ad4 <LSM6DSO_0_Probe+0x174>)
 8005a1a:	492f      	ldr	r1, [pc, #188]	; (8005ad8 <LSM6DSO_0_Probe+0x178>)
 8005a1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005a20:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <LSM6DSO_0_Probe+0x168>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a27      	ldr	r2, [pc, #156]	; (8005ac4 <LSM6DSO_0_Probe+0x164>)
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4798      	blx	r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a34:	f06f 0304 	mvn.w	r3, #4
 8005a38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a3a:	e001      	b.n	8005a40 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d11d      	bne.n	8005a82 <LSM6DSO_0_Probe+0x122>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d018      	beq.n	8005a82 <LSM6DSO_0_Probe+0x122>
 8005a50:	7b3b      	ldrb	r3, [r7, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d115      	bne.n	8005a82 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <LSM6DSO_0_Probe+0x170>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <LSM6DSO_0_Probe+0x174>)
 8005a5c:	491f      	ldr	r1, [pc, #124]	; (8005adc <LSM6DSO_0_Probe+0x17c>)
 8005a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005a62:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <LSM6DSO_0_Probe+0x168>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <LSM6DSO_0_Probe+0x164>)
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a76:	f06f 0304 	mvn.w	r3, #4
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a7c:	e001      	b.n	8005a82 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <LSM6DSO_0_Probe+0x138>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a92:	f06f 0304 	mvn.w	r3, #4
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3750      	adds	r7, #80	; 0x50
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	08000c45 	.word	0x08000c45
 8005aa8:	08000ca9 	.word	0x08000ca9
 8005aac:	08000d5d 	.word	0x08000d5d
 8005ab0:	08000cf9 	.word	0x08000cf9
 8005ab4:	08000dc1 	.word	0x08000dc1
 8005ab8:	08005e65 	.word	0x08005e65
 8005abc:	200001ac 	.word	0x200001ac
 8005ac0:	200001a0 	.word	0x200001a0
 8005ac4:	2000067c 	.word	0x2000067c
 8005ac8:	20000194 	.word	0x20000194
 8005acc:	2000006c 	.word	0x2000006c
 8005ad0:	200000c4 	.word	0x200000c4
 8005ad4:	20000170 	.word	0x20000170
 8005ad8:	200000a0 	.word	0x200000a0
 8005adc:	2000007c 	.word	0x2000007c

08005ae0 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b094      	sub	sp, #80	; 0x50
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8005aec:	2300      	movs	r3, #0
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005af0:	2333      	movs	r3, #51	; 0x33
 8005af2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005af6:	4b40      	ldr	r3, [pc, #256]	; (8005bf8 <LIS2DW12_0_Probe+0x118>)
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005afa:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <LIS2DW12_0_Probe+0x11c>)
 8005afc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005afe:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <LIS2DW12_0_Probe+0x120>)
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005b02:	4b40      	ldr	r3, [pc, #256]	; (8005c04 <LIS2DW12_0_Probe+0x124>)
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005b06:	4b40      	ldr	r3, [pc, #256]	; (8005c08 <LIS2DW12_0_Probe+0x128>)
 8005b08:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005b0a:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <LIS2DW12_0_Probe+0x12c>)
 8005b0c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8005b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b12:	4619      	mov	r1, r3
 8005b14:	483e      	ldr	r0, [pc, #248]	; (8005c10 <LIS2DW12_0_Probe+0x130>)
 8005b16:	f7fb fa67 	bl	8000fe8 <LIS2DW12_RegisterBusIO>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b20:	f06f 0306 	mvn.w	r3, #6
 8005b24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b26:	e062      	b.n	8005bee <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005b28:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4838      	ldr	r0, [pc, #224]	; (8005c10 <LIS2DW12_0_Probe+0x130>)
 8005b30:	f7fb fb48 	bl	80011c4 <LIS2DW12_ReadID>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b3a:	f06f 0306 	mvn.w	r3, #6
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b40:	e055      	b.n	8005bee <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8005b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b46:	2b44      	cmp	r3, #68	; 0x44
 8005b48:	d003      	beq.n	8005b52 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b4a:	f06f 0306 	mvn.w	r3, #6
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	e04d      	b.n	8005bee <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005b52:	f107 030c 	add.w	r3, r7, #12
 8005b56:	4619      	mov	r1, r3
 8005b58:	482d      	ldr	r0, [pc, #180]	; (8005c10 <LIS2DW12_0_Probe+0x130>)
 8005b5a:	f7fb fb49 	bl	80011f0 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b5e:	7b7b      	ldrb	r3, [r7, #13]
 8005b60:	461a      	mov	r2, r3
 8005b62:	7b3b      	ldrb	r3, [r7, #12]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	431a      	orrs	r2, r3
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <LIS2DW12_0_Probe+0x134>)
 8005b70:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8005b72:	4b29      	ldr	r3, [pc, #164]	; (8005c18 <LIS2DW12_0_Probe+0x138>)
 8005b74:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <LIS2DW12_0_Probe+0x130>)
 8005b76:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005b78:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <LIS2DW12_0_Probe+0x13c>)
 8005b7a:	4a29      	ldr	r2, [pc, #164]	; (8005c20 <LIS2DW12_0_Probe+0x140>)
 8005b7c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d11e      	bne.n	8005bc2 <LIS2DW12_0_Probe+0xe2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d019      	beq.n	8005bc2 <LIS2DW12_0_Probe+0xe2>
 8005b8e:	7b3b      	ldrb	r3, [r7, #12]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d116      	bne.n	8005bc2 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005b94:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <LIS2DW12_0_Probe+0x144>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	4a23      	ldr	r2, [pc, #140]	; (8005c28 <LIS2DW12_0_Probe+0x148>)
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	4923      	ldr	r1, [pc, #140]	; (8005c2c <LIS2DW12_0_Probe+0x14c>)
 8005b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	; (8005c1c <LIS2DW12_0_Probe+0x13c>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <LIS2DW12_0_Probe+0x138>)
 8005baa:	6852      	ldr	r2, [r2, #4]
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bb6:	f06f 0304 	mvn.w	r3, #4
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bbc:	e001      	b.n	8005bc2 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <LIS2DW12_0_Probe+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bd2:	f06f 0304 	mvn.w	r3, #4
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d107      	bne.n	8005bee <LIS2DW12_0_Probe+0x10e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005be8:	f06f 0304 	mvn.w	r3, #4
 8005bec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3750      	adds	r7, #80	; 0x50
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	08000c45 	.word	0x08000c45
 8005bfc:	08000ca9 	.word	0x08000ca9
 8005c00:	08000d5d 	.word	0x08000d5d
 8005c04:	08000cf9 	.word	0x08000cf9
 8005c08:	08000dc1 	.word	0x08000dc1
 8005c0c:	08005e65 	.word	0x08005e65
 8005c10:	200001e4 	.word	0x200001e4
 8005c14:	200001a0 	.word	0x200001a0
 8005c18:	2000067c 	.word	0x2000067c
 8005c1c:	20000194 	.word	0x20000194
 8005c20:	20000004 	.word	0x20000004
 8005c24:	200000c4 	.word	0x200000c4
 8005c28:	20000170 	.word	0x20000170
 8005c2c:	20000014 	.word	0x20000014

08005c30 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b094      	sub	sp, #80	; 0x50
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005c40:	233d      	movs	r3, #61	; 0x3d
 8005c42:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005c46:	4b40      	ldr	r3, [pc, #256]	; (8005d48 <LIS2MDL_0_Probe+0x118>)
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005c4a:	4b40      	ldr	r3, [pc, #256]	; (8005d4c <LIS2MDL_0_Probe+0x11c>)
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005c4e:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <LIS2MDL_0_Probe+0x120>)
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005c52:	4b40      	ldr	r3, [pc, #256]	; (8005d54 <LIS2MDL_0_Probe+0x124>)
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005c56:	4b40      	ldr	r3, [pc, #256]	; (8005d58 <LIS2MDL_0_Probe+0x128>)
 8005c58:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005c5a:	4b40      	ldr	r3, [pc, #256]	; (8005d5c <LIS2MDL_0_Probe+0x12c>)
 8005c5c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8005c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c62:	4619      	mov	r1, r3
 8005c64:	483e      	ldr	r0, [pc, #248]	; (8005d60 <LIS2MDL_0_Probe+0x130>)
 8005c66:	f7fc fd13 	bl	8002690 <LIS2MDL_RegisterBusIO>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c70:	f06f 0306 	mvn.w	r3, #6
 8005c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c76:	e062      	b.n	8005d3e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005c78:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4838      	ldr	r0, [pc, #224]	; (8005d60 <LIS2MDL_0_Probe+0x130>)
 8005c80:	f7fc fe22 	bl	80028c8 <LIS2MDL_ReadID>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c8a:	f06f 0306 	mvn.w	r3, #6
 8005c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c90:	e055      	b.n	8005d3e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8005c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d003      	beq.n	8005ca2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c9a:	f06f 0306 	mvn.w	r3, #6
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	e04d      	b.n	8005d3e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8005ca2:	f107 030c 	add.w	r3, r7, #12
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	482d      	ldr	r0, [pc, #180]	; (8005d60 <LIS2MDL_0_Probe+0x130>)
 8005caa:	f7fc fe33 	bl	8002914 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005cae:	7b7b      	ldrb	r3, [r7, #13]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	7b3b      	ldrb	r3, [r7, #12]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <LIS2MDL_0_Probe+0x134>)
 8005cc0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <LIS2MDL_0_Probe+0x138>)
 8005cc4:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <LIS2MDL_0_Probe+0x130>)
 8005cc6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <LIS2MDL_0_Probe+0x13c>)
 8005cca:	4a29      	ldr	r2, [pc, #164]	; (8005d70 <LIS2MDL_0_Probe+0x140>)
 8005ccc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d11e      	bne.n	8005d12 <LIS2MDL_0_Probe+0xe2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d019      	beq.n	8005d12 <LIS2MDL_0_Probe+0xe2>
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d116      	bne.n	8005d12 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <LIS2MDL_0_Probe+0x144>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <LIS2MDL_0_Probe+0x148>)
 8005cea:	3306      	adds	r3, #6
 8005cec:	4923      	ldr	r1, [pc, #140]	; (8005d7c <LIS2MDL_0_Probe+0x14c>)
 8005cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <LIS2MDL_0_Probe+0x13c>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1b      	ldr	r2, [pc, #108]	; (8005d68 <LIS2MDL_0_Probe+0x138>)
 8005cfa:	6892      	ldr	r2, [r2, #8]
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d06:	f06f 0304 	mvn.w	r3, #4
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0c:	e001      	b.n	8005d12 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d107      	bne.n	8005d28 <LIS2MDL_0_Probe+0xf8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d22:	f06f 0304 	mvn.w	r3, #4
 8005d26:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <LIS2MDL_0_Probe+0x10e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d38:	f06f 0304 	mvn.w	r3, #4
 8005d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3750      	adds	r7, #80	; 0x50
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	08000c45 	.word	0x08000c45
 8005d4c:	08000ca9 	.word	0x08000ca9
 8005d50:	08000d5d 	.word	0x08000d5d
 8005d54:	08000cf9 	.word	0x08000cf9
 8005d58:	08000dc1 	.word	0x08000dc1
 8005d5c:	08005e65 	.word	0x08005e65
 8005d60:	20000220 	.word	0x20000220
 8005d64:	200001a0 	.word	0x200001a0
 8005d68:	2000067c 	.word	0x2000067c
 8005d6c:	20000194 	.word	0x20000194
 8005d70:	20000038 	.word	0x20000038
 8005d74:	200000c4 	.word	0x200000c4
 8005d78:	20000170 	.word	0x20000170
 8005d7c:	20000048 	.word	0x20000048

08005d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d84:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <HAL_Init+0x40>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a0d      	ldr	r2, [pc, #52]	; (8005dc0 <HAL_Init+0x40>)
 8005d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_Init+0x40>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a0a      	ldr	r2, [pc, #40]	; (8005dc0 <HAL_Init+0x40>)
 8005d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <HAL_Init+0x40>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a07      	ldr	r2, [pc, #28]	; (8005dc0 <HAL_Init+0x40>)
 8005da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005da8:	2003      	movs	r0, #3
 8005daa:	f000 f94f 	bl	800604c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dae:	2000      	movs	r0, #0
 8005db0:	f000 f808 	bl	8005dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005db4:	f7fa fe68 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023c00 	.word	0x40023c00

08005dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_InitTick+0x54>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <HAL_InitTick+0x58>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f967 	bl	80060b6 <HAL_SYSTICK_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e00e      	b.n	8005e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b0f      	cmp	r3, #15
 8005df6:	d80a      	bhi.n	8005e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005df8:	2200      	movs	r2, #0
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	f000 f92f 	bl	8006062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e04:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <HAL_InitTick+0x5c>)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e000      	b.n	8005e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000000 	.word	0x20000000
 8005e1c:	200000dc 	.word	0x200000dc
 8005e20:	200000d8 	.word	0x200000d8

08005e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_IncTick+0x20>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <HAL_IncTick+0x24>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4413      	add	r3, r2
 8005e34:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <HAL_IncTick+0x24>)
 8005e36:	6013      	str	r3, [r2, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200000dc 	.word	0x200000dc
 8005e48:	20000688 	.word	0x20000688

08005e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e50:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <HAL_GetTick+0x14>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20000688 	.word	0x20000688

08005e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e6c:	f7ff ffee 	bl	8005e4c <HAL_GetTick>
 8005e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d005      	beq.n	8005e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <HAL_Delay+0x44>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e8a:	bf00      	nop
 8005e8c:	f7ff ffde 	bl	8005e4c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d8f7      	bhi.n	8005e8c <HAL_Delay+0x28>
  {
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	200000dc 	.word	0x200000dc

08005eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ede:	4a04      	ldr	r2, [pc, #16]	; (8005ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	60d3      	str	r3, [r2, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	e000ed00 	.word	0xe000ed00

08005ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <__NVIC_GetPriorityGrouping+0x18>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	f003 0307 	and.w	r3, r3, #7
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	e000ed00 	.word	0xe000ed00

08005f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	db0b      	blt.n	8005f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	f003 021f 	and.w	r2, r3, #31
 8005f28:	4907      	ldr	r1, [pc, #28]	; (8005f48 <__NVIC_EnableIRQ+0x38>)
 8005f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	2001      	movs	r0, #1
 8005f32:	fa00 f202 	lsl.w	r2, r0, r2
 8005f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	e000e100 	.word	0xe000e100

08005f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	6039      	str	r1, [r7, #0]
 8005f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	db0a      	blt.n	8005f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	490c      	ldr	r1, [pc, #48]	; (8005f98 <__NVIC_SetPriority+0x4c>)
 8005f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6a:	0112      	lsls	r2, r2, #4
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	440b      	add	r3, r1
 8005f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f74:	e00a      	b.n	8005f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	4908      	ldr	r1, [pc, #32]	; (8005f9c <__NVIC_SetPriority+0x50>)
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	3b04      	subs	r3, #4
 8005f84:	0112      	lsls	r2, r2, #4
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	440b      	add	r3, r1
 8005f8a:	761a      	strb	r2, [r3, #24]
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	e000e100 	.word	0xe000e100
 8005f9c:	e000ed00 	.word	0xe000ed00

08005fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b089      	sub	sp, #36	; 0x24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f1c3 0307 	rsb	r3, r3, #7
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	bf28      	it	cs
 8005fbe:	2304      	movcs	r3, #4
 8005fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d902      	bls.n	8005fd0 <NVIC_EncodePriority+0x30>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3b03      	subs	r3, #3
 8005fce:	e000      	b.n	8005fd2 <NVIC_EncodePriority+0x32>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43da      	mvns	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	43d9      	mvns	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff8:	4313      	orrs	r3, r2
         );
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3b01      	subs	r3, #1
 8006014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006018:	d301      	bcc.n	800601e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800601a:	2301      	movs	r3, #1
 800601c:	e00f      	b.n	800603e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800601e:	4a0a      	ldr	r2, [pc, #40]	; (8006048 <SysTick_Config+0x40>)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3b01      	subs	r3, #1
 8006024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006026:	210f      	movs	r1, #15
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	f7ff ff8e 	bl	8005f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <SysTick_Config+0x40>)
 8006032:	2200      	movs	r2, #0
 8006034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006036:	4b04      	ldr	r3, [pc, #16]	; (8006048 <SysTick_Config+0x40>)
 8006038:	2207      	movs	r2, #7
 800603a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	e000e010 	.word	0xe000e010

0800604c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff29 	bl	8005eac <__NVIC_SetPriorityGrouping>
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006062:	b580      	push	{r7, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	af00      	add	r7, sp, #0
 8006068:	4603      	mov	r3, r0
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
 800606e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006074:	f7ff ff3e 	bl	8005ef4 <__NVIC_GetPriorityGrouping>
 8006078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	6978      	ldr	r0, [r7, #20]
 8006080:	f7ff ff8e 	bl	8005fa0 <NVIC_EncodePriority>
 8006084:	4602      	mov	r2, r0
 8006086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff ff5d 	bl	8005f4c <__NVIC_SetPriority>
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	4603      	mov	r3, r0
 80060a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff ff31 	bl	8005f10 <__NVIC_EnableIRQ>
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ffa2 	bl	8006008 <SysTick_Config>
 80060c4:	4603      	mov	r3, r0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060dc:	f7ff feb6 	bl	8005e4c <HAL_GetTick>
 80060e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d008      	beq.n	8006100 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e052      	b.n	80061a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0216 	bic.w	r2, r2, #22
 800610e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800611e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <HAL_DMA_Abort+0x62>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0208 	bic.w	r2, r2, #8
 800613e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006150:	e013      	b.n	800617a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006152:	f7ff fe7b 	bl	8005e4c <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b05      	cmp	r3, #5
 800615e:	d90c      	bls.n	800617a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2203      	movs	r2, #3
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e015      	b.n	80061a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e4      	bne.n	8006152 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618c:	223f      	movs	r2, #63	; 0x3f
 800618e:	409a      	lsls	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d004      	beq.n	80061cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2280      	movs	r2, #128	; 0x80
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e00c      	b.n	80061e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2205      	movs	r2, #5
 80061d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b089      	sub	sp, #36	; 0x24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	e159      	b.n	80064c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006210:	2201      	movs	r2, #1
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4013      	ands	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	429a      	cmp	r2, r3
 800622a:	f040 8148 	bne.w	80064be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b01      	cmp	r3, #1
 8006238:	d005      	beq.n	8006246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006242:	2b02      	cmp	r3, #2
 8006244:	d130      	bne.n	80062a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	2203      	movs	r2, #3
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4313      	orrs	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800627c:	2201      	movs	r2, #1
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	43db      	mvns	r3, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4013      	ands	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	f003 0201 	and.w	r2, r3, #1
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4313      	orrs	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d017      	beq.n	80062e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	2203      	movs	r2, #3
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	43db      	mvns	r3, r3
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4013      	ands	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d123      	bne.n	8006338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	08da      	lsrs	r2, r3, #3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3208      	adds	r2, #8
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	220f      	movs	r2, #15
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	43db      	mvns	r3, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	08da      	lsrs	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3208      	adds	r2, #8
 8006332:	69b9      	ldr	r1, [r7, #24]
 8006334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	2203      	movs	r2, #3
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4013      	ands	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0203 	and.w	r2, r3, #3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4313      	orrs	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80a2 	beq.w	80064be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	4b57      	ldr	r3, [pc, #348]	; (80064dc <HAL_GPIO_Init+0x2e8>)
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	4a56      	ldr	r2, [pc, #344]	; (80064dc <HAL_GPIO_Init+0x2e8>)
 8006384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006388:	6453      	str	r3, [r2, #68]	; 0x44
 800638a:	4b54      	ldr	r3, [pc, #336]	; (80064dc <HAL_GPIO_Init+0x2e8>)
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006396:	4a52      	ldr	r2, [pc, #328]	; (80064e0 <HAL_GPIO_Init+0x2ec>)
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	3302      	adds	r3, #2
 800639e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	220f      	movs	r2, #15
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	43db      	mvns	r3, r3
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	4013      	ands	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a49      	ldr	r2, [pc, #292]	; (80064e4 <HAL_GPIO_Init+0x2f0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d019      	beq.n	80063f6 <HAL_GPIO_Init+0x202>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a48      	ldr	r2, [pc, #288]	; (80064e8 <HAL_GPIO_Init+0x2f4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_GPIO_Init+0x1fe>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a47      	ldr	r2, [pc, #284]	; (80064ec <HAL_GPIO_Init+0x2f8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00d      	beq.n	80063ee <HAL_GPIO_Init+0x1fa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a46      	ldr	r2, [pc, #280]	; (80064f0 <HAL_GPIO_Init+0x2fc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <HAL_GPIO_Init+0x1f6>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a45      	ldr	r2, [pc, #276]	; (80064f4 <HAL_GPIO_Init+0x300>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d101      	bne.n	80063e6 <HAL_GPIO_Init+0x1f2>
 80063e2:	2304      	movs	r3, #4
 80063e4:	e008      	b.n	80063f8 <HAL_GPIO_Init+0x204>
 80063e6:	2307      	movs	r3, #7
 80063e8:	e006      	b.n	80063f8 <HAL_GPIO_Init+0x204>
 80063ea:	2303      	movs	r3, #3
 80063ec:	e004      	b.n	80063f8 <HAL_GPIO_Init+0x204>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e002      	b.n	80063f8 <HAL_GPIO_Init+0x204>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <HAL_GPIO_Init+0x204>
 80063f6:	2300      	movs	r3, #0
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	f002 0203 	and.w	r2, r2, #3
 80063fe:	0092      	lsls	r2, r2, #2
 8006400:	4093      	lsls	r3, r2
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	4313      	orrs	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006408:	4935      	ldr	r1, [pc, #212]	; (80064e0 <HAL_GPIO_Init+0x2ec>)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	089b      	lsrs	r3, r3, #2
 800640e:	3302      	adds	r3, #2
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006416:	4b38      	ldr	r3, [pc, #224]	; (80064f8 <HAL_GPIO_Init+0x304>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	43db      	mvns	r3, r3
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	4013      	ands	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800643a:	4a2f      	ldr	r2, [pc, #188]	; (80064f8 <HAL_GPIO_Init+0x304>)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006440:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <HAL_GPIO_Init+0x304>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	43db      	mvns	r3, r3
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	4013      	ands	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006464:	4a24      	ldr	r2, [pc, #144]	; (80064f8 <HAL_GPIO_Init+0x304>)
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800646a:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <HAL_GPIO_Init+0x304>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	43db      	mvns	r3, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	4013      	ands	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800648e:	4a1a      	ldr	r2, [pc, #104]	; (80064f8 <HAL_GPIO_Init+0x304>)
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006494:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <HAL_GPIO_Init+0x304>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	43db      	mvns	r3, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064b8:	4a0f      	ldr	r2, [pc, #60]	; (80064f8 <HAL_GPIO_Init+0x304>)
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	3301      	adds	r3, #1
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	f67f aea2 	bls.w	8006210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	3724      	adds	r7, #36	; 0x24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40023800 	.word	0x40023800
 80064e0:	40013800 	.word	0x40013800
 80064e4:	40020000 	.word	0x40020000
 80064e8:	40020400 	.word	0x40020400
 80064ec:	40020800 	.word	0x40020800
 80064f0:	40020c00 	.word	0x40020c00
 80064f4:	40021000 	.word	0x40021000
 80064f8:	40013c00 	.word	0x40013c00

080064fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e0bb      	b.n	8006690 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006518:	2201      	movs	r2, #1
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4013      	ands	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	429a      	cmp	r2, r3
 8006530:	f040 80ab 	bne.w	800668a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006534:	4a5c      	ldr	r2, [pc, #368]	; (80066a8 <HAL_GPIO_DeInit+0x1ac>)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	089b      	lsrs	r3, r3, #2
 800653a:	3302      	adds	r3, #2
 800653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006540:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	220f      	movs	r2, #15
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4013      	ands	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a54      	ldr	r2, [pc, #336]	; (80066ac <HAL_GPIO_DeInit+0x1b0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d019      	beq.n	8006592 <HAL_GPIO_DeInit+0x96>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a53      	ldr	r2, [pc, #332]	; (80066b0 <HAL_GPIO_DeInit+0x1b4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <HAL_GPIO_DeInit+0x92>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a52      	ldr	r2, [pc, #328]	; (80066b4 <HAL_GPIO_DeInit+0x1b8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00d      	beq.n	800658a <HAL_GPIO_DeInit+0x8e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a51      	ldr	r2, [pc, #324]	; (80066b8 <HAL_GPIO_DeInit+0x1bc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <HAL_GPIO_DeInit+0x8a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a50      	ldr	r2, [pc, #320]	; (80066bc <HAL_GPIO_DeInit+0x1c0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d101      	bne.n	8006582 <HAL_GPIO_DeInit+0x86>
 800657e:	2304      	movs	r3, #4
 8006580:	e008      	b.n	8006594 <HAL_GPIO_DeInit+0x98>
 8006582:	2307      	movs	r3, #7
 8006584:	e006      	b.n	8006594 <HAL_GPIO_DeInit+0x98>
 8006586:	2303      	movs	r3, #3
 8006588:	e004      	b.n	8006594 <HAL_GPIO_DeInit+0x98>
 800658a:	2302      	movs	r3, #2
 800658c:	e002      	b.n	8006594 <HAL_GPIO_DeInit+0x98>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <HAL_GPIO_DeInit+0x98>
 8006592:	2300      	movs	r3, #0
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	f002 0203 	and.w	r2, r2, #3
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	4093      	lsls	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d132      	bne.n	800660a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065a4:	4b46      	ldr	r3, [pc, #280]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	43db      	mvns	r3, r3
 80065ac:	4944      	ldr	r1, [pc, #272]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065b2:	4b43      	ldr	r3, [pc, #268]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	43db      	mvns	r3, r3
 80065ba:	4941      	ldr	r1, [pc, #260]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065bc:	4013      	ands	r3, r2
 80065be:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065c0:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	43db      	mvns	r3, r3
 80065c8:	493d      	ldr	r1, [pc, #244]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065ce:	4b3c      	ldr	r3, [pc, #240]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	43db      	mvns	r3, r3
 80065d6:	493a      	ldr	r1, [pc, #232]	; (80066c0 <HAL_GPIO_DeInit+0x1c4>)
 80065d8:	4013      	ands	r3, r2
 80065da:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	220f      	movs	r2, #15
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80065ec:	4a2e      	ldr	r2, [pc, #184]	; (80066a8 <HAL_GPIO_DeInit+0x1ac>)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	089b      	lsrs	r3, r3, #2
 80065f2:	3302      	adds	r3, #2
 80065f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	43da      	mvns	r2, r3
 80065fc:	482a      	ldr	r0, [pc, #168]	; (80066a8 <HAL_GPIO_DeInit+0x1ac>)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	089b      	lsrs	r3, r3, #2
 8006602:	400a      	ands	r2, r1
 8006604:	3302      	adds	r3, #2
 8006606:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	2103      	movs	r1, #3
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	401a      	ands	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	08da      	lsrs	r2, r3, #3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3208      	adds	r2, #8
 8006628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	220f      	movs	r2, #15
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	08d2      	lsrs	r2, r2, #3
 8006640:	4019      	ands	r1, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3208      	adds	r2, #8
 8006646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	2103      	movs	r1, #3
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	401a      	ands	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	2101      	movs	r1, #1
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	401a      	ands	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	2103      	movs	r1, #3
 800667e:	fa01 f303 	lsl.w	r3, r1, r3
 8006682:	43db      	mvns	r3, r3
 8006684:	401a      	ands	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	3301      	adds	r3, #1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	f67f af40 	bls.w	8006518 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40013800 	.word	0x40013800
 80066ac:	40020000 	.word	0x40020000
 80066b0:	40020400 	.word	0x40020400
 80066b4:	40020800 	.word	0x40020800
 80066b8:	40020c00 	.word	0x40020c00
 80066bc:	40021000 	.word	0x40021000
 80066c0:	40013c00 	.word	0x40013c00

080066c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	807b      	strh	r3, [r7, #2]
 80066d0:	4613      	mov	r3, r2
 80066d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066d4:	787b      	ldrb	r3, [r7, #1]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066da:	887a      	ldrh	r2, [r7, #2]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066e0:	e003      	b.n	80066ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066e2:	887b      	ldrh	r3, [r7, #2]
 80066e4:	041a      	lsls	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	619a      	str	r2, [r3, #24]
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006708:	887a      	ldrh	r2, [r7, #2]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4013      	ands	r3, r2
 800670e:	041a      	lsls	r2, r3, #16
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	43d9      	mvns	r1, r3
 8006714:	887b      	ldrh	r3, [r7, #2]
 8006716:	400b      	ands	r3, r1
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	619a      	str	r2, [r3, #24]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e12b      	b.n	8006996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f95d 	bl	8006a12 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2224      	movs	r2, #36	; 0x24
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0201 	bic.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800677e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800678e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006790:	f001 fc36 	bl	8008000 <HAL_RCC_GetPCLK1Freq>
 8006794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4a81      	ldr	r2, [pc, #516]	; (80069a0 <HAL_I2C_Init+0x274>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d807      	bhi.n	80067b0 <HAL_I2C_Init+0x84>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a80      	ldr	r2, [pc, #512]	; (80069a4 <HAL_I2C_Init+0x278>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	bf94      	ite	ls
 80067a8:	2301      	movls	r3, #1
 80067aa:	2300      	movhi	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	e006      	b.n	80067be <HAL_I2C_Init+0x92>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a7d      	ldr	r2, [pc, #500]	; (80069a8 <HAL_I2C_Init+0x27c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	bf94      	ite	ls
 80067b8:	2301      	movls	r3, #1
 80067ba:	2300      	movhi	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e0e7      	b.n	8006996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a78      	ldr	r2, [pc, #480]	; (80069ac <HAL_I2C_Init+0x280>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	0c9b      	lsrs	r3, r3, #18
 80067d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	4a6a      	ldr	r2, [pc, #424]	; (80069a0 <HAL_I2C_Init+0x274>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d802      	bhi.n	8006800 <HAL_I2C_Init+0xd4>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	3301      	adds	r3, #1
 80067fe:	e009      	b.n	8006814 <HAL_I2C_Init+0xe8>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	4a69      	ldr	r2, [pc, #420]	; (80069b0 <HAL_I2C_Init+0x284>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	099b      	lsrs	r3, r3, #6
 8006812:	3301      	adds	r3, #1
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	430b      	orrs	r3, r1
 800681a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	495c      	ldr	r1, [pc, #368]	; (80069a0 <HAL_I2C_Init+0x274>)
 8006830:	428b      	cmp	r3, r1
 8006832:	d819      	bhi.n	8006868 <HAL_I2C_Init+0x13c>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	1e59      	subs	r1, r3, #1
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006842:	1c59      	adds	r1, r3, #1
 8006844:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006848:	400b      	ands	r3, r1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <HAL_I2C_Init+0x138>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1e59      	subs	r1, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	fbb1 f3f3 	udiv	r3, r1, r3
 800685c:	3301      	adds	r3, #1
 800685e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006862:	e051      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 8006864:	2304      	movs	r3, #4
 8006866:	e04f      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d111      	bne.n	8006894 <HAL_I2C_Init+0x168>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1e58      	subs	r0, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6859      	ldr	r1, [r3, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	440b      	add	r3, r1
 800687e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006882:	3301      	adds	r3, #1
 8006884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	e012      	b.n	80068ba <HAL_I2C_Init+0x18e>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1e58      	subs	r0, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	0099      	lsls	r1, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068aa:	3301      	adds	r3, #1
 80068ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_I2C_Init+0x196>
 80068be:	2301      	movs	r3, #1
 80068c0:	e022      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10e      	bne.n	80068e8 <HAL_I2C_Init+0x1bc>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1e58      	subs	r0, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6859      	ldr	r1, [r3, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	440b      	add	r3, r1
 80068d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80068dc:	3301      	adds	r3, #1
 80068de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e6:	e00f      	b.n	8006908 <HAL_I2C_Init+0x1dc>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1e58      	subs	r0, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	0099      	lsls	r1, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80068fe:	3301      	adds	r3, #1
 8006900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	6809      	ldr	r1, [r1, #0]
 800690c:	4313      	orrs	r3, r2
 800690e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69da      	ldr	r2, [r3, #28]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6911      	ldr	r1, [r2, #16]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68d2      	ldr	r2, [r2, #12]
 8006942:	4311      	orrs	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	430b      	orrs	r3, r1
 800694a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	000186a0 	.word	0x000186a0
 80069a4:	001e847f 	.word	0x001e847f
 80069a8:	003d08ff 	.word	0x003d08ff
 80069ac:	431bde83 	.word	0x431bde83
 80069b0:	10624dd3 	.word	0x10624dd3

080069b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e021      	b.n	8006a0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2224      	movs	r2, #36	; 0x24
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f821 	bl	8006a26 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	817b      	strh	r3, [r7, #10]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	813b      	strh	r3, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a56:	f7ff f9f9 	bl	8005e4c <HAL_GetTick>
 8006a5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	f040 80d9 	bne.w	8006c1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	2319      	movs	r3, #25
 8006a70:	2201      	movs	r2, #1
 8006a72:	496d      	ldr	r1, [pc, #436]	; (8006c28 <HAL_I2C_Mem_Write+0x1ec>)
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fc99 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
 8006a82:	e0cc      	b.n	8006c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_I2C_Mem_Write+0x56>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e0c5      	b.n	8006c1e <HAL_I2C_Mem_Write+0x1e2>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d007      	beq.n	8006ab8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0201 	orr.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ac6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2221      	movs	r2, #33	; 0x21
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2240      	movs	r2, #64	; 0x40
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a4d      	ldr	r2, [pc, #308]	; (8006c2c <HAL_I2C_Mem_Write+0x1f0>)
 8006af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006afa:	88f8      	ldrh	r0, [r7, #6]
 8006afc:	893a      	ldrh	r2, [r7, #8]
 8006afe:	8979      	ldrh	r1, [r7, #10]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4603      	mov	r3, r0
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fad0 	bl	80070b0 <I2C_RequestMemoryWrite>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d052      	beq.n	8006bbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e081      	b.n	8006c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fd1a 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d107      	bne.n	8006b42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e06b      	b.n	8006c1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d11b      	bne.n	8006bbc <HAL_I2C_Mem_Write+0x180>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d017      	beq.n	8006bbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1aa      	bne.n	8006b1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fd06 	bl	80075da <I2C_WaitOnBTFFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d107      	bne.n	8006bec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e016      	b.n	8006c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e000      	b.n	8006c1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	00100002 	.word	0x00100002
 8006c2c:	ffff0000 	.word	0xffff0000

08006c30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4603      	mov	r3, r0
 8006c40:	817b      	strh	r3, [r7, #10]
 8006c42:	460b      	mov	r3, r1
 8006c44:	813b      	strh	r3, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c4a:	f7ff f8ff 	bl	8005e4c <HAL_GetTick>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	f040 8208 	bne.w	800706e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	2319      	movs	r3, #25
 8006c64:	2201      	movs	r2, #1
 8006c66:	497b      	ldr	r1, [pc, #492]	; (8006e54 <HAL_I2C_Mem_Read+0x224>)
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fb9f 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
 8006c76:	e1fb      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_I2C_Mem_Read+0x56>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e1f4      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d007      	beq.n	8006cac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2222      	movs	r2, #34	; 0x22
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2240      	movs	r2, #64	; 0x40
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a5b      	ldr	r2, [pc, #364]	; (8006e58 <HAL_I2C_Mem_Read+0x228>)
 8006cec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cee:	88f8      	ldrh	r0, [r7, #6]
 8006cf0:	893a      	ldrh	r2, [r7, #8]
 8006cf2:	8979      	ldrh	r1, [r7, #10]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa6c 	bl	80071dc <I2C_RequestMemoryRead>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e1b0      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d113      	bne.n	8006d3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d16:	2300      	movs	r3, #0
 8006d18:	623b      	str	r3, [r7, #32]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	623b      	str	r3, [r7, #32]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	623b      	str	r3, [r7, #32]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e184      	b.n	8007048 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d11b      	bne.n	8006d7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e164      	b.n	8007048 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d11b      	bne.n	8006dbe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	e144      	b.n	8007048 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dd4:	e138      	b.n	8007048 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	f200 80f1 	bhi.w	8006fc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d123      	bne.n	8006e30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fc35 	bl	800765c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e139      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e2e:	e10b      	b.n	8007048 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d14e      	bne.n	8006ed6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4906      	ldr	r1, [pc, #24]	; (8006e5c <HAL_I2C_Mem_Read+0x22c>)
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fab2 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e10e      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
 8006e52:	bf00      	nop
 8006e54:	00100002 	.word	0x00100002
 8006e58:	ffff0000 	.word	0xffff0000
 8006e5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691a      	ldr	r2, [r3, #16]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ed4:	e0b8      	b.n	8007048 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	2200      	movs	r2, #0
 8006ede:	4966      	ldr	r1, [pc, #408]	; (8007078 <HAL_I2C_Mem_Read+0x448>)
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fa63 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0bf      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	2200      	movs	r2, #0
 8006f3a:	494f      	ldr	r1, [pc, #316]	; (8007078 <HAL_I2C_Mem_Read+0x448>)
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fa35 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e091      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fc0:	e042      	b.n	8007048 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fb48 	bl	800765c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e04c      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b04      	cmp	r3, #4
 8007014:	d118      	bne.n	8007048 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704c:	2b00      	cmp	r3, #0
 800704e:	f47f aec2 	bne.w	8006dd6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2220      	movs	r2, #32
 8007056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	e000      	b.n	8007070 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800706e:	2302      	movs	r3, #2
  }
}
 8007070:	4618      	mov	r0, r3
 8007072:	3728      	adds	r7, #40	; 0x28
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	00010004 	.word	0x00010004

0800707c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	4608      	mov	r0, r1
 80070ba:	4611      	mov	r1, r2
 80070bc:	461a      	mov	r2, r3
 80070be:	4603      	mov	r3, r0
 80070c0:	817b      	strh	r3, [r7, #10]
 80070c2:	460b      	mov	r3, r1
 80070c4:	813b      	strh	r3, [r7, #8]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f960 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007100:	d103      	bne.n	800710a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e05f      	b.n	80071ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800710e:	897b      	ldrh	r3, [r7, #10]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800711c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	492d      	ldr	r1, [pc, #180]	; (80071d8 <I2C_RequestMemoryWrite+0x128>)
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f998 	bl	800745a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e04c      	b.n	80071ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800714a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714c:	6a39      	ldr	r1, [r7, #32]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 fa02 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	2b04      	cmp	r3, #4
 8007160:	d107      	bne.n	8007172 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e02b      	b.n	80071ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d105      	bne.n	8007188 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	611a      	str	r2, [r3, #16]
 8007186:	e021      	b.n	80071cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007188:	893b      	ldrh	r3, [r7, #8]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	b29b      	uxth	r3, r3
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	6a39      	ldr	r1, [r7, #32]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f9dc 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00d      	beq.n	80071c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d107      	bne.n	80071be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e005      	b.n	80071ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c2:	893b      	ldrh	r3, [r7, #8]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	00010002 	.word	0x00010002

080071dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	4608      	mov	r0, r1
 80071e6:	4611      	mov	r1, r2
 80071e8:	461a      	mov	r2, r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	817b      	strh	r3, [r7, #10]
 80071ee:	460b      	mov	r3, r1
 80071f0:	813b      	strh	r3, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007204:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007214:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	2200      	movs	r2, #0
 800721e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f8c2 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723c:	d103      	bne.n	8007246 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007244:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e0aa      	b.n	80073a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800724a:	897b      	ldrh	r3, [r7, #10]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007258:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	6a3a      	ldr	r2, [r7, #32]
 800725e:	4952      	ldr	r1, [pc, #328]	; (80073a8 <I2C_RequestMemoryRead+0x1cc>)
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f8fa 	bl	800745a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e097      	b.n	80073a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f964 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00d      	beq.n	80072b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	2b04      	cmp	r3, #4
 800729c:	d107      	bne.n	80072ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e076      	b.n	80073a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d105      	bne.n	80072c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072b8:	893b      	ldrh	r3, [r7, #8]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	611a      	str	r2, [r3, #16]
 80072c2:	e021      	b.n	8007308 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072c4:	893b      	ldrh	r3, [r7, #8]
 80072c6:	0a1b      	lsrs	r3, r3, #8
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d4:	6a39      	ldr	r1, [r7, #32]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f93e 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00d      	beq.n	80072fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d107      	bne.n	80072fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e050      	b.n	80073a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072fe:	893b      	ldrh	r3, [r7, #8]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	6a39      	ldr	r1, [r7, #32]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f923 	bl	8007558 <I2C_WaitOnTXEFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00d      	beq.n	8007334 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	2b04      	cmp	r3, #4
 800731e:	d107      	bne.n	8007330 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e035      	b.n	80073a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007342:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	2200      	movs	r2, #0
 800734c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f82b 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736a:	d103      	bne.n	8007374 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e013      	b.n	80073a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007378:	897b      	ldrh	r3, [r7, #10]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	b2da      	uxtb	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	6a3a      	ldr	r2, [r7, #32]
 800738c:	4906      	ldr	r1, [pc, #24]	; (80073a8 <I2C_RequestMemoryRead+0x1cc>)
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f863 	bl	800745a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	00010002 	.word	0x00010002

080073ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073bc:	e025      	b.n	800740a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d021      	beq.n	800740a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fe fd41 	bl	8005e4c <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d116      	bne.n	800740a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e023      	b.n	8007452 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10d      	bne.n	8007430 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	43da      	mvns	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4013      	ands	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	bf0c      	ite	eq
 8007426:	2301      	moveq	r3, #1
 8007428:	2300      	movne	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	e00c      	b.n	800744a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	43da      	mvns	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4013      	ands	r3, r2
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	bf0c      	ite	eq
 8007442:	2301      	moveq	r3, #1
 8007444:	2300      	movne	r3, #0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	461a      	mov	r2, r3
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	429a      	cmp	r2, r3
 800744e:	d0b6      	beq.n	80073be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007468:	e051      	b.n	800750e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007478:	d123      	bne.n	80074c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007488:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007492:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f043 0204 	orr.w	r2, r3, #4
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e046      	b.n	8007550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d021      	beq.n	800750e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fe fcbf 	bl	8005e4c <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d116      	bne.n	800750e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f043 0220 	orr.w	r2, r3, #32
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e020      	b.n	8007550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	0c1b      	lsrs	r3, r3, #16
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b01      	cmp	r3, #1
 8007516:	d10c      	bne.n	8007532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	43da      	mvns	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	bf14      	ite	ne
 800752a:	2301      	movne	r3, #1
 800752c:	2300      	moveq	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	e00b      	b.n	800754a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	43da      	mvns	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d18d      	bne.n	800746a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007564:	e02d      	b.n	80075c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 f8ce 	bl	8007708 <I2C_IsAcknowledgeFailed>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e02d      	b.n	80075d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757c:	d021      	beq.n	80075c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757e:	f7fe fc65 	bl	8005e4c <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d116      	bne.n	80075c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f043 0220 	orr.w	r2, r3, #32
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e007      	b.n	80075d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075cc:	2b80      	cmp	r3, #128	; 0x80
 80075ce:	d1ca      	bne.n	8007566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075e6:	e02d      	b.n	8007644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f88d 	bl	8007708 <I2C_IsAcknowledgeFailed>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e02d      	b.n	8007654 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d021      	beq.n	8007644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007600:	f7fe fc24 	bl	8005e4c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	429a      	cmp	r2, r3
 800760e:	d302      	bcc.n	8007616 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d116      	bne.n	8007644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f043 0220 	orr.w	r2, r3, #32
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e007      	b.n	8007654 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b04      	cmp	r3, #4
 8007650:	d1ca      	bne.n	80075e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007668:	e042      	b.n	80076f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b10      	cmp	r3, #16
 8007676:	d119      	bne.n	80076ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0210 	mvn.w	r2, #16
 8007680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e029      	b.n	8007700 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ac:	f7fe fbce 	bl	8005e4c <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d302      	bcc.n	80076c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d116      	bne.n	80076f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	f043 0220 	orr.w	r2, r3, #32
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e007      	b.n	8007700 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d1b5      	bne.n	800766a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771e:	d11b      	bne.n	8007758 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007728:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007744:	f043 0204 	orr.w	r2, r3, #4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e264      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d075      	beq.n	8007872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007786:	4ba3      	ldr	r3, [pc, #652]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 030c 	and.w	r3, r3, #12
 800778e:	2b04      	cmp	r3, #4
 8007790:	d00c      	beq.n	80077ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007792:	4ba0      	ldr	r3, [pc, #640]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800779a:	2b08      	cmp	r3, #8
 800779c:	d112      	bne.n	80077c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800779e:	4b9d      	ldr	r3, [pc, #628]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077aa:	d10b      	bne.n	80077c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ac:	4b99      	ldr	r3, [pc, #612]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d05b      	beq.n	8007870 <HAL_RCC_OscConfig+0x108>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d157      	bne.n	8007870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e23f      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077cc:	d106      	bne.n	80077dc <HAL_RCC_OscConfig+0x74>
 80077ce:	4b91      	ldr	r3, [pc, #580]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a90      	ldr	r2, [pc, #576]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e01d      	b.n	8007818 <HAL_RCC_OscConfig+0xb0>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e4:	d10c      	bne.n	8007800 <HAL_RCC_OscConfig+0x98>
 80077e6:	4b8b      	ldr	r3, [pc, #556]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a8a      	ldr	r2, [pc, #552]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b88      	ldr	r3, [pc, #544]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a87      	ldr	r2, [pc, #540]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80077f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e00b      	b.n	8007818 <HAL_RCC_OscConfig+0xb0>
 8007800:	4b84      	ldr	r3, [pc, #528]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a83      	ldr	r2, [pc, #524]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4b81      	ldr	r3, [pc, #516]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a80      	ldr	r2, [pc, #512]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d013      	beq.n	8007848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7fe fb14 	bl	8005e4c <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007828:	f7fe fb10 	bl	8005e4c <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	; 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e204      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783a:	4b76      	ldr	r3, [pc, #472]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0xc0>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007848:	f7fe fb00 	bl	8005e4c <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007850:	f7fe fafc 	bl	8005e4c <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e1f0      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007862:	4b6c      	ldr	r3, [pc, #432]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0xe8>
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d063      	beq.n	8007946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787e:	4b65      	ldr	r3, [pc, #404]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800788a:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007892:	2b08      	cmp	r3, #8
 8007894:	d11c      	bne.n	80078d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007896:	4b5f      	ldr	r3, [pc, #380]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d116      	bne.n	80078d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078a2:	4b5c      	ldr	r3, [pc, #368]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_RCC_OscConfig+0x152>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d001      	beq.n	80078ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e1c4      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ba:	4b56      	ldr	r3, [pc, #344]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4952      	ldr	r1, [pc, #328]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ce:	e03a      	b.n	8007946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d020      	beq.n	800791a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d8:	4b4f      	ldr	r3, [pc, #316]	; (8007a18 <HAL_RCC_OscConfig+0x2b0>)
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078de:	f7fe fab5 	bl	8005e4c <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e6:	f7fe fab1 	bl	8005e4c <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e1a5      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f8:	4b46      	ldr	r3, [pc, #280]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0f0      	beq.n	80078e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007904:	4b43      	ldr	r3, [pc, #268]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	4940      	ldr	r1, [pc, #256]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 8007914:	4313      	orrs	r3, r2
 8007916:	600b      	str	r3, [r1, #0]
 8007918:	e015      	b.n	8007946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800791a:	4b3f      	ldr	r3, [pc, #252]	; (8007a18 <HAL_RCC_OscConfig+0x2b0>)
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fe fa94 	bl	8005e4c <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007928:	f7fe fa90 	bl	8005e4c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e184      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800793a:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f0      	bne.n	8007928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d030      	beq.n	80079b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d016      	beq.n	8007988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800795a:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <HAL_RCC_OscConfig+0x2b4>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007960:	f7fe fa74 	bl	8005e4c <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007968:	f7fe fa70 	bl	8005e4c <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e164      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800797a:	4b26      	ldr	r3, [pc, #152]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 800797c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCC_OscConfig+0x200>
 8007986:	e015      	b.n	80079b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007988:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <HAL_RCC_OscConfig+0x2b4>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798e:	f7fe fa5d 	bl	8005e4c <HAL_GetTick>
 8007992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007994:	e008      	b.n	80079a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007996:	f7fe fa59 	bl	8005e4c <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d901      	bls.n	80079a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e14d      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f0      	bne.n	8007996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80a0 	beq.w	8007b02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079c6:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	4a0e      	ldr	r2, [pc, #56]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e0:	6413      	str	r3, [r2, #64]	; 0x40
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ea:	60bb      	str	r3, [r7, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ee:	2301      	movs	r3, #1
 80079f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f2:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <HAL_RCC_OscConfig+0x2b8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d121      	bne.n	8007a42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <HAL_RCC_OscConfig+0x2b8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a07      	ldr	r2, [pc, #28]	; (8007a20 <HAL_RCC_OscConfig+0x2b8>)
 8007a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a0a:	f7fe fa1f 	bl	8005e4c <HAL_GetTick>
 8007a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a10:	e011      	b.n	8007a36 <HAL_RCC_OscConfig+0x2ce>
 8007a12:	bf00      	nop
 8007a14:	40023800 	.word	0x40023800
 8007a18:	42470000 	.word	0x42470000
 8007a1c:	42470e80 	.word	0x42470e80
 8007a20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a24:	f7fe fa12 	bl	8005e4c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e106      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a36:	4b85      	ldr	r3, [pc, #532]	; (8007c4c <HAL_RCC_OscConfig+0x4e4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d106      	bne.n	8007a58 <HAL_RCC_OscConfig+0x2f0>
 8007a4a:	4b81      	ldr	r3, [pc, #516]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	4a80      	ldr	r2, [pc, #512]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	6713      	str	r3, [r2, #112]	; 0x70
 8007a56:	e01c      	b.n	8007a92 <HAL_RCC_OscConfig+0x32a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d10c      	bne.n	8007a7a <HAL_RCC_OscConfig+0x312>
 8007a60:	4b7b      	ldr	r3, [pc, #492]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a64:	4a7a      	ldr	r2, [pc, #488]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a66:	f043 0304 	orr.w	r3, r3, #4
 8007a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6c:	4b78      	ldr	r3, [pc, #480]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	4a77      	ldr	r2, [pc, #476]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	6713      	str	r3, [r2, #112]	; 0x70
 8007a78:	e00b      	b.n	8007a92 <HAL_RCC_OscConfig+0x32a>
 8007a7a:	4b75      	ldr	r3, [pc, #468]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	4a74      	ldr	r2, [pc, #464]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	6713      	str	r3, [r2, #112]	; 0x70
 8007a86:	4b72      	ldr	r3, [pc, #456]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8a:	4a71      	ldr	r2, [pc, #452]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007a8c:	f023 0304 	bic.w	r3, r3, #4
 8007a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d015      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9a:	f7fe f9d7 	bl	8005e4c <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa0:	e00a      	b.n	8007ab8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa2:	f7fe f9d3 	bl	8005e4c <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d901      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e0c5      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab8:	4b65      	ldr	r3, [pc, #404]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0ee      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x33a>
 8007ac4:	e014      	b.n	8007af0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ac6:	f7fe f9c1 	bl	8005e4c <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007acc:	e00a      	b.n	8007ae4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ace:	f7fe f9bd 	bl	8005e4c <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d901      	bls.n	8007ae4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e0af      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ae4:	4b5a      	ldr	r3, [pc, #360]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1ee      	bne.n	8007ace <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d105      	bne.n	8007b02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af6:	4b56      	ldr	r3, [pc, #344]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	4a55      	ldr	r2, [pc, #340]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 809b 	beq.w	8007c42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b0c:	4b50      	ldr	r3, [pc, #320]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 030c 	and.w	r3, r3, #12
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d05c      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d141      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b20:	4b4c      	ldr	r3, [pc, #304]	; (8007c54 <HAL_RCC_OscConfig+0x4ec>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b26:	f7fe f991 	bl	8005e4c <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b2e:	f7fe f98d 	bl	8005e4c <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e081      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b40:	4b43      	ldr	r3, [pc, #268]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f0      	bne.n	8007b2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69da      	ldr	r2, [r3, #28]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	019b      	lsls	r3, r3, #6
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	3b01      	subs	r3, #1
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	061b      	lsls	r3, r3, #24
 8007b70:	4937      	ldr	r1, [pc, #220]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b76:	4b37      	ldr	r3, [pc, #220]	; (8007c54 <HAL_RCC_OscConfig+0x4ec>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b7c:	f7fe f966 	bl	8005e4c <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b84:	f7fe f962 	bl	8005e4c <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e056      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b96:	4b2e      	ldr	r3, [pc, #184]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0f0      	beq.n	8007b84 <HAL_RCC_OscConfig+0x41c>
 8007ba2:	e04e      	b.n	8007c42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ba4:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <HAL_RCC_OscConfig+0x4ec>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007baa:	f7fe f94f 	bl	8005e4c <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bb2:	f7fe f94b 	bl	8005e4c <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e03f      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bc4:	4b22      	ldr	r3, [pc, #136]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f0      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x44a>
 8007bd0:	e037      	b.n	8007c42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e032      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bde:	4b1c      	ldr	r3, [pc, #112]	; (8007c50 <HAL_RCC_OscConfig+0x4e8>)
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d028      	beq.n	8007c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d121      	bne.n	8007c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d11a      	bne.n	8007c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c0e:	4013      	ands	r3, r2
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d111      	bne.n	8007c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	085b      	lsrs	r3, r3, #1
 8007c26:	3b01      	subs	r3, #1
 8007c28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d107      	bne.n	8007c3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d001      	beq.n	8007c42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	40007000 	.word	0x40007000
 8007c50:	40023800 	.word	0x40023800
 8007c54:	42470060 	.word	0x42470060

08007c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0cc      	b.n	8007e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c6c:	4b68      	ldr	r3, [pc, #416]	; (8007e10 <HAL_RCC_ClockConfig+0x1b8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d90c      	bls.n	8007c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c7a:	4b65      	ldr	r3, [pc, #404]	; (8007e10 <HAL_RCC_ClockConfig+0x1b8>)
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c82:	4b63      	ldr	r3, [pc, #396]	; (8007e10 <HAL_RCC_ClockConfig+0x1b8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0b8      	b.n	8007e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d020      	beq.n	8007ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cac:	4b59      	ldr	r3, [pc, #356]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	4a58      	ldr	r2, [pc, #352]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0308 	and.w	r3, r3, #8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d005      	beq.n	8007cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cc4:	4b53      	ldr	r3, [pc, #332]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	4a52      	ldr	r2, [pc, #328]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cd0:	4b50      	ldr	r3, [pc, #320]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	494d      	ldr	r1, [pc, #308]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d044      	beq.n	8007d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d107      	bne.n	8007d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf6:	4b47      	ldr	r3, [pc, #284]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d119      	bne.n	8007d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e07f      	b.n	8007e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d003      	beq.n	8007d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d107      	bne.n	8007d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d16:	4b3f      	ldr	r3, [pc, #252]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e06f      	b.n	8007e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d26:	4b3b      	ldr	r3, [pc, #236]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e067      	b.n	8007e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d36:	4b37      	ldr	r3, [pc, #220]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f023 0203 	bic.w	r2, r3, #3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	4934      	ldr	r1, [pc, #208]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d48:	f7fe f880 	bl	8005e4c <HAL_GetTick>
 8007d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4e:	e00a      	b.n	8007d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d50:	f7fe f87c 	bl	8005e4c <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e04f      	b.n	8007e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d66:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 020c 	and.w	r2, r3, #12
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d1eb      	bne.n	8007d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d78:	4b25      	ldr	r3, [pc, #148]	; (8007e10 <HAL_RCC_ClockConfig+0x1b8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d20c      	bcs.n	8007da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d86:	4b22      	ldr	r3, [pc, #136]	; (8007e10 <HAL_RCC_ClockConfig+0x1b8>)
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8e:	4b20      	ldr	r3, [pc, #128]	; (8007e10 <HAL_RCC_ClockConfig+0x1b8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d001      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e032      	b.n	8007e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dac:	4b19      	ldr	r3, [pc, #100]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4916      	ldr	r1, [pc, #88]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	490e      	ldr	r1, [pc, #56]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dde:	f000 f821 	bl	8007e24 <HAL_RCC_GetSysClockFreq>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <HAL_RCC_ClockConfig+0x1bc>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	490a      	ldr	r1, [pc, #40]	; (8007e18 <HAL_RCC_ClockConfig+0x1c0>)
 8007df0:	5ccb      	ldrb	r3, [r1, r3]
 8007df2:	fa22 f303 	lsr.w	r3, r2, r3
 8007df6:	4a09      	ldr	r2, [pc, #36]	; (8007e1c <HAL_RCC_ClockConfig+0x1c4>)
 8007df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <HAL_RCC_ClockConfig+0x1c8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fd ffe0 	bl	8005dc4 <HAL_InitTick>

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	40023c00 	.word	0x40023c00
 8007e14:	40023800 	.word	0x40023800
 8007e18:	0800a564 	.word	0x0800a564
 8007e1c:	20000000 	.word	0x20000000
 8007e20:	200000d8 	.word	0x200000d8

08007e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	607b      	str	r3, [r7, #4]
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	2300      	movs	r3, #0
 8007e36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e3c:	4b67      	ldr	r3, [pc, #412]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 030c 	and.w	r3, r3, #12
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d00d      	beq.n	8007e64 <HAL_RCC_GetSysClockFreq+0x40>
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	f200 80bd 	bhi.w	8007fc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <HAL_RCC_GetSysClockFreq+0x34>
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d003      	beq.n	8007e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e56:	e0b7      	b.n	8007fc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e58:	4b61      	ldr	r3, [pc, #388]	; (8007fe0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e5a:	60bb      	str	r3, [r7, #8]
       break;
 8007e5c:	e0b7      	b.n	8007fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e5e:	4b61      	ldr	r3, [pc, #388]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e60:	60bb      	str	r3, [r7, #8]
      break;
 8007e62:	e0b4      	b.n	8007fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e64:	4b5d      	ldr	r3, [pc, #372]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e6e:	4b5b      	ldr	r3, [pc, #364]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d04d      	beq.n	8007f16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e7a:	4b58      	ldr	r3, [pc, #352]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	099b      	lsrs	r3, r3, #6
 8007e80:	461a      	mov	r2, r3
 8007e82:	f04f 0300 	mov.w	r3, #0
 8007e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e8a:	f04f 0100 	mov.w	r1, #0
 8007e8e:	ea02 0800 	and.w	r8, r2, r0
 8007e92:	ea03 0901 	and.w	r9, r3, r1
 8007e96:	4640      	mov	r0, r8
 8007e98:	4649      	mov	r1, r9
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	014b      	lsls	r3, r1, #5
 8007ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ea8:	0142      	lsls	r2, r0, #5
 8007eaa:	4610      	mov	r0, r2
 8007eac:	4619      	mov	r1, r3
 8007eae:	ebb0 0008 	subs.w	r0, r0, r8
 8007eb2:	eb61 0109 	sbc.w	r1, r1, r9
 8007eb6:	f04f 0200 	mov.w	r2, #0
 8007eba:	f04f 0300 	mov.w	r3, #0
 8007ebe:	018b      	lsls	r3, r1, #6
 8007ec0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ec4:	0182      	lsls	r2, r0, #6
 8007ec6:	1a12      	subs	r2, r2, r0
 8007ec8:	eb63 0301 	sbc.w	r3, r3, r1
 8007ecc:	f04f 0000 	mov.w	r0, #0
 8007ed0:	f04f 0100 	mov.w	r1, #0
 8007ed4:	00d9      	lsls	r1, r3, #3
 8007ed6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007eda:	00d0      	lsls	r0, r2, #3
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	eb12 0208 	adds.w	r2, r2, r8
 8007ee4:	eb43 0309 	adc.w	r3, r3, r9
 8007ee8:	f04f 0000 	mov.w	r0, #0
 8007eec:	f04f 0100 	mov.w	r1, #0
 8007ef0:	0259      	lsls	r1, r3, #9
 8007ef2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007ef6:	0250      	lsls	r0, r2, #9
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4610      	mov	r0, r2
 8007efe:	4619      	mov	r1, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f04f 0300 	mov.w	r3, #0
 8007f08:	f7f8 f9ba 	bl	8000280 <__aeabi_uldivmod>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4613      	mov	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e04a      	b.n	8007fac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f16:	4b31      	ldr	r3, [pc, #196]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	099b      	lsrs	r3, r3, #6
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	ea02 0400 	and.w	r4, r2, r0
 8007f2e:	ea03 0501 	and.w	r5, r3, r1
 8007f32:	4620      	mov	r0, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	014b      	lsls	r3, r1, #5
 8007f40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f44:	0142      	lsls	r2, r0, #5
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	1b00      	subs	r0, r0, r4
 8007f4c:	eb61 0105 	sbc.w	r1, r1, r5
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	018b      	lsls	r3, r1, #6
 8007f5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f5e:	0182      	lsls	r2, r0, #6
 8007f60:	1a12      	subs	r2, r2, r0
 8007f62:	eb63 0301 	sbc.w	r3, r3, r1
 8007f66:	f04f 0000 	mov.w	r0, #0
 8007f6a:	f04f 0100 	mov.w	r1, #0
 8007f6e:	00d9      	lsls	r1, r3, #3
 8007f70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f74:	00d0      	lsls	r0, r2, #3
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	1912      	adds	r2, r2, r4
 8007f7c:	eb45 0303 	adc.w	r3, r5, r3
 8007f80:	f04f 0000 	mov.w	r0, #0
 8007f84:	f04f 0100 	mov.w	r1, #0
 8007f88:	0299      	lsls	r1, r3, #10
 8007f8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f8e:	0290      	lsls	r0, r2, #10
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4610      	mov	r0, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	f7f8 f96e 	bl	8000280 <__aeabi_uldivmod>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4613      	mov	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fac:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	60bb      	str	r3, [r7, #8]
      break;
 8007fc6:	e002      	b.n	8007fce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007fca:	60bb      	str	r3, [r7, #8]
      break;
 8007fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fce:	68bb      	ldr	r3, [r7, #8]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007fda:	bf00      	nop
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	00f42400 	.word	0x00f42400
 8007fe4:	007a1200 	.word	0x007a1200

08007fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fec:	4b03      	ldr	r3, [pc, #12]	; (8007ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8007fee:	681b      	ldr	r3, [r3, #0]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	20000000 	.word	0x20000000

08008000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008004:	f7ff fff0 	bl	8007fe8 <HAL_RCC_GetHCLKFreq>
 8008008:	4602      	mov	r2, r0
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	0a9b      	lsrs	r3, r3, #10
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	4903      	ldr	r1, [pc, #12]	; (8008024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008016:	5ccb      	ldrb	r3, [r1, r3]
 8008018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800801c:	4618      	mov	r0, r3
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40023800 	.word	0x40023800
 8008024:	0800a574 	.word	0x0800a574

08008028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800802c:	f7ff ffdc 	bl	8007fe8 <HAL_RCC_GetHCLKFreq>
 8008030:	4602      	mov	r2, r0
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	0b5b      	lsrs	r3, r3, #13
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	4903      	ldr	r1, [pc, #12]	; (800804c <HAL_RCC_GetPCLK2Freq+0x24>)
 800803e:	5ccb      	ldrb	r3, [r1, r3]
 8008040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008044:	4618      	mov	r0, r3
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40023800 	.word	0x40023800
 800804c:	0800a574 	.word	0x0800a574

08008050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e041      	b.n	80080e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7f8 fd2e 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f000 fbd8 	bl	8008844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e041      	b.n	8008184 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f839 	bl	800818c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2202      	movs	r2, #2
 800811e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	4619      	mov	r1, r3
 800812c:	4610      	mov	r0, r2
 800812e:	f000 fb89 	bl	8008844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <HAL_TIM_OC_Start_IT+0x28>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b01      	cmp	r3, #1
 80081be:	bf14      	ite	ne
 80081c0:	2301      	movne	r3, #1
 80081c2:	2300      	moveq	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	e022      	b.n	800820e <HAL_TIM_OC_Start_IT+0x6e>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d109      	bne.n	80081e2 <HAL_TIM_OC_Start_IT+0x42>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	bf14      	ite	ne
 80081da:	2301      	movne	r3, #1
 80081dc:	2300      	moveq	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	e015      	b.n	800820e <HAL_TIM_OC_Start_IT+0x6e>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d109      	bne.n	80081fc <HAL_TIM_OC_Start_IT+0x5c>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	bf14      	ite	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	2300      	moveq	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	e008      	b.n	800820e <HAL_TIM_OC_Start_IT+0x6e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e0b3      	b.n	800837e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <HAL_TIM_OC_Start_IT+0x86>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008224:	e013      	b.n	800824e <HAL_TIM_OC_Start_IT+0xae>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b04      	cmp	r3, #4
 800822a:	d104      	bne.n	8008236 <HAL_TIM_OC_Start_IT+0x96>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008234:	e00b      	b.n	800824e <HAL_TIM_OC_Start_IT+0xae>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b08      	cmp	r3, #8
 800823a:	d104      	bne.n	8008246 <HAL_TIM_OC_Start_IT+0xa6>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008244:	e003      	b.n	800824e <HAL_TIM_OC_Start_IT+0xae>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b0c      	cmp	r3, #12
 8008252:	d841      	bhi.n	80082d8 <HAL_TIM_OC_Start_IT+0x138>
 8008254:	a201      	add	r2, pc, #4	; (adr r2, 800825c <HAL_TIM_OC_Start_IT+0xbc>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	08008291 	.word	0x08008291
 8008260:	080082d9 	.word	0x080082d9
 8008264:	080082d9 	.word	0x080082d9
 8008268:	080082d9 	.word	0x080082d9
 800826c:	080082a3 	.word	0x080082a3
 8008270:	080082d9 	.word	0x080082d9
 8008274:	080082d9 	.word	0x080082d9
 8008278:	080082d9 	.word	0x080082d9
 800827c:	080082b5 	.word	0x080082b5
 8008280:	080082d9 	.word	0x080082d9
 8008284:	080082d9 	.word	0x080082d9
 8008288:	080082d9 	.word	0x080082d9
 800828c:	080082c7 	.word	0x080082c7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0202 	orr.w	r2, r2, #2
 800829e:	60da      	str	r2, [r3, #12]
      break;
 80082a0:	e01d      	b.n	80082de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0204 	orr.w	r2, r2, #4
 80082b0:	60da      	str	r2, [r3, #12]
      break;
 80082b2:	e014      	b.n	80082de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0208 	orr.w	r2, r2, #8
 80082c2:	60da      	str	r2, [r3, #12]
      break;
 80082c4:	e00b      	b.n	80082de <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0210 	orr.w	r2, r2, #16
 80082d4:	60da      	str	r2, [r3, #12]
      break;
 80082d6:	e002      	b.n	80082de <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
      break;
 80082dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d14b      	bne.n	800837c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2201      	movs	r2, #1
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fd4f 	bl	8008d90 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a24      	ldr	r2, [pc, #144]	; (8008388 <HAL_TIM_OC_Start_IT+0x1e8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d107      	bne.n	800830c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800830a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a1d      	ldr	r2, [pc, #116]	; (8008388 <HAL_TIM_OC_Start_IT+0x1e8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d018      	beq.n	8008348 <HAL_TIM_OC_Start_IT+0x1a8>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831e:	d013      	beq.n	8008348 <HAL_TIM_OC_Start_IT+0x1a8>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a19      	ldr	r2, [pc, #100]	; (800838c <HAL_TIM_OC_Start_IT+0x1ec>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00e      	beq.n	8008348 <HAL_TIM_OC_Start_IT+0x1a8>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a18      	ldr	r2, [pc, #96]	; (8008390 <HAL_TIM_OC_Start_IT+0x1f0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d009      	beq.n	8008348 <HAL_TIM_OC_Start_IT+0x1a8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a16      	ldr	r2, [pc, #88]	; (8008394 <HAL_TIM_OC_Start_IT+0x1f4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d004      	beq.n	8008348 <HAL_TIM_OC_Start_IT+0x1a8>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a15      	ldr	r2, [pc, #84]	; (8008398 <HAL_TIM_OC_Start_IT+0x1f8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d111      	bne.n	800836c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b06      	cmp	r3, #6
 8008358:	d010      	beq.n	800837c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0201 	orr.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800836a:	e007      	b.n	800837c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40010000 	.word	0x40010000
 800838c:	40000400 	.word	0x40000400
 8008390:	40000800 	.word	0x40000800
 8008394:	40000c00 	.word	0x40000c00
 8008398:	40014000 	.word	0x40014000

0800839c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d122      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d11b      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f06f 0202 	mvn.w	r2, #2
 80083c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa11 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 80083e4:	e005      	b.n	80083f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7f8 fb34 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa14 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b04      	cmp	r3, #4
 8008404:	d122      	bne.n	800844c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b04      	cmp	r3, #4
 8008412:	d11b      	bne.n	800844c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0204 	mvn.w	r2, #4
 800841c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2202      	movs	r2, #2
 8008422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f9e7 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 8008438:	e005      	b.n	8008446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7f8 fb0a 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f9ea 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b08      	cmp	r3, #8
 8008458:	d122      	bne.n	80084a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b08      	cmp	r3, #8
 8008466:	d11b      	bne.n	80084a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0208 	mvn.w	r2, #8
 8008470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2204      	movs	r2, #4
 8008476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9bd 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 800848c:	e005      	b.n	800849a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7f8 fae0 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f9c0 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f003 0310 	and.w	r3, r3, #16
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d122      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	2b10      	cmp	r3, #16
 80084ba:	d11b      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f06f 0210 	mvn.w	r2, #16
 80084c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2208      	movs	r2, #8
 80084ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f993 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 80084e0:	e005      	b.n	80084ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7f8 fab6 	bl	8000a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f996 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d10e      	bne.n	8008520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b01      	cmp	r3, #1
 800850e:	d107      	bne.n	8008520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f06f 0201 	mvn.w	r2, #1
 8008518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f969 	bl	80087f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852a:	2b80      	cmp	r3, #128	; 0x80
 800852c:	d10e      	bne.n	800854c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008538:	2b80      	cmp	r3, #128	; 0x80
 800853a:	d107      	bne.n	800854c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fcc0 	bl	8008ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008556:	2b40      	cmp	r3, #64	; 0x40
 8008558:	d10e      	bne.n	8008578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008564:	2b40      	cmp	r3, #64	; 0x40
 8008566:	d107      	bne.n	8008578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f95b 	bl	800882e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b20      	cmp	r3, #32
 8008584:	d10e      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b20      	cmp	r3, #32
 8008592:	d107      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f06f 0220 	mvn.w	r2, #32
 800859c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fc8a 	bl	8008eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d101      	bne.n	80085ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80085c6:	2302      	movs	r3, #2
 80085c8:	e048      	b.n	800865c <HAL_TIM_OC_ConfigChannel+0xb0>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b0c      	cmp	r3, #12
 80085d6:	d839      	bhi.n	800864c <HAL_TIM_OC_ConfigChannel+0xa0>
 80085d8:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008615 	.word	0x08008615
 80085e4:	0800864d 	.word	0x0800864d
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	0800864d 	.word	0x0800864d
 80085f0:	08008623 	.word	0x08008623
 80085f4:	0800864d 	.word	0x0800864d
 80085f8:	0800864d 	.word	0x0800864d
 80085fc:	0800864d 	.word	0x0800864d
 8008600:	08008631 	.word	0x08008631
 8008604:	0800864d 	.word	0x0800864d
 8008608:	0800864d 	.word	0x0800864d
 800860c:	0800864d 	.word	0x0800864d
 8008610:	0800863f 	.word	0x0800863f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f992 	bl	8008944 <TIM_OC1_SetConfig>
      break;
 8008620:	e017      	b.n	8008652 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68b9      	ldr	r1, [r7, #8]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f9f1 	bl	8008a10 <TIM_OC2_SetConfig>
      break;
 800862e:	e010      	b.n	8008652 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fa56 	bl	8008ae8 <TIM_OC3_SetConfig>
      break;
 800863c:	e009      	b.n	8008652 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fab9 	bl	8008bbc <TIM_OC4_SetConfig>
      break;
 800864a:	e002      	b.n	8008652 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
      break;
 8008650:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIM_ConfigClockSource+0x1c>
 800867c:	2302      	movs	r3, #2
 800867e:	e0b4      	b.n	80087ea <HAL_TIM_ConfigClockSource+0x186>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800869e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b8:	d03e      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0xd4>
 80086ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086be:	f200 8087 	bhi.w	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c6:	f000 8086 	beq.w	80087d6 <HAL_TIM_ConfigClockSource+0x172>
 80086ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ce:	d87f      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d0:	2b70      	cmp	r3, #112	; 0x70
 80086d2:	d01a      	beq.n	800870a <HAL_TIM_ConfigClockSource+0xa6>
 80086d4:	2b70      	cmp	r3, #112	; 0x70
 80086d6:	d87b      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d8:	2b60      	cmp	r3, #96	; 0x60
 80086da:	d050      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x11a>
 80086dc:	2b60      	cmp	r3, #96	; 0x60
 80086de:	d877      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e0:	2b50      	cmp	r3, #80	; 0x50
 80086e2:	d03c      	beq.n	800875e <HAL_TIM_ConfigClockSource+0xfa>
 80086e4:	2b50      	cmp	r3, #80	; 0x50
 80086e6:	d873      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d058      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x13a>
 80086ec:	2b40      	cmp	r3, #64	; 0x40
 80086ee:	d86f      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086f0:	2b30      	cmp	r3, #48	; 0x30
 80086f2:	d064      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 80086f4:	2b30      	cmp	r3, #48	; 0x30
 80086f6:	d86b      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d060      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d867      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008700:	2b00      	cmp	r3, #0
 8008702:	d05c      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 8008704:	2b10      	cmp	r3, #16
 8008706:	d05a      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 8008708:	e062      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6899      	ldr	r1, [r3, #8]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f000 fb19 	bl	8008d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800872c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	609a      	str	r2, [r3, #8]
      break;
 8008736:	e04f      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6899      	ldr	r1, [r3, #8]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f000 fb02 	bl	8008d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800875a:	609a      	str	r2, [r3, #8]
      break;
 800875c:	e03c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6859      	ldr	r1, [r3, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	461a      	mov	r2, r3
 800876c:	f000 fa76 	bl	8008c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2150      	movs	r1, #80	; 0x50
 8008776:	4618      	mov	r0, r3
 8008778:	f000 facf 	bl	8008d1a <TIM_ITRx_SetConfig>
      break;
 800877c:	e02c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6859      	ldr	r1, [r3, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	461a      	mov	r2, r3
 800878c:	f000 fa95 	bl	8008cba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2160      	movs	r1, #96	; 0x60
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fabf 	bl	8008d1a <TIM_ITRx_SetConfig>
      break;
 800879c:	e01c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6859      	ldr	r1, [r3, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f000 fa56 	bl	8008c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2140      	movs	r1, #64	; 0x40
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 faaf 	bl	8008d1a <TIM_ITRx_SetConfig>
      break;
 80087bc:	e00c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f000 faa6 	bl	8008d1a <TIM_ITRx_SetConfig>
      break;
 80087ce:	e003      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
      break;
 80087d4:	e000      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
	...

08008844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a34      	ldr	r2, [pc, #208]	; (8008928 <TIM_Base_SetConfig+0xe4>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00f      	beq.n	800887c <TIM_Base_SetConfig+0x38>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008862:	d00b      	beq.n	800887c <TIM_Base_SetConfig+0x38>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a31      	ldr	r2, [pc, #196]	; (800892c <TIM_Base_SetConfig+0xe8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_Base_SetConfig+0x38>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a30      	ldr	r2, [pc, #192]	; (8008930 <TIM_Base_SetConfig+0xec>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0x38>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a2f      	ldr	r2, [pc, #188]	; (8008934 <TIM_Base_SetConfig+0xf0>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d108      	bne.n	800888e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a25      	ldr	r2, [pc, #148]	; (8008928 <TIM_Base_SetConfig+0xe4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d01b      	beq.n	80088ce <TIM_Base_SetConfig+0x8a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889c:	d017      	beq.n	80088ce <TIM_Base_SetConfig+0x8a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a22      	ldr	r2, [pc, #136]	; (800892c <TIM_Base_SetConfig+0xe8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d013      	beq.n	80088ce <TIM_Base_SetConfig+0x8a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a21      	ldr	r2, [pc, #132]	; (8008930 <TIM_Base_SetConfig+0xec>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00f      	beq.n	80088ce <TIM_Base_SetConfig+0x8a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a20      	ldr	r2, [pc, #128]	; (8008934 <TIM_Base_SetConfig+0xf0>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00b      	beq.n	80088ce <TIM_Base_SetConfig+0x8a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a1f      	ldr	r2, [pc, #124]	; (8008938 <TIM_Base_SetConfig+0xf4>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d007      	beq.n	80088ce <TIM_Base_SetConfig+0x8a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a1e      	ldr	r2, [pc, #120]	; (800893c <TIM_Base_SetConfig+0xf8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d003      	beq.n	80088ce <TIM_Base_SetConfig+0x8a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a1d      	ldr	r2, [pc, #116]	; (8008940 <TIM_Base_SetConfig+0xfc>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d108      	bne.n	80088e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4313      	orrs	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a08      	ldr	r2, [pc, #32]	; (8008928 <TIM_Base_SetConfig+0xe4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d103      	bne.n	8008914 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	615a      	str	r2, [r3, #20]
}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40000c00 	.word	0x40000c00
 8008938:	40014000 	.word	0x40014000
 800893c:	40014400 	.word	0x40014400
 8008940:	40014800 	.word	0x40014800

08008944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f023 0201 	bic.w	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f023 0302 	bic.w	r3, r3, #2
 800898c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	4313      	orrs	r3, r2
 8008996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <TIM_OC1_SetConfig+0xc8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10c      	bne.n	80089ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f023 0308 	bic.w	r3, r3, #8
 80089a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 0304 	bic.w	r3, r3, #4
 80089b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a13      	ldr	r2, [pc, #76]	; (8008a0c <TIM_OC1_SetConfig+0xc8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d111      	bne.n	80089e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	621a      	str	r2, [r3, #32]
}
 8008a00:	bf00      	nop
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	40010000 	.word	0x40010000

08008a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	f023 0210 	bic.w	r2, r3, #16
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f023 0320 	bic.w	r3, r3, #32
 8008a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <TIM_OC2_SetConfig+0xd4>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10d      	bne.n	8008a8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	011b      	lsls	r3, r3, #4
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a15      	ldr	r2, [pc, #84]	; (8008ae4 <TIM_OC2_SetConfig+0xd4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d113      	bne.n	8008abc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	621a      	str	r2, [r3, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	40010000 	.word	0x40010000

08008ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0303 	bic.w	r3, r3, #3
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <TIM_OC3_SetConfig+0xd0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d10d      	bne.n	8008b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	021b      	lsls	r3, r3, #8
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <TIM_OC3_SetConfig+0xd0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d113      	bne.n	8008b92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	621a      	str	r2, [r3, #32]
}
 8008bac:	bf00      	nop
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	40010000 	.word	0x40010000

08008bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	021b      	lsls	r3, r3, #8
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	031b      	lsls	r3, r3, #12
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <TIM_OC4_SetConfig+0x9c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d109      	bne.n	8008c30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	019b      	lsls	r3, r3, #6
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	621a      	str	r2, [r3, #32]
}
 8008c4a:	bf00      	nop
 8008c4c:	371c      	adds	r7, #28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	40010000 	.word	0x40010000

08008c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a1b      	ldr	r3, [r3, #32]
 8008c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f023 0201 	bic.w	r2, r3, #1
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f023 030a 	bic.w	r3, r3, #10
 8008c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	621a      	str	r2, [r3, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b087      	sub	sp, #28
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f023 0210 	bic.w	r2, r3, #16
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	031b      	lsls	r3, r3, #12
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	621a      	str	r2, [r3, #32]
}
 8008d0e:	bf00      	nop
 8008d10:	371c      	adds	r7, #28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	f043 0307 	orr.w	r3, r3, #7
 8008d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	609a      	str	r2, [r3, #8]
}
 8008d44:	bf00      	nop
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	021a      	lsls	r2, r3, #8
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	609a      	str	r2, [r3, #8]
}
 8008d84:	bf00      	nop
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f003 031f 	and.w	r3, r3, #31
 8008da2:	2201      	movs	r2, #1
 8008da4:	fa02 f303 	lsl.w	r3, r2, r3
 8008da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a1a      	ldr	r2, [r3, #32]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	43db      	mvns	r3, r3
 8008db2:	401a      	ands	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1a      	ldr	r2, [r3, #32]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
	...

08008ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e050      	b.n	8008e96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a1c      	ldr	r2, [pc, #112]	; (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d018      	beq.n	8008e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e40:	d013      	beq.n	8008e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00e      	beq.n	8008e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a16      	ldr	r2, [pc, #88]	; (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d009      	beq.n	8008e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a15      	ldr	r2, [pc, #84]	; (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d004      	beq.n	8008e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d10c      	bne.n	8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40010000 	.word	0x40010000
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	40000800 	.word	0x40000800
 8008eb0:	40000c00 	.word	0x40000c00
 8008eb4:	40014000 	.word	0x40014000

08008eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e03f      	b.n	8008f72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7f7 fe0e 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2224      	movs	r2, #36	; 0x24
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fcbf 	bl	80098a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691a      	ldr	r2, [r3, #16]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	695a      	ldr	r2, [r3, #20]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d130      	bne.n	8008ff6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <HAL_UART_Transmit_IT+0x26>
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e029      	b.n	8008ff8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_UART_Transmit_IT+0x38>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e022      	b.n	8008ff8 <HAL_UART_Transmit_IT+0x7e>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	88fa      	ldrh	r2, [r7, #6]
 8008fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	88fa      	ldrh	r2, [r7, #6]
 8008fca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2221      	movs	r2, #33	; 0x21
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ff0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e000      	b.n	8008ff8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008ff6:	2302      	movs	r3, #2
  }
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b0ba      	sub	sp, #232	; 0xe8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800902a:	2300      	movs	r3, #0
 800902c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009030:	2300      	movs	r3, #0
 8009032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800903a:	f003 030f 	and.w	r3, r3, #15
 800903e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10f      	bne.n	800906a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800904a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <HAL_UART_IRQHandler+0x66>
 8009056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fb65 	bl	8009732 <UART_Receive_IT>
      return;
 8009068:	e256      	b.n	8009518 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800906a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 80de 	beq.w	8009230 <HAL_UART_IRQHandler+0x22c>
 8009074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009084:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 80d1 	beq.w	8009230 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800908e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00b      	beq.n	80090b2 <HAL_UART_IRQHandler+0xae>
 800909a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800909e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d005      	beq.n	80090b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	f043 0201 	orr.w	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00b      	beq.n	80090d6 <HAL_UART_IRQHandler+0xd2>
 80090be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ce:	f043 0202 	orr.w	r2, r3, #2
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <HAL_UART_IRQHandler+0xf6>
 80090e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d005      	beq.n	80090fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	f043 0204 	orr.w	r2, r3, #4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fe:	f003 0308 	and.w	r3, r3, #8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d011      	beq.n	800912a <HAL_UART_IRQHandler+0x126>
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d005      	beq.n	800912a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	f043 0208 	orr.w	r2, r3, #8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 81ed 	beq.w	800950e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d008      	beq.n	8009152 <HAL_UART_IRQHandler+0x14e>
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 faf0 	bl	8009732 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	bf0c      	ite	eq
 8009160:	2301      	moveq	r3, #1
 8009162:	2300      	movne	r3, #0
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <HAL_UART_IRQHandler+0x17a>
 8009176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800917a:	2b00      	cmp	r3, #0
 800917c:	d04f      	beq.n	800921e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9f8 	bl	8009574 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d141      	bne.n	8009216 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3314      	adds	r3, #20
 8009198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3314      	adds	r3, #20
 80091ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1d9      	bne.n	8009192 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d013      	beq.n	800920e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	4a7d      	ldr	r2, [pc, #500]	; (80093e0 <HAL_UART_IRQHandler+0x3dc>)
 80091ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fc ffdb 	bl	80061ae <HAL_DMA_Abort_IT>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d016      	beq.n	800922c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800920c:	e00e      	b.n	800922c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f99a 	bl	8009548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009214:	e00a      	b.n	800922c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f996 	bl	8009548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921c:	e006      	b.n	800922c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f992 	bl	8009548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800922a:	e170      	b.n	800950e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922c:	bf00      	nop
    return;
 800922e:	e16e      	b.n	800950e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009234:	2b01      	cmp	r3, #1
 8009236:	f040 814a 	bne.w	80094ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800923a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800923e:	f003 0310 	and.w	r3, r3, #16
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 8143 	beq.w	80094ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 813c 	beq.w	80094ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009256:	2300      	movs	r3, #0
 8009258:	60bb      	str	r3, [r7, #8]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	60bb      	str	r3, [r7, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	60bb      	str	r3, [r7, #8]
 800926a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009276:	2b40      	cmp	r3, #64	; 0x40
 8009278:	f040 80b4 	bne.w	80093e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009288:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 8140 	beq.w	8009512 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800929a:	429a      	cmp	r2, r3
 800929c:	f080 8139 	bcs.w	8009512 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b2:	f000 8088 	beq.w	80093c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	330c      	adds	r3, #12
 80092bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	330c      	adds	r3, #12
 80092de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1d9      	bne.n	80092b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3314      	adds	r3, #20
 8009308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3314      	adds	r3, #20
 8009322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009326:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800932a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800932e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e1      	bne.n	8009302 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3314      	adds	r3, #20
 8009344:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800934e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3314      	adds	r3, #20
 800935e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e3      	bne.n	800933e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	330c      	adds	r3, #12
 800938a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009396:	f023 0310 	bic.w	r3, r3, #16
 800939a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	330c      	adds	r3, #12
 80093a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80093aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e3      	bne.n	8009384 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fc fe84 	bl	80060ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f8c0 	bl	800955c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093dc:	e099      	b.n	8009512 <HAL_UART_IRQHandler+0x50e>
 80093de:	bf00      	nop
 80093e0:	0800963b 	.word	0x0800963b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 808b 	beq.w	8009516 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8086 	beq.w	8009516 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	330c      	adds	r3, #12
 8009410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800941a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	330c      	adds	r3, #12
 800942a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800942e:	647a      	str	r2, [r7, #68]	; 0x44
 8009430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800943c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e3      	bne.n	800940a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3314      	adds	r3, #20
 8009448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	623b      	str	r3, [r7, #32]
   return(result);
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	f023 0301 	bic.w	r3, r3, #1
 8009458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3314      	adds	r3, #20
 8009462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009466:	633a      	str	r2, [r7, #48]	; 0x30
 8009468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800946c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e3      	bne.n	8009442 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	330c      	adds	r3, #12
 800948e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	e853 3f00 	ldrex	r3, [r3]
 8009496:	60fb      	str	r3, [r7, #12]
   return(result);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 0310 	bic.w	r3, r3, #16
 800949e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	330c      	adds	r3, #12
 80094a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094ac:	61fa      	str	r2, [r7, #28]
 80094ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	69b9      	ldr	r1, [r7, #24]
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	617b      	str	r3, [r7, #20]
   return(result);
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e3      	bne.n	8009488 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f848 	bl	800955c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094cc:	e023      	b.n	8009516 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d009      	beq.n	80094ee <HAL_UART_IRQHandler+0x4ea>
 80094da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8bb 	bl	8009662 <UART_Transmit_IT>
    return;
 80094ec:	e014      	b.n	8009518 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <HAL_UART_IRQHandler+0x514>
 80094fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	d008      	beq.n	8009518 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f8fb 	bl	8009702 <UART_EndTransmit_IT>
    return;
 800950c:	e004      	b.n	8009518 <HAL_UART_IRQHandler+0x514>
    return;
 800950e:	bf00      	nop
 8009510:	e002      	b.n	8009518 <HAL_UART_IRQHandler+0x514>
      return;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <HAL_UART_IRQHandler+0x514>
      return;
 8009516:	bf00      	nop
  }
}
 8009518:	37e8      	adds	r7, #232	; 0xe8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop

08009520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b095      	sub	sp, #84	; 0x54
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	330c      	adds	r3, #12
 8009582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800958c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800959c:	643a      	str	r2, [r7, #64]	; 0x40
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e5      	bne.n	800957c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3314      	adds	r3, #20
 80095b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	61fb      	str	r3, [r7, #28]
   return(result);
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f023 0301 	bic.w	r3, r3, #1
 80095c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3314      	adds	r3, #20
 80095ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e5      	bne.n	80095b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d119      	bne.n	8009620 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	330c      	adds	r3, #12
 80095f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f023 0310 	bic.w	r3, r3, #16
 8009602:	647b      	str	r3, [r7, #68]	; 0x44
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	330c      	adds	r3, #12
 800960a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800960c:	61ba      	str	r2, [r7, #24]
 800960e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	6979      	ldr	r1, [r7, #20]
 8009612:	69ba      	ldr	r2, [r7, #24]
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	613b      	str	r3, [r7, #16]
   return(result);
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e5      	bne.n	80095ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2220      	movs	r2, #32
 8009624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800962e:	bf00      	nop
 8009630:	3754      	adds	r7, #84	; 0x54
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff ff77 	bl	8009548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b21      	cmp	r3, #33	; 0x21
 8009674:	d13e      	bne.n	80096f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967e:	d114      	bne.n	80096aa <UART_Transmit_IT+0x48>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d110      	bne.n	80096aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800969c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	1c9a      	adds	r2, r3, #2
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	621a      	str	r2, [r3, #32]
 80096a8:	e008      	b.n	80096bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	1c59      	adds	r1, r3, #1
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6211      	str	r1, [r2, #32]
 80096b4:	781a      	ldrb	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4619      	mov	r1, r3
 80096ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10f      	bne.n	80096f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	e000      	b.n	80096f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096f4:	2302      	movs	r3, #2
  }
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009718:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2220      	movs	r2, #32
 800971e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fefc 	bl	8009520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b08c      	sub	sp, #48	; 0x30
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b22      	cmp	r3, #34	; 0x22
 8009744:	f040 80ab 	bne.w	800989e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009750:	d117      	bne.n	8009782 <UART_Receive_IT+0x50>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d113      	bne.n	8009782 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	b29b      	uxth	r3, r3
 800976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009770:	b29a      	uxth	r2, r3
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977a:	1c9a      	adds	r2, r3, #2
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	629a      	str	r2, [r3, #40]	; 0x28
 8009780:	e026      	b.n	80097d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009788:	2300      	movs	r3, #0
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009794:	d007      	beq.n	80097a6 <UART_Receive_IT+0x74>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <UART_Receive_IT+0x82>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	e008      	b.n	80097c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	b29b      	uxth	r3, r3
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	4619      	mov	r1, r3
 80097de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d15a      	bne.n	800989a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 0220 	bic.w	r2, r2, #32
 80097f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695a      	ldr	r2, [r3, #20]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0201 	bic.w	r2, r2, #1
 8009812:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2220      	movs	r2, #32
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009820:	2b01      	cmp	r3, #1
 8009822:	d135      	bne.n	8009890 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	330c      	adds	r3, #12
 8009830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	613b      	str	r3, [r7, #16]
   return(result);
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f023 0310 	bic.w	r3, r3, #16
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	330c      	adds	r3, #12
 8009848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984a:	623a      	str	r2, [r7, #32]
 800984c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	69f9      	ldr	r1, [r7, #28]
 8009850:	6a3a      	ldr	r2, [r7, #32]
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	61bb      	str	r3, [r7, #24]
   return(result);
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e5      	bne.n	800982a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b10      	cmp	r3, #16
 800986a:	d10a      	bne.n	8009882 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff fe67 	bl	800955c <HAL_UARTEx_RxEventCallback>
 800988e:	e002      	b.n	8009896 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff fe4f 	bl	8009534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e002      	b.n	80098a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	e000      	b.n	80098a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800989e:	2302      	movs	r3, #2
  }
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3730      	adds	r7, #48	; 0x30
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	b09f      	sub	sp, #124	; 0x7c
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098be:	68d9      	ldr	r1, [r3, #12]
 80098c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	ea40 0301 	orr.w	r3, r0, r1
 80098c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	431a      	orrs	r2, r3
 80098da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	4313      	orrs	r3, r2
 80098e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80098e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098ec:	f021 010c 	bic.w	r1, r1, #12
 80098f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098f6:	430b      	orrs	r3, r1
 80098f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009906:	6999      	ldr	r1, [r3, #24]
 8009908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	ea40 0301 	orr.w	r3, r0, r1
 8009910:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4bc5      	ldr	r3, [pc, #788]	; (8009c2c <UART_SetConfig+0x384>)
 8009918:	429a      	cmp	r2, r3
 800991a:	d004      	beq.n	8009926 <UART_SetConfig+0x7e>
 800991c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	4bc3      	ldr	r3, [pc, #780]	; (8009c30 <UART_SetConfig+0x388>)
 8009922:	429a      	cmp	r2, r3
 8009924:	d103      	bne.n	800992e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009926:	f7fe fb7f 	bl	8008028 <HAL_RCC_GetPCLK2Freq>
 800992a:	6778      	str	r0, [r7, #116]	; 0x74
 800992c:	e002      	b.n	8009934 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800992e:	f7fe fb67 	bl	8008000 <HAL_RCC_GetPCLK1Freq>
 8009932:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800993c:	f040 80b6 	bne.w	8009aac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009942:	461c      	mov	r4, r3
 8009944:	f04f 0500 	mov.w	r5, #0
 8009948:	4622      	mov	r2, r4
 800994a:	462b      	mov	r3, r5
 800994c:	1891      	adds	r1, r2, r2
 800994e:	6439      	str	r1, [r7, #64]	; 0x40
 8009950:	415b      	adcs	r3, r3
 8009952:	647b      	str	r3, [r7, #68]	; 0x44
 8009954:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009958:	1912      	adds	r2, r2, r4
 800995a:	eb45 0303 	adc.w	r3, r5, r3
 800995e:	f04f 0000 	mov.w	r0, #0
 8009962:	f04f 0100 	mov.w	r1, #0
 8009966:	00d9      	lsls	r1, r3, #3
 8009968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800996c:	00d0      	lsls	r0, r2, #3
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	1911      	adds	r1, r2, r4
 8009974:	6639      	str	r1, [r7, #96]	; 0x60
 8009976:	416b      	adcs	r3, r5
 8009978:	667b      	str	r3, [r7, #100]	; 0x64
 800997a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	461a      	mov	r2, r3
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	1891      	adds	r1, r2, r2
 8009986:	63b9      	str	r1, [r7, #56]	; 0x38
 8009988:	415b      	adcs	r3, r3
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800998c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009990:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009994:	f7f6 fc74 	bl	8000280 <__aeabi_uldivmod>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4ba5      	ldr	r3, [pc, #660]	; (8009c34 <UART_SetConfig+0x38c>)
 800999e:	fba3 2302 	umull	r2, r3, r3, r2
 80099a2:	095b      	lsrs	r3, r3, #5
 80099a4:	011e      	lsls	r6, r3, #4
 80099a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a8:	461c      	mov	r4, r3
 80099aa:	f04f 0500 	mov.w	r5, #0
 80099ae:	4622      	mov	r2, r4
 80099b0:	462b      	mov	r3, r5
 80099b2:	1891      	adds	r1, r2, r2
 80099b4:	6339      	str	r1, [r7, #48]	; 0x30
 80099b6:	415b      	adcs	r3, r3
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
 80099ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80099be:	1912      	adds	r2, r2, r4
 80099c0:	eb45 0303 	adc.w	r3, r5, r3
 80099c4:	f04f 0000 	mov.w	r0, #0
 80099c8:	f04f 0100 	mov.w	r1, #0
 80099cc:	00d9      	lsls	r1, r3, #3
 80099ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099d2:	00d0      	lsls	r0, r2, #3
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	1911      	adds	r1, r2, r4
 80099da:	65b9      	str	r1, [r7, #88]	; 0x58
 80099dc:	416b      	adcs	r3, r5
 80099de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	461a      	mov	r2, r3
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	1891      	adds	r1, r2, r2
 80099ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80099ee:	415b      	adcs	r3, r3
 80099f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099fa:	f7f6 fc41 	bl	8000280 <__aeabi_uldivmod>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4b8c      	ldr	r3, [pc, #560]	; (8009c34 <UART_SetConfig+0x38c>)
 8009a04:	fba3 1302 	umull	r1, r3, r3, r2
 8009a08:	095b      	lsrs	r3, r3, #5
 8009a0a:	2164      	movs	r1, #100	; 0x64
 8009a0c:	fb01 f303 	mul.w	r3, r1, r3
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	3332      	adds	r3, #50	; 0x32
 8009a16:	4a87      	ldr	r2, [pc, #540]	; (8009c34 <UART_SetConfig+0x38c>)
 8009a18:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1c:	095b      	lsrs	r3, r3, #5
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a24:	441e      	add	r6, r3
 8009a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f04f 0100 	mov.w	r1, #0
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	1894      	adds	r4, r2, r2
 8009a34:	623c      	str	r4, [r7, #32]
 8009a36:	415b      	adcs	r3, r3
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a3e:	1812      	adds	r2, r2, r0
 8009a40:	eb41 0303 	adc.w	r3, r1, r3
 8009a44:	f04f 0400 	mov.w	r4, #0
 8009a48:	f04f 0500 	mov.w	r5, #0
 8009a4c:	00dd      	lsls	r5, r3, #3
 8009a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a52:	00d4      	lsls	r4, r2, #3
 8009a54:	4622      	mov	r2, r4
 8009a56:	462b      	mov	r3, r5
 8009a58:	1814      	adds	r4, r2, r0
 8009a5a:	653c      	str	r4, [r7, #80]	; 0x50
 8009a5c:	414b      	adcs	r3, r1
 8009a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	461a      	mov	r2, r3
 8009a66:	f04f 0300 	mov.w	r3, #0
 8009a6a:	1891      	adds	r1, r2, r2
 8009a6c:	61b9      	str	r1, [r7, #24]
 8009a6e:	415b      	adcs	r3, r3
 8009a70:	61fb      	str	r3, [r7, #28]
 8009a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a7a:	f7f6 fc01 	bl	8000280 <__aeabi_uldivmod>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4b6c      	ldr	r3, [pc, #432]	; (8009c34 <UART_SetConfig+0x38c>)
 8009a84:	fba3 1302 	umull	r1, r3, r3, r2
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	2164      	movs	r1, #100	; 0x64
 8009a8c:	fb01 f303 	mul.w	r3, r1, r3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	3332      	adds	r3, #50	; 0x32
 8009a96:	4a67      	ldr	r2, [pc, #412]	; (8009c34 <UART_SetConfig+0x38c>)
 8009a98:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9c:	095b      	lsrs	r3, r3, #5
 8009a9e:	f003 0207 	and.w	r2, r3, #7
 8009aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4432      	add	r2, r6
 8009aa8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009aaa:	e0b9      	b.n	8009c20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aae:	461c      	mov	r4, r3
 8009ab0:	f04f 0500 	mov.w	r5, #0
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	1891      	adds	r1, r2, r2
 8009aba:	6139      	str	r1, [r7, #16]
 8009abc:	415b      	adcs	r3, r3
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009ac4:	1912      	adds	r2, r2, r4
 8009ac6:	eb45 0303 	adc.w	r3, r5, r3
 8009aca:	f04f 0000 	mov.w	r0, #0
 8009ace:	f04f 0100 	mov.w	r1, #0
 8009ad2:	00d9      	lsls	r1, r3, #3
 8009ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ad8:	00d0      	lsls	r0, r2, #3
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	eb12 0804 	adds.w	r8, r2, r4
 8009ae2:	eb43 0905 	adc.w	r9, r3, r5
 8009ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f04f 0100 	mov.w	r1, #0
 8009af0:	f04f 0200 	mov.w	r2, #0
 8009af4:	f04f 0300 	mov.w	r3, #0
 8009af8:	008b      	lsls	r3, r1, #2
 8009afa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009afe:	0082      	lsls	r2, r0, #2
 8009b00:	4640      	mov	r0, r8
 8009b02:	4649      	mov	r1, r9
 8009b04:	f7f6 fbbc 	bl	8000280 <__aeabi_uldivmod>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4b49      	ldr	r3, [pc, #292]	; (8009c34 <UART_SetConfig+0x38c>)
 8009b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b12:	095b      	lsrs	r3, r3, #5
 8009b14:	011e      	lsls	r6, r3, #4
 8009b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f04f 0100 	mov.w	r1, #0
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	1894      	adds	r4, r2, r2
 8009b24:	60bc      	str	r4, [r7, #8]
 8009b26:	415b      	adcs	r3, r3
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b2e:	1812      	adds	r2, r2, r0
 8009b30:	eb41 0303 	adc.w	r3, r1, r3
 8009b34:	f04f 0400 	mov.w	r4, #0
 8009b38:	f04f 0500 	mov.w	r5, #0
 8009b3c:	00dd      	lsls	r5, r3, #3
 8009b3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b42:	00d4      	lsls	r4, r2, #3
 8009b44:	4622      	mov	r2, r4
 8009b46:	462b      	mov	r3, r5
 8009b48:	1814      	adds	r4, r2, r0
 8009b4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8009b4c:	414b      	adcs	r3, r1
 8009b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f04f 0100 	mov.w	r1, #0
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	f04f 0300 	mov.w	r3, #0
 8009b62:	008b      	lsls	r3, r1, #2
 8009b64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b68:	0082      	lsls	r2, r0, #2
 8009b6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009b6e:	f7f6 fb87 	bl	8000280 <__aeabi_uldivmod>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4b2f      	ldr	r3, [pc, #188]	; (8009c34 <UART_SetConfig+0x38c>)
 8009b78:	fba3 1302 	umull	r1, r3, r3, r2
 8009b7c:	095b      	lsrs	r3, r3, #5
 8009b7e:	2164      	movs	r1, #100	; 0x64
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	011b      	lsls	r3, r3, #4
 8009b88:	3332      	adds	r3, #50	; 0x32
 8009b8a:	4a2a      	ldr	r2, [pc, #168]	; (8009c34 <UART_SetConfig+0x38c>)
 8009b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b96:	441e      	add	r6, r3
 8009b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f04f 0100 	mov.w	r1, #0
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	1894      	adds	r4, r2, r2
 8009ba6:	603c      	str	r4, [r7, #0]
 8009ba8:	415b      	adcs	r3, r3
 8009baa:	607b      	str	r3, [r7, #4]
 8009bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb0:	1812      	adds	r2, r2, r0
 8009bb2:	eb41 0303 	adc.w	r3, r1, r3
 8009bb6:	f04f 0400 	mov.w	r4, #0
 8009bba:	f04f 0500 	mov.w	r5, #0
 8009bbe:	00dd      	lsls	r5, r3, #3
 8009bc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009bc4:	00d4      	lsls	r4, r2, #3
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	462b      	mov	r3, r5
 8009bca:	eb12 0a00 	adds.w	sl, r2, r0
 8009bce:	eb43 0b01 	adc.w	fp, r3, r1
 8009bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f04f 0100 	mov.w	r1, #0
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	008b      	lsls	r3, r1, #2
 8009be6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009bea:	0082      	lsls	r2, r0, #2
 8009bec:	4650      	mov	r0, sl
 8009bee:	4659      	mov	r1, fp
 8009bf0:	f7f6 fb46 	bl	8000280 <__aeabi_uldivmod>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4b0e      	ldr	r3, [pc, #56]	; (8009c34 <UART_SetConfig+0x38c>)
 8009bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8009bfe:	095b      	lsrs	r3, r3, #5
 8009c00:	2164      	movs	r1, #100	; 0x64
 8009c02:	fb01 f303 	mul.w	r3, r1, r3
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	3332      	adds	r3, #50	; 0x32
 8009c0c:	4a09      	ldr	r2, [pc, #36]	; (8009c34 <UART_SetConfig+0x38c>)
 8009c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c12:	095b      	lsrs	r3, r3, #5
 8009c14:	f003 020f 	and.w	r2, r3, #15
 8009c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4432      	add	r2, r6
 8009c1e:	609a      	str	r2, [r3, #8]
}
 8009c20:	bf00      	nop
 8009c22:	377c      	adds	r7, #124	; 0x7c
 8009c24:	46bd      	mov	sp, r7
 8009c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2a:	bf00      	nop
 8009c2c:	40011000 	.word	0x40011000
 8009c30:	40011400 	.word	0x40011400
 8009c34:	51eb851f 	.word	0x51eb851f

08009c38 <__errno>:
 8009c38:	4b01      	ldr	r3, [pc, #4]	; (8009c40 <__errno+0x8>)
 8009c3a:	6818      	ldr	r0, [r3, #0]
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	200000e0 	.word	0x200000e0

08009c44 <__libc_init_array>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	4d0d      	ldr	r5, [pc, #52]	; (8009c7c <__libc_init_array+0x38>)
 8009c48:	4c0d      	ldr	r4, [pc, #52]	; (8009c80 <__libc_init_array+0x3c>)
 8009c4a:	1b64      	subs	r4, r4, r5
 8009c4c:	10a4      	asrs	r4, r4, #2
 8009c4e:	2600      	movs	r6, #0
 8009c50:	42a6      	cmp	r6, r4
 8009c52:	d109      	bne.n	8009c68 <__libc_init_array+0x24>
 8009c54:	4d0b      	ldr	r5, [pc, #44]	; (8009c84 <__libc_init_array+0x40>)
 8009c56:	4c0c      	ldr	r4, [pc, #48]	; (8009c88 <__libc_init_array+0x44>)
 8009c58:	f000 fc4e 	bl	800a4f8 <_init>
 8009c5c:	1b64      	subs	r4, r4, r5
 8009c5e:	10a4      	asrs	r4, r4, #2
 8009c60:	2600      	movs	r6, #0
 8009c62:	42a6      	cmp	r6, r4
 8009c64:	d105      	bne.n	8009c72 <__libc_init_array+0x2e>
 8009c66:	bd70      	pop	{r4, r5, r6, pc}
 8009c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c6c:	4798      	blx	r3
 8009c6e:	3601      	adds	r6, #1
 8009c70:	e7ee      	b.n	8009c50 <__libc_init_array+0xc>
 8009c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c76:	4798      	blx	r3
 8009c78:	3601      	adds	r6, #1
 8009c7a:	e7f2      	b.n	8009c62 <__libc_init_array+0x1e>
 8009c7c:	0800a5b8 	.word	0x0800a5b8
 8009c80:	0800a5b8 	.word	0x0800a5b8
 8009c84:	0800a5b8 	.word	0x0800a5b8
 8009c88:	0800a5bc 	.word	0x0800a5bc

08009c8c <memcpy>:
 8009c8c:	440a      	add	r2, r1
 8009c8e:	4291      	cmp	r1, r2
 8009c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c94:	d100      	bne.n	8009c98 <memcpy+0xc>
 8009c96:	4770      	bx	lr
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ca2:	4291      	cmp	r1, r2
 8009ca4:	d1f9      	bne.n	8009c9a <memcpy+0xe>
 8009ca6:	bd10      	pop	{r4, pc}

08009ca8 <memset>:
 8009ca8:	4402      	add	r2, r0
 8009caa:	4603      	mov	r3, r0
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d100      	bne.n	8009cb2 <memset+0xa>
 8009cb0:	4770      	bx	lr
 8009cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb6:	e7f9      	b.n	8009cac <memset+0x4>

08009cb8 <siprintf>:
 8009cb8:	b40e      	push	{r1, r2, r3}
 8009cba:	b500      	push	{lr}
 8009cbc:	b09c      	sub	sp, #112	; 0x70
 8009cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8009cc0:	9002      	str	r0, [sp, #8]
 8009cc2:	9006      	str	r0, [sp, #24]
 8009cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cc8:	4809      	ldr	r0, [pc, #36]	; (8009cf0 <siprintf+0x38>)
 8009cca:	9107      	str	r1, [sp, #28]
 8009ccc:	9104      	str	r1, [sp, #16]
 8009cce:	4909      	ldr	r1, [pc, #36]	; (8009cf4 <siprintf+0x3c>)
 8009cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd4:	9105      	str	r1, [sp, #20]
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	a902      	add	r1, sp, #8
 8009cdc:	f000 f868 	bl	8009db0 <_svfiprintf_r>
 8009ce0:	9b02      	ldr	r3, [sp, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	b01c      	add	sp, #112	; 0x70
 8009ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cec:	b003      	add	sp, #12
 8009cee:	4770      	bx	lr
 8009cf0:	200000e0 	.word	0x200000e0
 8009cf4:	ffff0208 	.word	0xffff0208

08009cf8 <__ssputs_r>:
 8009cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	688e      	ldr	r6, [r1, #8]
 8009cfe:	429e      	cmp	r6, r3
 8009d00:	4682      	mov	sl, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	4690      	mov	r8, r2
 8009d06:	461f      	mov	r7, r3
 8009d08:	d838      	bhi.n	8009d7c <__ssputs_r+0x84>
 8009d0a:	898a      	ldrh	r2, [r1, #12]
 8009d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d10:	d032      	beq.n	8009d78 <__ssputs_r+0x80>
 8009d12:	6825      	ldr	r5, [r4, #0]
 8009d14:	6909      	ldr	r1, [r1, #16]
 8009d16:	eba5 0901 	sub.w	r9, r5, r1
 8009d1a:	6965      	ldr	r5, [r4, #20]
 8009d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d24:	3301      	adds	r3, #1
 8009d26:	444b      	add	r3, r9
 8009d28:	106d      	asrs	r5, r5, #1
 8009d2a:	429d      	cmp	r5, r3
 8009d2c:	bf38      	it	cc
 8009d2e:	461d      	movcc	r5, r3
 8009d30:	0553      	lsls	r3, r2, #21
 8009d32:	d531      	bpl.n	8009d98 <__ssputs_r+0xa0>
 8009d34:	4629      	mov	r1, r5
 8009d36:	f000 fb39 	bl	800a3ac <_malloc_r>
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	b950      	cbnz	r0, 8009d54 <__ssputs_r+0x5c>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	f8ca 3000 	str.w	r3, [sl]
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d54:	6921      	ldr	r1, [r4, #16]
 8009d56:	464a      	mov	r2, r9
 8009d58:	f7ff ff98 	bl	8009c8c <memcpy>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	6126      	str	r6, [r4, #16]
 8009d6a:	6165      	str	r5, [r4, #20]
 8009d6c:	444e      	add	r6, r9
 8009d6e:	eba5 0509 	sub.w	r5, r5, r9
 8009d72:	6026      	str	r6, [r4, #0]
 8009d74:	60a5      	str	r5, [r4, #8]
 8009d76:	463e      	mov	r6, r7
 8009d78:	42be      	cmp	r6, r7
 8009d7a:	d900      	bls.n	8009d7e <__ssputs_r+0x86>
 8009d7c:	463e      	mov	r6, r7
 8009d7e:	4632      	mov	r2, r6
 8009d80:	6820      	ldr	r0, [r4, #0]
 8009d82:	4641      	mov	r1, r8
 8009d84:	f000 faa8 	bl	800a2d8 <memmove>
 8009d88:	68a3      	ldr	r3, [r4, #8]
 8009d8a:	6822      	ldr	r2, [r4, #0]
 8009d8c:	1b9b      	subs	r3, r3, r6
 8009d8e:	4432      	add	r2, r6
 8009d90:	60a3      	str	r3, [r4, #8]
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	2000      	movs	r0, #0
 8009d96:	e7db      	b.n	8009d50 <__ssputs_r+0x58>
 8009d98:	462a      	mov	r2, r5
 8009d9a:	f000 fb61 	bl	800a460 <_realloc_r>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d1e1      	bne.n	8009d68 <__ssputs_r+0x70>
 8009da4:	6921      	ldr	r1, [r4, #16]
 8009da6:	4650      	mov	r0, sl
 8009da8:	f000 fab0 	bl	800a30c <_free_r>
 8009dac:	e7c7      	b.n	8009d3e <__ssputs_r+0x46>
	...

08009db0 <_svfiprintf_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	4698      	mov	r8, r3
 8009db6:	898b      	ldrh	r3, [r1, #12]
 8009db8:	061b      	lsls	r3, r3, #24
 8009dba:	b09d      	sub	sp, #116	; 0x74
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	d50e      	bpl.n	8009de2 <_svfiprintf_r+0x32>
 8009dc4:	690b      	ldr	r3, [r1, #16]
 8009dc6:	b963      	cbnz	r3, 8009de2 <_svfiprintf_r+0x32>
 8009dc8:	2140      	movs	r1, #64	; 0x40
 8009dca:	f000 faef 	bl	800a3ac <_malloc_r>
 8009dce:	6028      	str	r0, [r5, #0]
 8009dd0:	6128      	str	r0, [r5, #16]
 8009dd2:	b920      	cbnz	r0, 8009dde <_svfiprintf_r+0x2e>
 8009dd4:	230c      	movs	r3, #12
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	e0d1      	b.n	8009f82 <_svfiprintf_r+0x1d2>
 8009dde:	2340      	movs	r3, #64	; 0x40
 8009de0:	616b      	str	r3, [r5, #20]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9309      	str	r3, [sp, #36]	; 0x24
 8009de6:	2320      	movs	r3, #32
 8009de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df0:	2330      	movs	r3, #48	; 0x30
 8009df2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f9c <_svfiprintf_r+0x1ec>
 8009df6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dfa:	f04f 0901 	mov.w	r9, #1
 8009dfe:	4623      	mov	r3, r4
 8009e00:	469a      	mov	sl, r3
 8009e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e06:	b10a      	cbz	r2, 8009e0c <_svfiprintf_r+0x5c>
 8009e08:	2a25      	cmp	r2, #37	; 0x25
 8009e0a:	d1f9      	bne.n	8009e00 <_svfiprintf_r+0x50>
 8009e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e10:	d00b      	beq.n	8009e2a <_svfiprintf_r+0x7a>
 8009e12:	465b      	mov	r3, fp
 8009e14:	4622      	mov	r2, r4
 8009e16:	4629      	mov	r1, r5
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff ff6d 	bl	8009cf8 <__ssputs_r>
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f000 80aa 	beq.w	8009f78 <_svfiprintf_r+0x1c8>
 8009e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e26:	445a      	add	r2, fp
 8009e28:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 80a2 	beq.w	8009f78 <_svfiprintf_r+0x1c8>
 8009e34:	2300      	movs	r3, #0
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e3e:	f10a 0a01 	add.w	sl, sl, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	9307      	str	r3, [sp, #28]
 8009e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e4c:	4654      	mov	r4, sl
 8009e4e:	2205      	movs	r2, #5
 8009e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e54:	4851      	ldr	r0, [pc, #324]	; (8009f9c <_svfiprintf_r+0x1ec>)
 8009e56:	f7f6 f9c3 	bl	80001e0 <memchr>
 8009e5a:	9a04      	ldr	r2, [sp, #16]
 8009e5c:	b9d8      	cbnz	r0, 8009e96 <_svfiprintf_r+0xe6>
 8009e5e:	06d0      	lsls	r0, r2, #27
 8009e60:	bf44      	itt	mi
 8009e62:	2320      	movmi	r3, #32
 8009e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e68:	0711      	lsls	r1, r2, #28
 8009e6a:	bf44      	itt	mi
 8009e6c:	232b      	movmi	r3, #43	; 0x2b
 8009e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e72:	f89a 3000 	ldrb.w	r3, [sl]
 8009e76:	2b2a      	cmp	r3, #42	; 0x2a
 8009e78:	d015      	beq.n	8009ea6 <_svfiprintf_r+0xf6>
 8009e7a:	9a07      	ldr	r2, [sp, #28]
 8009e7c:	4654      	mov	r4, sl
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f04f 0c0a 	mov.w	ip, #10
 8009e84:	4621      	mov	r1, r4
 8009e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e8a:	3b30      	subs	r3, #48	; 0x30
 8009e8c:	2b09      	cmp	r3, #9
 8009e8e:	d94e      	bls.n	8009f2e <_svfiprintf_r+0x17e>
 8009e90:	b1b0      	cbz	r0, 8009ec0 <_svfiprintf_r+0x110>
 8009e92:	9207      	str	r2, [sp, #28]
 8009e94:	e014      	b.n	8009ec0 <_svfiprintf_r+0x110>
 8009e96:	eba0 0308 	sub.w	r3, r0, r8
 8009e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	46a2      	mov	sl, r4
 8009ea4:	e7d2      	b.n	8009e4c <_svfiprintf_r+0x9c>
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	1d19      	adds	r1, r3, #4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	9103      	str	r1, [sp, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bfbb      	ittet	lt
 8009eb2:	425b      	neglt	r3, r3
 8009eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009eb8:	9307      	strge	r3, [sp, #28]
 8009eba:	9307      	strlt	r3, [sp, #28]
 8009ebc:	bfb8      	it	lt
 8009ebe:	9204      	strlt	r2, [sp, #16]
 8009ec0:	7823      	ldrb	r3, [r4, #0]
 8009ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec4:	d10c      	bne.n	8009ee0 <_svfiprintf_r+0x130>
 8009ec6:	7863      	ldrb	r3, [r4, #1]
 8009ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eca:	d135      	bne.n	8009f38 <_svfiprintf_r+0x188>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	1d1a      	adds	r2, r3, #4
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	9203      	str	r2, [sp, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	bfb8      	it	lt
 8009ed8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009edc:	3402      	adds	r4, #2
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fac <_svfiprintf_r+0x1fc>
 8009ee4:	7821      	ldrb	r1, [r4, #0]
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	4650      	mov	r0, sl
 8009eea:	f7f6 f979 	bl	80001e0 <memchr>
 8009eee:	b140      	cbz	r0, 8009f02 <_svfiprintf_r+0x152>
 8009ef0:	2340      	movs	r3, #64	; 0x40
 8009ef2:	eba0 000a 	sub.w	r0, r0, sl
 8009ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	4303      	orrs	r3, r0
 8009efe:	3401      	adds	r4, #1
 8009f00:	9304      	str	r3, [sp, #16]
 8009f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f06:	4826      	ldr	r0, [pc, #152]	; (8009fa0 <_svfiprintf_r+0x1f0>)
 8009f08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f0c:	2206      	movs	r2, #6
 8009f0e:	f7f6 f967 	bl	80001e0 <memchr>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d038      	beq.n	8009f88 <_svfiprintf_r+0x1d8>
 8009f16:	4b23      	ldr	r3, [pc, #140]	; (8009fa4 <_svfiprintf_r+0x1f4>)
 8009f18:	bb1b      	cbnz	r3, 8009f62 <_svfiprintf_r+0x1b2>
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	3307      	adds	r3, #7
 8009f1e:	f023 0307 	bic.w	r3, r3, #7
 8009f22:	3308      	adds	r3, #8
 8009f24:	9303      	str	r3, [sp, #12]
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	4433      	add	r3, r6
 8009f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2c:	e767      	b.n	8009dfe <_svfiprintf_r+0x4e>
 8009f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f32:	460c      	mov	r4, r1
 8009f34:	2001      	movs	r0, #1
 8009f36:	e7a5      	b.n	8009e84 <_svfiprintf_r+0xd4>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	3401      	adds	r4, #1
 8009f3c:	9305      	str	r3, [sp, #20]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	f04f 0c0a 	mov.w	ip, #10
 8009f44:	4620      	mov	r0, r4
 8009f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f4a:	3a30      	subs	r2, #48	; 0x30
 8009f4c:	2a09      	cmp	r2, #9
 8009f4e:	d903      	bls.n	8009f58 <_svfiprintf_r+0x1a8>
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0c5      	beq.n	8009ee0 <_svfiprintf_r+0x130>
 8009f54:	9105      	str	r1, [sp, #20]
 8009f56:	e7c3      	b.n	8009ee0 <_svfiprintf_r+0x130>
 8009f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7f0      	b.n	8009f44 <_svfiprintf_r+0x194>
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	462a      	mov	r2, r5
 8009f68:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <_svfiprintf_r+0x1f8>)
 8009f6a:	a904      	add	r1, sp, #16
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f3af 8000 	nop.w
 8009f72:	1c42      	adds	r2, r0, #1
 8009f74:	4606      	mov	r6, r0
 8009f76:	d1d6      	bne.n	8009f26 <_svfiprintf_r+0x176>
 8009f78:	89ab      	ldrh	r3, [r5, #12]
 8009f7a:	065b      	lsls	r3, r3, #25
 8009f7c:	f53f af2c 	bmi.w	8009dd8 <_svfiprintf_r+0x28>
 8009f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f82:	b01d      	add	sp, #116	; 0x74
 8009f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f88:	ab03      	add	r3, sp, #12
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <_svfiprintf_r+0x1f8>)
 8009f90:	a904      	add	r1, sp, #16
 8009f92:	4638      	mov	r0, r7
 8009f94:	f000 f87a 	bl	800a08c <_printf_i>
 8009f98:	e7eb      	b.n	8009f72 <_svfiprintf_r+0x1c2>
 8009f9a:	bf00      	nop
 8009f9c:	0800a57c 	.word	0x0800a57c
 8009fa0:	0800a586 	.word	0x0800a586
 8009fa4:	00000000 	.word	0x00000000
 8009fa8:	08009cf9 	.word	0x08009cf9
 8009fac:	0800a582 	.word	0x0800a582

08009fb0 <_printf_common>:
 8009fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb4:	4616      	mov	r6, r2
 8009fb6:	4699      	mov	r9, r3
 8009fb8:	688a      	ldr	r2, [r1, #8]
 8009fba:	690b      	ldr	r3, [r1, #16]
 8009fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	bfb8      	it	lt
 8009fc4:	4613      	movlt	r3, r2
 8009fc6:	6033      	str	r3, [r6, #0]
 8009fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fcc:	4607      	mov	r7, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	b10a      	cbz	r2, 8009fd6 <_printf_common+0x26>
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	6033      	str	r3, [r6, #0]
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	0699      	lsls	r1, r3, #26
 8009fda:	bf42      	ittt	mi
 8009fdc:	6833      	ldrmi	r3, [r6, #0]
 8009fde:	3302      	addmi	r3, #2
 8009fe0:	6033      	strmi	r3, [r6, #0]
 8009fe2:	6825      	ldr	r5, [r4, #0]
 8009fe4:	f015 0506 	ands.w	r5, r5, #6
 8009fe8:	d106      	bne.n	8009ff8 <_printf_common+0x48>
 8009fea:	f104 0a19 	add.w	sl, r4, #25
 8009fee:	68e3      	ldr	r3, [r4, #12]
 8009ff0:	6832      	ldr	r2, [r6, #0]
 8009ff2:	1a9b      	subs	r3, r3, r2
 8009ff4:	42ab      	cmp	r3, r5
 8009ff6:	dc26      	bgt.n	800a046 <_printf_common+0x96>
 8009ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ffc:	1e13      	subs	r3, r2, #0
 8009ffe:	6822      	ldr	r2, [r4, #0]
 800a000:	bf18      	it	ne
 800a002:	2301      	movne	r3, #1
 800a004:	0692      	lsls	r2, r2, #26
 800a006:	d42b      	bmi.n	800a060 <_printf_common+0xb0>
 800a008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a00c:	4649      	mov	r1, r9
 800a00e:	4638      	mov	r0, r7
 800a010:	47c0      	blx	r8
 800a012:	3001      	adds	r0, #1
 800a014:	d01e      	beq.n	800a054 <_printf_common+0xa4>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	68e5      	ldr	r5, [r4, #12]
 800a01a:	6832      	ldr	r2, [r6, #0]
 800a01c:	f003 0306 	and.w	r3, r3, #6
 800a020:	2b04      	cmp	r3, #4
 800a022:	bf08      	it	eq
 800a024:	1aad      	subeq	r5, r5, r2
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	6922      	ldr	r2, [r4, #16]
 800a02a:	bf0c      	ite	eq
 800a02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a030:	2500      	movne	r5, #0
 800a032:	4293      	cmp	r3, r2
 800a034:	bfc4      	itt	gt
 800a036:	1a9b      	subgt	r3, r3, r2
 800a038:	18ed      	addgt	r5, r5, r3
 800a03a:	2600      	movs	r6, #0
 800a03c:	341a      	adds	r4, #26
 800a03e:	42b5      	cmp	r5, r6
 800a040:	d11a      	bne.n	800a078 <_printf_common+0xc8>
 800a042:	2000      	movs	r0, #0
 800a044:	e008      	b.n	800a058 <_printf_common+0xa8>
 800a046:	2301      	movs	r3, #1
 800a048:	4652      	mov	r2, sl
 800a04a:	4649      	mov	r1, r9
 800a04c:	4638      	mov	r0, r7
 800a04e:	47c0      	blx	r8
 800a050:	3001      	adds	r0, #1
 800a052:	d103      	bne.n	800a05c <_printf_common+0xac>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05c:	3501      	adds	r5, #1
 800a05e:	e7c6      	b.n	8009fee <_printf_common+0x3e>
 800a060:	18e1      	adds	r1, r4, r3
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	2030      	movs	r0, #48	; 0x30
 800a066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a06a:	4422      	add	r2, r4
 800a06c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a074:	3302      	adds	r3, #2
 800a076:	e7c7      	b.n	800a008 <_printf_common+0x58>
 800a078:	2301      	movs	r3, #1
 800a07a:	4622      	mov	r2, r4
 800a07c:	4649      	mov	r1, r9
 800a07e:	4638      	mov	r0, r7
 800a080:	47c0      	blx	r8
 800a082:	3001      	adds	r0, #1
 800a084:	d0e6      	beq.n	800a054 <_printf_common+0xa4>
 800a086:	3601      	adds	r6, #1
 800a088:	e7d9      	b.n	800a03e <_printf_common+0x8e>
	...

0800a08c <_printf_i>:
 800a08c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	460c      	mov	r4, r1
 800a092:	4691      	mov	r9, r2
 800a094:	7e27      	ldrb	r7, [r4, #24]
 800a096:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a098:	2f78      	cmp	r7, #120	; 0x78
 800a09a:	4680      	mov	r8, r0
 800a09c:	469a      	mov	sl, r3
 800a09e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0a2:	d807      	bhi.n	800a0b4 <_printf_i+0x28>
 800a0a4:	2f62      	cmp	r7, #98	; 0x62
 800a0a6:	d80a      	bhi.n	800a0be <_printf_i+0x32>
 800a0a8:	2f00      	cmp	r7, #0
 800a0aa:	f000 80d8 	beq.w	800a25e <_printf_i+0x1d2>
 800a0ae:	2f58      	cmp	r7, #88	; 0x58
 800a0b0:	f000 80a3 	beq.w	800a1fa <_printf_i+0x16e>
 800a0b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0bc:	e03a      	b.n	800a134 <_printf_i+0xa8>
 800a0be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0c2:	2b15      	cmp	r3, #21
 800a0c4:	d8f6      	bhi.n	800a0b4 <_printf_i+0x28>
 800a0c6:	a001      	add	r0, pc, #4	; (adr r0, 800a0cc <_printf_i+0x40>)
 800a0c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0cc:	0800a125 	.word	0x0800a125
 800a0d0:	0800a139 	.word	0x0800a139
 800a0d4:	0800a0b5 	.word	0x0800a0b5
 800a0d8:	0800a0b5 	.word	0x0800a0b5
 800a0dc:	0800a0b5 	.word	0x0800a0b5
 800a0e0:	0800a0b5 	.word	0x0800a0b5
 800a0e4:	0800a139 	.word	0x0800a139
 800a0e8:	0800a0b5 	.word	0x0800a0b5
 800a0ec:	0800a0b5 	.word	0x0800a0b5
 800a0f0:	0800a0b5 	.word	0x0800a0b5
 800a0f4:	0800a0b5 	.word	0x0800a0b5
 800a0f8:	0800a245 	.word	0x0800a245
 800a0fc:	0800a169 	.word	0x0800a169
 800a100:	0800a227 	.word	0x0800a227
 800a104:	0800a0b5 	.word	0x0800a0b5
 800a108:	0800a0b5 	.word	0x0800a0b5
 800a10c:	0800a267 	.word	0x0800a267
 800a110:	0800a0b5 	.word	0x0800a0b5
 800a114:	0800a169 	.word	0x0800a169
 800a118:	0800a0b5 	.word	0x0800a0b5
 800a11c:	0800a0b5 	.word	0x0800a0b5
 800a120:	0800a22f 	.word	0x0800a22f
 800a124:	680b      	ldr	r3, [r1, #0]
 800a126:	1d1a      	adds	r2, r3, #4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	600a      	str	r2, [r1, #0]
 800a12c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a134:	2301      	movs	r3, #1
 800a136:	e0a3      	b.n	800a280 <_printf_i+0x1f4>
 800a138:	6825      	ldr	r5, [r4, #0]
 800a13a:	6808      	ldr	r0, [r1, #0]
 800a13c:	062e      	lsls	r6, r5, #24
 800a13e:	f100 0304 	add.w	r3, r0, #4
 800a142:	d50a      	bpl.n	800a15a <_printf_i+0xce>
 800a144:	6805      	ldr	r5, [r0, #0]
 800a146:	600b      	str	r3, [r1, #0]
 800a148:	2d00      	cmp	r5, #0
 800a14a:	da03      	bge.n	800a154 <_printf_i+0xc8>
 800a14c:	232d      	movs	r3, #45	; 0x2d
 800a14e:	426d      	negs	r5, r5
 800a150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a154:	485e      	ldr	r0, [pc, #376]	; (800a2d0 <_printf_i+0x244>)
 800a156:	230a      	movs	r3, #10
 800a158:	e019      	b.n	800a18e <_printf_i+0x102>
 800a15a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a15e:	6805      	ldr	r5, [r0, #0]
 800a160:	600b      	str	r3, [r1, #0]
 800a162:	bf18      	it	ne
 800a164:	b22d      	sxthne	r5, r5
 800a166:	e7ef      	b.n	800a148 <_printf_i+0xbc>
 800a168:	680b      	ldr	r3, [r1, #0]
 800a16a:	6825      	ldr	r5, [r4, #0]
 800a16c:	1d18      	adds	r0, r3, #4
 800a16e:	6008      	str	r0, [r1, #0]
 800a170:	0628      	lsls	r0, r5, #24
 800a172:	d501      	bpl.n	800a178 <_printf_i+0xec>
 800a174:	681d      	ldr	r5, [r3, #0]
 800a176:	e002      	b.n	800a17e <_printf_i+0xf2>
 800a178:	0669      	lsls	r1, r5, #25
 800a17a:	d5fb      	bpl.n	800a174 <_printf_i+0xe8>
 800a17c:	881d      	ldrh	r5, [r3, #0]
 800a17e:	4854      	ldr	r0, [pc, #336]	; (800a2d0 <_printf_i+0x244>)
 800a180:	2f6f      	cmp	r7, #111	; 0x6f
 800a182:	bf0c      	ite	eq
 800a184:	2308      	moveq	r3, #8
 800a186:	230a      	movne	r3, #10
 800a188:	2100      	movs	r1, #0
 800a18a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a18e:	6866      	ldr	r6, [r4, #4]
 800a190:	60a6      	str	r6, [r4, #8]
 800a192:	2e00      	cmp	r6, #0
 800a194:	bfa2      	ittt	ge
 800a196:	6821      	ldrge	r1, [r4, #0]
 800a198:	f021 0104 	bicge.w	r1, r1, #4
 800a19c:	6021      	strge	r1, [r4, #0]
 800a19e:	b90d      	cbnz	r5, 800a1a4 <_printf_i+0x118>
 800a1a0:	2e00      	cmp	r6, #0
 800a1a2:	d04d      	beq.n	800a240 <_printf_i+0x1b4>
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1aa:	fb03 5711 	mls	r7, r3, r1, r5
 800a1ae:	5dc7      	ldrb	r7, [r0, r7]
 800a1b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1b4:	462f      	mov	r7, r5
 800a1b6:	42bb      	cmp	r3, r7
 800a1b8:	460d      	mov	r5, r1
 800a1ba:	d9f4      	bls.n	800a1a6 <_printf_i+0x11a>
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d10b      	bne.n	800a1d8 <_printf_i+0x14c>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	07df      	lsls	r7, r3, #31
 800a1c4:	d508      	bpl.n	800a1d8 <_printf_i+0x14c>
 800a1c6:	6923      	ldr	r3, [r4, #16]
 800a1c8:	6861      	ldr	r1, [r4, #4]
 800a1ca:	4299      	cmp	r1, r3
 800a1cc:	bfde      	ittt	le
 800a1ce:	2330      	movle	r3, #48	; 0x30
 800a1d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1d8:	1b92      	subs	r2, r2, r6
 800a1da:	6122      	str	r2, [r4, #16]
 800a1dc:	f8cd a000 	str.w	sl, [sp]
 800a1e0:	464b      	mov	r3, r9
 800a1e2:	aa03      	add	r2, sp, #12
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	f7ff fee2 	bl	8009fb0 <_printf_common>
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d14c      	bne.n	800a28a <_printf_i+0x1fe>
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	b004      	add	sp, #16
 800a1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fa:	4835      	ldr	r0, [pc, #212]	; (800a2d0 <_printf_i+0x244>)
 800a1fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	680e      	ldr	r6, [r1, #0]
 800a204:	061f      	lsls	r7, r3, #24
 800a206:	f856 5b04 	ldr.w	r5, [r6], #4
 800a20a:	600e      	str	r6, [r1, #0]
 800a20c:	d514      	bpl.n	800a238 <_printf_i+0x1ac>
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	bf44      	itt	mi
 800a212:	f043 0320 	orrmi.w	r3, r3, #32
 800a216:	6023      	strmi	r3, [r4, #0]
 800a218:	b91d      	cbnz	r5, 800a222 <_printf_i+0x196>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	f023 0320 	bic.w	r3, r3, #32
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	2310      	movs	r3, #16
 800a224:	e7b0      	b.n	800a188 <_printf_i+0xfc>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	f043 0320 	orr.w	r3, r3, #32
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	2378      	movs	r3, #120	; 0x78
 800a230:	4828      	ldr	r0, [pc, #160]	; (800a2d4 <_printf_i+0x248>)
 800a232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a236:	e7e3      	b.n	800a200 <_printf_i+0x174>
 800a238:	065e      	lsls	r6, r3, #25
 800a23a:	bf48      	it	mi
 800a23c:	b2ad      	uxthmi	r5, r5
 800a23e:	e7e6      	b.n	800a20e <_printf_i+0x182>
 800a240:	4616      	mov	r6, r2
 800a242:	e7bb      	b.n	800a1bc <_printf_i+0x130>
 800a244:	680b      	ldr	r3, [r1, #0]
 800a246:	6826      	ldr	r6, [r4, #0]
 800a248:	6960      	ldr	r0, [r4, #20]
 800a24a:	1d1d      	adds	r5, r3, #4
 800a24c:	600d      	str	r5, [r1, #0]
 800a24e:	0635      	lsls	r5, r6, #24
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	d501      	bpl.n	800a258 <_printf_i+0x1cc>
 800a254:	6018      	str	r0, [r3, #0]
 800a256:	e002      	b.n	800a25e <_printf_i+0x1d2>
 800a258:	0671      	lsls	r1, r6, #25
 800a25a:	d5fb      	bpl.n	800a254 <_printf_i+0x1c8>
 800a25c:	8018      	strh	r0, [r3, #0]
 800a25e:	2300      	movs	r3, #0
 800a260:	6123      	str	r3, [r4, #16]
 800a262:	4616      	mov	r6, r2
 800a264:	e7ba      	b.n	800a1dc <_printf_i+0x150>
 800a266:	680b      	ldr	r3, [r1, #0]
 800a268:	1d1a      	adds	r2, r3, #4
 800a26a:	600a      	str	r2, [r1, #0]
 800a26c:	681e      	ldr	r6, [r3, #0]
 800a26e:	6862      	ldr	r2, [r4, #4]
 800a270:	2100      	movs	r1, #0
 800a272:	4630      	mov	r0, r6
 800a274:	f7f5 ffb4 	bl	80001e0 <memchr>
 800a278:	b108      	cbz	r0, 800a27e <_printf_i+0x1f2>
 800a27a:	1b80      	subs	r0, r0, r6
 800a27c:	6060      	str	r0, [r4, #4]
 800a27e:	6863      	ldr	r3, [r4, #4]
 800a280:	6123      	str	r3, [r4, #16]
 800a282:	2300      	movs	r3, #0
 800a284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a288:	e7a8      	b.n	800a1dc <_printf_i+0x150>
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	4632      	mov	r2, r6
 800a28e:	4649      	mov	r1, r9
 800a290:	4640      	mov	r0, r8
 800a292:	47d0      	blx	sl
 800a294:	3001      	adds	r0, #1
 800a296:	d0ab      	beq.n	800a1f0 <_printf_i+0x164>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	079b      	lsls	r3, r3, #30
 800a29c:	d413      	bmi.n	800a2c6 <_printf_i+0x23a>
 800a29e:	68e0      	ldr	r0, [r4, #12]
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	4298      	cmp	r0, r3
 800a2a4:	bfb8      	it	lt
 800a2a6:	4618      	movlt	r0, r3
 800a2a8:	e7a4      	b.n	800a1f4 <_printf_i+0x168>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	4649      	mov	r1, r9
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	47d0      	blx	sl
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d09b      	beq.n	800a1f0 <_printf_i+0x164>
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	68e3      	ldr	r3, [r4, #12]
 800a2bc:	9903      	ldr	r1, [sp, #12]
 800a2be:	1a5b      	subs	r3, r3, r1
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	dcf2      	bgt.n	800a2aa <_printf_i+0x21e>
 800a2c4:	e7eb      	b.n	800a29e <_printf_i+0x212>
 800a2c6:	2500      	movs	r5, #0
 800a2c8:	f104 0619 	add.w	r6, r4, #25
 800a2cc:	e7f5      	b.n	800a2ba <_printf_i+0x22e>
 800a2ce:	bf00      	nop
 800a2d0:	0800a58d 	.word	0x0800a58d
 800a2d4:	0800a59e 	.word	0x0800a59e

0800a2d8 <memmove>:
 800a2d8:	4288      	cmp	r0, r1
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	eb01 0402 	add.w	r4, r1, r2
 800a2e0:	d902      	bls.n	800a2e8 <memmove+0x10>
 800a2e2:	4284      	cmp	r4, r0
 800a2e4:	4623      	mov	r3, r4
 800a2e6:	d807      	bhi.n	800a2f8 <memmove+0x20>
 800a2e8:	1e43      	subs	r3, r0, #1
 800a2ea:	42a1      	cmp	r1, r4
 800a2ec:	d008      	beq.n	800a300 <memmove+0x28>
 800a2ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2f6:	e7f8      	b.n	800a2ea <memmove+0x12>
 800a2f8:	4402      	add	r2, r0
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	428a      	cmp	r2, r1
 800a2fe:	d100      	bne.n	800a302 <memmove+0x2a>
 800a300:	bd10      	pop	{r4, pc}
 800a302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a30a:	e7f7      	b.n	800a2fc <memmove+0x24>

0800a30c <_free_r>:
 800a30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30e:	2900      	cmp	r1, #0
 800a310:	d048      	beq.n	800a3a4 <_free_r+0x98>
 800a312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a316:	9001      	str	r0, [sp, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f1a1 0404 	sub.w	r4, r1, #4
 800a31e:	bfb8      	it	lt
 800a320:	18e4      	addlt	r4, r4, r3
 800a322:	f000 f8d3 	bl	800a4cc <__malloc_lock>
 800a326:	4a20      	ldr	r2, [pc, #128]	; (800a3a8 <_free_r+0x9c>)
 800a328:	9801      	ldr	r0, [sp, #4]
 800a32a:	6813      	ldr	r3, [r2, #0]
 800a32c:	4615      	mov	r5, r2
 800a32e:	b933      	cbnz	r3, 800a33e <_free_r+0x32>
 800a330:	6063      	str	r3, [r4, #4]
 800a332:	6014      	str	r4, [r2, #0]
 800a334:	b003      	add	sp, #12
 800a336:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a33a:	f000 b8cd 	b.w	800a4d8 <__malloc_unlock>
 800a33e:	42a3      	cmp	r3, r4
 800a340:	d90b      	bls.n	800a35a <_free_r+0x4e>
 800a342:	6821      	ldr	r1, [r4, #0]
 800a344:	1862      	adds	r2, r4, r1
 800a346:	4293      	cmp	r3, r2
 800a348:	bf04      	itt	eq
 800a34a:	681a      	ldreq	r2, [r3, #0]
 800a34c:	685b      	ldreq	r3, [r3, #4]
 800a34e:	6063      	str	r3, [r4, #4]
 800a350:	bf04      	itt	eq
 800a352:	1852      	addeq	r2, r2, r1
 800a354:	6022      	streq	r2, [r4, #0]
 800a356:	602c      	str	r4, [r5, #0]
 800a358:	e7ec      	b.n	800a334 <_free_r+0x28>
 800a35a:	461a      	mov	r2, r3
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	b10b      	cbz	r3, 800a364 <_free_r+0x58>
 800a360:	42a3      	cmp	r3, r4
 800a362:	d9fa      	bls.n	800a35a <_free_r+0x4e>
 800a364:	6811      	ldr	r1, [r2, #0]
 800a366:	1855      	adds	r5, r2, r1
 800a368:	42a5      	cmp	r5, r4
 800a36a:	d10b      	bne.n	800a384 <_free_r+0x78>
 800a36c:	6824      	ldr	r4, [r4, #0]
 800a36e:	4421      	add	r1, r4
 800a370:	1854      	adds	r4, r2, r1
 800a372:	42a3      	cmp	r3, r4
 800a374:	6011      	str	r1, [r2, #0]
 800a376:	d1dd      	bne.n	800a334 <_free_r+0x28>
 800a378:	681c      	ldr	r4, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	6053      	str	r3, [r2, #4]
 800a37e:	4421      	add	r1, r4
 800a380:	6011      	str	r1, [r2, #0]
 800a382:	e7d7      	b.n	800a334 <_free_r+0x28>
 800a384:	d902      	bls.n	800a38c <_free_r+0x80>
 800a386:	230c      	movs	r3, #12
 800a388:	6003      	str	r3, [r0, #0]
 800a38a:	e7d3      	b.n	800a334 <_free_r+0x28>
 800a38c:	6825      	ldr	r5, [r4, #0]
 800a38e:	1961      	adds	r1, r4, r5
 800a390:	428b      	cmp	r3, r1
 800a392:	bf04      	itt	eq
 800a394:	6819      	ldreq	r1, [r3, #0]
 800a396:	685b      	ldreq	r3, [r3, #4]
 800a398:	6063      	str	r3, [r4, #4]
 800a39a:	bf04      	itt	eq
 800a39c:	1949      	addeq	r1, r1, r5
 800a39e:	6021      	streq	r1, [r4, #0]
 800a3a0:	6054      	str	r4, [r2, #4]
 800a3a2:	e7c7      	b.n	800a334 <_free_r+0x28>
 800a3a4:	b003      	add	sp, #12
 800a3a6:	bd30      	pop	{r4, r5, pc}
 800a3a8:	20000254 	.word	0x20000254

0800a3ac <_malloc_r>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	1ccd      	adds	r5, r1, #3
 800a3b0:	f025 0503 	bic.w	r5, r5, #3
 800a3b4:	3508      	adds	r5, #8
 800a3b6:	2d0c      	cmp	r5, #12
 800a3b8:	bf38      	it	cc
 800a3ba:	250c      	movcc	r5, #12
 800a3bc:	2d00      	cmp	r5, #0
 800a3be:	4606      	mov	r6, r0
 800a3c0:	db01      	blt.n	800a3c6 <_malloc_r+0x1a>
 800a3c2:	42a9      	cmp	r1, r5
 800a3c4:	d903      	bls.n	800a3ce <_malloc_r+0x22>
 800a3c6:	230c      	movs	r3, #12
 800a3c8:	6033      	str	r3, [r6, #0]
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ce:	f000 f87d 	bl	800a4cc <__malloc_lock>
 800a3d2:	4921      	ldr	r1, [pc, #132]	; (800a458 <_malloc_r+0xac>)
 800a3d4:	680a      	ldr	r2, [r1, #0]
 800a3d6:	4614      	mov	r4, r2
 800a3d8:	b99c      	cbnz	r4, 800a402 <_malloc_r+0x56>
 800a3da:	4f20      	ldr	r7, [pc, #128]	; (800a45c <_malloc_r+0xb0>)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	b923      	cbnz	r3, 800a3ea <_malloc_r+0x3e>
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f862 	bl	800a4ac <_sbrk_r>
 800a3e8:	6038      	str	r0, [r7, #0]
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f000 f85d 	bl	800a4ac <_sbrk_r>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d123      	bne.n	800a43e <_malloc_r+0x92>
 800a3f6:	230c      	movs	r3, #12
 800a3f8:	6033      	str	r3, [r6, #0]
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f000 f86c 	bl	800a4d8 <__malloc_unlock>
 800a400:	e7e3      	b.n	800a3ca <_malloc_r+0x1e>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	1b5b      	subs	r3, r3, r5
 800a406:	d417      	bmi.n	800a438 <_malloc_r+0x8c>
 800a408:	2b0b      	cmp	r3, #11
 800a40a:	d903      	bls.n	800a414 <_malloc_r+0x68>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	441c      	add	r4, r3
 800a410:	6025      	str	r5, [r4, #0]
 800a412:	e004      	b.n	800a41e <_malloc_r+0x72>
 800a414:	6863      	ldr	r3, [r4, #4]
 800a416:	42a2      	cmp	r2, r4
 800a418:	bf0c      	ite	eq
 800a41a:	600b      	streq	r3, [r1, #0]
 800a41c:	6053      	strne	r3, [r2, #4]
 800a41e:	4630      	mov	r0, r6
 800a420:	f000 f85a 	bl	800a4d8 <__malloc_unlock>
 800a424:	f104 000b 	add.w	r0, r4, #11
 800a428:	1d23      	adds	r3, r4, #4
 800a42a:	f020 0007 	bic.w	r0, r0, #7
 800a42e:	1ac2      	subs	r2, r0, r3
 800a430:	d0cc      	beq.n	800a3cc <_malloc_r+0x20>
 800a432:	1a1b      	subs	r3, r3, r0
 800a434:	50a3      	str	r3, [r4, r2]
 800a436:	e7c9      	b.n	800a3cc <_malloc_r+0x20>
 800a438:	4622      	mov	r2, r4
 800a43a:	6864      	ldr	r4, [r4, #4]
 800a43c:	e7cc      	b.n	800a3d8 <_malloc_r+0x2c>
 800a43e:	1cc4      	adds	r4, r0, #3
 800a440:	f024 0403 	bic.w	r4, r4, #3
 800a444:	42a0      	cmp	r0, r4
 800a446:	d0e3      	beq.n	800a410 <_malloc_r+0x64>
 800a448:	1a21      	subs	r1, r4, r0
 800a44a:	4630      	mov	r0, r6
 800a44c:	f000 f82e 	bl	800a4ac <_sbrk_r>
 800a450:	3001      	adds	r0, #1
 800a452:	d1dd      	bne.n	800a410 <_malloc_r+0x64>
 800a454:	e7cf      	b.n	800a3f6 <_malloc_r+0x4a>
 800a456:	bf00      	nop
 800a458:	20000254 	.word	0x20000254
 800a45c:	20000258 	.word	0x20000258

0800a460 <_realloc_r>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	4607      	mov	r7, r0
 800a464:	4614      	mov	r4, r2
 800a466:	460e      	mov	r6, r1
 800a468:	b921      	cbnz	r1, 800a474 <_realloc_r+0x14>
 800a46a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a46e:	4611      	mov	r1, r2
 800a470:	f7ff bf9c 	b.w	800a3ac <_malloc_r>
 800a474:	b922      	cbnz	r2, 800a480 <_realloc_r+0x20>
 800a476:	f7ff ff49 	bl	800a30c <_free_r>
 800a47a:	4625      	mov	r5, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a480:	f000 f830 	bl	800a4e4 <_malloc_usable_size_r>
 800a484:	42a0      	cmp	r0, r4
 800a486:	d20f      	bcs.n	800a4a8 <_realloc_r+0x48>
 800a488:	4621      	mov	r1, r4
 800a48a:	4638      	mov	r0, r7
 800a48c:	f7ff ff8e 	bl	800a3ac <_malloc_r>
 800a490:	4605      	mov	r5, r0
 800a492:	2800      	cmp	r0, #0
 800a494:	d0f2      	beq.n	800a47c <_realloc_r+0x1c>
 800a496:	4631      	mov	r1, r6
 800a498:	4622      	mov	r2, r4
 800a49a:	f7ff fbf7 	bl	8009c8c <memcpy>
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7ff ff33 	bl	800a30c <_free_r>
 800a4a6:	e7e9      	b.n	800a47c <_realloc_r+0x1c>
 800a4a8:	4635      	mov	r5, r6
 800a4aa:	e7e7      	b.n	800a47c <_realloc_r+0x1c>

0800a4ac <_sbrk_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d06      	ldr	r5, [pc, #24]	; (800a4c8 <_sbrk_r+0x1c>)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	f7f6 fd24 	bl	8000f04 <_sbrk>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d102      	bne.n	800a4c6 <_sbrk_r+0x1a>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b103      	cbz	r3, 800a4c6 <_sbrk_r+0x1a>
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	2000068c 	.word	0x2000068c

0800a4cc <__malloc_lock>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	; (800a4d4 <__malloc_lock+0x8>)
 800a4ce:	f000 b811 	b.w	800a4f4 <__retarget_lock_acquire_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	20000694 	.word	0x20000694

0800a4d8 <__malloc_unlock>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	; (800a4e0 <__malloc_unlock+0x8>)
 800a4da:	f000 b80c 	b.w	800a4f6 <__retarget_lock_release_recursive>
 800a4de:	bf00      	nop
 800a4e0:	20000694 	.word	0x20000694

0800a4e4 <_malloc_usable_size_r>:
 800a4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e8:	1f18      	subs	r0, r3, #4
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	bfbc      	itt	lt
 800a4ee:	580b      	ldrlt	r3, [r1, r0]
 800a4f0:	18c0      	addlt	r0, r0, r3
 800a4f2:	4770      	bx	lr

0800a4f4 <__retarget_lock_acquire_recursive>:
 800a4f4:	4770      	bx	lr

0800a4f6 <__retarget_lock_release_recursive>:
 800a4f6:	4770      	bx	lr

0800a4f8 <_init>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	bf00      	nop
 800a4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fe:	bc08      	pop	{r3}
 800a500:	469e      	mov	lr, r3
 800a502:	4770      	bx	lr

0800a504 <_fini>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	bf00      	nop
 800a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50a:	bc08      	pop	{r3}
 800a50c:	469e      	mov	lr, r3
 800a50e:	4770      	bx	lr

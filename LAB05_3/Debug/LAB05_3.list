
LAB05_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a36c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800a50c  0800a50c  0001a50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a598  0800a598  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800a598  0800a598  0001a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a0  0800a5a0  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a4  0800a5a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800a5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000144  0800a6ec  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800a6ec  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034daa  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a0  00000000  00000000  00054f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002500  00000000  00000000  000587c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002408  00000000  00000000  0005acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da9  00000000  00000000  0005d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6df  00000000  00000000  00075e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec61  00000000  00000000  00095550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001341b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a574  00000000  00000000  00134204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000144 	.word	0x20000144
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4f4 	.word	0x0800a4f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000148 	.word	0x20000148
 80001dc:	0800a4f4 	.word	0x0800a4f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fc17 	bl	8005db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f909 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fa13 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f9e7 	bl	800095c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800058e:	f000 f96f 	bl	8000870 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4872      	ldr	r0, [pc, #456]	; (8000760 <main+0x1e8>)
 8000596:	f007 fe01 	bl	800819c <HAL_TIM_OC_Start_IT>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800059a:	2102      	movs	r1, #2
 800059c:	2001      	movs	r0, #1
 800059e:	f005 f875 	bl	800568c <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 80005a2:	2102      	movs	r1, #2
 80005a4:	2001      	movs	r0, #1
 80005a6:	f005 f96d 	bl	8005884 <IKS01A3_MOTION_SENSOR_Enable>
  MA5_filtered_accelero_axes.x = 0;
 80005aa:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <main+0x1ec>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  MA5_filtered_accelero_axes.y = 0;
 80005b0:	4b6c      	ldr	r3, [pc, #432]	; (8000764 <main+0x1ec>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  MA5_filtered_accelero_axes.z = 0;
 80005b6:	4b6b      	ldr	r3, [pc, #428]	; (8000764 <main+0x1ec>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  for (int i = 0; i < 5; ++i) {
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e00e      	b.n	80005e0 <main+0x68>
      // Set the entire structure to zero
      memset(&circular_buffer[i], 0, sizeof(circular_buffer[i]));
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4a66      	ldr	r2, [pc, #408]	; (8000768 <main+0x1f0>)
 80005ce:	4413      	add	r3, r2
 80005d0:	220c      	movs	r2, #12
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f009 fb65 	bl	8009ca4 <memset>
  for (int i = 0; i < 5; ++i) {
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	dded      	ble.n	80005c2 <main+0x4a>
  }
  for (int i = 0; i <= 51; ++i) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	e00e      	b.n	800060a <main+0x92>
      // Set the entire structure to zero
      memset(&circular_buffer_51[i], 0, sizeof(circular_buffer_51[i]));
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4a5d      	ldr	r2, [pc, #372]	; (800076c <main+0x1f4>)
 80005f8:	4413      	add	r3, r2
 80005fa:	220c      	movs	r2, #12
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f009 fb50 	bl	8009ca4 <memset>
  for (int i = 0; i <= 51; ++i) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	3301      	adds	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b33      	cmp	r3, #51	; 0x33
 800060e:	dded      	ble.n	80005ec <main+0x74>
  }
  MA50_filtered_accelero_axes.x = 0;
 8000610:	4b57      	ldr	r3, [pc, #348]	; (8000770 <main+0x1f8>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
  MA50_filtered_accelero_axes.y = 0;
 8000616:	4b56      	ldr	r3, [pc, #344]	; (8000770 <main+0x1f8>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  MA50_filtered_accelero_axes.z = 0;
 800061c:	4b54      	ldr	r3, [pc, #336]	; (8000770 <main+0x1f8>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time_to_read == 1){
 8000622:	4b54      	ldr	r3, [pc, #336]	; (8000774 <main+0x1fc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d1fb      	bne.n	8000622 <main+0xaa>
		  time_to_read = 0;
 800062a:	4b52      	ldr	r3, [pc, #328]	; (8000774 <main+0x1fc>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
		  if (cnt < 51) ++cnt;
 8000630:	4b51      	ldr	r3, [pc, #324]	; (8000778 <main+0x200>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b32      	cmp	r3, #50	; 0x32
 8000636:	d805      	bhi.n	8000644 <main+0xcc>
 8000638:	4b4f      	ldr	r3, [pc, #316]	; (8000778 <main+0x200>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b4d      	ldr	r3, [pc, #308]	; (8000778 <main+0x200>)
 8000642:	701a      	strb	r2, [r3, #0]
		  for (int j = 4; j > 0; --j) {
			  memcpy(&circular_buffer[j], &circular_buffer[j-1], sizeof(circular_buffer[j]));
		  }
		  memset(&MA5_filtered_accelero_axes, 0, sizeof(MA5_filtered_accelero_axes));*/
		  // moving average FIR filter with 50 coefficients
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &circular_buffer_51[51]);
 8000644:	4a4d      	ldr	r2, [pc, #308]	; (800077c <main+0x204>)
 8000646:	2102      	movs	r1, #2
 8000648:	2001      	movs	r0, #1
 800064a:	f005 f95d 	bl	8005908 <IKS01A3_MOTION_SENSOR_GetAxes>
		  MA50_filtered_accelero_axes.x += circular_buffer_51[51].x - circular_buffer_51[0].x;
 800064e:	4b48      	ldr	r3, [pc, #288]	; (8000770 <main+0x1f8>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <main+0x1f4>)
 8000654:	f8d3 1264 	ldr.w	r1, [r3, #612]	; 0x264
 8000658:	4b44      	ldr	r3, [pc, #272]	; (800076c <main+0x1f4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	1acb      	subs	r3, r1, r3
 800065e:	4413      	add	r3, r2
 8000660:	4a43      	ldr	r2, [pc, #268]	; (8000770 <main+0x1f8>)
 8000662:	6013      	str	r3, [r2, #0]
		  MA50_filtered_accelero_axes.y += circular_buffer_51[51].y - circular_buffer_51[0].y;
 8000664:	4b42      	ldr	r3, [pc, #264]	; (8000770 <main+0x1f8>)
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	4b40      	ldr	r3, [pc, #256]	; (800076c <main+0x1f4>)
 800066a:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <main+0x1f4>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	1acb      	subs	r3, r1, r3
 8000674:	4413      	add	r3, r2
 8000676:	4a3e      	ldr	r2, [pc, #248]	; (8000770 <main+0x1f8>)
 8000678:	6053      	str	r3, [r2, #4]
		  MA50_filtered_accelero_axes.z += circular_buffer_51[51].z - circular_buffer_51[0].z;
 800067a:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <main+0x1f8>)
 800067c:	689a      	ldr	r2, [r3, #8]
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <main+0x1f4>)
 8000680:	f8d3 126c 	ldr.w	r1, [r3, #620]	; 0x26c
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <main+0x1f4>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	1acb      	subs	r3, r1, r3
 800068a:	4413      	add	r3, r2
 800068c:	4a38      	ldr	r2, [pc, #224]	; (8000770 <main+0x1f8>)
 800068e:	6093      	str	r3, [r2, #8]
		  if (cnt == 51){
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <main+0x200>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b33      	cmp	r3, #51	; 0x33
 8000696:	d120      	bne.n	80006da <main+0x162>
			  MA50_filtered_accelero_axes.x /= 51;
 8000698:	4b35      	ldr	r3, [pc, #212]	; (8000770 <main+0x1f8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <main+0x208>)
 800069e:	fb82 1203 	smull	r1, r2, r2, r3
 80006a2:	441a      	add	r2, r3
 80006a4:	1152      	asrs	r2, r2, #5
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	4a31      	ldr	r2, [pc, #196]	; (8000770 <main+0x1f8>)
 80006ac:	6013      	str	r3, [r2, #0]
			  MA50_filtered_accelero_axes.y /= 51;
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <main+0x1f8>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4a33      	ldr	r2, [pc, #204]	; (8000780 <main+0x208>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	441a      	add	r2, r3
 80006ba:	1152      	asrs	r2, r2, #5
 80006bc:	17db      	asrs	r3, r3, #31
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <main+0x1f8>)
 80006c2:	6053      	str	r3, [r2, #4]
			  MA50_filtered_accelero_axes.z /= 51;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <main+0x1f8>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <main+0x208>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	441a      	add	r2, r3
 80006d0:	1152      	asrs	r2, r2, #5
 80006d2:	17db      	asrs	r3, r3, #31
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4a26      	ldr	r2, [pc, #152]	; (8000770 <main+0x1f8>)
 80006d8:	6093      	str	r3, [r2, #8]
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		  }
		  for (int j = 0; j <= 50; ++j) {
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	e015      	b.n	800070c <main+0x194>
			  memcpy(&circular_buffer_51[j], &circular_buffer_51[j+1], sizeof(circular_buffer_51[j]));
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <main+0x1f4>)
 80006ec:	1898      	adds	r0, r3, r2
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <main+0x1f4>)
 80006fc:	4413      	add	r3, r2
 80006fe:	220c      	movs	r2, #12
 8000700:	4619      	mov	r1, r3
 8000702:	f009 fac1 	bl	8009c88 <memcpy>
		  for (int j = 0; j <= 50; ++j) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3301      	adds	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b32      	cmp	r3, #50	; 0x32
 8000710:	dde6      	ble.n	80006e0 <main+0x168>
		  }
		  uint8_t length = sprintf(msg, "%s, %ld, %ld, %ld\n\r%s, %ld, %ld, %ld\n\r",
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <main+0x1f4>)
 8000714:	f8d3 5138 	ldr.w	r5, [r3, #312]	; 0x138
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <main+0x1f4>)
 800071a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <main+0x1f4>)
 8000720:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8000724:	4912      	ldr	r1, [pc, #72]	; (8000770 <main+0x1f8>)
 8000726:	6809      	ldr	r1, [r1, #0]
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <main+0x1f8>)
 800072a:	6840      	ldr	r0, [r0, #4]
 800072c:	4c10      	ldr	r4, [pc, #64]	; (8000770 <main+0x1f8>)
 800072e:	68a4      	ldr	r4, [r4, #8]
 8000730:	9405      	str	r4, [sp, #20]
 8000732:	9004      	str	r0, [sp, #16]
 8000734:	9103      	str	r1, [sp, #12]
 8000736:	4913      	ldr	r1, [pc, #76]	; (8000784 <main+0x20c>)
 8000738:	9102      	str	r1, [sp, #8]
 800073a:	9201      	str	r2, [sp, #4]
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	462b      	mov	r3, r5
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <main+0x210>)
 8000742:	4912      	ldr	r1, [pc, #72]	; (800078c <main+0x214>)
 8000744:	4812      	ldr	r0, [pc, #72]	; (8000790 <main+0x218>)
 8000746:	f009 fab5 	bl	8009cb4 <siprintf>
 800074a:	4603      	mov	r3, r0
 800074c:	70fb      	strb	r3, [r7, #3]
		  			"Unfiltered", circular_buffer_51[26].x, circular_buffer_51[26].y, circular_buffer_51[26].z,
					"Filtered", MA50_filtered_accelero_axes.x, MA50_filtered_accelero_axes.y, MA50_filtered_accelero_axes.z);
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	b29b      	uxth	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	490e      	ldr	r1, [pc, #56]	; (8000790 <main+0x218>)
 8000756:	480f      	ldr	r0, [pc, #60]	; (8000794 <main+0x21c>)
 8000758:	f008 fc0d 	bl	8008f76 <HAL_UART_Transmit_IT>
	  if (time_to_read == 1){
 800075c:	e761      	b.n	8000622 <main+0xaa>
 800075e:	bf00      	nop
 8000760:	200002d8 	.word	0x200002d8
 8000764:	2000032c 	.word	0x2000032c
 8000768:	20000338 	.word	0x20000338
 800076c:	200003b8 	.word	0x200003b8
 8000770:	20000320 	.word	0x20000320
 8000774:	20000160 	.word	0x20000160
 8000778:	20000164 	.word	0x20000164
 800077c:	2000061c 	.word	0x2000061c
 8000780:	a0a0a0a1 	.word	0xa0a0a0a1
 8000784:	0800a540 	.word	0x0800a540
 8000788:	0800a50c 	.word	0x0800a50c
 800078c:	0800a518 	.word	0x0800a518
 8000790:	20000274 	.word	0x20000274
 8000794:	20000374 	.word	0x20000374

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 fa7c 	bl	8009ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <SystemClock_Config+0xd0>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a28      	ldr	r2, [pc, #160]	; (8000868 <SystemClock_Config+0xd0>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <SystemClock_Config+0xd0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <SystemClock_Config+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <SystemClock_Config+0xd4>)
 80007e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <SystemClock_Config+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800080c:	2310      	movs	r3, #16
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000810:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000816:	2304      	movs	r3, #4
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800081a:	2307      	movs	r3, #7
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	4618      	mov	r0, r3
 8000824:	f006 ff9e 	bl	8007764 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800082e:	f000 f93d 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f007 fa00 	bl	8007c54 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085a:	f000 f927 	bl	8000aac <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <MX_TIM3_Init+0xe8>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008a8:	f240 3247 	movw	r2, #839	; 0x347
 80008ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c8:	4822      	ldr	r0, [pc, #136]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008ca:	f007 fbbf 	bl	800804c <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008d4:	f000 f8ea 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e2:	4619      	mov	r1, r3
 80008e4:	481b      	ldr	r0, [pc, #108]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008e6:	f007 febb 	bl	8008660 <HAL_TIM_ConfigClockSource>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80008f0:	f000 f8dc 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <MX_TIM3_Init+0xe4>)
 80008f6:	f007 fbf8 	bl	80080ea <HAL_TIM_OC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000900:	f000 f8d4 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4619      	mov	r1, r3
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_TIM3_Init+0xe4>)
 8000914:	f008 fa60 	bl	8008dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800091e:	f000 f8c5 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8000926:	f240 13f3 	movw	r3, #499	; 0x1f3
 800092a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_TIM3_Init+0xe4>)
 800093c:	f007 fe34 	bl	80085a8 <HAL_TIM_OC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000946:	f000 f8b1 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3738      	adds	r7, #56	; 0x38
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002d8 	.word	0x200002d8
 8000958:	40000400 	.word	0x40000400

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART2_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000994:	f008 faa2 	bl	8008edc <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f885 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000374 	.word	0x20000374
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a25      	ldr	r2, [pc, #148]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_GPIO_Init+0xd0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <MX_GPIO_Init+0xd0>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <MX_GPIO_Init+0xd4>)
 8000a3c:	f005 fe5a 	bl	80066f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_GPIO_Init+0xd8>)
 8000a58:	f005 fbe4 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_GPIO_Init+0xd4>)
 8000a74:	f005 fbd6 	bl	8006224 <HAL_GPIO_Init>

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020800 	.word	0x40020800

08000a8c <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	time_to_read = 1;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000160 	.word	0x20000160

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af6:	2007      	movs	r0, #7
 8000af8:	f005 fac0 	bl	800607c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_TIM_Base_MspInit+0x48>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d115      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_TIM_Base_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_TIM_Base_MspInit+0x4c>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_TIM_Base_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	201d      	movs	r0, #29
 8000b3c:	f005 faa9 	bl	8006092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b40:	201d      	movs	r0, #29
 8000b42:	f005 fac2 	bl	80060ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40000400 	.word	0x40000400
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_UART_MspInit+0x94>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d133      	bne.n	8000be2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_UART_MspInit+0x98>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_UART_MspInit+0x9c>)
 8000bce:	f005 fb29 	bl	8006224 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2026      	movs	r0, #38	; 0x26
 8000bd8:	f005 fa5b 	bl	8006092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bdc:	2026      	movs	r0, #38	; 0x26
 8000bde:	f005 fa74 	bl	80060ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f005 f906 	bl	8005e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM3_IRQHandler+0x10>)
 8000c52:	f007 fba1 	bl	8008398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200002d8 	.word	0x200002d8

08000c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART2_IRQHandler+0x10>)
 8000c66:	f008 f9cb 	bl	8009000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000374 	.word	0x20000374

08000c74 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <BSP_I2C1_Init+0x58>)
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <BSP_I2C1_Init+0x5c>)
 8000c82:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <BSP_I2C1_Init+0x60>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	4912      	ldr	r1, [pc, #72]	; (8000cd4 <BSP_I2C1_Init+0x60>)
 8000c8c:	600a      	str	r2, [r1, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d117      	bne.n	8000cc2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <BSP_I2C1_Init+0x58>)
 8000c94:	f006 f9f0 	bl	8007078 <HAL_I2C_GetState>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d111      	bne.n	8000cc2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <BSP_I2C1_Init+0x58>)
 8000ca0:	f000 f8e2 	bl	8000e68 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000caa:	4808      	ldr	r0, [pc, #32]	; (8000ccc <BSP_I2C1_Init+0x58>)
 8000cac:	f000 f8a8 	bl	8000e00 <MX_I2C1_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000cb6:	f06f 0307 	mvn.w	r3, #7
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	e001      	b.n	8000cc2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000cc2:	687b      	ldr	r3, [r7, #4]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000628 	.word	0x20000628
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	20000168 	.word	0x20000168

08000cd8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <BSP_I2C1_DeInit+0x48>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d014      	beq.n	8000d14 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <BSP_I2C1_DeInit+0x48>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <BSP_I2C1_DeInit+0x48>)
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <BSP_I2C1_DeInit+0x48>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10b      	bne.n	8000d14 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <BSP_I2C1_DeInit+0x4c>)
 8000cfe:	f000 f8fd 	bl	8000efc <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <BSP_I2C1_DeInit+0x4c>)
 8000d04:	f005 fe54 	bl	80069b0 <HAL_I2C_DeInit>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000d0e:	f06f 0307 	mvn.w	r3, #7
 8000d12:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000168 	.word	0x20000168
 8000d24:	20000628 	.word	0x20000628

08000d28 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60ba      	str	r2, [r7, #8]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4603      	mov	r3, r0
 8000d34:	81fb      	strh	r3, [r7, #14]
 8000d36:	460b      	mov	r3, r1
 8000d38:	81bb      	strh	r3, [r7, #12]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d42:	89ba      	ldrh	r2, [r7, #12]
 8000d44:	89f9      	ldrh	r1, [r7, #14]
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <BSP_I2C1_WriteReg+0x60>)
 8000d58:	f005 fe6e 	bl	8006a38 <HAL_I2C_Mem_Write>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00c      	beq.n	8000d7c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d62:	4809      	ldr	r0, [pc, #36]	; (8000d88 <BSP_I2C1_WriteReg+0x60>)
 8000d64:	f006 f996 	bl	8007094 <HAL_I2C_GetError>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d103      	bne.n	8000d76 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d6e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	e002      	b.n	8000d7c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d76:	f06f 0303 	mvn.w	r3, #3
 8000d7a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d7c:	697b      	ldr	r3, [r7, #20]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000628 	.word	0x20000628

08000d8c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	60ba      	str	r2, [r7, #8]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	81fb      	strh	r3, [r7, #14]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	81bb      	strh	r3, [r7, #12]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000da6:	89ba      	ldrh	r2, [r7, #12]
 8000da8:	89f9      	ldrh	r1, [r7, #14]
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <BSP_I2C1_ReadReg+0x60>)
 8000dbc:	f005 ff36 	bl	8006c2c <HAL_I2C_Mem_Read>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00c      	beq.n	8000de0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <BSP_I2C1_ReadReg+0x60>)
 8000dc8:	f006 f964 	bl	8007094 <HAL_I2C_GetError>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d103      	bne.n	8000dda <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000dd2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e002      	b.n	8000de0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000dda:	f06f 0303 	mvn.w	r3, #3
 8000dde:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000de0:	697b      	ldr	r3, [r7, #20]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000628 	.word	0x20000628

08000df0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000df4:	f005 f842 	bl	8005e7c <HAL_GetTick>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <MX_I2C1_Init+0x60>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <MX_I2C1_Init+0x64>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f005 fc6f 	bl	8006728 <HAL_I2C_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40005400 	.word	0x40005400
 8000e64:	00061a80 	.word	0x00061a80

08000e68 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <I2C1_MspInit+0x8c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <I2C1_MspInit+0x8c>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <I2C1_MspInit+0x8c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e92:	2312      	movs	r3, #18
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <I2C1_MspInit+0x90>)
 8000eaa:	f005 f9bb 	bl	8006224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <I2C1_MspInit+0x90>)
 8000ecc:	f005 f9aa 	bl	8006224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <I2C1_MspInit+0x8c>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <I2C1_MspInit+0x8c>)
 8000eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <I2C1_MspInit+0x8c>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400

08000efc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <I2C1_MspDeInit+0x30>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <I2C1_MspDeInit+0x30>)
 8000f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <I2C1_MspDeInit+0x34>)
 8000f16:	f005 fb09 	bl	800652c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <I2C1_MspDeInit+0x34>)
 8000f20:	f005 fb04 	bl	800652c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020400 	.word	0x40020400

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f008 fe66 	bl	8009c34 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20018000 	.word	0x20018000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	2000016c 	.word	0x2000016c
 8000f9c:	200006a0 	.word	0x200006a0

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ffd7 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f008 fe25 	bl	8009c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fabf 	bl	8000578 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8001008:	0800a5a8 	.word	0x0800a5a8
  ldr r2, =_sbss
 800100c:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8001010:	2000069c 	.word	0x2000069c

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e051      	b.n	80010d8 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	7b1a      	ldrb	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	699a      	ldr	r2, [r3, #24]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <LIS2DW12_RegisterBusIO+0xcc>)
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <LIS2DW12_RegisterBusIO+0xd0>)
 8001076:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e020      	b.n	80010d8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4798      	blx	r3
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e016      	b.n	80010d8 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d112      	bne.n	80010d8 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10d      	bne.n	80010d8 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80010bc:	2305      	movs	r3, #5
 80010be:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2121      	movs	r1, #33	; 0x21
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fd87 	bl	8001bda <LIS2DW12_Write_Reg>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	08001f6d 	.word	0x08001f6d
 80010e8:	08001fa3 	.word	0x08001fa3

080010ec <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3320      	adds	r3, #32
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fa94 	bl	8002628 <lis2dw12_auto_increment_set>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e04b      	b.n	80011a4 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3320      	adds	r3, #32
 8001110:	2101      	movs	r1, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f001 f9a8 	bl	8002468 <lis2dw12_block_data_update_set>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e03f      	b.n	80011a4 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3320      	adds	r3, #32
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f001 faa2 	bl	8002674 <lis2dw12_fifo_mode_set>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e033      	b.n	80011a4 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3320      	adds	r3, #32
 8001140:	2104      	movs	r1, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f000 ff78 	bl	8002038 <lis2dw12_power_mode_set>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e027      	b.n	80011a4 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <LIS2DW12_Init+0xc0>)
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3320      	adds	r3, #32
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f869 	bl	8002248 <lis2dw12_data_rate_set>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	e010      	b.n	80011a4 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3320      	adds	r3, #32
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f001 f993 	bl	80024b4 <lis2dw12_full_scale_set>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	e004      	b.n	80011a4 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	42c80000 	.word	0x42c80000

080011b0 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f888 	bl	80012ce <LIS2DW12_ACC_Disable>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	e010      	b.n	80011ec <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3320      	adds	r3, #32
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f001 f9fe 	bl	8002606 <lis2dw12_device_id_get>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	e000      	b.n	8001218 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2210      	movs	r2, #16
 800124c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4a06      	ldr	r2, [pc, #24]	; (8001278 <LIS2DW12_GetCapabilities+0x58>)
 8001260:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	44c80000 	.word	0x44c80000

0800127c <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e019      	b.n	80012c6 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012a4:	461a      	mov	r2, r3
 80012a6:	eeb0 0a67 	vmov.f32	s0, s15
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fcb0 	bl	8001c10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e004      	b.n	80012c6 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e010      	b.n	8001306 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3320      	adds	r3, #32
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 ffac 	bl	8002248 <lis2dw12_data_rate_set>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e004      	b.n	8001306 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3320      	adds	r3, #32
 8001322:	f107 020b 	add.w	r2, r7, #11
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f8e9 	bl	8002500 <lis2dw12_full_scale_get>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	e0a0      	b.n	800147c <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3320      	adds	r3, #32
 800133e:	f107 020a 	add.w	r2, r7, #10
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fec5 	bl	80020d4 <lis2dw12_power_mode_get>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	e092      	b.n	800147c <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	2b1b      	cmp	r3, #27
 800135a:	f200 8087 	bhi.w	800146c <LIS2DW12_ACC_GetSensitivity+0x15c>
 800135e:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	080013d5 	.word	0x080013d5
 8001368:	08001421 	.word	0x08001421
 800136c:	08001421 	.word	0x08001421
 8001370:	08001421 	.word	0x08001421
 8001374:	08001421 	.word	0x08001421
 8001378:	0800146d 	.word	0x0800146d
 800137c:	0800146d 	.word	0x0800146d
 8001380:	0800146d 	.word	0x0800146d
 8001384:	080013d5 	.word	0x080013d5
 8001388:	08001421 	.word	0x08001421
 800138c:	08001421 	.word	0x08001421
 8001390:	08001421 	.word	0x08001421
 8001394:	0800146d 	.word	0x0800146d
 8001398:	0800146d 	.word	0x0800146d
 800139c:	0800146d 	.word	0x0800146d
 80013a0:	0800146d 	.word	0x0800146d
 80013a4:	080013d5 	.word	0x080013d5
 80013a8:	08001421 	.word	0x08001421
 80013ac:	08001421 	.word	0x08001421
 80013b0:	08001421 	.word	0x08001421
 80013b4:	08001421 	.word	0x08001421
 80013b8:	0800146d 	.word	0x0800146d
 80013bc:	0800146d 	.word	0x0800146d
 80013c0:	0800146d 	.word	0x0800146d
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	08001421 	.word	0x08001421
 80013cc:	08001421 	.word	0x08001421
 80013d0:	08001421 	.word	0x08001421
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80013d4:	7afb      	ldrb	r3, [r7, #11]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d81a      	bhi.n	8001410 <LIS2DW12_ACC_GetSensitivity+0x100>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	080013f1 	.word	0x080013f1
 80013e4:	080013f9 	.word	0x080013f9
 80013e8:	08001401 	.word	0x08001401
 80013ec:	08001409 	.word	0x08001409
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	4a24      	ldr	r2, [pc, #144]	; (8001484 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80013f4:	601a      	str	r2, [r3, #0]
          break;
 80013f6:	e012      	b.n	800141e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80013fc:	601a      	str	r2, [r3, #0]
          break;
 80013fe:	e00e      	b.n	800141e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4a22      	ldr	r2, [pc, #136]	; (800148c <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8001404:	601a      	str	r2, [r3, #0]
          break;
 8001406:	e00a      	b.n	800141e <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <LIS2DW12_ACC_GetSensitivity+0x180>)
 800140c:	601a      	str	r2, [r3, #0]
          break;
 800140e:	e006      	b.n	800141e <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001414:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	60fb      	str	r3, [r7, #12]
          break;
 800141c:	bf00      	nop
      }
      break;
 800141e:	e02c      	b.n	800147a <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d81a      	bhi.n	800145c <LIS2DW12_ACC_GetSensitivity+0x14c>
 8001426:	a201      	add	r2, pc, #4	; (adr r2, 800142c <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001445 	.word	0x08001445
 8001434:	0800144d 	.word	0x0800144d
 8001438:	08001455 	.word	0x08001455
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <LIS2DW12_ACC_GetSensitivity+0x188>)
 8001440:	601a      	str	r2, [r3, #0]
          break;
 8001442:	e012      	b.n	800146a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4a15      	ldr	r2, [pc, #84]	; (800149c <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001448:	601a      	str	r2, [r3, #0]
          break;
 800144a:	e00e      	b.n	800146a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8001450:	601a      	str	r2, [r3, #0]
          break;
 8001452:	e00a      	b.n	800146a <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001458:	601a      	str	r2, [r3, #0]
          break;
 800145a:	e006      	b.n	800146a <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001460:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	60fb      	str	r3, [r7, #12]
          break;
 8001468:	bf00      	nop
      }
      break;
 800146a:	e006      	b.n	800147a <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001470:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	60fb      	str	r3, [r7, #12]
      break;
 8001478:	bf00      	nop
  }

  return ret;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	3f79db23 	.word	0x3f79db23
 8001488:	3ff9db23 	.word	0x3ff9db23
 800148c:	4079db23 	.word	0x4079db23
 8001490:	40f9db23 	.word	0x40f9db23
 8001494:	bf800000 	.word	0xbf800000
 8001498:	3e79db23 	.word	0x3e79db23
 800149c:	3ef9db23 	.word	0x3ef9db23

080014a0 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3320      	adds	r3, #32
 80014b2:	f107 020b 	add.w	r2, r7, #11
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 ff0b 	bl	80022d4 <lis2dw12_data_rate_get>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	e1d4      	b.n	8001874 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3320      	adds	r3, #32
 80014ce:	f107 020a 	add.w	r2, r7, #10
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fdfd 	bl	80020d4 <lis2dw12_power_mode_get>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	e1c6      	b.n	8001874 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80014e6:	7afb      	ldrb	r3, [r7, #11]
 80014e8:	2b32      	cmp	r3, #50	; 0x32
 80014ea:	f200 81bb 	bhi.w	8001864 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	080015c1 	.word	0x080015c1
 80014f8:	080015cb 	.word	0x080015cb
 80014fc:	08001669 	.word	0x08001669
 8001500:	08001671 	.word	0x08001671
 8001504:	08001679 	.word	0x08001679
 8001508:	08001681 	.word	0x08001681
 800150c:	08001689 	.word	0x08001689
 8001510:	08001691 	.word	0x08001691
 8001514:	0800172d 	.word	0x0800172d
 8001518:	080017c9 	.word	0x080017c9
 800151c:	08001865 	.word	0x08001865
 8001520:	08001865 	.word	0x08001865
 8001524:	08001865 	.word	0x08001865
 8001528:	08001865 	.word	0x08001865
 800152c:	08001865 	.word	0x08001865
 8001530:	08001865 	.word	0x08001865
 8001534:	08001865 	.word	0x08001865
 8001538:	08001865 	.word	0x08001865
 800153c:	080015c1 	.word	0x080015c1
 8001540:	08001865 	.word	0x08001865
 8001544:	08001865 	.word	0x08001865
 8001548:	08001865 	.word	0x08001865
 800154c:	08001865 	.word	0x08001865
 8001550:	08001865 	.word	0x08001865
 8001554:	08001865 	.word	0x08001865
 8001558:	08001865 	.word	0x08001865
 800155c:	08001865 	.word	0x08001865
 8001560:	08001865 	.word	0x08001865
 8001564:	08001865 	.word	0x08001865
 8001568:	08001865 	.word	0x08001865
 800156c:	08001865 	.word	0x08001865
 8001570:	08001865 	.word	0x08001865
 8001574:	08001865 	.word	0x08001865
 8001578:	08001865 	.word	0x08001865
 800157c:	08001865 	.word	0x08001865
 8001580:	08001865 	.word	0x08001865
 8001584:	08001865 	.word	0x08001865
 8001588:	08001865 	.word	0x08001865
 800158c:	08001865 	.word	0x08001865
 8001590:	08001865 	.word	0x08001865
 8001594:	08001865 	.word	0x08001865
 8001598:	08001865 	.word	0x08001865
 800159c:	08001865 	.word	0x08001865
 80015a0:	08001865 	.word	0x08001865
 80015a4:	08001865 	.word	0x08001865
 80015a8:	08001865 	.word	0x08001865
 80015ac:	08001865 	.word	0x08001865
 80015b0:	08001865 	.word	0x08001865
 80015b4:	08001865 	.word	0x08001865
 80015b8:	08001865 	.word	0x08001865
 80015bc:	080015c1 	.word	0x080015c1
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
      break;
 80015c8:	e153      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80015ca:	7abb      	ldrb	r3, [r7, #10]
 80015cc:	2b1b      	cmp	r3, #27
 80015ce:	d843      	bhi.n	8001658 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	08001651 	.word	0x08001651
 80015dc:	08001651 	.word	0x08001651
 80015e0:	08001651 	.word	0x08001651
 80015e4:	08001651 	.word	0x08001651
 80015e8:	08001649 	.word	0x08001649
 80015ec:	08001659 	.word	0x08001659
 80015f0:	08001659 	.word	0x08001659
 80015f4:	08001659 	.word	0x08001659
 80015f8:	08001651 	.word	0x08001651
 80015fc:	08001651 	.word	0x08001651
 8001600:	08001651 	.word	0x08001651
 8001604:	08001651 	.word	0x08001651
 8001608:	08001659 	.word	0x08001659
 800160c:	08001659 	.word	0x08001659
 8001610:	08001659 	.word	0x08001659
 8001614:	08001659 	.word	0x08001659
 8001618:	08001651 	.word	0x08001651
 800161c:	08001651 	.word	0x08001651
 8001620:	08001651 	.word	0x08001651
 8001624:	08001651 	.word	0x08001651
 8001628:	08001649 	.word	0x08001649
 800162c:	08001659 	.word	0x08001659
 8001630:	08001659 	.word	0x08001659
 8001634:	08001659 	.word	0x08001659
 8001638:	08001651 	.word	0x08001651
 800163c:	08001651 	.word	0x08001651
 8001640:	08001651 	.word	0x08001651
 8001644:	08001651 	.word	0x08001651
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4a8c      	ldr	r2, [pc, #560]	; (800187c <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 800164c:	601a      	str	r2, [r3, #0]
          break;
 800164e:	e00a      	b.n	8001666 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4a8b      	ldr	r2, [pc, #556]	; (8001880 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8001654:	601a      	str	r2, [r3, #0]
          break;
 8001656:	e006      	b.n	8001666 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4a8a      	ldr	r2, [pc, #552]	; (8001884 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800165c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	60fb      	str	r3, [r7, #12]
          break;
 8001664:	bf00      	nop
      }
      break;
 8001666:	e104      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	4a84      	ldr	r2, [pc, #528]	; (800187c <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 800166c:	601a      	str	r2, [r3, #0]
      break;
 800166e:	e100      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	4a85      	ldr	r2, [pc, #532]	; (8001888 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8001674:	601a      	str	r2, [r3, #0]
      break;
 8001676:	e0fc      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4a84      	ldr	r2, [pc, #528]	; (800188c <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 800167c:	601a      	str	r2, [r3, #0]
      break;
 800167e:	e0f8      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4a83      	ldr	r2, [pc, #524]	; (8001890 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8001684:	601a      	str	r2, [r3, #0]
      break;
 8001686:	e0f4      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4a82      	ldr	r2, [pc, #520]	; (8001894 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800168c:	601a      	str	r2, [r3, #0]
      break;
 800168e:	e0f0      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001690:	7abb      	ldrb	r3, [r7, #10]
 8001692:	2b1b      	cmp	r3, #27
 8001694:	d842      	bhi.n	800171c <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	08001715 	.word	0x08001715
 80016a0:	08001715 	.word	0x08001715
 80016a4:	08001715 	.word	0x08001715
 80016a8:	08001715 	.word	0x08001715
 80016ac:	0800170d 	.word	0x0800170d
 80016b0:	0800171d 	.word	0x0800171d
 80016b4:	0800171d 	.word	0x0800171d
 80016b8:	0800171d 	.word	0x0800171d
 80016bc:	08001715 	.word	0x08001715
 80016c0:	08001715 	.word	0x08001715
 80016c4:	08001715 	.word	0x08001715
 80016c8:	08001715 	.word	0x08001715
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800171d 	.word	0x0800171d
 80016d4:	0800171d 	.word	0x0800171d
 80016d8:	0800171d 	.word	0x0800171d
 80016dc:	08001715 	.word	0x08001715
 80016e0:	08001715 	.word	0x08001715
 80016e4:	08001715 	.word	0x08001715
 80016e8:	08001715 	.word	0x08001715
 80016ec:	0800170d 	.word	0x0800170d
 80016f0:	0800171d 	.word	0x0800171d
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	0800171d 	.word	0x0800171d
 80016fc:	08001715 	.word	0x08001715
 8001700:	08001715 	.word	0x08001715
 8001704:	08001715 	.word	0x08001715
 8001708:	08001715 	.word	0x08001715
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4a62      	ldr	r2, [pc, #392]	; (8001898 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8001710:	601a      	str	r2, [r3, #0]
          break;
 8001712:	e00a      	b.n	800172a <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4a5f      	ldr	r2, [pc, #380]	; (8001894 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001718:	601a      	str	r2, [r3, #0]
          break;
 800171a:	e006      	b.n	800172a <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4a59      	ldr	r2, [pc, #356]	; (8001884 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001720:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	60fb      	str	r3, [r7, #12]
          break;
 8001728:	bf00      	nop
      }
      break;
 800172a:	e0a2      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 800172c:	7abb      	ldrb	r3, [r7, #10]
 800172e:	2b1b      	cmp	r3, #27
 8001730:	d842      	bhi.n	80017b8 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	080017b1 	.word	0x080017b1
 800173c:	080017b1 	.word	0x080017b1
 8001740:	080017b1 	.word	0x080017b1
 8001744:	080017b1 	.word	0x080017b1
 8001748:	080017a9 	.word	0x080017a9
 800174c:	080017b9 	.word	0x080017b9
 8001750:	080017b9 	.word	0x080017b9
 8001754:	080017b9 	.word	0x080017b9
 8001758:	080017b1 	.word	0x080017b1
 800175c:	080017b1 	.word	0x080017b1
 8001760:	080017b1 	.word	0x080017b1
 8001764:	080017b1 	.word	0x080017b1
 8001768:	080017b9 	.word	0x080017b9
 800176c:	080017b9 	.word	0x080017b9
 8001770:	080017b9 	.word	0x080017b9
 8001774:	080017b9 	.word	0x080017b9
 8001778:	080017b1 	.word	0x080017b1
 800177c:	080017b1 	.word	0x080017b1
 8001780:	080017b1 	.word	0x080017b1
 8001784:	080017b1 	.word	0x080017b1
 8001788:	080017a9 	.word	0x080017a9
 800178c:	080017b9 	.word	0x080017b9
 8001790:	080017b9 	.word	0x080017b9
 8001794:	080017b9 	.word	0x080017b9
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017b1 	.word	0x080017b1
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017b1 	.word	0x080017b1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4a3c      	ldr	r2, [pc, #240]	; (800189c <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 80017ac:	601a      	str	r2, [r3, #0]
          break;
 80017ae:	e00a      	b.n	80017c6 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4a38      	ldr	r2, [pc, #224]	; (8001894 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80017b4:	601a      	str	r2, [r3, #0]
          break;
 80017b6:	e006      	b.n	80017c6 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4a32      	ldr	r2, [pc, #200]	; (8001884 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80017bc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	60fb      	str	r3, [r7, #12]
          break;
 80017c4:	bf00      	nop
      }
      break;
 80017c6:	e054      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 80017c8:	7abb      	ldrb	r3, [r7, #10]
 80017ca:	2b1b      	cmp	r3, #27
 80017cc:	d842      	bhi.n	8001854 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	0800184d 	.word	0x0800184d
 80017d8:	0800184d 	.word	0x0800184d
 80017dc:	0800184d 	.word	0x0800184d
 80017e0:	0800184d 	.word	0x0800184d
 80017e4:	08001845 	.word	0x08001845
 80017e8:	08001855 	.word	0x08001855
 80017ec:	08001855 	.word	0x08001855
 80017f0:	08001855 	.word	0x08001855
 80017f4:	0800184d 	.word	0x0800184d
 80017f8:	0800184d 	.word	0x0800184d
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800184d 	.word	0x0800184d
 8001804:	08001855 	.word	0x08001855
 8001808:	08001855 	.word	0x08001855
 800180c:	08001855 	.word	0x08001855
 8001810:	08001855 	.word	0x08001855
 8001814:	0800184d 	.word	0x0800184d
 8001818:	0800184d 	.word	0x0800184d
 800181c:	0800184d 	.word	0x0800184d
 8001820:	0800184d 	.word	0x0800184d
 8001824:	08001845 	.word	0x08001845
 8001828:	08001855 	.word	0x08001855
 800182c:	08001855 	.word	0x08001855
 8001830:	08001855 	.word	0x08001855
 8001834:	0800184d 	.word	0x0800184d
 8001838:	0800184d 	.word	0x0800184d
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800184d 	.word	0x0800184d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8001848:	601a      	str	r2, [r3, #0]
          break;
 800184a:	e00a      	b.n	8001862 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001850:	601a      	str	r2, [r3, #0]
          break;
 8001852:	e006      	b.n	8001862 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001858:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	60fb      	str	r3, [r7, #12]
          break;
 8001860:	bf00      	nop
      }
      break;
 8001862:	e006      	b.n	8001872 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001868:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	60fb      	str	r3, [r7, #12]
      break;
 8001870:	bf00      	nop
  }

  return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	41480000 	.word	0x41480000
 8001880:	3fcccccd 	.word	0x3fcccccd
 8001884:	bf800000 	.word	0xbf800000
 8001888:	41c80000 	.word	0x41c80000
 800188c:	42480000 	.word	0x42480000
 8001890:	42c80000 	.word	0x42c80000
 8001894:	43480000 	.word	0x43480000
 8001898:	43c80000 	.word	0x43c80000
 800189c:	44480000 	.word	0x44480000
 80018a0:	44c80000 	.word	0x44c80000

080018a4 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	ed97 0a00 	vldr	s0, [r7]
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f805 	bl	80018c8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80018be:	4603      	mov	r3, r0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80018d4:	460b      	mov	r3, r1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d109      	bne.n	80018fa <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80018e6:	79ba      	ldrb	r2, [r7, #6]
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4619      	mov	r1, r3
 80018ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f98d 	bl	8001c10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80018f6:	4603      	mov	r3, r0
 80018f8:	e008      	b.n	800190c <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80018fa:	79ba      	ldrb	r2, [r7, #6]
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4619      	mov	r1, r3
 8001900:	ed97 0a02 	vldr	s0, [r7, #8]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fa9f 	bl	8001e48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800190a:	4603      	mov	r3, r0
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3320      	adds	r3, #32
 8001926:	f107 020b 	add.w	r2, r7, #11
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fde7 	bl	8002500 <lis2dw12_full_scale_get>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	e027      	b.n	800198e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d81b      	bhi.n	800197c <LIS2DW12_ACC_GetFullScale+0x68>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <LIS2DW12_ACC_GetFullScale+0x38>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	0800195d 	.word	0x0800195d
 8001950:	08001965 	.word	0x08001965
 8001954:	0800196d 	.word	0x0800196d
 8001958:	08001975 	.word	0x08001975
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2202      	movs	r2, #2
 8001960:	601a      	str	r2, [r3, #0]
      break;
 8001962:	e013      	b.n	800198c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2204      	movs	r2, #4
 8001968:	601a      	str	r2, [r3, #0]
      break;
 800196a:	e00f      	b.n	800198c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2208      	movs	r2, #8
 8001970:	601a      	str	r2, [r3, #0]
      break;
 8001972:	e00b      	b.n	800198c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2210      	movs	r2, #16
 8001978:	601a      	str	r2, [r3, #0]
      break;
 800197a:	e007      	b.n	800198c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f04f 32ff 	mov.w	r2, #4294967295
 8001982:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	60fb      	str	r3, [r7, #12]
      break;
 800198a:	bf00      	nop
  }

  return ret;
 800198c:	68fb      	ldr	r3, [r7, #12]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop

08001998 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	dd0b      	ble.n	80019c0 <LIS2DW12_ACC_SetFullScale+0x28>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	dd06      	ble.n	80019bc <LIS2DW12_ACC_SetFullScale+0x24>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	dc01      	bgt.n	80019b8 <LIS2DW12_ACC_SetFullScale+0x20>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e004      	b.n	80019c2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e002      	b.n	80019c2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80019c0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80019c2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3320      	adds	r3, #32
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fd71 	bl	80024b4 <lis2dw12_full_scale_set>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	e000      	b.n	80019e0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3320      	adds	r3, #32
 80019fa:	f107 020b 	add.w	r2, r7, #11
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fb67 	bl	80020d4 <lis2dw12_power_mode_get>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	e089      	b.n	8001b26 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3320      	adds	r3, #32
 8001a16:	f107 020c 	add.w	r2, r7, #12
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fda7 	bl	8002570 <lis2dw12_acceleration_raw_get>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	e07b      	b.n	8001b26 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
 8001a30:	2b1b      	cmp	r3, #27
 8001a32:	d873      	bhi.n	8001b1c <LIS2DW12_ACC_GetAxesRaw+0x134>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001aad 	.word	0x08001aad
 8001a40:	08001ae5 	.word	0x08001ae5
 8001a44:	08001ae5 	.word	0x08001ae5
 8001a48:	08001ae5 	.word	0x08001ae5
 8001a4c:	08001ae5 	.word	0x08001ae5
 8001a50:	08001b1d 	.word	0x08001b1d
 8001a54:	08001b1d 	.word	0x08001b1d
 8001a58:	08001b1d 	.word	0x08001b1d
 8001a5c:	08001aad 	.word	0x08001aad
 8001a60:	08001ae5 	.word	0x08001ae5
 8001a64:	08001ae5 	.word	0x08001ae5
 8001a68:	08001ae5 	.word	0x08001ae5
 8001a6c:	08001b1d 	.word	0x08001b1d
 8001a70:	08001b1d 	.word	0x08001b1d
 8001a74:	08001b1d 	.word	0x08001b1d
 8001a78:	08001b1d 	.word	0x08001b1d
 8001a7c:	08001aad 	.word	0x08001aad
 8001a80:	08001ae5 	.word	0x08001ae5
 8001a84:	08001ae5 	.word	0x08001ae5
 8001a88:	08001ae5 	.word	0x08001ae5
 8001a8c:	08001ae5 	.word	0x08001ae5
 8001a90:	08001b1d 	.word	0x08001b1d
 8001a94:	08001b1d 	.word	0x08001b1d
 8001a98:	08001b1d 	.word	0x08001b1d
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001ae5 	.word	0x08001ae5
 8001aa4:	08001ae5 	.word	0x08001ae5
 8001aa8:	08001ae5 	.word	0x08001ae5
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001aac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da00      	bge.n	8001ab6 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001ab4:	330f      	adds	r3, #15
 8001ab6:	111b      	asrs	r3, r3, #4
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da00      	bge.n	8001ac8 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001ac6:	330f      	adds	r3, #15
 8001ac8:	111b      	asrs	r3, r3, #4
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001ad0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da00      	bge.n	8001ada <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001ad8:	330f      	adds	r3, #15
 8001ada:	111b      	asrs	r3, r3, #4
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	809a      	strh	r2, [r3, #4]
      break;
 8001ae2:	e01f      	b.n	8001b24 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001ae4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <LIS2DW12_ACC_GetAxesRaw+0x106>
 8001aec:	3303      	adds	r3, #3
 8001aee:	109b      	asrs	r3, r3, #2
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da00      	bge.n	8001b00 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8001afe:	3303      	adds	r3, #3
 8001b00:	109b      	asrs	r3, r3, #2
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001b08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da00      	bge.n	8001b12 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8001b10:	3303      	adds	r3, #3
 8001b12:	109b      	asrs	r3, r3, #2
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	809a      	strh	r2, [r3, #4]
      break;
 8001b1a:	e003      	b.n	8001b24 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b20:	617b      	str	r3, [r7, #20]
      break;
 8001b22:	bf00      	nop
  }

  return ret;
 8001b24:	697b      	ldr	r3, [r7, #20]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop

08001b30 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff4e 	bl	80019e8 <LIS2DW12_ACC_GetAxesRaw>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e03c      	b.n	8001bd2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fbd6 	bl	8001310 <LIS2DW12_ACC_GetSensitivity>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e030      	b.n	8001bd2 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001b70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b88:	ee17 2a90 	vmov	r2, s15
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001b90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba8:	ee17 2a90 	vmov	r2, s15
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001bb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 2a90 	vmov	r2, s15
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	70fb      	strb	r3, [r7, #3]
 8001be6:	4613      	mov	r3, r2
 8001be8:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f103 0020 	add.w	r0, r3, #32
 8001bf0:	1cba      	adds	r2, r7, #2
 8001bf2:	78f9      	ldrb	r1, [r7, #3]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f000 fa07 	bl	8002008 <lis2dw12_write_reg>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	e000      	b.n	8001c08 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d80b      	bhi.n	8001c44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001c2c:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c32:	bf00      	nop
 8001c34:	08001c71 	.word	0x08001c71
 8001c38:	08001c9d 	.word	0x08001c9d
 8001c3c:	08001cc9 	.word	0x08001cc9
 8001c40:	08001cf5 	.word	0x08001cf5
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d002      	beq.n	8001c50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8001c4e:	e002      	b.n	8001c56 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001c50:	2314      	movs	r3, #20
 8001c52:	75fb      	strb	r3, [r7, #23]
          break;
 8001c54:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8001c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c5a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c66:	d400      	bmi.n	8001c6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001c68:	e05a      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001c6c:	60bb      	str	r3, [r7, #8]
      break;
 8001c6e:	e057      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d002      	beq.n	8001c7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001c76:	2303      	movs	r3, #3
 8001c78:	75fb      	strb	r3, [r7, #23]
          break;
 8001c7a:	e002      	b.n	8001c82 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001c7c:	2313      	movs	r3, #19
 8001c7e:	75fb      	strb	r3, [r7, #23]
          break;
 8001c80:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c86:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001e2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dc00      	bgt.n	8001c96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001c94:	e044      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001c96:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001c98:	60bb      	str	r3, [r7, #8]
      break;
 8001c9a:	e041      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d002      	beq.n	8001ca8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8001ca6:	e002      	b.n	8001cae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001ca8:	2312      	movs	r3, #18
 8001caa:	75fb      	strb	r3, [r7, #23]
          break;
 8001cac:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001cae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001e2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	dc00      	bgt.n	8001cc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001cc0:	e02e      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001cc4:	60bb      	str	r3, [r7, #8]
      break;
 8001cc6:	e02b      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d002      	beq.n	8001cd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8001cd2:	e002      	b.n	8001cda <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001cd4:	2311      	movs	r3, #17
 8001cd6:	75fb      	strb	r3, [r7, #23]
          break;
 8001cd8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001e2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	dc00      	bgt.n	8001cee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001cec:	e018      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001cee:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001cf0:	60bb      	str	r3, [r7, #8]
      break;
 8001cf2:	e015      	b.n	8001d20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8001cfe:	e002      	b.n	8001d06 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001d00:	2310      	movs	r3, #16
 8001d02:	75fb      	strb	r3, [r7, #23]
          break;
 8001d04:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001e2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	dc00      	bgt.n	8001d1a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001d18:	e001      	b.n	8001d1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001d1a:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001d1c:	60bb      	str	r3, [r7, #8]
      break;
 8001d1e:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001d20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d24:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001e34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d801      	bhi.n	8001d36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e04d      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d3a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d801      	bhi.n	8001d4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e042      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	d801      	bhi.n	8001d62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e037      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d801      	bhi.n	8001d78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e02c      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d7c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e3c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d801      	bhi.n	8001d8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e021      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d92:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001e2c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d801      	bhi.n	8001da4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001da0:	2306      	movs	r3, #6
 8001da2:	e016      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001da4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001e40 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	d801      	bhi.n	8001dba <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001db6:	2307      	movs	r3, #7
 8001db8:	e00b      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dbe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001e44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	d801      	bhi.n	8001dd0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001dcc:	2308      	movs	r3, #8
 8001dce:	e000      	b.n	8001dd2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001dd0:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001dd2:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3320      	adds	r3, #32
 8001dd8:	7dba      	ldrb	r2, [r7, #22]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fa33 	bl	8002248 <lis2dw12_data_rate_set>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	e018      	b.n	8001e20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3320      	adds	r3, #32
 8001df2:	7dfa      	ldrb	r2, [r7, #23]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f91e 	bl	8002038 <lis2dw12_power_mode_set>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e00b      	b.n	8001e20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	79ba      	ldrb	r2, [r7, #6]
 8001e1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	41480000 	.word	0x41480000
 8001e2c:	43480000 	.word	0x43480000
 8001e30:	43480000 	.word	0x43480000
 8001e34:	3fcccccd 	.word	0x3fcccccd
 8001e38:	42480000 	.word	0x42480000
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	43c80000 	.word	0x43c80000
 8001e44:	44480000 	.word	0x44480000

08001e48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e54:	460b      	mov	r3, r1
 8001e56:	71fb      	strb	r3, [r7, #7]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	79fa      	ldrb	r2, [r7, #7]
 8001e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	79ba      	ldrb	r2, [r7, #6]
 8001e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e70:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	d801      	bhi.n	8001e82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001e80:	e04d      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e86:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	d801      	bhi.n	8001e98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001e96:	e042      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001e98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e9c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	d801      	bhi.n	8001eae <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001eac:	e037      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001eae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f40 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	d801      	bhi.n	8001ec4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001ec2:	e02c      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001ec4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ec8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001f48 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed4:	d801      	bhi.n	8001eda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001ed8:	e021      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001eda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ede:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f50 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	d801      	bhi.n	8001ef0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001eee:	e016      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001ef0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f58 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d801      	bhi.n	8001f06 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001f04:	e00b      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001f06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f0a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001f60 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d801      	bhi.n	8001f1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001f1a:	e000      	b.n	8001f1e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	3fcccccd 	.word	0x3fcccccd
 8001f34:	3fcccccd 	.word	0x3fcccccd
 8001f38:	41480000 	.word	0x41480000
 8001f3c:	41c80000 	.word	0x41c80000
 8001f40:	42480000 	.word	0x42480000
 8001f44:	42480000 	.word	0x42480000
 8001f48:	42c80000 	.word	0x42c80000
 8001f4c:	42c80000 	.word	0x42c80000
 8001f50:	43480000 	.word	0x43480000
 8001f54:	43480000 	.word	0x43480000
 8001f58:	43c80000 	.word	0x43c80000
 8001f5c:	43c80000 	.word	0x43c80000
 8001f60:	44480000 	.word	0x44480000
 8001f64:	44480000 	.word	0x44480000
 8001f68:	44c80000 	.word	0x44c80000

08001f6c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	460b      	mov	r3, r1
 8001f7a:	72fb      	strb	r3, [r7, #11]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	695c      	ldr	r4, [r3, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	b298      	uxth	r0, r3
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	b299      	uxth	r1, r3
 8001f92:	893b      	ldrh	r3, [r7, #8]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	47a0      	blx	r4
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd90      	pop	{r4, r7, pc}

08001fa2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fa2:	b590      	push	{r4, r7, lr}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	461a      	mov	r2, r3
 8001fae:	460b      	mov	r3, r1
 8001fb0:	72fb      	strb	r3, [r7, #11]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	691c      	ldr	r4, [r3, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	7b1b      	ldrb	r3, [r3, #12]
 8001fc2:	b298      	uxth	r0, r3
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	893b      	ldrh	r3, [r7, #8]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	47a0      	blx	r4
 8001fce:	4603      	mov	r3, r0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd90      	pop	{r4, r7, pc}

08001fd8 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	72fb      	strb	r3, [r7, #11]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685c      	ldr	r4, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68d8      	ldr	r0, [r3, #12]
 8001ff4:	893b      	ldrh	r3, [r7, #8]
 8001ff6:	7af9      	ldrb	r1, [r7, #11]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	47a0      	blx	r4
 8001ffc:	6178      	str	r0, [r7, #20]

  return ret;
 8001ffe:	697b      	ldr	r3, [r7, #20]
}
 8002000:	4618      	mov	r0, r3
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}

08002008 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	460b      	mov	r3, r1
 8002016:	72fb      	strb	r3, [r7, #11]
 8002018:	4613      	mov	r3, r2
 800201a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681c      	ldr	r4, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68d8      	ldr	r0, [r3, #12]
 8002024:	893b      	ldrh	r3, [r7, #8]
 8002026:	7af9      	ldrb	r1, [r7, #11]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	47a0      	blx	r4
 800202c:	6178      	str	r0, [r7, #20]

  return ret;
 800202e:	697b      	ldr	r3, [r7, #20]
}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}

08002038 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002044:	f107 0210 	add.w	r2, r7, #16
 8002048:	2301      	movs	r3, #1
 800204a:	2120      	movs	r1, #32
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffc3 	bl	8001fd8 <lis2dw12_read_reg>
 8002052:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d118      	bne.n	800208c <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	b2da      	uxtb	r2, r3
 8002064:	7c3b      	ldrb	r3, [r7, #16]
 8002066:	f362 0383 	bfi	r3, r2, #2, #2
 800206a:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	b2da      	uxtb	r2, r3
 8002074:	7c3b      	ldrb	r3, [r7, #16]
 8002076:	f362 0301 	bfi	r3, r2, #0, #2
 800207a:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800207c:	f107 0210 	add.w	r2, r7, #16
 8002080:	2301      	movs	r3, #1
 8002082:	2120      	movs	r1, #32
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ffbf 	bl	8002008 <lis2dw12_write_reg>
 800208a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002092:	f107 020c 	add.w	r2, r7, #12
 8002096:	2301      	movs	r3, #1
 8002098:	2125      	movs	r1, #37	; 0x25
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff9c 	bl	8001fd8 <lis2dw12_read_reg>
 80020a0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d110      	bne.n	80020ca <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	7b3b      	ldrb	r3, [r7, #12]
 80020b4:	f362 0382 	bfi	r3, r2, #2, #1
 80020b8:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80020ba:	f107 020c 	add.w	r2, r7, #12
 80020be:	2301      	movs	r3, #1
 80020c0:	2125      	movs	r1, #37	; 0x25
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffa0 	bl	8002008 <lis2dw12_write_reg>
 80020c8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80020ca:	697b      	ldr	r3, [r7, #20]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80020de:	f107 0210 	add.w	r2, r7, #16
 80020e2:	2301      	movs	r3, #1
 80020e4:	2120      	movs	r1, #32
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff76 	bl	8001fd8 <lis2dw12_read_reg>
 80020ec:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 80a3 	bne.w	800223c <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80020f6:	f107 020c 	add.w	r2, r7, #12
 80020fa:	2301      	movs	r3, #1
 80020fc:	2125      	movs	r1, #37	; 0x25
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff6a 	bl	8001fd8 <lis2dw12_read_reg>
 8002104:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002106:	7b3b      	ldrb	r3, [r7, #12]
 8002108:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	011a      	lsls	r2, r3, #4
 8002110:	7c3b      	ldrb	r3, [r7, #16]
 8002112:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002116:	b2db      	uxtb	r3, r3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
             ctrl1.lp_mode))
 800211c:	7c3a      	ldrb	r2, [r7, #16]
 800211e:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002122:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002124:	4413      	add	r3, r2
 8002126:	2b1b      	cmp	r3, #27
 8002128:	f200 8084 	bhi.w	8002234 <lis2dw12_power_mode_get+0x160>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <lis2dw12_power_mode_get+0x60>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	080021c5 	.word	0x080021c5
 8002138:	080021bd 	.word	0x080021bd
 800213c:	080021b5 	.word	0x080021b5
 8002140:	080021ad 	.word	0x080021ad
 8002144:	080021a5 	.word	0x080021a5
 8002148:	08002235 	.word	0x08002235
 800214c:	08002235 	.word	0x08002235
 8002150:	08002235 	.word	0x08002235
 8002154:	080021e5 	.word	0x080021e5
 8002158:	080021dd 	.word	0x080021dd
 800215c:	080021d5 	.word	0x080021d5
 8002160:	080021cd 	.word	0x080021cd
 8002164:	08002235 	.word	0x08002235
 8002168:	08002235 	.word	0x08002235
 800216c:	08002235 	.word	0x08002235
 8002170:	08002235 	.word	0x08002235
 8002174:	0800220d 	.word	0x0800220d
 8002178:	08002205 	.word	0x08002205
 800217c:	080021fd 	.word	0x080021fd
 8002180:	080021f5 	.word	0x080021f5
 8002184:	080021ed 	.word	0x080021ed
 8002188:	08002235 	.word	0x08002235
 800218c:	08002235 	.word	0x08002235
 8002190:	08002235 	.word	0x08002235
 8002194:	0800222d 	.word	0x0800222d
 8002198:	08002225 	.word	0x08002225
 800219c:	0800221d 	.word	0x0800221d
 80021a0:	08002215 	.word	0x08002215
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2204      	movs	r2, #4
 80021a8:	701a      	strb	r2, [r3, #0]
        break;
 80021aa:	e048      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2203      	movs	r2, #3
 80021b0:	701a      	strb	r2, [r3, #0]
        break;
 80021b2:	e044      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
        break;
 80021ba:	e040      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
        break;
 80021c2:	e03c      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
        break;
 80021ca:	e038      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	220b      	movs	r2, #11
 80021d0:	701a      	strb	r2, [r3, #0]
        break;
 80021d2:	e034      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	220a      	movs	r2, #10
 80021d8:	701a      	strb	r2, [r3, #0]
        break;
 80021da:	e030      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2209      	movs	r2, #9
 80021e0:	701a      	strb	r2, [r3, #0]
        break;
 80021e2:	e02c      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2208      	movs	r2, #8
 80021e8:	701a      	strb	r2, [r3, #0]
        break;
 80021ea:	e028      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2214      	movs	r2, #20
 80021f0:	701a      	strb	r2, [r3, #0]
        break;
 80021f2:	e024      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2213      	movs	r2, #19
 80021f8:	701a      	strb	r2, [r3, #0]
        break;
 80021fa:	e020      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2212      	movs	r2, #18
 8002200:	701a      	strb	r2, [r3, #0]
        break;
 8002202:	e01c      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2211      	movs	r2, #17
 8002208:	701a      	strb	r2, [r3, #0]
        break;
 800220a:	e018      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2210      	movs	r2, #16
 8002210:	701a      	strb	r2, [r3, #0]
        break;
 8002212:	e014      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	221b      	movs	r2, #27
 8002218:	701a      	strb	r2, [r3, #0]
        break;
 800221a:	e010      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	221a      	movs	r2, #26
 8002220:	701a      	strb	r2, [r3, #0]
        break;
 8002222:	e00c      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2219      	movs	r2, #25
 8002228:	701a      	strb	r2, [r3, #0]
        break;
 800222a:	e008      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2218      	movs	r2, #24
 8002230:	701a      	strb	r2, [r3, #0]
        break;
 8002232:	e004      	b.n	800223e <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2204      	movs	r2, #4
 8002238:	701a      	strb	r2, [r3, #0]
        break;
 800223a:	e000      	b.n	800223e <lis2dw12_power_mode_get+0x16a>
    }
  }
 800223c:	bf00      	nop

  return ret;
 800223e:	697b      	ldr	r3, [r7, #20]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002254:	f107 0210 	add.w	r2, r7, #16
 8002258:	2301      	movs	r3, #1
 800225a:	2120      	movs	r1, #32
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff febb 	bl	8001fd8 <lis2dw12_read_reg>
 8002262:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	b2da      	uxtb	r2, r3
 8002272:	7c3b      	ldrb	r3, [r7, #16]
 8002274:	f362 1307 	bfi	r3, r2, #4, #4
 8002278:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800227a:	f107 0210 	add.w	r2, r7, #16
 800227e:	2301      	movs	r3, #1
 8002280:	2120      	movs	r1, #32
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fec0 	bl	8002008 <lis2dw12_write_reg>
 8002288:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002290:	f107 020c 	add.w	r2, r7, #12
 8002294:	2301      	movs	r3, #1
 8002296:	2122      	movs	r1, #34	; 0x22
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fe9d 	bl	8001fd8 <lis2dw12_read_reg>
 800229e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d110      	bne.n	80022c8 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	7b3b      	ldrb	r3, [r7, #12]
 80022b2:	f362 0301 	bfi	r3, r2, #0, #2
 80022b6:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80022b8:	f107 020c 	add.w	r2, r7, #12
 80022bc:	2301      	movs	r3, #1
 80022be:	2122      	movs	r1, #34	; 0x22
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fea1 	bl	8002008 <lis2dw12_write_reg>
 80022c6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80022c8:	697b      	ldr	r3, [r7, #20]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80022de:	f107 0210 	add.w	r2, r7, #16
 80022e2:	2301      	movs	r3, #1
 80022e4:	2120      	movs	r1, #32
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fe76 	bl	8001fd8 <lis2dw12_read_reg>
 80022ec:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 80b3 	bne.w	800245c <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80022f6:	f107 020c 	add.w	r2, r7, #12
 80022fa:	2301      	movs	r3, #1
 80022fc:	2122      	movs	r1, #34	; 0x22
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fe6a 	bl	8001fd8 <lis2dw12_read_reg>
 8002304:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002306:	7b3b      	ldrb	r3, [r7, #12]
 8002308:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	7c3a      	ldrb	r2, [r7, #16]
 8002312:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	4413      	add	r3, r2
 800231a:	2b32      	cmp	r3, #50	; 0x32
 800231c:	f200 809a 	bhi.w	8002454 <lis2dw12_data_rate_get+0x180>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <lis2dw12_data_rate_get+0x54>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	080023f5 	.word	0x080023f5
 800232c:	080023fd 	.word	0x080023fd
 8002330:	08002405 	.word	0x08002405
 8002334:	0800240d 	.word	0x0800240d
 8002338:	08002415 	.word	0x08002415
 800233c:	0800241d 	.word	0x0800241d
 8002340:	08002425 	.word	0x08002425
 8002344:	0800242d 	.word	0x0800242d
 8002348:	08002435 	.word	0x08002435
 800234c:	0800243d 	.word	0x0800243d
 8002350:	08002455 	.word	0x08002455
 8002354:	08002455 	.word	0x08002455
 8002358:	08002455 	.word	0x08002455
 800235c:	08002455 	.word	0x08002455
 8002360:	08002455 	.word	0x08002455
 8002364:	08002455 	.word	0x08002455
 8002368:	08002455 	.word	0x08002455
 800236c:	08002455 	.word	0x08002455
 8002370:	0800244d 	.word	0x0800244d
 8002374:	08002455 	.word	0x08002455
 8002378:	08002455 	.word	0x08002455
 800237c:	08002455 	.word	0x08002455
 8002380:	08002455 	.word	0x08002455
 8002384:	08002455 	.word	0x08002455
 8002388:	08002455 	.word	0x08002455
 800238c:	08002455 	.word	0x08002455
 8002390:	08002455 	.word	0x08002455
 8002394:	08002455 	.word	0x08002455
 8002398:	08002455 	.word	0x08002455
 800239c:	08002455 	.word	0x08002455
 80023a0:	08002455 	.word	0x08002455
 80023a4:	08002455 	.word	0x08002455
 80023a8:	08002455 	.word	0x08002455
 80023ac:	08002455 	.word	0x08002455
 80023b0:	08002455 	.word	0x08002455
 80023b4:	08002455 	.word	0x08002455
 80023b8:	08002455 	.word	0x08002455
 80023bc:	08002455 	.word	0x08002455
 80023c0:	08002455 	.word	0x08002455
 80023c4:	08002455 	.word	0x08002455
 80023c8:	08002455 	.word	0x08002455
 80023cc:	08002455 	.word	0x08002455
 80023d0:	08002455 	.word	0x08002455
 80023d4:	08002455 	.word	0x08002455
 80023d8:	08002455 	.word	0x08002455
 80023dc:	08002455 	.word	0x08002455
 80023e0:	08002455 	.word	0x08002455
 80023e4:	08002455 	.word	0x08002455
 80023e8:	08002455 	.word	0x08002455
 80023ec:	08002455 	.word	0x08002455
 80023f0:	08002445 	.word	0x08002445
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
        break;
 80023fa:	e030      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
        break;
 8002402:	e02c      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
        break;
 800240a:	e028      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2203      	movs	r2, #3
 8002410:	701a      	strb	r2, [r3, #0]
        break;
 8002412:	e024      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2204      	movs	r2, #4
 8002418:	701a      	strb	r2, [r3, #0]
        break;
 800241a:	e020      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2205      	movs	r2, #5
 8002420:	701a      	strb	r2, [r3, #0]
        break;
 8002422:	e01c      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2206      	movs	r2, #6
 8002428:	701a      	strb	r2, [r3, #0]
        break;
 800242a:	e018      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2207      	movs	r2, #7
 8002430:	701a      	strb	r2, [r3, #0]
        break;
 8002432:	e014      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2208      	movs	r2, #8
 8002438:	701a      	strb	r2, [r3, #0]
        break;
 800243a:	e010      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2209      	movs	r2, #9
 8002440:	701a      	strb	r2, [r3, #0]
        break;
 8002442:	e00c      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2232      	movs	r2, #50	; 0x32
 8002448:	701a      	strb	r2, [r3, #0]
        break;
 800244a:	e008      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2212      	movs	r2, #18
 8002450:	701a      	strb	r2, [r3, #0]
        break;
 8002452:	e004      	b.n	800245e <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
        break;
 800245a:	e000      	b.n	800245e <lis2dw12_data_rate_get+0x18a>
    }
  }
 800245c:	bf00      	nop

  return ret;
 800245e:	697b      	ldr	r3, [r7, #20]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002474:	f107 0208 	add.w	r2, r7, #8
 8002478:	2301      	movs	r3, #1
 800247a:	2121      	movs	r1, #33	; 0x21
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fdab 	bl	8001fd8 <lis2dw12_read_reg>
 8002482:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	7a3b      	ldrb	r3, [r7, #8]
 8002494:	f362 03c3 	bfi	r3, r2, #3, #1
 8002498:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800249a:	f107 0208 	add.w	r2, r7, #8
 800249e:	2301      	movs	r3, #1
 80024a0:	2121      	movs	r1, #33	; 0x21
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fdb0 	bl	8002008 <lis2dw12_write_reg>
 80024a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80024c0:	f107 0208 	add.w	r2, r7, #8
 80024c4:	2301      	movs	r3, #1
 80024c6:	2125      	movs	r1, #37	; 0x25
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fd85 	bl	8001fd8 <lis2dw12_read_reg>
 80024ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	7a3b      	ldrb	r3, [r7, #8]
 80024e0:	f362 1305 	bfi	r3, r2, #4, #2
 80024e4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80024e6:	f107 0208 	add.w	r2, r7, #8
 80024ea:	2301      	movs	r3, #1
 80024ec:	2125      	movs	r1, #37	; 0x25
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fd8a 	bl	8002008 <lis2dw12_write_reg>
 80024f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800250a:	f107 0208 	add.w	r2, r7, #8
 800250e:	2301      	movs	r3, #1
 8002510:	2125      	movs	r1, #37	; 0x25
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fd60 	bl	8001fd8 <lis2dw12_read_reg>
 8002518:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800251a:	7a3b      	ldrb	r3, [r7, #8]
 800251c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b03      	cmp	r3, #3
 8002524:	d81a      	bhi.n	800255c <lis2dw12_full_scale_get+0x5c>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <lis2dw12_full_scale_get+0x2c>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002545 	.word	0x08002545
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002555 	.word	0x08002555
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
      break;
 8002542:	e00f      	b.n	8002564 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
      break;
 800254a:	e00b      	b.n	8002564 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
      break;
 8002552:	e007      	b.n	8002564 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2203      	movs	r2, #3
 8002558:	701a      	strb	r2, [r3, #0]
      break;
 800255a:	e003      	b.n	8002564 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
      break;
 8002562:	bf00      	nop
  }

  return ret;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop

08002570 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800257a:	f107 020c 	add.w	r2, r7, #12
 800257e:	2306      	movs	r3, #6
 8002580:	2128      	movs	r1, #40	; 0x28
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fd28 	bl	8001fd8 <lis2dw12_read_reg>
 8002588:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800258a:	7b7b      	ldrb	r3, [r7, #13]
 800258c:	b21a      	sxth	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002598:	b29b      	uxth	r3, r3
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b29a      	uxth	r2, r3
 800259e:	7b3b      	ldrb	r3, [r7, #12]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3302      	adds	r3, #2
 80025b2:	b212      	sxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	3302      	adds	r3, #2
 80025ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	3302      	adds	r3, #2
 80025d0:	b212      	sxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80025d4:	7c7a      	ldrb	r2, [r7, #17]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	3304      	adds	r3, #4
 80025da:	b212      	sxth	r2, r2
 80025dc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	3304      	adds	r3, #4
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	7c3b      	ldrb	r3, [r7, #16]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3304      	adds	r3, #4
 80025f8:	b212      	sxth	r2, r2
 80025fa:	801a      	strh	r2, [r3, #0]

  return ret;
 80025fc:	697b      	ldr	r3, [r7, #20]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8002610:	2301      	movs	r3, #1
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	210f      	movs	r1, #15
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fcde 	bl	8001fd8 <lis2dw12_read_reg>
 800261c:	60f8      	str	r0, [r7, #12]

  return ret;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	2301      	movs	r3, #1
 800263a:	2121      	movs	r1, #33	; 0x21
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff fccb 	bl	8001fd8 <lis2dw12_read_reg>
 8002642:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	7a3b      	ldrb	r3, [r7, #8]
 8002654:	f362 0382 	bfi	r3, r2, #2, #1
 8002658:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800265a:	f107 0208 	add.w	r2, r7, #8
 800265e:	2301      	movs	r3, #1
 8002660:	2121      	movs	r1, #33	; 0x21
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fcd0 	bl	8002008 <lis2dw12_write_reg>
 8002668:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002680:	f107 0208 	add.w	r2, r7, #8
 8002684:	2301      	movs	r3, #1
 8002686:	212e      	movs	r1, #46	; 0x2e
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fca5 	bl	8001fd8 <lis2dw12_read_reg>
 800268e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	b2da      	uxtb	r2, r3
 800269e:	7a3b      	ldrb	r3, [r7, #8]
 80026a0:	f362 1347 	bfi	r3, r2, #5, #3
 80026a4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80026a6:	f107 0208 	add.w	r2, r7, #8
 80026aa:	2301      	movs	r3, #1
 80026ac:	212e      	movs	r1, #46	; 0x2e
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fcaa 	bl	8002008 <lis2dw12_write_reg>
 80026b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	e067      	b.n	80027ac <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	7b1a      	ldrb	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <LIS2MDL_RegisterBusIO+0xf8>)
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <LIS2MDL_RegisterBusIO+0xfc>)
 800271e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e036      	b.n	80027ac <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4798      	blx	r3
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e02c      	b.n	80027ac <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d028      	beq.n	80027ac <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002760:	2b00      	cmp	r3, #0
 8002762:	d123      	bne.n	80027ac <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10d      	bne.n	8002788 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800276c:	2334      	movs	r3, #52	; 0x34
 800276e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	461a      	mov	r2, r3
 8002774:	2162      	movs	r1, #98	; 0x62
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fb1b 	bl	8002db2 <LIS2MDL_Write_Reg>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d014      	beq.n	80027ac <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
 8002786:	e012      	b.n	80027ae <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d101      	bne.n	8002794 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	e00c      	b.n	80027ae <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3320      	adds	r3, #32
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f000 ff70 	bl	8003680 <lis2mdl_i2c_interface_set>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	e000      	b.n	80027ae <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80027ac:	68fb      	ldr	r3, [r7, #12]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	08002e09 	.word	0x08002e09
 80027bc:	08002e8b 	.word	0x08002e8b

080027c0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d144      	bne.n	800285a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80027d0:	f107 0208 	add.w	r2, r7, #8
 80027d4:	2301      	movs	r3, #1
 80027d6:	2162      	movs	r1, #98	; 0x62
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fb97 	bl	8002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	e06c      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80027ea:	f107 020c 	add.w	r2, r7, #12
 80027ee:	2301      	movs	r3, #1
 80027f0:	2160      	movs	r1, #96	; 0x60
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fb8a 	bl	8002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002802:	e05f      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8002804:	7a3b      	ldrb	r3, [r7, #8]
 8002806:	f043 0310 	orr.w	r3, r3, #16
 800280a:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 800280c:	7a3b      	ldrb	r3, [r7, #8]
 800280e:	f36f 0341 	bfc	r3, #1, #1
 8002812:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002814:	7b3b      	ldrb	r3, [r7, #12]
 8002816:	2202      	movs	r2, #2
 8002818:	f362 0301 	bfi	r3, r2, #0, #2
 800281c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800281e:	7b3b      	ldrb	r3, [r7, #12]
 8002820:	f043 030c 	orr.w	r3, r3, #12
 8002824:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002826:	f107 0208 	add.w	r2, r7, #8
 800282a:	2301      	movs	r3, #1
 800282c:	2162      	movs	r1, #98	; 0x62
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fcab 	bl	800318a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e041      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002840:	f107 020c 	add.w	r2, r7, #12
 8002844:	2301      	movs	r3, #1
 8002846:	2160      	movs	r1, #96	; 0x60
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fc9e 	bl	800318a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d032      	beq.n	80028ba <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	e034      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3320      	adds	r3, #32
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fe65 	bl	8003530 <lis2mdl_block_data_update_set>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	e028      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3320      	adds	r3, #32
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fdd4 	bl	8003426 <lis2mdl_operating_mode_set>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	e01c      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3320      	adds	r3, #32
 800288e:	2103      	movs	r1, #3
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fdee 	bl	8003472 <lis2mdl_data_rate_set>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	e010      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3320      	adds	r3, #32
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fec3 	bl	8003634 <lis2mdl_self_test_set>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	e004      	b.n	80028c4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8a5 	bl	8002a24 <LIS2MDL_MAG_Disable>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	e004      	b.n	80028f0 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d10b      	bne.n	8002922 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800290a:	2301      	movs	r3, #1
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	214f      	movs	r1, #79	; 0x4f
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fafb 	bl	8002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	e00c      	b.n	800293c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3320      	adds	r3, #32
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fe72 	bl	8003612 <lis2mdl_device_id_get>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
 8002938:	e000      	b.n	800293c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2232      	movs	r2, #50	; 0x32
 8002976:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <LIS2MDL_GetCapabilities+0x58>)
 800298c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	42c80000 	.word	0x42c80000

080029a0 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e032      	b.n	8002a1c <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d11d      	bne.n	80029fa <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80029be:	f107 020c 	add.w	r2, r7, #12
 80029c2:	2301      	movs	r3, #1
 80029c4:	2160      	movs	r1, #96	; 0x60
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 faa0 	bl	8002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e021      	b.n	8002a1c <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80029d8:	7b3b      	ldrb	r3, [r7, #12]
 80029da:	f36f 0301 	bfc	r3, #0, #2
 80029de:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80029e0:	f107 020c 	add.w	r2, r7, #12
 80029e4:	2301      	movs	r3, #1
 80029e6:	2160      	movs	r1, #96	; 0x60
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fbce 	bl	800318a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	e010      	b.n	8002a1c <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3320      	adds	r3, #32
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fd10 	bl	8003426 <lis2mdl_operating_mode_set>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a10:	e004      	b.n	8002a1c <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e033      	b.n	8002aa2 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d11e      	bne.n	8002a80 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002a42:	f107 020c 	add.w	r2, r7, #12
 8002a46:	2301      	movs	r3, #1
 8002a48:	2160      	movs	r1, #96	; 0x60
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa5e 	bl	8002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e022      	b.n	8002aa2 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002a5c:	7b3b      	ldrb	r3, [r7, #12]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f362 0301 	bfi	r3, r2, #0, #2
 8002a64:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002a66:	f107 020c 	add.w	r2, r7, #12
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2160      	movs	r1, #96	; 0x60
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fb8b 	bl	800318a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e010      	b.n	8002aa2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3320      	adds	r3, #32
 8002a84:	2102      	movs	r1, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fccd 	bl	8003426 <lis2mdl_operating_mode_set>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e004      	b.n	8002aa2 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002aba:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3320      	adds	r3, #32
 8002ade:	f107 020b 	add.w	r2, r7, #11
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fceb 	bl	80034c0 <lis2mdl_data_rate_get>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	e023      	b.n	8002b3e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002af6:	7afb      	ldrb	r3, [r7, #11]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d81b      	bhi.n	8002b34 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002afc:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b15 	.word	0x08002b15
 8002b08:	08002b1d 	.word	0x08002b1d
 8002b0c:	08002b25 	.word	0x08002b25
 8002b10:	08002b2d 	.word	0x08002b2d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002b18:	601a      	str	r2, [r3, #0]
      break;
 8002b1a:	e00f      	b.n	8002b3c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002b20:	601a      	str	r2, [r3, #0]
      break;
 8002b22:	e00b      	b.n	8002b3c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002b28:	601a      	str	r2, [r3, #0]
      break;
 8002b2a:	e007      	b.n	8002b3c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002b30:	601a      	str	r2, [r3, #0]
      break;
 8002b32:	e003      	b.n	8002b3c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
 8002b38:	60fb      	str	r3, [r7, #12]
      break;
 8002b3a:	bf00      	nop
  }

  return ret;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	41200000 	.word	0x41200000
 8002b4c:	41a00000 	.word	0x41a00000
 8002b50:	42480000 	.word	0x42480000
 8002b54:	42c80000 	.word	0x42c80000

08002b58 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002b64:	edd7 7a00 	vldr	s15, [r7]
 8002b68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	d801      	bhi.n	8002b7a <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002b76:	2300      	movs	r3, #0
 8002b78:	e016      	b.n	8002ba8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b7a:	edd7 7a00 	vldr	s15, [r7]
 8002b7e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	d801      	bhi.n	8002b90 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e00b      	b.n	8002ba8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002b90:	edd7 7a00 	vldr	s15, [r7]
 8002b94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c1c <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	d801      	bhi.n	8002ba6 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e000      	b.n	8002ba8 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002ba6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002ba8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d121      	bne.n	8002bf6 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002bb2:	f107 020c 	add.w	r2, r7, #12
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	2160      	movs	r1, #96	; 0x60
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9a6 	bl	8002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	e022      	b.n	8002c12 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	7b3b      	ldrb	r3, [r7, #12]
 8002bd6:	f362 0383 	bfi	r3, r2, #2, #2
 8002bda:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002bdc:	f107 020c 	add.w	r2, r7, #12
 8002be0:	2301      	movs	r3, #1
 8002be2:	2160      	movs	r1, #96	; 0x60
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fad0 	bl	800318a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00f      	beq.n	8002c10 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf4:	e00d      	b.n	8002c12 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fc37 	bl	8003472 <lis2mdl_data_rate_set>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	e000      	b.n	8002c12 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	42480000 	.word	0x42480000

08002c20 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2232      	movs	r2, #50	; 0x32
 8002c2e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3320      	adds	r3, #32
 8002c64:	f107 0208 	add.w	r2, r7, #8
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fc86 	bl	800357c <lis2mdl_magnetic_raw_get>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7a:	e00c      	b.n	8002c96 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002c7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002c84:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d137      	bne.n	8002d20 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002cb0:	f107 0218 	add.w	r2, r7, #24
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	2168      	movs	r1, #104	; 0x68
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f927 	bl	8002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	e06f      	b.n	8002daa <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002cca:	7e7b      	ldrb	r3, [r7, #25]
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002cd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	7e3b      	ldrb	r3, [r7, #24]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8002ce6:	7efb      	ldrb	r3, [r7, #27]
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002cec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	7ebb      	ldrb	r3, [r7, #26]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002d02:	7f7b      	ldrb	r3, [r7, #29]
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002d08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	7f3b      	ldrb	r3, [r7, #28]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	82bb      	strh	r3, [r7, #20]
 8002d1e:	e00d      	b.n	8002d3c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3320      	adds	r3, #32
 8002d24:	f107 0210 	add.w	r2, r7, #16
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fc26 	bl	800357c <lis2mdl_magnetic_raw_get>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e036      	b.n	8002daa <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff feb1 	bl	8002aaa <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d60:	ee17 2a90 	vmov	r2, s15
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d80:	ee17 2a90 	vmov	r2, s15
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da0:	ee17 2a90 	vmov	r2, s15
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d10b      	bne.n	8002de2 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002dca:	1cba      	adds	r2, r7, #2
 8002dcc:	78f9      	ldrb	r1, [r7, #3]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f9da 	bl	800318a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8002de0:	e00e      	b.n	8002e00 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f103 0020 	add.w	r0, r3, #32
 8002de8:	1cba      	adds	r2, r7, #2
 8002dea:	78f9      	ldrb	r1, [r7, #3]
 8002dec:	2301      	movs	r3, #1
 8002dee:	f000 fb02 	bl	80033f6 <lis2mdl_write_reg>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfc:	e000      	b.n	8002e00 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	72fb      	strb	r3, [r7, #11]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10e      	bne.n	8002e46 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	695c      	ldr	r4, [r3, #20]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	7b1b      	ldrb	r3, [r3, #12]
 8002e30:	b298      	uxth	r0, r3
 8002e32:	7afb      	ldrb	r3, [r7, #11]
 8002e34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	b299      	uxth	r1, r3
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	47a0      	blx	r4
 8002e42:	4603      	mov	r3, r0
 8002e44:	e01d      	b.n	8002e82 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d10b      	bne.n	8002e66 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	695c      	ldr	r4, [r3, #20]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	7b1b      	ldrb	r3, [r3, #12]
 8002e56:	b298      	uxth	r0, r3
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	b299      	uxth	r1, r3
 8002e5c:	893b      	ldrh	r3, [r7, #8]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	47a0      	blx	r4
 8002e62:	4603      	mov	r3, r0
 8002e64:	e00d      	b.n	8002e82 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	695c      	ldr	r4, [r3, #20]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	7b1b      	ldrb	r3, [r3, #12]
 8002e6e:	b298      	uxth	r0, r3
 8002e70:	7afb      	ldrb	r3, [r7, #11]
 8002e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	893b      	ldrh	r3, [r7, #8]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	47a0      	blx	r4
 8002e80:	4603      	mov	r3, r0
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e8a:	b590      	push	{r4, r7, lr}
 8002e8c:	b087      	sub	sp, #28
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	461a      	mov	r2, r3
 8002e96:	460b      	mov	r3, r1
 8002e98:	72fb      	strb	r3, [r7, #11]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10e      	bne.n	8002ec8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	691c      	ldr	r4, [r3, #16]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	7b1b      	ldrb	r3, [r3, #12]
 8002eb2:	b298      	uxth	r0, r3
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	b299      	uxth	r1, r3
 8002ebe:	893b      	ldrh	r3, [r7, #8]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	47a0      	blx	r4
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	e01d      	b.n	8002f04 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d10b      	bne.n	8002ee8 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	691c      	ldr	r4, [r3, #16]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	7b1b      	ldrb	r3, [r3, #12]
 8002ed8:	b298      	uxth	r0, r3
 8002eda:	7afb      	ldrb	r3, [r7, #11]
 8002edc:	b299      	uxth	r1, r3
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	47a0      	blx	r4
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	e00d      	b.n	8002f04 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	691c      	ldr	r4, [r3, #16]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	7b1b      	ldrb	r3, [r3, #12]
 8002ef0:	b298      	uxth	r0, r3
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
 8002ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	b299      	uxth	r1, r3
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	47a0      	blx	r4
 8002f02:	4603      	mov	r3, r0
  }
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	461a      	mov	r2, r3
 8002f18:	460b      	mov	r3, r1
 8002f1a:	72fb      	strb	r3, [r7, #11]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002f26:	2340      	movs	r3, #64	; 0x40
 8002f28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002f32:	233d      	movs	r3, #61	; 0x3d
 8002f34:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002f36:	2315      	movs	r3, #21
 8002f38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002f3c:	2316      	movs	r3, #22
 8002f3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002f42:	2317      	movs	r3, #23
 8002f44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002f48:	2314      	movs	r3, #20
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002f4e:	2344      	movs	r3, #68	; 0x44
 8002f50:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002f52:	2302      	movs	r3, #2
 8002f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002f58:	2339      	movs	r3, #57	; 0x39
 8002f5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002f64:	2329      	movs	r3, #41	; 0x29
 8002f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002f6a:	231e      	movs	r3, #30
 8002f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002f76:	893b      	ldrh	r3, [r7, #8]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002f88:	2340      	movs	r3, #64	; 0x40
 8002f8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f103 0020 	add.w	r0, r3, #32
 8002f94:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002f98:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f000 fa2a 	bl	80033f6 <lis2mdl_write_reg>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fac:	e0e9      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f103 0020 	add.w	r0, r3, #32
 8002fb4:	f107 021f 	add.w	r2, r7, #31
 8002fb8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f000 fa1a 	bl	80033f6 <lis2mdl_write_reg>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fcc:	e0d9      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f103 0020 	add.w	r0, r3, #32
 8002fd4:	f107 020b 	add.w	r2, r7, #11
 8002fd8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f000 fa0a 	bl	80033f6 <lis2mdl_write_reg>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fec:	e0c9      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f103 0020 	add.w	r0, r3, #32
 8002ff4:	f107 021d 	add.w	r2, r7, #29
 8002ff8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f000 f9fa 	bl	80033f6 <lis2mdl_write_reg>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	e0b9      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f103 0020 	add.w	r0, r3, #32
 8003014:	f107 021e 	add.w	r2, r7, #30
 8003018:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800301c:	2301      	movs	r3, #1
 800301e:	f000 f9ea 	bl	80033f6 <lis2mdl_write_reg>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	e0a9      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f103 0020 	add.w	r0, r3, #32
 8003034:	f107 0220 	add.w	r2, r7, #32
 8003038:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800303c:	2301      	movs	r3, #1
 800303e:	f000 f9da 	bl	80033f6 <lis2mdl_write_reg>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	e099      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f103 0020 	add.w	r0, r3, #32
 8003054:	f107 021c 	add.w	r2, r7, #28
 8003058:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800305c:	2301      	movs	r3, #1
 800305e:	f000 f9b2 	bl	80033c6 <lis2mdl_read_reg>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	e089      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800306e:	7f3b      	ldrb	r3, [r7, #28]
 8003070:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003074:	429a      	cmp	r2, r3
 8003076:	d102      	bne.n	800307e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003078:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800307c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f103 0020 	add.w	r0, r3, #32
 8003084:	f107 021c 	add.w	r2, r7, #28
 8003088:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800308c:	2301      	movs	r3, #1
 800308e:	f000 f9b2 	bl	80033f6 <lis2mdl_write_reg>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	e071      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f103 0020 	add.w	r0, r3, #32
 80030a4:	f107 0214 	add.w	r2, r7, #20
 80030a8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80030ac:	2306      	movs	r3, #6
 80030ae:	f000 f98a 	bl	80033c6 <lis2mdl_read_reg>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	e061      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f103 0020 	add.w	r0, r3, #32
 80030c4:	f107 021b 	add.w	r2, r7, #27
 80030c8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80030cc:	2301      	movs	r3, #1
 80030ce:	f000 f97a 	bl	80033c6 <lis2mdl_read_reg>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e051      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80030de:	7efa      	ldrb	r2, [r7, #27]
 80030e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030e4:	4013      	ands	r3, r2
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1e6      	bne.n	80030be <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f103 0020 	add.w	r0, r3, #32
 80030f6:	f107 021b 	add.w	r2, r7, #27
 80030fa:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80030fe:	2301      	movs	r3, #1
 8003100:	f000 f961 	bl	80033c6 <lis2mdl_read_reg>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	e038      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003110:	7efa      	ldrb	r2, [r7, #27]
 8003112:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003116:	4013      	ands	r3, r2
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800311e:	429a      	cmp	r2, r3
 8003120:	d1e6      	bne.n	80030f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f103 0020 	add.w	r0, r3, #32
 8003128:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800312c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003130:	2301      	movs	r3, #1
 8003132:	f000 f960 	bl	80033f6 <lis2mdl_write_reg>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	e01f      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f103 0020 	add.w	r0, r3, #32
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	f000 f939 	bl	80033c6 <lis2mdl_read_reg>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	e010      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f103 0020 	add.w	r0, r3, #32
 8003166:	f107 0220 	add.w	r2, r7, #32
 800316a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800316e:	2301      	movs	r3, #1
 8003170:	f000 f941 	bl	80033f6 <lis2mdl_write_reg>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e000      	b.n	8003182 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3730      	adds	r7, #48	; 0x30
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b08c      	sub	sp, #48	; 0x30
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	461a      	mov	r2, r3
 8003196:	460b      	mov	r3, r1
 8003198:	72fb      	strb	r3, [r7, #11]
 800319a:	4613      	mov	r3, r2
 800319c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80031a4:	2340      	movs	r3, #64	; 0x40
 80031a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80031b0:	233c      	movs	r3, #60	; 0x3c
 80031b2:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80031b4:	2315      	movs	r3, #21
 80031b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80031ba:	2316      	movs	r3, #22
 80031bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80031c0:	2317      	movs	r3, #23
 80031c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80031ca:	2314      	movs	r3, #20
 80031cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80031d0:	2344      	movs	r3, #68	; 0x44
 80031d2:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80031d4:	2339      	movs	r3, #57	; 0x39
 80031d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80031e0:	2329      	movs	r3, #41	; 0x29
 80031e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80031e6:	231e      	movs	r3, #30
 80031e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80031f2:	2310      	movs	r3, #16
 80031f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80031fe:	2340      	movs	r3, #64	; 0x40
 8003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003204:	230e      	movs	r3, #14
 8003206:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f103 0020 	add.w	r0, r3, #32
 8003210:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003214:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003218:	2301      	movs	r3, #1
 800321a:	f000 f8ec 	bl	80033f6 <lis2mdl_write_reg>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	e0c9      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f103 0020 	add.w	r0, r3, #32
 8003230:	f107 021f 	add.w	r2, r7, #31
 8003234:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003238:	2301      	movs	r3, #1
 800323a:	f000 f8dc 	bl	80033f6 <lis2mdl_write_reg>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	e0b9      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f103 0020 	add.w	r0, r3, #32
 8003250:	f107 020b 	add.w	r2, r7, #11
 8003254:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003258:	2301      	movs	r3, #1
 800325a:	f000 f8cc 	bl	80033f6 <lis2mdl_write_reg>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	e0a9      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f103 0020 	add.w	r0, r3, #32
 8003270:	f107 021e 	add.w	r2, r7, #30
 8003274:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003278:	2301      	movs	r3, #1
 800327a:	f000 f8bc 	bl	80033f6 <lis2mdl_write_reg>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e099      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f103 0020 	add.w	r0, r3, #32
 8003290:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003294:	2301      	movs	r3, #1
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	f000 f8ad 	bl	80033f6 <lis2mdl_write_reg>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	e08a      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f103 0020 	add.w	r0, r3, #32
 80032ae:	f107 021d 	add.w	r2, r7, #29
 80032b2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80032b6:	2301      	movs	r3, #1
 80032b8:	f000 f89d 	bl	80033f6 <lis2mdl_write_reg>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	e07a      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f103 0020 	add.w	r0, r3, #32
 80032ce:	f107 0220 	add.w	r2, r7, #32
 80032d2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80032d6:	2301      	movs	r3, #1
 80032d8:	f000 f88d 	bl	80033f6 <lis2mdl_write_reg>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	e06a      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f103 0020 	add.w	r0, r3, #32
 80032ee:	f107 021c 	add.w	r2, r7, #28
 80032f2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80032f6:	2301      	movs	r3, #1
 80032f8:	f000 f865 	bl	80033c6 <lis2mdl_read_reg>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	e05a      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003308:	7f3b      	ldrb	r3, [r7, #28]
 800330a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003316:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f103 0020 	add.w	r0, r3, #32
 800331e:	f107 021c 	add.w	r2, r7, #28
 8003322:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003326:	2301      	movs	r3, #1
 8003328:	f000 f865 	bl	80033f6 <lis2mdl_write_reg>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e042      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f103 0020 	add.w	r0, r3, #32
 800333e:	f107 0214 	add.w	r2, r7, #20
 8003342:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003346:	2306      	movs	r3, #6
 8003348:	f000 f83d 	bl	80033c6 <lis2mdl_read_reg>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e032      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f103 0020 	add.w	r0, r3, #32
 800335e:	f107 021b 	add.w	r2, r7, #27
 8003362:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003366:	2301      	movs	r3, #1
 8003368:	f000 f82d 	bl	80033c6 <lis2mdl_read_reg>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	e022      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003378:	7efa      	ldrb	r2, [r7, #27]
 800337a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800337e:	4013      	ands	r3, r2
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003386:	429a      	cmp	r2, r3
 8003388:	d1e6      	bne.n	8003358 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f103 0020 	add.w	r0, r3, #32
 8003390:	f107 021b 	add.w	r2, r7, #27
 8003394:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003398:	2301      	movs	r3, #1
 800339a:	f000 f814 	bl	80033c6 <lis2mdl_read_reg>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
 80033a8:	e009      	b.n	80033be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80033aa:	7efa      	ldrb	r2, [r7, #27]
 80033ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80033b0:	4013      	ands	r3, r2
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1e6      	bne.n	800338a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3730      	adds	r7, #48	; 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80033c6:	b590      	push	{r4, r7, lr}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	461a      	mov	r2, r3
 80033d2:	460b      	mov	r3, r1
 80033d4:	72fb      	strb	r3, [r7, #11]
 80033d6:	4613      	mov	r3, r2
 80033d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685c      	ldr	r4, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68d8      	ldr	r0, [r3, #12]
 80033e2:	893b      	ldrh	r3, [r7, #8]
 80033e4:	7af9      	ldrb	r1, [r7, #11]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	47a0      	blx	r4
 80033ea:	6178      	str	r0, [r7, #20]

  return ret;
 80033ec:	697b      	ldr	r3, [r7, #20]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80033f6:	b590      	push	{r4, r7, lr}
 80033f8:	b087      	sub	sp, #28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	461a      	mov	r2, r3
 8003402:	460b      	mov	r3, r1
 8003404:	72fb      	strb	r3, [r7, #11]
 8003406:	4613      	mov	r3, r2
 8003408:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681c      	ldr	r4, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68d8      	ldr	r0, [r3, #12]
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	7af9      	ldrb	r1, [r7, #11]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	47a0      	blx	r4
 800341a:	6178      	str	r0, [r7, #20]

  return ret;
 800341c:	697b      	ldr	r3, [r7, #20]
}
 800341e:	4618      	mov	r0, r3
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}

08003426 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003432:	f107 0208 	add.w	r2, r7, #8
 8003436:	2301      	movs	r3, #1
 8003438:	2160      	movs	r1, #96	; 0x60
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffc3 	bl	80033c6 <lis2mdl_read_reg>
 8003440:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	b2da      	uxtb	r2, r3
 8003450:	7a3b      	ldrb	r3, [r7, #8]
 8003452:	f362 0301 	bfi	r3, r2, #0, #2
 8003456:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003458:	f107 0208 	add.w	r2, r7, #8
 800345c:	2301      	movs	r3, #1
 800345e:	2160      	movs	r1, #96	; 0x60
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ffc8 	bl	80033f6 <lis2mdl_write_reg>
 8003466:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800347e:	f107 0208 	add.w	r2, r7, #8
 8003482:	2301      	movs	r3, #1
 8003484:	2160      	movs	r1, #96	; 0x60
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff9d 	bl	80033c6 <lis2mdl_read_reg>
 800348c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	b2da      	uxtb	r2, r3
 800349c:	7a3b      	ldrb	r3, [r7, #8]
 800349e:	f362 0383 	bfi	r3, r2, #2, #2
 80034a2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80034a4:	f107 0208 	add.w	r2, r7, #8
 80034a8:	2301      	movs	r3, #1
 80034aa:	2160      	movs	r1, #96	; 0x60
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ffa2 	bl	80033f6 <lis2mdl_write_reg>
 80034b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80034ca:	f107 0208 	add.w	r2, r7, #8
 80034ce:	2301      	movs	r3, #1
 80034d0:	2160      	movs	r1, #96	; 0x60
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff77 	bl	80033c6 <lis2mdl_read_reg>
 80034d8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80034da:	7a3b      	ldrb	r3, [r7, #8]
 80034dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d81a      	bhi.n	800351c <lis2mdl_data_rate_get+0x5c>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <lis2mdl_data_rate_get+0x2c>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	08003505 	.word	0x08003505
 80034f4:	0800350d 	.word	0x0800350d
 80034f8:	08003515 	.word	0x08003515
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
      break;
 8003502:	e00f      	b.n	8003524 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
      break;
 800350a:	e00b      	b.n	8003524 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2202      	movs	r2, #2
 8003510:	701a      	strb	r2, [r3, #0]
      break;
 8003512:	e007      	b.n	8003524 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2203      	movs	r2, #3
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e003      	b.n	8003524 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
      break;
 8003522:	bf00      	nop
  }

  return ret;
 8003524:	68fb      	ldr	r3, [r7, #12]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop

08003530 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800353c:	f107 0208 	add.w	r2, r7, #8
 8003540:	2301      	movs	r3, #1
 8003542:	2162      	movs	r1, #98	; 0x62
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff3e 	bl	80033c6 <lis2mdl_read_reg>
 800354a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	b2da      	uxtb	r2, r3
 800355a:	7a3b      	ldrb	r3, [r7, #8]
 800355c:	f362 1304 	bfi	r3, r2, #4, #1
 8003560:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003562:	f107 0208 	add.w	r2, r7, #8
 8003566:	2301      	movs	r3, #1
 8003568:	2162      	movs	r1, #98	; 0x62
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ff43 	bl	80033f6 <lis2mdl_write_reg>
 8003570:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003586:	f107 020c 	add.w	r2, r7, #12
 800358a:	2306      	movs	r3, #6
 800358c:	2168      	movs	r1, #104	; 0x68
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff19 	bl	80033c6 <lis2mdl_read_reg>
 8003594:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003596:	7b7b      	ldrb	r3, [r7, #13]
 8003598:	b21a      	sxth	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	7b3b      	ldrb	r3, [r7, #12]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	3302      	adds	r3, #2
 80035be:	b212      	sxth	r2, r2
 80035c0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	3302      	adds	r3, #2
 80035c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	7bbb      	ldrb	r3, [r7, #14]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	3302      	adds	r3, #2
 80035dc:	b212      	sxth	r2, r2
 80035de:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80035e0:	7c7a      	ldrb	r2, [r7, #17]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	3304      	adds	r3, #4
 80035e6:	b212      	sxth	r2, r2
 80035e8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	3304      	adds	r3, #4
 80035ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	7c3b      	ldrb	r3, [r7, #16]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	b29a      	uxth	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	3304      	adds	r3, #4
 8003604:	b212      	sxth	r2, r2
 8003606:	801a      	strh	r2, [r3, #0]

  return ret;
 8003608:	697b      	ldr	r3, [r7, #20]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800361c:	2301      	movs	r3, #1
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	214f      	movs	r1, #79	; 0x4f
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fecf 	bl	80033c6 <lis2mdl_read_reg>
 8003628:	60f8      	str	r0, [r7, #12]

  return ret;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003640:	f107 0208 	add.w	r2, r7, #8
 8003644:	2301      	movs	r3, #1
 8003646:	2162      	movs	r1, #98	; 0x62
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff febc 	bl	80033c6 <lis2mdl_read_reg>
 800364e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	7a3b      	ldrb	r3, [r7, #8]
 8003660:	f362 0341 	bfi	r3, r2, #1, #1
 8003664:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003666:	f107 0208 	add.w	r2, r7, #8
 800366a:	2301      	movs	r3, #1
 800366c:	2162      	movs	r1, #98	; 0x62
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fec1 	bl	80033f6 <lis2mdl_write_reg>
 8003674:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800368c:	f107 0208 	add.w	r2, r7, #8
 8003690:	2301      	movs	r3, #1
 8003692:	2162      	movs	r1, #98	; 0x62
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff fe96 	bl	80033c6 <lis2mdl_read_reg>
 800369a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	7a3b      	ldrb	r3, [r7, #8]
 80036ac:	f362 1345 	bfi	r3, r2, #5, #1
 80036b0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80036b2:	f107 0208 	add.w	r2, r7, #8
 80036b6:	2301      	movs	r3, #1
 80036b8:	2162      	movs	r1, #98	; 0x62
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fe9b 	bl	80033f6 <lis2mdl_write_reg>
 80036c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80036e0:	f04f 33ff 	mov.w	r3, #4294967295
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e051      	b.n	800378c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	7b1a      	ldrb	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <LSM6DSO_RegisterBusIO+0xcc>)
 8003724:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <LSM6DSO_RegisterBusIO+0xd0>)
 800372a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e020      	b.n	800378c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4798      	blx	r3
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e016      	b.n	800378c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d112      	bne.n	800378c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003770:	230c      	movs	r3, #12
 8003772:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003774:	7afb      	ldrb	r3, [r7, #11]
 8003776:	461a      	mov	r2, r3
 8003778:	2112      	movs	r1, #18
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 ff5d 	bl	800463a <LSM6DSO_Write_Reg>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800378c:	68fb      	ldr	r3, [r7, #12]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	08004add 	.word	0x08004add
 800379c:	08004b13 	.word	0x08004b13

080037a0 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d00b      	beq.n	80037c8 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fe8a 	bl	80054d0 <lsm6dso_i3c_disable_set>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e060      	b.n	800388a <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3320      	adds	r3, #32
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fe58 	bl	8005484 <lsm6dso_auto_increment_set>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e054      	b.n	800388a <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3320      	adds	r3, #32
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fd62 	bl	80052b0 <lsm6dso_block_data_update_set>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e048      	b.n	800388a <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3320      	adds	r3, #32
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 feae 	bl	8005560 <lsm6dso_fifo_mode_set>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	e03c      	b.n	800388a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2204      	movs	r2, #4
 8003814:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3320      	adds	r3, #32
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fa20 	bl	8004c64 <lsm6dso_xl_data_rate_set>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	e02c      	b.n	800388a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3320      	adds	r3, #32
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f001 f9b6 	bl	8004ba8 <lsm6dso_xl_full_scale_set>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e020      	b.n	800388a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2204      	movs	r2, #4
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3320      	adds	r3, #32
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fbce 	bl	8004ff8 <lsm6dso_gy_data_rate_set>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	e010      	b.n	800388a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3320      	adds	r3, #32
 800386c:	2106      	movs	r1, #6
 800386e:	4618      	mov	r0, r3
 8003870:	f001 fb5a 	bl	8004f28 <lsm6dso_gy_full_scale_set>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	e004      	b.n	800388a <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f888 	bl	80039b0 <LSM6DSO_ACC_Disable>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80038a6:	f04f 33ff 	mov.w	r3, #4294967295
 80038aa:	e015      	b.n	80038d8 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fc2e 	bl	800410e <LSM6DSO_GYRO_Disable>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295
 80038bc:	e00c      	b.n	80038d8 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3320      	adds	r3, #32
 80038ee:	6839      	ldr	r1, [r7, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fdb6 	bl	8005462 <lsm6dso_device_id_get>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	e000      	b.n	8003904 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2201      	movs	r2, #1
 8003920:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003934:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2210      	movs	r2, #16
 800393a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <LSM6DSO_GetCapabilities+0x58>)
 8003946:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4a06      	ldr	r2, [pc, #24]	; (8003964 <LSM6DSO_GetCapabilities+0x58>)
 800394c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	45d02000 	.word	0x45d02000

08003968 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e014      	b.n	80039a8 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f103 0220 	add.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f001 f969 	bl	8004c64 <lsm6dso_xl_data_rate_set>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003998:	f04f 33ff 	mov.w	r3, #4294967295
 800399c:	e004      	b.n	80039a8 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e01f      	b.n	8003a06 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f103 0220 	add.w	r2, r3, #32
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3333      	adds	r3, #51	; 0x33
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f001 fa40 	bl	8004e58 <lsm6dso_xl_data_rate_get>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
 80039e2:	e010      	b.n	8003a06 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3320      	adds	r3, #32
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f93a 	bl	8004c64 <lsm6dso_xl_data_rate_set>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	e004      	b.n	8003a06 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3320      	adds	r3, #32
 8003a22:	f107 020b 	add.w	r2, r7, #11
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 f8e3 	bl	8004bf4 <lsm6dso_xl_full_scale_get>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	e023      	b.n	8003a82 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d81b      	bhi.n	8003a78 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a69 	.word	0x08003a69
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003a5c:	601a      	str	r2, [r3, #0]
      break;
 8003a5e:	e00f      	b.n	8003a80 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003a64:	601a      	str	r2, [r3, #0]
      break;
 8003a66:	e00b      	b.n	8003a80 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003a6c:	601a      	str	r2, [r3, #0]
      break;
 8003a6e:	e007      	b.n	8003a80 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003a74:	601a      	str	r2, [r3, #0]
      break;
 8003a76:	e003      	b.n	8003a80 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7c:	60fb      	str	r3, [r7, #12]
      break;
 8003a7e:	bf00      	nop
  }

  return ret;
 8003a80:	68fb      	ldr	r3, [r7, #12]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	3d79db23 	.word	0x3d79db23
 8003a90:	3df9db23 	.word	0x3df9db23
 8003a94:	3e79db23 	.word	0x3e79db23
 8003a98:	3ef9db23 	.word	0x3ef9db23

08003a9c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3320      	adds	r3, #32
 8003aae:	f107 020b 	add.w	r2, r7, #11
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 f9cf 	bl	8004e58 <lsm6dso_xl_data_rate_get>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	e054      	b.n	8003b70 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	2b0b      	cmp	r3, #11
 8003aca:	d84c      	bhi.n	8003b66 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003b05 	.word	0x08003b05
 8003ad8:	08003b17 	.word	0x08003b17
 8003adc:	08003b1f 	.word	0x08003b1f
 8003ae0:	08003b27 	.word	0x08003b27
 8003ae4:	08003b2f 	.word	0x08003b2f
 8003ae8:	08003b37 	.word	0x08003b37
 8003aec:	08003b3f 	.word	0x08003b3f
 8003af0:	08003b47 	.word	0x08003b47
 8003af4:	08003b4f 	.word	0x08003b4f
 8003af8:	08003b57 	.word	0x08003b57
 8003afc:	08003b5f 	.word	0x08003b5f
 8003b00:	08003b0f 	.word	0x08003b0f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
      break;
 8003b0c:	e02f      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003b12:	601a      	str	r2, [r3, #0]
      break;
 8003b14:	e02b      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003b1a:	601a      	str	r2, [r3, #0]
      break;
 8003b1c:	e027      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003b22:	601a      	str	r2, [r3, #0]
      break;
 8003b24:	e023      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003b2a:	601a      	str	r2, [r3, #0]
      break;
 8003b2c:	e01f      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003b32:	601a      	str	r2, [r3, #0]
      break;
 8003b34:	e01b      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003b3a:	601a      	str	r2, [r3, #0]
      break;
 8003b3c:	e017      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003b42:	601a      	str	r2, [r3, #0]
      break;
 8003b44:	e013      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003b4a:	601a      	str	r2, [r3, #0]
      break;
 8003b4c:	e00f      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003b52:	601a      	str	r2, [r3, #0]
      break;
 8003b54:	e00b      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003b5a:	601a      	str	r2, [r3, #0]
      break;
 8003b5c:	e007      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003b62:	601a      	str	r2, [r3, #0]
      break;
 8003b64:	e003      	b.n	8003b6e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6a:	60fb      	str	r3, [r7, #12]
      break;
 8003b6c:	bf00      	nop
  }

  return ret;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	3fcccccd 	.word	0x3fcccccd
 8003b7c:	41480000 	.word	0x41480000
 8003b80:	41d00000 	.word	0x41d00000
 8003b84:	42500000 	.word	0x42500000
 8003b88:	42d00000 	.word	0x42d00000
 8003b8c:	43500000 	.word	0x43500000
 8003b90:	43d08000 	.word	0x43d08000
 8003b94:	44504000 	.word	0x44504000
 8003b98:	44d06000 	.word	0x44d06000
 8003b9c:	45505000 	.word	0x45505000
 8003ba0:	45d05800 	.word	0x45d05800

08003ba4 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	ed97 0a00 	vldr	s0, [r7]
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f806 	bl	8003bc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003bbc:	4603      	mov	r3, r0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	f000 80ea 	beq.w	8003dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	f300 8163 	bgt.w	8003eb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d074      	beq.n	8003ce0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003bf6:	e15d      	b.n	8003eb4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f103 0020 	add.w	r0, r3, #32
 8003bfe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003c02:	2301      	movs	r3, #1
 8003c04:	2114      	movs	r1, #20
 8003c06:	f000 ff9f 	bl	8004b48 <lsm6dso_read_reg>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e16c      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003c16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d025      	beq.n	8003c70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10b      	bne.n	8003c46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3320      	adds	r3, #32
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 f815 	bl	8004c64 <lsm6dso_xl_data_rate_set>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	e154      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003c46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c4a:	f36f 13c7 	bfc	r3, #7, #1
 8003c4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f103 0020 	add.w	r0, r3, #32
 8003c58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	2114      	movs	r1, #20
 8003c60:	f000 ff8a 	bl	8004b78 <lsm6dso_write_reg>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e13f      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f103 0020 	add.w	r0, r3, #32
 8003c76:	f107 0220 	add.w	r2, r7, #32
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	2115      	movs	r1, #21
 8003c7e:	f000 ff63 	bl	8004b48 <lsm6dso_read_reg>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e130      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d014      	beq.n	8003cc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003c9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ca0:	f36f 1304 	bfc	r3, #4, #1
 8003ca4:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f103 0020 	add.w	r0, r3, #32
 8003cae:	f107 0220 	add.w	r2, r7, #32
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	2115      	movs	r1, #21
 8003cb6:	f000 ff5f 	bl	8004b78 <lsm6dso_write_reg>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	e114      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003cc6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cca:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd6:	d400      	bmi.n	8003cda <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003cd8:	e0f0      	b.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003cda:	4b87      	ldr	r3, [pc, #540]	; (8003ef8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cde:	e0ed      	b.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f103 0020 	add.w	r0, r3, #32
 8003ce6:	f107 021c 	add.w	r2, r7, #28
 8003cea:	2301      	movs	r3, #1
 8003cec:	2114      	movs	r1, #20
 8003cee:	f000 ff2b 	bl	8004b48 <lsm6dso_read_reg>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfc:	e0f8      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003cfe:	7f3b      	ldrb	r3, [r7, #28]
 8003d00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d023      	beq.n	8003d52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10b      	bne.n	8003d2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3320      	adds	r3, #32
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 ffa2 	bl	8004c64 <lsm6dso_xl_data_rate_set>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	e0e1      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003d2c:	7f3b      	ldrb	r3, [r7, #28]
 8003d2e:	f36f 13c7 	bfc	r3, #7, #1
 8003d32:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f103 0020 	add.w	r0, r3, #32
 8003d3a:	f107 021c 	add.w	r2, r7, #28
 8003d3e:	2301      	movs	r3, #1
 8003d40:	2114      	movs	r1, #20
 8003d42:	f000 ff19 	bl	8004b78 <lsm6dso_write_reg>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	e0ce      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f103 0020 	add.w	r0, r3, #32
 8003d58:	f107 0218 	add.w	r2, r7, #24
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	2115      	movs	r1, #21
 8003d60:	f000 fef2 	bl	8004b48 <lsm6dso_read_reg>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e0bf      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003d70:	7e3b      	ldrb	r3, [r7, #24]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d112      	bne.n	8003da2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003d7c:	7e3b      	ldrb	r3, [r7, #24]
 8003d7e:	f043 0310 	orr.w	r3, r3, #16
 8003d82:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f103 0020 	add.w	r0, r3, #32
 8003d8a:	f107 0218 	add.w	r2, r7, #24
 8003d8e:	2301      	movs	r3, #1
 8003d90:	2115      	movs	r1, #21
 8003d92:	f000 fef1 	bl	8004b78 <lsm6dso_write_reg>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003da0:	e0a6      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003da2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003da6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003efc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db2:	dc00      	bgt.n	8003db6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003db4:	e082      	b.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003db6:	4b52      	ldr	r3, [pc, #328]	; (8003f00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dba:	e07f      	b.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f103 0020 	add.w	r0, r3, #32
 8003dc2:	f107 0210 	add.w	r2, r7, #16
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	2115      	movs	r1, #21
 8003dca:	f000 febd 	bl	8004b48 <lsm6dso_read_reg>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	e08a      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003dda:	7c3b      	ldrb	r3, [r7, #16]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003de6:	7c3b      	ldrb	r3, [r7, #16]
 8003de8:	f36f 1304 	bfc	r3, #4, #1
 8003dec:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f103 0020 	add.w	r0, r3, #32
 8003df4:	f107 0210 	add.w	r2, r7, #16
 8003df8:	2301      	movs	r3, #1
 8003dfa:	2115      	movs	r1, #21
 8003dfc:	f000 febc 	bl	8004b78 <lsm6dso_write_reg>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	e071      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d108      	bne.n	8003e28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f979 	bl	800410e <LSM6DSO_GYRO_Disable>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e063      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f103 0020 	add.w	r0, r3, #32
 8003e2e:	f107 0214 	add.w	r2, r7, #20
 8003e32:	2301      	movs	r3, #1
 8003e34:	2114      	movs	r1, #20
 8003e36:	f000 fe87 	bl	8004b48 <lsm6dso_read_reg>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	e054      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003e46:	7d3b      	ldrb	r3, [r7, #20]
 8003e48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d123      	bne.n	8003e9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10b      	bne.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3320      	adds	r3, #32
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fefe 	bl	8004c64 <lsm6dso_xl_data_rate_set>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e03d      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003e74:	7d3b      	ldrb	r3, [r7, #20]
 8003e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f103 0020 	add.w	r0, r3, #32
 8003e82:	f107 0214 	add.w	r2, r7, #20
 8003e86:	2301      	movs	r3, #1
 8003e88:	2114      	movs	r1, #20
 8003e8a:	f000 fe75 	bl	8004b78 <lsm6dso_write_reg>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	e02a      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003e9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e9e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003efc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	dc00      	bgt.n	8003eae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003eac:	e006      	b.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb2:	e003      	b.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003eba:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d102      	bne.n	8003eca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	e012      	b.n	8003ef0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003ed4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fbc9 	bl	8004670 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003ede:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003ee0:	e005      	b.n	8003eee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003ee2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fc5a 	bl	80047a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003eec:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3730      	adds	r7, #48	; 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	41480000 	.word	0x41480000
 8003efc:	43500000 	.word	0x43500000
 8003f00:	43500000 	.word	0x43500000

08003f04 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3320      	adds	r3, #32
 8003f16:	f107 020b 	add.w	r2, r7, #11
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fe69 	bl	8004bf4 <lsm6dso_xl_full_scale_get>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	e023      	b.n	8003f76 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d81b      	bhi.n	8003f6c <LSM6DSO_ACC_GetFullScale+0x68>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <LSM6DSO_ACC_GetFullScale+0x38>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f55 	.word	0x08003f55
 8003f48:	08003f5d 	.word	0x08003f5d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	601a      	str	r2, [r3, #0]
      break;
 8003f52:	e00f      	b.n	8003f74 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2204      	movs	r2, #4
 8003f58:	601a      	str	r2, [r3, #0]
      break;
 8003f5a:	e00b      	b.n	8003f74 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	601a      	str	r2, [r3, #0]
      break;
 8003f62:	e007      	b.n	8003f74 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2210      	movs	r2, #16
 8003f68:	601a      	str	r2, [r3, #0]
      break;
 8003f6a:	e003      	b.n	8003f74 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	60fb      	str	r3, [r7, #12]
      break;
 8003f72:	bf00      	nop
  }

  return ret;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop

08003f80 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	dd0b      	ble.n	8003fa8 <LSM6DSO_ACC_SetFullScale+0x28>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	dd06      	ble.n	8003fa4 <LSM6DSO_ACC_SetFullScale+0x24>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	dc01      	bgt.n	8003fa0 <LSM6DSO_ACC_SetFullScale+0x20>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e004      	b.n	8003faa <LSM6DSO_ACC_SetFullScale+0x2a>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e002      	b.n	8003faa <LSM6DSO_ACC_SetFullScale+0x2a>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e000      	b.n	8003faa <LSM6DSO_ACC_SetFullScale+0x2a>
 8003fa8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003faa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3320      	adds	r3, #32
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fdf7 	bl	8004ba8 <lsm6dso_xl_full_scale_set>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	e000      	b.n	8003fc8 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3320      	adds	r3, #32
 8003fde:	f107 0208 	add.w	r2, r7, #8
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 f9d4 	bl	8005392 <lsm6dso_acceleration_raw_get>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	e00c      	b.n	8004010 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003ff6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003ffe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004006:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3320      	adds	r3, #32
 800402c:	f107 0210 	add.w	r2, r7, #16
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f001 f9ad 	bl	8005392 <lsm6dso_acceleration_raw_get>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	e03c      	b.n	80040be <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fce0 	bl	8003a10 <LSM6DSO_ACC_GetSensitivity>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	e030      	b.n	80040be <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800405c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004068:	edd7 7a03 	vldr	s15, [r7, #12]
 800406c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004074:	ee17 2a90 	vmov	r2, s15
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800407c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004080:	ee07 3a90 	vmov	s15, r3
 8004084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004088:	edd7 7a03 	vldr	s15, [r7, #12]
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004094:	ee17 2a90 	vmov	r2, s15
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800409c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b4:	ee17 2a90 	vmov	r2, s15
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e014      	b.n	8004106 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f103 0220 	add.w	r2, r3, #32
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 ff84 	bl	8004ff8 <lsm6dso_gy_data_rate_set>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	e004      	b.n	8004106 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e01f      	b.n	8004164 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f103 0220 	add.w	r2, r3, #32
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3334      	adds	r3, #52	; 0x34
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f001 f85b 	bl	80051ec <lsm6dso_gy_data_rate_get>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	e010      	b.n	8004164 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3320      	adds	r3, #32
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f000 ff55 	bl	8004ff8 <lsm6dso_gy_data_rate_set>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	e004      	b.n	8004164 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3320      	adds	r3, #32
 800417e:	f107 020b 	add.w	r2, r7, #11
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fef5 	bl	8004f74 <lsm6dso_gy_full_scale_get>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
 8004194:	e02d      	b.n	80041f2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	2b06      	cmp	r3, #6
 800419a:	d825      	bhi.n	80041e8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041c1 	.word	0x080041c1
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041e9 	.word	0x080041e9
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041e9 	.word	0x080041e9
 80041bc:	080041e1 	.word	0x080041e1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80041c4:	601a      	str	r2, [r3, #0]
      break;
 80041c6:	e013      	b.n	80041f0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80041cc:	601a      	str	r2, [r3, #0]
      break;
 80041ce:	e00f      	b.n	80041f0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80041d4:	601a      	str	r2, [r3, #0]
      break;
 80041d6:	e00b      	b.n	80041f0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80041dc:	601a      	str	r2, [r3, #0]
      break;
 80041de:	e007      	b.n	80041f0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80041e4:	601a      	str	r2, [r3, #0]
      break;
 80041e6:	e003      	b.n	80041f0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	60fb      	str	r3, [r7, #12]
      break;
 80041ee:	bf00      	nop
  }

  return ret;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	408c0000 	.word	0x408c0000
 8004200:	410c0000 	.word	0x410c0000
 8004204:	418c0000 	.word	0x418c0000
 8004208:	420c0000 	.word	0x420c0000
 800420c:	428c0000 	.word	0x428c0000

08004210 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3320      	adds	r3, #32
 8004222:	f107 020b 	add.w	r2, r7, #11
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f000 ffdf 	bl	80051ec <lsm6dso_gy_data_rate_get>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	e04e      	b.n	80042d8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800423a:	7afb      	ldrb	r3, [r7, #11]
 800423c:	2b0a      	cmp	r3, #10
 800423e:	d846      	bhi.n	80042ce <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004275 	.word	0x08004275
 800424c:	0800427f 	.word	0x0800427f
 8004250:	08004287 	.word	0x08004287
 8004254:	0800428f 	.word	0x0800428f
 8004258:	08004297 	.word	0x08004297
 800425c:	0800429f 	.word	0x0800429f
 8004260:	080042a7 	.word	0x080042a7
 8004264:	080042af 	.word	0x080042af
 8004268:	080042b7 	.word	0x080042b7
 800426c:	080042bf 	.word	0x080042bf
 8004270:	080042c7 	.word	0x080042c7
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
      break;
 800427c:	e02b      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004282:	601a      	str	r2, [r3, #0]
      break;
 8004284:	e027      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800428a:	601a      	str	r2, [r3, #0]
      break;
 800428c:	e023      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004292:	601a      	str	r2, [r3, #0]
      break;
 8004294:	e01f      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800429a:	601a      	str	r2, [r3, #0]
      break;
 800429c:	e01b      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 80042a2:	601a      	str	r2, [r3, #0]
      break;
 80042a4:	e017      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 80042aa:	601a      	str	r2, [r3, #0]
      break;
 80042ac:	e013      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	4a11      	ldr	r2, [pc, #68]	; (80042f8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 80042b2:	601a      	str	r2, [r3, #0]
      break;
 80042b4:	e00f      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4a10      	ldr	r2, [pc, #64]	; (80042fc <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 80042ba:	601a      	str	r2, [r3, #0]
      break;
 80042bc:	e00b      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80042c2:	601a      	str	r2, [r3, #0]
      break;
 80042c4:	e007      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80042ca:	601a      	str	r2, [r3, #0]
      break;
 80042cc:	e003      	b.n	80042d6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	60fb      	str	r3, [r7, #12]
      break;
 80042d4:	bf00      	nop
  }

  return ret;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	41480000 	.word	0x41480000
 80042e4:	41d00000 	.word	0x41d00000
 80042e8:	42500000 	.word	0x42500000
 80042ec:	42d00000 	.word	0x42d00000
 80042f0:	43500000 	.word	0x43500000
 80042f4:	43d08000 	.word	0x43d08000
 80042f8:	44504000 	.word	0x44504000
 80042fc:	44d06000 	.word	0x44d06000
 8004300:	45505000 	.word	0x45505000
 8004304:	45d05800 	.word	0x45d05800

08004308 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004314:	2100      	movs	r1, #0
 8004316:	ed97 0a00 	vldr	s0, [r7]
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f806 	bl	800432c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004320:	4603      	mov	r3, r0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	ed87 0a02 	vstr	s0, [r7, #8]
 8004338:	460b      	mov	r3, r1
 800433a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800434a:	2b01      	cmp	r3, #1
 800434c:	d028      	beq.n	80043a0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800434e:	e05c      	b.n	800440a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f103 0020 	add.w	r0, r3, #32
 8004356:	f107 0214 	add.w	r2, r7, #20
 800435a:	2301      	movs	r3, #1
 800435c:	2116      	movs	r1, #22
 800435e:	f000 fbf3 	bl	8004b48 <lsm6dso_read_reg>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	e06c      	b.n	8004448 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800436e:	7d3b      	ldrb	r3, [r7, #20]
 8004370:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04b      	beq.n	8004412 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800437a:	7d3b      	ldrb	r3, [r7, #20]
 800437c:	f36f 13c7 	bfc	r3, #7, #1
 8004380:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f103 0020 	add.w	r0, r3, #32
 8004388:	f107 0214 	add.w	r2, r7, #20
 800438c:	2301      	movs	r3, #1
 800438e:	2116      	movs	r1, #22
 8004390:	f000 fbf2 	bl	8004b78 <lsm6dso_write_reg>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d03b      	beq.n	8004412 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800439a:	f04f 33ff 	mov.w	r3, #4294967295
 800439e:	e053      	b.n	8004448 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f103 0020 	add.w	r0, r3, #32
 80043a6:	f107 0210 	add.w	r2, r7, #16
 80043aa:	2301      	movs	r3, #1
 80043ac:	2116      	movs	r1, #22
 80043ae:	f000 fbcb 	bl	8004b48 <lsm6dso_read_reg>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	e044      	b.n	8004448 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80043be:	7c3b      	ldrb	r3, [r7, #16]
 80043c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d112      	bne.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80043ca:	7c3b      	ldrb	r3, [r7, #16]
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 0020 	add.w	r0, r3, #32
 80043d8:	f107 0210 	add.w	r2, r7, #16
 80043dc:	2301      	movs	r3, #1
 80043de:	2116      	movs	r1, #22
 80043e0:	f000 fbca 	bl	8004b78 <lsm6dso_write_reg>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	e02b      	b.n	8004448 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80043f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80043f4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004450 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80043f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004400:	dc00      	bgt.n	8004404 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004402:	e007      	b.n	8004414 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e004      	b.n	8004414 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	61fb      	str	r3, [r7, #28]
      break;
 8004410:	e000      	b.n	8004414 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004412:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d102      	bne.n	8004422 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	e012      	b.n	8004448 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004428:	2b01      	cmp	r3, #1
 800442a:	d106      	bne.n	800443a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800442c:	ed97 0a06 	vldr	s0, [r7, #24]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa45 	bl	80048c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004436:	61f8      	str	r0, [r7, #28]
 8004438:	e005      	b.n	8004446 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800443a:	ed97 0a06 	vldr	s0, [r7, #24]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 faca 	bl	80049d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004444:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004446:	69fb      	ldr	r3, [r7, #28]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	43500000 	.word	0x43500000
 8004454:	43500000 	.word	0x43500000

08004458 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3320      	adds	r3, #32
 800446a:	f107 020b 	add.w	r2, r7, #11
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd7f 	bl	8004f74 <lsm6dso_gy_full_scale_get>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800447c:	f04f 33ff 	mov.w	r3, #4294967295
 8004480:	e030      	b.n	80044e4 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004482:	7afb      	ldrb	r3, [r7, #11]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d828      	bhi.n	80044da <LSM6DSO_GYRO_GetFullScale+0x82>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044db 	.word	0x080044db
 80044a0:	080044c7 	.word	0x080044c7
 80044a4:	080044db 	.word	0x080044db
 80044a8:	080044d1 	.word	0x080044d1
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	227d      	movs	r2, #125	; 0x7d
 80044b0:	601a      	str	r2, [r3, #0]
      break;
 80044b2:	e016      	b.n	80044e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	22fa      	movs	r2, #250	; 0xfa
 80044b8:	601a      	str	r2, [r3, #0]
      break;
 80044ba:	e012      	b.n	80044e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044c2:	601a      	str	r2, [r3, #0]
      break;
 80044c4:	e00d      	b.n	80044e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044cc:	601a      	str	r2, [r3, #0]
      break;
 80044ce:	e008      	b.n	80044e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044d6:	601a      	str	r2, [r3, #0]
      break;
 80044d8:	e003      	b.n	80044e2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	60fb      	str	r3, [r7, #12]
      break;
 80044e0:	bf00      	nop
  }

  return ret;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b7d      	cmp	r3, #125	; 0x7d
 80044fa:	dd12      	ble.n	8004522 <LSM6DSO_GYRO_SetFullScale+0x36>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2bfa      	cmp	r3, #250	; 0xfa
 8004500:	dd0d      	ble.n	800451e <LSM6DSO_GYRO_SetFullScale+0x32>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004508:	dd07      	ble.n	800451a <LSM6DSO_GYRO_SetFullScale+0x2e>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004510:	dc01      	bgt.n	8004516 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8004512:	2304      	movs	r3, #4
 8004514:	e006      	b.n	8004524 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004516:	2306      	movs	r3, #6
 8004518:	e004      	b.n	8004524 <LSM6DSO_GYRO_SetFullScale+0x38>
 800451a:	2302      	movs	r3, #2
 800451c:	e002      	b.n	8004524 <LSM6DSO_GYRO_SetFullScale+0x38>
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <LSM6DSO_GYRO_SetFullScale+0x38>
 8004522:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8004524:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3320      	adds	r3, #32
 800452a:	7bfa      	ldrb	r2, [r7, #15]
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fcfa 	bl	8004f28 <lsm6dso_gy_full_scale_set>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	e000      	b.n	8004542 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3320      	adds	r3, #32
 8004558:	f107 0208 	add.w	r2, r7, #8
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fecc 	bl	80052fc <lsm6dso_angular_rate_raw_get>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	e00c      	b.n	800458a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004570:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004578:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004580:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3320      	adds	r3, #32
 80045a0:	f107 0210 	add.w	r2, r7, #16
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fea8 	bl	80052fc <lsm6dso_angular_rate_raw_get>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	e03c      	b.n	8004632 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fdd4 	bl	800416c <LSM6DSO_GYRO_GetSensitivity>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	e030      	b.n	8004632 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80045d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80045e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e8:	ee17 2a90 	vmov	r2, s15
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80045f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004608:	ee17 2a90 	vmov	r2, s15
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004610:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004628:	ee17 2a90 	vmov	r2, s15
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
 8004646:	4613      	mov	r3, r2
 8004648:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f103 0020 	add.w	r0, r3, #32
 8004650:	1cba      	adds	r2, r7, #2
 8004652:	78f9      	ldrb	r1, [r7, #3]
 8004654:	2301      	movs	r3, #1
 8004656:	f000 fa8f 	bl	8004b78 <lsm6dso_write_reg>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	e000      	b.n	8004668 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800467c:	edd7 7a00 	vldr	s15, [r7]
 8004680:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004780 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468c:	d801      	bhi.n	8004692 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800468e:	230b      	movs	r3, #11
 8004690:	e063      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004692:	edd7 7a00 	vldr	s15, [r7]
 8004696:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800469a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a2:	d801      	bhi.n	80046a8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e058      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046a8:	edd7 7a00 	vldr	s15, [r7]
 80046ac:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80046b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b8:	d801      	bhi.n	80046be <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e04d      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046be:	edd7 7a00 	vldr	s15, [r7]
 80046c2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004784 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80046c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ce:	d801      	bhi.n	80046d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80046d0:	2303      	movs	r3, #3
 80046d2:	e042      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046d4:	edd7 7a00 	vldr	s15, [r7]
 80046d8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004788 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80046dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d801      	bhi.n	80046ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e037      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80046ea:	edd7 7a00 	vldr	s15, [r7]
 80046ee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800478c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80046f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fa:	d801      	bhi.n	8004700 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80046fc:	2305      	movs	r3, #5
 80046fe:	e02c      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004700:	edd7 7a00 	vldr	s15, [r7]
 8004704:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004790 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004710:	d801      	bhi.n	8004716 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004712:	2306      	movs	r3, #6
 8004714:	e021      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004716:	edd7 7a00 	vldr	s15, [r7]
 800471a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004794 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800471e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004726:	d801      	bhi.n	800472c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004728:	2307      	movs	r3, #7
 800472a:	e016      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800472c:	edd7 7a00 	vldr	s15, [r7]
 8004730:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004798 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	d801      	bhi.n	8004742 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800473e:	2308      	movs	r3, #8
 8004740:	e00b      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004742:	edd7 7a00 	vldr	s15, [r7]
 8004746:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800479c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800474a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	d801      	bhi.n	8004758 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004754:	2309      	movs	r3, #9
 8004756:	e000      	b.n	800475a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004758:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800475a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3320      	adds	r3, #32
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	4611      	mov	r1, r2
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fa7d 	bl	8004c64 <lsm6dso_xl_data_rate_set>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	e000      	b.n	8004778 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	3fcccccd 	.word	0x3fcccccd
 8004784:	42500000 	.word	0x42500000
 8004788:	42d00000 	.word	0x42d00000
 800478c:	43500000 	.word	0x43500000
 8004790:	43d08000 	.word	0x43d08000
 8004794:	44504000 	.word	0x44504000
 8004798:	44d06000 	.word	0x44d06000
 800479c:	45505000 	.word	0x45505000

080047a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80047ac:	edd7 7a00 	vldr	s15, [r7]
 80047b0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80048a0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80047b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047bc:	d801      	bhi.n	80047c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80047be:	230b      	movs	r3, #11
 80047c0:	e063      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047c2:	edd7 7a00 	vldr	s15, [r7]
 80047c6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80047ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d801      	bhi.n	80047d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e058      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047d8:	edd7 7a00 	vldr	s15, [r7]
 80047dc:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80047e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e8:	d801      	bhi.n	80047ee <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e04d      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80047ee:	edd7 7a00 	vldr	s15, [r7]
 80047f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80048a4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80047f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fe:	d801      	bhi.n	8004804 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004800:	2303      	movs	r3, #3
 8004802:	e042      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004804:	edd7 7a00 	vldr	s15, [r7]
 8004808:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80048a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 800480c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004814:	d801      	bhi.n	800481a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004816:	2304      	movs	r3, #4
 8004818:	e037      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800481a:	edd7 7a00 	vldr	s15, [r7]
 800481e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80048ac <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	d801      	bhi.n	8004830 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 800482c:	2305      	movs	r3, #5
 800482e:	e02c      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004830:	edd7 7a00 	vldr	s15, [r7]
 8004834:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80048b0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	d801      	bhi.n	8004846 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004842:	2306      	movs	r3, #6
 8004844:	e021      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004846:	edd7 7a00 	vldr	s15, [r7]
 800484a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80048b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800484e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004856:	d801      	bhi.n	800485c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004858:	2307      	movs	r3, #7
 800485a:	e016      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800485c:	edd7 7a00 	vldr	s15, [r7]
 8004860:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80048b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486c:	d801      	bhi.n	8004872 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800486e:	2308      	movs	r3, #8
 8004870:	e00b      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004872:	edd7 7a00 	vldr	s15, [r7]
 8004876:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80048bc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800487a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004882:	d801      	bhi.n	8004888 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004884:	2309      	movs	r3, #9
 8004886:	e000      	b.n	800488a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004888:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	3fcccccd 	.word	0x3fcccccd
 80048a4:	42500000 	.word	0x42500000
 80048a8:	42d00000 	.word	0x42d00000
 80048ac:	43500000 	.word	0x43500000
 80048b0:	43d08000 	.word	0x43d08000
 80048b4:	44504000 	.word	0x44504000
 80048b8:	44d06000 	.word	0x44d06000
 80048bc:	45505000 	.word	0x45505000

080048c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80048cc:	edd7 7a00 	vldr	s15, [r7]
 80048d0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80048d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	d801      	bhi.n	80048e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80048de:	2301      	movs	r3, #1
 80048e0:	e058      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048e2:	edd7 7a00 	vldr	s15, [r7]
 80048e6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f2:	d801      	bhi.n	80048f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e04d      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048f8:	edd7 7a00 	vldr	s15, [r7]
 80048fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80049bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	d801      	bhi.n	800490e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800490a:	2303      	movs	r3, #3
 800490c:	e042      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800490e:	edd7 7a00 	vldr	s15, [r7]
 8004912:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80049c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d801      	bhi.n	8004924 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004920:	2304      	movs	r3, #4
 8004922:	e037      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004924:	edd7 7a00 	vldr	s15, [r7]
 8004928:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80049c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800492c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	d801      	bhi.n	800493a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004936:	2305      	movs	r3, #5
 8004938:	e02c      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800493a:	edd7 7a00 	vldr	s15, [r7]
 800493e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80049c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d801      	bhi.n	8004950 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800494c:	2306      	movs	r3, #6
 800494e:	e021      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004950:	edd7 7a00 	vldr	s15, [r7]
 8004954:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80049cc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004960:	d801      	bhi.n	8004966 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004962:	2307      	movs	r3, #7
 8004964:	e016      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004966:	edd7 7a00 	vldr	s15, [r7]
 800496a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80049d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800496e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004976:	d801      	bhi.n	800497c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004978:	2308      	movs	r3, #8
 800497a:	e00b      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800497c:	edd7 7a00 	vldr	s15, [r7]
 8004980:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80049d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498c:	d801      	bhi.n	8004992 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800498e:	2309      	movs	r3, #9
 8004990:	e000      	b.n	8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004992:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004994:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3320      	adds	r3, #32
 800499a:	7bfa      	ldrb	r2, [r7, #15]
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fb2a 	bl	8004ff8 <lsm6dso_gy_data_rate_set>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295
 80049ae:	e000      	b.n	80049b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	42500000 	.word	0x42500000
 80049c0:	42d00000 	.word	0x42d00000
 80049c4:	43500000 	.word	0x43500000
 80049c8:	43d08000 	.word	0x43d08000
 80049cc:	44504000 	.word	0x44504000
 80049d0:	44d06000 	.word	0x44d06000
 80049d4:	45505000 	.word	0x45505000

080049d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80049e4:	edd7 7a00 	vldr	s15, [r7]
 80049e8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f4:	d801      	bhi.n	80049fa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e058      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049fa:	edd7 7a00 	vldr	s15, [r7]
 80049fe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d801      	bhi.n	8004a10 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e04d      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a10:	edd7 7a00 	vldr	s15, [r7]
 8004a14:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004ac0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	d801      	bhi.n	8004a26 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e042      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a26:	edd7 7a00 	vldr	s15, [r7]
 8004a2a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ac4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	d801      	bhi.n	8004a3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	e037      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a3c:	edd7 7a00 	vldr	s15, [r7]
 8004a40:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004ac8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4c:	d801      	bhi.n	8004a52 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004a4e:	2305      	movs	r3, #5
 8004a50:	e02c      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a52:	edd7 7a00 	vldr	s15, [r7]
 8004a56:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004acc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	d801      	bhi.n	8004a68 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004a64:	2306      	movs	r3, #6
 8004a66:	e021      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a68:	edd7 7a00 	vldr	s15, [r7]
 8004a6c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004ad0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d801      	bhi.n	8004a7e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	e016      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a7e:	edd7 7a00 	vldr	s15, [r7]
 8004a82:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ad4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	d801      	bhi.n	8004a94 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004a90:	2308      	movs	r3, #8
 8004a92:	e00b      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a94:	edd7 7a00 	vldr	s15, [r7]
 8004a98:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004ad8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	d801      	bhi.n	8004aaa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004aa6:	2309      	movs	r3, #9
 8004aa8:	e000      	b.n	8004aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004aaa:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	42500000 	.word	0x42500000
 8004ac4:	42d00000 	.word	0x42d00000
 8004ac8:	43500000 	.word	0x43500000
 8004acc:	43d08000 	.word	0x43d08000
 8004ad0:	44504000 	.word	0x44504000
 8004ad4:	44d06000 	.word	0x44d06000
 8004ad8:	45505000 	.word	0x45505000

08004adc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	460b      	mov	r3, r1
 8004aea:	72fb      	strb	r3, [r7, #11]
 8004aec:	4613      	mov	r3, r2
 8004aee:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	695c      	ldr	r4, [r3, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	7b1b      	ldrb	r3, [r3, #12]
 8004afc:	b298      	uxth	r0, r3
 8004afe:	7afb      	ldrb	r3, [r7, #11]
 8004b00:	b299      	uxth	r1, r3
 8004b02:	893b      	ldrh	r3, [r7, #8]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	47a0      	blx	r4
 8004b08:	4603      	mov	r3, r0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}

08004b12 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b12:	b590      	push	{r4, r7, lr}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	460b      	mov	r3, r1
 8004b20:	72fb      	strb	r3, [r7, #11]
 8004b22:	4613      	mov	r3, r2
 8004b24:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	691c      	ldr	r4, [r3, #16]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	7b1b      	ldrb	r3, [r3, #12]
 8004b32:	b298      	uxth	r0, r3
 8004b34:	7afb      	ldrb	r3, [r7, #11]
 8004b36:	b299      	uxth	r1, r3
 8004b38:	893b      	ldrh	r3, [r7, #8]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	47a0      	blx	r4
 8004b3e:	4603      	mov	r3, r0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}

08004b48 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	461a      	mov	r2, r3
 8004b54:	460b      	mov	r3, r1
 8004b56:	72fb      	strb	r3, [r7, #11]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685c      	ldr	r4, [r3, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68d8      	ldr	r0, [r3, #12]
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	7af9      	ldrb	r1, [r7, #11]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	47a0      	blx	r4
 8004b6c:	6178      	str	r0, [r7, #20]

  return ret;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd90      	pop	{r4, r7, pc}

08004b78 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	461a      	mov	r2, r3
 8004b84:	460b      	mov	r3, r1
 8004b86:	72fb      	strb	r3, [r7, #11]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681c      	ldr	r4, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68d8      	ldr	r0, [r3, #12]
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	7af9      	ldrb	r1, [r7, #11]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	47a0      	blx	r4
 8004b9c:	6178      	str	r0, [r7, #20]

  return ret;
 8004b9e:	697b      	ldr	r3, [r7, #20]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd90      	pop	{r4, r7, pc}

08004ba8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004bb4:	f107 0208 	add.w	r2, r7, #8
 8004bb8:	2301      	movs	r3, #1
 8004bba:	2110      	movs	r1, #16
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ffc3 	bl	8004b48 <lsm6dso_read_reg>
 8004bc2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10f      	bne.n	8004bea <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	7a3b      	ldrb	r3, [r7, #8]
 8004bd4:	f362 0383 	bfi	r3, r2, #2, #2
 8004bd8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004bda:	f107 0208 	add.w	r2, r7, #8
 8004bde:	2301      	movs	r3, #1
 8004be0:	2110      	movs	r1, #16
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ffc8 	bl	8004b78 <lsm6dso_write_reg>
 8004be8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004bfe:	f107 0208 	add.w	r2, r7, #8
 8004c02:	2301      	movs	r3, #1
 8004c04:	2110      	movs	r1, #16
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ff9e 	bl	8004b48 <lsm6dso_read_reg>
 8004c0c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004c0e:	7a3b      	ldrb	r3, [r7, #8]
 8004c10:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d81a      	bhi.n	8004c50 <lsm6dso_xl_full_scale_get+0x5c>
 8004c1a:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <lsm6dso_xl_full_scale_get+0x2c>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c39 	.word	0x08004c39
 8004c28:	08004c41 	.word	0x08004c41
 8004c2c:	08004c49 	.word	0x08004c49
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
      break;
 8004c36:	e00f      	b.n	8004c58 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	e00b      	b.n	8004c58 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2202      	movs	r2, #2
 8004c44:	701a      	strb	r2, [r3, #0]
      break;
 8004c46:	e007      	b.n	8004c58 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	701a      	strb	r2, [r3, #0]
      break;
 8004c4e:	e003      	b.n	8004c58 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
      break;
 8004c56:	bf00      	nop
  }

  return ret;
 8004c58:	68fb      	ldr	r3, [r7, #12]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop

08004c64 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004c74:	f107 030c 	add.w	r3, r7, #12
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fc96 	bl	80055ac <lsm6dso_fsm_enable_get>
 8004c80:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <lsm6dso_xl_data_rate_set+0x28>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	e0e1      	b.n	8004e50 <lsm6dso_xl_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c8c:	7b3b      	ldrb	r3, [r7, #12]
 8004c8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c92:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004c94:	7b3b      	ldrb	r3, [r7, #12]
 8004c96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c9a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004ca0:	7b3b      	ldrb	r3, [r7, #12]
 8004ca2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ca6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004cac:	7b3b      	ldrb	r3, [r7, #12]
 8004cae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004cb2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004cb8:	7b3b      	ldrb	r3, [r7, #12]
 8004cba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004cbe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004cc4:	7b3b      	ldrb	r3, [r7, #12]
 8004cc6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004cca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004cd0:	7b3b      	ldrb	r3, [r7, #12]
 8004cd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004cd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004cdc:	7b3b      	ldrb	r3, [r7, #12]
 8004cde:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ce2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004ce8:	7b7b      	ldrb	r3, [r7, #13]
 8004cea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004cee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004cf4:	7b7b      	ldrb	r3, [r7, #13]
 8004cf6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cfa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004d00:	7b7b      	ldrb	r3, [r7, #13]
 8004d02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004d0c:	7b7b      	ldrb	r3, [r7, #13]
 8004d0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004d18:	7b7b      	ldrb	r3, [r7, #13]
 8004d1a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d1e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004d20:	4313      	orrs	r3, r2
 8004d22:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004d24:	7b7b      	ldrb	r3, [r7, #13]
 8004d26:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d2a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004d30:	7b7b      	ldrb	r3, [r7, #13]
 8004d32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d36:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004d3c:	7b7b      	ldrb	r3, [r7, #13]
 8004d3e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d42:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004d44:	4313      	orrs	r3, r2
 8004d46:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d164      	bne.n	8004e16 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004d4c:	f107 030b 	add.w	r3, r7, #11
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fc4c 	bl	80055f0 <lsm6dso_fsm_data_rate_get>
 8004d58:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <lsm6dso_xl_data_rate_set+0x100>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	e075      	b.n	8004e50 <lsm6dso_xl_data_rate_set+0x1ec>

    switch (fsm_odr)
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d852      	bhi.n	8004e10 <lsm6dso_xl_data_rate_set+0x1ac>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <lsm6dso_xl_data_rate_set+0x10c>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004d81 	.word	0x08004d81
 8004d74:	08004d93 	.word	0x08004d93
 8004d78:	08004db1 	.word	0x08004db1
 8004d7c:	08004ddb 	.word	0x08004ddb
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d8a:	e045      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	75fb      	strb	r3, [r7, #23]
        break;
 8004d90:	e042      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004d9c:	e03c      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d102      	bne.n	8004daa <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004da4:	2302      	movs	r3, #2
 8004da6:	75fb      	strb	r3, [r7, #23]
        break;
 8004da8:	e036      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	75fb      	strb	r3, [r7, #23]
        break;
 8004dae:	e033      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004db6:	2303      	movs	r3, #3
 8004db8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004dba:	e02d      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d102      	bne.n	8004dc8 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	75fb      	strb	r3, [r7, #23]
        break;
 8004dc6:	e027      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d102      	bne.n	8004dd4 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	75fb      	strb	r3, [r7, #23]
        break;
 8004dd2:	e021      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	75fb      	strb	r3, [r7, #23]
        break;
 8004dd8:	e01e      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004de0:	2304      	movs	r3, #4
 8004de2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004de4:	e018      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d102      	bne.n	8004df2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004dec:	2304      	movs	r3, #4
 8004dee:	75fb      	strb	r3, [r7, #23]
        break;
 8004df0:	e012      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d102      	bne.n	8004dfe <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	75fb      	strb	r3, [r7, #23]
        break;
 8004dfc:	e00c      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d102      	bne.n	8004e0a <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004e04:	2304      	movs	r3, #4
 8004e06:	75fb      	strb	r3, [r7, #23]
        break;
 8004e08:	e006      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e0e:	e003      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>

      default:
        odr_xl = val;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	75fb      	strb	r3, [r7, #23]
        break;
 8004e14:	e000      	b.n	8004e18 <lsm6dso_xl_data_rate_set+0x1b4>
    }
  }
 8004e16:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004e18:	f107 0208 	add.w	r2, r7, #8
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	2110      	movs	r1, #16
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff fe91 	bl	8004b48 <lsm6dso_read_reg>
 8004e26:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	7a3b      	ldrb	r3, [r7, #8]
 8004e32:	f362 1307 	bfi	r3, r2, #4, #4
 8004e36:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004e38:	f107 0208 	add.w	r2, r7, #8
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	2110      	movs	r1, #16
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff fe99 	bl	8004b78 <lsm6dso_write_reg>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  return ret;
 8004e4e:	693b      	ldr	r3, [r7, #16]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004e62:	f107 0208 	add.w	r2, r7, #8
 8004e66:	2301      	movs	r3, #1
 8004e68:	2110      	movs	r1, #16
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe6c 	bl	8004b48 <lsm6dso_read_reg>
 8004e70:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004e72:	7a3b      	ldrb	r3, [r7, #8]
 8004e74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b0b      	cmp	r3, #11
 8004e7c:	d84a      	bhi.n	8004f14 <lsm6dso_xl_data_rate_get+0xbc>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <lsm6dso_xl_data_rate_get+0x2c>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004eb5 	.word	0x08004eb5
 8004e88:	08004ebd 	.word	0x08004ebd
 8004e8c:	08004ec5 	.word	0x08004ec5
 8004e90:	08004ecd 	.word	0x08004ecd
 8004e94:	08004ed5 	.word	0x08004ed5
 8004e98:	08004edd 	.word	0x08004edd
 8004e9c:	08004ee5 	.word	0x08004ee5
 8004ea0:	08004eed 	.word	0x08004eed
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08004f05 	.word	0x08004f05
 8004eb0:	08004f0d 	.word	0x08004f0d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e02f      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
      break;
 8004ec2:	e02b      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e027      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	701a      	strb	r2, [r3, #0]
      break;
 8004ed2:	e023      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	701a      	strb	r2, [r3, #0]
      break;
 8004eda:	e01f      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2205      	movs	r2, #5
 8004ee0:	701a      	strb	r2, [r3, #0]
      break;
 8004ee2:	e01b      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2206      	movs	r2, #6
 8004ee8:	701a      	strb	r2, [r3, #0]
      break;
 8004eea:	e017      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2207      	movs	r2, #7
 8004ef0:	701a      	strb	r2, [r3, #0]
      break;
 8004ef2:	e013      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	701a      	strb	r2, [r3, #0]
      break;
 8004efa:	e00f      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2209      	movs	r2, #9
 8004f00:	701a      	strb	r2, [r3, #0]
      break;
 8004f02:	e00b      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	220a      	movs	r2, #10
 8004f08:	701a      	strb	r2, [r3, #0]
      break;
 8004f0a:	e007      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	220b      	movs	r2, #11
 8004f10:	701a      	strb	r2, [r3, #0]
      break;
 8004f12:	e003      	b.n	8004f1c <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
      break;
 8004f1a:	bf00      	nop
  }

  return ret;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop

08004f28 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f34:	f107 0208 	add.w	r2, r7, #8
 8004f38:	2301      	movs	r3, #1
 8004f3a:	2111      	movs	r1, #17
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fe03 	bl	8004b48 <lsm6dso_read_reg>
 8004f42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	7a3b      	ldrb	r3, [r7, #8]
 8004f54:	f362 0343 	bfi	r3, r2, #1, #3
 8004f58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f5a:	f107 0208 	add.w	r2, r7, #8
 8004f5e:	2301      	movs	r3, #1
 8004f60:	2111      	movs	r1, #17
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fe08 	bl	8004b78 <lsm6dso_write_reg>
 8004f68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f7e:	f107 0208 	add.w	r2, r7, #8
 8004f82:	2301      	movs	r3, #1
 8004f84:	2111      	movs	r1, #17
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff fdde 	bl	8004b48 <lsm6dso_read_reg>
 8004f8c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004f8e:	7a3b      	ldrb	r3, [r7, #8]
 8004f90:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d824      	bhi.n	8004fe4 <lsm6dso_gy_full_scale_get+0x70>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <lsm6dso_gy_full_scale_get+0x2c>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	08004fc5 	.word	0x08004fc5
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fe5 	.word	0x08004fe5
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fe5 	.word	0x08004fe5
 8004fb8:	08004fdd 	.word	0x08004fdd
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
      break;
 8004fc2:	e013      	b.n	8004fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
      break;
 8004fca:	e00f      	b.n	8004fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	701a      	strb	r2, [r3, #0]
      break;
 8004fd2:	e00b      	b.n	8004fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	701a      	strb	r2, [r3, #0]
      break;
 8004fda:	e007      	b.n	8004fec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2206      	movs	r2, #6
 8004fe0:	701a      	strb	r2, [r3, #0]
      break;
 8004fe2:	e003      	b.n	8004fec <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
      break;
 8004fea:	bf00      	nop
  }

  return ret;
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop

08004ff8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005008:	f107 030c 	add.w	r3, r7, #12
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 facc 	bl	80055ac <lsm6dso_fsm_enable_get>
 8005014:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <lsm6dso_gy_data_rate_set+0x28>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	e0e1      	b.n	80051e4 <lsm6dso_gy_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005020:	7b3b      	ldrb	r3, [r7, #12]
 8005022:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005026:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8005028:	7b3b      	ldrb	r3, [r7, #12]
 800502a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800502e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005030:	4313      	orrs	r3, r2
 8005032:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005034:	7b3b      	ldrb	r3, [r7, #12]
 8005036:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800503a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800503c:	4313      	orrs	r3, r2
 800503e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005040:	7b3b      	ldrb	r3, [r7, #12]
 8005042:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005046:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8005048:	4313      	orrs	r3, r2
 800504a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800504c:	7b3b      	ldrb	r3, [r7, #12]
 800504e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005052:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8005054:	4313      	orrs	r3, r2
 8005056:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8005058:	7b3b      	ldrb	r3, [r7, #12]
 800505a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800505e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8005060:	4313      	orrs	r3, r2
 8005062:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005064:	7b3b      	ldrb	r3, [r7, #12]
 8005066:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800506a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800506c:	4313      	orrs	r3, r2
 800506e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005070:	7b3b      	ldrb	r3, [r7, #12]
 8005072:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005076:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8005078:	4313      	orrs	r3, r2
 800507a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800507c:	7b7b      	ldrb	r3, [r7, #13]
 800507e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005082:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8005084:	4313      	orrs	r3, r2
 8005086:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8005088:	7b7b      	ldrb	r3, [r7, #13]
 800508a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800508e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8005090:	4313      	orrs	r3, r2
 8005092:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8005094:	7b7b      	ldrb	r3, [r7, #13]
 8005096:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800509a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800509c:	4313      	orrs	r3, r2
 800509e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80050a0:	7b7b      	ldrb	r3, [r7, #13]
 80050a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80050a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80050ac:	7b7b      	ldrb	r3, [r7, #13]
 80050ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80050b4:	4313      	orrs	r3, r2
 80050b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80050b8:	7b7b      	ldrb	r3, [r7, #13]
 80050ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80050c0:	4313      	orrs	r3, r2
 80050c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80050c4:	7b7b      	ldrb	r3, [r7, #13]
 80050c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80050cc:	4313      	orrs	r3, r2
 80050ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80050d0:	7b7b      	ldrb	r3, [r7, #13]
 80050d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80050d8:	4313      	orrs	r3, r2
 80050da:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d164      	bne.n	80051aa <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80050e0:	f107 030b 	add.w	r3, r7, #11
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa82 	bl	80055f0 <lsm6dso_fsm_data_rate_get>
 80050ec:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <lsm6dso_gy_data_rate_set+0x100>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	e075      	b.n	80051e4 <lsm6dso_gy_data_rate_set+0x1ec>

    switch (fsm_odr)
 80050f8:	7afb      	ldrb	r3, [r7, #11]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d852      	bhi.n	80051a4 <lsm6dso_gy_data_rate_set+0x1ac>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <lsm6dso_gy_data_rate_set+0x10c>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005115 	.word	0x08005115
 8005108:	08005127 	.word	0x08005127
 800510c:	08005145 	.word	0x08005145
 8005110:	0800516f 	.word	0x0800516f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800511e:	e045      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	75fb      	strb	r3, [r7, #23]
        break;
 8005124:	e042      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800512c:	2302      	movs	r3, #2
 800512e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005130:	e03c      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005138:	2302      	movs	r3, #2
 800513a:	75fb      	strb	r3, [r7, #23]
        break;
 800513c:	e036      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	75fb      	strb	r3, [r7, #23]
        break;
 8005142:	e033      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800514a:	2303      	movs	r3, #3
 800514c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800514e:	e02d      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d102      	bne.n	800515c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005156:	2303      	movs	r3, #3
 8005158:	75fb      	strb	r3, [r7, #23]
        break;
 800515a:	e027      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d102      	bne.n	8005168 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005162:	2303      	movs	r3, #3
 8005164:	75fb      	strb	r3, [r7, #23]
        break;
 8005166:	e021      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	75fb      	strb	r3, [r7, #23]
        break;
 800516c:	e01e      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005174:	2304      	movs	r3, #4
 8005176:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005178:	e018      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d102      	bne.n	8005186 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005180:	2304      	movs	r3, #4
 8005182:	75fb      	strb	r3, [r7, #23]
        break;
 8005184:	e012      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d102      	bne.n	8005192 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800518c:	2304      	movs	r3, #4
 800518e:	75fb      	strb	r3, [r7, #23]
        break;
 8005190:	e00c      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d102      	bne.n	800519e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005198:	2304      	movs	r3, #4
 800519a:	75fb      	strb	r3, [r7, #23]
        break;
 800519c:	e006      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	75fb      	strb	r3, [r7, #23]
        break;
 80051a2:	e003      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>

      default:
        odr_gy = val;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	75fb      	strb	r3, [r7, #23]
        break;
 80051a8:	e000      	b.n	80051ac <lsm6dso_gy_data_rate_set+0x1b4>
    }
  }
 80051aa:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80051ac:	f107 0208 	add.w	r2, r7, #8
 80051b0:	2301      	movs	r3, #1
 80051b2:	2111      	movs	r1, #17
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fcc7 	bl	8004b48 <lsm6dso_read_reg>
 80051ba:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	7a3b      	ldrb	r3, [r7, #8]
 80051c6:	f362 1307 	bfi	r3, r2, #4, #4
 80051ca:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80051cc:	f107 0208 	add.w	r2, r7, #8
 80051d0:	2301      	movs	r3, #1
 80051d2:	2111      	movs	r1, #17
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fccf 	bl	8004b78 <lsm6dso_write_reg>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4413      	add	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  return ret;
 80051e2:	693b      	ldr	r3, [r7, #16]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80051f6:	f107 0208 	add.w	r2, r7, #8
 80051fa:	2301      	movs	r3, #1
 80051fc:	2111      	movs	r1, #17
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fca2 	bl	8004b48 <lsm6dso_read_reg>
 8005204:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8005206:	7a3b      	ldrb	r3, [r7, #8]
 8005208:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b0a      	cmp	r3, #10
 8005210:	d844      	bhi.n	800529c <lsm6dso_gy_data_rate_get+0xb0>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <lsm6dso_gy_data_rate_get+0x2c>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	08005245 	.word	0x08005245
 800521c:	0800524d 	.word	0x0800524d
 8005220:	08005255 	.word	0x08005255
 8005224:	0800525d 	.word	0x0800525d
 8005228:	08005265 	.word	0x08005265
 800522c:	0800526d 	.word	0x0800526d
 8005230:	08005275 	.word	0x08005275
 8005234:	0800527d 	.word	0x0800527d
 8005238:	08005285 	.word	0x08005285
 800523c:	0800528d 	.word	0x0800528d
 8005240:	08005295 	.word	0x08005295
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
      break;
 800524a:	e02b      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
      break;
 8005252:	e027      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2202      	movs	r2, #2
 8005258:	701a      	strb	r2, [r3, #0]
      break;
 800525a:	e023      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2203      	movs	r2, #3
 8005260:	701a      	strb	r2, [r3, #0]
      break;
 8005262:	e01f      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2204      	movs	r2, #4
 8005268:	701a      	strb	r2, [r3, #0]
      break;
 800526a:	e01b      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2205      	movs	r2, #5
 8005270:	701a      	strb	r2, [r3, #0]
      break;
 8005272:	e017      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2206      	movs	r2, #6
 8005278:	701a      	strb	r2, [r3, #0]
      break;
 800527a:	e013      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2207      	movs	r2, #7
 8005280:	701a      	strb	r2, [r3, #0]
      break;
 8005282:	e00f      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2208      	movs	r2, #8
 8005288:	701a      	strb	r2, [r3, #0]
      break;
 800528a:	e00b      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2209      	movs	r2, #9
 8005290:	701a      	strb	r2, [r3, #0]
      break;
 8005292:	e007      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	220a      	movs	r2, #10
 8005298:	701a      	strb	r2, [r3, #0]
      break;
 800529a:	e003      	b.n	80052a4 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
      break;
 80052a2:	bf00      	nop
  }

  return ret;
 80052a4:	68fb      	ldr	r3, [r7, #12]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop

080052b0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80052bc:	f107 0208 	add.w	r2, r7, #8
 80052c0:	2301      	movs	r3, #1
 80052c2:	2112      	movs	r1, #18
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fc3f 	bl	8004b48 <lsm6dso_read_reg>
 80052ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	7a3b      	ldrb	r3, [r7, #8]
 80052dc:	f362 1386 	bfi	r3, r2, #6, #1
 80052e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80052e2:	f107 0208 	add.w	r2, r7, #8
 80052e6:	2301      	movs	r3, #1
 80052e8:	2112      	movs	r1, #18
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff fc44 	bl	8004b78 <lsm6dso_write_reg>
 80052f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052f2:	68fb      	ldr	r3, [r7, #12]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8005306:	f107 020c 	add.w	r2, r7, #12
 800530a:	2306      	movs	r3, #6
 800530c:	2122      	movs	r1, #34	; 0x22
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fc1a 	bl	8004b48 <lsm6dso_read_reg>
 8005314:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005316:	7b7b      	ldrb	r3, [r7, #13]
 8005318:	b21a      	sxth	r2, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005324:	b29b      	uxth	r3, r3
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	b29a      	uxth	r2, r3
 800532a:	7b3b      	ldrb	r3, [r7, #12]
 800532c:	b29b      	uxth	r3, r3
 800532e:	4413      	add	r3, r2
 8005330:	b29b      	uxth	r3, r3
 8005332:	b21a      	sxth	r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	3302      	adds	r3, #2
 800533e:	b212      	sxth	r2, r2
 8005340:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	3302      	adds	r3, #2
 8005346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800534a:	b29b      	uxth	r3, r3
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	b29a      	uxth	r2, r3
 8005350:	7bbb      	ldrb	r3, [r7, #14]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4413      	add	r3, r2
 8005356:	b29a      	uxth	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	3302      	adds	r3, #2
 800535c:	b212      	sxth	r2, r2
 800535e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005360:	7c7a      	ldrb	r2, [r7, #17]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	3304      	adds	r3, #4
 8005366:	b212      	sxth	r2, r2
 8005368:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	3304      	adds	r3, #4
 800536e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005372:	b29b      	uxth	r3, r3
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	b29a      	uxth	r2, r3
 8005378:	7c3b      	ldrb	r3, [r7, #16]
 800537a:	b29b      	uxth	r3, r3
 800537c:	4413      	add	r3, r2
 800537e:	b29a      	uxth	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	3304      	adds	r3, #4
 8005384:	b212      	sxth	r2, r2
 8005386:	801a      	strh	r2, [r3, #0]

  return ret;
 8005388:	697b      	ldr	r3, [r7, #20]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800539c:	f107 020c 	add.w	r2, r7, #12
 80053a0:	2306      	movs	r3, #6
 80053a2:	2128      	movs	r1, #40	; 0x28
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fbcf 	bl	8004b48 <lsm6dso_read_reg>
 80053aa:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80053ac:	7b7b      	ldrb	r3, [r7, #13]
 80053ae:	b21a      	sxth	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	b29a      	uxth	r2, r3
 80053c0:	7b3b      	ldrb	r3, [r7, #12]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	b21a      	sxth	r2, r3
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80053ce:	7bfa      	ldrb	r2, [r7, #15]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	3302      	adds	r3, #2
 80053d4:	b212      	sxth	r2, r2
 80053d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	3302      	adds	r3, #2
 80053dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	3302      	adds	r3, #2
 80053f2:	b212      	sxth	r2, r2
 80053f4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80053f6:	7c7a      	ldrb	r2, [r7, #17]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	3304      	adds	r3, #4
 80053fc:	b212      	sxth	r2, r2
 80053fe:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	3304      	adds	r3, #4
 8005404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005408:	b29b      	uxth	r3, r3
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	b29a      	uxth	r2, r3
 800540e:	7c3b      	ldrb	r3, [r7, #16]
 8005410:	b29b      	uxth	r3, r3
 8005412:	4413      	add	r3, r2
 8005414:	b29a      	uxth	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	3304      	adds	r3, #4
 800541a:	b212      	sxth	r2, r2
 800541c:	801a      	strh	r2, [r3, #0]

  return ret;
 800541e:	697b      	ldr	r3, [r7, #20]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8005434:	2300      	movs	r3, #0
 8005436:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	b2da      	uxtb	r2, r3
 8005440:	7a3b      	ldrb	r3, [r7, #8]
 8005442:	f362 1387 	bfi	r3, r2, #6, #2
 8005446:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005448:	f107 0208 	add.w	r2, r7, #8
 800544c:	2301      	movs	r3, #1
 800544e:	2101      	movs	r1, #1
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fb91 	bl	8004b78 <lsm6dso_write_reg>
 8005456:	60f8      	str	r0, [r7, #12]

  return ret;
 8005458:	68fb      	ldr	r3, [r7, #12]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800546c:	2301      	movs	r3, #1
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	210f      	movs	r1, #15
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fb68 	bl	8004b48 <lsm6dso_read_reg>
 8005478:	60f8      	str	r0, [r7, #12]

  return ret;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005490:	f107 0208 	add.w	r2, r7, #8
 8005494:	2301      	movs	r3, #1
 8005496:	2112      	movs	r1, #18
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fb55 	bl	8004b48 <lsm6dso_read_reg>
 800549e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	7a3b      	ldrb	r3, [r7, #8]
 80054b0:	f362 0382 	bfi	r3, r2, #2, #1
 80054b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80054b6:	f107 0208 	add.w	r2, r7, #8
 80054ba:	2301      	movs	r3, #1
 80054bc:	2112      	movs	r1, #18
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff fb5a 	bl	8004b78 <lsm6dso_write_reg>
 80054c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80054dc:	f107 020c 	add.w	r2, r7, #12
 80054e0:	2301      	movs	r3, #1
 80054e2:	2118      	movs	r1, #24
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fb2f 	bl	8004b48 <lsm6dso_read_reg>
 80054ea:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	09db      	lsrs	r3, r3, #7
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	7b3b      	ldrb	r3, [r7, #12]
 80054fa:	f362 0341 	bfi	r3, r2, #1, #1
 80054fe:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005500:	f107 020c 	add.w	r2, r7, #12
 8005504:	2301      	movs	r3, #1
 8005506:	2118      	movs	r1, #24
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff fb35 	bl	8004b78 <lsm6dso_write_reg>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4413      	add	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <lsm6dso_i3c_disable_set+0x50>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	e01b      	b.n	8005558 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005520:	f107 0210 	add.w	r2, r7, #16
 8005524:	2301      	movs	r3, #1
 8005526:	2162      	movs	r1, #98	; 0x62
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fb0d 	bl	8004b48 <lsm6dso_read_reg>
 800552e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	b2da      	uxtb	r2, r3
 8005538:	7c3b      	ldrb	r3, [r7, #16]
 800553a:	f362 03c4 	bfi	r3, r2, #3, #2
 800553e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8005540:	f107 0210 	add.w	r2, r7, #16
 8005544:	2301      	movs	r3, #1
 8005546:	2162      	movs	r1, #98	; 0x62
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fb15 	bl	8004b78 <lsm6dso_write_reg>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  return ret;
 8005556:	697b      	ldr	r3, [r7, #20]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800556c:	f107 0208 	add.w	r2, r7, #8
 8005570:	2301      	movs	r3, #1
 8005572:	210a      	movs	r1, #10
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fae7 	bl	8004b48 <lsm6dso_read_reg>
 800557a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10f      	bne.n	80055a2 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	b2da      	uxtb	r2, r3
 800558a:	7a3b      	ldrb	r3, [r7, #8]
 800558c:	f362 0302 	bfi	r3, r2, #0, #3
 8005590:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005592:	f107 0208 	add.w	r2, r7, #8
 8005596:	2301      	movs	r3, #1
 8005598:	210a      	movs	r1, #10
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff faec 	bl	8004b78 <lsm6dso_write_reg>
 80055a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80055b6:	2102      	movs	r1, #2
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ff35 	bl	8005428 <lsm6dso_mem_bank_set>
 80055be:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80055c0:	2302      	movs	r3, #2
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	2146      	movs	r1, #70	; 0x46
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fabe 	bl	8004b48 <lsm6dso_read_reg>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80055d4:	2100      	movs	r1, #0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ff26 	bl	8005428 <lsm6dso_mem_bank_set>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  return ret;
 80055e4:	68fb      	ldr	r3, [r7, #12]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80055fa:	2102      	movs	r1, #2
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ff13 	bl	8005428 <lsm6dso_mem_bank_set>
 8005602:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <lsm6dso_fsm_data_rate_get+0x1e>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	e03a      	b.n	8005684 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800560e:	f107 0208 	add.w	r2, r7, #8
 8005612:	2301      	movs	r3, #1
 8005614:	215f      	movs	r1, #95	; 0x5f
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fa96 	bl	8004b48 <lsm6dso_read_reg>
 800561c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d125      	bne.n	8005670 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8005624:	7a3b      	ldrb	r3, [r7, #8]
 8005626:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b03      	cmp	r3, #3
 800562e:	d81b      	bhi.n	8005668 <lsm6dso_fsm_data_rate_get+0x78>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <lsm6dso_fsm_data_rate_get+0x48>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	08005649 	.word	0x08005649
 800563c:	08005651 	.word	0x08005651
 8005640:	08005659 	.word	0x08005659
 8005644:	08005661 	.word	0x08005661
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
      break;
 800564e:	e010      	b.n	8005672 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2201      	movs	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
      break;
 8005656:	e00c      	b.n	8005672 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2202      	movs	r2, #2
 800565c:	701a      	strb	r2, [r3, #0]
      break;
 800565e:	e008      	b.n	8005672 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2203      	movs	r2, #3
 8005664:	701a      	strb	r2, [r3, #0]
      break;
 8005666:	e004      	b.n	8005672 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
      break;
 800566e:	e000      	b.n	8005672 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8005670:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005672:	2100      	movs	r1, #0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fed7 	bl	8005428 <lsm6dso_mem_bank_set>
 800567a:	4602      	mov	r2, r0
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  return ret;
 8005682:	68fb      	ldr	r3, [r7, #12]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08e      	sub	sp, #56	; 0x38
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005696:	2300      	movs	r3, #0
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800569a:	2301      	movs	r3, #1
 800569c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d06e      	beq.n	8005786 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	f200 809d 	bhi.w	80057ea <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <IKS01A3_MOTION_SENSOR_Init+0x32>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d032      	beq.n	8005722 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80056bc:	e095      	b.n	80057ea <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80056be:	6838      	ldr	r0, [r7, #0]
 80056c0:	f000 f966 	bl	8005990 <LSM6DSO_0_Probe>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	e0cc      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056d0:	4a68      	ldr	r2, [pc, #416]	; (8005874 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	4967      	ldr	r1, [pc, #412]	; (8005878 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056e2:	f107 010c 	add.w	r1, r7, #12
 80056e6:	4610      	mov	r0, r2
 80056e8:	4798      	blx	r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80056f0:	f06f 0306 	mvn.w	r3, #6
 80056f4:	e0b9      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80056f6:	7b3b      	ldrb	r3, [r7, #12]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d103      	bne.n	8005704 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	f043 0302 	orr.w	r3, r3, #2
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005704:	7b7b      	ldrb	r3, [r7, #13]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d103      	bne.n	8005712 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d16c      	bne.n	80057f2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	f043 0304 	orr.w	r3, r3, #4
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005720:	e067      	b.n	80057f2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8005722:	6838      	ldr	r0, [r7, #0]
 8005724:	f000 f9f4 	bl	8005b10 <LIS2DW12_0_Probe>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800572e:	f04f 33ff 	mov.w	r3, #4294967295
 8005732:	e09a      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005734:	4a4f      	ldr	r2, [pc, #316]	; (8005874 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	494e      	ldr	r1, [pc, #312]	; (8005878 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005746:	f107 010c 	add.w	r1, r7, #12
 800574a:	4610      	mov	r0, r2
 800574c:	4798      	blx	r3
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005754:	f06f 0306 	mvn.w	r3, #6
 8005758:	e087      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800575a:	7b3b      	ldrb	r3, [r7, #12]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d103      	bne.n	8005768 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	f043 0302 	orr.w	r3, r3, #2
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005768:	7b7b      	ldrb	r3, [r7, #13]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d103      	bne.n	8005776 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d13c      	bne.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f043 0304 	orr.w	r3, r3, #4
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005784:	e037      	b.n	80057f6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005786:	6838      	ldr	r0, [r7, #0]
 8005788:	f000 fa6a 	bl	8005c60 <LIS2MDL_0_Probe>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	e068      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005798:	4a36      	ldr	r2, [pc, #216]	; (8005874 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4935      	ldr	r1, [pc, #212]	; (8005878 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057aa:	f107 010c 	add.w	r1, r7, #12
 80057ae:	4610      	mov	r0, r2
 80057b0:	4798      	blx	r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80057b8:	f06f 0306 	mvn.w	r3, #6
 80057bc:	e055      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80057be:	7b3b      	ldrb	r3, [r7, #12]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d103      	bne.n	80057cc <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	f043 0302 	orr.w	r3, r3, #2
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80057cc:	7b7b      	ldrb	r3, [r7, #13]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d103      	bne.n	80057da <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10c      	bne.n	80057fa <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	f043 0304 	orr.w	r3, r3, #4
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80057e8:	e007      	b.n	80057fa <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80057ea:	f06f 0301 	mvn.w	r3, #1
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80057f0:	e004      	b.n	80057fc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80057fa:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	e031      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580a:	e02a      	b.n	8005862 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	4013      	ands	r3, r2
 8005812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005814:	429a      	cmp	r2, r3
 8005816:	d11e      	bne.n	8005856 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8005818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	4013      	ands	r3, r2
 800581e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005820:	429a      	cmp	r2, r3
 8005822:	d118      	bne.n	8005856 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005824:	4a15      	ldr	r2, [pc, #84]	; (800587c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800582c:	4814      	ldr	r0, [pc, #80]	; (8005880 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	440b      	add	r3, r1
 8005838:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	490e      	ldr	r1, [pc, #56]	; (8005878 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005846:	4610      	mov	r0, r2
 8005848:	4798      	blx	r3
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005850:	f06f 0304 	mvn.w	r3, #4
 8005854:	e009      	b.n	800586a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	3301      	adds	r3, #1
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005864:	2b02      	cmp	r3, #2
 8005866:	d9d1      	bls.n	800580c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800586a:	4618      	mov	r0, r3
 800586c:	3738      	adds	r7, #56	; 0x38
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000194 	.word	0x20000194
 8005878:	2000067c 	.word	0x2000067c
 800587c:	200000c4 	.word	0x200000c4
 8005880:	20000170 	.word	0x20000170

08005884 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d903      	bls.n	800589c <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005894:	f06f 0301 	mvn.w	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	e028      	b.n	80058ee <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800589c:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4013      	ands	r3, r2
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11c      	bne.n	80058e8 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80058ae:	4a13      	ldr	r2, [pc, #76]	; (80058fc <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058b6:	4812      	ldr	r0, [pc, #72]	; (8005900 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	440b      	add	r3, r1
 80058c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	490e      	ldr	r1, [pc, #56]	; (8005904 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058da:	f06f 0304 	mvn.w	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e005      	b.n	80058ee <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	e002      	b.n	80058ee <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80058e8:	f06f 0301 	mvn.w	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200001a0 	.word	0x200001a0
 80058fc:	200000c4 	.word	0x200000c4
 8005900:	20000170 	.word	0x20000170
 8005904:	2000067c 	.word	0x2000067c

08005908 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d903      	bls.n	8005922 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800591a:	f06f 0301 	mvn.w	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e029      	b.n	8005976 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005922:	4a17      	ldr	r2, [pc, #92]	; (8005980 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d11d      	bne.n	8005970 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800593c:	4812      	ldr	r0, [pc, #72]	; (8005988 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	4413      	add	r3, r2
 8005946:	440b      	add	r3, r1
 8005948:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	490f      	ldr	r1, [pc, #60]	; (800598c <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005962:	f06f 0304 	mvn.w	r3, #4
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e005      	b.n	8005976 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e002      	b.n	8005976 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005970:	f06f 0301 	mvn.w	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	200001a0 	.word	0x200001a0
 8005984:	200000c4 	.word	0x200000c4
 8005988:	20000170 	.word	0x20000170
 800598c:	2000067c 	.word	0x2000067c

08005990 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b094      	sub	sp, #80	; 0x50
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005998:	2300      	movs	r3, #0
 800599a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800599c:	2300      	movs	r3, #0
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80059a0:	23d7      	movs	r3, #215	; 0xd7
 80059a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80059a6:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <LSM6DSO_0_Probe+0x144>)
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80059aa:	4b4b      	ldr	r3, [pc, #300]	; (8005ad8 <LSM6DSO_0_Probe+0x148>)
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80059ae:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <LSM6DSO_0_Probe+0x14c>)
 80059b0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80059b2:	4b4b      	ldr	r3, [pc, #300]	; (8005ae0 <LSM6DSO_0_Probe+0x150>)
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80059b6:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <LSM6DSO_0_Probe+0x154>)
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80059ba:	4b4b      	ldr	r3, [pc, #300]	; (8005ae8 <LSM6DSO_0_Probe+0x158>)
 80059bc:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80059be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059c2:	4619      	mov	r1, r3
 80059c4:	4849      	ldr	r0, [pc, #292]	; (8005aec <LSM6DSO_0_Probe+0x15c>)
 80059c6:	f7fd fe81 	bl	80036cc <LSM6DSO_RegisterBusIO>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059d0:	f06f 0306 	mvn.w	r3, #6
 80059d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d6:	e077      	b.n	8005ac8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80059d8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80059dc:	4619      	mov	r1, r3
 80059de:	4843      	ldr	r0, [pc, #268]	; (8005aec <LSM6DSO_0_Probe+0x15c>)
 80059e0:	f7fd ff7e 	bl	80038e0 <LSM6DSO_ReadID>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059ea:	f06f 0306 	mvn.w	r3, #6
 80059ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f0:	e06a      	b.n	8005ac8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80059f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059f6:	2b6c      	cmp	r3, #108	; 0x6c
 80059f8:	d003      	beq.n	8005a02 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80059fa:	f06f 0306 	mvn.w	r3, #6
 80059fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a00:	e062      	b.n	8005ac8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8005a02:	f107 030c 	add.w	r3, r7, #12
 8005a06:	4619      	mov	r1, r3
 8005a08:	4838      	ldr	r0, [pc, #224]	; (8005aec <LSM6DSO_0_Probe+0x15c>)
 8005a0a:	f7fd ff7f 	bl	800390c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005a0e:	7b7b      	ldrb	r3, [r7, #13]
 8005a10:	461a      	mov	r2, r3
 8005a12:	7b3b      	ldrb	r3, [r7, #12]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	431a      	orrs	r2, r3
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	4a34      	ldr	r2, [pc, #208]	; (8005af0 <LSM6DSO_0_Probe+0x160>)
 8005a20:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8005a22:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <LSM6DSO_0_Probe+0x164>)
 8005a24:	4a31      	ldr	r2, [pc, #196]	; (8005aec <LSM6DSO_0_Probe+0x15c>)
 8005a26:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8005a28:	4b33      	ldr	r3, [pc, #204]	; (8005af8 <LSM6DSO_0_Probe+0x168>)
 8005a2a:	4a34      	ldr	r2, [pc, #208]	; (8005afc <LSM6DSO_0_Probe+0x16c>)
 8005a2c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11d      	bne.n	8005a70 <LSM6DSO_0_Probe+0xe0>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d018      	beq.n	8005a70 <LSM6DSO_0_Probe+0xe0>
 8005a3e:	7b7b      	ldrb	r3, [r7, #13]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d115      	bne.n	8005a70 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8005a44:	4b2e      	ldr	r3, [pc, #184]	; (8005b00 <LSM6DSO_0_Probe+0x170>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4a2e      	ldr	r2, [pc, #184]	; (8005b04 <LSM6DSO_0_Probe+0x174>)
 8005a4a:	492f      	ldr	r1, [pc, #188]	; (8005b08 <LSM6DSO_0_Probe+0x178>)
 8005a4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005a50:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <LSM6DSO_0_Probe+0x168>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <LSM6DSO_0_Probe+0x164>)
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4798      	blx	r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a64:	f06f 0304 	mvn.w	r3, #4
 8005a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a6a:	e001      	b.n	8005a70 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d11d      	bne.n	8005ab2 <LSM6DSO_0_Probe+0x122>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d018      	beq.n	8005ab2 <LSM6DSO_0_Probe+0x122>
 8005a80:	7b3b      	ldrb	r3, [r7, #12]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d115      	bne.n	8005ab2 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a86:	4b1e      	ldr	r3, [pc, #120]	; (8005b00 <LSM6DSO_0_Probe+0x170>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <LSM6DSO_0_Probe+0x174>)
 8005a8c:	491f      	ldr	r1, [pc, #124]	; (8005b0c <LSM6DSO_0_Probe+0x17c>)
 8005a8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005a92:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <LSM6DSO_0_Probe+0x168>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <LSM6DSO_0_Probe+0x164>)
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005aa6:	f06f 0304 	mvn.w	r3, #4
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aac:	e001      	b.n	8005ab2 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <LSM6DSO_0_Probe+0x138>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ac2:	f06f 0304 	mvn.w	r3, #4
 8005ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3750      	adds	r7, #80	; 0x50
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	08000c75 	.word	0x08000c75
 8005ad8:	08000cd9 	.word	0x08000cd9
 8005adc:	08000d8d 	.word	0x08000d8d
 8005ae0:	08000d29 	.word	0x08000d29
 8005ae4:	08000df1 	.word	0x08000df1
 8005ae8:	08005e95 	.word	0x08005e95
 8005aec:	200001ac 	.word	0x200001ac
 8005af0:	200001a0 	.word	0x200001a0
 8005af4:	2000067c 	.word	0x2000067c
 8005af8:	20000194 	.word	0x20000194
 8005afc:	2000006c 	.word	0x2000006c
 8005b00:	200000c4 	.word	0x200000c4
 8005b04:	20000170 	.word	0x20000170
 8005b08:	200000a0 	.word	0x200000a0
 8005b0c:	2000007c 	.word	0x2000007c

08005b10 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b094      	sub	sp, #80	; 0x50
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005b20:	2333      	movs	r3, #51	; 0x33
 8005b22:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005b26:	4b40      	ldr	r3, [pc, #256]	; (8005c28 <LIS2DW12_0_Probe+0x118>)
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005b2a:	4b40      	ldr	r3, [pc, #256]	; (8005c2c <LIS2DW12_0_Probe+0x11c>)
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005b2e:	4b40      	ldr	r3, [pc, #256]	; (8005c30 <LIS2DW12_0_Probe+0x120>)
 8005b30:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005b32:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <LIS2DW12_0_Probe+0x124>)
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005b36:	4b40      	ldr	r3, [pc, #256]	; (8005c38 <LIS2DW12_0_Probe+0x128>)
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005b3a:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <LIS2DW12_0_Probe+0x12c>)
 8005b3c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8005b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b42:	4619      	mov	r1, r3
 8005b44:	483e      	ldr	r0, [pc, #248]	; (8005c40 <LIS2DW12_0_Probe+0x130>)
 8005b46:	f7fb fa67 	bl	8001018 <LIS2DW12_RegisterBusIO>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b50:	f06f 0306 	mvn.w	r3, #6
 8005b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b56:	e062      	b.n	8005c1e <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005b58:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4838      	ldr	r0, [pc, #224]	; (8005c40 <LIS2DW12_0_Probe+0x130>)
 8005b60:	f7fb fb48 	bl	80011f4 <LIS2DW12_ReadID>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b6a:	f06f 0306 	mvn.w	r3, #6
 8005b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b70:	e055      	b.n	8005c1e <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8005b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b76:	2b44      	cmp	r3, #68	; 0x44
 8005b78:	d003      	beq.n	8005b82 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b7a:	f06f 0306 	mvn.w	r3, #6
 8005b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b80:	e04d      	b.n	8005c1e <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005b82:	f107 030c 	add.w	r3, r7, #12
 8005b86:	4619      	mov	r1, r3
 8005b88:	482d      	ldr	r0, [pc, #180]	; (8005c40 <LIS2DW12_0_Probe+0x130>)
 8005b8a:	f7fb fb49 	bl	8001220 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b8e:	7b7b      	ldrb	r3, [r7, #13]
 8005b90:	461a      	mov	r2, r3
 8005b92:	7b3b      	ldrb	r3, [r7, #12]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	431a      	orrs	r2, r3
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	4a29      	ldr	r2, [pc, #164]	; (8005c44 <LIS2DW12_0_Probe+0x134>)
 8005ba0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8005ba2:	4b29      	ldr	r3, [pc, #164]	; (8005c48 <LIS2DW12_0_Probe+0x138>)
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <LIS2DW12_0_Probe+0x130>)
 8005ba6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005ba8:	4b28      	ldr	r3, [pc, #160]	; (8005c4c <LIS2DW12_0_Probe+0x13c>)
 8005baa:	4a29      	ldr	r2, [pc, #164]	; (8005c50 <LIS2DW12_0_Probe+0x140>)
 8005bac:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11e      	bne.n	8005bf2 <LIS2DW12_0_Probe+0xe2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d019      	beq.n	8005bf2 <LIS2DW12_0_Probe+0xe2>
 8005bbe:	7b3b      	ldrb	r3, [r7, #12]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d116      	bne.n	8005bf2 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005bc4:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <LIS2DW12_0_Probe+0x144>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a23      	ldr	r2, [pc, #140]	; (8005c58 <LIS2DW12_0_Probe+0x148>)
 8005bca:	3303      	adds	r3, #3
 8005bcc:	4923      	ldr	r1, [pc, #140]	; (8005c5c <LIS2DW12_0_Probe+0x14c>)
 8005bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <LIS2DW12_0_Probe+0x13c>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <LIS2DW12_0_Probe+0x138>)
 8005bda:	6852      	ldr	r2, [r2, #4]
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005be6:	f06f 0304 	mvn.w	r3, #4
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	e001      	b.n	8005bf2 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <LIS2DW12_0_Probe+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c02:	f06f 0304 	mvn.w	r3, #4
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d107      	bne.n	8005c1e <LIS2DW12_0_Probe+0x10e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c18:	f06f 0304 	mvn.w	r3, #4
 8005c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3750      	adds	r7, #80	; 0x50
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08000c75 	.word	0x08000c75
 8005c2c:	08000cd9 	.word	0x08000cd9
 8005c30:	08000d8d 	.word	0x08000d8d
 8005c34:	08000d29 	.word	0x08000d29
 8005c38:	08000df1 	.word	0x08000df1
 8005c3c:	08005e95 	.word	0x08005e95
 8005c40:	200001e4 	.word	0x200001e4
 8005c44:	200001a0 	.word	0x200001a0
 8005c48:	2000067c 	.word	0x2000067c
 8005c4c:	20000194 	.word	0x20000194
 8005c50:	20000004 	.word	0x20000004
 8005c54:	200000c4 	.word	0x200000c4
 8005c58:	20000170 	.word	0x20000170
 8005c5c:	20000014 	.word	0x20000014

08005c60 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b094      	sub	sp, #80	; 0x50
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005c70:	233d      	movs	r3, #61	; 0x3d
 8005c72:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005c76:	4b40      	ldr	r3, [pc, #256]	; (8005d78 <LIS2MDL_0_Probe+0x118>)
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005c7a:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <LIS2MDL_0_Probe+0x11c>)
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005c7e:	4b40      	ldr	r3, [pc, #256]	; (8005d80 <LIS2MDL_0_Probe+0x120>)
 8005c80:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005c82:	4b40      	ldr	r3, [pc, #256]	; (8005d84 <LIS2MDL_0_Probe+0x124>)
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005c86:	4b40      	ldr	r3, [pc, #256]	; (8005d88 <LIS2MDL_0_Probe+0x128>)
 8005c88:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005c8a:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <LIS2MDL_0_Probe+0x12c>)
 8005c8c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8005c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c92:	4619      	mov	r1, r3
 8005c94:	483e      	ldr	r0, [pc, #248]	; (8005d90 <LIS2MDL_0_Probe+0x130>)
 8005c96:	f7fc fd13 	bl	80026c0 <LIS2MDL_RegisterBusIO>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ca0:	f06f 0306 	mvn.w	r3, #6
 8005ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca6:	e062      	b.n	8005d6e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005ca8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005cac:	4619      	mov	r1, r3
 8005cae:	4838      	ldr	r0, [pc, #224]	; (8005d90 <LIS2MDL_0_Probe+0x130>)
 8005cb0:	f7fc fe22 	bl	80028f8 <LIS2MDL_ReadID>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cba:	f06f 0306 	mvn.w	r3, #6
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc0:	e055      	b.n	8005d6e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8005cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d003      	beq.n	8005cd2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cca:	f06f 0306 	mvn.w	r3, #6
 8005cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd0:	e04d      	b.n	8005d6e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8005cd2:	f107 030c 	add.w	r3, r7, #12
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	482d      	ldr	r0, [pc, #180]	; (8005d90 <LIS2MDL_0_Probe+0x130>)
 8005cda:	f7fc fe33 	bl	8002944 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005cde:	7b7b      	ldrb	r3, [r7, #13]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	7b3b      	ldrb	r3, [r7, #12]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4313      	orrs	r3, r2
 8005cee:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <LIS2MDL_0_Probe+0x134>)
 8005cf0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8005cf2:	4b29      	ldr	r3, [pc, #164]	; (8005d98 <LIS2MDL_0_Probe+0x138>)
 8005cf4:	4a26      	ldr	r2, [pc, #152]	; (8005d90 <LIS2MDL_0_Probe+0x130>)
 8005cf6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8005cf8:	4b28      	ldr	r3, [pc, #160]	; (8005d9c <LIS2MDL_0_Probe+0x13c>)
 8005cfa:	4a29      	ldr	r2, [pc, #164]	; (8005da0 <LIS2MDL_0_Probe+0x140>)
 8005cfc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d11e      	bne.n	8005d42 <LIS2MDL_0_Probe+0xe2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d019      	beq.n	8005d42 <LIS2MDL_0_Probe+0xe2>
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d116      	bne.n	8005d42 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005d14:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <LIS2MDL_0_Probe+0x144>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <LIS2MDL_0_Probe+0x148>)
 8005d1a:	3306      	adds	r3, #6
 8005d1c:	4923      	ldr	r1, [pc, #140]	; (8005dac <LIS2MDL_0_Probe+0x14c>)
 8005d1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005d22:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <LIS2MDL_0_Probe+0x13c>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <LIS2MDL_0_Probe+0x138>)
 8005d2a:	6892      	ldr	r2, [r2, #8]
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d36:	f06f 0304 	mvn.w	r3, #4
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d3c:	e001      	b.n	8005d42 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d107      	bne.n	8005d58 <LIS2MDL_0_Probe+0xf8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d52:	f06f 0304 	mvn.w	r3, #4
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <LIS2MDL_0_Probe+0x10e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d68:	f06f 0304 	mvn.w	r3, #4
 8005d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3750      	adds	r7, #80	; 0x50
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08000c75 	.word	0x08000c75
 8005d7c:	08000cd9 	.word	0x08000cd9
 8005d80:	08000d8d 	.word	0x08000d8d
 8005d84:	08000d29 	.word	0x08000d29
 8005d88:	08000df1 	.word	0x08000df1
 8005d8c:	08005e95 	.word	0x08005e95
 8005d90:	20000220 	.word	0x20000220
 8005d94:	200001a0 	.word	0x200001a0
 8005d98:	2000067c 	.word	0x2000067c
 8005d9c:	20000194 	.word	0x20000194
 8005da0:	20000038 	.word	0x20000038
 8005da4:	200000c4 	.word	0x200000c4
 8005da8:	20000170 	.word	0x20000170
 8005dac:	20000048 	.word	0x20000048

08005db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <HAL_Init+0x40>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <HAL_Init+0x40>)
 8005dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_Init+0x40>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <HAL_Init+0x40>)
 8005dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <HAL_Init+0x40>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a07      	ldr	r2, [pc, #28]	; (8005df0 <HAL_Init+0x40>)
 8005dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dd8:	2003      	movs	r0, #3
 8005dda:	f000 f94f 	bl	800607c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dde:	2000      	movs	r0, #0
 8005de0:	f000 f808 	bl	8005df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005de4:	f7fa fe68 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40023c00 	.word	0x40023c00

08005df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_InitTick+0x54>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <HAL_InitTick+0x58>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	4619      	mov	r1, r3
 8005e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 f967 	bl	80060e6 <HAL_SYSTICK_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e00e      	b.n	8005e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b0f      	cmp	r3, #15
 8005e26:	d80a      	bhi.n	8005e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e28:	2200      	movs	r2, #0
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	f000 f92f 	bl	8006092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e34:	4a06      	ldr	r2, [pc, #24]	; (8005e50 <HAL_InitTick+0x5c>)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000000 	.word	0x20000000
 8005e4c:	200000dc 	.word	0x200000dc
 8005e50:	200000d8 	.word	0x200000d8

08005e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_IncTick+0x20>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <HAL_IncTick+0x24>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4413      	add	r3, r2
 8005e64:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <HAL_IncTick+0x24>)
 8005e66:	6013      	str	r3, [r2, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	200000dc 	.word	0x200000dc
 8005e78:	20000688 	.word	0x20000688

08005e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <HAL_GetTick+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000688 	.word	0x20000688

08005e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e9c:	f7ff ffee 	bl	8005e7c <HAL_GetTick>
 8005ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d005      	beq.n	8005eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <HAL_Delay+0x44>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005eba:	bf00      	nop
 8005ebc:	f7ff ffde 	bl	8005e7c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d8f7      	bhi.n	8005ebc <HAL_Delay+0x28>
  {
  }
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200000dc 	.word	0x200000dc

08005edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <__NVIC_SetPriorityGrouping+0x44>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f0e:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <__NVIC_SetPriorityGrouping+0x44>)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	60d3      	str	r3, [r2, #12]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	e000ed00 	.word	0xe000ed00

08005f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <__NVIC_GetPriorityGrouping+0x18>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	0a1b      	lsrs	r3, r3, #8
 8005f2e:	f003 0307 	and.w	r3, r3, #7
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	e000ed00 	.word	0xe000ed00

08005f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	db0b      	blt.n	8005f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	f003 021f 	and.w	r2, r3, #31
 8005f58:	4907      	ldr	r1, [pc, #28]	; (8005f78 <__NVIC_EnableIRQ+0x38>)
 8005f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	2001      	movs	r0, #1
 8005f62:	fa00 f202 	lsl.w	r2, r0, r2
 8005f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000e100 	.word	0xe000e100

08005f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	6039      	str	r1, [r7, #0]
 8005f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	db0a      	blt.n	8005fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	490c      	ldr	r1, [pc, #48]	; (8005fc8 <__NVIC_SetPriority+0x4c>)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fa4:	e00a      	b.n	8005fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4908      	ldr	r1, [pc, #32]	; (8005fcc <__NVIC_SetPriority+0x50>)
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	3b04      	subs	r3, #4
 8005fb4:	0112      	lsls	r2, r2, #4
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	440b      	add	r3, r1
 8005fba:	761a      	strb	r2, [r3, #24]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	e000e100 	.word	0xe000e100
 8005fcc:	e000ed00 	.word	0xe000ed00

08005fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	; 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f1c3 0307 	rsb	r3, r3, #7
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	bf28      	it	cs
 8005fee:	2304      	movcs	r3, #4
 8005ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d902      	bls.n	8006000 <NVIC_EncodePriority+0x30>
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3b03      	subs	r3, #3
 8005ffe:	e000      	b.n	8006002 <NVIC_EncodePriority+0x32>
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	43da      	mvns	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	401a      	ands	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006018:	f04f 31ff 	mov.w	r1, #4294967295
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	fa01 f303 	lsl.w	r3, r1, r3
 8006022:	43d9      	mvns	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006028:	4313      	orrs	r3, r2
         );
}
 800602a:	4618      	mov	r0, r3
 800602c:	3724      	adds	r7, #36	; 0x24
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3b01      	subs	r3, #1
 8006044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006048:	d301      	bcc.n	800604e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800604a:	2301      	movs	r3, #1
 800604c:	e00f      	b.n	800606e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800604e:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <SysTick_Config+0x40>)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3b01      	subs	r3, #1
 8006054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006056:	210f      	movs	r1, #15
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	f7ff ff8e 	bl	8005f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <SysTick_Config+0x40>)
 8006062:	2200      	movs	r2, #0
 8006064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006066:	4b04      	ldr	r3, [pc, #16]	; (8006078 <SysTick_Config+0x40>)
 8006068:	2207      	movs	r2, #7
 800606a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	e000e010 	.word	0xe000e010

0800607c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ff29 	bl	8005edc <__NVIC_SetPriorityGrouping>
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006092:	b580      	push	{r7, lr}
 8006094:	b086      	sub	sp, #24
 8006096:	af00      	add	r7, sp, #0
 8006098:	4603      	mov	r3, r0
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060a4:	f7ff ff3e 	bl	8005f24 <__NVIC_GetPriorityGrouping>
 80060a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	6978      	ldr	r0, [r7, #20]
 80060b0:	f7ff ff8e 	bl	8005fd0 <NVIC_EncodePriority>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff ff5d 	bl	8005f7c <__NVIC_SetPriority>
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	4603      	mov	r3, r0
 80060d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff ff31 	bl	8005f40 <__NVIC_EnableIRQ>
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff ffa2 	bl	8006038 <SysTick_Config>
 80060f4:	4603      	mov	r3, r0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800610c:	f7ff feb6 	bl	8005e7c <HAL_GetTick>
 8006110:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d008      	beq.n	8006130 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2280      	movs	r2, #128	; 0x80
 8006122:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e052      	b.n	80061d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0216 	bic.w	r2, r2, #22
 800613e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800614e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <HAL_DMA_Abort+0x62>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0208 	bic.w	r2, r2, #8
 800616e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006180:	e013      	b.n	80061aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006182:	f7ff fe7b 	bl	8005e7c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b05      	cmp	r3, #5
 800618e:	d90c      	bls.n	80061aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2203      	movs	r2, #3
 800619a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e015      	b.n	80061d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e4      	bne.n	8006182 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	223f      	movs	r2, #63	; 0x3f
 80061be:	409a      	lsls	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d004      	beq.n	80061fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e00c      	b.n	8006216 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2205      	movs	r2, #5
 8006200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800623a:	2300      	movs	r3, #0
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	e159      	b.n	80064f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006240:	2201      	movs	r2, #1
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4013      	ands	r3, r2
 8006252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	429a      	cmp	r2, r3
 800625a:	f040 8148 	bne.w	80064ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	2b01      	cmp	r3, #1
 8006268:	d005      	beq.n	8006276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006272:	2b02      	cmp	r3, #2
 8006274:	d130      	bne.n	80062d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	2203      	movs	r2, #3
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	4013      	ands	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4313      	orrs	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062ac:	2201      	movs	r2, #1
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	43db      	mvns	r3, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4013      	ands	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 0201 	and.w	r2, r3, #1
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d017      	beq.n	8006314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	2203      	movs	r2, #3
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	43db      	mvns	r3, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4013      	ands	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4313      	orrs	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d123      	bne.n	8006368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	08da      	lsrs	r2, r3, #3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3208      	adds	r2, #8
 8006328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	220f      	movs	r2, #15
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	08da      	lsrs	r2, r3, #3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3208      	adds	r2, #8
 8006362:	69b9      	ldr	r1, [r7, #24]
 8006364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	2203      	movs	r2, #3
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	43db      	mvns	r3, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 0203 	and.w	r2, r3, #3
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a2 	beq.w	80064ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	4b57      	ldr	r3, [pc, #348]	; (800650c <HAL_GPIO_Init+0x2e8>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	4a56      	ldr	r2, [pc, #344]	; (800650c <HAL_GPIO_Init+0x2e8>)
 80063b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063b8:	6453      	str	r3, [r2, #68]	; 0x44
 80063ba:	4b54      	ldr	r3, [pc, #336]	; (800650c <HAL_GPIO_Init+0x2e8>)
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063c6:	4a52      	ldr	r2, [pc, #328]	; (8006510 <HAL_GPIO_Init+0x2ec>)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	3302      	adds	r3, #2
 80063ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	220f      	movs	r2, #15
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a49      	ldr	r2, [pc, #292]	; (8006514 <HAL_GPIO_Init+0x2f0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d019      	beq.n	8006426 <HAL_GPIO_Init+0x202>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a48      	ldr	r2, [pc, #288]	; (8006518 <HAL_GPIO_Init+0x2f4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_GPIO_Init+0x1fe>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a47      	ldr	r2, [pc, #284]	; (800651c <HAL_GPIO_Init+0x2f8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00d      	beq.n	800641e <HAL_GPIO_Init+0x1fa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a46      	ldr	r2, [pc, #280]	; (8006520 <HAL_GPIO_Init+0x2fc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d007      	beq.n	800641a <HAL_GPIO_Init+0x1f6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a45      	ldr	r2, [pc, #276]	; (8006524 <HAL_GPIO_Init+0x300>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d101      	bne.n	8006416 <HAL_GPIO_Init+0x1f2>
 8006412:	2304      	movs	r3, #4
 8006414:	e008      	b.n	8006428 <HAL_GPIO_Init+0x204>
 8006416:	2307      	movs	r3, #7
 8006418:	e006      	b.n	8006428 <HAL_GPIO_Init+0x204>
 800641a:	2303      	movs	r3, #3
 800641c:	e004      	b.n	8006428 <HAL_GPIO_Init+0x204>
 800641e:	2302      	movs	r3, #2
 8006420:	e002      	b.n	8006428 <HAL_GPIO_Init+0x204>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <HAL_GPIO_Init+0x204>
 8006426:	2300      	movs	r3, #0
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	f002 0203 	and.w	r2, r2, #3
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	4093      	lsls	r3, r2
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4313      	orrs	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006438:	4935      	ldr	r1, [pc, #212]	; (8006510 <HAL_GPIO_Init+0x2ec>)
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	089b      	lsrs	r3, r3, #2
 800643e:	3302      	adds	r3, #2
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006446:	4b38      	ldr	r3, [pc, #224]	; (8006528 <HAL_GPIO_Init+0x304>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	43db      	mvns	r3, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4013      	ands	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800646a:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <HAL_GPIO_Init+0x304>)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006470:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <HAL_GPIO_Init+0x304>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	43db      	mvns	r3, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4013      	ands	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006494:	4a24      	ldr	r2, [pc, #144]	; (8006528 <HAL_GPIO_Init+0x304>)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800649a:	4b23      	ldr	r3, [pc, #140]	; (8006528 <HAL_GPIO_Init+0x304>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	43db      	mvns	r3, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4013      	ands	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064be:	4a1a      	ldr	r2, [pc, #104]	; (8006528 <HAL_GPIO_Init+0x304>)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064c4:	4b18      	ldr	r3, [pc, #96]	; (8006528 <HAL_GPIO_Init+0x304>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	43db      	mvns	r3, r3
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4013      	ands	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064e8:	4a0f      	ldr	r2, [pc, #60]	; (8006528 <HAL_GPIO_Init+0x304>)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	3301      	adds	r3, #1
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	f67f aea2 	bls.w	8006240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	3724      	adds	r7, #36	; 0x24
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40023800 	.word	0x40023800
 8006510:	40013800 	.word	0x40013800
 8006514:	40020000 	.word	0x40020000
 8006518:	40020400 	.word	0x40020400
 800651c:	40020800 	.word	0x40020800
 8006520:	40020c00 	.word	0x40020c00
 8006524:	40021000 	.word	0x40021000
 8006528:	40013c00 	.word	0x40013c00

0800652c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e0bb      	b.n	80066c0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006548:	2201      	movs	r2, #1
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4013      	ands	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	429a      	cmp	r2, r3
 8006560:	f040 80ab 	bne.w	80066ba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006564:	4a5c      	ldr	r2, [pc, #368]	; (80066d8 <HAL_GPIO_DeInit+0x1ac>)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	089b      	lsrs	r3, r3, #2
 800656a:	3302      	adds	r3, #2
 800656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006570:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	220f      	movs	r2, #15
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a54      	ldr	r2, [pc, #336]	; (80066dc <HAL_GPIO_DeInit+0x1b0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d019      	beq.n	80065c2 <HAL_GPIO_DeInit+0x96>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a53      	ldr	r2, [pc, #332]	; (80066e0 <HAL_GPIO_DeInit+0x1b4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_GPIO_DeInit+0x92>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a52      	ldr	r2, [pc, #328]	; (80066e4 <HAL_GPIO_DeInit+0x1b8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00d      	beq.n	80065ba <HAL_GPIO_DeInit+0x8e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a51      	ldr	r2, [pc, #324]	; (80066e8 <HAL_GPIO_DeInit+0x1bc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <HAL_GPIO_DeInit+0x8a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a50      	ldr	r2, [pc, #320]	; (80066ec <HAL_GPIO_DeInit+0x1c0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <HAL_GPIO_DeInit+0x86>
 80065ae:	2304      	movs	r3, #4
 80065b0:	e008      	b.n	80065c4 <HAL_GPIO_DeInit+0x98>
 80065b2:	2307      	movs	r3, #7
 80065b4:	e006      	b.n	80065c4 <HAL_GPIO_DeInit+0x98>
 80065b6:	2303      	movs	r3, #3
 80065b8:	e004      	b.n	80065c4 <HAL_GPIO_DeInit+0x98>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e002      	b.n	80065c4 <HAL_GPIO_DeInit+0x98>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <HAL_GPIO_DeInit+0x98>
 80065c2:	2300      	movs	r3, #0
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	f002 0203 	and.w	r2, r2, #3
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	4093      	lsls	r3, r2
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d132      	bne.n	800663a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065d4:	4b46      	ldr	r3, [pc, #280]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	43db      	mvns	r3, r3
 80065dc:	4944      	ldr	r1, [pc, #272]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 80065de:	4013      	ands	r3, r2
 80065e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065e2:	4b43      	ldr	r3, [pc, #268]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	4941      	ldr	r1, [pc, #260]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065f0:	4b3f      	ldr	r3, [pc, #252]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	43db      	mvns	r3, r3
 80065f8:	493d      	ldr	r1, [pc, #244]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065fe:	4b3c      	ldr	r3, [pc, #240]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	43db      	mvns	r3, r3
 8006606:	493a      	ldr	r1, [pc, #232]	; (80066f0 <HAL_GPIO_DeInit+0x1c4>)
 8006608:	4013      	ands	r3, r2
 800660a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	220f      	movs	r2, #15
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800661c:	4a2e      	ldr	r2, [pc, #184]	; (80066d8 <HAL_GPIO_DeInit+0x1ac>)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	089b      	lsrs	r3, r3, #2
 8006622:	3302      	adds	r3, #2
 8006624:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	43da      	mvns	r2, r3
 800662c:	482a      	ldr	r0, [pc, #168]	; (80066d8 <HAL_GPIO_DeInit+0x1ac>)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	089b      	lsrs	r3, r3, #2
 8006632:	400a      	ands	r2, r1
 8006634:	3302      	adds	r3, #2
 8006636:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	2103      	movs	r1, #3
 8006644:	fa01 f303 	lsl.w	r3, r1, r3
 8006648:	43db      	mvns	r3, r3
 800664a:	401a      	ands	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	08da      	lsrs	r2, r3, #3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3208      	adds	r2, #8
 8006658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	220f      	movs	r2, #15
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	08d2      	lsrs	r2, r2, #3
 8006670:	4019      	ands	r1, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3208      	adds	r2, #8
 8006676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	2103      	movs	r1, #3
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	401a      	ands	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	2101      	movs	r1, #1
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	401a      	ands	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	2103      	movs	r1, #3
 80066ae:	fa01 f303 	lsl.w	r3, r1, r3
 80066b2:	43db      	mvns	r3, r3
 80066b4:	401a      	ands	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	3301      	adds	r3, #1
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	f67f af40 	bls.w	8006548 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40013800 	.word	0x40013800
 80066dc:	40020000 	.word	0x40020000
 80066e0:	40020400 	.word	0x40020400
 80066e4:	40020800 	.word	0x40020800
 80066e8:	40020c00 	.word	0x40020c00
 80066ec:	40021000 	.word	0x40021000
 80066f0:	40013c00 	.word	0x40013c00

080066f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	807b      	strh	r3, [r7, #2]
 8006700:	4613      	mov	r3, r2
 8006702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006704:	787b      	ldrb	r3, [r7, #1]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800670a:	887a      	ldrh	r2, [r7, #2]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006710:	e003      	b.n	800671a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006712:	887b      	ldrh	r3, [r7, #2]
 8006714:	041a      	lsls	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	619a      	str	r2, [r3, #24]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e12b      	b.n	8006992 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f95d 	bl	8006a0e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0201 	bic.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800677a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800678a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800678c:	f001 fc36 	bl	8007ffc <HAL_RCC_GetPCLK1Freq>
 8006790:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4a81      	ldr	r2, [pc, #516]	; (800699c <HAL_I2C_Init+0x274>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d807      	bhi.n	80067ac <HAL_I2C_Init+0x84>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4a80      	ldr	r2, [pc, #512]	; (80069a0 <HAL_I2C_Init+0x278>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	bf94      	ite	ls
 80067a4:	2301      	movls	r3, #1
 80067a6:	2300      	movhi	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	e006      	b.n	80067ba <HAL_I2C_Init+0x92>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a7d      	ldr	r2, [pc, #500]	; (80069a4 <HAL_I2C_Init+0x27c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bf94      	ite	ls
 80067b4:	2301      	movls	r3, #1
 80067b6:	2300      	movhi	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0e7      	b.n	8006992 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a78      	ldr	r2, [pc, #480]	; (80069a8 <HAL_I2C_Init+0x280>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	0c9b      	lsrs	r3, r3, #18
 80067cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a6a      	ldr	r2, [pc, #424]	; (800699c <HAL_I2C_Init+0x274>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d802      	bhi.n	80067fc <HAL_I2C_Init+0xd4>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	3301      	adds	r3, #1
 80067fa:	e009      	b.n	8006810 <HAL_I2C_Init+0xe8>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	4a69      	ldr	r2, [pc, #420]	; (80069ac <HAL_I2C_Init+0x284>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	099b      	lsrs	r3, r3, #6
 800680e:	3301      	adds	r3, #1
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	430b      	orrs	r3, r1
 8006816:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006822:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	495c      	ldr	r1, [pc, #368]	; (800699c <HAL_I2C_Init+0x274>)
 800682c:	428b      	cmp	r3, r1
 800682e:	d819      	bhi.n	8006864 <HAL_I2C_Init+0x13c>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	1e59      	subs	r1, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	fbb1 f3f3 	udiv	r3, r1, r3
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006844:	400b      	ands	r3, r1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_I2C_Init+0x138>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1e59      	subs	r1, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	fbb1 f3f3 	udiv	r3, r1, r3
 8006858:	3301      	adds	r3, #1
 800685a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800685e:	e051      	b.n	8006904 <HAL_I2C_Init+0x1dc>
 8006860:	2304      	movs	r3, #4
 8006862:	e04f      	b.n	8006904 <HAL_I2C_Init+0x1dc>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d111      	bne.n	8006890 <HAL_I2C_Init+0x168>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	1e58      	subs	r0, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	440b      	add	r3, r1
 800687a:	fbb0 f3f3 	udiv	r3, r0, r3
 800687e:	3301      	adds	r3, #1
 8006880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006884:	2b00      	cmp	r3, #0
 8006886:	bf0c      	ite	eq
 8006888:	2301      	moveq	r3, #1
 800688a:	2300      	movne	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	e012      	b.n	80068b6 <HAL_I2C_Init+0x18e>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	1e58      	subs	r0, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6859      	ldr	r1, [r3, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	0099      	lsls	r1, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068a6:	3301      	adds	r3, #1
 80068a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_I2C_Init+0x196>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e022      	b.n	8006904 <HAL_I2C_Init+0x1dc>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10e      	bne.n	80068e4 <HAL_I2C_Init+0x1bc>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1e58      	subs	r0, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6859      	ldr	r1, [r3, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	440b      	add	r3, r1
 80068d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80068d8:	3301      	adds	r3, #1
 80068da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	e00f      	b.n	8006904 <HAL_I2C_Init+0x1dc>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1e58      	subs	r0, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6859      	ldr	r1, [r3, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	0099      	lsls	r1, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068fa:	3301      	adds	r3, #1
 80068fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	6809      	ldr	r1, [r1, #0]
 8006908:	4313      	orrs	r3, r2
 800690a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69da      	ldr	r2, [r3, #28]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6911      	ldr	r1, [r2, #16]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68d2      	ldr	r2, [r2, #12]
 800693e:	4311      	orrs	r1, r2
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	430b      	orrs	r3, r1
 8006946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	000186a0 	.word	0x000186a0
 80069a0:	001e847f 	.word	0x001e847f
 80069a4:	003d08ff 	.word	0x003d08ff
 80069a8:	431bde83 	.word	0x431bde83
 80069ac:	10624dd3 	.word	0x10624dd3

080069b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e021      	b.n	8006a06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2224      	movs	r2, #36	; 0x24
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f821 	bl	8006a22 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	4608      	mov	r0, r1
 8006a42:	4611      	mov	r1, r2
 8006a44:	461a      	mov	r2, r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	817b      	strh	r3, [r7, #10]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	813b      	strh	r3, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a52:	f7ff fa13 	bl	8005e7c <HAL_GetTick>
 8006a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	f040 80d9 	bne.w	8006c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	2319      	movs	r3, #25
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	496d      	ldr	r1, [pc, #436]	; (8006c24 <HAL_I2C_Mem_Write+0x1ec>)
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 fc99 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0cc      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_I2C_Mem_Write+0x56>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e0c5      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d007      	beq.n	8006ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2221      	movs	r2, #33	; 0x21
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2240      	movs	r2, #64	; 0x40
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a4d      	ldr	r2, [pc, #308]	; (8006c28 <HAL_I2C_Mem_Write+0x1f0>)
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006af6:	88f8      	ldrh	r0, [r7, #6]
 8006af8:	893a      	ldrh	r2, [r7, #8]
 8006afa:	8979      	ldrh	r1, [r7, #10]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	4603      	mov	r3, r0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fad0 	bl	80070ac <I2C_RequestMemoryWrite>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d052      	beq.n	8006bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e081      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fd1a 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d107      	bne.n	8006b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e06b      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d11b      	bne.n	8006bb8 <HAL_I2C_Mem_Write+0x180>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d017      	beq.n	8006bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1aa      	bne.n	8006b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fd06 	bl	80075d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d107      	bne.n	8006be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e016      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e000      	b.n	8006c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c18:	2302      	movs	r3, #2
  }
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	00100002 	.word	0x00100002
 8006c28:	ffff0000 	.word	0xffff0000

08006c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08c      	sub	sp, #48	; 0x30
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	817b      	strh	r3, [r7, #10]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	813b      	strh	r3, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c46:	f7ff f919 	bl	8005e7c <HAL_GetTick>
 8006c4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	f040 8208 	bne.w	800706a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	2319      	movs	r3, #25
 8006c60:	2201      	movs	r2, #1
 8006c62:	497b      	ldr	r1, [pc, #492]	; (8006e50 <HAL_I2C_Mem_Read+0x224>)
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fb9f 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e1fb      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_I2C_Mem_Read+0x56>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e1f4      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d007      	beq.n	8006ca8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2222      	movs	r2, #34	; 0x22
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2240      	movs	r2, #64	; 0x40
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a5b      	ldr	r2, [pc, #364]	; (8006e54 <HAL_I2C_Mem_Read+0x228>)
 8006ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cea:	88f8      	ldrh	r0, [r7, #6]
 8006cec:	893a      	ldrh	r2, [r7, #8]
 8006cee:	8979      	ldrh	r1, [r7, #10]
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fa6c 	bl	80071d8 <I2C_RequestMemoryRead>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e1b0      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d113      	bne.n	8006d3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d12:	2300      	movs	r3, #0
 8006d14:	623b      	str	r3, [r7, #32]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	623b      	str	r3, [r7, #32]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	e184      	b.n	8007044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d11b      	bne.n	8006d7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d52:	2300      	movs	r3, #0
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e164      	b.n	8007044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d11b      	bne.n	8006dba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da2:	2300      	movs	r3, #0
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	e144      	b.n	8007044 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dd0:	e138      	b.n	8007044 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	f200 80f1 	bhi.w	8006fbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d123      	bne.n	8006e2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fc35 	bl	8007658 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e139      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e2a:	e10b      	b.n	8007044 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d14e      	bne.n	8006ed2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4906      	ldr	r1, [pc, #24]	; (8006e58 <HAL_I2C_Mem_Read+0x22c>)
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 fab2 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e10e      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
 8006e4e:	bf00      	nop
 8006e50:	00100002 	.word	0x00100002
 8006e54:	ffff0000 	.word	0xffff0000
 8006e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ed0:	e0b8      	b.n	8007044 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4966      	ldr	r1, [pc, #408]	; (8007074 <HAL_I2C_Mem_Read+0x448>)
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fa63 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0bf      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2200      	movs	r2, #0
 8006f36:	494f      	ldr	r1, [pc, #316]	; (8007074 <HAL_I2C_Mem_Read+0x448>)
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fa35 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e091      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fbc:	e042      	b.n	8007044 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fb48 	bl	8007658 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e04c      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b04      	cmp	r3, #4
 8007010:	d118      	bne.n	8007044 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691a      	ldr	r2, [r3, #16]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007048:	2b00      	cmp	r3, #0
 800704a:	f47f aec2 	bne.w	8006dd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2220      	movs	r2, #32
 8007052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	e000      	b.n	800706c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800706a:	2302      	movs	r3, #2
  }
}
 800706c:	4618      	mov	r0, r3
 800706e:	3728      	adds	r7, #40	; 0x28
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	00010004 	.word	0x00010004

08007078 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	b2db      	uxtb	r3, r3
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	817b      	strh	r3, [r7, #10]
 80070be:	460b      	mov	r3, r1
 80070c0:	813b      	strh	r3, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	2200      	movs	r2, #0
 80070de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f960 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fc:	d103      	bne.n	8007106 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e05f      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800710a:	897b      	ldrh	r3, [r7, #10]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007118:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	6a3a      	ldr	r2, [r7, #32]
 800711e:	492d      	ldr	r1, [pc, #180]	; (80071d4 <I2C_RequestMemoryWrite+0x128>)
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f998 	bl	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e04c      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007148:	6a39      	ldr	r1, [r7, #32]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fa02 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00d      	beq.n	8007172 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	2b04      	cmp	r3, #4
 800715c:	d107      	bne.n	800716e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800716c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e02b      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d105      	bne.n	8007184 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007178:	893b      	ldrh	r3, [r7, #8]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	611a      	str	r2, [r3, #16]
 8007182:	e021      	b.n	80071c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007184:	893b      	ldrh	r3, [r7, #8]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	b29b      	uxth	r3, r3
 800718a:	b2da      	uxtb	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	6a39      	ldr	r1, [r7, #32]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f9dc 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d107      	bne.n	80071ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e005      	b.n	80071ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071be:	893b      	ldrh	r3, [r7, #8]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	00010002 	.word	0x00010002

080071d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	4608      	mov	r0, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	817b      	strh	r3, [r7, #10]
 80071ea:	460b      	mov	r3, r1
 80071ec:	813b      	strh	r3, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007200:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007210:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	2200      	movs	r2, #0
 800721a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f8c2 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007238:	d103      	bne.n	8007242 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007240:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e0aa      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007246:	897b      	ldrh	r3, [r7, #10]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007254:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	4952      	ldr	r1, [pc, #328]	; (80073a4 <I2C_RequestMemoryRead+0x1cc>)
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f8fa 	bl	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e097      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007284:	6a39      	ldr	r1, [r7, #32]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f964 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00d      	beq.n	80072ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	2b04      	cmp	r3, #4
 8007298:	d107      	bne.n	80072aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e076      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d105      	bne.n	80072c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072b4:	893b      	ldrh	r3, [r7, #8]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	611a      	str	r2, [r3, #16]
 80072be:	e021      	b.n	8007304 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072c0:	893b      	ldrh	r3, [r7, #8]
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d0:	6a39      	ldr	r1, [r7, #32]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f93e 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d107      	bne.n	80072f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e050      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072fa:	893b      	ldrh	r3, [r7, #8]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007306:	6a39      	ldr	r1, [r7, #32]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f923 	bl	8007554 <I2C_WaitOnTXEFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00d      	beq.n	8007330 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	2b04      	cmp	r3, #4
 800731a:	d107      	bne.n	800732c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e035      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800733e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2200      	movs	r2, #0
 8007348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f82b 	bl	80073a8 <I2C_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007366:	d103      	bne.n	8007370 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800736e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e013      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007374:	897b      	ldrh	r3, [r7, #10]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	4906      	ldr	r1, [pc, #24]	; (80073a4 <I2C_RequestMemoryRead+0x1cc>)
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f863 	bl	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	00010002 	.word	0x00010002

080073a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073b8:	e025      	b.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d021      	beq.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c2:	f7fe fd5b 	bl	8005e7c <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d302      	bcc.n	80073d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d116      	bne.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f043 0220 	orr.w	r2, r3, #32
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e023      	b.n	800744e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10d      	bne.n	800742c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	43da      	mvns	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4013      	ands	r3, r2
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	bf0c      	ite	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	2300      	movne	r3, #0
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	e00c      	b.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	43da      	mvns	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d0b6      	beq.n	80073ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007464:	e051      	b.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007474:	d123      	bne.n	80074be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007484:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800748e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0204 	orr.w	r2, r3, #4
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e046      	b.n	800754c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d021      	beq.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c6:	f7fe fcd9 	bl	8005e7c <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d302      	bcc.n	80074dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d116      	bne.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e020      	b.n	800754c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	0c1b      	lsrs	r3, r3, #16
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10c      	bne.n	800752e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	43da      	mvns	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4013      	ands	r3, r2
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	e00b      	b.n	8007546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	43da      	mvns	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	4013      	ands	r3, r2
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d18d      	bne.n	8007466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007560:	e02d      	b.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f8ce 	bl	8007704 <I2C_IsAcknowledgeFailed>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e02d      	b.n	80075ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007578:	d021      	beq.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757a:	f7fe fc7f 	bl	8005e7c <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	429a      	cmp	r2, r3
 8007588:	d302      	bcc.n	8007590 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d116      	bne.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e007      	b.n	80075ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d1ca      	bne.n	8007562 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075e2:	e02d      	b.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f88d 	bl	8007704 <I2C_IsAcknowledgeFailed>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e02d      	b.n	8007650 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d021      	beq.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fc:	f7fe fc3e 	bl	8005e7c <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d116      	bne.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	f043 0220 	orr.w	r2, r3, #32
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e007      	b.n	8007650 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	2b04      	cmp	r3, #4
 800764c:	d1ca      	bne.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007664:	e042      	b.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b10      	cmp	r3, #16
 8007672:	d119      	bne.n	80076a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0210 	mvn.w	r2, #16
 800767c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e029      	b.n	80076fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a8:	f7fe fbe8 	bl	8005e7c <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d302      	bcc.n	80076be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d116      	bne.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e007      	b.n	80076fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d1b5      	bne.n	8007666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771a:	d11b      	bne.n	8007754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	f043 0204 	orr.w	r2, r3, #4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e000      	b.n	8007756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e264      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d075      	beq.n	800786e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007782:	4ba3      	ldr	r3, [pc, #652]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d00c      	beq.n	80077a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800778e:	4ba0      	ldr	r3, [pc, #640]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007796:	2b08      	cmp	r3, #8
 8007798:	d112      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800779a:	4b9d      	ldr	r3, [pc, #628]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077a6:	d10b      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a8:	4b99      	ldr	r3, [pc, #612]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d05b      	beq.n	800786c <HAL_RCC_OscConfig+0x108>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d157      	bne.n	800786c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e23f      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c8:	d106      	bne.n	80077d8 <HAL_RCC_OscConfig+0x74>
 80077ca:	4b91      	ldr	r3, [pc, #580]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a90      	ldr	r2, [pc, #576]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e01d      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x98>
 80077e2:	4b8b      	ldr	r3, [pc, #556]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a8a      	ldr	r2, [pc, #552]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4b88      	ldr	r3, [pc, #544]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a87      	ldr	r2, [pc, #540]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0xb0>
 80077fc:	4b84      	ldr	r3, [pc, #528]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a83      	ldr	r2, [pc, #524]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	4b81      	ldr	r3, [pc, #516]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a80      	ldr	r2, [pc, #512]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 800780e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800781c:	f7fe fb2e 	bl	8005e7c <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007824:	f7fe fb2a 	bl	8005e7c <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	; 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e204      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007836:	4b76      	ldr	r3, [pc, #472]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0f0      	beq.n	8007824 <HAL_RCC_OscConfig+0xc0>
 8007842:	e014      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007844:	f7fe fb1a 	bl	8005e7c <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800784c:	f7fe fb16 	bl	8005e7c <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b64      	cmp	r3, #100	; 0x64
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e1f0      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800785e:	4b6c      	ldr	r3, [pc, #432]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0xe8>
 800786a:	e000      	b.n	800786e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d063      	beq.n	8007942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787a:	4b65      	ldr	r3, [pc, #404]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 030c 	and.w	r3, r3, #12
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007886:	4b62      	ldr	r3, [pc, #392]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800788e:	2b08      	cmp	r3, #8
 8007890:	d11c      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007892:	4b5f      	ldr	r3, [pc, #380]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d116      	bne.n	80078cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800789e:	4b5c      	ldr	r3, [pc, #368]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d001      	beq.n	80078b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e1c4      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b6:	4b56      	ldr	r3, [pc, #344]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4952      	ldr	r1, [pc, #328]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ca:	e03a      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d020      	beq.n	8007916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d4:	4b4f      	ldr	r3, [pc, #316]	; (8007a14 <HAL_RCC_OscConfig+0x2b0>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078da:	f7fe facf 	bl	8005e7c <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e2:	f7fe facb 	bl	8005e7c <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e1a5      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f4:	4b46      	ldr	r3, [pc, #280]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007900:	4b43      	ldr	r3, [pc, #268]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4940      	ldr	r1, [pc, #256]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007910:	4313      	orrs	r3, r2
 8007912:	600b      	str	r3, [r1, #0]
 8007914:	e015      	b.n	8007942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007916:	4b3f      	ldr	r3, [pc, #252]	; (8007a14 <HAL_RCC_OscConfig+0x2b0>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fe faae 	bl	8005e7c <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007924:	f7fe faaa 	bl	8005e7c <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e184      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007936:	4b36      	ldr	r3, [pc, #216]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d030      	beq.n	80079b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d016      	beq.n	8007984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007956:	4b30      	ldr	r3, [pc, #192]	; (8007a18 <HAL_RCC_OscConfig+0x2b4>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795c:	f7fe fa8e 	bl	8005e7c <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007964:	f7fe fa8a 	bl	8005e7c <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e164      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007976:	4b26      	ldr	r3, [pc, #152]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 8007978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x200>
 8007982:	e015      	b.n	80079b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <HAL_RCC_OscConfig+0x2b4>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800798a:	f7fe fa77 	bl	8005e7c <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007992:	f7fe fa73 	bl	8005e7c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e14d      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80079a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f0      	bne.n	8007992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80a0 	beq.w	8007afe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10f      	bne.n	80079ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	4b0f      	ldr	r3, [pc, #60]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	4a0e      	ldr	r2, [pc, #56]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80079d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079dc:	6413      	str	r3, [r2, #64]	; 0x40
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <HAL_RCC_OscConfig+0x2ac>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e6:	60bb      	str	r3, [r7, #8]
 80079e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ea:	2301      	movs	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ee:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <HAL_RCC_OscConfig+0x2b8>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d121      	bne.n	8007a3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079fa:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <HAL_RCC_OscConfig+0x2b8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <HAL_RCC_OscConfig+0x2b8>)
 8007a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a06:	f7fe fa39 	bl	8005e7c <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a0c:	e011      	b.n	8007a32 <HAL_RCC_OscConfig+0x2ce>
 8007a0e:	bf00      	nop
 8007a10:	40023800 	.word	0x40023800
 8007a14:	42470000 	.word	0x42470000
 8007a18:	42470e80 	.word	0x42470e80
 8007a1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a20:	f7fe fa2c 	bl	8005e7c <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e106      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a32:	4b85      	ldr	r3, [pc, #532]	; (8007c48 <HAL_RCC_OscConfig+0x4e4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d106      	bne.n	8007a54 <HAL_RCC_OscConfig+0x2f0>
 8007a46:	4b81      	ldr	r3, [pc, #516]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4a:	4a80      	ldr	r2, [pc, #512]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	6713      	str	r3, [r2, #112]	; 0x70
 8007a52:	e01c      	b.n	8007a8e <HAL_RCC_OscConfig+0x32a>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	d10c      	bne.n	8007a76 <HAL_RCC_OscConfig+0x312>
 8007a5c:	4b7b      	ldr	r3, [pc, #492]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a60:	4a7a      	ldr	r2, [pc, #488]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a62:	f043 0304 	orr.w	r3, r3, #4
 8007a66:	6713      	str	r3, [r2, #112]	; 0x70
 8007a68:	4b78      	ldr	r3, [pc, #480]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6c:	4a77      	ldr	r2, [pc, #476]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	6713      	str	r3, [r2, #112]	; 0x70
 8007a74:	e00b      	b.n	8007a8e <HAL_RCC_OscConfig+0x32a>
 8007a76:	4b75      	ldr	r3, [pc, #468]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7a:	4a74      	ldr	r2, [pc, #464]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	6713      	str	r3, [r2, #112]	; 0x70
 8007a82:	4b72      	ldr	r3, [pc, #456]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a86:	4a71      	ldr	r2, [pc, #452]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007a88:	f023 0304 	bic.w	r3, r3, #4
 8007a8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d015      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a96:	f7fe f9f1 	bl	8005e7c <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a9c:	e00a      	b.n	8007ab4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a9e:	f7fe f9ed 	bl	8005e7c <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e0c5      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab4:	4b65      	ldr	r3, [pc, #404]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0ee      	beq.n	8007a9e <HAL_RCC_OscConfig+0x33a>
 8007ac0:	e014      	b.n	8007aec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ac2:	f7fe f9db 	bl	8005e7c <HAL_GetTick>
 8007ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ac8:	e00a      	b.n	8007ae0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aca:	f7fe f9d7 	bl	8005e7c <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d901      	bls.n	8007ae0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e0af      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ae0:	4b5a      	ldr	r3, [pc, #360]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1ee      	bne.n	8007aca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d105      	bne.n	8007afe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af2:	4b56      	ldr	r3, [pc, #344]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	4a55      	ldr	r2, [pc, #340]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007afc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 809b 	beq.w	8007c3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b08:	4b50      	ldr	r3, [pc, #320]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 030c 	and.w	r3, r3, #12
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d05c      	beq.n	8007bce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d141      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1c:	4b4c      	ldr	r3, [pc, #304]	; (8007c50 <HAL_RCC_OscConfig+0x4ec>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b22:	f7fe f9ab 	bl	8005e7c <HAL_GetTick>
 8007b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b28:	e008      	b.n	8007b3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b2a:	f7fe f9a7 	bl	8005e7c <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e081      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3c:	4b43      	ldr	r3, [pc, #268]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	019b      	lsls	r3, r3, #6
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	3b01      	subs	r3, #1
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	061b      	lsls	r3, r3, #24
 8007b6c:	4937      	ldr	r1, [pc, #220]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b72:	4b37      	ldr	r3, [pc, #220]	; (8007c50 <HAL_RCC_OscConfig+0x4ec>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b78:	f7fe f980 	bl	8005e7c <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7e:	e008      	b.n	8007b92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b80:	f7fe f97c 	bl	8005e7c <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e056      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b92:	4b2e      	ldr	r3, [pc, #184]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0f0      	beq.n	8007b80 <HAL_RCC_OscConfig+0x41c>
 8007b9e:	e04e      	b.n	8007c3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ba0:	4b2b      	ldr	r3, [pc, #172]	; (8007c50 <HAL_RCC_OscConfig+0x4ec>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba6:	f7fe f969 	bl	8005e7c <HAL_GetTick>
 8007baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bac:	e008      	b.n	8007bc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bae:	f7fe f965 	bl	8005e7c <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e03f      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bc0:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f0      	bne.n	8007bae <HAL_RCC_OscConfig+0x44a>
 8007bcc:	e037      	b.n	8007c3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d101      	bne.n	8007bda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e032      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bda:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <HAL_RCC_OscConfig+0x4e8>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d028      	beq.n	8007c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d121      	bne.n	8007c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d11a      	bne.n	8007c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d111      	bne.n	8007c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	085b      	lsrs	r3, r3, #1
 8007c22:	3b01      	subs	r3, #1
 8007c24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d107      	bne.n	8007c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d001      	beq.n	8007c3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	40007000 	.word	0x40007000
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	42470060 	.word	0x42470060

08007c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e0cc      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c68:	4b68      	ldr	r3, [pc, #416]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d90c      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c76:	4b65      	ldr	r3, [pc, #404]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b63      	ldr	r3, [pc, #396]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0b8      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d020      	beq.n	8007cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ca8:	4b59      	ldr	r3, [pc, #356]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	4a58      	ldr	r2, [pc, #352]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cc0:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	4a52      	ldr	r2, [pc, #328]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ccc:	4b50      	ldr	r3, [pc, #320]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	494d      	ldr	r1, [pc, #308]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d044      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d119      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e07f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d003      	beq.n	8007d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d107      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d12:	4b3f      	ldr	r3, [pc, #252]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e06f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d22:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e067      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d32:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f023 0203 	bic.w	r2, r3, #3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4934      	ldr	r1, [pc, #208]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d44:	f7fe f89a 	bl	8005e7c <HAL_GetTick>
 8007d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d4c:	f7fe f896 	bl	8005e7c <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e04f      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 020c 	and.w	r2, r3, #12
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d1eb      	bne.n	8007d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d74:	4b25      	ldr	r3, [pc, #148]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d20c      	bcs.n	8007d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d82:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d8a:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <HAL_RCC_ClockConfig+0x1b8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e032      	b.n	8007e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007da8:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4916      	ldr	r1, [pc, #88]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dc6:	4b12      	ldr	r3, [pc, #72]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	490e      	ldr	r1, [pc, #56]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dda:	f000 f821 	bl	8007e20 <HAL_RCC_GetSysClockFreq>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	490a      	ldr	r1, [pc, #40]	; (8007e14 <HAL_RCC_ClockConfig+0x1c0>)
 8007dec:	5ccb      	ldrb	r3, [r1, r3]
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <HAL_RCC_ClockConfig+0x1c4>)
 8007df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <HAL_RCC_ClockConfig+0x1c8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fd fffa 	bl	8005df4 <HAL_InitTick>

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40023c00 	.word	0x40023c00
 8007e10:	40023800 	.word	0x40023800
 8007e14:	0800a54c 	.word	0x0800a54c
 8007e18:	20000000 	.word	0x20000000
 8007e1c:	200000d8 	.word	0x200000d8

08007e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	2300      	movs	r3, #0
 8007e32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e38:	4b67      	ldr	r3, [pc, #412]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 030c 	and.w	r3, r3, #12
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d00d      	beq.n	8007e60 <HAL_RCC_GetSysClockFreq+0x40>
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	f200 80bd 	bhi.w	8007fc4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_RCC_GetSysClockFreq+0x34>
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d003      	beq.n	8007e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e52:	e0b7      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e54:	4b61      	ldr	r3, [pc, #388]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e56:	60bb      	str	r3, [r7, #8]
       break;
 8007e58:	e0b7      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e5a:	4b61      	ldr	r3, [pc, #388]	; (8007fe0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e5c:	60bb      	str	r3, [r7, #8]
      break;
 8007e5e:	e0b4      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e60:	4b5d      	ldr	r3, [pc, #372]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e6a:	4b5b      	ldr	r3, [pc, #364]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d04d      	beq.n	8007f12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e76:	4b58      	ldr	r3, [pc, #352]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	099b      	lsrs	r3, r3, #6
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e86:	f04f 0100 	mov.w	r1, #0
 8007e8a:	ea02 0800 	and.w	r8, r2, r0
 8007e8e:	ea03 0901 	and.w	r9, r3, r1
 8007e92:	4640      	mov	r0, r8
 8007e94:	4649      	mov	r1, r9
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	014b      	lsls	r3, r1, #5
 8007ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ea4:	0142      	lsls	r2, r0, #5
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	ebb0 0008 	subs.w	r0, r0, r8
 8007eae:	eb61 0109 	sbc.w	r1, r1, r9
 8007eb2:	f04f 0200 	mov.w	r2, #0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	018b      	lsls	r3, r1, #6
 8007ebc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ec0:	0182      	lsls	r2, r0, #6
 8007ec2:	1a12      	subs	r2, r2, r0
 8007ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8007ec8:	f04f 0000 	mov.w	r0, #0
 8007ecc:	f04f 0100 	mov.w	r1, #0
 8007ed0:	00d9      	lsls	r1, r3, #3
 8007ed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ed6:	00d0      	lsls	r0, r2, #3
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	eb12 0208 	adds.w	r2, r2, r8
 8007ee0:	eb43 0309 	adc.w	r3, r3, r9
 8007ee4:	f04f 0000 	mov.w	r0, #0
 8007ee8:	f04f 0100 	mov.w	r1, #0
 8007eec:	0259      	lsls	r1, r3, #9
 8007eee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007ef2:	0250      	lsls	r0, r2, #9
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4619      	mov	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	f7f8 f9bc 	bl	8000280 <__aeabi_uldivmod>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e04a      	b.n	8007fa8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f12:	4b31      	ldr	r3, [pc, #196]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	099b      	lsrs	r3, r3, #6
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f04f 0300 	mov.w	r3, #0
 8007f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f22:	f04f 0100 	mov.w	r1, #0
 8007f26:	ea02 0400 	and.w	r4, r2, r0
 8007f2a:	ea03 0501 	and.w	r5, r3, r1
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	014b      	lsls	r3, r1, #5
 8007f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f40:	0142      	lsls	r2, r0, #5
 8007f42:	4610      	mov	r0, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	1b00      	subs	r0, r0, r4
 8007f48:	eb61 0105 	sbc.w	r1, r1, r5
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	018b      	lsls	r3, r1, #6
 8007f56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f5a:	0182      	lsls	r2, r0, #6
 8007f5c:	1a12      	subs	r2, r2, r0
 8007f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f04f 0100 	mov.w	r1, #0
 8007f6a:	00d9      	lsls	r1, r3, #3
 8007f6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f70:	00d0      	lsls	r0, r2, #3
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	1912      	adds	r2, r2, r4
 8007f78:	eb45 0303 	adc.w	r3, r5, r3
 8007f7c:	f04f 0000 	mov.w	r0, #0
 8007f80:	f04f 0100 	mov.w	r1, #0
 8007f84:	0299      	lsls	r1, r3, #10
 8007f86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f8a:	0290      	lsls	r0, r2, #10
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4610      	mov	r0, r2
 8007f92:	4619      	mov	r1, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	f7f8 f970 	bl	8000280 <__aeabi_uldivmod>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	0c1b      	lsrs	r3, r3, #16
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc0:	60bb      	str	r3, [r7, #8]
      break;
 8007fc2:	e002      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007fc6:	60bb      	str	r3, [r7, #8]
      break;
 8007fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fca:	68bb      	ldr	r3, [r7, #8]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	00f42400 	.word	0x00f42400
 8007fe0:	007a1200 	.word	0x007a1200

08007fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fe8:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fea:	681b      	ldr	r3, [r3, #0]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000000 	.word	0x20000000

08007ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008000:	f7ff fff0 	bl	8007fe4 <HAL_RCC_GetHCLKFreq>
 8008004:	4602      	mov	r2, r0
 8008006:	4b05      	ldr	r3, [pc, #20]	; (800801c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	0a9b      	lsrs	r3, r3, #10
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	4903      	ldr	r1, [pc, #12]	; (8008020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008012:	5ccb      	ldrb	r3, [r1, r3]
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008018:	4618      	mov	r0, r3
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40023800 	.word	0x40023800
 8008020:	0800a55c 	.word	0x0800a55c

08008024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008028:	f7ff ffdc 	bl	8007fe4 <HAL_RCC_GetHCLKFreq>
 800802c:	4602      	mov	r2, r0
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	0b5b      	lsrs	r3, r3, #13
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	4903      	ldr	r1, [pc, #12]	; (8008048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800803a:	5ccb      	ldrb	r3, [r1, r3]
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008040:	4618      	mov	r0, r3
 8008042:	bd80      	pop	{r7, pc}
 8008044:	40023800 	.word	0x40023800
 8008048:	0800a55c 	.word	0x0800a55c

0800804c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e041      	b.n	80080e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7f8 fd48 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f000 fbd8 	bl	8008840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e041      	b.n	8008180 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f839 	bl	8008188 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3304      	adds	r3, #4
 8008126:	4619      	mov	r1, r3
 8008128:	4610      	mov	r0, r2
 800812a:	f000 fb89 	bl	8008840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d109      	bne.n	80081c4 <HAL_TIM_OC_Start_IT+0x28>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	bf14      	ite	ne
 80081bc:	2301      	movne	r3, #1
 80081be:	2300      	moveq	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	e022      	b.n	800820a <HAL_TIM_OC_Start_IT+0x6e>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d109      	bne.n	80081de <HAL_TIM_OC_Start_IT+0x42>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	bf14      	ite	ne
 80081d6:	2301      	movne	r3, #1
 80081d8:	2300      	moveq	r3, #0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	e015      	b.n	800820a <HAL_TIM_OC_Start_IT+0x6e>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d109      	bne.n	80081f8 <HAL_TIM_OC_Start_IT+0x5c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	bf14      	ite	ne
 80081f0:	2301      	movne	r3, #1
 80081f2:	2300      	moveq	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	e008      	b.n	800820a <HAL_TIM_OC_Start_IT+0x6e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b01      	cmp	r3, #1
 8008202:	bf14      	ite	ne
 8008204:	2301      	movne	r3, #1
 8008206:	2300      	moveq	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e0b3      	b.n	800837a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_TIM_OC_Start_IT+0x86>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008220:	e013      	b.n	800824a <HAL_TIM_OC_Start_IT+0xae>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d104      	bne.n	8008232 <HAL_TIM_OC_Start_IT+0x96>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008230:	e00b      	b.n	800824a <HAL_TIM_OC_Start_IT+0xae>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d104      	bne.n	8008242 <HAL_TIM_OC_Start_IT+0xa6>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008240:	e003      	b.n	800824a <HAL_TIM_OC_Start_IT+0xae>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b0c      	cmp	r3, #12
 800824e:	d841      	bhi.n	80082d4 <HAL_TIM_OC_Start_IT+0x138>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <HAL_TIM_OC_Start_IT+0xbc>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	0800828d 	.word	0x0800828d
 800825c:	080082d5 	.word	0x080082d5
 8008260:	080082d5 	.word	0x080082d5
 8008264:	080082d5 	.word	0x080082d5
 8008268:	0800829f 	.word	0x0800829f
 800826c:	080082d5 	.word	0x080082d5
 8008270:	080082d5 	.word	0x080082d5
 8008274:	080082d5 	.word	0x080082d5
 8008278:	080082b1 	.word	0x080082b1
 800827c:	080082d5 	.word	0x080082d5
 8008280:	080082d5 	.word	0x080082d5
 8008284:	080082d5 	.word	0x080082d5
 8008288:	080082c3 	.word	0x080082c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0202 	orr.w	r2, r2, #2
 800829a:	60da      	str	r2, [r3, #12]
      break;
 800829c:	e01d      	b.n	80082da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 0204 	orr.w	r2, r2, #4
 80082ac:	60da      	str	r2, [r3, #12]
      break;
 80082ae:	e014      	b.n	80082da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0208 	orr.w	r2, r2, #8
 80082be:	60da      	str	r2, [r3, #12]
      break;
 80082c0:	e00b      	b.n	80082da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0210 	orr.w	r2, r2, #16
 80082d0:	60da      	str	r2, [r3, #12]
      break;
 80082d2:	e002      	b.n	80082da <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d14b      	bne.n	8008378 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2201      	movs	r2, #1
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fd4f 	bl	8008d8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a24      	ldr	r2, [pc, #144]	; (8008384 <HAL_TIM_OC_Start_IT+0x1e8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d107      	bne.n	8008308 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008306:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1d      	ldr	r2, [pc, #116]	; (8008384 <HAL_TIM_OC_Start_IT+0x1e8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d018      	beq.n	8008344 <HAL_TIM_OC_Start_IT+0x1a8>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831a:	d013      	beq.n	8008344 <HAL_TIM_OC_Start_IT+0x1a8>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a19      	ldr	r2, [pc, #100]	; (8008388 <HAL_TIM_OC_Start_IT+0x1ec>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d00e      	beq.n	8008344 <HAL_TIM_OC_Start_IT+0x1a8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a18      	ldr	r2, [pc, #96]	; (800838c <HAL_TIM_OC_Start_IT+0x1f0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d009      	beq.n	8008344 <HAL_TIM_OC_Start_IT+0x1a8>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a16      	ldr	r2, [pc, #88]	; (8008390 <HAL_TIM_OC_Start_IT+0x1f4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d004      	beq.n	8008344 <HAL_TIM_OC_Start_IT+0x1a8>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a15      	ldr	r2, [pc, #84]	; (8008394 <HAL_TIM_OC_Start_IT+0x1f8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d111      	bne.n	8008368 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 0307 	and.w	r3, r3, #7
 800834e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b06      	cmp	r3, #6
 8008354:	d010      	beq.n	8008378 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0201 	orr.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008366:	e007      	b.n	8008378 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40010000 	.word	0x40010000
 8008388:	40000400 	.word	0x40000400
 800838c:	40000800 	.word	0x40000800
 8008390:	40000c00 	.word	0x40000c00
 8008394:	40014000 	.word	0x40014000

08008398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d122      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d11b      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0202 	mvn.w	r2, #2
 80083c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa11 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 80083e0:	e005      	b.n	80083ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f8 fb52 	bl	8000a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa14 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f003 0304 	and.w	r3, r3, #4
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d122      	bne.n	8008448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b04      	cmp	r3, #4
 800840e:	d11b      	bne.n	8008448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0204 	mvn.w	r2, #4
 8008418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2202      	movs	r2, #2
 800841e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f9e7 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 8008434:	e005      	b.n	8008442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7f8 fb28 	bl	8000a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f9ea 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	f003 0308 	and.w	r3, r3, #8
 8008452:	2b08      	cmp	r3, #8
 8008454:	d122      	bne.n	800849c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b08      	cmp	r3, #8
 8008462:	d11b      	bne.n	800849c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f06f 0208 	mvn.w	r2, #8
 800846c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2204      	movs	r2, #4
 8008472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f9bd 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 8008488:	e005      	b.n	8008496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7f8 fafe 	bl	8000a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f9c0 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	2b10      	cmp	r3, #16
 80084a8:	d122      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d11b      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f06f 0210 	mvn.w	r2, #16
 80084c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2208      	movs	r2, #8
 80084c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f993 	bl	8008802 <HAL_TIM_IC_CaptureCallback>
 80084dc:	e005      	b.n	80084ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7f8 fad4 	bl	8000a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f996 	bl	8008816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d10e      	bne.n	800851c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b01      	cmp	r3, #1
 800850a:	d107      	bne.n	800851c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f06f 0201 	mvn.w	r2, #1
 8008514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f969 	bl	80087ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008526:	2b80      	cmp	r3, #128	; 0x80
 8008528:	d10e      	bne.n	8008548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008534:	2b80      	cmp	r3, #128	; 0x80
 8008536:	d107      	bne.n	8008548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fcc0 	bl	8008ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008552:	2b40      	cmp	r3, #64	; 0x40
 8008554:	d10e      	bne.n	8008574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008560:	2b40      	cmp	r3, #64	; 0x40
 8008562:	d107      	bne.n	8008574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800856c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f95b 	bl	800882a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b20      	cmp	r3, #32
 8008580:	d10e      	bne.n	80085a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b20      	cmp	r3, #32
 800858e:	d107      	bne.n	80085a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0220 	mvn.w	r2, #32
 8008598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fc8a 	bl	8008eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e048      	b.n	8008658 <HAL_TIM_OC_ConfigChannel+0xb0>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b0c      	cmp	r3, #12
 80085d2:	d839      	bhi.n	8008648 <HAL_TIM_OC_ConfigChannel+0xa0>
 80085d4:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80085d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085da:	bf00      	nop
 80085dc:	08008611 	.word	0x08008611
 80085e0:	08008649 	.word	0x08008649
 80085e4:	08008649 	.word	0x08008649
 80085e8:	08008649 	.word	0x08008649
 80085ec:	0800861f 	.word	0x0800861f
 80085f0:	08008649 	.word	0x08008649
 80085f4:	08008649 	.word	0x08008649
 80085f8:	08008649 	.word	0x08008649
 80085fc:	0800862d 	.word	0x0800862d
 8008600:	08008649 	.word	0x08008649
 8008604:	08008649 	.word	0x08008649
 8008608:	08008649 	.word	0x08008649
 800860c:	0800863b 	.word	0x0800863b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f992 	bl	8008940 <TIM_OC1_SetConfig>
      break;
 800861c:	e017      	b.n	800864e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 f9f1 	bl	8008a0c <TIM_OC2_SetConfig>
      break;
 800862a:	e010      	b.n	800864e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fa56 	bl	8008ae4 <TIM_OC3_SetConfig>
      break;
 8008638:	e009      	b.n	800864e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fab9 	bl	8008bb8 <TIM_OC4_SetConfig>
      break;
 8008646:	e002      	b.n	800864e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
      break;
 800864c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_TIM_ConfigClockSource+0x1c>
 8008678:	2302      	movs	r3, #2
 800867a:	e0b4      	b.n	80087e6 <HAL_TIM_ConfigClockSource+0x186>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800869a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b4:	d03e      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0xd4>
 80086b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ba:	f200 8087 	bhi.w	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c2:	f000 8086 	beq.w	80087d2 <HAL_TIM_ConfigClockSource+0x172>
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ca:	d87f      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b70      	cmp	r3, #112	; 0x70
 80086ce:	d01a      	beq.n	8008706 <HAL_TIM_ConfigClockSource+0xa6>
 80086d0:	2b70      	cmp	r3, #112	; 0x70
 80086d2:	d87b      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086d4:	2b60      	cmp	r3, #96	; 0x60
 80086d6:	d050      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x11a>
 80086d8:	2b60      	cmp	r3, #96	; 0x60
 80086da:	d877      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086dc:	2b50      	cmp	r3, #80	; 0x50
 80086de:	d03c      	beq.n	800875a <HAL_TIM_ConfigClockSource+0xfa>
 80086e0:	2b50      	cmp	r3, #80	; 0x50
 80086e2:	d873      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086e4:	2b40      	cmp	r3, #64	; 0x40
 80086e6:	d058      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x13a>
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d86f      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086ec:	2b30      	cmp	r3, #48	; 0x30
 80086ee:	d064      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 80086f0:	2b30      	cmp	r3, #48	; 0x30
 80086f2:	d86b      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d060      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d867      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d05c      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 8008700:	2b10      	cmp	r3, #16
 8008702:	d05a      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 8008704:	e062      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	6899      	ldr	r1, [r3, #8]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f000 fb19 	bl	8008d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	609a      	str	r2, [r3, #8]
      break;
 8008732:	e04f      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6899      	ldr	r1, [r3, #8]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f000 fb02 	bl	8008d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008756:	609a      	str	r2, [r3, #8]
      break;
 8008758:	e03c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fa76 	bl	8008c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2150      	movs	r1, #80	; 0x50
 8008772:	4618      	mov	r0, r3
 8008774:	f000 facf 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008778:	e02c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	461a      	mov	r2, r3
 8008788:	f000 fa95 	bl	8008cb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2160      	movs	r1, #96	; 0x60
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fabf 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 8008798:	e01c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6859      	ldr	r1, [r3, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f000 fa56 	bl	8008c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2140      	movs	r1, #64	; 0x40
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 faaf 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 80087b8:	e00c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f000 faa6 	bl	8008d16 <TIM_ITRx_SetConfig>
      break;
 80087ca:	e003      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
      break;
 80087d0:	e000      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a34      	ldr	r2, [pc, #208]	; (8008924 <TIM_Base_SetConfig+0xe4>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00f      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885e:	d00b      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a31      	ldr	r2, [pc, #196]	; (8008928 <TIM_Base_SetConfig+0xe8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d007      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a30      	ldr	r2, [pc, #192]	; (800892c <TIM_Base_SetConfig+0xec>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_Base_SetConfig+0x38>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a2f      	ldr	r2, [pc, #188]	; (8008930 <TIM_Base_SetConfig+0xf0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d108      	bne.n	800888a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a25      	ldr	r2, [pc, #148]	; (8008924 <TIM_Base_SetConfig+0xe4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01b      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	d017      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a22      	ldr	r2, [pc, #136]	; (8008928 <TIM_Base_SetConfig+0xe8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a21      	ldr	r2, [pc, #132]	; (800892c <TIM_Base_SetConfig+0xec>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00f      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a20      	ldr	r2, [pc, #128]	; (8008930 <TIM_Base_SetConfig+0xf0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00b      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <TIM_Base_SetConfig+0xf4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d007      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a1e      	ldr	r2, [pc, #120]	; (8008938 <TIM_Base_SetConfig+0xf8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d003      	beq.n	80088ca <TIM_Base_SetConfig+0x8a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a1d      	ldr	r2, [pc, #116]	; (800893c <TIM_Base_SetConfig+0xfc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d108      	bne.n	80088dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a08      	ldr	r2, [pc, #32]	; (8008924 <TIM_Base_SetConfig+0xe4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d103      	bne.n	8008910 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	615a      	str	r2, [r3, #20]
}
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40010000 	.word	0x40010000
 8008928:	40000400 	.word	0x40000400
 800892c:	40000800 	.word	0x40000800
 8008930:	40000c00 	.word	0x40000c00
 8008934:	40014000 	.word	0x40014000
 8008938:	40014400 	.word	0x40014400
 800893c:	40014800 	.word	0x40014800

08008940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f023 0201 	bic.w	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f023 0302 	bic.w	r3, r3, #2
 8008988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a1c      	ldr	r2, [pc, #112]	; (8008a08 <TIM_OC1_SetConfig+0xc8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d10c      	bne.n	80089b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f023 0308 	bic.w	r3, r3, #8
 80089a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f023 0304 	bic.w	r3, r3, #4
 80089b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a13      	ldr	r2, [pc, #76]	; (8008a08 <TIM_OC1_SetConfig+0xc8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d111      	bne.n	80089e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4313      	orrs	r3, r2
 80089e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	621a      	str	r2, [r3, #32]
}
 80089fc:	bf00      	nop
 80089fe:	371c      	adds	r7, #28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	40010000 	.word	0x40010000

08008a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	f023 0210 	bic.w	r2, r3, #16
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f023 0320 	bic.w	r3, r3, #32
 8008a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <TIM_OC2_SetConfig+0xd4>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d10d      	bne.n	8008a88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <TIM_OC2_SetConfig+0xd4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d113      	bne.n	8008ab8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	621a      	str	r2, [r3, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40010000 	.word	0x40010000

08008ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <TIM_OC3_SetConfig+0xd0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d10d      	bne.n	8008b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a14      	ldr	r2, [pc, #80]	; (8008bb4 <TIM_OC3_SetConfig+0xd0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d113      	bne.n	8008b8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	621a      	str	r2, [r3, #32]
}
 8008ba8:	bf00      	nop
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	40010000 	.word	0x40010000

08008bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	031b      	lsls	r3, r3, #12
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a10      	ldr	r2, [pc, #64]	; (8008c54 <TIM_OC4_SetConfig+0x9c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d109      	bne.n	8008c2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	019b      	lsls	r3, r3, #6
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	621a      	str	r2, [r3, #32]
}
 8008c46:	bf00      	nop
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40010000 	.word	0x40010000

08008c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 030a 	bic.w	r3, r3, #10
 8008c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b087      	sub	sp, #28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f023 0210 	bic.w	r2, r3, #16
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	031b      	lsls	r3, r3, #12
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	621a      	str	r2, [r3, #32]
}
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	f043 0307 	orr.w	r3, r3, #7
 8008d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	609a      	str	r2, [r3, #8]
}
 8008d40:	bf00      	nop
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	021a      	lsls	r2, r3, #8
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	609a      	str	r2, [r3, #8]
}
 8008d80:	bf00      	nop
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f003 031f 	and.w	r3, r3, #31
 8008d9e:	2201      	movs	r2, #1
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1a      	ldr	r2, [r3, #32]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	43db      	mvns	r3, r3
 8008dae:	401a      	ands	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a1a      	ldr	r2, [r3, #32]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f003 031f 	and.w	r3, r3, #31
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	621a      	str	r2, [r3, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
	...

08008dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d101      	bne.n	8008df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e050      	b.n	8008e92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a1c      	ldr	r2, [pc, #112]	; (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d018      	beq.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3c:	d013      	beq.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a18      	ldr	r2, [pc, #96]	; (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00e      	beq.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a16      	ldr	r2, [pc, #88]	; (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d009      	beq.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a15      	ldr	r2, [pc, #84]	; (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d004      	beq.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a13      	ldr	r2, [pc, #76]	; (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d10c      	bne.n	8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40000400 	.word	0x40000400
 8008ea8:	40000800 	.word	0x40000800
 8008eac:	40000c00 	.word	0x40000c00
 8008eb0:	40014000 	.word	0x40014000

08008eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e03f      	b.n	8008f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7f7 fe28 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2224      	movs	r2, #36	; 0x24
 8008f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fcbf 	bl	80098a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	691a      	ldr	r2, [r3, #16]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	4613      	mov	r3, r2
 8008f82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b20      	cmp	r3, #32
 8008f8e:	d130      	bne.n	8008ff2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d002      	beq.n	8008f9c <HAL_UART_Transmit_IT+0x26>
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d101      	bne.n	8008fa0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e029      	b.n	8008ff4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_UART_Transmit_IT+0x38>
 8008faa:	2302      	movs	r3, #2
 8008fac:	e022      	b.n	8008ff4 <HAL_UART_Transmit_IT+0x7e>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	88fa      	ldrh	r2, [r7, #6]
 8008fc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	88fa      	ldrh	r2, [r7, #6]
 8008fc6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2221      	movs	r2, #33	; 0x21
 8008fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e000      	b.n	8008ff4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
  }
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b0ba      	sub	sp, #232	; 0xe8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009026:	2300      	movs	r3, #0
 8009028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800902c:	2300      	movs	r3, #0
 800902e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800903e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10f      	bne.n	8009066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <HAL_UART_IRQHandler+0x66>
 8009052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fb65 	bl	800972e <UART_Receive_IT>
      return;
 8009064:	e256      	b.n	8009514 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80de 	beq.w	800922c <HAL_UART_IRQHandler+0x22c>
 8009070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800907c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009080:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 80d1 	beq.w	800922c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800908a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <HAL_UART_IRQHandler+0xae>
 8009096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f043 0201 	orr.w	r2, r3, #1
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <HAL_UART_IRQHandler+0xd2>
 80090ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	f043 0202 	orr.w	r2, r3, #2
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <HAL_UART_IRQHandler+0xf6>
 80090de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	f043 0204 	orr.w	r2, r3, #4
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d011      	beq.n	8009126 <HAL_UART_IRQHandler+0x126>
 8009102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b00      	cmp	r3, #0
 800910c:	d105      	bne.n	800911a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800910e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d005      	beq.n	8009126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	f043 0208 	orr.w	r2, r3, #8
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 81ed 	beq.w	800950a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d008      	beq.n	800914e <HAL_UART_IRQHandler+0x14e>
 800913c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 faf0 	bl	800972e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009158:	2b40      	cmp	r3, #64	; 0x40
 800915a:	bf0c      	ite	eq
 800915c:	2301      	moveq	r3, #1
 800915e:	2300      	movne	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d103      	bne.n	800917a <HAL_UART_IRQHandler+0x17a>
 8009172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009176:	2b00      	cmp	r3, #0
 8009178:	d04f      	beq.n	800921a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f9f8 	bl	8009570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918a:	2b40      	cmp	r3, #64	; 0x40
 800918c:	d141      	bne.n	8009212 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3314      	adds	r3, #20
 8009194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3314      	adds	r3, #20
 80091b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1d9      	bne.n	800918e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d013      	beq.n	800920a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e6:	4a7d      	ldr	r2, [pc, #500]	; (80093dc <HAL_UART_IRQHandler+0x3dc>)
 80091e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fc fff5 	bl	80061de <HAL_DMA_Abort_IT>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d016      	beq.n	8009228 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009208:	e00e      	b.n	8009228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f99a 	bl	8009544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009210:	e00a      	b.n	8009228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f996 	bl	8009544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	e006      	b.n	8009228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f992 	bl	8009544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009226:	e170      	b.n	800950a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009228:	bf00      	nop
    return;
 800922a:	e16e      	b.n	800950a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	2b01      	cmp	r3, #1
 8009232:	f040 814a 	bne.w	80094ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800923a:	f003 0310 	and.w	r3, r3, #16
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 8143 	beq.w	80094ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009248:	f003 0310 	and.w	r3, r3, #16
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 813c 	beq.w	80094ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60bb      	str	r3, [r7, #8]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	60bb      	str	r3, [r7, #8]
 8009266:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009272:	2b40      	cmp	r3, #64	; 0x40
 8009274:	f040 80b4 	bne.w	80093e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 8140 	beq.w	800950e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009296:	429a      	cmp	r2, r3
 8009298:	f080 8139 	bcs.w	800950e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ae:	f000 8088 	beq.w	80093c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	330c      	adds	r3, #12
 80092b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1d9      	bne.n	80092b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3314      	adds	r3, #20
 8009304:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800930e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009310:	f023 0301 	bic.w	r3, r3, #1
 8009314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3314      	adds	r3, #20
 800931e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009322:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009326:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800932a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e1      	bne.n	80092fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3314      	adds	r3, #20
 8009340:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800934a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800934c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3314      	adds	r3, #20
 800935a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800935e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009360:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800936c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e3      	bne.n	800933a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2220      	movs	r2, #32
 8009376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	330c      	adds	r3, #12
 8009386:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009392:	f023 0310 	bic.w	r3, r3, #16
 8009396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	330c      	adds	r3, #12
 80093a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80093a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e3      	bne.n	8009380 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fc fe9e 	bl	80060fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8c0 	bl	8009558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093d8:	e099      	b.n	800950e <HAL_UART_IRQHandler+0x50e>
 80093da:	bf00      	nop
 80093dc:	08009637 	.word	0x08009637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 808b 	beq.w	8009512 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80093fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 8086 	beq.w	8009512 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800941c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	330c      	adds	r3, #12
 8009426:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800942a:	647a      	str	r2, [r7, #68]	; 0x44
 800942c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e3      	bne.n	8009406 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3314      	adds	r3, #20
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	623b      	str	r3, [r7, #32]
   return(result);
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3314      	adds	r3, #20
 800945e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009462:	633a      	str	r2, [r7, #48]	; 0x30
 8009464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e3      	bne.n	800943e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	330c      	adds	r3, #12
 800948a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	60fb      	str	r3, [r7, #12]
   return(result);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0310 	bic.w	r3, r3, #16
 800949a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	330c      	adds	r3, #12
 80094a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094a8:	61fa      	str	r2, [r7, #28]
 80094aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	69b9      	ldr	r1, [r7, #24]
 80094ae:	69fa      	ldr	r2, [r7, #28]
 80094b0:	e841 2300 	strex	r3, r2, [r1]
 80094b4:	617b      	str	r3, [r7, #20]
   return(result);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e3      	bne.n	8009484 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f848 	bl	8009558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094c8:	e023      	b.n	8009512 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <HAL_UART_IRQHandler+0x4ea>
 80094d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f8bb 	bl	800965e <UART_Transmit_IT>
    return;
 80094e8:	e014      	b.n	8009514 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00e      	beq.n	8009514 <HAL_UART_IRQHandler+0x514>
 80094f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d008      	beq.n	8009514 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f8fb 	bl	80096fe <UART_EndTransmit_IT>
    return;
 8009508:	e004      	b.n	8009514 <HAL_UART_IRQHandler+0x514>
    return;
 800950a:	bf00      	nop
 800950c:	e002      	b.n	8009514 <HAL_UART_IRQHandler+0x514>
      return;
 800950e:	bf00      	nop
 8009510:	e000      	b.n	8009514 <HAL_UART_IRQHandler+0x514>
      return;
 8009512:	bf00      	nop
  }
}
 8009514:	37e8      	adds	r7, #232	; 0xe8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop

0800951c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b095      	sub	sp, #84	; 0x54
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	330c      	adds	r3, #12
 800957e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800958e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	330c      	adds	r3, #12
 8009596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009598:	643a      	str	r2, [r7, #64]	; 0x40
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800959e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e5      	bne.n	8009578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3314      	adds	r3, #20
 80095b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	e853 3f00 	ldrex	r3, [r3]
 80095ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	f023 0301 	bic.w	r3, r3, #1
 80095c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3314      	adds	r3, #20
 80095ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d4:	e841 2300 	strex	r3, r2, [r1]
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e5      	bne.n	80095ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d119      	bne.n	800961c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	330c      	adds	r3, #12
 80095ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f023 0310 	bic.w	r3, r3, #16
 80095fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009608:	61ba      	str	r2, [r7, #24]
 800960a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6979      	ldr	r1, [r7, #20]
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	613b      	str	r3, [r7, #16]
   return(result);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2220      	movs	r2, #32
 8009620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800962a:	bf00      	nop
 800962c:	3754      	adds	r7, #84	; 0x54
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff ff77 	bl	8009544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800965e:	b480      	push	{r7}
 8009660:	b085      	sub	sp, #20
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b21      	cmp	r3, #33	; 0x21
 8009670:	d13e      	bne.n	80096f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967a:	d114      	bne.n	80096a6 <UART_Transmit_IT+0x48>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d110      	bne.n	80096a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	1c9a      	adds	r2, r3, #2
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	621a      	str	r2, [r3, #32]
 80096a4:	e008      	b.n	80096b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	1c59      	adds	r1, r3, #1
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6211      	str	r1, [r2, #32]
 80096b0:	781a      	ldrb	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4619      	mov	r1, r3
 80096c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10f      	bne.n	80096ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	e000      	b.n	80096f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096f0:	2302      	movs	r3, #2
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff fefc 	bl	800951c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b08c      	sub	sp, #48	; 0x30
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b22      	cmp	r3, #34	; 0x22
 8009740:	f040 80ab 	bne.w	800989a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800974c:	d117      	bne.n	800977e <UART_Receive_IT+0x50>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d113      	bne.n	800977e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	b29b      	uxth	r3, r3
 8009768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976c:	b29a      	uxth	r2, r3
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	1c9a      	adds	r2, r3, #2
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	629a      	str	r2, [r3, #40]	; 0x28
 800977c:	e026      	b.n	80097cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009784:	2300      	movs	r3, #0
 8009786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009790:	d007      	beq.n	80097a2 <UART_Receive_IT+0x74>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <UART_Receive_IT+0x82>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	701a      	strb	r2, [r3, #0]
 80097ae:	e008      	b.n	80097c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	4619      	mov	r1, r3
 80097da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d15a      	bne.n	8009896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0220 	bic.w	r2, r2, #32
 80097ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0201 	bic.w	r2, r2, #1
 800980e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	2b01      	cmp	r3, #1
 800981e:	d135      	bne.n	800988c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	330c      	adds	r3, #12
 800982c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	613b      	str	r3, [r7, #16]
   return(result);
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f023 0310 	bic.w	r3, r3, #16
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	330c      	adds	r3, #12
 8009844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009846:	623a      	str	r2, [r7, #32]
 8009848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	69f9      	ldr	r1, [r7, #28]
 800984c:	6a3a      	ldr	r2, [r7, #32]
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	61bb      	str	r3, [r7, #24]
   return(result);
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e5      	bne.n	8009826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0310 	and.w	r3, r3, #16
 8009864:	2b10      	cmp	r3, #16
 8009866:	d10a      	bne.n	800987e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009868:	2300      	movs	r3, #0
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff fe67 	bl	8009558 <HAL_UARTEx_RxEventCallback>
 800988a:	e002      	b.n	8009892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7ff fe4f 	bl	8009530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	e002      	b.n	800989c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e000      	b.n	800989c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800989a:	2302      	movs	r3, #2
  }
}
 800989c:	4618      	mov	r0, r3
 800989e:	3730      	adds	r7, #48	; 0x30
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	b09f      	sub	sp, #124	; 0x7c
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ba:	68d9      	ldr	r1, [r3, #12]
 80098bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	ea40 0301 	orr.w	r3, r0, r1
 80098c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	4313      	orrs	r3, r2
 80098dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80098de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098e8:	f021 010c 	bic.w	r1, r1, #12
 80098ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098f2:	430b      	orrs	r3, r1
 80098f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009902:	6999      	ldr	r1, [r3, #24]
 8009904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	ea40 0301 	orr.w	r3, r0, r1
 800990c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800990e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4bc5      	ldr	r3, [pc, #788]	; (8009c28 <UART_SetConfig+0x384>)
 8009914:	429a      	cmp	r2, r3
 8009916:	d004      	beq.n	8009922 <UART_SetConfig+0x7e>
 8009918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	4bc3      	ldr	r3, [pc, #780]	; (8009c2c <UART_SetConfig+0x388>)
 800991e:	429a      	cmp	r2, r3
 8009920:	d103      	bne.n	800992a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009922:	f7fe fb7f 	bl	8008024 <HAL_RCC_GetPCLK2Freq>
 8009926:	6778      	str	r0, [r7, #116]	; 0x74
 8009928:	e002      	b.n	8009930 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800992a:	f7fe fb67 	bl	8007ffc <HAL_RCC_GetPCLK1Freq>
 800992e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009938:	f040 80b6 	bne.w	8009aa8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800993c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800993e:	461c      	mov	r4, r3
 8009940:	f04f 0500 	mov.w	r5, #0
 8009944:	4622      	mov	r2, r4
 8009946:	462b      	mov	r3, r5
 8009948:	1891      	adds	r1, r2, r2
 800994a:	6439      	str	r1, [r7, #64]	; 0x40
 800994c:	415b      	adcs	r3, r3
 800994e:	647b      	str	r3, [r7, #68]	; 0x44
 8009950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009954:	1912      	adds	r2, r2, r4
 8009956:	eb45 0303 	adc.w	r3, r5, r3
 800995a:	f04f 0000 	mov.w	r0, #0
 800995e:	f04f 0100 	mov.w	r1, #0
 8009962:	00d9      	lsls	r1, r3, #3
 8009964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009968:	00d0      	lsls	r0, r2, #3
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	1911      	adds	r1, r2, r4
 8009970:	6639      	str	r1, [r7, #96]	; 0x60
 8009972:	416b      	adcs	r3, r5
 8009974:	667b      	str	r3, [r7, #100]	; 0x64
 8009976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	461a      	mov	r2, r3
 800997c:	f04f 0300 	mov.w	r3, #0
 8009980:	1891      	adds	r1, r2, r2
 8009982:	63b9      	str	r1, [r7, #56]	; 0x38
 8009984:	415b      	adcs	r3, r3
 8009986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800998c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009990:	f7f6 fc76 	bl	8000280 <__aeabi_uldivmod>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4ba5      	ldr	r3, [pc, #660]	; (8009c30 <UART_SetConfig+0x38c>)
 800999a:	fba3 2302 	umull	r2, r3, r3, r2
 800999e:	095b      	lsrs	r3, r3, #5
 80099a0:	011e      	lsls	r6, r3, #4
 80099a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a4:	461c      	mov	r4, r3
 80099a6:	f04f 0500 	mov.w	r5, #0
 80099aa:	4622      	mov	r2, r4
 80099ac:	462b      	mov	r3, r5
 80099ae:	1891      	adds	r1, r2, r2
 80099b0:	6339      	str	r1, [r7, #48]	; 0x30
 80099b2:	415b      	adcs	r3, r3
 80099b4:	637b      	str	r3, [r7, #52]	; 0x34
 80099b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80099ba:	1912      	adds	r2, r2, r4
 80099bc:	eb45 0303 	adc.w	r3, r5, r3
 80099c0:	f04f 0000 	mov.w	r0, #0
 80099c4:	f04f 0100 	mov.w	r1, #0
 80099c8:	00d9      	lsls	r1, r3, #3
 80099ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099ce:	00d0      	lsls	r0, r2, #3
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	1911      	adds	r1, r2, r4
 80099d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80099d8:	416b      	adcs	r3, r5
 80099da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	461a      	mov	r2, r3
 80099e2:	f04f 0300 	mov.w	r3, #0
 80099e6:	1891      	adds	r1, r2, r2
 80099e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80099ea:	415b      	adcs	r3, r3
 80099ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099f6:	f7f6 fc43 	bl	8000280 <__aeabi_uldivmod>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4b8c      	ldr	r3, [pc, #560]	; (8009c30 <UART_SetConfig+0x38c>)
 8009a00:	fba3 1302 	umull	r1, r3, r3, r2
 8009a04:	095b      	lsrs	r3, r3, #5
 8009a06:	2164      	movs	r1, #100	; 0x64
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	3332      	adds	r3, #50	; 0x32
 8009a12:	4a87      	ldr	r2, [pc, #540]	; (8009c30 <UART_SetConfig+0x38c>)
 8009a14:	fba2 2303 	umull	r2, r3, r2, r3
 8009a18:	095b      	lsrs	r3, r3, #5
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a20:	441e      	add	r6, r3
 8009a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a24:	4618      	mov	r0, r3
 8009a26:	f04f 0100 	mov.w	r1, #0
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	1894      	adds	r4, r2, r2
 8009a30:	623c      	str	r4, [r7, #32]
 8009a32:	415b      	adcs	r3, r3
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
 8009a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a3a:	1812      	adds	r2, r2, r0
 8009a3c:	eb41 0303 	adc.w	r3, r1, r3
 8009a40:	f04f 0400 	mov.w	r4, #0
 8009a44:	f04f 0500 	mov.w	r5, #0
 8009a48:	00dd      	lsls	r5, r3, #3
 8009a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a4e:	00d4      	lsls	r4, r2, #3
 8009a50:	4622      	mov	r2, r4
 8009a52:	462b      	mov	r3, r5
 8009a54:	1814      	adds	r4, r2, r0
 8009a56:	653c      	str	r4, [r7, #80]	; 0x50
 8009a58:	414b      	adcs	r3, r1
 8009a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	461a      	mov	r2, r3
 8009a62:	f04f 0300 	mov.w	r3, #0
 8009a66:	1891      	adds	r1, r2, r2
 8009a68:	61b9      	str	r1, [r7, #24]
 8009a6a:	415b      	adcs	r3, r3
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009a76:	f7f6 fc03 	bl	8000280 <__aeabi_uldivmod>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4b6c      	ldr	r3, [pc, #432]	; (8009c30 <UART_SetConfig+0x38c>)
 8009a80:	fba3 1302 	umull	r1, r3, r3, r2
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	2164      	movs	r1, #100	; 0x64
 8009a88:	fb01 f303 	mul.w	r3, r1, r3
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	3332      	adds	r3, #50	; 0x32
 8009a92:	4a67      	ldr	r2, [pc, #412]	; (8009c30 <UART_SetConfig+0x38c>)
 8009a94:	fba2 2303 	umull	r2, r3, r2, r3
 8009a98:	095b      	lsrs	r3, r3, #5
 8009a9a:	f003 0207 	and.w	r2, r3, #7
 8009a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4432      	add	r2, r6
 8009aa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009aa6:	e0b9      	b.n	8009c1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aaa:	461c      	mov	r4, r3
 8009aac:	f04f 0500 	mov.w	r5, #0
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	1891      	adds	r1, r2, r2
 8009ab6:	6139      	str	r1, [r7, #16]
 8009ab8:	415b      	adcs	r3, r3
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009ac0:	1912      	adds	r2, r2, r4
 8009ac2:	eb45 0303 	adc.w	r3, r5, r3
 8009ac6:	f04f 0000 	mov.w	r0, #0
 8009aca:	f04f 0100 	mov.w	r1, #0
 8009ace:	00d9      	lsls	r1, r3, #3
 8009ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ad4:	00d0      	lsls	r0, r2, #3
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	eb12 0804 	adds.w	r8, r2, r4
 8009ade:	eb43 0905 	adc.w	r9, r3, r5
 8009ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f04f 0100 	mov.w	r1, #0
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	f04f 0300 	mov.w	r3, #0
 8009af4:	008b      	lsls	r3, r1, #2
 8009af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009afa:	0082      	lsls	r2, r0, #2
 8009afc:	4640      	mov	r0, r8
 8009afe:	4649      	mov	r1, r9
 8009b00:	f7f6 fbbe 	bl	8000280 <__aeabi_uldivmod>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4b49      	ldr	r3, [pc, #292]	; (8009c30 <UART_SetConfig+0x38c>)
 8009b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b0e:	095b      	lsrs	r3, r3, #5
 8009b10:	011e      	lsls	r6, r3, #4
 8009b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b14:	4618      	mov	r0, r3
 8009b16:	f04f 0100 	mov.w	r1, #0
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	1894      	adds	r4, r2, r2
 8009b20:	60bc      	str	r4, [r7, #8]
 8009b22:	415b      	adcs	r3, r3
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b2a:	1812      	adds	r2, r2, r0
 8009b2c:	eb41 0303 	adc.w	r3, r1, r3
 8009b30:	f04f 0400 	mov.w	r4, #0
 8009b34:	f04f 0500 	mov.w	r5, #0
 8009b38:	00dd      	lsls	r5, r3, #3
 8009b3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b3e:	00d4      	lsls	r4, r2, #3
 8009b40:	4622      	mov	r2, r4
 8009b42:	462b      	mov	r3, r5
 8009b44:	1814      	adds	r4, r2, r0
 8009b46:	64bc      	str	r4, [r7, #72]	; 0x48
 8009b48:	414b      	adcs	r3, r1
 8009b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f04f 0100 	mov.w	r1, #0
 8009b56:	f04f 0200 	mov.w	r2, #0
 8009b5a:	f04f 0300 	mov.w	r3, #0
 8009b5e:	008b      	lsls	r3, r1, #2
 8009b60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b64:	0082      	lsls	r2, r0, #2
 8009b66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009b6a:	f7f6 fb89 	bl	8000280 <__aeabi_uldivmod>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4b2f      	ldr	r3, [pc, #188]	; (8009c30 <UART_SetConfig+0x38c>)
 8009b74:	fba3 1302 	umull	r1, r3, r3, r2
 8009b78:	095b      	lsrs	r3, r3, #5
 8009b7a:	2164      	movs	r1, #100	; 0x64
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	011b      	lsls	r3, r3, #4
 8009b84:	3332      	adds	r3, #50	; 0x32
 8009b86:	4a2a      	ldr	r2, [pc, #168]	; (8009c30 <UART_SetConfig+0x38c>)
 8009b88:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8c:	095b      	lsrs	r3, r3, #5
 8009b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b92:	441e      	add	r6, r3
 8009b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b96:	4618      	mov	r0, r3
 8009b98:	f04f 0100 	mov.w	r1, #0
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	1894      	adds	r4, r2, r2
 8009ba2:	603c      	str	r4, [r7, #0]
 8009ba4:	415b      	adcs	r3, r3
 8009ba6:	607b      	str	r3, [r7, #4]
 8009ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bac:	1812      	adds	r2, r2, r0
 8009bae:	eb41 0303 	adc.w	r3, r1, r3
 8009bb2:	f04f 0400 	mov.w	r4, #0
 8009bb6:	f04f 0500 	mov.w	r5, #0
 8009bba:	00dd      	lsls	r5, r3, #3
 8009bbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009bc0:	00d4      	lsls	r4, r2, #3
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	462b      	mov	r3, r5
 8009bc6:	eb12 0a00 	adds.w	sl, r2, r0
 8009bca:	eb43 0b01 	adc.w	fp, r3, r1
 8009bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f04f 0100 	mov.w	r1, #0
 8009bd8:	f04f 0200 	mov.w	r2, #0
 8009bdc:	f04f 0300 	mov.w	r3, #0
 8009be0:	008b      	lsls	r3, r1, #2
 8009be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009be6:	0082      	lsls	r2, r0, #2
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	f7f6 fb48 	bl	8000280 <__aeabi_uldivmod>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4b0e      	ldr	r3, [pc, #56]	; (8009c30 <UART_SetConfig+0x38c>)
 8009bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	2164      	movs	r1, #100	; 0x64
 8009bfe:	fb01 f303 	mul.w	r3, r1, r3
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	011b      	lsls	r3, r3, #4
 8009c06:	3332      	adds	r3, #50	; 0x32
 8009c08:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <UART_SetConfig+0x38c>)
 8009c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0e:	095b      	lsrs	r3, r3, #5
 8009c10:	f003 020f 	and.w	r2, r3, #15
 8009c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4432      	add	r2, r6
 8009c1a:	609a      	str	r2, [r3, #8]
}
 8009c1c:	bf00      	nop
 8009c1e:	377c      	adds	r7, #124	; 0x7c
 8009c20:	46bd      	mov	sp, r7
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	bf00      	nop
 8009c28:	40011000 	.word	0x40011000
 8009c2c:	40011400 	.word	0x40011400
 8009c30:	51eb851f 	.word	0x51eb851f

08009c34 <__errno>:
 8009c34:	4b01      	ldr	r3, [pc, #4]	; (8009c3c <__errno+0x8>)
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	200000e0 	.word	0x200000e0

08009c40 <__libc_init_array>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	4d0d      	ldr	r5, [pc, #52]	; (8009c78 <__libc_init_array+0x38>)
 8009c44:	4c0d      	ldr	r4, [pc, #52]	; (8009c7c <__libc_init_array+0x3c>)
 8009c46:	1b64      	subs	r4, r4, r5
 8009c48:	10a4      	asrs	r4, r4, #2
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	42a6      	cmp	r6, r4
 8009c4e:	d109      	bne.n	8009c64 <__libc_init_array+0x24>
 8009c50:	4d0b      	ldr	r5, [pc, #44]	; (8009c80 <__libc_init_array+0x40>)
 8009c52:	4c0c      	ldr	r4, [pc, #48]	; (8009c84 <__libc_init_array+0x44>)
 8009c54:	f000 fc4e 	bl	800a4f4 <_init>
 8009c58:	1b64      	subs	r4, r4, r5
 8009c5a:	10a4      	asrs	r4, r4, #2
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	42a6      	cmp	r6, r4
 8009c60:	d105      	bne.n	8009c6e <__libc_init_array+0x2e>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c68:	4798      	blx	r3
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	e7ee      	b.n	8009c4c <__libc_init_array+0xc>
 8009c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c72:	4798      	blx	r3
 8009c74:	3601      	adds	r6, #1
 8009c76:	e7f2      	b.n	8009c5e <__libc_init_array+0x1e>
 8009c78:	0800a5a0 	.word	0x0800a5a0
 8009c7c:	0800a5a0 	.word	0x0800a5a0
 8009c80:	0800a5a0 	.word	0x0800a5a0
 8009c84:	0800a5a4 	.word	0x0800a5a4

08009c88 <memcpy>:
 8009c88:	440a      	add	r2, r1
 8009c8a:	4291      	cmp	r1, r2
 8009c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c90:	d100      	bne.n	8009c94 <memcpy+0xc>
 8009c92:	4770      	bx	lr
 8009c94:	b510      	push	{r4, lr}
 8009c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c9e:	4291      	cmp	r1, r2
 8009ca0:	d1f9      	bne.n	8009c96 <memcpy+0xe>
 8009ca2:	bd10      	pop	{r4, pc}

08009ca4 <memset>:
 8009ca4:	4402      	add	r2, r0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d100      	bne.n	8009cae <memset+0xa>
 8009cac:	4770      	bx	lr
 8009cae:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb2:	e7f9      	b.n	8009ca8 <memset+0x4>

08009cb4 <siprintf>:
 8009cb4:	b40e      	push	{r1, r2, r3}
 8009cb6:	b500      	push	{lr}
 8009cb8:	b09c      	sub	sp, #112	; 0x70
 8009cba:	ab1d      	add	r3, sp, #116	; 0x74
 8009cbc:	9002      	str	r0, [sp, #8]
 8009cbe:	9006      	str	r0, [sp, #24]
 8009cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cc4:	4809      	ldr	r0, [pc, #36]	; (8009cec <siprintf+0x38>)
 8009cc6:	9107      	str	r1, [sp, #28]
 8009cc8:	9104      	str	r1, [sp, #16]
 8009cca:	4909      	ldr	r1, [pc, #36]	; (8009cf0 <siprintf+0x3c>)
 8009ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd0:	9105      	str	r1, [sp, #20]
 8009cd2:	6800      	ldr	r0, [r0, #0]
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	a902      	add	r1, sp, #8
 8009cd8:	f000 f868 	bl	8009dac <_svfiprintf_r>
 8009cdc:	9b02      	ldr	r3, [sp, #8]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	b01c      	add	sp, #112	; 0x70
 8009ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce8:	b003      	add	sp, #12
 8009cea:	4770      	bx	lr
 8009cec:	200000e0 	.word	0x200000e0
 8009cf0:	ffff0208 	.word	0xffff0208

08009cf4 <__ssputs_r>:
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	688e      	ldr	r6, [r1, #8]
 8009cfa:	429e      	cmp	r6, r3
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	4690      	mov	r8, r2
 8009d02:	461f      	mov	r7, r3
 8009d04:	d838      	bhi.n	8009d78 <__ssputs_r+0x84>
 8009d06:	898a      	ldrh	r2, [r1, #12]
 8009d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d0c:	d032      	beq.n	8009d74 <__ssputs_r+0x80>
 8009d0e:	6825      	ldr	r5, [r4, #0]
 8009d10:	6909      	ldr	r1, [r1, #16]
 8009d12:	eba5 0901 	sub.w	r9, r5, r1
 8009d16:	6965      	ldr	r5, [r4, #20]
 8009d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d20:	3301      	adds	r3, #1
 8009d22:	444b      	add	r3, r9
 8009d24:	106d      	asrs	r5, r5, #1
 8009d26:	429d      	cmp	r5, r3
 8009d28:	bf38      	it	cc
 8009d2a:	461d      	movcc	r5, r3
 8009d2c:	0553      	lsls	r3, r2, #21
 8009d2e:	d531      	bpl.n	8009d94 <__ssputs_r+0xa0>
 8009d30:	4629      	mov	r1, r5
 8009d32:	f000 fb39 	bl	800a3a8 <_malloc_r>
 8009d36:	4606      	mov	r6, r0
 8009d38:	b950      	cbnz	r0, 8009d50 <__ssputs_r+0x5c>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	f8ca 3000 	str.w	r3, [sl]
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d50:	6921      	ldr	r1, [r4, #16]
 8009d52:	464a      	mov	r2, r9
 8009d54:	f7ff ff98 	bl	8009c88 <memcpy>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	6126      	str	r6, [r4, #16]
 8009d66:	6165      	str	r5, [r4, #20]
 8009d68:	444e      	add	r6, r9
 8009d6a:	eba5 0509 	sub.w	r5, r5, r9
 8009d6e:	6026      	str	r6, [r4, #0]
 8009d70:	60a5      	str	r5, [r4, #8]
 8009d72:	463e      	mov	r6, r7
 8009d74:	42be      	cmp	r6, r7
 8009d76:	d900      	bls.n	8009d7a <__ssputs_r+0x86>
 8009d78:	463e      	mov	r6, r7
 8009d7a:	4632      	mov	r2, r6
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	4641      	mov	r1, r8
 8009d80:	f000 faa8 	bl	800a2d4 <memmove>
 8009d84:	68a3      	ldr	r3, [r4, #8]
 8009d86:	6822      	ldr	r2, [r4, #0]
 8009d88:	1b9b      	subs	r3, r3, r6
 8009d8a:	4432      	add	r2, r6
 8009d8c:	60a3      	str	r3, [r4, #8]
 8009d8e:	6022      	str	r2, [r4, #0]
 8009d90:	2000      	movs	r0, #0
 8009d92:	e7db      	b.n	8009d4c <__ssputs_r+0x58>
 8009d94:	462a      	mov	r2, r5
 8009d96:	f000 fb61 	bl	800a45c <_realloc_r>
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d1e1      	bne.n	8009d64 <__ssputs_r+0x70>
 8009da0:	6921      	ldr	r1, [r4, #16]
 8009da2:	4650      	mov	r0, sl
 8009da4:	f000 fab0 	bl	800a308 <_free_r>
 8009da8:	e7c7      	b.n	8009d3a <__ssputs_r+0x46>
	...

08009dac <_svfiprintf_r>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	4698      	mov	r8, r3
 8009db2:	898b      	ldrh	r3, [r1, #12]
 8009db4:	061b      	lsls	r3, r3, #24
 8009db6:	b09d      	sub	sp, #116	; 0x74
 8009db8:	4607      	mov	r7, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	4614      	mov	r4, r2
 8009dbe:	d50e      	bpl.n	8009dde <_svfiprintf_r+0x32>
 8009dc0:	690b      	ldr	r3, [r1, #16]
 8009dc2:	b963      	cbnz	r3, 8009dde <_svfiprintf_r+0x32>
 8009dc4:	2140      	movs	r1, #64	; 0x40
 8009dc6:	f000 faef 	bl	800a3a8 <_malloc_r>
 8009dca:	6028      	str	r0, [r5, #0]
 8009dcc:	6128      	str	r0, [r5, #16]
 8009dce:	b920      	cbnz	r0, 8009dda <_svfiprintf_r+0x2e>
 8009dd0:	230c      	movs	r3, #12
 8009dd2:	603b      	str	r3, [r7, #0]
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	e0d1      	b.n	8009f7e <_svfiprintf_r+0x1d2>
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	616b      	str	r3, [r5, #20]
 8009dde:	2300      	movs	r3, #0
 8009de0:	9309      	str	r3, [sp, #36]	; 0x24
 8009de2:	2320      	movs	r3, #32
 8009de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dec:	2330      	movs	r3, #48	; 0x30
 8009dee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f98 <_svfiprintf_r+0x1ec>
 8009df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009df6:	f04f 0901 	mov.w	r9, #1
 8009dfa:	4623      	mov	r3, r4
 8009dfc:	469a      	mov	sl, r3
 8009dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e02:	b10a      	cbz	r2, 8009e08 <_svfiprintf_r+0x5c>
 8009e04:	2a25      	cmp	r2, #37	; 0x25
 8009e06:	d1f9      	bne.n	8009dfc <_svfiprintf_r+0x50>
 8009e08:	ebba 0b04 	subs.w	fp, sl, r4
 8009e0c:	d00b      	beq.n	8009e26 <_svfiprintf_r+0x7a>
 8009e0e:	465b      	mov	r3, fp
 8009e10:	4622      	mov	r2, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	4638      	mov	r0, r7
 8009e16:	f7ff ff6d 	bl	8009cf4 <__ssputs_r>
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f000 80aa 	beq.w	8009f74 <_svfiprintf_r+0x1c8>
 8009e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e22:	445a      	add	r2, fp
 8009e24:	9209      	str	r2, [sp, #36]	; 0x24
 8009e26:	f89a 3000 	ldrb.w	r3, [sl]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 80a2 	beq.w	8009f74 <_svfiprintf_r+0x1c8>
 8009e30:	2300      	movs	r3, #0
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e3a:	f10a 0a01 	add.w	sl, sl, #1
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	9307      	str	r3, [sp, #28]
 8009e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e46:	931a      	str	r3, [sp, #104]	; 0x68
 8009e48:	4654      	mov	r4, sl
 8009e4a:	2205      	movs	r2, #5
 8009e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e50:	4851      	ldr	r0, [pc, #324]	; (8009f98 <_svfiprintf_r+0x1ec>)
 8009e52:	f7f6 f9c5 	bl	80001e0 <memchr>
 8009e56:	9a04      	ldr	r2, [sp, #16]
 8009e58:	b9d8      	cbnz	r0, 8009e92 <_svfiprintf_r+0xe6>
 8009e5a:	06d0      	lsls	r0, r2, #27
 8009e5c:	bf44      	itt	mi
 8009e5e:	2320      	movmi	r3, #32
 8009e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e64:	0711      	lsls	r1, r2, #28
 8009e66:	bf44      	itt	mi
 8009e68:	232b      	movmi	r3, #43	; 0x2b
 8009e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e72:	2b2a      	cmp	r3, #42	; 0x2a
 8009e74:	d015      	beq.n	8009ea2 <_svfiprintf_r+0xf6>
 8009e76:	9a07      	ldr	r2, [sp, #28]
 8009e78:	4654      	mov	r4, sl
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f04f 0c0a 	mov.w	ip, #10
 8009e80:	4621      	mov	r1, r4
 8009e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e86:	3b30      	subs	r3, #48	; 0x30
 8009e88:	2b09      	cmp	r3, #9
 8009e8a:	d94e      	bls.n	8009f2a <_svfiprintf_r+0x17e>
 8009e8c:	b1b0      	cbz	r0, 8009ebc <_svfiprintf_r+0x110>
 8009e8e:	9207      	str	r2, [sp, #28]
 8009e90:	e014      	b.n	8009ebc <_svfiprintf_r+0x110>
 8009e92:	eba0 0308 	sub.w	r3, r0, r8
 8009e96:	fa09 f303 	lsl.w	r3, r9, r3
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	9304      	str	r3, [sp, #16]
 8009e9e:	46a2      	mov	sl, r4
 8009ea0:	e7d2      	b.n	8009e48 <_svfiprintf_r+0x9c>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	1d19      	adds	r1, r3, #4
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	9103      	str	r1, [sp, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bfbb      	ittet	lt
 8009eae:	425b      	neglt	r3, r3
 8009eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8009eb4:	9307      	strge	r3, [sp, #28]
 8009eb6:	9307      	strlt	r3, [sp, #28]
 8009eb8:	bfb8      	it	lt
 8009eba:	9204      	strlt	r2, [sp, #16]
 8009ebc:	7823      	ldrb	r3, [r4, #0]
 8009ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec0:	d10c      	bne.n	8009edc <_svfiprintf_r+0x130>
 8009ec2:	7863      	ldrb	r3, [r4, #1]
 8009ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec6:	d135      	bne.n	8009f34 <_svfiprintf_r+0x188>
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	1d1a      	adds	r2, r3, #4
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	9203      	str	r2, [sp, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bfb8      	it	lt
 8009ed4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ed8:	3402      	adds	r4, #2
 8009eda:	9305      	str	r3, [sp, #20]
 8009edc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fa8 <_svfiprintf_r+0x1fc>
 8009ee0:	7821      	ldrb	r1, [r4, #0]
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	4650      	mov	r0, sl
 8009ee6:	f7f6 f97b 	bl	80001e0 <memchr>
 8009eea:	b140      	cbz	r0, 8009efe <_svfiprintf_r+0x152>
 8009eec:	2340      	movs	r3, #64	; 0x40
 8009eee:	eba0 000a 	sub.w	r0, r0, sl
 8009ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	4303      	orrs	r3, r0
 8009efa:	3401      	adds	r4, #1
 8009efc:	9304      	str	r3, [sp, #16]
 8009efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f02:	4826      	ldr	r0, [pc, #152]	; (8009f9c <_svfiprintf_r+0x1f0>)
 8009f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f08:	2206      	movs	r2, #6
 8009f0a:	f7f6 f969 	bl	80001e0 <memchr>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d038      	beq.n	8009f84 <_svfiprintf_r+0x1d8>
 8009f12:	4b23      	ldr	r3, [pc, #140]	; (8009fa0 <_svfiprintf_r+0x1f4>)
 8009f14:	bb1b      	cbnz	r3, 8009f5e <_svfiprintf_r+0x1b2>
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	3307      	adds	r3, #7
 8009f1a:	f023 0307 	bic.w	r3, r3, #7
 8009f1e:	3308      	adds	r3, #8
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f24:	4433      	add	r3, r6
 8009f26:	9309      	str	r3, [sp, #36]	; 0x24
 8009f28:	e767      	b.n	8009dfa <_svfiprintf_r+0x4e>
 8009f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f2e:	460c      	mov	r4, r1
 8009f30:	2001      	movs	r0, #1
 8009f32:	e7a5      	b.n	8009e80 <_svfiprintf_r+0xd4>
 8009f34:	2300      	movs	r3, #0
 8009f36:	3401      	adds	r4, #1
 8009f38:	9305      	str	r3, [sp, #20]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	f04f 0c0a 	mov.w	ip, #10
 8009f40:	4620      	mov	r0, r4
 8009f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f46:	3a30      	subs	r2, #48	; 0x30
 8009f48:	2a09      	cmp	r2, #9
 8009f4a:	d903      	bls.n	8009f54 <_svfiprintf_r+0x1a8>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0c5      	beq.n	8009edc <_svfiprintf_r+0x130>
 8009f50:	9105      	str	r1, [sp, #20]
 8009f52:	e7c3      	b.n	8009edc <_svfiprintf_r+0x130>
 8009f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f58:	4604      	mov	r4, r0
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e7f0      	b.n	8009f40 <_svfiprintf_r+0x194>
 8009f5e:	ab03      	add	r3, sp, #12
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	462a      	mov	r2, r5
 8009f64:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <_svfiprintf_r+0x1f8>)
 8009f66:	a904      	add	r1, sp, #16
 8009f68:	4638      	mov	r0, r7
 8009f6a:	f3af 8000 	nop.w
 8009f6e:	1c42      	adds	r2, r0, #1
 8009f70:	4606      	mov	r6, r0
 8009f72:	d1d6      	bne.n	8009f22 <_svfiprintf_r+0x176>
 8009f74:	89ab      	ldrh	r3, [r5, #12]
 8009f76:	065b      	lsls	r3, r3, #25
 8009f78:	f53f af2c 	bmi.w	8009dd4 <_svfiprintf_r+0x28>
 8009f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f7e:	b01d      	add	sp, #116	; 0x74
 8009f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f84:	ab03      	add	r3, sp, #12
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4b06      	ldr	r3, [pc, #24]	; (8009fa4 <_svfiprintf_r+0x1f8>)
 8009f8c:	a904      	add	r1, sp, #16
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f000 f87a 	bl	800a088 <_printf_i>
 8009f94:	e7eb      	b.n	8009f6e <_svfiprintf_r+0x1c2>
 8009f96:	bf00      	nop
 8009f98:	0800a564 	.word	0x0800a564
 8009f9c:	0800a56e 	.word	0x0800a56e
 8009fa0:	00000000 	.word	0x00000000
 8009fa4:	08009cf5 	.word	0x08009cf5
 8009fa8:	0800a56a 	.word	0x0800a56a

08009fac <_printf_common>:
 8009fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	4699      	mov	r9, r3
 8009fb4:	688a      	ldr	r2, [r1, #8]
 8009fb6:	690b      	ldr	r3, [r1, #16]
 8009fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	bfb8      	it	lt
 8009fc0:	4613      	movlt	r3, r2
 8009fc2:	6033      	str	r3, [r6, #0]
 8009fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fc8:	4607      	mov	r7, r0
 8009fca:	460c      	mov	r4, r1
 8009fcc:	b10a      	cbz	r2, 8009fd2 <_printf_common+0x26>
 8009fce:	3301      	adds	r3, #1
 8009fd0:	6033      	str	r3, [r6, #0]
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	0699      	lsls	r1, r3, #26
 8009fd6:	bf42      	ittt	mi
 8009fd8:	6833      	ldrmi	r3, [r6, #0]
 8009fda:	3302      	addmi	r3, #2
 8009fdc:	6033      	strmi	r3, [r6, #0]
 8009fde:	6825      	ldr	r5, [r4, #0]
 8009fe0:	f015 0506 	ands.w	r5, r5, #6
 8009fe4:	d106      	bne.n	8009ff4 <_printf_common+0x48>
 8009fe6:	f104 0a19 	add.w	sl, r4, #25
 8009fea:	68e3      	ldr	r3, [r4, #12]
 8009fec:	6832      	ldr	r2, [r6, #0]
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	dc26      	bgt.n	800a042 <_printf_common+0x96>
 8009ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ff8:	1e13      	subs	r3, r2, #0
 8009ffa:	6822      	ldr	r2, [r4, #0]
 8009ffc:	bf18      	it	ne
 8009ffe:	2301      	movne	r3, #1
 800a000:	0692      	lsls	r2, r2, #26
 800a002:	d42b      	bmi.n	800a05c <_printf_common+0xb0>
 800a004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a008:	4649      	mov	r1, r9
 800a00a:	4638      	mov	r0, r7
 800a00c:	47c0      	blx	r8
 800a00e:	3001      	adds	r0, #1
 800a010:	d01e      	beq.n	800a050 <_printf_common+0xa4>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	68e5      	ldr	r5, [r4, #12]
 800a016:	6832      	ldr	r2, [r6, #0]
 800a018:	f003 0306 	and.w	r3, r3, #6
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	bf08      	it	eq
 800a020:	1aad      	subeq	r5, r5, r2
 800a022:	68a3      	ldr	r3, [r4, #8]
 800a024:	6922      	ldr	r2, [r4, #16]
 800a026:	bf0c      	ite	eq
 800a028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a02c:	2500      	movne	r5, #0
 800a02e:	4293      	cmp	r3, r2
 800a030:	bfc4      	itt	gt
 800a032:	1a9b      	subgt	r3, r3, r2
 800a034:	18ed      	addgt	r5, r5, r3
 800a036:	2600      	movs	r6, #0
 800a038:	341a      	adds	r4, #26
 800a03a:	42b5      	cmp	r5, r6
 800a03c:	d11a      	bne.n	800a074 <_printf_common+0xc8>
 800a03e:	2000      	movs	r0, #0
 800a040:	e008      	b.n	800a054 <_printf_common+0xa8>
 800a042:	2301      	movs	r3, #1
 800a044:	4652      	mov	r2, sl
 800a046:	4649      	mov	r1, r9
 800a048:	4638      	mov	r0, r7
 800a04a:	47c0      	blx	r8
 800a04c:	3001      	adds	r0, #1
 800a04e:	d103      	bne.n	800a058 <_printf_common+0xac>
 800a050:	f04f 30ff 	mov.w	r0, #4294967295
 800a054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a058:	3501      	adds	r5, #1
 800a05a:	e7c6      	b.n	8009fea <_printf_common+0x3e>
 800a05c:	18e1      	adds	r1, r4, r3
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	2030      	movs	r0, #48	; 0x30
 800a062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a066:	4422      	add	r2, r4
 800a068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a06c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a070:	3302      	adds	r3, #2
 800a072:	e7c7      	b.n	800a004 <_printf_common+0x58>
 800a074:	2301      	movs	r3, #1
 800a076:	4622      	mov	r2, r4
 800a078:	4649      	mov	r1, r9
 800a07a:	4638      	mov	r0, r7
 800a07c:	47c0      	blx	r8
 800a07e:	3001      	adds	r0, #1
 800a080:	d0e6      	beq.n	800a050 <_printf_common+0xa4>
 800a082:	3601      	adds	r6, #1
 800a084:	e7d9      	b.n	800a03a <_printf_common+0x8e>
	...

0800a088 <_printf_i>:
 800a088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a08c:	460c      	mov	r4, r1
 800a08e:	4691      	mov	r9, r2
 800a090:	7e27      	ldrb	r7, [r4, #24]
 800a092:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a094:	2f78      	cmp	r7, #120	; 0x78
 800a096:	4680      	mov	r8, r0
 800a098:	469a      	mov	sl, r3
 800a09a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a09e:	d807      	bhi.n	800a0b0 <_printf_i+0x28>
 800a0a0:	2f62      	cmp	r7, #98	; 0x62
 800a0a2:	d80a      	bhi.n	800a0ba <_printf_i+0x32>
 800a0a4:	2f00      	cmp	r7, #0
 800a0a6:	f000 80d8 	beq.w	800a25a <_printf_i+0x1d2>
 800a0aa:	2f58      	cmp	r7, #88	; 0x58
 800a0ac:	f000 80a3 	beq.w	800a1f6 <_printf_i+0x16e>
 800a0b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0b8:	e03a      	b.n	800a130 <_printf_i+0xa8>
 800a0ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0be:	2b15      	cmp	r3, #21
 800a0c0:	d8f6      	bhi.n	800a0b0 <_printf_i+0x28>
 800a0c2:	a001      	add	r0, pc, #4	; (adr r0, 800a0c8 <_printf_i+0x40>)
 800a0c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0c8:	0800a121 	.word	0x0800a121
 800a0cc:	0800a135 	.word	0x0800a135
 800a0d0:	0800a0b1 	.word	0x0800a0b1
 800a0d4:	0800a0b1 	.word	0x0800a0b1
 800a0d8:	0800a0b1 	.word	0x0800a0b1
 800a0dc:	0800a0b1 	.word	0x0800a0b1
 800a0e0:	0800a135 	.word	0x0800a135
 800a0e4:	0800a0b1 	.word	0x0800a0b1
 800a0e8:	0800a0b1 	.word	0x0800a0b1
 800a0ec:	0800a0b1 	.word	0x0800a0b1
 800a0f0:	0800a0b1 	.word	0x0800a0b1
 800a0f4:	0800a241 	.word	0x0800a241
 800a0f8:	0800a165 	.word	0x0800a165
 800a0fc:	0800a223 	.word	0x0800a223
 800a100:	0800a0b1 	.word	0x0800a0b1
 800a104:	0800a0b1 	.word	0x0800a0b1
 800a108:	0800a263 	.word	0x0800a263
 800a10c:	0800a0b1 	.word	0x0800a0b1
 800a110:	0800a165 	.word	0x0800a165
 800a114:	0800a0b1 	.word	0x0800a0b1
 800a118:	0800a0b1 	.word	0x0800a0b1
 800a11c:	0800a22b 	.word	0x0800a22b
 800a120:	680b      	ldr	r3, [r1, #0]
 800a122:	1d1a      	adds	r2, r3, #4
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	600a      	str	r2, [r1, #0]
 800a128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a130:	2301      	movs	r3, #1
 800a132:	e0a3      	b.n	800a27c <_printf_i+0x1f4>
 800a134:	6825      	ldr	r5, [r4, #0]
 800a136:	6808      	ldr	r0, [r1, #0]
 800a138:	062e      	lsls	r6, r5, #24
 800a13a:	f100 0304 	add.w	r3, r0, #4
 800a13e:	d50a      	bpl.n	800a156 <_printf_i+0xce>
 800a140:	6805      	ldr	r5, [r0, #0]
 800a142:	600b      	str	r3, [r1, #0]
 800a144:	2d00      	cmp	r5, #0
 800a146:	da03      	bge.n	800a150 <_printf_i+0xc8>
 800a148:	232d      	movs	r3, #45	; 0x2d
 800a14a:	426d      	negs	r5, r5
 800a14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a150:	485e      	ldr	r0, [pc, #376]	; (800a2cc <_printf_i+0x244>)
 800a152:	230a      	movs	r3, #10
 800a154:	e019      	b.n	800a18a <_printf_i+0x102>
 800a156:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a15a:	6805      	ldr	r5, [r0, #0]
 800a15c:	600b      	str	r3, [r1, #0]
 800a15e:	bf18      	it	ne
 800a160:	b22d      	sxthne	r5, r5
 800a162:	e7ef      	b.n	800a144 <_printf_i+0xbc>
 800a164:	680b      	ldr	r3, [r1, #0]
 800a166:	6825      	ldr	r5, [r4, #0]
 800a168:	1d18      	adds	r0, r3, #4
 800a16a:	6008      	str	r0, [r1, #0]
 800a16c:	0628      	lsls	r0, r5, #24
 800a16e:	d501      	bpl.n	800a174 <_printf_i+0xec>
 800a170:	681d      	ldr	r5, [r3, #0]
 800a172:	e002      	b.n	800a17a <_printf_i+0xf2>
 800a174:	0669      	lsls	r1, r5, #25
 800a176:	d5fb      	bpl.n	800a170 <_printf_i+0xe8>
 800a178:	881d      	ldrh	r5, [r3, #0]
 800a17a:	4854      	ldr	r0, [pc, #336]	; (800a2cc <_printf_i+0x244>)
 800a17c:	2f6f      	cmp	r7, #111	; 0x6f
 800a17e:	bf0c      	ite	eq
 800a180:	2308      	moveq	r3, #8
 800a182:	230a      	movne	r3, #10
 800a184:	2100      	movs	r1, #0
 800a186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a18a:	6866      	ldr	r6, [r4, #4]
 800a18c:	60a6      	str	r6, [r4, #8]
 800a18e:	2e00      	cmp	r6, #0
 800a190:	bfa2      	ittt	ge
 800a192:	6821      	ldrge	r1, [r4, #0]
 800a194:	f021 0104 	bicge.w	r1, r1, #4
 800a198:	6021      	strge	r1, [r4, #0]
 800a19a:	b90d      	cbnz	r5, 800a1a0 <_printf_i+0x118>
 800a19c:	2e00      	cmp	r6, #0
 800a19e:	d04d      	beq.n	800a23c <_printf_i+0x1b4>
 800a1a0:	4616      	mov	r6, r2
 800a1a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1a6:	fb03 5711 	mls	r7, r3, r1, r5
 800a1aa:	5dc7      	ldrb	r7, [r0, r7]
 800a1ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1b0:	462f      	mov	r7, r5
 800a1b2:	42bb      	cmp	r3, r7
 800a1b4:	460d      	mov	r5, r1
 800a1b6:	d9f4      	bls.n	800a1a2 <_printf_i+0x11a>
 800a1b8:	2b08      	cmp	r3, #8
 800a1ba:	d10b      	bne.n	800a1d4 <_printf_i+0x14c>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	07df      	lsls	r7, r3, #31
 800a1c0:	d508      	bpl.n	800a1d4 <_printf_i+0x14c>
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	6861      	ldr	r1, [r4, #4]
 800a1c6:	4299      	cmp	r1, r3
 800a1c8:	bfde      	ittt	le
 800a1ca:	2330      	movle	r3, #48	; 0x30
 800a1cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1d4:	1b92      	subs	r2, r2, r6
 800a1d6:	6122      	str	r2, [r4, #16]
 800a1d8:	f8cd a000 	str.w	sl, [sp]
 800a1dc:	464b      	mov	r3, r9
 800a1de:	aa03      	add	r2, sp, #12
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	f7ff fee2 	bl	8009fac <_printf_common>
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d14c      	bne.n	800a286 <_printf_i+0x1fe>
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	b004      	add	sp, #16
 800a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f6:	4835      	ldr	r0, [pc, #212]	; (800a2cc <_printf_i+0x244>)
 800a1f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	680e      	ldr	r6, [r1, #0]
 800a200:	061f      	lsls	r7, r3, #24
 800a202:	f856 5b04 	ldr.w	r5, [r6], #4
 800a206:	600e      	str	r6, [r1, #0]
 800a208:	d514      	bpl.n	800a234 <_printf_i+0x1ac>
 800a20a:	07d9      	lsls	r1, r3, #31
 800a20c:	bf44      	itt	mi
 800a20e:	f043 0320 	orrmi.w	r3, r3, #32
 800a212:	6023      	strmi	r3, [r4, #0]
 800a214:	b91d      	cbnz	r5, 800a21e <_printf_i+0x196>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	f023 0320 	bic.w	r3, r3, #32
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	2310      	movs	r3, #16
 800a220:	e7b0      	b.n	800a184 <_printf_i+0xfc>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f043 0320 	orr.w	r3, r3, #32
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	2378      	movs	r3, #120	; 0x78
 800a22c:	4828      	ldr	r0, [pc, #160]	; (800a2d0 <_printf_i+0x248>)
 800a22e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a232:	e7e3      	b.n	800a1fc <_printf_i+0x174>
 800a234:	065e      	lsls	r6, r3, #25
 800a236:	bf48      	it	mi
 800a238:	b2ad      	uxthmi	r5, r5
 800a23a:	e7e6      	b.n	800a20a <_printf_i+0x182>
 800a23c:	4616      	mov	r6, r2
 800a23e:	e7bb      	b.n	800a1b8 <_printf_i+0x130>
 800a240:	680b      	ldr	r3, [r1, #0]
 800a242:	6826      	ldr	r6, [r4, #0]
 800a244:	6960      	ldr	r0, [r4, #20]
 800a246:	1d1d      	adds	r5, r3, #4
 800a248:	600d      	str	r5, [r1, #0]
 800a24a:	0635      	lsls	r5, r6, #24
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	d501      	bpl.n	800a254 <_printf_i+0x1cc>
 800a250:	6018      	str	r0, [r3, #0]
 800a252:	e002      	b.n	800a25a <_printf_i+0x1d2>
 800a254:	0671      	lsls	r1, r6, #25
 800a256:	d5fb      	bpl.n	800a250 <_printf_i+0x1c8>
 800a258:	8018      	strh	r0, [r3, #0]
 800a25a:	2300      	movs	r3, #0
 800a25c:	6123      	str	r3, [r4, #16]
 800a25e:	4616      	mov	r6, r2
 800a260:	e7ba      	b.n	800a1d8 <_printf_i+0x150>
 800a262:	680b      	ldr	r3, [r1, #0]
 800a264:	1d1a      	adds	r2, r3, #4
 800a266:	600a      	str	r2, [r1, #0]
 800a268:	681e      	ldr	r6, [r3, #0]
 800a26a:	6862      	ldr	r2, [r4, #4]
 800a26c:	2100      	movs	r1, #0
 800a26e:	4630      	mov	r0, r6
 800a270:	f7f5 ffb6 	bl	80001e0 <memchr>
 800a274:	b108      	cbz	r0, 800a27a <_printf_i+0x1f2>
 800a276:	1b80      	subs	r0, r0, r6
 800a278:	6060      	str	r0, [r4, #4]
 800a27a:	6863      	ldr	r3, [r4, #4]
 800a27c:	6123      	str	r3, [r4, #16]
 800a27e:	2300      	movs	r3, #0
 800a280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a284:	e7a8      	b.n	800a1d8 <_printf_i+0x150>
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	4632      	mov	r2, r6
 800a28a:	4649      	mov	r1, r9
 800a28c:	4640      	mov	r0, r8
 800a28e:	47d0      	blx	sl
 800a290:	3001      	adds	r0, #1
 800a292:	d0ab      	beq.n	800a1ec <_printf_i+0x164>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	079b      	lsls	r3, r3, #30
 800a298:	d413      	bmi.n	800a2c2 <_printf_i+0x23a>
 800a29a:	68e0      	ldr	r0, [r4, #12]
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	4298      	cmp	r0, r3
 800a2a0:	bfb8      	it	lt
 800a2a2:	4618      	movlt	r0, r3
 800a2a4:	e7a4      	b.n	800a1f0 <_printf_i+0x168>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	4640      	mov	r0, r8
 800a2ae:	47d0      	blx	sl
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d09b      	beq.n	800a1ec <_printf_i+0x164>
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	68e3      	ldr	r3, [r4, #12]
 800a2b8:	9903      	ldr	r1, [sp, #12]
 800a2ba:	1a5b      	subs	r3, r3, r1
 800a2bc:	42ab      	cmp	r3, r5
 800a2be:	dcf2      	bgt.n	800a2a6 <_printf_i+0x21e>
 800a2c0:	e7eb      	b.n	800a29a <_printf_i+0x212>
 800a2c2:	2500      	movs	r5, #0
 800a2c4:	f104 0619 	add.w	r6, r4, #25
 800a2c8:	e7f5      	b.n	800a2b6 <_printf_i+0x22e>
 800a2ca:	bf00      	nop
 800a2cc:	0800a575 	.word	0x0800a575
 800a2d0:	0800a586 	.word	0x0800a586

0800a2d4 <memmove>:
 800a2d4:	4288      	cmp	r0, r1
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	eb01 0402 	add.w	r4, r1, r2
 800a2dc:	d902      	bls.n	800a2e4 <memmove+0x10>
 800a2de:	4284      	cmp	r4, r0
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	d807      	bhi.n	800a2f4 <memmove+0x20>
 800a2e4:	1e43      	subs	r3, r0, #1
 800a2e6:	42a1      	cmp	r1, r4
 800a2e8:	d008      	beq.n	800a2fc <memmove+0x28>
 800a2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2f2:	e7f8      	b.n	800a2e6 <memmove+0x12>
 800a2f4:	4402      	add	r2, r0
 800a2f6:	4601      	mov	r1, r0
 800a2f8:	428a      	cmp	r2, r1
 800a2fa:	d100      	bne.n	800a2fe <memmove+0x2a>
 800a2fc:	bd10      	pop	{r4, pc}
 800a2fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a306:	e7f7      	b.n	800a2f8 <memmove+0x24>

0800a308 <_free_r>:
 800a308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30a:	2900      	cmp	r1, #0
 800a30c:	d048      	beq.n	800a3a0 <_free_r+0x98>
 800a30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a312:	9001      	str	r0, [sp, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f1a1 0404 	sub.w	r4, r1, #4
 800a31a:	bfb8      	it	lt
 800a31c:	18e4      	addlt	r4, r4, r3
 800a31e:	f000 f8d3 	bl	800a4c8 <__malloc_lock>
 800a322:	4a20      	ldr	r2, [pc, #128]	; (800a3a4 <_free_r+0x9c>)
 800a324:	9801      	ldr	r0, [sp, #4]
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	4615      	mov	r5, r2
 800a32a:	b933      	cbnz	r3, 800a33a <_free_r+0x32>
 800a32c:	6063      	str	r3, [r4, #4]
 800a32e:	6014      	str	r4, [r2, #0]
 800a330:	b003      	add	sp, #12
 800a332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a336:	f000 b8cd 	b.w	800a4d4 <__malloc_unlock>
 800a33a:	42a3      	cmp	r3, r4
 800a33c:	d90b      	bls.n	800a356 <_free_r+0x4e>
 800a33e:	6821      	ldr	r1, [r4, #0]
 800a340:	1862      	adds	r2, r4, r1
 800a342:	4293      	cmp	r3, r2
 800a344:	bf04      	itt	eq
 800a346:	681a      	ldreq	r2, [r3, #0]
 800a348:	685b      	ldreq	r3, [r3, #4]
 800a34a:	6063      	str	r3, [r4, #4]
 800a34c:	bf04      	itt	eq
 800a34e:	1852      	addeq	r2, r2, r1
 800a350:	6022      	streq	r2, [r4, #0]
 800a352:	602c      	str	r4, [r5, #0]
 800a354:	e7ec      	b.n	800a330 <_free_r+0x28>
 800a356:	461a      	mov	r2, r3
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	b10b      	cbz	r3, 800a360 <_free_r+0x58>
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	d9fa      	bls.n	800a356 <_free_r+0x4e>
 800a360:	6811      	ldr	r1, [r2, #0]
 800a362:	1855      	adds	r5, r2, r1
 800a364:	42a5      	cmp	r5, r4
 800a366:	d10b      	bne.n	800a380 <_free_r+0x78>
 800a368:	6824      	ldr	r4, [r4, #0]
 800a36a:	4421      	add	r1, r4
 800a36c:	1854      	adds	r4, r2, r1
 800a36e:	42a3      	cmp	r3, r4
 800a370:	6011      	str	r1, [r2, #0]
 800a372:	d1dd      	bne.n	800a330 <_free_r+0x28>
 800a374:	681c      	ldr	r4, [r3, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	6053      	str	r3, [r2, #4]
 800a37a:	4421      	add	r1, r4
 800a37c:	6011      	str	r1, [r2, #0]
 800a37e:	e7d7      	b.n	800a330 <_free_r+0x28>
 800a380:	d902      	bls.n	800a388 <_free_r+0x80>
 800a382:	230c      	movs	r3, #12
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	e7d3      	b.n	800a330 <_free_r+0x28>
 800a388:	6825      	ldr	r5, [r4, #0]
 800a38a:	1961      	adds	r1, r4, r5
 800a38c:	428b      	cmp	r3, r1
 800a38e:	bf04      	itt	eq
 800a390:	6819      	ldreq	r1, [r3, #0]
 800a392:	685b      	ldreq	r3, [r3, #4]
 800a394:	6063      	str	r3, [r4, #4]
 800a396:	bf04      	itt	eq
 800a398:	1949      	addeq	r1, r1, r5
 800a39a:	6021      	streq	r1, [r4, #0]
 800a39c:	6054      	str	r4, [r2, #4]
 800a39e:	e7c7      	b.n	800a330 <_free_r+0x28>
 800a3a0:	b003      	add	sp, #12
 800a3a2:	bd30      	pop	{r4, r5, pc}
 800a3a4:	20000254 	.word	0x20000254

0800a3a8 <_malloc_r>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	1ccd      	adds	r5, r1, #3
 800a3ac:	f025 0503 	bic.w	r5, r5, #3
 800a3b0:	3508      	adds	r5, #8
 800a3b2:	2d0c      	cmp	r5, #12
 800a3b4:	bf38      	it	cc
 800a3b6:	250c      	movcc	r5, #12
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	db01      	blt.n	800a3c2 <_malloc_r+0x1a>
 800a3be:	42a9      	cmp	r1, r5
 800a3c0:	d903      	bls.n	800a3ca <_malloc_r+0x22>
 800a3c2:	230c      	movs	r3, #12
 800a3c4:	6033      	str	r3, [r6, #0]
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ca:	f000 f87d 	bl	800a4c8 <__malloc_lock>
 800a3ce:	4921      	ldr	r1, [pc, #132]	; (800a454 <_malloc_r+0xac>)
 800a3d0:	680a      	ldr	r2, [r1, #0]
 800a3d2:	4614      	mov	r4, r2
 800a3d4:	b99c      	cbnz	r4, 800a3fe <_malloc_r+0x56>
 800a3d6:	4f20      	ldr	r7, [pc, #128]	; (800a458 <_malloc_r+0xb0>)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	b923      	cbnz	r3, 800a3e6 <_malloc_r+0x3e>
 800a3dc:	4621      	mov	r1, r4
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f000 f862 	bl	800a4a8 <_sbrk_r>
 800a3e4:	6038      	str	r0, [r7, #0]
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f000 f85d 	bl	800a4a8 <_sbrk_r>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d123      	bne.n	800a43a <_malloc_r+0x92>
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	6033      	str	r3, [r6, #0]
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f000 f86c 	bl	800a4d4 <__malloc_unlock>
 800a3fc:	e7e3      	b.n	800a3c6 <_malloc_r+0x1e>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	1b5b      	subs	r3, r3, r5
 800a402:	d417      	bmi.n	800a434 <_malloc_r+0x8c>
 800a404:	2b0b      	cmp	r3, #11
 800a406:	d903      	bls.n	800a410 <_malloc_r+0x68>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	441c      	add	r4, r3
 800a40c:	6025      	str	r5, [r4, #0]
 800a40e:	e004      	b.n	800a41a <_malloc_r+0x72>
 800a410:	6863      	ldr	r3, [r4, #4]
 800a412:	42a2      	cmp	r2, r4
 800a414:	bf0c      	ite	eq
 800a416:	600b      	streq	r3, [r1, #0]
 800a418:	6053      	strne	r3, [r2, #4]
 800a41a:	4630      	mov	r0, r6
 800a41c:	f000 f85a 	bl	800a4d4 <__malloc_unlock>
 800a420:	f104 000b 	add.w	r0, r4, #11
 800a424:	1d23      	adds	r3, r4, #4
 800a426:	f020 0007 	bic.w	r0, r0, #7
 800a42a:	1ac2      	subs	r2, r0, r3
 800a42c:	d0cc      	beq.n	800a3c8 <_malloc_r+0x20>
 800a42e:	1a1b      	subs	r3, r3, r0
 800a430:	50a3      	str	r3, [r4, r2]
 800a432:	e7c9      	b.n	800a3c8 <_malloc_r+0x20>
 800a434:	4622      	mov	r2, r4
 800a436:	6864      	ldr	r4, [r4, #4]
 800a438:	e7cc      	b.n	800a3d4 <_malloc_r+0x2c>
 800a43a:	1cc4      	adds	r4, r0, #3
 800a43c:	f024 0403 	bic.w	r4, r4, #3
 800a440:	42a0      	cmp	r0, r4
 800a442:	d0e3      	beq.n	800a40c <_malloc_r+0x64>
 800a444:	1a21      	subs	r1, r4, r0
 800a446:	4630      	mov	r0, r6
 800a448:	f000 f82e 	bl	800a4a8 <_sbrk_r>
 800a44c:	3001      	adds	r0, #1
 800a44e:	d1dd      	bne.n	800a40c <_malloc_r+0x64>
 800a450:	e7cf      	b.n	800a3f2 <_malloc_r+0x4a>
 800a452:	bf00      	nop
 800a454:	20000254 	.word	0x20000254
 800a458:	20000258 	.word	0x20000258

0800a45c <_realloc_r>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	4607      	mov	r7, r0
 800a460:	4614      	mov	r4, r2
 800a462:	460e      	mov	r6, r1
 800a464:	b921      	cbnz	r1, 800a470 <_realloc_r+0x14>
 800a466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a46a:	4611      	mov	r1, r2
 800a46c:	f7ff bf9c 	b.w	800a3a8 <_malloc_r>
 800a470:	b922      	cbnz	r2, 800a47c <_realloc_r+0x20>
 800a472:	f7ff ff49 	bl	800a308 <_free_r>
 800a476:	4625      	mov	r5, r4
 800a478:	4628      	mov	r0, r5
 800a47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47c:	f000 f830 	bl	800a4e0 <_malloc_usable_size_r>
 800a480:	42a0      	cmp	r0, r4
 800a482:	d20f      	bcs.n	800a4a4 <_realloc_r+0x48>
 800a484:	4621      	mov	r1, r4
 800a486:	4638      	mov	r0, r7
 800a488:	f7ff ff8e 	bl	800a3a8 <_malloc_r>
 800a48c:	4605      	mov	r5, r0
 800a48e:	2800      	cmp	r0, #0
 800a490:	d0f2      	beq.n	800a478 <_realloc_r+0x1c>
 800a492:	4631      	mov	r1, r6
 800a494:	4622      	mov	r2, r4
 800a496:	f7ff fbf7 	bl	8009c88 <memcpy>
 800a49a:	4631      	mov	r1, r6
 800a49c:	4638      	mov	r0, r7
 800a49e:	f7ff ff33 	bl	800a308 <_free_r>
 800a4a2:	e7e9      	b.n	800a478 <_realloc_r+0x1c>
 800a4a4:	4635      	mov	r5, r6
 800a4a6:	e7e7      	b.n	800a478 <_realloc_r+0x1c>

0800a4a8 <_sbrk_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_sbrk_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f6 fd3e 	bl	8000f34 <_sbrk>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_sbrk_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_sbrk_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	2000068c 	.word	0x2000068c

0800a4c8 <__malloc_lock>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__malloc_lock+0x8>)
 800a4ca:	f000 b811 	b.w	800a4f0 <__retarget_lock_acquire_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	20000694 	.word	0x20000694

0800a4d4 <__malloc_unlock>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__malloc_unlock+0x8>)
 800a4d6:	f000 b80c 	b.w	800a4f2 <__retarget_lock_release_recursive>
 800a4da:	bf00      	nop
 800a4dc:	20000694 	.word	0x20000694

0800a4e0 <_malloc_usable_size_r>:
 800a4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e4:	1f18      	subs	r0, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfbc      	itt	lt
 800a4ea:	580b      	ldrlt	r3, [r1, r0]
 800a4ec:	18c0      	addlt	r0, r0, r3
 800a4ee:	4770      	bx	lr

0800a4f0 <__retarget_lock_acquire_recursive>:
 800a4f0:	4770      	bx	lr

0800a4f2 <__retarget_lock_release_recursive>:
 800a4f2:	4770      	bx	lr

0800a4f4 <_init>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	bf00      	nop
 800a4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fa:	bc08      	pop	{r3}
 800a4fc:	469e      	mov	lr, r3
 800a4fe:	4770      	bx	lr

0800a500 <_fini>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	bf00      	nop
 800a504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a506:	bc08      	pop	{r3}
 800a508:	469e      	mov	lr, r3
 800a50a:	4770      	bx	lr

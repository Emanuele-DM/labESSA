
LAB04_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b4  080050b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050bc  080050bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080050c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08005134  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005134  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee6c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d44  00000000  00000000  0002ef0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000318b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016673  00000000  00000000  00032468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de70  00000000  00000000  00048adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd89  00000000  00000000  0005694b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e46d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  000e4728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f1c 	.word	0x08004f1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004f1c 	.word	0x08004f1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fe16 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f862 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f9e0 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f9b4 	bl	8000904 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800059c:	f000 f93a 	bl	8000814 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005a0:	f000 f8c6 	bl	8000730 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCR1 = 20;
 80005a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a8:	2214      	movs	r2, #20
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	481c      	ldr	r0, [pc, #112]	; (8000620 <main+0x98>)
 80005b0:	f001 ff06 	bl	80023c0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 80005b4:	2100      	movs	r1, #0
 80005b6:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0x9c>)
 80005b8:	f002 f85a 	bl	8002670 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)readBuf, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	491a      	ldr	r1, [pc, #104]	; (8000628 <main+0xa0>)
 80005c0:	481a      	ldr	r0, [pc, #104]	; (800062c <main+0xa4>)
 80005c2:	f003 f949 	bl	8003858 <HAL_UART_Receive_IT>
	  //	  }
	  //	  if (number_of_overflows != 0){
	  //		  sprintf(msg, "Overflow number: %u\r\n", number_of_overflows);
	  //		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
	  //	  }
	  if (captured_edge != NONE){
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <main+0xa8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <main+0x54>
		  processCapturedData(captured_edge);
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <main+0xa8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa8c 	bl	8000af4 <processCapturedData>
	  }
	  if (number_of_overflows > 100){
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <main+0xac>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b64      	cmp	r3, #100	; 0x64
 80005e4:	d9ef      	bls.n	80005c6 <main+0x3e>
		  cnt_1 = 0;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <main+0xb0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	801a      	strh	r2, [r3, #0]
		  cnt_2 = 0;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <main+0xb4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	801a      	strh	r2, [r3, #0]
		  cnt_fall = 0;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <main+0xb8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	801a      	strh	r2, [r3, #0]
		  delta_cnt = 0;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <main+0xbc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	801a      	strh	r2, [r3, #0]
		  delta_fall = 0;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <main+0xc0>)
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
		  dutycycle = 0;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <main+0xc4>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		  frequency = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <main+0xc8>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]
		  number_of_overflows = 0;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <main+0xac>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
		  counting_overflows = 0;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <main+0xcc>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	  if (captured_edge != NONE){
 800061c:	e7d3      	b.n	80005c6 <main+0x3e>
 800061e:	bf00      	nop
 8000620:	2000011c 	.word	0x2000011c
 8000624:	200000d0 	.word	0x200000d0
 8000628:	200001a8 	.word	0x200001a8
 800062c:	20000164 	.word	0x20000164
 8000630:	2000008e 	.word	0x2000008e
 8000634:	2000008c 	.word	0x2000008c
 8000638:	20000090 	.word	0x20000090
 800063c:	20000092 	.word	0x20000092
 8000640:	20000094 	.word	0x20000094
 8000644:	20000096 	.word	0x20000096
 8000648:	20000098 	.word	0x20000098
 800064c:	2000011b 	.word	0x2000011b
 8000650:	200000ac 	.word	0x200000ac
 8000654:	2000009d 	.word	0x2000009d

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ff94 	bl	8004594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xd0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <SystemClock_Config+0xd0>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xd0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd4>)
 80006a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006d0:	2354      	movs	r3, #84	; 0x54
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f951 	bl	8001988 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ec:	f000 fbc2 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fbb2 	bl	8001e78 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071a:	f000 fbab 	bl	8000e74 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_TIM2_Init+0xe0>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4199;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_TIM2_Init+0xe0>)
 800076a:	f241 0267 	movw	r2, #4199	; 0x1067
 800076e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_TIM2_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_TIM2_Init+0xe0>)
 8000778:	2263      	movs	r2, #99	; 0x63
 800077a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_TIM2_Init+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_TIM2_Init+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000788:	4821      	ldr	r0, [pc, #132]	; (8000810 <MX_TIM2_Init+0xe0>)
 800078a:	f001 fd71 	bl	8002270 <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000794:	f000 fb6e 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_TIM2_Init+0xe0>)
 80007a6:	f002 fa7d 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007b0:	f000 fb60 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <MX_TIM2_Init+0xe0>)
 80007b6:	f001 fdaa 	bl	800230e <HAL_TIM_OC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007c0:	f000 fb58 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4619      	mov	r1, r3
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <MX_TIM2_Init+0xe0>)
 80007d4:	f002 ff2c 	bl	8003630 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007de:	f000 fb49 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_TIM2_Init+0xe0>)
 80007fa:	f002 f95b 	bl	8002ab4 <HAL_TIM_OC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000804:	f000 fb36 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3738      	adds	r7, #56	; 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000011c 	.word	0x2000011c

08000814 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */
//  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <MX_TIM3_Init+0xe8>)
 8000840:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <MX_TIM3_Init+0xec>)
 8000842:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_TIM3_Init+0xe8>)
 8000846:	22a7      	movs	r2, #167	; 0xa7
 8000848:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_TIM3_Init+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_TIM3_Init+0xe8>)
 8000852:	f242 720f 	movw	r2, #9999	; 0x270f
 8000856:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_TIM3_Init+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_TIM3_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000864:	4825      	ldr	r0, [pc, #148]	; (80008fc <MX_TIM3_Init+0xe8>)
 8000866:	f001 fd03 	bl	8002270 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 fb00 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	4619      	mov	r1, r3
 8000880:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_TIM3_Init+0xe8>)
 8000882:	f002 fa0f 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 faf2 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000890:	481a      	ldr	r0, [pc, #104]	; (80008fc <MX_TIM3_Init+0xe8>)
 8000892:	f001 fe93 	bl	80025bc <HAL_TIM_IC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 faea 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4813      	ldr	r0, [pc, #76]	; (80008fc <MX_TIM3_Init+0xe8>)
 80008b0:	f002 febe 	bl	8003630 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80008ba:	f000 fadb 	bl	8000e74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80008be:	230a      	movs	r3, #10
 80008c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008c2:	2301      	movs	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_TIM3_Init+0xe8>)
 80008d6:	f002 f949 	bl	8002b6c <HAL_TIM_IC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80008e0:	f000 fac8 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE); //Enables the TIM_IT_UPDATE interrupt -> enables PeriodElapsed callback
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_TIM3_Init+0xe8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <MX_TIM3_Init+0xe8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0201 	orr.w	r2, r2, #1
 80008f2:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000d0 	.word	0x200000d0
 8000900:	40000400 	.word	0x40000400

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f002 fefa 	bl	8003734 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 fa95 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000164 	.word	0x20000164
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_GPIO_Init+0xfc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	481d      	ldr	r0, [pc, #116]	; (8000a58 <MX_GPIO_Init+0x100>)
 80009e4:	f000 ff9c 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONDA_QUADRA_GPIO_Port, ONDA_QUADRA_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	481b      	ldr	r0, [pc, #108]	; (8000a5c <MX_GPIO_Init+0x104>)
 80009f0:	f000 ff96 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_GPIO_Init+0x104>)
 8000a0c:	f000 fdec 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a10:	2320      	movs	r3, #32
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_GPIO_Init+0x100>)
 8000a28:	f000 fdde 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ONDA_QUADRA_Pin */
  GPIO_InitStruct.Pin = ONDA_QUADRA_Pin;
 8000a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ONDA_QUADRA_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0x104>)
 8000a46:	f000 fdcf 	bl	80015e8 <HAL_GPIO_Init>

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020800 	.word	0x40020800

08000a60 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef * htim) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d116      	bne.n	8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x40>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8000a78:	f000 ff6b 	bl	8001952 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	480b      	ldr	r0, [pc, #44]	; (8000aac <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000a80:	f000 ff67 	bl	8001952 <HAL_GPIO_TogglePin>
		if (TIM2->CCR1 == 30) {
 8000a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2b1e      	cmp	r3, #30
 8000a8c:	d104      	bne.n	8000a98 <HAL_TIM_OC_DelayElapsedCallback+0x38>
			TIM2->CCR1 = 20;
 8000a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a92:	2214      	movs	r2, #20
 8000a94:	635a      	str	r2, [r3, #52]	; 0x34
		}
		else TIM2->CCR1 = 30;
	}
}
 8000a96:	e003      	b.n	8000aa0 <HAL_TIM_OC_DelayElapsedCallback+0x40>
		else TIM2->CCR1 = 30;
 8000a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a9c:	221e      	movs	r2, #30
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000abc:	f000 ff18 	bl	80018f0 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d103      	bne.n	8000ace <HAL_TIM_IC_CaptureCallback+0x1e>
		captured_edge = RISING;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
		captured_edge = FALLING;
	}
//	processCapturedData(captured_edge);
}
 8000acc:	e009      	b.n	8000ae2 <HAL_TIM_IC_CaptureCallback+0x32>
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000ad2:	f000 ff0d 	bl	80018f0 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <HAL_TIM_IC_CaptureCallback+0x32>
		captured_edge = FALLING;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	701a      	strb	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40020000 	.word	0x40020000
 8000af0:	2000008e 	.word	0x2000008e

08000af4 <processCapturedData>:

void processCapturedData(uint8_t captured_edge){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	switch (captured_edge) {
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d003      	beq.n	8000b0c <processCapturedData+0x18>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	f000 80b4 	beq.w	8000c72 <processCapturedData+0x17e>
 8000b0a:	e0cf      	b.n	8000cac <processCapturedData+0x1b8>
	case RISING:
		if (cnt_1 == 0 && cnt_2 == 0 && cnt_fall == 0){
 8000b0c:	4b78      	ldr	r3, [pc, #480]	; (8000cf0 <processCapturedData+0x1fc>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d120      	bne.n	8000b58 <processCapturedData+0x64>
 8000b16:	4b77      	ldr	r3, [pc, #476]	; (8000cf4 <processCapturedData+0x200>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d11b      	bne.n	8000b58 <processCapturedData+0x64>
 8000b20:	4b75      	ldr	r3, [pc, #468]	; (8000cf8 <processCapturedData+0x204>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d116      	bne.n	8000b58 <processCapturedData+0x64>
			counting_overflows = 0;
 8000b2a:	4b74      	ldr	r3, [pc, #464]	; (8000cfc <processCapturedData+0x208>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
			number_of_overflows = 0;
 8000b30:	4b73      	ldr	r3, [pc, #460]	; (8000d00 <processCapturedData+0x20c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
			cnt_1 = TIM3->CCR1;
 8000b36:	4b73      	ldr	r3, [pc, #460]	; (8000d04 <processCapturedData+0x210>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b6c      	ldr	r3, [pc, #432]	; (8000cf0 <processCapturedData+0x1fc>)
 8000b3e:	801a      	strh	r2, [r3, #0]
//			sprintf(msg, "cnt_t1: %u\r\n", cnt_1);
//			HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
			counting_fall_overflows = 1;
 8000b40:	4b71      	ldr	r3, [pc, #452]	; (8000d08 <processCapturedData+0x214>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
			counting_overflows = 1;
 8000b46:	4b6d      	ldr	r3, [pc, #436]	; (8000cfc <processCapturedData+0x208>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
			variables_reset = 0;
 8000b4c:	4b6f      	ldr	r3, [pc, #444]	; (8000d0c <processCapturedData+0x218>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
			captured_edge = NONE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	71fb      	strb	r3, [r7, #7]
			else if (frequency < min_frequency) min_frequency = frequency;
			delta_fall = cnt_fall + number_of_overflows_fall*10000 - cnt_1;
			dutycycle = 100*delta_fall/delta_cnt;
			captured_edge = NONE;
		}
		break;
 8000b56:	e0a6      	b.n	8000ca6 <processCapturedData+0x1b2>
		else if (cnt_fall != 0 && cnt_2 == 0 && cnt_1 != 0){
 8000b58:	4b67      	ldr	r3, [pc, #412]	; (8000cf8 <processCapturedData+0x204>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 80a1 	beq.w	8000ca6 <processCapturedData+0x1b2>
 8000b64:	4b63      	ldr	r3, [pc, #396]	; (8000cf4 <processCapturedData+0x200>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 809b 	bne.w	8000ca6 <processCapturedData+0x1b2>
 8000b70:	4b5f      	ldr	r3, [pc, #380]	; (8000cf0 <processCapturedData+0x1fc>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8095 	beq.w	8000ca6 <processCapturedData+0x1b2>
			cnt_2 = TIM3->CCR1;
 8000b7c:	4b61      	ldr	r3, [pc, #388]	; (8000d04 <processCapturedData+0x210>)
 8000b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <processCapturedData+0x200>)
 8000b84:	801a      	strh	r2, [r3, #0]
			counting_overflows = 0;
 8000b86:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <processCapturedData+0x208>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
			delta_cnt = cnt_2 + number_of_overflows*10000 - cnt_1;
 8000b8c:	4b5c      	ldr	r3, [pc, #368]	; (8000d00 <processCapturedData+0x20c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	0152      	lsls	r2, r2, #5
 8000b98:	1ad2      	subs	r2, r2, r3
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	0091      	lsls	r1, r2, #2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b51      	ldr	r3, [pc, #324]	; (8000cf4 <processCapturedData+0x200>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b4e      	ldr	r3, [pc, #312]	; (8000cf0 <processCapturedData+0x1fc>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <processCapturedData+0x21c>)
 8000bc2:	801a      	strh	r2, [r3, #0]
			frequency = 50*10000/delta_cnt;
 8000bc4:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <processCapturedData+0x21c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <processCapturedData+0x220>)
 8000bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <processCapturedData+0x224>)
 8000bd6:	801a      	strh	r2, [r3, #0]
			if (frequency > max_frequency) max_frequency = frequency;
 8000bd8:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <processCapturedData+0x228>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <processCapturedData+0x224>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d206      	bcs.n	8000bf8 <processCapturedData+0x104>
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <processCapturedData+0x224>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <processCapturedData+0x228>)
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e00e      	b.n	8000c16 <processCapturedData+0x122>
			else if (frequency < min_frequency) min_frequency = frequency;
 8000bf8:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <processCapturedData+0x22c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <processCapturedData+0x224>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d905      	bls.n	8000c16 <processCapturedData+0x122>
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <processCapturedData+0x224>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <processCapturedData+0x22c>)
 8000c14:	701a      	strb	r2, [r3, #0]
			delta_fall = cnt_fall + number_of_overflows_fall*10000 - cnt_1;
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <processCapturedData+0x230>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	0152      	lsls	r2, r2, #5
 8000c22:	1ad2      	subs	r2, r2, r3
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	461a      	mov	r2, r3
 8000c2a:	0091      	lsls	r1, r2, #2
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4413      	add	r3, r2
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <processCapturedData+0x204>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <processCapturedData+0x1fc>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <processCapturedData+0x234>)
 8000c4c:	801a      	strh	r2, [r3, #0]
			dutycycle = 100*delta_fall/delta_cnt;
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <processCapturedData+0x234>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	2364      	movs	r3, #100	; 0x64
 8000c58:	fb03 f302 	mul.w	r3, r3, r2
 8000c5c:	4a2c      	ldr	r2, [pc, #176]	; (8000d10 <processCapturedData+0x21c>)
 8000c5e:	8812      	ldrh	r2, [r2, #0]
 8000c60:	b292      	uxth	r2, r2
 8000c62:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <processCapturedData+0x238>)
 8000c6a:	701a      	strb	r2, [r3, #0]
			captured_edge = NONE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
		break;
 8000c70:	e019      	b.n	8000ca6 <processCapturedData+0x1b2>
	case FALLING:
		if (cnt_1 != 0 && cnt_2 == 0 && cnt_fall == 0){
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <processCapturedData+0x1fc>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d016      	beq.n	8000caa <processCapturedData+0x1b6>
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <processCapturedData+0x200>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d111      	bne.n	8000caa <processCapturedData+0x1b6>
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <processCapturedData+0x204>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10c      	bne.n	8000caa <processCapturedData+0x1b6>
			cnt_fall = TIM3->CCR1;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <processCapturedData+0x210>)
 8000c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <processCapturedData+0x204>)
 8000c98:	801a      	strh	r2, [r3, #0]
//			sprintf(msg, "cnt_fall: %u\r\n", cnt_fall);
//			HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
			captured_edge = NONE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
			counting_fall_overflows = 0;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <processCapturedData+0x214>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ca4:	e001      	b.n	8000caa <processCapturedData+0x1b6>
		break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <processCapturedData+0x1b8>
		break;
 8000caa:	bf00      	nop
	}
	if (frequency !=0 && dutycycle != 0){
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <processCapturedData+0x224>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d015      	beq.n	8000ce2 <processCapturedData+0x1ee>
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <processCapturedData+0x238>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d010      	beq.n	8000ce2 <processCapturedData+0x1ee>
		if(variables_reset != 1){
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <processCapturedData+0x218>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d00b      	beq.n	8000ce2 <processCapturedData+0x1ee>
			cnt_1 = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <processCapturedData+0x1fc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	801a      	strh	r2, [r3, #0]
			cnt_2 = 0;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <processCapturedData+0x200>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
			cnt_fall = 0;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <processCapturedData+0x204>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	801a      	strh	r2, [r3, #0]
			variables_reset = 1;
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <processCapturedData+0x218>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	20000092 	.word	0x20000092
 8000cf8:	20000094 	.word	0x20000094
 8000cfc:	2000009d 	.word	0x2000009d
 8000d00:	2000008c 	.word	0x2000008c
 8000d04:	40000400 	.word	0x40000400
 8000d08:	2000009c 	.word	0x2000009c
 8000d0c:	2000009e 	.word	0x2000009e
 8000d10:	20000096 	.word	0x20000096
 8000d14:	0007a120 	.word	0x0007a120
 8000d18:	200000ac 	.word	0x200000ac
 8000d1c:	2000009a 	.word	0x2000009a
 8000d20:	2000009b 	.word	0x2000009b
 8000d24:	2000008d 	.word	0x2000008d
 8000d28:	20000098 	.word	0x20000098
 8000d2c:	2000011b 	.word	0x2000011b

08000d30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d117      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x42>
//		if (capture_state == DONE) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		if (counting_overflows != 0) {
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d012      	beq.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x42>
			number_of_overflows++;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d58:	701a      	strb	r2, [r3, #0]
			if (counting_fall_overflows != 0) number_of_overflows_fall++;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d70:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40000400 	.word	0x40000400
 8000d84:	2000009d 	.word	0x2000009d
 8000d88:	2000008c 	.word	0x2000008c
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	2000008d 	.word	0x2000008d

08000d94 <processReceivedData>:

void processReceivedData(void){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	user_choice = atoi(readBuf);
 8000d98:	481e      	ldr	r0, [pc, #120]	; (8000e14 <processReceivedData+0x80>)
 8000d9a:	f003 fbcd 	bl	8004538 <atoi>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <processReceivedData+0x84>)
 8000da4:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	if (user_choice == 1){
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <processReceivedData+0x84>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d112      	bne.n	8000dd6 <processReceivedData+0x42>
		sprintf(msg, "Current frequency: %u\r\n", frequency);
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <processReceivedData+0x88>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	4919      	ldr	r1, [pc, #100]	; (8000e20 <processReceivedData+0x8c>)
 8000dba:	481a      	ldr	r0, [pc, #104]	; (8000e24 <processReceivedData+0x90>)
 8000dbc:	f003 fbf2 	bl	80045a4 <siprintf>
//		HAL_Delay(10);
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <processReceivedData+0x90>)
 8000dc2:	f7ff fa0d 	bl	80001e0 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4915      	ldr	r1, [pc, #84]	; (8000e24 <processReceivedData+0x90>)
 8000dce:	4816      	ldr	r0, [pc, #88]	; (8000e28 <processReceivedData+0x94>)
 8000dd0:	f002 fcfd 	bl	80037ce <HAL_UART_Transmit_IT>
		sprintf(msg, "Current duty cycle: %u\r\n", dutycycle);
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
		//			read_buffer_new = 0;
	}
	else {HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);}
}
 8000dd4:	e01b      	b.n	8000e0e <processReceivedData+0x7a>
	else if (user_choice == 2){
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <processReceivedData+0x84>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d112      	bne.n	8000e06 <processReceivedData+0x72>
		sprintf(msg, "Current duty cycle: %u\r\n", dutycycle);
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <processReceivedData+0x98>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	4911      	ldr	r1, [pc, #68]	; (8000e30 <processReceivedData+0x9c>)
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <processReceivedData+0x90>)
 8000dec:	f003 fbda 	bl	80045a4 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <processReceivedData+0x90>)
 8000df2:	f7ff f9f5 	bl	80001e0 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4909      	ldr	r1, [pc, #36]	; (8000e24 <processReceivedData+0x90>)
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <processReceivedData+0x94>)
 8000e00:	f002 fce5 	bl	80037ce <HAL_UART_Transmit_IT>
}
 8000e04:	e003      	b.n	8000e0e <processReceivedData+0x7a>
	else {HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);}
 8000e06:	2120      	movs	r1, #32
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <processReceivedData+0xa0>)
 8000e0a:	f000 fda2 	bl	8001952 <HAL_GPIO_TogglePin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001a8 	.word	0x200001a8
 8000e18:	2000009f 	.word	0x2000009f
 8000e1c:	200000ac 	.word	0x200000ac
 8000e20:	08004f34 	.word	0x08004f34
 8000e24:	200000b0 	.word	0x200000b0
 8000e28:	20000164 	.word	0x20000164
 8000e2c:	2000011b 	.word	0x2000011b
 8000e30:	08004f4c 	.word	0x08004f4c
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	//	read_buffer_new = 1;
	//	  if(read_buffer_new == 1) {
	//		  user_choice = atoi(readBuf);
	//	  }
	processReceivedData();
 8000e54:	f7ff ff9e 	bl	8000d94 <processReceivedData>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)readBuf, 1);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4904      	ldr	r1, [pc, #16]	; (8000e6c <HAL_UART_RxCpltCallback+0x20>)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <HAL_UART_RxCpltCallback+0x24>)
 8000e5e:	f002 fcfb 	bl	8003858 <HAL_UART_Receive_IT>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001a8 	.word	0x200001a8
 8000e70:	20000164 	.word	0x20000164

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f000 fabe 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef0:	d116      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	201c      	movs	r0, #28
 8000f14:	f000 fa9f 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f18:	201c      	movs	r0, #28
 8000f1a:	f000 fab8 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f1e:	e038      	b.n	8000f92 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <HAL_TIM_Base_MspInit+0xd0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d133      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_TIM_Base_MspInit+0xcc>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_CH1_Pin;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f72:	2302      	movs	r3, #2
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <HAL_TIM_Base_MspInit+0xd4>)
 8000f7e:	f000 fb33 	bl	80015e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	201d      	movs	r0, #29
 8000f88:	f000 fa65 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f8c:	201d      	movs	r0, #29
 8000f8e:	f000 fa7e 	bl	800148e <HAL_NVIC_EnableIRQ>
}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_UART_MspInit+0x94>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d133      	bne.n	8001032 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_UART_MspInit+0x98>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001002:	230c      	movs	r3, #12
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001012:	2307      	movs	r3, #7
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <HAL_UART_MspInit+0x9c>)
 800101e:	f000 fae3 	bl	80015e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	2026      	movs	r0, #38	; 0x26
 8001028:	f000 fa15 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800102c:	2026      	movs	r0, #38	; 0x26
 800102e:	f000 fa2e 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40004400 	.word	0x40004400
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 f8e4 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <TIM2_IRQHandler+0x10>)
 80010a2:	f001 fbff 	bl	80028a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000011c 	.word	0x2000011c

080010b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <TIM3_IRQHandler+0x10>)
 80010b6:	f001 fbf5 	bl	80028a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000d0 	.word	0x200000d0

080010c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <USART2_IRQHandler+0x10>)
 80010ca:	f002 fbf5 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000164 	.word	0x20000164

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f003 fa1a 	bl	8004540 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20018000 	.word	0x20018000
 8001138:	00000400 	.word	0x00000400
 800113c:	200000a0 	.word	0x200000a0
 8001140:	200001c0 	.word	0x200001c0

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001184:	4c0b      	ldr	r4, [pc, #44]	; (80011b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001192:	f7ff ffd7 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f003 f9d9 	bl	800454c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff f9f5 	bl	8000588 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011ac:	080050c4 	.word	0x080050c4
  ldr r2, =_sbss
 80011b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b4:	200001c0 	.word	0x200001c0

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f92b 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fe46 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f943 	bl	80014aa <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f90b 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000008 	.word	0x20000008
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	200001ac 	.word	0x200001ac

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200001ac 	.word	0x200001ac

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff feda 	bl	8001288 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d008      	beq.n	80014f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e052      	b.n	800159a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0216 	bic.w	r2, r2, #22
 8001502:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001512:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <HAL_DMA_Abort+0x62>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0208 	bic.w	r2, r2, #8
 8001532:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001544:	e013      	b.n	800156e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001546:	f7ff fe9f 	bl	8001288 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b05      	cmp	r3, #5
 8001552:	d90c      	bls.n	800156e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e015      	b.n	800159a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e4      	bne.n	8001546 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	223f      	movs	r2, #63	; 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d004      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e00c      	b.n	80015da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2205      	movs	r2, #5
 80015c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e159      	b.n	80018b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8148 	bne.w	80018b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d005      	beq.n	800163a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	2b02      	cmp	r3, #2
 8001638:	d130      	bne.n	800169c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0201 	and.w	r2, r3, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d017      	beq.n	80016d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d123      	bne.n	800172c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a2 	beq.w	80018b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_GPIO_Init+0x2e8>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <HAL_GPIO_Init+0x2e8>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b54      	ldr	r3, [pc, #336]	; (80018d0 <HAL_GPIO_Init+0x2e8>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178a:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_GPIO_Init+0x2ec>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a49      	ldr	r2, [pc, #292]	; (80018d8 <HAL_GPIO_Init+0x2f0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x202>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_GPIO_Init+0x2f4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x1fe>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a47      	ldr	r2, [pc, #284]	; (80018e0 <HAL_GPIO_Init+0x2f8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x1fa>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <HAL_GPIO_Init+0x2fc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x1f6>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_GPIO_Init+0x300>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x1f2>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e008      	b.n	80017ec <HAL_GPIO_Init+0x204>
 80017da:	2307      	movs	r3, #7
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x204>
 80017de:	2303      	movs	r3, #3
 80017e0:	e004      	b.n	80017ec <HAL_GPIO_Init+0x204>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_Init+0x204>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_Init+0x204>
 80017ea:	2300      	movs	r3, #0
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f002 0203 	and.w	r2, r2, #3
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	4093      	lsls	r3, r2
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017fc:	4935      	ldr	r1, [pc, #212]	; (80018d4 <HAL_GPIO_Init+0x2ec>)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_GPIO_Init+0x304>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800182e:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x304>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_GPIO_Init+0x304>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001858:	4a24      	ldr	r2, [pc, #144]	; (80018ec <HAL_GPIO_Init+0x304>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_GPIO_Init+0x304>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_GPIO_Init+0x304>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_GPIO_Init+0x304>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_GPIO_Init+0x304>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3301      	adds	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	f67f aea2 	bls.w	8001604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40013800 	.word	0x40013800
 80018d8:	40020000 	.word	0x40020000
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40013c00 	.word	0x40013c00

080018f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e001      	b.n	8001912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
 800192c:	4613      	mov	r3, r2
 800192e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001930:	787b      	ldrb	r3, [r7, #1]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800193c:	e003      	b.n	8001946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	041a      	lsls	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	619a      	str	r2, [r3, #24]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001964:	887a      	ldrh	r2, [r7, #2]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43d9      	mvns	r1, r3
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	400b      	ands	r3, r1
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	619a      	str	r2, [r3, #24]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e264      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d075      	beq.n	8001a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a6:	4ba3      	ldr	r3, [pc, #652]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d00c      	beq.n	80019cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4ba0      	ldr	r3, [pc, #640]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d112      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d05b      	beq.n	8001a90 <HAL_RCC_OscConfig+0x108>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d157      	bne.n	8001a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e23f      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x74>
 80019ee:	4b91      	ldr	r3, [pc, #580]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a90      	ldr	r2, [pc, #576]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xb0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b8b      	ldr	r3, [pc, #556]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a8a      	ldr	r2, [pc, #552]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a87      	ldr	r2, [pc, #540]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xb0>
 8001a20:	4b84      	ldr	r3, [pc, #528]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a83      	ldr	r2, [pc, #524]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a80      	ldr	r2, [pc, #512]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fc22 	bl	8001288 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fc1e 	bl	8001288 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e204      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xc0>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fc0e 	bl	8001288 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fc0a 	bl	8001288 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1f0      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0xe8>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x152>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1c4      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4952      	ldr	r1, [pc, #328]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_RCC_OscConfig+0x2b0>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fbc3 	bl	8001288 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fbbf 	bl	8001288 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1a5      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4940      	ldr	r1, [pc, #256]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_RCC_OscConfig+0x2b0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fba2 	bl	8001288 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fb9e 	bl	8001288 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e184      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d030      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_OscConfig+0x2b4>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff fb82 	bl	8001288 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fb7e 	bl	8001288 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e164      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x200>
 8001ba6:	e015      	b.n	8001bd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_OscConfig+0x2b4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff fb6b 	bl	8001288 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fb67 	bl	8001288 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e14d      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a0 	beq.w	8001d22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x2b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d121      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_RCC_OscConfig+0x2b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_RCC_OscConfig+0x2b8>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb2d 	bl	8001288 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	e011      	b.n	8001c56 <HAL_RCC_OscConfig+0x2ce>
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	42470000 	.word	0x42470000
 8001c3c:	42470e80 	.word	0x42470e80
 8001c40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c44:	f7ff fb20 	bl	8001288 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e106      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x4e4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d106      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
 8001c6a:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a80      	ldr	r2, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	e01c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x32a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d10c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	e00b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x32a>
 8001c9a:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a74      	ldr	r2, [pc, #464]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca6:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a71      	ldr	r2, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d015      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff fae5 	bl	8001288 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff fae1 	bl	8001288 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0c5      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ee      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x33a>
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff facf 	bl	8001288 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff facb 	bl	8001288 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0af      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ee      	bne.n	8001cee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d105      	bne.n	8001d22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a55      	ldr	r2, [pc, #340]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 809b 	beq.w	8001e62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d05c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d141      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x4ec>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fa9f 	bl	8001288 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff fa9b 	bl	8001288 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e081      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	061b      	lsls	r3, r3, #24
 8001d90:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <HAL_RCC_OscConfig+0x4ec>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fa74 	bl	8001288 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff fa70 	bl	8001288 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e056      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x41c>
 8001dc2:	e04e      	b.n	8001e62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCC_OscConfig+0x4ec>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff fa5d 	bl	8001288 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fa59 	bl	8001288 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e03f      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
 8001df0:	e037      	b.n	8001e62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e032      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d028      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d121      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d11a      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e2e:	4013      	ands	r3, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470060 	.word	0x42470060

08001e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0cc      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b68      	ldr	r3, [pc, #416]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d90c      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b65      	ldr	r3, [pc, #404]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b8      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	494d      	ldr	r1, [pc, #308]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d044      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d119      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e07f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e067      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4934      	ldr	r1, [pc, #208]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f68:	f7ff f98e 	bl	8001288 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7ff f98a 	bl	8001288 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e04f      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d20c      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e032      	b.n	8002026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4916      	ldr	r1, [pc, #88]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffe:	f000 f821 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002002:	4602      	mov	r2, r0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	490a      	ldr	r1, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	5ccb      	ldrb	r3, [r1, r3]
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f8ee 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00
 8002034:	40023800 	.word	0x40023800
 8002038:	08004f68 	.word	0x08004f68
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800205c:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d00d      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x40>
 8002068:	2b08      	cmp	r3, #8
 800206a:	f200 80bd 	bhi.w	80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x34>
 8002072:	2b04      	cmp	r3, #4
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x3a>
 8002076:	e0b7      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b61      	ldr	r3, [pc, #388]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800207a:	60bb      	str	r3, [r7, #8]
       break;
 800207c:	e0b7      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207e:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002080:	60bb      	str	r3, [r7, #8]
      break;
 8002082:	e0b4      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800208c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d04d      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209a:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	461a      	mov	r2, r3
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	ea02 0800 	and.w	r8, r2, r0
 80020b2:	ea03 0901 	and.w	r9, r3, r1
 80020b6:	4640      	mov	r0, r8
 80020b8:	4649      	mov	r1, r9
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	014b      	lsls	r3, r1, #5
 80020c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020c8:	0142      	lsls	r2, r0, #5
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	ebb0 0008 	subs.w	r0, r0, r8
 80020d2:	eb61 0109 	sbc.w	r1, r1, r9
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	018b      	lsls	r3, r1, #6
 80020e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020e4:	0182      	lsls	r2, r0, #6
 80020e6:	1a12      	subs	r2, r2, r0
 80020e8:	eb63 0301 	sbc.w	r3, r3, r1
 80020ec:	f04f 0000 	mov.w	r0, #0
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	00d9      	lsls	r1, r3, #3
 80020f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020fa:	00d0      	lsls	r0, r2, #3
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	eb12 0208 	adds.w	r2, r2, r8
 8002104:	eb43 0309 	adc.w	r3, r3, r9
 8002108:	f04f 0000 	mov.w	r0, #0
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	0259      	lsls	r1, r3, #9
 8002112:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002116:	0250      	lsls	r0, r2, #9
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	f7fe f8b2 	bl	8000290 <__aeabi_uldivmod>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4613      	mov	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e04a      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	461a      	mov	r2, r3
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	ea02 0400 	and.w	r4, r2, r0
 800214e:	ea03 0501 	and.w	r5, r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	014b      	lsls	r3, r1, #5
 8002160:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002164:	0142      	lsls	r2, r0, #5
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	1b00      	subs	r0, r0, r4
 800216c:	eb61 0105 	sbc.w	r1, r1, r5
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	018b      	lsls	r3, r1, #6
 800217a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800217e:	0182      	lsls	r2, r0, #6
 8002180:	1a12      	subs	r2, r2, r0
 8002182:	eb63 0301 	sbc.w	r3, r3, r1
 8002186:	f04f 0000 	mov.w	r0, #0
 800218a:	f04f 0100 	mov.w	r1, #0
 800218e:	00d9      	lsls	r1, r3, #3
 8002190:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002194:	00d0      	lsls	r0, r2, #3
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	1912      	adds	r2, r2, r4
 800219c:	eb45 0303 	adc.w	r3, r5, r3
 80021a0:	f04f 0000 	mov.w	r0, #0
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	0299      	lsls	r1, r3, #10
 80021aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ae:	0290      	lsls	r0, r2, #10
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	f7fe f866 	bl	8000290 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	60bb      	str	r3, [r7, #8]
      break;
 80021e6:	e002      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021ea:	60bb      	str	r3, [r7, #8]
      break;
 80021ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ee:	68bb      	ldr	r3, [r7, #8]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000000 	.word	0x20000000

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	08004f78 	.word	0x08004f78

08002248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800224c:	f7ff ffdc 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0b5b      	lsrs	r3, r3, #13
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK2Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	08004f78 	.word	0x08004f78

08002270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e041      	b.n	8002306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fe1a 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 fdd4 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e041      	b.n	80023a4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f839 	bl	80023ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f000 fd85 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_TIM_OC_Start_IT+0x28>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e022      	b.n	800242e <HAL_TIM_OC_Start_IT+0x6e>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d109      	bne.n	8002402 <HAL_TIM_OC_Start_IT+0x42>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e015      	b.n	800242e <HAL_TIM_OC_Start_IT+0x6e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d109      	bne.n	800241c <HAL_TIM_OC_Start_IT+0x5c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e008      	b.n	800242e <HAL_TIM_OC_Start_IT+0x6e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0b3      	b.n	800259e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <HAL_TIM_OC_Start_IT+0x86>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002444:	e013      	b.n	800246e <HAL_TIM_OC_Start_IT+0xae>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b04      	cmp	r3, #4
 800244a:	d104      	bne.n	8002456 <HAL_TIM_OC_Start_IT+0x96>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002454:	e00b      	b.n	800246e <HAL_TIM_OC_Start_IT+0xae>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d104      	bne.n	8002466 <HAL_TIM_OC_Start_IT+0xa6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002464:	e003      	b.n	800246e <HAL_TIM_OC_Start_IT+0xae>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d841      	bhi.n	80024f8 <HAL_TIM_OC_Start_IT+0x138>
 8002474:	a201      	add	r2, pc, #4	; (adr r2, 800247c <HAL_TIM_OC_Start_IT+0xbc>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	080024b1 	.word	0x080024b1
 8002480:	080024f9 	.word	0x080024f9
 8002484:	080024f9 	.word	0x080024f9
 8002488:	080024f9 	.word	0x080024f9
 800248c:	080024c3 	.word	0x080024c3
 8002490:	080024f9 	.word	0x080024f9
 8002494:	080024f9 	.word	0x080024f9
 8002498:	080024f9 	.word	0x080024f9
 800249c:	080024d5 	.word	0x080024d5
 80024a0:	080024f9 	.word	0x080024f9
 80024a4:	080024f9 	.word	0x080024f9
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	080024e7 	.word	0x080024e7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0202 	orr.w	r2, r2, #2
 80024be:	60da      	str	r2, [r3, #12]
      break;
 80024c0:	e01d      	b.n	80024fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0204 	orr.w	r2, r2, #4
 80024d0:	60da      	str	r2, [r3, #12]
      break;
 80024d2:	e014      	b.n	80024fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0208 	orr.w	r2, r2, #8
 80024e2:	60da      	str	r2, [r3, #12]
      break;
 80024e4:	e00b      	b.n	80024fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0210 	orr.w	r2, r2, #16
 80024f4:	60da      	str	r2, [r3, #12]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d14b      	bne.n	800259c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f001 f869 	bl	80035e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d107      	bne.n	800252c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_TIM_OC_Start_IT+0x1e8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_TIM_OC_Start_IT+0x1a8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d013      	beq.n	8002568 <HAL_TIM_OC_Start_IT+0x1a8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_TIM_OC_Start_IT+0x1ec>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_TIM_OC_Start_IT+0x1a8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_TIM_OC_Start_IT+0x1f0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_TIM_OC_Start_IT+0x1a8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_TIM_OC_Start_IT+0x1f4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_TIM_OC_Start_IT+0x1a8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <HAL_TIM_OC_Start_IT+0x1f8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d111      	bne.n	800258c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b06      	cmp	r3, #6
 8002578:	d010      	beq.n	800259c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258a:	e007      	b.n	800259c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40000800 	.word	0x40000800
 80025b4:	40000c00 	.word	0x40000c00
 80025b8:	40014000 	.word	0x40014000

080025bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e041      	b.n	8002652 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f839 	bl	800265a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f000 fc2e 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d104      	bne.n	800268e <HAL_TIM_IC_Start_IT+0x1e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800268a:	b2db      	uxtb	r3, r3
 800268c:	e013      	b.n	80026b6 <HAL_TIM_IC_Start_IT+0x46>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d104      	bne.n	800269e <HAL_TIM_IC_Start_IT+0x2e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800269a:	b2db      	uxtb	r3, r3
 800269c:	e00b      	b.n	80026b6 <HAL_TIM_IC_Start_IT+0x46>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_IC_Start_IT+0x3e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	e003      	b.n	80026b6 <HAL_TIM_IC_Start_IT+0x46>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d104      	bne.n	80026c8 <HAL_TIM_IC_Start_IT+0x58>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e013      	b.n	80026f0 <HAL_TIM_IC_Start_IT+0x80>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d104      	bne.n	80026d8 <HAL_TIM_IC_Start_IT+0x68>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e00b      	b.n	80026f0 <HAL_TIM_IC_Start_IT+0x80>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d104      	bne.n	80026e8 <HAL_TIM_IC_Start_IT+0x78>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e003      	b.n	80026f0 <HAL_TIM_IC_Start_IT+0x80>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026f2:	7bbb      	ldrb	r3, [r7, #14]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026f8:	7b7b      	ldrb	r3, [r7, #13]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0c2      	b.n	8002888 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_TIM_IC_Start_IT+0xa2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002710:	e013      	b.n	800273a <HAL_TIM_IC_Start_IT+0xca>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d104      	bne.n	8002722 <HAL_TIM_IC_Start_IT+0xb2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002720:	e00b      	b.n	800273a <HAL_TIM_IC_Start_IT+0xca>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d104      	bne.n	8002732 <HAL_TIM_IC_Start_IT+0xc2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002730:	e003      	b.n	800273a <HAL_TIM_IC_Start_IT+0xca>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_TIM_IC_Start_IT+0xda>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002748:	e013      	b.n	8002772 <HAL_TIM_IC_Start_IT+0x102>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d104      	bne.n	800275a <HAL_TIM_IC_Start_IT+0xea>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002758:	e00b      	b.n	8002772 <HAL_TIM_IC_Start_IT+0x102>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d104      	bne.n	800276a <HAL_TIM_IC_Start_IT+0xfa>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002768:	e003      	b.n	8002772 <HAL_TIM_IC_Start_IT+0x102>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d841      	bhi.n	80027fc <HAL_TIM_IC_Start_IT+0x18c>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_TIM_IC_Start_IT+0x110>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027b5 	.word	0x080027b5
 8002784:	080027fd 	.word	0x080027fd
 8002788:	080027fd 	.word	0x080027fd
 800278c:	080027fd 	.word	0x080027fd
 8002790:	080027c7 	.word	0x080027c7
 8002794:	080027fd 	.word	0x080027fd
 8002798:	080027fd 	.word	0x080027fd
 800279c:	080027fd 	.word	0x080027fd
 80027a0:	080027d9 	.word	0x080027d9
 80027a4:	080027fd 	.word	0x080027fd
 80027a8:	080027fd 	.word	0x080027fd
 80027ac:	080027fd 	.word	0x080027fd
 80027b0:	080027eb 	.word	0x080027eb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0202 	orr.w	r2, r2, #2
 80027c2:	60da      	str	r2, [r3, #12]
      break;
 80027c4:	e01d      	b.n	8002802 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0204 	orr.w	r2, r2, #4
 80027d4:	60da      	str	r2, [r3, #12]
      break;
 80027d6:	e014      	b.n	8002802 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0208 	orr.w	r2, r2, #8
 80027e6:	60da      	str	r2, [r3, #12]
      break;
 80027e8:	e00b      	b.n	8002802 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0210 	orr.w	r2, r2, #16
 80027f8:	60da      	str	r2, [r3, #12]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	bf00      	nop
  }

  if (status == HAL_OK)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d13e      	bne.n	8002886 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	6839      	ldr	r1, [r7, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fee7 	bl	80035e4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_TIM_IC_Start_IT+0x220>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d018      	beq.n	8002852 <HAL_TIM_IC_Start_IT+0x1e2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002828:	d013      	beq.n	8002852 <HAL_TIM_IC_Start_IT+0x1e2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_TIM_IC_Start_IT+0x224>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_TIM_IC_Start_IT+0x1e2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_TIM_IC_Start_IT+0x228>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_TIM_IC_Start_IT+0x1e2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_TIM_IC_Start_IT+0x22c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_TIM_IC_Start_IT+0x1e2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_TIM_IC_Start_IT+0x230>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d111      	bne.n	8002876 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b06      	cmp	r3, #6
 8002862:	d010      	beq.n	8002886 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002874:	e007      	b.n	8002886 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40010000 	.word	0x40010000
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800
 800289c:	40000c00 	.word	0x40000c00
 80028a0:	40014000 	.word	0x40014000

080028a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0202 	mvn.w	r2, #2
 80028d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f8e2 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f8b6 	bl	8000a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fa9c 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0204 	mvn.w	r2, #4
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f8b8 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe f88c 	bl	8000a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fa72 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b08      	cmp	r3, #8
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0208 	mvn.w	r2, #8
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2204      	movs	r2, #4
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f88e 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f862 	bl	8000a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fa48 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0210 	mvn.w	r2, #16
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2208      	movs	r2, #8
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f864 	bl	8000ab0 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe f838 	bl	8000a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fa1e 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0201 	mvn.w	r2, #1
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe f984 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d10e      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d107      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fe66 	bl	8003720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d107      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9e3 	bl	8002e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0220 	mvn.w	r2, #32
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fe30 	bl	800370c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e048      	b.n	8002b64 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d839      	bhi.n	8002b54 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b1d 	.word	0x08002b1d
 8002aec:	08002b55 	.word	0x08002b55
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002b55 	.word	0x08002b55
 8002af8:	08002b2b 	.word	0x08002b2b
 8002afc:	08002b55 	.word	0x08002b55
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002b55 	.word	0x08002b55
 8002b08:	08002b39 	.word	0x08002b39
 8002b0c:	08002b55 	.word	0x08002b55
 8002b10:	08002b55 	.word	0x08002b55
 8002b14:	08002b55 	.word	0x08002b55
 8002b18:	08002b47 	.word	0x08002b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fa1a 	bl	8002f5c <TIM_OC1_SetConfig>
      break;
 8002b28:	e017      	b.n	8002b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fa79 	bl	8003028 <TIM_OC2_SetConfig>
      break;
 8002b36:	e010      	b.n	8002b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fade 	bl	8003100 <TIM_OC3_SetConfig>
      break;
 8002b44:	e009      	b.n	8002b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fb41 	bl	80031d4 <TIM_OC4_SetConfig>
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	75fb      	strb	r3, [r7, #23]
      break;
 8002b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e088      	b.n	8002c9c <HAL_TIM_IC_ConfigChannel+0x130>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f000 fb64 	bl	8003274 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 020c 	bic.w	r2, r2, #12
 8002bba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6999      	ldr	r1, [r3, #24]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	619a      	str	r2, [r3, #24]
 8002bce:	e060      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d11c      	bne.n	8002c10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f000 fbdc 	bl	80033a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6999      	ldr	r1, [r3, #24]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	619a      	str	r2, [r3, #24]
 8002c0e:	e040      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11b      	bne.n	8002c4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f000 fc29 	bl	800347c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 020c 	bic.w	r2, r2, #12
 8002c38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69d9      	ldr	r1, [r3, #28]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	61da      	str	r2, [r3, #28]
 8002c4c:	e021      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d11c      	bne.n	8002c8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f000 fc46 	bl	80034f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69d9      	ldr	r1, [r3, #28]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	61da      	str	r2, [r3, #28]
 8002c8c:	e001      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0b4      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x186>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf8:	d03e      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0xd4>
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	f200 8087 	bhi.w	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	f000 8086 	beq.w	8002e16 <HAL_TIM_ConfigClockSource+0x172>
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	d87f      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b70      	cmp	r3, #112	; 0x70
 8002d12:	d01a      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0xa6>
 8002d14:	2b70      	cmp	r3, #112	; 0x70
 8002d16:	d87b      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b60      	cmp	r3, #96	; 0x60
 8002d1a:	d050      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x11a>
 8002d1c:	2b60      	cmp	r3, #96	; 0x60
 8002d1e:	d877      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b50      	cmp	r3, #80	; 0x50
 8002d22:	d03c      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xfa>
 8002d24:	2b50      	cmp	r3, #80	; 0x50
 8002d26:	d873      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d058      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x13a>
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d86f      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b30      	cmp	r3, #48	; 0x30
 8002d32:	d064      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	2b30      	cmp	r3, #48	; 0x30
 8002d36:	d86b      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d060      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d867      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05c      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d05a      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d48:	e062      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f000 fc23 	bl	80035a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	609a      	str	r2, [r3, #8]
      break;
 8002d76:	e04f      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f000 fc0c 	bl	80035a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9a:	609a      	str	r2, [r3, #8]
      break;
 8002d9c:	e03c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 faca 	bl	8003344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2150      	movs	r1, #80	; 0x50
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fbd9 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e02c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 fb26 	bl	800341c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2160      	movs	r1, #96	; 0x60
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fbc9 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e01c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 faaa 	bl	8003344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fbb9 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e00c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 fbb0 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8002e0e:	e003      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e000      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <TIM_Base_SetConfig+0xe8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a30      	ldr	r2, [pc, #192]	; (8002f48 <TIM_Base_SetConfig+0xec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <TIM_Base_SetConfig+0xe8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <TIM_Base_SetConfig+0xec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <TIM_Base_SetConfig+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <TIM_Base_SetConfig+0xf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <TIM_Base_SetConfig+0xfc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	615a      	str	r2, [r3, #20]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800

08002f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0201 	bic.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 0302 	bic.w	r3, r3, #2
 8002fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <TIM_OC1_SetConfig+0xc8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10c      	bne.n	8002fd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0308 	bic.w	r3, r3, #8
 8002fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <TIM_OC1_SetConfig+0xc8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d111      	bne.n	8002ffe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40010000 	.word	0x40010000

08003028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f023 0210 	bic.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0320 	bic.w	r3, r3, #32
 8003072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <TIM_OC2_SetConfig+0xd4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10d      	bne.n	80030a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <TIM_OC2_SetConfig+0xd4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d113      	bne.n	80030d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000

08003100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <TIM_OC3_SetConfig+0xd0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10d      	bne.n	800317a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <TIM_OC3_SetConfig+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d113      	bne.n	80031aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	621a      	str	r2, [r3, #32]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40010000 	.word	0x40010000

080031d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800321e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <TIM_OC4_SetConfig+0x9c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000

08003274 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <TIM_TI1_SetConfig+0xbc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d00f      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <TIM_TI1_SetConfig+0xc0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <TIM_TI1_SetConfig+0xc4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a1f      	ldr	r2, [pc, #124]	; (800333c <TIM_TI1_SetConfig+0xc8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <TIM_TI1_SetConfig+0xcc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <TIM_TI1_SetConfig+0x5a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <TIM_TI1_SetConfig+0x5c>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e003      	b.n	80032ee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f023 030a 	bic.w	r3, r3, #10
 8003308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 030a 	and.w	r3, r3, #10
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40014000 	.word	0x40014000

08003344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 030a 	bic.w	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f023 0210 	bic.w	r2, r3, #16
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	031b      	lsls	r3, r3, #12
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0210 	bic.w	r2, r3, #16
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003446:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	031b      	lsls	r3, r3, #12
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	621a      	str	r2, [r3, #32]
}
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f023 0303 	bic.w	r3, r3, #3
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80034cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003520:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003532:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	031b      	lsls	r3, r3, #12
 8003538:	b29b      	uxth	r3, r3
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003546:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	031b      	lsls	r3, r3, #12
 800354c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	f043 0307 	orr.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2201      	movs	r2, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	43db      	mvns	r3, r3
 8003606:	401a      	ands	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1a      	ldr	r2, [r3, #32]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003644:	2302      	movs	r3, #2
 8003646:	e050      	b.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d013      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a16      	ldr	r2, [pc, #88]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a15      	ldr	r2, [pc, #84]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10c      	bne.n	80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40014000 	.word	0x40014000

0800370c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e03f      	b.n	80037c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fd fc24 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fd15 	bl	80041a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d130      	bne.n	800384a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_UART_Transmit_IT+0x26>
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e029      	b.n	800384c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_UART_Transmit_IT+0x38>
 8003802:	2302      	movs	r3, #2
 8003804:	e022      	b.n	800384c <HAL_UART_Transmit_IT+0x7e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2221      	movs	r2, #33	; 0x21
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003844:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b20      	cmp	r3, #32
 8003870:	d11d      	bne.n	80038ae <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_UART_Receive_IT+0x26>
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e016      	b.n	80038b0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_UART_Receive_IT+0x38>
 800388c:	2302      	movs	r3, #2
 800388e:	e00f      	b.n	80038b0 <HAL_UART_Receive_IT+0x58>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	461a      	mov	r2, r3
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 faab 	bl	8003e00 <UART_Start_Receive_IT>
 80038aa:	4603      	mov	r3, r0
 80038ac:	e000      	b.n	80038b0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0ba      	sub	sp, #232	; 0xe8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_UART_IRQHandler+0x66>
 800390a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fb8b 	bl	8004032 <UART_Receive_IT>
      return;
 800391c:	e256      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800391e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80de 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x22c>
 8003928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003938:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80d1 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_UART_IRQHandler+0xae>
 800394e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_UART_IRQHandler+0xd2>
 8003972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f043 0202 	orr.w	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_UART_IRQHandler+0xf6>
 8003996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f043 0204 	orr.w	r2, r3, #4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d011      	beq.n	80039de <HAL_UART_IRQHandler+0x126>
 80039ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0208 	orr.w	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 81ed 	beq.w	8003dc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_UART_IRQHandler+0x14e>
 80039f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb16 	bl	8004032 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_UART_IRQHandler+0x17a>
 8003a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d04f      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa1e 	bl	8003e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d141      	bne.n	8003aca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1d9      	bne.n	8003a46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d013      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	4a7d      	ldr	r2, [pc, #500]	; (8003c94 <HAL_UART_IRQHandler+0x3dc>)
 8003aa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fd7b 	bl	80015a2 <HAL_DMA_Abort_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d016      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003abc:	4610      	mov	r0, r2
 8003abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	e00e      	b.n	8003ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f986 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	e00a      	b.n	8003ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f982 	bl	8003dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	e006      	b.n	8003ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f97e 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ade:	e170      	b.n	8003dc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	bf00      	nop
    return;
 8003ae2:	e16e      	b.n	8003dc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 814a 	bne.w	8003d82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8143 	beq.w	8003d82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 813c 	beq.w	8003d82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	f040 80b4 	bne.w	8003c98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8140 	beq.w	8003dc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	f080 8139 	bcs.w	8003dc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	f000 8088 	beq.w	8003c7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1d9      	bne.n	8003b6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e1      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	f023 0310 	bic.w	r3, r3, #16
 8003c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e3      	bne.n	8003c38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fc24 	bl	80014c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8ac 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c90:	e099      	b.n	8003dc6 <HAL_UART_IRQHandler+0x50e>
 8003c92:	bf00      	nop
 8003c94:	08003f3b 	.word	0x08003f3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 808b 	beq.w	8003dca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8086 	beq.w	8003dca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e3      	bne.n	8003cbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	623b      	str	r3, [r7, #32]
   return(result);
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e3      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0310 	bic.w	r3, r3, #16
 8003d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d60:	61fa      	str	r2, [r7, #28]
 8003d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	69b9      	ldr	r1, [r7, #24]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e3      	bne.n	8003d3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f834 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d80:	e023      	b.n	8003dca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_UART_IRQHandler+0x4ea>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8e1 	bl	8003f62 <UART_Transmit_IT>
    return;
 8003da0:	e014      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <HAL_UART_IRQHandler+0x514>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f921 	bl	8004002 <UART_EndTransmit_IT>
    return;
 8003dc0:	e004      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
    return;
 8003dc2:	bf00      	nop
 8003dc4:	e002      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
      return;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <HAL_UART_IRQHandler+0x514>
      return;
 8003dca:	bf00      	nop
  }
}
 8003dcc:	37e8      	adds	r7, #232	; 0xe8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop

08003dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2222      	movs	r2, #34	; 0x22
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e44:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0220 	orr.w	r2, r2, #32
 8003e64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b095      	sub	sp, #84	; 0x54
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e9c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3314      	adds	r3, #20
 8003eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e5      	bne.n	8003eb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d119      	bne.n	8003f20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f023 0310 	bic.w	r3, r3, #16
 8003f02:	647b      	str	r3, [r7, #68]	; 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f0c:	61ba      	str	r2, [r7, #24]
 8003f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e5      	bne.n	8003eec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f2e:	bf00      	nop
 8003f30:	3754      	adds	r7, #84	; 0x54
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ff3d 	bl	8003dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b21      	cmp	r3, #33	; 0x21
 8003f74:	d13e      	bne.n	8003ff4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	d114      	bne.n	8003faa <UART_Transmit_IT+0x48>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d110      	bne.n	8003faa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	1c9a      	adds	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	621a      	str	r2, [r3, #32]
 8003fa8:	e008      	b.n	8003fbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6211      	str	r1, [r2, #32]
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10f      	bne.n	8003ff0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004018:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc ff08 	bl	8000e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b08c      	sub	sp, #48	; 0x30
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b22      	cmp	r3, #34	; 0x22
 8004044:	f040 80ab 	bne.w	800419e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d117      	bne.n	8004082 <UART_Receive_IT+0x50>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d113      	bne.n	8004082 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004070:	b29a      	uxth	r2, r3
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28
 8004080:	e026      	b.n	80040d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	d007      	beq.n	80040a6 <UART_Receive_IT+0x74>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <UART_Receive_IT+0x82>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e008      	b.n	80040c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4619      	mov	r1, r3
 80040de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d15a      	bne.n	800419a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0220 	bic.w	r2, r2, #32
 80040f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	2b01      	cmp	r3, #1
 8004122:	d135      	bne.n	8004190 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f023 0310 	bic.w	r3, r3, #16
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	623a      	str	r2, [r7, #32]
 800414c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	69f9      	ldr	r1, [r7, #28]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	61bb      	str	r3, [r7, #24]
   return(result);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b10      	cmp	r3, #16
 800416a:	d10a      	bne.n	8004182 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fe2d 	bl	8003de8 <HAL_UARTEx_RxEventCallback>
 800418e:	e002      	b.n	8004196 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fc fe5b 	bl	8000e4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e002      	b.n	80041a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3730      	adds	r7, #48	; 0x30
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	b09f      	sub	sp, #124	; 0x7c
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041be:	68d9      	ldr	r1, [r3, #12]
 80041c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	ea40 0301 	orr.w	r3, r0, r1
 80041c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	431a      	orrs	r2, r3
 80041da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4313      	orrs	r3, r2
 80041e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80041e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041ec:	f021 010c 	bic.w	r1, r1, #12
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f6:	430b      	orrs	r3, r1
 80041f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004206:	6999      	ldr	r1, [r3, #24]
 8004208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	ea40 0301 	orr.w	r3, r0, r1
 8004210:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4bc5      	ldr	r3, [pc, #788]	; (800452c <UART_SetConfig+0x384>)
 8004218:	429a      	cmp	r2, r3
 800421a:	d004      	beq.n	8004226 <UART_SetConfig+0x7e>
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4bc3      	ldr	r3, [pc, #780]	; (8004530 <UART_SetConfig+0x388>)
 8004222:	429a      	cmp	r2, r3
 8004224:	d103      	bne.n	800422e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004226:	f7fe f80f 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 800422a:	6778      	str	r0, [r7, #116]	; 0x74
 800422c:	e002      	b.n	8004234 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800422e:	f7fd fff7 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8004232:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423c:	f040 80b6 	bne.w	80043ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004242:	461c      	mov	r4, r3
 8004244:	f04f 0500 	mov.w	r5, #0
 8004248:	4622      	mov	r2, r4
 800424a:	462b      	mov	r3, r5
 800424c:	1891      	adds	r1, r2, r2
 800424e:	6439      	str	r1, [r7, #64]	; 0x40
 8004250:	415b      	adcs	r3, r3
 8004252:	647b      	str	r3, [r7, #68]	; 0x44
 8004254:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004258:	1912      	adds	r2, r2, r4
 800425a:	eb45 0303 	adc.w	r3, r5, r3
 800425e:	f04f 0000 	mov.w	r0, #0
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	00d9      	lsls	r1, r3, #3
 8004268:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800426c:	00d0      	lsls	r0, r2, #3
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	1911      	adds	r1, r2, r4
 8004274:	6639      	str	r1, [r7, #96]	; 0x60
 8004276:	416b      	adcs	r3, r5
 8004278:	667b      	str	r3, [r7, #100]	; 0x64
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	461a      	mov	r2, r3
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	1891      	adds	r1, r2, r2
 8004286:	63b9      	str	r1, [r7, #56]	; 0x38
 8004288:	415b      	adcs	r3, r3
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004290:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004294:	f7fb fffc 	bl	8000290 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4ba5      	ldr	r3, [pc, #660]	; (8004534 <UART_SetConfig+0x38c>)
 800429e:	fba3 2302 	umull	r2, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	011e      	lsls	r6, r3, #4
 80042a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a8:	461c      	mov	r4, r3
 80042aa:	f04f 0500 	mov.w	r5, #0
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	1891      	adds	r1, r2, r2
 80042b4:	6339      	str	r1, [r7, #48]	; 0x30
 80042b6:	415b      	adcs	r3, r3
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042be:	1912      	adds	r2, r2, r4
 80042c0:	eb45 0303 	adc.w	r3, r5, r3
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	00d9      	lsls	r1, r3, #3
 80042ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d2:	00d0      	lsls	r0, r2, #3
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	1911      	adds	r1, r2, r4
 80042da:	65b9      	str	r1, [r7, #88]	; 0x58
 80042dc:	416b      	adcs	r3, r5
 80042de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	461a      	mov	r2, r3
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	1891      	adds	r1, r2, r2
 80042ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80042ee:	415b      	adcs	r3, r3
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042fa:	f7fb ffc9 	bl	8000290 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4b8c      	ldr	r3, [pc, #560]	; (8004534 <UART_SetConfig+0x38c>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	; 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a87      	ldr	r2, [pc, #540]	; (8004534 <UART_SetConfig+0x38c>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004324:	441e      	add	r6, r3
 8004326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004328:	4618      	mov	r0, r3
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	1894      	adds	r4, r2, r2
 8004334:	623c      	str	r4, [r7, #32]
 8004336:	415b      	adcs	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433e:	1812      	adds	r2, r2, r0
 8004340:	eb41 0303 	adc.w	r3, r1, r3
 8004344:	f04f 0400 	mov.w	r4, #0
 8004348:	f04f 0500 	mov.w	r5, #0
 800434c:	00dd      	lsls	r5, r3, #3
 800434e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004352:	00d4      	lsls	r4, r2, #3
 8004354:	4622      	mov	r2, r4
 8004356:	462b      	mov	r3, r5
 8004358:	1814      	adds	r4, r2, r0
 800435a:	653c      	str	r4, [r7, #80]	; 0x50
 800435c:	414b      	adcs	r3, r1
 800435e:	657b      	str	r3, [r7, #84]	; 0x54
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	461a      	mov	r2, r3
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	1891      	adds	r1, r2, r2
 800436c:	61b9      	str	r1, [r7, #24]
 800436e:	415b      	adcs	r3, r3
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004376:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800437a:	f7fb ff89 	bl	8000290 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <UART_SetConfig+0x38c>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a67      	ldr	r2, [pc, #412]	; (8004534 <UART_SetConfig+0x38c>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 0207 	and.w	r2, r3, #7
 80043a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4432      	add	r2, r6
 80043a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043aa:	e0b9      	b.n	8004520 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ae:	461c      	mov	r4, r3
 80043b0:	f04f 0500 	mov.w	r5, #0
 80043b4:	4622      	mov	r2, r4
 80043b6:	462b      	mov	r3, r5
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	6139      	str	r1, [r7, #16]
 80043bc:	415b      	adcs	r3, r3
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043c4:	1912      	adds	r2, r2, r4
 80043c6:	eb45 0303 	adc.w	r3, r5, r3
 80043ca:	f04f 0000 	mov.w	r0, #0
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	00d9      	lsls	r1, r3, #3
 80043d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043d8:	00d0      	lsls	r0, r2, #3
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	eb12 0804 	adds.w	r8, r2, r4
 80043e2:	eb43 0905 	adc.w	r9, r3, r5
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f04f 0100 	mov.w	r1, #0
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	008b      	lsls	r3, r1, #2
 80043fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043fe:	0082      	lsls	r2, r0, #2
 8004400:	4640      	mov	r0, r8
 8004402:	4649      	mov	r1, r9
 8004404:	f7fb ff44 	bl	8000290 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4b49      	ldr	r3, [pc, #292]	; (8004534 <UART_SetConfig+0x38c>)
 800440e:	fba3 2302 	umull	r2, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	011e      	lsls	r6, r3, #4
 8004416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004418:	4618      	mov	r0, r3
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	1894      	adds	r4, r2, r2
 8004424:	60bc      	str	r4, [r7, #8]
 8004426:	415b      	adcs	r3, r3
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800442e:	1812      	adds	r2, r2, r0
 8004430:	eb41 0303 	adc.w	r3, r1, r3
 8004434:	f04f 0400 	mov.w	r4, #0
 8004438:	f04f 0500 	mov.w	r5, #0
 800443c:	00dd      	lsls	r5, r3, #3
 800443e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004442:	00d4      	lsls	r4, r2, #3
 8004444:	4622      	mov	r2, r4
 8004446:	462b      	mov	r3, r5
 8004448:	1814      	adds	r4, r2, r0
 800444a:	64bc      	str	r4, [r7, #72]	; 0x48
 800444c:	414b      	adcs	r3, r1
 800444e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	008b      	lsls	r3, r1, #2
 8004464:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004468:	0082      	lsls	r2, r0, #2
 800446a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800446e:	f7fb ff0f 	bl	8000290 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <UART_SetConfig+0x38c>)
 8004478:	fba3 1302 	umull	r1, r3, r3, r2
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	2164      	movs	r1, #100	; 0x64
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	3332      	adds	r3, #50	; 0x32
 800448a:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <UART_SetConfig+0x38c>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004496:	441e      	add	r6, r3
 8004498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449a:	4618      	mov	r0, r3
 800449c:	f04f 0100 	mov.w	r1, #0
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	1894      	adds	r4, r2, r2
 80044a6:	603c      	str	r4, [r7, #0]
 80044a8:	415b      	adcs	r3, r3
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b0:	1812      	adds	r2, r2, r0
 80044b2:	eb41 0303 	adc.w	r3, r1, r3
 80044b6:	f04f 0400 	mov.w	r4, #0
 80044ba:	f04f 0500 	mov.w	r5, #0
 80044be:	00dd      	lsls	r5, r3, #3
 80044c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044c4:	00d4      	lsls	r4, r2, #3
 80044c6:	4622      	mov	r2, r4
 80044c8:	462b      	mov	r3, r5
 80044ca:	eb12 0a00 	adds.w	sl, r2, r0
 80044ce:	eb43 0b01 	adc.w	fp, r3, r1
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	008b      	lsls	r3, r1, #2
 80044e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044ea:	0082      	lsls	r2, r0, #2
 80044ec:	4650      	mov	r0, sl
 80044ee:	4659      	mov	r1, fp
 80044f0:	f7fb fece 	bl	8000290 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <UART_SetConfig+0x38c>)
 80044fa:	fba3 1302 	umull	r1, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2164      	movs	r1, #100	; 0x64
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	; 0x32
 800450c:	4a09      	ldr	r2, [pc, #36]	; (8004534 <UART_SetConfig+0x38c>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4432      	add	r2, r6
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	377c      	adds	r7, #124	; 0x7c
 8004524:	46bd      	mov	sp, r7
 8004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452a:	bf00      	nop
 800452c:	40011000 	.word	0x40011000
 8004530:	40011400 	.word	0x40011400
 8004534:	51eb851f 	.word	0x51eb851f

08004538 <atoi>:
 8004538:	220a      	movs	r2, #10
 800453a:	2100      	movs	r1, #0
 800453c:	f000 b8d6 	b.w	80046ec <strtol>

08004540 <__errno>:
 8004540:	4b01      	ldr	r3, [pc, #4]	; (8004548 <__errno+0x8>)
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	2000000c 	.word	0x2000000c

0800454c <__libc_init_array>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	4d0d      	ldr	r5, [pc, #52]	; (8004584 <__libc_init_array+0x38>)
 8004550:	4c0d      	ldr	r4, [pc, #52]	; (8004588 <__libc_init_array+0x3c>)
 8004552:	1b64      	subs	r4, r4, r5
 8004554:	10a4      	asrs	r4, r4, #2
 8004556:	2600      	movs	r6, #0
 8004558:	42a6      	cmp	r6, r4
 800455a:	d109      	bne.n	8004570 <__libc_init_array+0x24>
 800455c:	4d0b      	ldr	r5, [pc, #44]	; (800458c <__libc_init_array+0x40>)
 800455e:	4c0c      	ldr	r4, [pc, #48]	; (8004590 <__libc_init_array+0x44>)
 8004560:	f000 fcdc 	bl	8004f1c <_init>
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	10a4      	asrs	r4, r4, #2
 8004568:	2600      	movs	r6, #0
 800456a:	42a6      	cmp	r6, r4
 800456c:	d105      	bne.n	800457a <__libc_init_array+0x2e>
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	f855 3b04 	ldr.w	r3, [r5], #4
 8004574:	4798      	blx	r3
 8004576:	3601      	adds	r6, #1
 8004578:	e7ee      	b.n	8004558 <__libc_init_array+0xc>
 800457a:	f855 3b04 	ldr.w	r3, [r5], #4
 800457e:	4798      	blx	r3
 8004580:	3601      	adds	r6, #1
 8004582:	e7f2      	b.n	800456a <__libc_init_array+0x1e>
 8004584:	080050bc 	.word	0x080050bc
 8004588:	080050bc 	.word	0x080050bc
 800458c:	080050bc 	.word	0x080050bc
 8004590:	080050c0 	.word	0x080050c0

08004594 <memset>:
 8004594:	4402      	add	r2, r0
 8004596:	4603      	mov	r3, r0
 8004598:	4293      	cmp	r3, r2
 800459a:	d100      	bne.n	800459e <memset+0xa>
 800459c:	4770      	bx	lr
 800459e:	f803 1b01 	strb.w	r1, [r3], #1
 80045a2:	e7f9      	b.n	8004598 <memset+0x4>

080045a4 <siprintf>:
 80045a4:	b40e      	push	{r1, r2, r3}
 80045a6:	b500      	push	{lr}
 80045a8:	b09c      	sub	sp, #112	; 0x70
 80045aa:	ab1d      	add	r3, sp, #116	; 0x74
 80045ac:	9002      	str	r0, [sp, #8]
 80045ae:	9006      	str	r0, [sp, #24]
 80045b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045b4:	4809      	ldr	r0, [pc, #36]	; (80045dc <siprintf+0x38>)
 80045b6:	9107      	str	r1, [sp, #28]
 80045b8:	9104      	str	r1, [sp, #16]
 80045ba:	4909      	ldr	r1, [pc, #36]	; (80045e0 <siprintf+0x3c>)
 80045bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c0:	9105      	str	r1, [sp, #20]
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	a902      	add	r1, sp, #8
 80045c8:	f000 f8f6 	bl	80047b8 <_svfiprintf_r>
 80045cc:	9b02      	ldr	r3, [sp, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	b01c      	add	sp, #112	; 0x70
 80045d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d8:	b003      	add	sp, #12
 80045da:	4770      	bx	lr
 80045dc:	2000000c 	.word	0x2000000c
 80045e0:	ffff0208 	.word	0xffff0208

080045e4 <_strtol_l.isra.0>:
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ea:	d001      	beq.n	80045f0 <_strtol_l.isra.0+0xc>
 80045ec:	2b24      	cmp	r3, #36	; 0x24
 80045ee:	d906      	bls.n	80045fe <_strtol_l.isra.0+0x1a>
 80045f0:	f7ff ffa6 	bl	8004540 <__errno>
 80045f4:	2316      	movs	r3, #22
 80045f6:	6003      	str	r3, [r0, #0]
 80045f8:	2000      	movs	r0, #0
 80045fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fe:	4f3a      	ldr	r7, [pc, #232]	; (80046e8 <_strtol_l.isra.0+0x104>)
 8004600:	468e      	mov	lr, r1
 8004602:	4676      	mov	r6, lr
 8004604:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004608:	5de5      	ldrb	r5, [r4, r7]
 800460a:	f015 0508 	ands.w	r5, r5, #8
 800460e:	d1f8      	bne.n	8004602 <_strtol_l.isra.0+0x1e>
 8004610:	2c2d      	cmp	r4, #45	; 0x2d
 8004612:	d134      	bne.n	800467e <_strtol_l.isra.0+0x9a>
 8004614:	f89e 4000 	ldrb.w	r4, [lr]
 8004618:	f04f 0801 	mov.w	r8, #1
 800461c:	f106 0e02 	add.w	lr, r6, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05c      	beq.n	80046de <_strtol_l.isra.0+0xfa>
 8004624:	2b10      	cmp	r3, #16
 8004626:	d10c      	bne.n	8004642 <_strtol_l.isra.0+0x5e>
 8004628:	2c30      	cmp	r4, #48	; 0x30
 800462a:	d10a      	bne.n	8004642 <_strtol_l.isra.0+0x5e>
 800462c:	f89e 4000 	ldrb.w	r4, [lr]
 8004630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004634:	2c58      	cmp	r4, #88	; 0x58
 8004636:	d14d      	bne.n	80046d4 <_strtol_l.isra.0+0xf0>
 8004638:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800463c:	2310      	movs	r3, #16
 800463e:	f10e 0e02 	add.w	lr, lr, #2
 8004642:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004646:	f10c 3cff 	add.w	ip, ip, #4294967295
 800464a:	2600      	movs	r6, #0
 800464c:	fbbc f9f3 	udiv	r9, ip, r3
 8004650:	4635      	mov	r5, r6
 8004652:	fb03 ca19 	mls	sl, r3, r9, ip
 8004656:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800465a:	2f09      	cmp	r7, #9
 800465c:	d818      	bhi.n	8004690 <_strtol_l.isra.0+0xac>
 800465e:	463c      	mov	r4, r7
 8004660:	42a3      	cmp	r3, r4
 8004662:	dd24      	ble.n	80046ae <_strtol_l.isra.0+0xca>
 8004664:	2e00      	cmp	r6, #0
 8004666:	db1f      	blt.n	80046a8 <_strtol_l.isra.0+0xc4>
 8004668:	45a9      	cmp	r9, r5
 800466a:	d31d      	bcc.n	80046a8 <_strtol_l.isra.0+0xc4>
 800466c:	d101      	bne.n	8004672 <_strtol_l.isra.0+0x8e>
 800466e:	45a2      	cmp	sl, r4
 8004670:	db1a      	blt.n	80046a8 <_strtol_l.isra.0+0xc4>
 8004672:	fb05 4503 	mla	r5, r5, r3, r4
 8004676:	2601      	movs	r6, #1
 8004678:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800467c:	e7eb      	b.n	8004656 <_strtol_l.isra.0+0x72>
 800467e:	2c2b      	cmp	r4, #43	; 0x2b
 8004680:	bf08      	it	eq
 8004682:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004686:	46a8      	mov	r8, r5
 8004688:	bf08      	it	eq
 800468a:	f106 0e02 	addeq.w	lr, r6, #2
 800468e:	e7c7      	b.n	8004620 <_strtol_l.isra.0+0x3c>
 8004690:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004694:	2f19      	cmp	r7, #25
 8004696:	d801      	bhi.n	800469c <_strtol_l.isra.0+0xb8>
 8004698:	3c37      	subs	r4, #55	; 0x37
 800469a:	e7e1      	b.n	8004660 <_strtol_l.isra.0+0x7c>
 800469c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80046a0:	2f19      	cmp	r7, #25
 80046a2:	d804      	bhi.n	80046ae <_strtol_l.isra.0+0xca>
 80046a4:	3c57      	subs	r4, #87	; 0x57
 80046a6:	e7db      	b.n	8004660 <_strtol_l.isra.0+0x7c>
 80046a8:	f04f 36ff 	mov.w	r6, #4294967295
 80046ac:	e7e4      	b.n	8004678 <_strtol_l.isra.0+0x94>
 80046ae:	2e00      	cmp	r6, #0
 80046b0:	da05      	bge.n	80046be <_strtol_l.isra.0+0xda>
 80046b2:	2322      	movs	r3, #34	; 0x22
 80046b4:	6003      	str	r3, [r0, #0]
 80046b6:	4665      	mov	r5, ip
 80046b8:	b942      	cbnz	r2, 80046cc <_strtol_l.isra.0+0xe8>
 80046ba:	4628      	mov	r0, r5
 80046bc:	e79d      	b.n	80045fa <_strtol_l.isra.0+0x16>
 80046be:	f1b8 0f00 	cmp.w	r8, #0
 80046c2:	d000      	beq.n	80046c6 <_strtol_l.isra.0+0xe2>
 80046c4:	426d      	negs	r5, r5
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	d0f7      	beq.n	80046ba <_strtol_l.isra.0+0xd6>
 80046ca:	b10e      	cbz	r6, 80046d0 <_strtol_l.isra.0+0xec>
 80046cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80046d0:	6011      	str	r1, [r2, #0]
 80046d2:	e7f2      	b.n	80046ba <_strtol_l.isra.0+0xd6>
 80046d4:	2430      	movs	r4, #48	; 0x30
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1b3      	bne.n	8004642 <_strtol_l.isra.0+0x5e>
 80046da:	2308      	movs	r3, #8
 80046dc:	e7b1      	b.n	8004642 <_strtol_l.isra.0+0x5e>
 80046de:	2c30      	cmp	r4, #48	; 0x30
 80046e0:	d0a4      	beq.n	800462c <_strtol_l.isra.0+0x48>
 80046e2:	230a      	movs	r3, #10
 80046e4:	e7ad      	b.n	8004642 <_strtol_l.isra.0+0x5e>
 80046e6:	bf00      	nop
 80046e8:	08004f81 	.word	0x08004f81

080046ec <strtol>:
 80046ec:	4613      	mov	r3, r2
 80046ee:	460a      	mov	r2, r1
 80046f0:	4601      	mov	r1, r0
 80046f2:	4802      	ldr	r0, [pc, #8]	; (80046fc <strtol+0x10>)
 80046f4:	6800      	ldr	r0, [r0, #0]
 80046f6:	f7ff bf75 	b.w	80045e4 <_strtol_l.isra.0>
 80046fa:	bf00      	nop
 80046fc:	2000000c 	.word	0x2000000c

08004700 <__ssputs_r>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	688e      	ldr	r6, [r1, #8]
 8004706:	429e      	cmp	r6, r3
 8004708:	4682      	mov	sl, r0
 800470a:	460c      	mov	r4, r1
 800470c:	4690      	mov	r8, r2
 800470e:	461f      	mov	r7, r3
 8004710:	d838      	bhi.n	8004784 <__ssputs_r+0x84>
 8004712:	898a      	ldrh	r2, [r1, #12]
 8004714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004718:	d032      	beq.n	8004780 <__ssputs_r+0x80>
 800471a:	6825      	ldr	r5, [r4, #0]
 800471c:	6909      	ldr	r1, [r1, #16]
 800471e:	eba5 0901 	sub.w	r9, r5, r1
 8004722:	6965      	ldr	r5, [r4, #20]
 8004724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800472c:	3301      	adds	r3, #1
 800472e:	444b      	add	r3, r9
 8004730:	106d      	asrs	r5, r5, #1
 8004732:	429d      	cmp	r5, r3
 8004734:	bf38      	it	cc
 8004736:	461d      	movcc	r5, r3
 8004738:	0553      	lsls	r3, r2, #21
 800473a:	d531      	bpl.n	80047a0 <__ssputs_r+0xa0>
 800473c:	4629      	mov	r1, r5
 800473e:	f000 fb47 	bl	8004dd0 <_malloc_r>
 8004742:	4606      	mov	r6, r0
 8004744:	b950      	cbnz	r0, 800475c <__ssputs_r+0x5c>
 8004746:	230c      	movs	r3, #12
 8004748:	f8ca 3000 	str.w	r3, [sl]
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475c:	6921      	ldr	r1, [r4, #16]
 800475e:	464a      	mov	r2, r9
 8004760:	f000 fabe 	bl	8004ce0 <memcpy>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800476a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	6126      	str	r6, [r4, #16]
 8004772:	6165      	str	r5, [r4, #20]
 8004774:	444e      	add	r6, r9
 8004776:	eba5 0509 	sub.w	r5, r5, r9
 800477a:	6026      	str	r6, [r4, #0]
 800477c:	60a5      	str	r5, [r4, #8]
 800477e:	463e      	mov	r6, r7
 8004780:	42be      	cmp	r6, r7
 8004782:	d900      	bls.n	8004786 <__ssputs_r+0x86>
 8004784:	463e      	mov	r6, r7
 8004786:	4632      	mov	r2, r6
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	4641      	mov	r1, r8
 800478c:	f000 fab6 	bl	8004cfc <memmove>
 8004790:	68a3      	ldr	r3, [r4, #8]
 8004792:	6822      	ldr	r2, [r4, #0]
 8004794:	1b9b      	subs	r3, r3, r6
 8004796:	4432      	add	r2, r6
 8004798:	60a3      	str	r3, [r4, #8]
 800479a:	6022      	str	r2, [r4, #0]
 800479c:	2000      	movs	r0, #0
 800479e:	e7db      	b.n	8004758 <__ssputs_r+0x58>
 80047a0:	462a      	mov	r2, r5
 80047a2:	f000 fb6f 	bl	8004e84 <_realloc_r>
 80047a6:	4606      	mov	r6, r0
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d1e1      	bne.n	8004770 <__ssputs_r+0x70>
 80047ac:	6921      	ldr	r1, [r4, #16]
 80047ae:	4650      	mov	r0, sl
 80047b0:	f000 fabe 	bl	8004d30 <_free_r>
 80047b4:	e7c7      	b.n	8004746 <__ssputs_r+0x46>
	...

080047b8 <_svfiprintf_r>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	4698      	mov	r8, r3
 80047be:	898b      	ldrh	r3, [r1, #12]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	b09d      	sub	sp, #116	; 0x74
 80047c4:	4607      	mov	r7, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	d50e      	bpl.n	80047ea <_svfiprintf_r+0x32>
 80047cc:	690b      	ldr	r3, [r1, #16]
 80047ce:	b963      	cbnz	r3, 80047ea <_svfiprintf_r+0x32>
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	f000 fafd 	bl	8004dd0 <_malloc_r>
 80047d6:	6028      	str	r0, [r5, #0]
 80047d8:	6128      	str	r0, [r5, #16]
 80047da:	b920      	cbnz	r0, 80047e6 <_svfiprintf_r+0x2e>
 80047dc:	230c      	movs	r3, #12
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e0d1      	b.n	800498a <_svfiprintf_r+0x1d2>
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	616b      	str	r3, [r5, #20]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9309      	str	r3, [sp, #36]	; 0x24
 80047ee:	2320      	movs	r3, #32
 80047f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f8:	2330      	movs	r3, #48	; 0x30
 80047fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049a4 <_svfiprintf_r+0x1ec>
 80047fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004802:	f04f 0901 	mov.w	r9, #1
 8004806:	4623      	mov	r3, r4
 8004808:	469a      	mov	sl, r3
 800480a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800480e:	b10a      	cbz	r2, 8004814 <_svfiprintf_r+0x5c>
 8004810:	2a25      	cmp	r2, #37	; 0x25
 8004812:	d1f9      	bne.n	8004808 <_svfiprintf_r+0x50>
 8004814:	ebba 0b04 	subs.w	fp, sl, r4
 8004818:	d00b      	beq.n	8004832 <_svfiprintf_r+0x7a>
 800481a:	465b      	mov	r3, fp
 800481c:	4622      	mov	r2, r4
 800481e:	4629      	mov	r1, r5
 8004820:	4638      	mov	r0, r7
 8004822:	f7ff ff6d 	bl	8004700 <__ssputs_r>
 8004826:	3001      	adds	r0, #1
 8004828:	f000 80aa 	beq.w	8004980 <_svfiprintf_r+0x1c8>
 800482c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800482e:	445a      	add	r2, fp
 8004830:	9209      	str	r2, [sp, #36]	; 0x24
 8004832:	f89a 3000 	ldrb.w	r3, [sl]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80a2 	beq.w	8004980 <_svfiprintf_r+0x1c8>
 800483c:	2300      	movs	r3, #0
 800483e:	f04f 32ff 	mov.w	r2, #4294967295
 8004842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004846:	f10a 0a01 	add.w	sl, sl, #1
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	9307      	str	r3, [sp, #28]
 800484e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004852:	931a      	str	r3, [sp, #104]	; 0x68
 8004854:	4654      	mov	r4, sl
 8004856:	2205      	movs	r2, #5
 8004858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800485c:	4851      	ldr	r0, [pc, #324]	; (80049a4 <_svfiprintf_r+0x1ec>)
 800485e:	f7fb fcc7 	bl	80001f0 <memchr>
 8004862:	9a04      	ldr	r2, [sp, #16]
 8004864:	b9d8      	cbnz	r0, 800489e <_svfiprintf_r+0xe6>
 8004866:	06d0      	lsls	r0, r2, #27
 8004868:	bf44      	itt	mi
 800486a:	2320      	movmi	r3, #32
 800486c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004870:	0711      	lsls	r1, r2, #28
 8004872:	bf44      	itt	mi
 8004874:	232b      	movmi	r3, #43	; 0x2b
 8004876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800487a:	f89a 3000 	ldrb.w	r3, [sl]
 800487e:	2b2a      	cmp	r3, #42	; 0x2a
 8004880:	d015      	beq.n	80048ae <_svfiprintf_r+0xf6>
 8004882:	9a07      	ldr	r2, [sp, #28]
 8004884:	4654      	mov	r4, sl
 8004886:	2000      	movs	r0, #0
 8004888:	f04f 0c0a 	mov.w	ip, #10
 800488c:	4621      	mov	r1, r4
 800488e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004892:	3b30      	subs	r3, #48	; 0x30
 8004894:	2b09      	cmp	r3, #9
 8004896:	d94e      	bls.n	8004936 <_svfiprintf_r+0x17e>
 8004898:	b1b0      	cbz	r0, 80048c8 <_svfiprintf_r+0x110>
 800489a:	9207      	str	r2, [sp, #28]
 800489c:	e014      	b.n	80048c8 <_svfiprintf_r+0x110>
 800489e:	eba0 0308 	sub.w	r3, r0, r8
 80048a2:	fa09 f303 	lsl.w	r3, r9, r3
 80048a6:	4313      	orrs	r3, r2
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	46a2      	mov	sl, r4
 80048ac:	e7d2      	b.n	8004854 <_svfiprintf_r+0x9c>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	1d19      	adds	r1, r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	9103      	str	r1, [sp, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bfbb      	ittet	lt
 80048ba:	425b      	neglt	r3, r3
 80048bc:	f042 0202 	orrlt.w	r2, r2, #2
 80048c0:	9307      	strge	r3, [sp, #28]
 80048c2:	9307      	strlt	r3, [sp, #28]
 80048c4:	bfb8      	it	lt
 80048c6:	9204      	strlt	r2, [sp, #16]
 80048c8:	7823      	ldrb	r3, [r4, #0]
 80048ca:	2b2e      	cmp	r3, #46	; 0x2e
 80048cc:	d10c      	bne.n	80048e8 <_svfiprintf_r+0x130>
 80048ce:	7863      	ldrb	r3, [r4, #1]
 80048d0:	2b2a      	cmp	r3, #42	; 0x2a
 80048d2:	d135      	bne.n	8004940 <_svfiprintf_r+0x188>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	9203      	str	r2, [sp, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bfb8      	it	lt
 80048e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048e4:	3402      	adds	r4, #2
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049b4 <_svfiprintf_r+0x1fc>
 80048ec:	7821      	ldrb	r1, [r4, #0]
 80048ee:	2203      	movs	r2, #3
 80048f0:	4650      	mov	r0, sl
 80048f2:	f7fb fc7d 	bl	80001f0 <memchr>
 80048f6:	b140      	cbz	r0, 800490a <_svfiprintf_r+0x152>
 80048f8:	2340      	movs	r3, #64	; 0x40
 80048fa:	eba0 000a 	sub.w	r0, r0, sl
 80048fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004902:	9b04      	ldr	r3, [sp, #16]
 8004904:	4303      	orrs	r3, r0
 8004906:	3401      	adds	r4, #1
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800490e:	4826      	ldr	r0, [pc, #152]	; (80049a8 <_svfiprintf_r+0x1f0>)
 8004910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004914:	2206      	movs	r2, #6
 8004916:	f7fb fc6b 	bl	80001f0 <memchr>
 800491a:	2800      	cmp	r0, #0
 800491c:	d038      	beq.n	8004990 <_svfiprintf_r+0x1d8>
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <_svfiprintf_r+0x1f4>)
 8004920:	bb1b      	cbnz	r3, 800496a <_svfiprintf_r+0x1b2>
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	3307      	adds	r3, #7
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	3308      	adds	r3, #8
 800492c:	9303      	str	r3, [sp, #12]
 800492e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004930:	4433      	add	r3, r6
 8004932:	9309      	str	r3, [sp, #36]	; 0x24
 8004934:	e767      	b.n	8004806 <_svfiprintf_r+0x4e>
 8004936:	fb0c 3202 	mla	r2, ip, r2, r3
 800493a:	460c      	mov	r4, r1
 800493c:	2001      	movs	r0, #1
 800493e:	e7a5      	b.n	800488c <_svfiprintf_r+0xd4>
 8004940:	2300      	movs	r3, #0
 8004942:	3401      	adds	r4, #1
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	4619      	mov	r1, r3
 8004948:	f04f 0c0a 	mov.w	ip, #10
 800494c:	4620      	mov	r0, r4
 800494e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004952:	3a30      	subs	r2, #48	; 0x30
 8004954:	2a09      	cmp	r2, #9
 8004956:	d903      	bls.n	8004960 <_svfiprintf_r+0x1a8>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0c5      	beq.n	80048e8 <_svfiprintf_r+0x130>
 800495c:	9105      	str	r1, [sp, #20]
 800495e:	e7c3      	b.n	80048e8 <_svfiprintf_r+0x130>
 8004960:	fb0c 2101 	mla	r1, ip, r1, r2
 8004964:	4604      	mov	r4, r0
 8004966:	2301      	movs	r3, #1
 8004968:	e7f0      	b.n	800494c <_svfiprintf_r+0x194>
 800496a:	ab03      	add	r3, sp, #12
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	462a      	mov	r2, r5
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <_svfiprintf_r+0x1f8>)
 8004972:	a904      	add	r1, sp, #16
 8004974:	4638      	mov	r0, r7
 8004976:	f3af 8000 	nop.w
 800497a:	1c42      	adds	r2, r0, #1
 800497c:	4606      	mov	r6, r0
 800497e:	d1d6      	bne.n	800492e <_svfiprintf_r+0x176>
 8004980:	89ab      	ldrh	r3, [r5, #12]
 8004982:	065b      	lsls	r3, r3, #25
 8004984:	f53f af2c 	bmi.w	80047e0 <_svfiprintf_r+0x28>
 8004988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800498a:	b01d      	add	sp, #116	; 0x74
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004990:	ab03      	add	r3, sp, #12
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	462a      	mov	r2, r5
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <_svfiprintf_r+0x1f8>)
 8004998:	a904      	add	r1, sp, #16
 800499a:	4638      	mov	r0, r7
 800499c:	f000 f87a 	bl	8004a94 <_printf_i>
 80049a0:	e7eb      	b.n	800497a <_svfiprintf_r+0x1c2>
 80049a2:	bf00      	nop
 80049a4:	08005081 	.word	0x08005081
 80049a8:	0800508b 	.word	0x0800508b
 80049ac:	00000000 	.word	0x00000000
 80049b0:	08004701 	.word	0x08004701
 80049b4:	08005087 	.word	0x08005087

080049b8 <_printf_common>:
 80049b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	4616      	mov	r6, r2
 80049be:	4699      	mov	r9, r3
 80049c0:	688a      	ldr	r2, [r1, #8]
 80049c2:	690b      	ldr	r3, [r1, #16]
 80049c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bfb8      	it	lt
 80049cc:	4613      	movlt	r3, r2
 80049ce:	6033      	str	r3, [r6, #0]
 80049d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049d4:	4607      	mov	r7, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	b10a      	cbz	r2, 80049de <_printf_common+0x26>
 80049da:	3301      	adds	r3, #1
 80049dc:	6033      	str	r3, [r6, #0]
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	0699      	lsls	r1, r3, #26
 80049e2:	bf42      	ittt	mi
 80049e4:	6833      	ldrmi	r3, [r6, #0]
 80049e6:	3302      	addmi	r3, #2
 80049e8:	6033      	strmi	r3, [r6, #0]
 80049ea:	6825      	ldr	r5, [r4, #0]
 80049ec:	f015 0506 	ands.w	r5, r5, #6
 80049f0:	d106      	bne.n	8004a00 <_printf_common+0x48>
 80049f2:	f104 0a19 	add.w	sl, r4, #25
 80049f6:	68e3      	ldr	r3, [r4, #12]
 80049f8:	6832      	ldr	r2, [r6, #0]
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	42ab      	cmp	r3, r5
 80049fe:	dc26      	bgt.n	8004a4e <_printf_common+0x96>
 8004a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a04:	1e13      	subs	r3, r2, #0
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	bf18      	it	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	0692      	lsls	r2, r2, #26
 8004a0e:	d42b      	bmi.n	8004a68 <_printf_common+0xb0>
 8004a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a14:	4649      	mov	r1, r9
 8004a16:	4638      	mov	r0, r7
 8004a18:	47c0      	blx	r8
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d01e      	beq.n	8004a5c <_printf_common+0xa4>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	68e5      	ldr	r5, [r4, #12]
 8004a22:	6832      	ldr	r2, [r6, #0]
 8004a24:	f003 0306 	and.w	r3, r3, #6
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	bf08      	it	eq
 8004a2c:	1aad      	subeq	r5, r5, r2
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	6922      	ldr	r2, [r4, #16]
 8004a32:	bf0c      	ite	eq
 8004a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a38:	2500      	movne	r5, #0
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	bfc4      	itt	gt
 8004a3e:	1a9b      	subgt	r3, r3, r2
 8004a40:	18ed      	addgt	r5, r5, r3
 8004a42:	2600      	movs	r6, #0
 8004a44:	341a      	adds	r4, #26
 8004a46:	42b5      	cmp	r5, r6
 8004a48:	d11a      	bne.n	8004a80 <_printf_common+0xc8>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e008      	b.n	8004a60 <_printf_common+0xa8>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4652      	mov	r2, sl
 8004a52:	4649      	mov	r1, r9
 8004a54:	4638      	mov	r0, r7
 8004a56:	47c0      	blx	r8
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d103      	bne.n	8004a64 <_printf_common+0xac>
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a64:	3501      	adds	r5, #1
 8004a66:	e7c6      	b.n	80049f6 <_printf_common+0x3e>
 8004a68:	18e1      	adds	r1, r4, r3
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	2030      	movs	r0, #48	; 0x30
 8004a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a72:	4422      	add	r2, r4
 8004a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	e7c7      	b.n	8004a10 <_printf_common+0x58>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4622      	mov	r2, r4
 8004a84:	4649      	mov	r1, r9
 8004a86:	4638      	mov	r0, r7
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d0e6      	beq.n	8004a5c <_printf_common+0xa4>
 8004a8e:	3601      	adds	r6, #1
 8004a90:	e7d9      	b.n	8004a46 <_printf_common+0x8e>
	...

08004a94 <_printf_i>:
 8004a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	460c      	mov	r4, r1
 8004a9a:	4691      	mov	r9, r2
 8004a9c:	7e27      	ldrb	r7, [r4, #24]
 8004a9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004aa0:	2f78      	cmp	r7, #120	; 0x78
 8004aa2:	4680      	mov	r8, r0
 8004aa4:	469a      	mov	sl, r3
 8004aa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aaa:	d807      	bhi.n	8004abc <_printf_i+0x28>
 8004aac:	2f62      	cmp	r7, #98	; 0x62
 8004aae:	d80a      	bhi.n	8004ac6 <_printf_i+0x32>
 8004ab0:	2f00      	cmp	r7, #0
 8004ab2:	f000 80d8 	beq.w	8004c66 <_printf_i+0x1d2>
 8004ab6:	2f58      	cmp	r7, #88	; 0x58
 8004ab8:	f000 80a3 	beq.w	8004c02 <_printf_i+0x16e>
 8004abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ac4:	e03a      	b.n	8004b3c <_printf_i+0xa8>
 8004ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aca:	2b15      	cmp	r3, #21
 8004acc:	d8f6      	bhi.n	8004abc <_printf_i+0x28>
 8004ace:	a001      	add	r0, pc, #4	; (adr r0, 8004ad4 <_printf_i+0x40>)
 8004ad0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ad4:	08004b2d 	.word	0x08004b2d
 8004ad8:	08004b41 	.word	0x08004b41
 8004adc:	08004abd 	.word	0x08004abd
 8004ae0:	08004abd 	.word	0x08004abd
 8004ae4:	08004abd 	.word	0x08004abd
 8004ae8:	08004abd 	.word	0x08004abd
 8004aec:	08004b41 	.word	0x08004b41
 8004af0:	08004abd 	.word	0x08004abd
 8004af4:	08004abd 	.word	0x08004abd
 8004af8:	08004abd 	.word	0x08004abd
 8004afc:	08004abd 	.word	0x08004abd
 8004b00:	08004c4d 	.word	0x08004c4d
 8004b04:	08004b71 	.word	0x08004b71
 8004b08:	08004c2f 	.word	0x08004c2f
 8004b0c:	08004abd 	.word	0x08004abd
 8004b10:	08004abd 	.word	0x08004abd
 8004b14:	08004c6f 	.word	0x08004c6f
 8004b18:	08004abd 	.word	0x08004abd
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004abd 	.word	0x08004abd
 8004b24:	08004abd 	.word	0x08004abd
 8004b28:	08004c37 	.word	0x08004c37
 8004b2c:	680b      	ldr	r3, [r1, #0]
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	600a      	str	r2, [r1, #0]
 8004b34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0a3      	b.n	8004c88 <_printf_i+0x1f4>
 8004b40:	6825      	ldr	r5, [r4, #0]
 8004b42:	6808      	ldr	r0, [r1, #0]
 8004b44:	062e      	lsls	r6, r5, #24
 8004b46:	f100 0304 	add.w	r3, r0, #4
 8004b4a:	d50a      	bpl.n	8004b62 <_printf_i+0xce>
 8004b4c:	6805      	ldr	r5, [r0, #0]
 8004b4e:	600b      	str	r3, [r1, #0]
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	da03      	bge.n	8004b5c <_printf_i+0xc8>
 8004b54:	232d      	movs	r3, #45	; 0x2d
 8004b56:	426d      	negs	r5, r5
 8004b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5c:	485e      	ldr	r0, [pc, #376]	; (8004cd8 <_printf_i+0x244>)
 8004b5e:	230a      	movs	r3, #10
 8004b60:	e019      	b.n	8004b96 <_printf_i+0x102>
 8004b62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b66:	6805      	ldr	r5, [r0, #0]
 8004b68:	600b      	str	r3, [r1, #0]
 8004b6a:	bf18      	it	ne
 8004b6c:	b22d      	sxthne	r5, r5
 8004b6e:	e7ef      	b.n	8004b50 <_printf_i+0xbc>
 8004b70:	680b      	ldr	r3, [r1, #0]
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	1d18      	adds	r0, r3, #4
 8004b76:	6008      	str	r0, [r1, #0]
 8004b78:	0628      	lsls	r0, r5, #24
 8004b7a:	d501      	bpl.n	8004b80 <_printf_i+0xec>
 8004b7c:	681d      	ldr	r5, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <_printf_i+0xf2>
 8004b80:	0669      	lsls	r1, r5, #25
 8004b82:	d5fb      	bpl.n	8004b7c <_printf_i+0xe8>
 8004b84:	881d      	ldrh	r5, [r3, #0]
 8004b86:	4854      	ldr	r0, [pc, #336]	; (8004cd8 <_printf_i+0x244>)
 8004b88:	2f6f      	cmp	r7, #111	; 0x6f
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2308      	moveq	r3, #8
 8004b8e:	230a      	movne	r3, #10
 8004b90:	2100      	movs	r1, #0
 8004b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b96:	6866      	ldr	r6, [r4, #4]
 8004b98:	60a6      	str	r6, [r4, #8]
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	bfa2      	ittt	ge
 8004b9e:	6821      	ldrge	r1, [r4, #0]
 8004ba0:	f021 0104 	bicge.w	r1, r1, #4
 8004ba4:	6021      	strge	r1, [r4, #0]
 8004ba6:	b90d      	cbnz	r5, 8004bac <_printf_i+0x118>
 8004ba8:	2e00      	cmp	r6, #0
 8004baa:	d04d      	beq.n	8004c48 <_printf_i+0x1b4>
 8004bac:	4616      	mov	r6, r2
 8004bae:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bb2:	fb03 5711 	mls	r7, r3, r1, r5
 8004bb6:	5dc7      	ldrb	r7, [r0, r7]
 8004bb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bbc:	462f      	mov	r7, r5
 8004bbe:	42bb      	cmp	r3, r7
 8004bc0:	460d      	mov	r5, r1
 8004bc2:	d9f4      	bls.n	8004bae <_printf_i+0x11a>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d10b      	bne.n	8004be0 <_printf_i+0x14c>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	07df      	lsls	r7, r3, #31
 8004bcc:	d508      	bpl.n	8004be0 <_printf_i+0x14c>
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	6861      	ldr	r1, [r4, #4]
 8004bd2:	4299      	cmp	r1, r3
 8004bd4:	bfde      	ittt	le
 8004bd6:	2330      	movle	r3, #48	; 0x30
 8004bd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004be0:	1b92      	subs	r2, r2, r6
 8004be2:	6122      	str	r2, [r4, #16]
 8004be4:	f8cd a000 	str.w	sl, [sp]
 8004be8:	464b      	mov	r3, r9
 8004bea:	aa03      	add	r2, sp, #12
 8004bec:	4621      	mov	r1, r4
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f7ff fee2 	bl	80049b8 <_printf_common>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d14c      	bne.n	8004c92 <_printf_i+0x1fe>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	b004      	add	sp, #16
 8004bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c02:	4835      	ldr	r0, [pc, #212]	; (8004cd8 <_printf_i+0x244>)
 8004c04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	680e      	ldr	r6, [r1, #0]
 8004c0c:	061f      	lsls	r7, r3, #24
 8004c0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c12:	600e      	str	r6, [r1, #0]
 8004c14:	d514      	bpl.n	8004c40 <_printf_i+0x1ac>
 8004c16:	07d9      	lsls	r1, r3, #31
 8004c18:	bf44      	itt	mi
 8004c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c1e:	6023      	strmi	r3, [r4, #0]
 8004c20:	b91d      	cbnz	r5, 8004c2a <_printf_i+0x196>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	f023 0320 	bic.w	r3, r3, #32
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	e7b0      	b.n	8004b90 <_printf_i+0xfc>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	f043 0320 	orr.w	r3, r3, #32
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	2378      	movs	r3, #120	; 0x78
 8004c38:	4828      	ldr	r0, [pc, #160]	; (8004cdc <_printf_i+0x248>)
 8004c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c3e:	e7e3      	b.n	8004c08 <_printf_i+0x174>
 8004c40:	065e      	lsls	r6, r3, #25
 8004c42:	bf48      	it	mi
 8004c44:	b2ad      	uxthmi	r5, r5
 8004c46:	e7e6      	b.n	8004c16 <_printf_i+0x182>
 8004c48:	4616      	mov	r6, r2
 8004c4a:	e7bb      	b.n	8004bc4 <_printf_i+0x130>
 8004c4c:	680b      	ldr	r3, [r1, #0]
 8004c4e:	6826      	ldr	r6, [r4, #0]
 8004c50:	6960      	ldr	r0, [r4, #20]
 8004c52:	1d1d      	adds	r5, r3, #4
 8004c54:	600d      	str	r5, [r1, #0]
 8004c56:	0635      	lsls	r5, r6, #24
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	d501      	bpl.n	8004c60 <_printf_i+0x1cc>
 8004c5c:	6018      	str	r0, [r3, #0]
 8004c5e:	e002      	b.n	8004c66 <_printf_i+0x1d2>
 8004c60:	0671      	lsls	r1, r6, #25
 8004c62:	d5fb      	bpl.n	8004c5c <_printf_i+0x1c8>
 8004c64:	8018      	strh	r0, [r3, #0]
 8004c66:	2300      	movs	r3, #0
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	4616      	mov	r6, r2
 8004c6c:	e7ba      	b.n	8004be4 <_printf_i+0x150>
 8004c6e:	680b      	ldr	r3, [r1, #0]
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	600a      	str	r2, [r1, #0]
 8004c74:	681e      	ldr	r6, [r3, #0]
 8004c76:	6862      	ldr	r2, [r4, #4]
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f7fb fab8 	bl	80001f0 <memchr>
 8004c80:	b108      	cbz	r0, 8004c86 <_printf_i+0x1f2>
 8004c82:	1b80      	subs	r0, r0, r6
 8004c84:	6060      	str	r0, [r4, #4]
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c90:	e7a8      	b.n	8004be4 <_printf_i+0x150>
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	4632      	mov	r2, r6
 8004c96:	4649      	mov	r1, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	47d0      	blx	sl
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d0ab      	beq.n	8004bf8 <_printf_i+0x164>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	079b      	lsls	r3, r3, #30
 8004ca4:	d413      	bmi.n	8004cce <_printf_i+0x23a>
 8004ca6:	68e0      	ldr	r0, [r4, #12]
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	4298      	cmp	r0, r3
 8004cac:	bfb8      	it	lt
 8004cae:	4618      	movlt	r0, r3
 8004cb0:	e7a4      	b.n	8004bfc <_printf_i+0x168>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d09b      	beq.n	8004bf8 <_printf_i+0x164>
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	9903      	ldr	r1, [sp, #12]
 8004cc6:	1a5b      	subs	r3, r3, r1
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	dcf2      	bgt.n	8004cb2 <_printf_i+0x21e>
 8004ccc:	e7eb      	b.n	8004ca6 <_printf_i+0x212>
 8004cce:	2500      	movs	r5, #0
 8004cd0:	f104 0619 	add.w	r6, r4, #25
 8004cd4:	e7f5      	b.n	8004cc2 <_printf_i+0x22e>
 8004cd6:	bf00      	nop
 8004cd8:	08005092 	.word	0x08005092
 8004cdc:	080050a3 	.word	0x080050a3

08004ce0 <memcpy>:
 8004ce0:	440a      	add	r2, r1
 8004ce2:	4291      	cmp	r1, r2
 8004ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ce8:	d100      	bne.n	8004cec <memcpy+0xc>
 8004cea:	4770      	bx	lr
 8004cec:	b510      	push	{r4, lr}
 8004cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	d1f9      	bne.n	8004cee <memcpy+0xe>
 8004cfa:	bd10      	pop	{r4, pc}

08004cfc <memmove>:
 8004cfc:	4288      	cmp	r0, r1
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	eb01 0402 	add.w	r4, r1, r2
 8004d04:	d902      	bls.n	8004d0c <memmove+0x10>
 8004d06:	4284      	cmp	r4, r0
 8004d08:	4623      	mov	r3, r4
 8004d0a:	d807      	bhi.n	8004d1c <memmove+0x20>
 8004d0c:	1e43      	subs	r3, r0, #1
 8004d0e:	42a1      	cmp	r1, r4
 8004d10:	d008      	beq.n	8004d24 <memmove+0x28>
 8004d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d1a:	e7f8      	b.n	8004d0e <memmove+0x12>
 8004d1c:	4402      	add	r2, r0
 8004d1e:	4601      	mov	r1, r0
 8004d20:	428a      	cmp	r2, r1
 8004d22:	d100      	bne.n	8004d26 <memmove+0x2a>
 8004d24:	bd10      	pop	{r4, pc}
 8004d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d2e:	e7f7      	b.n	8004d20 <memmove+0x24>

08004d30 <_free_r>:
 8004d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d32:	2900      	cmp	r1, #0
 8004d34:	d048      	beq.n	8004dc8 <_free_r+0x98>
 8004d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3a:	9001      	str	r0, [sp, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d42:	bfb8      	it	lt
 8004d44:	18e4      	addlt	r4, r4, r3
 8004d46:	f000 f8d3 	bl	8004ef0 <__malloc_lock>
 8004d4a:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <_free_r+0x9c>)
 8004d4c:	9801      	ldr	r0, [sp, #4]
 8004d4e:	6813      	ldr	r3, [r2, #0]
 8004d50:	4615      	mov	r5, r2
 8004d52:	b933      	cbnz	r3, 8004d62 <_free_r+0x32>
 8004d54:	6063      	str	r3, [r4, #4]
 8004d56:	6014      	str	r4, [r2, #0]
 8004d58:	b003      	add	sp, #12
 8004d5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d5e:	f000 b8cd 	b.w	8004efc <__malloc_unlock>
 8004d62:	42a3      	cmp	r3, r4
 8004d64:	d90b      	bls.n	8004d7e <_free_r+0x4e>
 8004d66:	6821      	ldr	r1, [r4, #0]
 8004d68:	1862      	adds	r2, r4, r1
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bf04      	itt	eq
 8004d6e:	681a      	ldreq	r2, [r3, #0]
 8004d70:	685b      	ldreq	r3, [r3, #4]
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	bf04      	itt	eq
 8004d76:	1852      	addeq	r2, r2, r1
 8004d78:	6022      	streq	r2, [r4, #0]
 8004d7a:	602c      	str	r4, [r5, #0]
 8004d7c:	e7ec      	b.n	8004d58 <_free_r+0x28>
 8004d7e:	461a      	mov	r2, r3
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b10b      	cbz	r3, 8004d88 <_free_r+0x58>
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d9fa      	bls.n	8004d7e <_free_r+0x4e>
 8004d88:	6811      	ldr	r1, [r2, #0]
 8004d8a:	1855      	adds	r5, r2, r1
 8004d8c:	42a5      	cmp	r5, r4
 8004d8e:	d10b      	bne.n	8004da8 <_free_r+0x78>
 8004d90:	6824      	ldr	r4, [r4, #0]
 8004d92:	4421      	add	r1, r4
 8004d94:	1854      	adds	r4, r2, r1
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	6011      	str	r1, [r2, #0]
 8004d9a:	d1dd      	bne.n	8004d58 <_free_r+0x28>
 8004d9c:	681c      	ldr	r4, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	6053      	str	r3, [r2, #4]
 8004da2:	4421      	add	r1, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	e7d7      	b.n	8004d58 <_free_r+0x28>
 8004da8:	d902      	bls.n	8004db0 <_free_r+0x80>
 8004daa:	230c      	movs	r3, #12
 8004dac:	6003      	str	r3, [r0, #0]
 8004dae:	e7d3      	b.n	8004d58 <_free_r+0x28>
 8004db0:	6825      	ldr	r5, [r4, #0]
 8004db2:	1961      	adds	r1, r4, r5
 8004db4:	428b      	cmp	r3, r1
 8004db6:	bf04      	itt	eq
 8004db8:	6819      	ldreq	r1, [r3, #0]
 8004dba:	685b      	ldreq	r3, [r3, #4]
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	bf04      	itt	eq
 8004dc0:	1949      	addeq	r1, r1, r5
 8004dc2:	6021      	streq	r1, [r4, #0]
 8004dc4:	6054      	str	r4, [r2, #4]
 8004dc6:	e7c7      	b.n	8004d58 <_free_r+0x28>
 8004dc8:	b003      	add	sp, #12
 8004dca:	bd30      	pop	{r4, r5, pc}
 8004dcc:	200000a4 	.word	0x200000a4

08004dd0 <_malloc_r>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	1ccd      	adds	r5, r1, #3
 8004dd4:	f025 0503 	bic.w	r5, r5, #3
 8004dd8:	3508      	adds	r5, #8
 8004dda:	2d0c      	cmp	r5, #12
 8004ddc:	bf38      	it	cc
 8004dde:	250c      	movcc	r5, #12
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	4606      	mov	r6, r0
 8004de4:	db01      	blt.n	8004dea <_malloc_r+0x1a>
 8004de6:	42a9      	cmp	r1, r5
 8004de8:	d903      	bls.n	8004df2 <_malloc_r+0x22>
 8004dea:	230c      	movs	r3, #12
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	2000      	movs	r0, #0
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df2:	f000 f87d 	bl	8004ef0 <__malloc_lock>
 8004df6:	4921      	ldr	r1, [pc, #132]	; (8004e7c <_malloc_r+0xac>)
 8004df8:	680a      	ldr	r2, [r1, #0]
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	b99c      	cbnz	r4, 8004e26 <_malloc_r+0x56>
 8004dfe:	4f20      	ldr	r7, [pc, #128]	; (8004e80 <_malloc_r+0xb0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	b923      	cbnz	r3, 8004e0e <_malloc_r+0x3e>
 8004e04:	4621      	mov	r1, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f862 	bl	8004ed0 <_sbrk_r>
 8004e0c:	6038      	str	r0, [r7, #0]
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 f85d 	bl	8004ed0 <_sbrk_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d123      	bne.n	8004e62 <_malloc_r+0x92>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 f86c 	bl	8004efc <__malloc_unlock>
 8004e24:	e7e3      	b.n	8004dee <_malloc_r+0x1e>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	1b5b      	subs	r3, r3, r5
 8004e2a:	d417      	bmi.n	8004e5c <_malloc_r+0x8c>
 8004e2c:	2b0b      	cmp	r3, #11
 8004e2e:	d903      	bls.n	8004e38 <_malloc_r+0x68>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	441c      	add	r4, r3
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	e004      	b.n	8004e42 <_malloc_r+0x72>
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	42a2      	cmp	r2, r4
 8004e3c:	bf0c      	ite	eq
 8004e3e:	600b      	streq	r3, [r1, #0]
 8004e40:	6053      	strne	r3, [r2, #4]
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 f85a 	bl	8004efc <__malloc_unlock>
 8004e48:	f104 000b 	add.w	r0, r4, #11
 8004e4c:	1d23      	adds	r3, r4, #4
 8004e4e:	f020 0007 	bic.w	r0, r0, #7
 8004e52:	1ac2      	subs	r2, r0, r3
 8004e54:	d0cc      	beq.n	8004df0 <_malloc_r+0x20>
 8004e56:	1a1b      	subs	r3, r3, r0
 8004e58:	50a3      	str	r3, [r4, r2]
 8004e5a:	e7c9      	b.n	8004df0 <_malloc_r+0x20>
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	6864      	ldr	r4, [r4, #4]
 8004e60:	e7cc      	b.n	8004dfc <_malloc_r+0x2c>
 8004e62:	1cc4      	adds	r4, r0, #3
 8004e64:	f024 0403 	bic.w	r4, r4, #3
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d0e3      	beq.n	8004e34 <_malloc_r+0x64>
 8004e6c:	1a21      	subs	r1, r4, r0
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f82e 	bl	8004ed0 <_sbrk_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d1dd      	bne.n	8004e34 <_malloc_r+0x64>
 8004e78:	e7cf      	b.n	8004e1a <_malloc_r+0x4a>
 8004e7a:	bf00      	nop
 8004e7c:	200000a4 	.word	0x200000a4
 8004e80:	200000a8 	.word	0x200000a8

08004e84 <_realloc_r>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	4607      	mov	r7, r0
 8004e88:	4614      	mov	r4, r2
 8004e8a:	460e      	mov	r6, r1
 8004e8c:	b921      	cbnz	r1, 8004e98 <_realloc_r+0x14>
 8004e8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e92:	4611      	mov	r1, r2
 8004e94:	f7ff bf9c 	b.w	8004dd0 <_malloc_r>
 8004e98:	b922      	cbnz	r2, 8004ea4 <_realloc_r+0x20>
 8004e9a:	f7ff ff49 	bl	8004d30 <_free_r>
 8004e9e:	4625      	mov	r5, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea4:	f000 f830 	bl	8004f08 <_malloc_usable_size_r>
 8004ea8:	42a0      	cmp	r0, r4
 8004eaa:	d20f      	bcs.n	8004ecc <_realloc_r+0x48>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f7ff ff8e 	bl	8004dd0 <_malloc_r>
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d0f2      	beq.n	8004ea0 <_realloc_r+0x1c>
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	f7ff ff0f 	bl	8004ce0 <memcpy>
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff ff33 	bl	8004d30 <_free_r>
 8004eca:	e7e9      	b.n	8004ea0 <_realloc_r+0x1c>
 8004ecc:	4635      	mov	r5, r6
 8004ece:	e7e7      	b.n	8004ea0 <_realloc_r+0x1c>

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d06      	ldr	r5, [pc, #24]	; (8004eec <_sbrk_r+0x1c>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fc f8fc 	bl	80010d8 <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	200001b0 	.word	0x200001b0

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f000 b811 	b.w	8004f18 <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	200001b8 	.word	0x200001b8

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f000 b80c 	b.w	8004f1a <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	200001b8 	.word	0x200001b8

08004f08 <_malloc_usable_size_r>:
 8004f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0c:	1f18      	subs	r0, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bfbc      	itt	lt
 8004f12:	580b      	ldrlt	r3, [r1, r0]
 8004f14:	18c0      	addlt	r0, r0, r3
 8004f16:	4770      	bx	lr

08004f18 <__retarget_lock_acquire_recursive>:
 8004f18:	4770      	bx	lr

08004f1a <__retarget_lock_release_recursive>:
 8004f1a:	4770      	bx	lr

08004f1c <_init>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr

08004f28 <_fini>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr


LAB05_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a25c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a3fc  0800a3fc  0001a3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a470  0800a470  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800a470  0800a470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a478  0800a478  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a478  0800a478  0001a478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a47c  0800a47c  0001a47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800a480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000144  0800a5c4  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800a5c4  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034d44  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ab  00000000  00000000  00054eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002508  00000000  00000000  00058768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0005ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da9  00000000  00000000  0005d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f646  00000000  00000000  00075e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec39  00000000  00000000  0009546f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001340a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a590  00000000  00000000  001340fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000144 	.word	0x20000144
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3e4 	.word	0x0800a3e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000148 	.word	0x20000148
 80001dc:	0800a3e4 	.word	0x0800a3e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fb75 	bl	8005c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f863 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f96d 	bl	8000864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f941 	bl	8000810 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800058e:	f000 f8c9 	bl	8000724 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4824      	ldr	r0, [pc, #144]	; (8000628 <main+0xb0>)
 8000596:	f007 fd79 	bl	800808c <HAL_TIM_OC_Start_IT>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800059a:	2101      	movs	r1, #1
 800059c:	2000      	movs	r0, #0
 800059e:	f004 ffd3 	bl	8005548 <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 80005a2:	2102      	movs	r1, #2
 80005a4:	2001      	movs	r0, #1
 80005a6:	f004 ffcf 	bl	8005548 <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 80005aa:	2104      	movs	r1, #4
 80005ac:	2002      	movs	r0, #2
 80005ae:	f004 ffcb 	bl	8005548 <IKS01A3_MOTION_SENSOR_Init>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2000      	movs	r0, #0
 80005b6:	f005 f8c3 	bl	8005740 <IKS01A3_MOTION_SENSOR_Enable>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 80005ba:	2102      	movs	r1, #2
 80005bc:	2001      	movs	r0, #1
 80005be:	f005 f8bf 	bl	8005740 <IKS01A3_MOTION_SENSOR_Enable>
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 80005c2:	2104      	movs	r1, #4
 80005c4:	2002      	movs	r0, #2
 80005c6:	f005 f8bb 	bl	8005740 <IKS01A3_MOTION_SENSOR_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time_to_read == 1){
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <main+0xb4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1fb      	bne.n	80005ca <main+0x52>
		  time_to_read = 0;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0xb4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, &gyro_axes);
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <main+0xb8>)
 80005da:	2101      	movs	r1, #1
 80005dc:	2000      	movs	r0, #0
 80005de:	f005 f8f1 	bl	80057c4 <IKS01A3_MOTION_SENSOR_GetAxes>
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &accelero_axes);
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <main+0xbc>)
 80005e4:	2102      	movs	r1, #2
 80005e6:	2001      	movs	r0, #1
 80005e8:	f005 f8ec 	bl	80057c4 <IKS01A3_MOTION_SENSOR_GetAxes>
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, &magneto_axes);
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <main+0xc0>)
 80005ee:	2104      	movs	r1, #4
 80005f0:	2002      	movs	r0, #2
 80005f2:	f005 f8e7 	bl	80057c4 <IKS01A3_MOTION_SENSOR_GetAxes>
//				  "%s X:%ld, Y:%ld, Z:%ld\n\r%s X:%ld, Y:%ld, Z:%ld\n\r%s X:%ld, Y:%ld, Z:%ld\n\r",
//		  			"Gyro", gyro_axes.x, gyro_axes.y, gyro_axes.z,
//					"Accelero", accelero_axes.x, accelero_axes.y, accelero_axes.z,
//					"Magneto", magneto_axes.x, magneto_axes.y, magneto_axes.z);
//		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
		  uint8_t length = sprintf(msg, ""
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <main+0xbc>)
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <main+0xbc>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <main+0xbc>)
 8000600:	6892      	ldr	r2, [r2, #8]
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	460b      	mov	r3, r1
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <main+0xc4>)
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <main+0xc8>)
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <main+0xcc>)
 800060e:	f009 fabb 	bl	8009b88 <siprintf>
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
				  "%s X:%ld, Y:%ld, Z:%ld\n\r",
					"Accelero", accelero_axes.x, accelero_axes.y, accelero_axes.z);
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	b29b      	uxth	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	4909      	ldr	r1, [pc, #36]	; (8000644 <main+0xcc>)
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <main+0xd0>)
 8000620:	f008 fc21 	bl	8008e66 <HAL_UART_Transmit_IT>
	  if (time_to_read == 1){
 8000624:	e7d1      	b.n	80005ca <main+0x52>
 8000626:	bf00      	nop
 8000628:	200002e0 	.word	0x200002e0
 800062c:	20000160 	.word	0x20000160
 8000630:	20000264 	.word	0x20000264
 8000634:	20000258 	.word	0x20000258
 8000638:	2000036c 	.word	0x2000036c
 800063c:	0800a3fc 	.word	0x0800a3fc
 8000640:	0800a408 	.word	0x0800a408
 8000644:	20000270 	.word	0x20000270
 8000648:	20000328 	.word	0x20000328

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f009 fa8c 	bl	8009b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a28      	ldr	r2, [pc, #160]	; (800071c <SystemClock_Config+0xd0>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <SystemClock_Config+0xd0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd4>)
 800069a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 ffbc 	bl	8007654 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e2:	f000 f941 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f007 fa1e 	bl	8007b44 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070e:	f000 f92b 	bl	8000968 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <MX_TIM3_Init+0xe8>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4199;
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_TIM3_Init+0xe4>)
 800075c:	f241 0267 	movw	r2, #4199	; 0x1067
 8000760:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_TIM3_Init+0xe4>)
 800076a:	f242 720f 	movw	r2, #9999	; 0x270f
 800076e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800077c:	4822      	ldr	r0, [pc, #136]	; (8000808 <MX_TIM3_Init+0xe4>)
 800077e:	f007 fbdd 	bl	8007f3c <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000788:	f000 f8ee 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000796:	4619      	mov	r1, r3
 8000798:	481b      	ldr	r0, [pc, #108]	; (8000808 <MX_TIM3_Init+0xe4>)
 800079a:	f007 fed9 	bl	8008550 <HAL_TIM_ConfigClockSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80007a4:	f000 f8e0 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007aa:	f007 fc16 	bl	8007fda <HAL_TIM_OC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80007b4:	f000 f8d8 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4619      	mov	r1, r3
 80007c6:	4810      	ldr	r0, [pc, #64]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007c8:	f008 fa7e 	bl	8008cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80007d2:	f000 f8c9 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 80007da:	f241 3387 	movw	r3, #4999	; 0x1387
 80007de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007f0:	f007 fe52 	bl	8008498 <HAL_TIM_OC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80007fa:	f000 f8b5 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3738      	adds	r7, #56	; 0x38
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200002e0 	.word	0x200002e0
 800080c:	40000400 	.word	0x40000400

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f008 fac0 	bl	8008dcc <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f889 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000328 	.word	0x20000328
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a25      	ldr	r2, [pc, #148]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	4812      	ldr	r0, [pc, #72]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008f0:	f005 fe5e 	bl	80065b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_GPIO_Init+0xd8>)
 800090c:	f005 fbe8 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000910:	2320      	movs	r3, #32
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0xd4>)
 8000928:	f005 fbda 	bl	80060e0 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020800 	.word	0x40020800

08000940 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	time_to_read = 1;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800094e:	2120      	movs	r1, #32
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000952:	f005 fe46 	bl	80065e2 <HAL_GPIO_TogglePin>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000160 	.word	0x20000160
 8000964:	40020000 	.word	0x40020000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f005 fac0 	bl	8005f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_TIM_Base_MspInit+0x48>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d115      	bne.n	8000a02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_TIM_Base_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_TIM_Base_MspInit+0x4c>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_TIM_Base_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	201d      	movs	r0, #29
 80009f8:	f005 faa9 	bl	8005f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009fc:	201d      	movs	r0, #29
 80009fe:	f005 fac2 	bl	8005f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40000400 	.word	0x40000400
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d133      	bne.n	8000a9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <HAL_UART_MspInit+0x9c>)
 8000a8a:	f005 fb29 	bl	80060e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2026      	movs	r0, #38	; 0x26
 8000a94:	f005 fa5b 	bl	8005f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a98:	2026      	movs	r0, #38	; 0x26
 8000a9a:	f005 fa74 	bl	8005f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f005 f906 	bl	8005d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM3_IRQHandler+0x10>)
 8000b0e:	f007 fbbb 	bl	8008288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002e0 	.word	0x200002e0

08000b1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <USART2_IRQHandler+0x10>)
 8000b22:	f008 f9e5 	bl	8008ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000328 	.word	0x20000328

08000b30 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <BSP_I2C1_Init+0x58>)
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <BSP_I2C1_Init+0x5c>)
 8000b3e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <BSP_I2C1_Init+0x60>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	4912      	ldr	r1, [pc, #72]	; (8000b90 <BSP_I2C1_Init+0x60>)
 8000b48:	600a      	str	r2, [r1, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d117      	bne.n	8000b7e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <BSP_I2C1_Init+0x58>)
 8000b50:	f006 fa0a 	bl	8006f68 <HAL_I2C_GetState>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d111      	bne.n	8000b7e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000b5a:	480b      	ldr	r0, [pc, #44]	; (8000b88 <BSP_I2C1_Init+0x58>)
 8000b5c:	f000 f8e2 	bl	8000d24 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000b66:	4808      	ldr	r0, [pc, #32]	; (8000b88 <BSP_I2C1_Init+0x58>)
 8000b68:	f000 f8a8 	bl	8000cbc <MX_I2C1_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b72:	f06f 0307 	mvn.w	r3, #7
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	e001      	b.n	8000b7e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000378 	.word	0x20000378
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	20000164 	.word	0x20000164

08000b94 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d014      	beq.n	8000bd0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <BSP_I2C1_DeInit+0x48>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10b      	bne.n	8000bd0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <BSP_I2C1_DeInit+0x4c>)
 8000bba:	f000 f8fd 	bl	8000db8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <BSP_I2C1_DeInit+0x4c>)
 8000bc0:	f005 fe6e 	bl	80068a0 <HAL_I2C_DeInit>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000bca:	f06f 0307 	mvn.w	r3, #7
 8000bce:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000164 	.word	0x20000164
 8000be0:	20000378 	.word	0x20000378

08000be4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	60ba      	str	r2, [r7, #8]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4603      	mov	r3, r0
 8000bf0:	81fb      	strh	r3, [r7, #14]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	81bb      	strh	r3, [r7, #12]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000bfe:	89ba      	ldrh	r2, [r7, #12]
 8000c00:	89f9      	ldrh	r1, [r7, #14]
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2301      	movs	r3, #1
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <BSP_I2C1_WriteReg+0x60>)
 8000c14:	f005 fe88 	bl	8006928 <HAL_I2C_Mem_Write>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00c      	beq.n	8000c38 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <BSP_I2C1_WriteReg+0x60>)
 8000c20:	f006 f9b0 	bl	8006f84 <HAL_I2C_GetError>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d103      	bne.n	8000c32 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c2a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e002      	b.n	8000c38 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c32:	f06f 0303 	mvn.w	r3, #3
 8000c36:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000c38:	697b      	ldr	r3, [r7, #20]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000378 	.word	0x20000378

08000c48 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	60ba      	str	r2, [r7, #8]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4603      	mov	r3, r0
 8000c54:	81fb      	strh	r3, [r7, #14]
 8000c56:	460b      	mov	r3, r1
 8000c58:	81bb      	strh	r3, [r7, #12]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c62:	89ba      	ldrh	r2, [r7, #12]
 8000c64:	89f9      	ldrh	r1, [r7, #14]
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <BSP_I2C1_ReadReg+0x60>)
 8000c78:	f005 ff50 	bl	8006b1c <HAL_I2C_Mem_Read>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00c      	beq.n	8000c9c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000c82:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <BSP_I2C1_ReadReg+0x60>)
 8000c84:	f006 f97e 	bl	8006f84 <HAL_I2C_GetError>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d103      	bne.n	8000c96 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c8e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e002      	b.n	8000c9c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c96:	f06f 0303 	mvn.w	r3, #3
 8000c9a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000c9c:	697b      	ldr	r3, [r7, #20]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000378 	.word	0x20000378

08000cac <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000cb0:	f005 f842 	bl	8005d38 <HAL_GetTick>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <MX_I2C1_Init+0x60>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <MX_I2C1_Init+0x64>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce6:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f005 fc89 	bl	8006618 <HAL_I2C_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	00061a80 	.word	0x00061a80

08000d24 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <I2C1_MspInit+0x8c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <I2C1_MspInit+0x8c>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <I2C1_MspInit+0x8c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4e:	2312      	movs	r3, #18
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <I2C1_MspInit+0x90>)
 8000d66:	f005 f9bb 	bl	80060e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <I2C1_MspInit+0x90>)
 8000d88:	f005 f9aa 	bl	80060e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <I2C1_MspInit+0x8c>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <I2C1_MspInit+0x8c>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <I2C1_MspInit+0x8c>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400

08000db8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <I2C1_MspDeInit+0x30>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <I2C1_MspDeInit+0x30>)
 8000dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000dca:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <I2C1_MspDeInit+0x34>)
 8000dd2:	f005 fb09 	bl	80063e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <I2C1_MspDeInit+0x34>)
 8000ddc:	f005 fb04 	bl	80063e8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f008 fe80 	bl	8009b24 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20018000 	.word	0x20018000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	20000168 	.word	0x20000168
 8000e58:	200003f0 	.word	0x200003f0

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff ffd7 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f008 fe3f 	bl	8009b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb61 	bl	8000578 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000ec4:	0800a480 	.word	0x0800a480
  ldr r2, =_sbss
 8000ec8:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000ecc:	200003ec 	.word	0x200003ec

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e051      	b.n	8000f94 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	7b1a      	ldrb	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	695a      	ldr	r2, [r3, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	699a      	ldr	r2, [r3, #24]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <LIS2DW12_RegisterBusIO+0xcc>)
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <LIS2DW12_RegisterBusIO+0xd0>)
 8000f32:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	69da      	ldr	r2, [r3, #28]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d103      	bne.n	8000f52 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	e020      	b.n	8000f94 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4798      	blx	r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e016      	b.n	8000f94 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d112      	bne.n	8000f94 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10d      	bne.n	8000f94 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8000f7c:	7afb      	ldrb	r3, [r7, #11]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2121      	movs	r1, #33	; 0x21
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fd87 	bl	8001a96 <LIS2DW12_Write_Reg>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000f94:	68fb      	ldr	r3, [r7, #12]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08001e29 	.word	0x08001e29
 8000fa4:	08001e5f 	.word	0x08001e5f

08000fa8 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3320      	adds	r3, #32
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fa94 	bl	80024e4 <lis2dw12_auto_increment_set>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e04b      	b.n	8001060 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3320      	adds	r3, #32
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f9a8 	bl	8002324 <lis2dw12_block_data_update_set>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e03f      	b.n	8001060 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3320      	adds	r3, #32
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 faa2 	bl	8002530 <lis2dw12_fifo_mode_set>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e033      	b.n	8001060 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3320      	adds	r3, #32
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 ff78 	bl	8001ef4 <lis2dw12_power_mode_set>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e027      	b.n	8001060 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <LIS2DW12_Init+0xc0>)
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3320      	adds	r3, #32
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f001 f869 	bl	8002104 <lis2dw12_data_rate_set>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	e010      	b.n	8001060 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3320      	adds	r3, #32
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f993 	bl	8002370 <lis2dw12_full_scale_set>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	e004      	b.n	8001060 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	42c80000 	.word	0x42c80000

0800106c <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f888 	bl	800118a <LIS2DW12_ACC_Disable>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	e010      	b.n	80010a8 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3320      	adds	r3, #32
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f9fe 	bl	80024c2 <lis2dw12_device_id_get>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	e000      	b.n	80010d4 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2210      	movs	r2, #16
 8001108:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <LIS2DW12_GetCapabilities+0x58>)
 800111c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	44c80000 	.word	0x44c80000

08001138 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e019      	b.n	8001182 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001160:	461a      	mov	r2, r3
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fcb0 	bl	8001acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e004      	b.n	8001182 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	e010      	b.n	80011c2 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3320      	adds	r3, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 ffac 	bl	8002104 <lis2dw12_data_rate_set>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e004      	b.n	80011c2 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3320      	adds	r3, #32
 80011de:	f107 020b 	add.w	r2, r7, #11
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 f8e9 	bl	80023bc <lis2dw12_full_scale_get>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	e0a0      	b.n	8001338 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3320      	adds	r3, #32
 80011fa:	f107 020a 	add.w	r2, r7, #10
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fec5 	bl	8001f90 <lis2dw12_power_mode_get>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	e092      	b.n	8001338 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8001212:	7abb      	ldrb	r3, [r7, #10]
 8001214:	2b1b      	cmp	r3, #27
 8001216:	f200 8087 	bhi.w	8001328 <LIS2DW12_ACC_GetSensitivity+0x15c>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <LIS2DW12_ACC_GetSensitivity+0x54>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001291 	.word	0x08001291
 8001224:	080012dd 	.word	0x080012dd
 8001228:	080012dd 	.word	0x080012dd
 800122c:	080012dd 	.word	0x080012dd
 8001230:	080012dd 	.word	0x080012dd
 8001234:	08001329 	.word	0x08001329
 8001238:	08001329 	.word	0x08001329
 800123c:	08001329 	.word	0x08001329
 8001240:	08001291 	.word	0x08001291
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	08001329 	.word	0x08001329
 8001254:	08001329 	.word	0x08001329
 8001258:	08001329 	.word	0x08001329
 800125c:	08001329 	.word	0x08001329
 8001260:	08001291 	.word	0x08001291
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012dd 	.word	0x080012dd
 8001274:	08001329 	.word	0x08001329
 8001278:	08001329 	.word	0x08001329
 800127c:	08001329 	.word	0x08001329
 8001280:	08001291 	.word	0x08001291
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d81a      	bhi.n	80012cc <LIS2DW12_ACC_GetSensitivity+0x100>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	080012ad 	.word	0x080012ad
 80012a0:	080012b5 	.word	0x080012b5
 80012a4:	080012bd 	.word	0x080012bd
 80012a8:	080012c5 	.word	0x080012c5
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4a24      	ldr	r2, [pc, #144]	; (8001340 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80012b0:	601a      	str	r2, [r3, #0]
          break;
 80012b2:	e012      	b.n	80012da <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80012b8:	601a      	str	r2, [r3, #0]
          break;
 80012ba:	e00e      	b.n	80012da <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4a22      	ldr	r2, [pc, #136]	; (8001348 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80012c0:	601a      	str	r2, [r3, #0]
          break;
 80012c2:	e00a      	b.n	80012da <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4a21      	ldr	r2, [pc, #132]	; (800134c <LIS2DW12_ACC_GetSensitivity+0x180>)
 80012c8:	601a      	str	r2, [r3, #0]
          break;
 80012ca:	e006      	b.n	80012da <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4a20      	ldr	r2, [pc, #128]	; (8001350 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80012d0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	60fb      	str	r3, [r7, #12]
          break;
 80012d8:	bf00      	nop
      }
      break;
 80012da:	e02c      	b.n	8001336 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d81a      	bhi.n	8001318 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80012e2:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	08001301 	.word	0x08001301
 80012f0:	08001309 	.word	0x08001309
 80012f4:	08001311 	.word	0x08001311
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4a16      	ldr	r2, [pc, #88]	; (8001354 <LIS2DW12_ACC_GetSensitivity+0x188>)
 80012fc:	601a      	str	r2, [r3, #0]
          break;
 80012fe:	e012      	b.n	8001326 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 8001304:	601a      	str	r2, [r3, #0]
          break;
 8001306:	e00e      	b.n	8001326 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LIS2DW12_ACC_GetSensitivity+0x174>)
 800130c:	601a      	str	r2, [r3, #0]
          break;
 800130e:	e00a      	b.n	8001326 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001314:	601a      	str	r2, [r3, #0]
          break;
 8001316:	e006      	b.n	8001326 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800131c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	60fb      	str	r3, [r7, #12]
          break;
 8001324:	bf00      	nop
      }
      break;
 8001326:	e006      	b.n	8001336 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <LIS2DW12_ACC_GetSensitivity+0x184>)
 800132c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	60fb      	str	r3, [r7, #12]
      break;
 8001334:	bf00      	nop
  }

  return ret;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	3f79db23 	.word	0x3f79db23
 8001344:	3ff9db23 	.word	0x3ff9db23
 8001348:	4079db23 	.word	0x4079db23
 800134c:	40f9db23 	.word	0x40f9db23
 8001350:	bf800000 	.word	0xbf800000
 8001354:	3e79db23 	.word	0x3e79db23
 8001358:	3ef9db23 	.word	0x3ef9db23

0800135c <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3320      	adds	r3, #32
 800136e:	f107 020b 	add.w	r2, r7, #11
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f000 ff0b 	bl	8002190 <lis2dw12_data_rate_get>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	e1d4      	b.n	8001730 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3320      	adds	r3, #32
 800138a:	f107 020a 	add.w	r2, r7, #10
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fdfd 	bl	8001f90 <lis2dw12_power_mode_get>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	e1c6      	b.n	8001730 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80013a2:	7afb      	ldrb	r3, [r7, #11]
 80013a4:	2b32      	cmp	r3, #50	; 0x32
 80013a6:	f200 81bb 	bhi.w	8001720 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	0800147d 	.word	0x0800147d
 80013b4:	08001487 	.word	0x08001487
 80013b8:	08001525 	.word	0x08001525
 80013bc:	0800152d 	.word	0x0800152d
 80013c0:	08001535 	.word	0x08001535
 80013c4:	0800153d 	.word	0x0800153d
 80013c8:	08001545 	.word	0x08001545
 80013cc:	0800154d 	.word	0x0800154d
 80013d0:	080015e9 	.word	0x080015e9
 80013d4:	08001685 	.word	0x08001685
 80013d8:	08001721 	.word	0x08001721
 80013dc:	08001721 	.word	0x08001721
 80013e0:	08001721 	.word	0x08001721
 80013e4:	08001721 	.word	0x08001721
 80013e8:	08001721 	.word	0x08001721
 80013ec:	08001721 	.word	0x08001721
 80013f0:	08001721 	.word	0x08001721
 80013f4:	08001721 	.word	0x08001721
 80013f8:	0800147d 	.word	0x0800147d
 80013fc:	08001721 	.word	0x08001721
 8001400:	08001721 	.word	0x08001721
 8001404:	08001721 	.word	0x08001721
 8001408:	08001721 	.word	0x08001721
 800140c:	08001721 	.word	0x08001721
 8001410:	08001721 	.word	0x08001721
 8001414:	08001721 	.word	0x08001721
 8001418:	08001721 	.word	0x08001721
 800141c:	08001721 	.word	0x08001721
 8001420:	08001721 	.word	0x08001721
 8001424:	08001721 	.word	0x08001721
 8001428:	08001721 	.word	0x08001721
 800142c:	08001721 	.word	0x08001721
 8001430:	08001721 	.word	0x08001721
 8001434:	08001721 	.word	0x08001721
 8001438:	08001721 	.word	0x08001721
 800143c:	08001721 	.word	0x08001721
 8001440:	08001721 	.word	0x08001721
 8001444:	08001721 	.word	0x08001721
 8001448:	08001721 	.word	0x08001721
 800144c:	08001721 	.word	0x08001721
 8001450:	08001721 	.word	0x08001721
 8001454:	08001721 	.word	0x08001721
 8001458:	08001721 	.word	0x08001721
 800145c:	08001721 	.word	0x08001721
 8001460:	08001721 	.word	0x08001721
 8001464:	08001721 	.word	0x08001721
 8001468:	08001721 	.word	0x08001721
 800146c:	08001721 	.word	0x08001721
 8001470:	08001721 	.word	0x08001721
 8001474:	08001721 	.word	0x08001721
 8001478:	0800147d 	.word	0x0800147d
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
      break;
 8001484:	e153      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001486:	7abb      	ldrb	r3, [r7, #10]
 8001488:	2b1b      	cmp	r3, #27
 800148a:	d843      	bhi.n	8001514 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	0800150d 	.word	0x0800150d
 8001498:	0800150d 	.word	0x0800150d
 800149c:	0800150d 	.word	0x0800150d
 80014a0:	0800150d 	.word	0x0800150d
 80014a4:	08001505 	.word	0x08001505
 80014a8:	08001515 	.word	0x08001515
 80014ac:	08001515 	.word	0x08001515
 80014b0:	08001515 	.word	0x08001515
 80014b4:	0800150d 	.word	0x0800150d
 80014b8:	0800150d 	.word	0x0800150d
 80014bc:	0800150d 	.word	0x0800150d
 80014c0:	0800150d 	.word	0x0800150d
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001515 	.word	0x08001515
 80014cc:	08001515 	.word	0x08001515
 80014d0:	08001515 	.word	0x08001515
 80014d4:	0800150d 	.word	0x0800150d
 80014d8:	0800150d 	.word	0x0800150d
 80014dc:	0800150d 	.word	0x0800150d
 80014e0:	0800150d 	.word	0x0800150d
 80014e4:	08001505 	.word	0x08001505
 80014e8:	08001515 	.word	0x08001515
 80014ec:	08001515 	.word	0x08001515
 80014f0:	08001515 	.word	0x08001515
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	0800150d 	.word	0x0800150d
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	0800150d 	.word	0x0800150d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4a8c      	ldr	r2, [pc, #560]	; (8001738 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001508:	601a      	str	r2, [r3, #0]
          break;
 800150a:	e00a      	b.n	8001522 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4a8b      	ldr	r2, [pc, #556]	; (800173c <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8001510:	601a      	str	r2, [r3, #0]
          break;
 8001512:	e006      	b.n	8001522 <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4a8a      	ldr	r2, [pc, #552]	; (8001740 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001518:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	60fb      	str	r3, [r7, #12]
          break;
 8001520:	bf00      	nop
      }
      break;
 8001522:	e104      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4a84      	ldr	r2, [pc, #528]	; (8001738 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001528:	601a      	str	r2, [r3, #0]
      break;
 800152a:	e100      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4a85      	ldr	r2, [pc, #532]	; (8001744 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8001530:	601a      	str	r2, [r3, #0]
      break;
 8001532:	e0fc      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4a84      	ldr	r2, [pc, #528]	; (8001748 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8001538:	601a      	str	r2, [r3, #0]
      break;
 800153a:	e0f8      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4a83      	ldr	r2, [pc, #524]	; (800174c <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8001540:	601a      	str	r2, [r3, #0]
      break;
 8001542:	e0f4      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4a82      	ldr	r2, [pc, #520]	; (8001750 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001548:	601a      	str	r2, [r3, #0]
      break;
 800154a:	e0f0      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 800154c:	7abb      	ldrb	r3, [r7, #10]
 800154e:	2b1b      	cmp	r3, #27
 8001550:	d842      	bhi.n	80015d8 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	080015d1 	.word	0x080015d1
 800155c:	080015d1 	.word	0x080015d1
 8001560:	080015d1 	.word	0x080015d1
 8001564:	080015d1 	.word	0x080015d1
 8001568:	080015c9 	.word	0x080015c9
 800156c:	080015d9 	.word	0x080015d9
 8001570:	080015d9 	.word	0x080015d9
 8001574:	080015d9 	.word	0x080015d9
 8001578:	080015d1 	.word	0x080015d1
 800157c:	080015d1 	.word	0x080015d1
 8001580:	080015d1 	.word	0x080015d1
 8001584:	080015d1 	.word	0x080015d1
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015d9 	.word	0x080015d9
 8001590:	080015d9 	.word	0x080015d9
 8001594:	080015d9 	.word	0x080015d9
 8001598:	080015d1 	.word	0x080015d1
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	080015d1 	.word	0x080015d1
 80015a4:	080015d1 	.word	0x080015d1
 80015a8:	080015c9 	.word	0x080015c9
 80015ac:	080015d9 	.word	0x080015d9
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080015d9 	.word	0x080015d9
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015d1 	.word	0x080015d1
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080015d1 	.word	0x080015d1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4a62      	ldr	r2, [pc, #392]	; (8001754 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80015cc:	601a      	str	r2, [r3, #0]
          break;
 80015ce:	e00a      	b.n	80015e6 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4a5f      	ldr	r2, [pc, #380]	; (8001750 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80015d4:	601a      	str	r2, [r3, #0]
          break;
 80015d6:	e006      	b.n	80015e6 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4a59      	ldr	r2, [pc, #356]	; (8001740 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80015dc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	60fb      	str	r3, [r7, #12]
          break;
 80015e4:	bf00      	nop
      }
      break;
 80015e6:	e0a2      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80015e8:	7abb      	ldrb	r3, [r7, #10]
 80015ea:	2b1b      	cmp	r3, #27
 80015ec:	d842      	bhi.n	8001674 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80015ee:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	0800166d 	.word	0x0800166d
 80015f8:	0800166d 	.word	0x0800166d
 80015fc:	0800166d 	.word	0x0800166d
 8001600:	0800166d 	.word	0x0800166d
 8001604:	08001665 	.word	0x08001665
 8001608:	08001675 	.word	0x08001675
 800160c:	08001675 	.word	0x08001675
 8001610:	08001675 	.word	0x08001675
 8001614:	0800166d 	.word	0x0800166d
 8001618:	0800166d 	.word	0x0800166d
 800161c:	0800166d 	.word	0x0800166d
 8001620:	0800166d 	.word	0x0800166d
 8001624:	08001675 	.word	0x08001675
 8001628:	08001675 	.word	0x08001675
 800162c:	08001675 	.word	0x08001675
 8001630:	08001675 	.word	0x08001675
 8001634:	0800166d 	.word	0x0800166d
 8001638:	0800166d 	.word	0x0800166d
 800163c:	0800166d 	.word	0x0800166d
 8001640:	0800166d 	.word	0x0800166d
 8001644:	08001665 	.word	0x08001665
 8001648:	08001675 	.word	0x08001675
 800164c:	08001675 	.word	0x08001675
 8001650:	08001675 	.word	0x08001675
 8001654:	0800166d 	.word	0x0800166d
 8001658:	0800166d 	.word	0x0800166d
 800165c:	0800166d 	.word	0x0800166d
 8001660:	0800166d 	.word	0x0800166d
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4a3c      	ldr	r2, [pc, #240]	; (8001758 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8001668:	601a      	str	r2, [r3, #0]
          break;
 800166a:	e00a      	b.n	8001682 <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4a38      	ldr	r2, [pc, #224]	; (8001750 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001670:	601a      	str	r2, [r3, #0]
          break;
 8001672:	e006      	b.n	8001682 <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001678:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	60fb      	str	r3, [r7, #12]
          break;
 8001680:	bf00      	nop
      }
      break;
 8001682:	e054      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001684:	7abb      	ldrb	r3, [r7, #10]
 8001686:	2b1b      	cmp	r3, #27
 8001688:	d842      	bhi.n	8001710 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	08001709 	.word	0x08001709
 8001694:	08001709 	.word	0x08001709
 8001698:	08001709 	.word	0x08001709
 800169c:	08001709 	.word	0x08001709
 80016a0:	08001701 	.word	0x08001701
 80016a4:	08001711 	.word	0x08001711
 80016a8:	08001711 	.word	0x08001711
 80016ac:	08001711 	.word	0x08001711
 80016b0:	08001709 	.word	0x08001709
 80016b4:	08001709 	.word	0x08001709
 80016b8:	08001709 	.word	0x08001709
 80016bc:	08001709 	.word	0x08001709
 80016c0:	08001711 	.word	0x08001711
 80016c4:	08001711 	.word	0x08001711
 80016c8:	08001711 	.word	0x08001711
 80016cc:	08001711 	.word	0x08001711
 80016d0:	08001709 	.word	0x08001709
 80016d4:	08001709 	.word	0x08001709
 80016d8:	08001709 	.word	0x08001709
 80016dc:	08001709 	.word	0x08001709
 80016e0:	08001701 	.word	0x08001701
 80016e4:	08001711 	.word	0x08001711
 80016e8:	08001711 	.word	0x08001711
 80016ec:	08001711 	.word	0x08001711
 80016f0:	08001709 	.word	0x08001709
 80016f4:	08001709 	.word	0x08001709
 80016f8:	08001709 	.word	0x08001709
 80016fc:	08001709 	.word	0x08001709
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8001704:	601a      	str	r2, [r3, #0]
          break;
 8001706:	e00a      	b.n	800171e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800170c:	601a      	str	r2, [r3, #0]
          break;
 800170e:	e006      	b.n	800171e <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001714:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	60fb      	str	r3, [r7, #12]
          break;
 800171c:	bf00      	nop
      }
      break;
 800171e:	e006      	b.n	800172e <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001724:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	60fb      	str	r3, [r7, #12]
      break;
 800172c:	bf00      	nop
  }

  return ret;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	41480000 	.word	0x41480000
 800173c:	3fcccccd 	.word	0x3fcccccd
 8001740:	bf800000 	.word	0xbf800000
 8001744:	41c80000 	.word	0x41c80000
 8001748:	42480000 	.word	0x42480000
 800174c:	42c80000 	.word	0x42c80000
 8001750:	43480000 	.word	0x43480000
 8001754:	43c80000 	.word	0x43c80000
 8001758:	44480000 	.word	0x44480000
 800175c:	44c80000 	.word	0x44c80000

08001760 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	ed97 0a00 	vldr	s0, [r7]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f805 	bl	8001784 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 800177a:	4603      	mov	r3, r0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001790:	460b      	mov	r3, r1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d109      	bne.n	80017b6 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80017a2:	79ba      	ldrb	r2, [r7, #6]
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4619      	mov	r1, r3
 80017a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f98d 	bl	8001acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80017b2:	4603      	mov	r3, r0
 80017b4:	e008      	b.n	80017c8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80017b6:	79ba      	ldrb	r2, [r7, #6]
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4619      	mov	r1, r3
 80017bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fa9f 	bl	8001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80017c6:	4603      	mov	r3, r0
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3320      	adds	r3, #32
 80017e2:	f107 020b 	add.w	r2, r7, #11
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fde7 	bl	80023bc <lis2dw12_full_scale_get>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	e027      	b.n	800184a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80017fa:	7afb      	ldrb	r3, [r7, #11]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d81b      	bhi.n	8001838 <LIS2DW12_ACC_GetFullScale+0x68>
 8001800:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <LIS2DW12_ACC_GetFullScale+0x38>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	08001819 	.word	0x08001819
 800180c:	08001821 	.word	0x08001821
 8001810:	08001829 	.word	0x08001829
 8001814:	08001831 	.word	0x08001831
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
      break;
 800181e:	e013      	b.n	8001848 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2204      	movs	r2, #4
 8001824:	601a      	str	r2, [r3, #0]
      break;
 8001826:	e00f      	b.n	8001848 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2208      	movs	r2, #8
 800182c:	601a      	str	r2, [r3, #0]
      break;
 800182e:	e00b      	b.n	8001848 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2210      	movs	r2, #16
 8001834:	601a      	str	r2, [r3, #0]
      break;
 8001836:	e007      	b.n	8001848 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f04f 32ff 	mov.w	r2, #4294967295
 800183e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	60fb      	str	r3, [r7, #12]
      break;
 8001846:	bf00      	nop
  }

  return ret;
 8001848:	68fb      	ldr	r3, [r7, #12]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop

08001854 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b02      	cmp	r3, #2
 8001862:	dd0b      	ble.n	800187c <LIS2DW12_ACC_SetFullScale+0x28>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b04      	cmp	r3, #4
 8001868:	dd06      	ble.n	8001878 <LIS2DW12_ACC_SetFullScale+0x24>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b08      	cmp	r3, #8
 800186e:	dc01      	bgt.n	8001874 <LIS2DW12_ACC_SetFullScale+0x20>
 8001870:	2302      	movs	r3, #2
 8001872:	e004      	b.n	800187e <LIS2DW12_ACC_SetFullScale+0x2a>
 8001874:	2303      	movs	r3, #3
 8001876:	e002      	b.n	800187e <LIS2DW12_ACC_SetFullScale+0x2a>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <LIS2DW12_ACC_SetFullScale+0x2a>
 800187c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800187e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3320      	adds	r3, #32
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fd71 	bl	8002370 <lis2dw12_full_scale_set>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	e000      	b.n	800189c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3320      	adds	r3, #32
 80018b6:	f107 020b 	add.w	r2, r7, #11
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fb67 	bl	8001f90 <lis2dw12_power_mode_get>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	e089      	b.n	80019e2 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3320      	adds	r3, #32
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fda7 	bl	800242c <lis2dw12_acceleration_raw_get>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	e07b      	b.n	80019e2 <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 80018ea:	7afb      	ldrb	r3, [r7, #11]
 80018ec:	2b1b      	cmp	r3, #27
 80018ee:	d873      	bhi.n	80019d8 <LIS2DW12_ACC_GetAxesRaw+0x134>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001969 	.word	0x08001969
 80018fc:	080019a1 	.word	0x080019a1
 8001900:	080019a1 	.word	0x080019a1
 8001904:	080019a1 	.word	0x080019a1
 8001908:	080019a1 	.word	0x080019a1
 800190c:	080019d9 	.word	0x080019d9
 8001910:	080019d9 	.word	0x080019d9
 8001914:	080019d9 	.word	0x080019d9
 8001918:	08001969 	.word	0x08001969
 800191c:	080019a1 	.word	0x080019a1
 8001920:	080019a1 	.word	0x080019a1
 8001924:	080019a1 	.word	0x080019a1
 8001928:	080019d9 	.word	0x080019d9
 800192c:	080019d9 	.word	0x080019d9
 8001930:	080019d9 	.word	0x080019d9
 8001934:	080019d9 	.word	0x080019d9
 8001938:	08001969 	.word	0x08001969
 800193c:	080019a1 	.word	0x080019a1
 8001940:	080019a1 	.word	0x080019a1
 8001944:	080019a1 	.word	0x080019a1
 8001948:	080019a1 	.word	0x080019a1
 800194c:	080019d9 	.word	0x080019d9
 8001950:	080019d9 	.word	0x080019d9
 8001954:	080019d9 	.word	0x080019d9
 8001958:	08001969 	.word	0x08001969
 800195c:	080019a1 	.word	0x080019a1
 8001960:	080019a1 	.word	0x080019a1
 8001964:	080019a1 	.word	0x080019a1
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001968:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da00      	bge.n	8001972 <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001970:	330f      	adds	r3, #15
 8001972:	111b      	asrs	r3, r3, #4
 8001974:	b21a      	sxth	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800197a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da00      	bge.n	8001984 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001982:	330f      	adds	r3, #15
 8001984:	111b      	asrs	r3, r3, #4
 8001986:	b21a      	sxth	r2, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800198c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	da00      	bge.n	8001996 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001994:	330f      	adds	r3, #15
 8001996:	111b      	asrs	r3, r3, #4
 8001998:	b21a      	sxth	r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	809a      	strh	r2, [r3, #4]
      break;
 800199e:	e01f      	b.n	80019e0 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80019a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da00      	bge.n	80019aa <LIS2DW12_ACC_GetAxesRaw+0x106>
 80019a8:	3303      	adds	r3, #3
 80019aa:	109b      	asrs	r3, r3, #2
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80019b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da00      	bge.n	80019bc <LIS2DW12_ACC_GetAxesRaw+0x118>
 80019ba:	3303      	adds	r3, #3
 80019bc:	109b      	asrs	r3, r3, #2
 80019be:	b21a      	sxth	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80019c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da00      	bge.n	80019ce <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80019cc:	3303      	adds	r3, #3
 80019ce:	109b      	asrs	r3, r3, #2
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	809a      	strh	r2, [r3, #4]
      break;
 80019d6:	e003      	b.n	80019e0 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	617b      	str	r3, [r7, #20]
      break;
 80019de:	bf00      	nop
  }

  return ret;
 80019e0:	697b      	ldr	r3, [r7, #20]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop

080019ec <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff4e 	bl	80018a4 <LIS2DW12_ACC_GetAxesRaw>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e03c      	b.n	8001a8e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fbd6 	bl	80011cc <LIS2DW12_ACC_GetSensitivity>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e030      	b.n	8001a8e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001a2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a44:	ee17 2a90 	vmov	r2, s15
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001a4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a64:	ee17 2a90 	vmov	r2, s15
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001a6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a84:	ee17 2a90 	vmov	r2, s15
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0020 	add.w	r0, r3, #32
 8001aac:	1cba      	adds	r2, r7, #2
 8001aae:	78f9      	ldrb	r1, [r7, #3]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f000 fa07 	bl	8001ec4 <lis2dw12_write_reg>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	e000      	b.n	8001ac4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d80b      	bhi.n	8001b00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b2d 	.word	0x08001b2d
 8001af4:	08001b59 	.word	0x08001b59
 8001af8:	08001b85 	.word	0x08001b85
 8001afc:	08001bb1 	.word	0x08001bb1
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d002      	beq.n	8001b0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001b06:	2304      	movs	r3, #4
 8001b08:	75fb      	strb	r3, [r7, #23]
          break;
 8001b0a:	e002      	b.n	8001b12 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001b0c:	2314      	movs	r3, #20
 8001b0e:	75fb      	strb	r3, [r7, #23]
          break;
 8001b10:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8001b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b16:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	d400      	bmi.n	8001b26 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001b24:	e05a      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001b26:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001b28:	60bb      	str	r3, [r7, #8]
      break;
 8001b2a:	e057      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d002      	beq.n	8001b38 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001b32:	2303      	movs	r3, #3
 8001b34:	75fb      	strb	r3, [r7, #23]
          break;
 8001b36:	e002      	b.n	8001b3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001b38:	2313      	movs	r3, #19
 8001b3a:	75fb      	strb	r3, [r7, #23]
          break;
 8001b3c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b42:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001ce8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dc00      	bgt.n	8001b52 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001b50:	e044      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001b52:	4b66      	ldr	r3, [pc, #408]	; (8001cec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001b54:	60bb      	str	r3, [r7, #8]
      break;
 8001b56:	e041      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d002      	beq.n	8001b64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	75fb      	strb	r3, [r7, #23]
          break;
 8001b62:	e002      	b.n	8001b6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001b64:	2312      	movs	r3, #18
 8001b66:	75fb      	strb	r3, [r7, #23]
          break;
 8001b68:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b6e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001ce8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	dc00      	bgt.n	8001b7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001b7c:	e02e      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001b7e:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001b80:	60bb      	str	r3, [r7, #8]
      break;
 8001b82:	e02b      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d002      	beq.n	8001b90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8001b8e:	e002      	b.n	8001b96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001b90:	2311      	movs	r3, #17
 8001b92:	75fb      	strb	r3, [r7, #23]
          break;
 8001b94:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b9a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001ce8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	dc00      	bgt.n	8001baa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001ba8:	e018      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001baa:	4b50      	ldr	r3, [pc, #320]	; (8001cec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001bac:	60bb      	str	r3, [r7, #8]
      break;
 8001bae:	e015      	b.n	8001bdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d002      	beq.n	8001bbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8001bba:	e002      	b.n	8001bc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8001bc0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8001bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001ce8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	dc00      	bgt.n	8001bd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001bd4:	e001      	b.n	8001bda <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001bd6:	4b45      	ldr	r3, [pc, #276]	; (8001cec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001bd8:	60bb      	str	r3, [r7, #8]
      break;
 8001bda:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d801      	bhi.n	8001bf2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e04d      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d801      	bhi.n	8001c08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e042      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d801      	bhi.n	8001c1e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e037      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c22:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d801      	bhi.n	8001c34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001c30:	2304      	movs	r3, #4
 8001c32:	e02c      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c38:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001cf8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d801      	bhi.n	8001c4a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e021      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c4e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ce8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d801      	bhi.n	8001c60 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	e016      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001cfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	d801      	bhi.n	8001c76 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e00b      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c76:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	d801      	bhi.n	8001c8c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001c88:	2308      	movs	r3, #8
 8001c8a:	e000      	b.n	8001c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001c8c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001c8e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3320      	adds	r3, #32
 8001c94:	7dba      	ldrb	r2, [r7, #22]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fa33 	bl	8002104 <lis2dw12_data_rate_set>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	e018      	b.n	8001cdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3320      	adds	r3, #32
 8001cae:	7dfa      	ldrb	r2, [r7, #23]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f91e 	bl	8001ef4 <lis2dw12_power_mode_set>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e00b      	b.n	8001cdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	79ba      	ldrb	r2, [r7, #6]
 8001cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	41480000 	.word	0x41480000
 8001ce8:	43480000 	.word	0x43480000
 8001cec:	43480000 	.word	0x43480000
 8001cf0:	3fcccccd 	.word	0x3fcccccd
 8001cf4:	42480000 	.word	0x42480000
 8001cf8:	42c80000 	.word	0x42c80000
 8001cfc:	43c80000 	.word	0x43c80000
 8001d00:	44480000 	.word	0x44480000

08001d04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d10:	460b      	mov	r3, r1
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	79ba      	ldrb	r2, [r7, #6]
 8001d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8001d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d2c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001dec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d801      	bhi.n	8001d3e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001d3c:	e04d      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8001d3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d42:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d801      	bhi.n	8001d54 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8001d52:	e042      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8001d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d58:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	d801      	bhi.n	8001d6a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8001d68:	e037      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8001d6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d6e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001dfc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d801      	bhi.n	8001d80 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8001d7e:	e02c      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8001d80:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d84:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001e04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	d801      	bhi.n	8001d96 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8001d94:	e021      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8001d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d801      	bhi.n	8001dac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8001daa:	e016      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8001dac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001e14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d801      	bhi.n	8001dc2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8001dc0:	e00b      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8001dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	d801      	bhi.n	8001dd8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8001dd6:	e000      	b.n	8001dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	3fcccccd 	.word	0x3fcccccd
 8001df0:	3fcccccd 	.word	0x3fcccccd
 8001df4:	41480000 	.word	0x41480000
 8001df8:	41c80000 	.word	0x41c80000
 8001dfc:	42480000 	.word	0x42480000
 8001e00:	42480000 	.word	0x42480000
 8001e04:	42c80000 	.word	0x42c80000
 8001e08:	42c80000 	.word	0x42c80000
 8001e0c:	43480000 	.word	0x43480000
 8001e10:	43480000 	.word	0x43480000
 8001e14:	43c80000 	.word	0x43c80000
 8001e18:	43c80000 	.word	0x43c80000
 8001e1c:	44480000 	.word	0x44480000
 8001e20:	44480000 	.word	0x44480000
 8001e24:	44c80000 	.word	0x44c80000

08001e28 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	461a      	mov	r2, r3
 8001e34:	460b      	mov	r3, r1
 8001e36:	72fb      	strb	r3, [r7, #11]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	695c      	ldr	r4, [r3, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	7b1b      	ldrb	r3, [r3, #12]
 8001e48:	b298      	uxth	r0, r3
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	b299      	uxth	r1, r3
 8001e4e:	893b      	ldrh	r3, [r7, #8]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	47a0      	blx	r4
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}

08001e5e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e5e:	b590      	push	{r4, r7, lr}
 8001e60:	b087      	sub	sp, #28
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	72fb      	strb	r3, [r7, #11]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	691c      	ldr	r4, [r3, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	7b1b      	ldrb	r3, [r3, #12]
 8001e7e:	b298      	uxth	r0, r3
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	b299      	uxth	r1, r3
 8001e84:	893b      	ldrh	r3, [r7, #8]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	47a0      	blx	r4
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}

08001e94 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	72fb      	strb	r3, [r7, #11]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685c      	ldr	r4, [r3, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	68d8      	ldr	r0, [r3, #12]
 8001eb0:	893b      	ldrh	r3, [r7, #8]
 8001eb2:	7af9      	ldrb	r1, [r7, #11]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	47a0      	blx	r4
 8001eb8:	6178      	str	r0, [r7, #20]

  return ret;
 8001eba:	697b      	ldr	r3, [r7, #20]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd90      	pop	{r4, r7, pc}

08001ec4 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	72fb      	strb	r3, [r7, #11]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681c      	ldr	r4, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68d8      	ldr	r0, [r3, #12]
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	7af9      	ldrb	r1, [r7, #11]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	47a0      	blx	r4
 8001ee8:	6178      	str	r0, [r7, #20]

  return ret;
 8001eea:	697b      	ldr	r3, [r7, #20]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f00:	f107 0210 	add.w	r2, r7, #16
 8001f04:	2301      	movs	r3, #1
 8001f06:	2120      	movs	r1, #32
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffc3 	bl	8001e94 <lis2dw12_read_reg>
 8001f0e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	7c3b      	ldrb	r3, [r7, #16]
 8001f22:	f362 0383 	bfi	r3, r2, #2, #2
 8001f26:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	7c3b      	ldrb	r3, [r7, #16]
 8001f32:	f362 0301 	bfi	r3, r2, #0, #2
 8001f36:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f38:	f107 0210 	add.w	r2, r7, #16
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	2120      	movs	r1, #32
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffbf 	bl	8001ec4 <lis2dw12_write_reg>
 8001f46:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001f4e:	f107 020c 	add.w	r2, r7, #12
 8001f52:	2301      	movs	r3, #1
 8001f54:	2125      	movs	r1, #37	; 0x25
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff9c 	bl	8001e94 <lis2dw12_read_reg>
 8001f5c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d110      	bne.n	8001f86 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	7b3b      	ldrb	r3, [r7, #12]
 8001f70:	f362 0382 	bfi	r3, r2, #2, #1
 8001f74:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001f76:	f107 020c 	add.w	r2, r7, #12
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	2125      	movs	r1, #37	; 0x25
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa0 	bl	8001ec4 <lis2dw12_write_reg>
 8001f84:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001f86:	697b      	ldr	r3, [r7, #20]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001f9a:	f107 0210 	add.w	r2, r7, #16
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff76 	bl	8001e94 <lis2dw12_read_reg>
 8001fa8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 80a3 	bne.w	80020f8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8001fb2:	f107 020c 	add.w	r2, r7, #12
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	2125      	movs	r1, #37	; 0x25
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ff6a 	bl	8001e94 <lis2dw12_read_reg>
 8001fc0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001fc2:	7b3b      	ldrb	r3, [r7, #12]
 8001fc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	011a      	lsls	r2, r3, #4
 8001fcc:	7c3b      	ldrb	r3, [r7, #16]
 8001fce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8001fd8:	7c3a      	ldrb	r2, [r7, #16]
 8001fda:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8001fde:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8001fe0:	4413      	add	r3, r2
 8001fe2:	2b1b      	cmp	r3, #27
 8001fe4:	f200 8084 	bhi.w	80020f0 <lis2dw12_power_mode_get+0x160>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <lis2dw12_power_mode_get+0x60>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002081 	.word	0x08002081
 8001ff4:	08002079 	.word	0x08002079
 8001ff8:	08002071 	.word	0x08002071
 8001ffc:	08002069 	.word	0x08002069
 8002000:	08002061 	.word	0x08002061
 8002004:	080020f1 	.word	0x080020f1
 8002008:	080020f1 	.word	0x080020f1
 800200c:	080020f1 	.word	0x080020f1
 8002010:	080020a1 	.word	0x080020a1
 8002014:	08002099 	.word	0x08002099
 8002018:	08002091 	.word	0x08002091
 800201c:	08002089 	.word	0x08002089
 8002020:	080020f1 	.word	0x080020f1
 8002024:	080020f1 	.word	0x080020f1
 8002028:	080020f1 	.word	0x080020f1
 800202c:	080020f1 	.word	0x080020f1
 8002030:	080020c9 	.word	0x080020c9
 8002034:	080020c1 	.word	0x080020c1
 8002038:	080020b9 	.word	0x080020b9
 800203c:	080020b1 	.word	0x080020b1
 8002040:	080020a9 	.word	0x080020a9
 8002044:	080020f1 	.word	0x080020f1
 8002048:	080020f1 	.word	0x080020f1
 800204c:	080020f1 	.word	0x080020f1
 8002050:	080020e9 	.word	0x080020e9
 8002054:	080020e1 	.word	0x080020e1
 8002058:	080020d9 	.word	0x080020d9
 800205c:	080020d1 	.word	0x080020d1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2204      	movs	r2, #4
 8002064:	701a      	strb	r2, [r3, #0]
        break;
 8002066:	e048      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2203      	movs	r2, #3
 800206c:	701a      	strb	r2, [r3, #0]
        break;
 800206e:	e044      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	701a      	strb	r2, [r3, #0]
        break;
 8002076:	e040      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
        break;
 800207e:	e03c      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
        break;
 8002086:	e038      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	220b      	movs	r2, #11
 800208c:	701a      	strb	r2, [r3, #0]
        break;
 800208e:	e034      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	220a      	movs	r2, #10
 8002094:	701a      	strb	r2, [r3, #0]
        break;
 8002096:	e030      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2209      	movs	r2, #9
 800209c:	701a      	strb	r2, [r3, #0]
        break;
 800209e:	e02c      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2208      	movs	r2, #8
 80020a4:	701a      	strb	r2, [r3, #0]
        break;
 80020a6:	e028      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2214      	movs	r2, #20
 80020ac:	701a      	strb	r2, [r3, #0]
        break;
 80020ae:	e024      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2213      	movs	r2, #19
 80020b4:	701a      	strb	r2, [r3, #0]
        break;
 80020b6:	e020      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2212      	movs	r2, #18
 80020bc:	701a      	strb	r2, [r3, #0]
        break;
 80020be:	e01c      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2211      	movs	r2, #17
 80020c4:	701a      	strb	r2, [r3, #0]
        break;
 80020c6:	e018      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2210      	movs	r2, #16
 80020cc:	701a      	strb	r2, [r3, #0]
        break;
 80020ce:	e014      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	221b      	movs	r2, #27
 80020d4:	701a      	strb	r2, [r3, #0]
        break;
 80020d6:	e010      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	221a      	movs	r2, #26
 80020dc:	701a      	strb	r2, [r3, #0]
        break;
 80020de:	e00c      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2219      	movs	r2, #25
 80020e4:	701a      	strb	r2, [r3, #0]
        break;
 80020e6:	e008      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2218      	movs	r2, #24
 80020ec:	701a      	strb	r2, [r3, #0]
        break;
 80020ee:	e004      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	701a      	strb	r2, [r3, #0]
        break;
 80020f6:	e000      	b.n	80020fa <lis2dw12_power_mode_get+0x16a>
    }
  }
 80020f8:	bf00      	nop

  return ret;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002110:	f107 0210 	add.w	r2, r7, #16
 8002114:	2301      	movs	r3, #1
 8002116:	2120      	movs	r1, #32
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff febb 	bl	8001e94 <lis2dw12_read_reg>
 800211e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	b2da      	uxtb	r2, r3
 800212e:	7c3b      	ldrb	r3, [r7, #16]
 8002130:	f362 1307 	bfi	r3, r2, #4, #4
 8002134:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002136:	f107 0210 	add.w	r2, r7, #16
 800213a:	2301      	movs	r3, #1
 800213c:	2120      	movs	r1, #32
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fec0 	bl	8001ec4 <lis2dw12_write_reg>
 8002144:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800214c:	f107 020c 	add.w	r2, r7, #12
 8002150:	2301      	movs	r3, #1
 8002152:	2122      	movs	r1, #34	; 0x22
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fe9d 	bl	8001e94 <lis2dw12_read_reg>
 800215a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d110      	bne.n	8002184 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	7b3b      	ldrb	r3, [r7, #12]
 800216e:	f362 0301 	bfi	r3, r2, #0, #2
 8002172:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002174:	f107 020c 	add.w	r2, r7, #12
 8002178:	2301      	movs	r3, #1
 800217a:	2122      	movs	r1, #34	; 0x22
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fea1 	bl	8001ec4 <lis2dw12_write_reg>
 8002182:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002184:	697b      	ldr	r3, [r7, #20]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800219a:	f107 0210 	add.w	r2, r7, #16
 800219e:	2301      	movs	r3, #1
 80021a0:	2120      	movs	r1, #32
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fe76 	bl	8001e94 <lis2dw12_read_reg>
 80021a8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 80b3 	bne.w	8002318 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80021b2:	f107 020c 	add.w	r2, r7, #12
 80021b6:	2301      	movs	r3, #1
 80021b8:	2122      	movs	r1, #34	; 0x22
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe6a 	bl	8001e94 <lis2dw12_read_reg>
 80021c0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 80021c2:	7b3b      	ldrb	r3, [r7, #12]
 80021c4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	7c3a      	ldrb	r2, [r7, #16]
 80021ce:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	4413      	add	r3, r2
 80021d6:	2b32      	cmp	r3, #50	; 0x32
 80021d8:	f200 809a 	bhi.w	8002310 <lis2dw12_data_rate_get+0x180>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <lis2dw12_data_rate_get+0x54>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080022b1 	.word	0x080022b1
 80021e8:	080022b9 	.word	0x080022b9
 80021ec:	080022c1 	.word	0x080022c1
 80021f0:	080022c9 	.word	0x080022c9
 80021f4:	080022d1 	.word	0x080022d1
 80021f8:	080022d9 	.word	0x080022d9
 80021fc:	080022e1 	.word	0x080022e1
 8002200:	080022e9 	.word	0x080022e9
 8002204:	080022f1 	.word	0x080022f1
 8002208:	080022f9 	.word	0x080022f9
 800220c:	08002311 	.word	0x08002311
 8002210:	08002311 	.word	0x08002311
 8002214:	08002311 	.word	0x08002311
 8002218:	08002311 	.word	0x08002311
 800221c:	08002311 	.word	0x08002311
 8002220:	08002311 	.word	0x08002311
 8002224:	08002311 	.word	0x08002311
 8002228:	08002311 	.word	0x08002311
 800222c:	08002309 	.word	0x08002309
 8002230:	08002311 	.word	0x08002311
 8002234:	08002311 	.word	0x08002311
 8002238:	08002311 	.word	0x08002311
 800223c:	08002311 	.word	0x08002311
 8002240:	08002311 	.word	0x08002311
 8002244:	08002311 	.word	0x08002311
 8002248:	08002311 	.word	0x08002311
 800224c:	08002311 	.word	0x08002311
 8002250:	08002311 	.word	0x08002311
 8002254:	08002311 	.word	0x08002311
 8002258:	08002311 	.word	0x08002311
 800225c:	08002311 	.word	0x08002311
 8002260:	08002311 	.word	0x08002311
 8002264:	08002311 	.word	0x08002311
 8002268:	08002311 	.word	0x08002311
 800226c:	08002311 	.word	0x08002311
 8002270:	08002311 	.word	0x08002311
 8002274:	08002311 	.word	0x08002311
 8002278:	08002311 	.word	0x08002311
 800227c:	08002311 	.word	0x08002311
 8002280:	08002311 	.word	0x08002311
 8002284:	08002311 	.word	0x08002311
 8002288:	08002311 	.word	0x08002311
 800228c:	08002311 	.word	0x08002311
 8002290:	08002311 	.word	0x08002311
 8002294:	08002311 	.word	0x08002311
 8002298:	08002311 	.word	0x08002311
 800229c:	08002311 	.word	0x08002311
 80022a0:	08002311 	.word	0x08002311
 80022a4:	08002311 	.word	0x08002311
 80022a8:	08002311 	.word	0x08002311
 80022ac:	08002301 	.word	0x08002301
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
        break;
 80022b6:	e030      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
        break;
 80022be:	e02c      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
        break;
 80022c6:	e028      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2203      	movs	r2, #3
 80022cc:	701a      	strb	r2, [r3, #0]
        break;
 80022ce:	e024      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2204      	movs	r2, #4
 80022d4:	701a      	strb	r2, [r3, #0]
        break;
 80022d6:	e020      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2205      	movs	r2, #5
 80022dc:	701a      	strb	r2, [r3, #0]
        break;
 80022de:	e01c      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2206      	movs	r2, #6
 80022e4:	701a      	strb	r2, [r3, #0]
        break;
 80022e6:	e018      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2207      	movs	r2, #7
 80022ec:	701a      	strb	r2, [r3, #0]
        break;
 80022ee:	e014      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	701a      	strb	r2, [r3, #0]
        break;
 80022f6:	e010      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2209      	movs	r2, #9
 80022fc:	701a      	strb	r2, [r3, #0]
        break;
 80022fe:	e00c      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2232      	movs	r2, #50	; 0x32
 8002304:	701a      	strb	r2, [r3, #0]
        break;
 8002306:	e008      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2212      	movs	r2, #18
 800230c:	701a      	strb	r2, [r3, #0]
        break;
 800230e:	e004      	b.n	800231a <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
        break;
 8002316:	e000      	b.n	800231a <lis2dw12_data_rate_get+0x18a>
    }
  }
 8002318:	bf00      	nop

  return ret;
 800231a:	697b      	ldr	r3, [r7, #20]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002330:	f107 0208 	add.w	r2, r7, #8
 8002334:	2301      	movs	r3, #1
 8002336:	2121      	movs	r1, #33	; 0x21
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fdab 	bl	8001e94 <lis2dw12_read_reg>
 800233e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	7a3b      	ldrb	r3, [r7, #8]
 8002350:	f362 03c3 	bfi	r3, r2, #3, #1
 8002354:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002356:	f107 0208 	add.w	r2, r7, #8
 800235a:	2301      	movs	r3, #1
 800235c:	2121      	movs	r1, #33	; 0x21
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fdb0 	bl	8001ec4 <lis2dw12_write_reg>
 8002364:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800237c:	f107 0208 	add.w	r2, r7, #8
 8002380:	2301      	movs	r3, #1
 8002382:	2125      	movs	r1, #37	; 0x25
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fd85 	bl	8001e94 <lis2dw12_read_reg>
 800238a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	b2da      	uxtb	r2, r3
 800239a:	7a3b      	ldrb	r3, [r7, #8]
 800239c:	f362 1305 	bfi	r3, r2, #4, #2
 80023a0:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80023a2:	f107 0208 	add.w	r2, r7, #8
 80023a6:	2301      	movs	r3, #1
 80023a8:	2125      	movs	r1, #37	; 0x25
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fd8a 	bl	8001ec4 <lis2dw12_write_reg>
 80023b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80023c6:	f107 0208 	add.w	r2, r7, #8
 80023ca:	2301      	movs	r3, #1
 80023cc:	2125      	movs	r1, #37	; 0x25
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fd60 	bl	8001e94 <lis2dw12_read_reg>
 80023d4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 80023d6:	7a3b      	ldrb	r3, [r7, #8]
 80023d8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d81a      	bhi.n	8002418 <lis2dw12_full_scale_get+0x5c>
 80023e2:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <lis2dw12_full_scale_get+0x2c>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	08002401 	.word	0x08002401
 80023f0:	08002409 	.word	0x08002409
 80023f4:	08002411 	.word	0x08002411
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
      break;
 80023fe:	e00f      	b.n	8002420 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
      break;
 8002406:	e00b      	b.n	8002420 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2202      	movs	r2, #2
 800240c:	701a      	strb	r2, [r3, #0]
      break;
 800240e:	e007      	b.n	8002420 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2203      	movs	r2, #3
 8002414:	701a      	strb	r2, [r3, #0]
      break;
 8002416:	e003      	b.n	8002420 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
      break;
 800241e:	bf00      	nop
  }

  return ret;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop

0800242c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002436:	f107 020c 	add.w	r2, r7, #12
 800243a:	2306      	movs	r3, #6
 800243c:	2128      	movs	r1, #40	; 0x28
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fd28 	bl	8001e94 <lis2dw12_read_reg>
 8002444:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	b21a      	sxth	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002454:	b29b      	uxth	r3, r3
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	b29a      	uxth	r2, r3
 800245a:	7b3b      	ldrb	r3, [r7, #12]
 800245c:	b29b      	uxth	r3, r3
 800245e:	4413      	add	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	b21a      	sxth	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	3302      	adds	r3, #2
 800246e:	b212      	sxth	r2, r2
 8002470:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3302      	adds	r3, #2
 8002476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247a:	b29b      	uxth	r3, r3
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b29a      	uxth	r2, r3
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4413      	add	r3, r2
 8002486:	b29a      	uxth	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	3302      	adds	r3, #2
 800248c:	b212      	sxth	r2, r2
 800248e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002490:	7c7a      	ldrb	r2, [r7, #17]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3304      	adds	r3, #4
 8002496:	b212      	sxth	r2, r2
 8002498:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3304      	adds	r3, #4
 800249e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3304      	adds	r3, #4
 80024b4:	b212      	sxth	r2, r2
 80024b6:	801a      	strh	r2, [r3, #0]

  return ret;
 80024b8:	697b      	ldr	r3, [r7, #20]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80024cc:	2301      	movs	r3, #1
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	210f      	movs	r1, #15
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fcde 	bl	8001e94 <lis2dw12_read_reg>
 80024d8:	60f8      	str	r0, [r7, #12]

  return ret;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80024f0:	f107 0208 	add.w	r2, r7, #8
 80024f4:	2301      	movs	r3, #1
 80024f6:	2121      	movs	r1, #33	; 0x21
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff fccb 	bl	8001e94 <lis2dw12_read_reg>
 80024fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	7a3b      	ldrb	r3, [r7, #8]
 8002510:	f362 0382 	bfi	r3, r2, #2, #1
 8002514:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002516:	f107 0208 	add.w	r2, r7, #8
 800251a:	2301      	movs	r3, #1
 800251c:	2121      	movs	r1, #33	; 0x21
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fcd0 	bl	8001ec4 <lis2dw12_write_reg>
 8002524:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800253c:	f107 0208 	add.w	r2, r7, #8
 8002540:	2301      	movs	r3, #1
 8002542:	212e      	movs	r1, #46	; 0x2e
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fca5 	bl	8001e94 <lis2dw12_read_reg>
 800254a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	b2da      	uxtb	r2, r3
 800255a:	7a3b      	ldrb	r3, [r7, #8]
 800255c:	f362 1347 	bfi	r3, r2, #5, #3
 8002560:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002562:	f107 0208 	add.w	r2, r7, #8
 8002566:	2301      	movs	r3, #1
 8002568:	212e      	movs	r1, #46	; 0x2e
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fcaa 	bl	8001ec4 <lis2dw12_write_reg>
 8002570:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e067      	b.n	8002668 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7b1a      	ldrb	r2, [r3, #12]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <LIS2MDL_RegisterBusIO+0xf8>)
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a27      	ldr	r2, [pc, #156]	; (8002678 <LIS2MDL_RegisterBusIO+0xfc>)
 80025da:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e036      	b.n	8002668 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4798      	blx	r3
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e02c      	b.n	8002668 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d028      	beq.n	8002668 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	d123      	bne.n	8002668 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10d      	bne.n	8002644 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8002628:	2334      	movs	r3, #52	; 0x34
 800262a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800262c:	7afb      	ldrb	r3, [r7, #11]
 800262e:	461a      	mov	r2, r3
 8002630:	2162      	movs	r1, #98	; 0x62
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fb1b 	bl	8002c6e <LIS2MDL_Write_Reg>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d014      	beq.n	8002668 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	e012      	b.n	800266a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d101      	bne.n	8002650 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	e00c      	b.n	800266a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3320      	adds	r3, #32
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f000 ff70 	bl	800353c <lis2mdl_i2c_interface_set>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e000      	b.n	800266a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	08002cc5 	.word	0x08002cc5
 8002678:	08002d47 	.word	0x08002d47

0800267c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d144      	bne.n	8002716 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800268c:	f107 0208 	add.w	r2, r7, #8
 8002690:	2301      	movs	r3, #1
 8002692:	2162      	movs	r1, #98	; 0x62
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fb97 	bl	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
 80026a4:	e06c      	b.n	8002780 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026a6:	f107 020c 	add.w	r2, r7, #12
 80026aa:	2301      	movs	r3, #1
 80026ac:	2160      	movs	r1, #96	; 0x60
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fb8a 	bl	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	e05f      	b.n	8002780 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80026c0:	7a3b      	ldrb	r3, [r7, #8]
 80026c2:	f043 0310 	orr.w	r3, r3, #16
 80026c6:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80026c8:	7a3b      	ldrb	r3, [r7, #8]
 80026ca:	f36f 0341 	bfc	r3, #1, #1
 80026ce:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80026d0:	7b3b      	ldrb	r3, [r7, #12]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f362 0301 	bfi	r3, r2, #0, #2
 80026d8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80026da:	7b3b      	ldrb	r3, [r7, #12]
 80026dc:	f043 030c 	orr.w	r3, r3, #12
 80026e0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80026e2:	f107 0208 	add.w	r2, r7, #8
 80026e6:	2301      	movs	r3, #1
 80026e8:	2162      	movs	r1, #98	; 0x62
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fcab 	bl	8003046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	e041      	b.n	8002780 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80026fc:	f107 020c 	add.w	r2, r7, #12
 8002700:	2301      	movs	r3, #1
 8002702:	2160      	movs	r1, #96	; 0x60
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fc9e 	bl	8003046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d032      	beq.n	8002776 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	e034      	b.n	8002780 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3320      	adds	r3, #32
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fe65 	bl	80033ec <lis2mdl_block_data_update_set>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	e028      	b.n	8002780 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3320      	adds	r3, #32
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fdd4 	bl	80032e2 <lis2mdl_operating_mode_set>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e01c      	b.n	8002780 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3320      	adds	r3, #32
 800274a:	2103      	movs	r1, #3
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fdee 	bl	800332e <lis2mdl_data_rate_set>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
 800275c:	e010      	b.n	8002780 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3320      	adds	r3, #32
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fec3 	bl	80034f0 <lis2mdl_self_test_set>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	e004      	b.n	8002780 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f8a5 	bl	80028e0 <LIS2MDL_MAG_Disable>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	e004      	b.n	80027ac <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d10b      	bne.n	80027de <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80027c6:	2301      	movs	r3, #1
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	214f      	movs	r1, #79	; 0x4f
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fafb 	bl	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295
 80027dc:	e00c      	b.n	80027f8 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3320      	adds	r3, #32
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fe72 	bl	80034ce <lis2mdl_device_id_get>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
 80027f4:	e000      	b.n	80027f8 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2232      	movs	r2, #50	; 0x32
 8002832:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <LIS2MDL_GetCapabilities+0x58>)
 8002848:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	42c80000 	.word	0x42c80000

0800285c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e032      	b.n	80028d8 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d11d      	bne.n	80028b6 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800287a:	f107 020c 	add.w	r2, r7, #12
 800287e:	2301      	movs	r3, #1
 8002880:	2160      	movs	r1, #96	; 0x60
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 faa0 	bl	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e021      	b.n	80028d8 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002894:	7b3b      	ldrb	r3, [r7, #12]
 8002896:	f36f 0301 	bfc	r3, #0, #2
 800289a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800289c:	f107 020c 	add.w	r2, r7, #12
 80028a0:	2301      	movs	r3, #1
 80028a2:	2160      	movs	r1, #96	; 0x60
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fbce 	bl	8003046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00e      	beq.n	80028ce <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
 80028b4:	e010      	b.n	80028d8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3320      	adds	r3, #32
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd10 	bl	80032e2 <lis2mdl_operating_mode_set>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	e004      	b.n	80028d8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e033      	b.n	800295e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d11e      	bne.n	800293c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80028fe:	f107 020c 	add.w	r2, r7, #12
 8002902:	2301      	movs	r3, #1
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa5e 	bl	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e022      	b.n	800295e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002918:	7b3b      	ldrb	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	f362 0301 	bfi	r3, r2, #0, #2
 8002920:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002922:	f107 020c 	add.w	r2, r7, #12
 8002926:	2301      	movs	r3, #1
 8002928:	2160      	movs	r1, #96	; 0x60
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fb8b 	bl	8003046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	e010      	b.n	800295e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3320      	adds	r3, #32
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fccd 	bl	80032e2 <lis2mdl_operating_mode_set>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e004      	b.n	800295e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002976:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3320      	adds	r3, #32
 800299a:	f107 020b 	add.w	r2, r7, #11
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fceb 	bl	800337c <lis2mdl_data_rate_get>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	e023      	b.n	80029fa <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80029b2:	7afb      	ldrb	r3, [r7, #11]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d81b      	bhi.n	80029f0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	080029d9 	.word	0x080029d9
 80029c8:	080029e1 	.word	0x080029e1
 80029cc:	080029e9 	.word	0x080029e9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80029d4:	601a      	str	r2, [r3, #0]
      break;
 80029d6:	e00f      	b.n	80029f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80029dc:	601a      	str	r2, [r3, #0]
      break;
 80029de:	e00b      	b.n	80029f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80029e4:	601a      	str	r2, [r3, #0]
      break;
 80029e6:	e007      	b.n	80029f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80029ec:	601a      	str	r2, [r3, #0]
      break;
 80029ee:	e003      	b.n	80029f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	60fb      	str	r3, [r7, #12]
      break;
 80029f6:	bf00      	nop
  }

  return ret;
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	41200000 	.word	0x41200000
 8002a08:	41a00000 	.word	0x41a00000
 8002a0c:	42480000 	.word	0x42480000
 8002a10:	42c80000 	.word	0x42c80000

08002a14 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002a20:	edd7 7a00 	vldr	s15, [r7]
 8002a24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	d801      	bhi.n	8002a36 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002a32:	2300      	movs	r3, #0
 8002a34:	e016      	b.n	8002a64 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002a36:	edd7 7a00 	vldr	s15, [r7]
 8002a3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d801      	bhi.n	8002a4c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e00b      	b.n	8002a64 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002a4c:	edd7 7a00 	vldr	s15, [r7]
 8002a50:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ad8 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	d801      	bhi.n	8002a62 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e000      	b.n	8002a64 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002a62:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002a64:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d121      	bne.n	8002ab2 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002a6e:	f107 020c 	add.w	r2, r7, #12
 8002a72:	2301      	movs	r3, #1
 8002a74:	2160      	movs	r1, #96	; 0x60
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9a6 	bl	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	e022      	b.n	8002ace <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	7b3b      	ldrb	r3, [r7, #12]
 8002a92:	f362 0383 	bfi	r3, r2, #2, #2
 8002a96:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002a98:	f107 020c 	add.w	r2, r7, #12
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	2160      	movs	r1, #96	; 0x60
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fad0 	bl	8003046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00f      	beq.n	8002acc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab0:	e00d      	b.n	8002ace <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3320      	adds	r3, #32
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fc37 	bl	800332e <lis2mdl_data_rate_set>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	e000      	b.n	8002ace <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	42480000 	.word	0x42480000

08002adc <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2232      	movs	r2, #50	; 0x32
 8002aea:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3320      	adds	r3, #32
 8002b20:	f107 0208 	add.w	r2, r7, #8
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fc86 	bl	8003438 <lis2mdl_magnetic_raw_get>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e00c      	b.n	8002b52 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002b38:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002b40:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002b48:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b088      	sub	sp, #32
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d137      	bne.n	8002bdc <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002b6c:	f107 0218 	add.w	r2, r7, #24
 8002b70:	2306      	movs	r3, #6
 8002b72:	2168      	movs	r1, #104	; 0x68
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f927 	bl	8002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	e06f      	b.n	8002c66 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002b86:	7e7b      	ldrb	r3, [r7, #25]
 8002b88:	b21b      	sxth	r3, r3
 8002b8a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8002b8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	7e3b      	ldrb	r3, [r7, #24]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8002ba2:	7efb      	ldrb	r3, [r7, #27]
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8002ba8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	7ebb      	ldrb	r3, [r7, #26]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002bbe:	7f7b      	ldrb	r3, [r7, #29]
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8002bc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	7f3b      	ldrb	r3, [r7, #28]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	82bb      	strh	r3, [r7, #20]
 8002bda:	e00d      	b.n	8002bf8 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3320      	adds	r3, #32
 8002be0:	f107 0210 	add.w	r2, r7, #16
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fc26 	bl	8003438 <lis2mdl_magnetic_raw_get>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e036      	b.n	8002c66 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff feb1 	bl	8002966 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c1c:	ee17 2a90 	vmov	r2, s15
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c3c:	ee17 2a90 	vmov	r2, s15
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c5c:	ee17 2a90 	vmov	r2, s15
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70fb      	strb	r3, [r7, #3]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d10b      	bne.n	8002c9e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002c86:	1cba      	adds	r2, r7, #2
 8002c88:	78f9      	ldrb	r1, [r7, #3]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f9da 	bl	8003046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	e00e      	b.n	8002cbc <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f103 0020 	add.w	r0, r3, #32
 8002ca4:	1cba      	adds	r2, r7, #2
 8002ca6:	78f9      	ldrb	r1, [r7, #3]
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f000 fb02 	bl	80032b2 <lis2mdl_write_reg>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb8:	e000      	b.n	8002cbc <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	72fb      	strb	r3, [r7, #11]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10e      	bne.n	8002d02 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	695c      	ldr	r4, [r3, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	7b1b      	ldrb	r3, [r3, #12]
 8002cec:	b298      	uxth	r0, r3
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	b299      	uxth	r1, r3
 8002cf8:	893b      	ldrh	r3, [r7, #8]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	47a0      	blx	r4
 8002cfe:	4603      	mov	r3, r0
 8002d00:	e01d      	b.n	8002d3e <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d10b      	bne.n	8002d22 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	695c      	ldr	r4, [r3, #20]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	7b1b      	ldrb	r3, [r3, #12]
 8002d12:	b298      	uxth	r0, r3
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	b299      	uxth	r1, r3
 8002d18:	893b      	ldrh	r3, [r7, #8]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	47a0      	blx	r4
 8002d1e:	4603      	mov	r3, r0
 8002d20:	e00d      	b.n	8002d3e <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	695c      	ldr	r4, [r3, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	7b1b      	ldrb	r3, [r3, #12]
 8002d2a:	b298      	uxth	r0, r3
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	b299      	uxth	r1, r3
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	47a0      	blx	r4
 8002d3c:	4603      	mov	r3, r0
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}

08002d46 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d46:	b590      	push	{r4, r7, lr}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	460b      	mov	r3, r1
 8002d54:	72fb      	strb	r3, [r7, #11]
 8002d56:	4613      	mov	r3, r2
 8002d58:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	691c      	ldr	r4, [r3, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	7b1b      	ldrb	r3, [r3, #12]
 8002d6e:	b298      	uxth	r0, r3
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	b299      	uxth	r1, r3
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	47a0      	blx	r4
 8002d80:	4603      	mov	r3, r0
 8002d82:	e01d      	b.n	8002dc0 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d10b      	bne.n	8002da4 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	691c      	ldr	r4, [r3, #16]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	7b1b      	ldrb	r3, [r3, #12]
 8002d94:	b298      	uxth	r0, r3
 8002d96:	7afb      	ldrb	r3, [r7, #11]
 8002d98:	b299      	uxth	r1, r3
 8002d9a:	893b      	ldrh	r3, [r7, #8]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	47a0      	blx	r4
 8002da0:	4603      	mov	r3, r0
 8002da2:	e00d      	b.n	8002dc0 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	691c      	ldr	r4, [r3, #16]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	7b1b      	ldrb	r3, [r3, #12]
 8002dac:	b298      	uxth	r0, r3
 8002dae:	7afb      	ldrb	r3, [r7, #11]
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	b299      	uxth	r1, r3
 8002db8:	893b      	ldrh	r3, [r7, #8]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	47a0      	blx	r4
 8002dbe:	4603      	mov	r3, r0
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}

08002dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	; 0x30
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	72fb      	strb	r3, [r7, #11]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8002de2:	2340      	movs	r3, #64	; 0x40
 8002de4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8002dee:	233d      	movs	r3, #61	; 0x3d
 8002df0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8002df2:	2315      	movs	r3, #21
 8002df4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8002df8:	2316      	movs	r3, #22
 8002dfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8002dfe:	2317      	movs	r3, #23
 8002e00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8002e04:	2314      	movs	r3, #20
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8002e0a:	2344      	movs	r3, #68	; 0x44
 8002e0c:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8002e14:	2339      	movs	r3, #57	; 0x39
 8002e16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8002e20:	2329      	movs	r3, #41	; 0x29
 8002e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8002e26:	231e      	movs	r3, #30
 8002e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8002e32:	893b      	ldrh	r3, [r7, #8]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8002e38:	2310      	movs	r3, #16
 8002e3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8002e44:	2340      	movs	r3, #64	; 0x40
 8002e46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f103 0020 	add.w	r0, r3, #32
 8002e50:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002e54:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f000 fa2a 	bl	80032b2 <lis2mdl_write_reg>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
 8002e68:	e0e9      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f103 0020 	add.w	r0, r3, #32
 8002e70:	f107 021f 	add.w	r2, r7, #31
 8002e74:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f000 fa1a 	bl	80032b2 <lis2mdl_write_reg>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e0d9      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f103 0020 	add.w	r0, r3, #32
 8002e90:	f107 020b 	add.w	r2, r7, #11
 8002e94:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f000 fa0a 	bl	80032b2 <lis2mdl_write_reg>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	e0c9      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f103 0020 	add.w	r0, r3, #32
 8002eb0:	f107 021d 	add.w	r2, r7, #29
 8002eb4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f000 f9fa 	bl	80032b2 <lis2mdl_write_reg>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec8:	e0b9      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f103 0020 	add.w	r0, r3, #32
 8002ed0:	f107 021e 	add.w	r2, r7, #30
 8002ed4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f000 f9ea 	bl	80032b2 <lis2mdl_write_reg>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	e0a9      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f103 0020 	add.w	r0, r3, #32
 8002ef0:	f107 0220 	add.w	r2, r7, #32
 8002ef4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f000 f9da 	bl	80032b2 <lis2mdl_write_reg>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	e099      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f103 0020 	add.w	r0, r3, #32
 8002f10:	f107 021c 	add.w	r2, r7, #28
 8002f14:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f000 f9b2 	bl	8003282 <lis2mdl_read_reg>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	e089      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8002f2a:	7f3b      	ldrb	r3, [r7, #28]
 8002f2c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d102      	bne.n	8002f3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8002f34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002f38:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f103 0020 	add.w	r0, r3, #32
 8002f40:	f107 021c 	add.w	r2, r7, #28
 8002f44:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f000 f9b2 	bl	80032b2 <lis2mdl_write_reg>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295
 8002f58:	e071      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f103 0020 	add.w	r0, r3, #32
 8002f60:	f107 0214 	add.w	r2, r7, #20
 8002f64:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002f68:	2306      	movs	r3, #6
 8002f6a:	f000 f98a 	bl	8003282 <lis2mdl_read_reg>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
 8002f78:	e061      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f103 0020 	add.w	r0, r3, #32
 8002f80:	f107 021b 	add.w	r2, r7, #27
 8002f84:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f000 f97a 	bl	8003282 <lis2mdl_read_reg>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	e051      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8002f9a:	7efa      	ldrb	r2, [r7, #27]
 8002f9c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d1e6      	bne.n	8002f7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f103 0020 	add.w	r0, r3, #32
 8002fb2:	f107 021b 	add.w	r2, r7, #27
 8002fb6:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f000 f961 	bl	8003282 <lis2mdl_read_reg>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	e038      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8002fcc:	7efa      	ldrb	r2, [r7, #27]
 8002fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d1e6      	bne.n	8002fac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f103 0020 	add.w	r0, r3, #32
 8002fe4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8002fe8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002fec:	2301      	movs	r3, #1
 8002fee:	f000 f960 	bl	80032b2 <lis2mdl_write_reg>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	e01f      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f103 0020 	add.w	r0, r3, #32
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	f000 f939 	bl	8003282 <lis2mdl_read_reg>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	e010      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f103 0020 	add.w	r0, r3, #32
 8003022:	f107 0220 	add.w	r2, r7, #32
 8003026:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800302a:	2301      	movs	r3, #1
 800302c:	f000 f941 	bl	80032b2 <lis2mdl_write_reg>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	e000      	b.n	800303e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3730      	adds	r7, #48	; 0x30
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08c      	sub	sp, #48	; 0x30
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	461a      	mov	r2, r3
 8003052:	460b      	mov	r3, r1
 8003054:	72fb      	strb	r3, [r7, #11]
 8003056:	4613      	mov	r3, r2
 8003058:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003060:	2340      	movs	r3, #64	; 0x40
 8003062:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 800306c:	233c      	movs	r3, #60	; 0x3c
 800306e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003070:	2315      	movs	r3, #21
 8003072:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003076:	2316      	movs	r3, #22
 8003078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800307c:	2317      	movs	r3, #23
 800307e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003086:	2314      	movs	r3, #20
 8003088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800308c:	2344      	movs	r3, #68	; 0x44
 800308e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003090:	2339      	movs	r3, #57	; 0x39
 8003092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800309c:	2329      	movs	r3, #41	; 0x29
 800309e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80030a2:	231e      	movs	r3, #30
 80030a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80030ae:	2310      	movs	r3, #16
 80030b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80030c0:	230e      	movs	r3, #14
 80030c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f103 0020 	add.w	r0, r3, #32
 80030cc:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80030d0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80030d4:	2301      	movs	r3, #1
 80030d6:	f000 f8ec 	bl	80032b2 <lis2mdl_write_reg>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	e0c9      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f103 0020 	add.w	r0, r3, #32
 80030ec:	f107 021f 	add.w	r2, r7, #31
 80030f0:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80030f4:	2301      	movs	r3, #1
 80030f6:	f000 f8dc 	bl	80032b2 <lis2mdl_write_reg>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	e0b9      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f103 0020 	add.w	r0, r3, #32
 800310c:	f107 020b 	add.w	r2, r7, #11
 8003110:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003114:	2301      	movs	r3, #1
 8003116:	f000 f8cc 	bl	80032b2 <lis2mdl_write_reg>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	e0a9      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f103 0020 	add.w	r0, r3, #32
 800312c:	f107 021e 	add.w	r2, r7, #30
 8003130:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003134:	2301      	movs	r3, #1
 8003136:	f000 f8bc 	bl	80032b2 <lis2mdl_write_reg>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	e099      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f103 0020 	add.w	r0, r3, #32
 800314c:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003150:	2301      	movs	r3, #1
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	f000 f8ad 	bl	80032b2 <lis2mdl_write_reg>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	e08a      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f103 0020 	add.w	r0, r3, #32
 800316a:	f107 021d 	add.w	r2, r7, #29
 800316e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003172:	2301      	movs	r3, #1
 8003174:	f000 f89d 	bl	80032b2 <lis2mdl_write_reg>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e07a      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f103 0020 	add.w	r0, r3, #32
 800318a:	f107 0220 	add.w	r2, r7, #32
 800318e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003192:	2301      	movs	r3, #1
 8003194:	f000 f88d 	bl	80032b2 <lis2mdl_write_reg>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	e06a      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f103 0020 	add.w	r0, r3, #32
 80031aa:	f107 021c 	add.w	r2, r7, #28
 80031ae:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80031b2:	2301      	movs	r3, #1
 80031b4:	f000 f865 	bl	8003282 <lis2mdl_read_reg>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	e05a      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80031c4:	7f3b      	ldrb	r3, [r7, #28]
 80031c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d102      	bne.n	80031d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80031ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d2:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f103 0020 	add.w	r0, r3, #32
 80031da:	f107 021c 	add.w	r2, r7, #28
 80031de:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80031e2:	2301      	movs	r3, #1
 80031e4:	f000 f865 	bl	80032b2 <lis2mdl_write_reg>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	e042      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f103 0020 	add.w	r0, r3, #32
 80031fa:	f107 0214 	add.w	r2, r7, #20
 80031fe:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003202:	2306      	movs	r3, #6
 8003204:	f000 f83d 	bl	8003282 <lis2mdl_read_reg>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e032      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f103 0020 	add.w	r0, r3, #32
 800321a:	f107 021b 	add.w	r2, r7, #27
 800321e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003222:	2301      	movs	r3, #1
 8003224:	f000 f82d 	bl	8003282 <lis2mdl_read_reg>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e022      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003234:	7efa      	ldrb	r2, [r7, #27]
 8003236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800323a:	4013      	ands	r3, r2
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003242:	429a      	cmp	r2, r3
 8003244:	d1e6      	bne.n	8003214 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f103 0020 	add.w	r0, r3, #32
 800324c:	f107 021b 	add.w	r2, r7, #27
 8003250:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003254:	2301      	movs	r3, #1
 8003256:	f000 f814 	bl	8003282 <lis2mdl_read_reg>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	e009      	b.n	800327a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003266:	7efa      	ldrb	r2, [r7, #27]
 8003268:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800326c:	4013      	ands	r3, r2
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003274:	429a      	cmp	r2, r3
 8003276:	d1e6      	bne.n	8003246 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3730      	adds	r7, #48	; 0x30
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003282:	b590      	push	{r4, r7, lr}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	461a      	mov	r2, r3
 800328e:	460b      	mov	r3, r1
 8003290:	72fb      	strb	r3, [r7, #11]
 8003292:	4613      	mov	r3, r2
 8003294:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685c      	ldr	r4, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68d8      	ldr	r0, [r3, #12]
 800329e:	893b      	ldrh	r3, [r7, #8]
 80032a0:	7af9      	ldrb	r1, [r7, #11]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	47a0      	blx	r4
 80032a6:	6178      	str	r0, [r7, #20]

  return ret;
 80032a8:	697b      	ldr	r3, [r7, #20]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}

080032b2 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80032b2:	b590      	push	{r4, r7, lr}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	461a      	mov	r2, r3
 80032be:	460b      	mov	r3, r1
 80032c0:	72fb      	strb	r3, [r7, #11]
 80032c2:	4613      	mov	r3, r2
 80032c4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681c      	ldr	r4, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68d8      	ldr	r0, [r3, #12]
 80032ce:	893b      	ldrh	r3, [r7, #8]
 80032d0:	7af9      	ldrb	r1, [r7, #11]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	47a0      	blx	r4
 80032d6:	6178      	str	r0, [r7, #20]

  return ret;
 80032d8:	697b      	ldr	r3, [r7, #20]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}

080032e2 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80032ee:	f107 0208 	add.w	r2, r7, #8
 80032f2:	2301      	movs	r3, #1
 80032f4:	2160      	movs	r1, #96	; 0x60
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffc3 	bl	8003282 <lis2mdl_read_reg>
 80032fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10f      	bne.n	8003324 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	b2da      	uxtb	r2, r3
 800330c:	7a3b      	ldrb	r3, [r7, #8]
 800330e:	f362 0301 	bfi	r3, r2, #0, #2
 8003312:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003314:	f107 0208 	add.w	r2, r7, #8
 8003318:	2301      	movs	r3, #1
 800331a:	2160      	movs	r1, #96	; 0x60
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ffc8 	bl	80032b2 <lis2mdl_write_reg>
 8003322:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003324:	68fb      	ldr	r3, [r7, #12]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800333a:	f107 0208 	add.w	r2, r7, #8
 800333e:	2301      	movs	r3, #1
 8003340:	2160      	movs	r1, #96	; 0x60
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff9d 	bl	8003282 <lis2mdl_read_reg>
 8003348:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10f      	bne.n	8003370 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	b2da      	uxtb	r2, r3
 8003358:	7a3b      	ldrb	r3, [r7, #8]
 800335a:	f362 0383 	bfi	r3, r2, #2, #2
 800335e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003360:	f107 0208 	add.w	r2, r7, #8
 8003364:	2301      	movs	r3, #1
 8003366:	2160      	movs	r1, #96	; 0x60
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ffa2 	bl	80032b2 <lis2mdl_write_reg>
 800336e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003370:	68fb      	ldr	r3, [r7, #12]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003386:	f107 0208 	add.w	r2, r7, #8
 800338a:	2301      	movs	r3, #1
 800338c:	2160      	movs	r1, #96	; 0x60
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff77 	bl	8003282 <lis2mdl_read_reg>
 8003394:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003396:	7a3b      	ldrb	r3, [r7, #8]
 8003398:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d81a      	bhi.n	80033d8 <lis2mdl_data_rate_get+0x5c>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <lis2mdl_data_rate_get+0x2c>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033c1 	.word	0x080033c1
 80033b0:	080033c9 	.word	0x080033c9
 80033b4:	080033d1 	.word	0x080033d1
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
      break;
 80033be:	e00f      	b.n	80033e0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
      break;
 80033c6:	e00b      	b.n	80033e0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2202      	movs	r2, #2
 80033cc:	701a      	strb	r2, [r3, #0]
      break;
 80033ce:	e007      	b.n	80033e0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2203      	movs	r2, #3
 80033d4:	701a      	strb	r2, [r3, #0]
      break;
 80033d6:	e003      	b.n	80033e0 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
      break;
 80033de:	bf00      	nop
  }

  return ret;
 80033e0:	68fb      	ldr	r3, [r7, #12]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop

080033ec <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80033f8:	f107 0208 	add.w	r2, r7, #8
 80033fc:	2301      	movs	r3, #1
 80033fe:	2162      	movs	r1, #98	; 0x62
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff3e 	bl	8003282 <lis2mdl_read_reg>
 8003406:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	7a3b      	ldrb	r3, [r7, #8]
 8003418:	f362 1304 	bfi	r3, r2, #4, #1
 800341c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800341e:	f107 0208 	add.w	r2, r7, #8
 8003422:	2301      	movs	r3, #1
 8003424:	2162      	movs	r1, #98	; 0x62
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff43 	bl	80032b2 <lis2mdl_write_reg>
 800342c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003442:	f107 020c 	add.w	r2, r7, #12
 8003446:	2306      	movs	r3, #6
 8003448:	2168      	movs	r1, #104	; 0x68
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff ff19 	bl	8003282 <lis2mdl_read_reg>
 8003450:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003452:	7b7b      	ldrb	r3, [r7, #13]
 8003454:	b21a      	sxth	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003460:	b29b      	uxth	r3, r3
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	b29a      	uxth	r2, r3
 8003466:	7b3b      	ldrb	r3, [r7, #12]
 8003468:	b29b      	uxth	r3, r3
 800346a:	4413      	add	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	b21a      	sxth	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3302      	adds	r3, #2
 800347a:	b212      	sxth	r2, r2
 800347c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	3302      	adds	r3, #2
 8003482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003486:	b29b      	uxth	r3, r3
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	b29a      	uxth	r2, r3
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	b29b      	uxth	r3, r3
 8003490:	4413      	add	r3, r2
 8003492:	b29a      	uxth	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	3302      	adds	r3, #2
 8003498:	b212      	sxth	r2, r2
 800349a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800349c:	7c7a      	ldrb	r2, [r7, #17]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	3304      	adds	r3, #4
 80034a2:	b212      	sxth	r2, r2
 80034a4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	3304      	adds	r3, #4
 80034aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	7c3b      	ldrb	r3, [r7, #16]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	3304      	adds	r3, #4
 80034c0:	b212      	sxth	r2, r2
 80034c2:	801a      	strh	r2, [r3, #0]

  return ret;
 80034c4:	697b      	ldr	r3, [r7, #20]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80034d8:	2301      	movs	r3, #1
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	214f      	movs	r1, #79	; 0x4f
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fecf 	bl	8003282 <lis2mdl_read_reg>
 80034e4:	60f8      	str	r0, [r7, #12]

  return ret;
 80034e6:	68fb      	ldr	r3, [r7, #12]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80034fc:	f107 0208 	add.w	r2, r7, #8
 8003500:	2301      	movs	r3, #1
 8003502:	2162      	movs	r1, #98	; 0x62
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff febc 	bl	8003282 <lis2mdl_read_reg>
 800350a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	7a3b      	ldrb	r3, [r7, #8]
 800351c:	f362 0341 	bfi	r3, r2, #1, #1
 8003520:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003522:	f107 0208 	add.w	r2, r7, #8
 8003526:	2301      	movs	r3, #1
 8003528:	2162      	movs	r1, #98	; 0x62
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fec1 	bl	80032b2 <lis2mdl_write_reg>
 8003530:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003548:	f107 0208 	add.w	r2, r7, #8
 800354c:	2301      	movs	r3, #1
 800354e:	2162      	movs	r1, #98	; 0x62
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fe96 	bl	8003282 <lis2mdl_read_reg>
 8003556:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	b2da      	uxtb	r2, r3
 8003566:	7a3b      	ldrb	r3, [r7, #8]
 8003568:	f362 1345 	bfi	r3, r2, #5, #1
 800356c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800356e:	f107 0208 	add.w	r2, r7, #8
 8003572:	2301      	movs	r3, #1
 8003574:	2162      	movs	r1, #98	; 0x62
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fe9b 	bl	80032b2 <lis2mdl_write_reg>
 800357c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e051      	b.n	8003648 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	7b1a      	ldrb	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <LSM6DSO_RegisterBusIO+0xcc>)
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <LSM6DSO_RegisterBusIO+0xd0>)
 80035e6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e020      	b.n	8003648 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4798      	blx	r3
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e016      	b.n	8003648 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d112      	bne.n	8003648 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10d      	bne.n	8003648 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800362c:	230c      	movs	r3, #12
 800362e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8003630:	7afb      	ldrb	r3, [r7, #11]
 8003632:	461a      	mov	r2, r3
 8003634:	2112      	movs	r1, #18
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 ff5d 	bl	80044f6 <LSM6DSO_Write_Reg>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003648:	68fb      	ldr	r3, [r7, #12]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	08004999 	.word	0x08004999
 8003658:	080049cf 	.word	0x080049cf

0800365c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d00b      	beq.n	8003684 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3320      	adds	r3, #32
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fe8a 	bl	800538c <lsm6dso_i3c_disable_set>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e060      	b.n	8003746 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3320      	adds	r3, #32
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fe58 	bl	8005340 <lsm6dso_auto_increment_set>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	e054      	b.n	8003746 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3320      	adds	r3, #32
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fd62 	bl	800516c <lsm6dso_block_data_update_set>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	e048      	b.n	8003746 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3320      	adds	r3, #32
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 feae 	bl	800541c <lsm6dso_fifo_mode_set>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	e03c      	b.n	8003746 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2204      	movs	r2, #4
 80036d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3320      	adds	r3, #32
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fa20 	bl	8004b20 <lsm6dso_xl_data_rate_set>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ea:	e02c      	b.n	8003746 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3320      	adds	r3, #32
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 f9b6 	bl	8004a64 <lsm6dso_xl_full_scale_set>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	e020      	b.n	8003746 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2204      	movs	r2, #4
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3320      	adds	r3, #32
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f001 fbce 	bl	8004eb4 <lsm6dso_gy_data_rate_set>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e010      	b.n	8003746 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3320      	adds	r3, #32
 8003728:	2106      	movs	r1, #6
 800372a:	4618      	mov	r0, r3
 800372c:	f001 fb5a 	bl	8004de4 <lsm6dso_gy_full_scale_set>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	e004      	b.n	8003746 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f888 	bl	800386c <LSM6DSO_ACC_Disable>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	e015      	b.n	8003794 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fc2e 	bl	8003fca <LSM6DSO_GYRO_Disable>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	e00c      	b.n	8003794 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3320      	adds	r3, #32
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 fdb6 	bl	800531e <lsm6dso_device_id_get>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	e000      	b.n	80037c0 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037f0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2210      	movs	r2, #16
 80037f6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <LSM6DSO_GetCapabilities+0x58>)
 8003802:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4a06      	ldr	r2, [pc, #24]	; (8003820 <LSM6DSO_GetCapabilities+0x58>)
 8003808:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	45d02000 	.word	0x45d02000

08003824 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e014      	b.n	8003864 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f103 0220 	add.w	r2, r3, #32
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f001 f969 	bl	8004b20 <lsm6dso_xl_data_rate_set>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
 8003858:	e004      	b.n	8003864 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e01f      	b.n	80038c2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f103 0220 	add.w	r2, r3, #32
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3333      	adds	r3, #51	; 0x33
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f001 fa40 	bl	8004d14 <lsm6dso_xl_data_rate_get>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	e010      	b.n	80038c2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3320      	adds	r3, #32
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 f93a 	bl	8004b20 <lsm6dso_xl_data_rate_set>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	e004      	b.n	80038c2 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3320      	adds	r3, #32
 80038de:	f107 020b 	add.w	r2, r7, #11
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 f8e3 	bl	8004ab0 <lsm6dso_xl_full_scale_get>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	e023      	b.n	800393e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80038f6:	7afb      	ldrb	r3, [r7, #11]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d81b      	bhi.n	8003934 <LSM6DSO_ACC_GetSensitivity+0x68>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003915 	.word	0x08003915
 8003908:	0800392d 	.word	0x0800392d
 800390c:	0800391d 	.word	0x0800391d
 8003910:	08003925 	.word	0x08003925
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003918:	601a      	str	r2, [r3, #0]
      break;
 800391a:	e00f      	b.n	800393c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003920:	601a      	str	r2, [r3, #0]
      break;
 8003922:	e00b      	b.n	800393c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003928:	601a      	str	r2, [r3, #0]
      break;
 800392a:	e007      	b.n	800393c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003930:	601a      	str	r2, [r3, #0]
      break;
 8003932:	e003      	b.n	800393c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	60fb      	str	r3, [r7, #12]
      break;
 800393a:	bf00      	nop
  }

  return ret;
 800393c:	68fb      	ldr	r3, [r7, #12]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	3d79db23 	.word	0x3d79db23
 800394c:	3df9db23 	.word	0x3df9db23
 8003950:	3e79db23 	.word	0x3e79db23
 8003954:	3ef9db23 	.word	0x3ef9db23

08003958 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3320      	adds	r3, #32
 800396a:	f107 020b 	add.w	r2, r7, #11
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f9cf 	bl	8004d14 <lsm6dso_xl_data_rate_get>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	e054      	b.n	8003a2c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003982:	7afb      	ldrb	r3, [r7, #11]
 8003984:	2b0b      	cmp	r3, #11
 8003986:	d84c      	bhi.n	8003a22 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039c1 	.word	0x080039c1
 8003994:	080039d3 	.word	0x080039d3
 8003998:	080039db 	.word	0x080039db
 800399c:	080039e3 	.word	0x080039e3
 80039a0:	080039eb 	.word	0x080039eb
 80039a4:	080039f3 	.word	0x080039f3
 80039a8:	080039fb 	.word	0x080039fb
 80039ac:	08003a03 	.word	0x08003a03
 80039b0:	08003a0b 	.word	0x08003a0b
 80039b4:	08003a13 	.word	0x08003a13
 80039b8:	08003a1b 	.word	0x08003a1b
 80039bc:	080039cb 	.word	0x080039cb
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
      break;
 80039c8:	e02f      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80039ce:	601a      	str	r2, [r3, #0]
      break;
 80039d0:	e02b      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80039d6:	601a      	str	r2, [r3, #0]
      break;
 80039d8:	e027      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80039de:	601a      	str	r2, [r3, #0]
      break;
 80039e0:	e023      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80039e6:	601a      	str	r2, [r3, #0]
      break;
 80039e8:	e01f      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80039ee:	601a      	str	r2, [r3, #0]
      break;
 80039f0:	e01b      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80039f6:	601a      	str	r2, [r3, #0]
      break;
 80039f8:	e017      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80039fe:	601a      	str	r2, [r3, #0]
      break;
 8003a00:	e013      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003a06:	601a      	str	r2, [r3, #0]
      break;
 8003a08:	e00f      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	4a11      	ldr	r2, [pc, #68]	; (8003a54 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003a0e:	601a      	str	r2, [r3, #0]
      break;
 8003a10:	e00b      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003a16:	601a      	str	r2, [r3, #0]
      break;
 8003a18:	e007      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003a1e:	601a      	str	r2, [r3, #0]
      break;
 8003a20:	e003      	b.n	8003a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	60fb      	str	r3, [r7, #12]
      break;
 8003a28:	bf00      	nop
  }

  return ret;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	3fcccccd 	.word	0x3fcccccd
 8003a38:	41480000 	.word	0x41480000
 8003a3c:	41d00000 	.word	0x41d00000
 8003a40:	42500000 	.word	0x42500000
 8003a44:	42d00000 	.word	0x42d00000
 8003a48:	43500000 	.word	0x43500000
 8003a4c:	43d08000 	.word	0x43d08000
 8003a50:	44504000 	.word	0x44504000
 8003a54:	44d06000 	.word	0x44d06000
 8003a58:	45505000 	.word	0x45505000
 8003a5c:	45d05800 	.word	0x45d05800

08003a60 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	ed97 0a00 	vldr	s0, [r7]
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f806 	bl	8003a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003a78:	4603      	mov	r3, r0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a90:	460b      	mov	r3, r1
 8003a92:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	f000 80ea 	beq.w	8003c78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f300 8163 	bgt.w	8003d70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d074      	beq.n	8003b9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003ab2:	e15d      	b.n	8003d70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f103 0020 	add.w	r0, r3, #32
 8003aba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003abe:	2301      	movs	r3, #1
 8003ac0:	2114      	movs	r1, #20
 8003ac2:	f000 ff9f 	bl	8004a04 <lsm6dso_read_reg>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad0:	e16c      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003ad2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d025      	beq.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10b      	bne.n	8003b02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3320      	adds	r3, #32
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 f815 	bl	8004b20 <lsm6dso_xl_data_rate_set>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	e154      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003b02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b06:	f36f 13c7 	bfc	r3, #7, #1
 8003b0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f103 0020 	add.w	r0, r3, #32
 8003b14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003b18:	2301      	movs	r3, #1
 8003b1a:	2114      	movs	r1, #20
 8003b1c:	f000 ff8a 	bl	8004a34 <lsm6dso_write_reg>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	e13f      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f103 0020 	add.w	r0, r3, #32
 8003b32:	f107 0220 	add.w	r2, r7, #32
 8003b36:	2301      	movs	r3, #1
 8003b38:	2115      	movs	r1, #21
 8003b3a:	f000 ff63 	bl	8004a04 <lsm6dso_read_reg>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	e130      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d014      	beq.n	8003b82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b5c:	f36f 1304 	bfc	r3, #4, #1
 8003b60:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f103 0020 	add.w	r0, r3, #32
 8003b6a:	f107 0220 	add.w	r2, r7, #32
 8003b6e:	2301      	movs	r3, #1
 8003b70:	2115      	movs	r1, #21
 8003b72:	f000 ff5f 	bl	8004a34 <lsm6dso_write_reg>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	e114      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003b82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b86:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	d400      	bmi.n	8003b96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003b94:	e0f0      	b.n	8003d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003b96:	4b87      	ldr	r3, [pc, #540]	; (8003db4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9a:	e0ed      	b.n	8003d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f103 0020 	add.w	r0, r3, #32
 8003ba2:	f107 021c 	add.w	r2, r7, #28
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	2114      	movs	r1, #20
 8003baa:	f000 ff2b 	bl	8004a04 <lsm6dso_read_reg>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	e0f8      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003bba:	7f3b      	ldrb	r3, [r7, #28]
 8003bbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d023      	beq.n	8003c0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d10b      	bne.n	8003be8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3320      	adds	r3, #32
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 ffa2 	bl	8004b20 <lsm6dso_xl_data_rate_set>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
 8003be6:	e0e1      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003be8:	7f3b      	ldrb	r3, [r7, #28]
 8003bea:	f36f 13c7 	bfc	r3, #7, #1
 8003bee:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f103 0020 	add.w	r0, r3, #32
 8003bf6:	f107 021c 	add.w	r2, r7, #28
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	2114      	movs	r1, #20
 8003bfe:	f000 ff19 	bl	8004a34 <lsm6dso_write_reg>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	e0ce      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f103 0020 	add.w	r0, r3, #32
 8003c14:	f107 0218 	add.w	r2, r7, #24
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2115      	movs	r1, #21
 8003c1c:	f000 fef2 	bl	8004a04 <lsm6dso_read_reg>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	e0bf      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003c2c:	7e3b      	ldrb	r3, [r7, #24]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d112      	bne.n	8003c5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003c38:	7e3b      	ldrb	r3, [r7, #24]
 8003c3a:	f043 0310 	orr.w	r3, r3, #16
 8003c3e:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f103 0020 	add.w	r0, r3, #32
 8003c46:	f107 0218 	add.w	r2, r7, #24
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	2115      	movs	r1, #21
 8003c4e:	f000 fef1 	bl	8004a34 <lsm6dso_write_reg>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	e0a6      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c62:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003db8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	dc00      	bgt.n	8003c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003c70:	e082      	b.n	8003d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003c72:	4b52      	ldr	r3, [pc, #328]	; (8003dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c76:	e07f      	b.n	8003d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f103 0020 	add.w	r0, r3, #32
 8003c7e:	f107 0210 	add.w	r2, r7, #16
 8003c82:	2301      	movs	r3, #1
 8003c84:	2115      	movs	r1, #21
 8003c86:	f000 febd 	bl	8004a04 <lsm6dso_read_reg>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	e08a      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003c96:	7c3b      	ldrb	r3, [r7, #16]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d012      	beq.n	8003cc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003ca2:	7c3b      	ldrb	r3, [r7, #16]
 8003ca4:	f36f 1304 	bfc	r3, #4, #1
 8003ca8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f103 0020 	add.w	r0, r3, #32
 8003cb0:	f107 0210 	add.w	r2, r7, #16
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	2115      	movs	r1, #21
 8003cb8:	f000 febc 	bl	8004a34 <lsm6dso_write_reg>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	e071      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d108      	bne.n	8003ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f979 	bl	8003fca <LSM6DSO_GYRO_Disable>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	e063      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f103 0020 	add.w	r0, r3, #32
 8003cea:	f107 0214 	add.w	r2, r7, #20
 8003cee:	2301      	movs	r3, #1
 8003cf0:	2114      	movs	r1, #20
 8003cf2:	f000 fe87 	bl	8004a04 <lsm6dso_read_reg>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e054      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003d02:	7d3b      	ldrb	r3, [r7, #20]
 8003d04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d123      	bne.n	8003d56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10b      	bne.n	8003d30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3320      	adds	r3, #32
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fefe 	bl	8004b20 <lsm6dso_xl_data_rate_set>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e03d      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8003d30:	7d3b      	ldrb	r3, [r7, #20]
 8003d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d36:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f103 0020 	add.w	r0, r3, #32
 8003d3e:	f107 0214 	add.w	r2, r7, #20
 8003d42:	2301      	movs	r3, #1
 8003d44:	2114      	movs	r1, #20
 8003d46:	f000 fe75 	bl	8004a34 <lsm6dso_write_reg>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
 8003d54:	e02a      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003d56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d5a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003db8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d66:	dc00      	bgt.n	8003d6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8003d68:	e006      	b.n	8003d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6e:	e003      	b.n	8003d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003d76:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d102      	bne.n	8003d86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	e012      	b.n	8003dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8003d90:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fbc9 	bl	800452c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8003d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003d9c:	e005      	b.n	8003daa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003d9e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fc5a 	bl	800465c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003da8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3730      	adds	r7, #48	; 0x30
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	41480000 	.word	0x41480000
 8003db8:	43500000 	.word	0x43500000
 8003dbc:	43500000 	.word	0x43500000

08003dc0 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3320      	adds	r3, #32
 8003dd2:	f107 020b 	add.w	r2, r7, #11
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fe69 	bl	8004ab0 <lsm6dso_xl_full_scale_get>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295
 8003de8:	e023      	b.n	8003e32 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d81b      	bhi.n	8003e28 <LSM6DSO_ACC_GetFullScale+0x68>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <LSM6DSO_ACC_GetFullScale+0x38>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e19 	.word	0x08003e19
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	601a      	str	r2, [r3, #0]
      break;
 8003e0e:	e00f      	b.n	8003e30 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2204      	movs	r2, #4
 8003e14:	601a      	str	r2, [r3, #0]
      break;
 8003e16:	e00b      	b.n	8003e30 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	601a      	str	r2, [r3, #0]
      break;
 8003e1e:	e007      	b.n	8003e30 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2210      	movs	r2, #16
 8003e24:	601a      	str	r2, [r3, #0]
      break;
 8003e26:	e003      	b.n	8003e30 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	60fb      	str	r3, [r7, #12]
      break;
 8003e2e:	bf00      	nop
  }

  return ret;
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop

08003e3c <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	dd0b      	ble.n	8003e64 <LSM6DSO_ACC_SetFullScale+0x28>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	dd06      	ble.n	8003e60 <LSM6DSO_ACC_SetFullScale+0x24>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	dc01      	bgt.n	8003e5c <LSM6DSO_ACC_SetFullScale+0x20>
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e004      	b.n	8003e66 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e002      	b.n	8003e66 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e000      	b.n	8003e66 <LSM6DSO_ACC_SetFullScale+0x2a>
 8003e64:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8003e66:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3320      	adds	r3, #32
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fdf7 	bl	8004a64 <lsm6dso_xl_full_scale_set>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e000      	b.n	8003e84 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	f107 0208 	add.w	r2, r7, #8
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 f9d4 	bl	800524e <lsm6dso_acceleration_raw_get>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	e00c      	b.n	8003ecc <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003eb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003eba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003ec2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3320      	adds	r3, #32
 8003ee8:	f107 0210 	add.w	r2, r7, #16
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 f9ad 	bl	800524e <lsm6dso_acceleration_raw_get>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e03c      	b.n	8003f7a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fce0 	bl	80038cc <LSM6DSO_ACC_GetSensitivity>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	e030      	b.n	8003f7a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003f18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f30:	ee17 2a90 	vmov	r2, s15
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003f38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f50:	ee17 2a90 	vmov	r2, s15
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003f58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f70:	ee17 2a90 	vmov	r2, s15
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e014      	b.n	8003fc2 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f103 0220 	add.w	r2, r3, #32
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f000 ff84 	bl	8004eb4 <lsm6dso_gy_data_rate_set>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	e004      	b.n	8003fc2 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e01f      	b.n	8004020 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f103 0220 	add.w	r2, r3, #32
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3334      	adds	r3, #52	; 0x34
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f001 f85b 	bl	80050a8 <lsm6dso_gy_data_rate_get>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	e010      	b.n	8004020 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3320      	adds	r3, #32
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 ff55 	bl	8004eb4 <lsm6dso_gy_data_rate_set>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
 8004014:	e004      	b.n	8004020 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3320      	adds	r3, #32
 800403a:	f107 020b 	add.w	r2, r7, #11
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fef5 	bl	8004e30 <lsm6dso_gy_full_scale_get>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	e02d      	b.n	80040ae <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004052:	7afb      	ldrb	r3, [r7, #11]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d825      	bhi.n	80040a4 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004058:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004085 	.word	0x08004085
 8004064:	0800407d 	.word	0x0800407d
 8004068:	0800408d 	.word	0x0800408d
 800406c:	080040a5 	.word	0x080040a5
 8004070:	08004095 	.word	0x08004095
 8004074:	080040a5 	.word	0x080040a5
 8004078:	0800409d 	.word	0x0800409d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4a0e      	ldr	r2, [pc, #56]	; (80040b8 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004080:	601a      	str	r2, [r3, #0]
      break;
 8004082:	e013      	b.n	80040ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004088:	601a      	str	r2, [r3, #0]
      break;
 800408a:	e00f      	b.n	80040ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004090:	601a      	str	r2, [r3, #0]
      break;
 8004092:	e00b      	b.n	80040ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004098:	601a      	str	r2, [r3, #0]
      break;
 800409a:	e007      	b.n	80040ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80040a0:	601a      	str	r2, [r3, #0]
      break;
 80040a2:	e003      	b.n	80040ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	60fb      	str	r3, [r7, #12]
      break;
 80040aa:	bf00      	nop
  }

  return ret;
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	408c0000 	.word	0x408c0000
 80040bc:	410c0000 	.word	0x410c0000
 80040c0:	418c0000 	.word	0x418c0000
 80040c4:	420c0000 	.word	0x420c0000
 80040c8:	428c0000 	.word	0x428c0000

080040cc <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3320      	adds	r3, #32
 80040de:	f107 020b 	add.w	r2, r7, #11
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 ffdf 	bl	80050a8 <lsm6dso_gy_data_rate_get>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e04e      	b.n	8004194 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80040f6:	7afb      	ldrb	r3, [r7, #11]
 80040f8:	2b0a      	cmp	r3, #10
 80040fa:	d846      	bhi.n	800418a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004131 	.word	0x08004131
 8004108:	0800413b 	.word	0x0800413b
 800410c:	08004143 	.word	0x08004143
 8004110:	0800414b 	.word	0x0800414b
 8004114:	08004153 	.word	0x08004153
 8004118:	0800415b 	.word	0x0800415b
 800411c:	08004163 	.word	0x08004163
 8004120:	0800416b 	.word	0x0800416b
 8004124:	08004173 	.word	0x08004173
 8004128:	0800417b 	.word	0x0800417b
 800412c:	08004183 	.word	0x08004183
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
      break;
 8004138:	e02b      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	4a17      	ldr	r2, [pc, #92]	; (800419c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800413e:	601a      	str	r2, [r3, #0]
      break;
 8004140:	e027      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8004146:	601a      	str	r2, [r3, #0]
      break;
 8004148:	e023      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800414e:	601a      	str	r2, [r3, #0]
      break;
 8004150:	e01f      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8004156:	601a      	str	r2, [r3, #0]
      break;
 8004158:	e01b      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	4a13      	ldr	r2, [pc, #76]	; (80041ac <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800415e:	601a      	str	r2, [r3, #0]
      break;
 8004160:	e017      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8004166:	601a      	str	r2, [r3, #0]
      break;
 8004168:	e013      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	4a11      	ldr	r2, [pc, #68]	; (80041b4 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800416e:	601a      	str	r2, [r3, #0]
      break;
 8004170:	e00f      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8004176:	601a      	str	r2, [r3, #0]
      break;
 8004178:	e00b      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4a0f      	ldr	r2, [pc, #60]	; (80041bc <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800417e:	601a      	str	r2, [r3, #0]
      break;
 8004180:	e007      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8004186:	601a      	str	r2, [r3, #0]
      break;
 8004188:	e003      	b.n	8004192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	60fb      	str	r3, [r7, #12]
      break;
 8004190:	bf00      	nop
  }

  return ret;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	41480000 	.word	0x41480000
 80041a0:	41d00000 	.word	0x41d00000
 80041a4:	42500000 	.word	0x42500000
 80041a8:	42d00000 	.word	0x42d00000
 80041ac:	43500000 	.word	0x43500000
 80041b0:	43d08000 	.word	0x43d08000
 80041b4:	44504000 	.word	0x44504000
 80041b8:	44d06000 	.word	0x44d06000
 80041bc:	45505000 	.word	0x45505000
 80041c0:	45d05800 	.word	0x45d05800

080041c4 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80041d0:	2100      	movs	r1, #0
 80041d2:	ed97 0a00 	vldr	s0, [r7]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f806 	bl	80041e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80041f4:	460b      	mov	r3, r1
 80041f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004206:	2b01      	cmp	r3, #1
 8004208:	d028      	beq.n	800425c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800420a:	e05c      	b.n	80042c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f103 0020 	add.w	r0, r3, #32
 8004212:	f107 0214 	add.w	r2, r7, #20
 8004216:	2301      	movs	r3, #1
 8004218:	2116      	movs	r1, #22
 800421a:	f000 fbf3 	bl	8004a04 <lsm6dso_read_reg>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	e06c      	b.n	8004304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800422a:	7d3b      	ldrb	r3, [r7, #20]
 800422c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d04b      	beq.n	80042ce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004236:	7d3b      	ldrb	r3, [r7, #20]
 8004238:	f36f 13c7 	bfc	r3, #7, #1
 800423c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f103 0020 	add.w	r0, r3, #32
 8004244:	f107 0214 	add.w	r2, r7, #20
 8004248:	2301      	movs	r3, #1
 800424a:	2116      	movs	r1, #22
 800424c:	f000 fbf2 	bl	8004a34 <lsm6dso_write_reg>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03b      	beq.n	80042ce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	e053      	b.n	8004304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f103 0020 	add.w	r0, r3, #32
 8004262:	f107 0210 	add.w	r2, r7, #16
 8004266:	2301      	movs	r3, #1
 8004268:	2116      	movs	r1, #22
 800426a:	f000 fbcb 	bl	8004a04 <lsm6dso_read_reg>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	e044      	b.n	8004304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800427a:	7c3b      	ldrb	r3, [r7, #16]
 800427c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d112      	bne.n	80042ac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004286:	7c3b      	ldrb	r3, [r7, #16]
 8004288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f103 0020 	add.w	r0, r3, #32
 8004294:	f107 0210 	add.w	r2, r7, #16
 8004298:	2301      	movs	r3, #1
 800429a:	2116      	movs	r1, #22
 800429c:	f000 fbca 	bl	8004a34 <lsm6dso_write_reg>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	e02b      	b.n	8004304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80042ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80042b0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800430c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80042b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042bc:	dc00      	bgt.n	80042c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80042be:	e007      	b.n	80042d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80042c0:	4b13      	ldr	r3, [pc, #76]	; (8004310 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e004      	b.n	80042d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	61fb      	str	r3, [r7, #28]
      break;
 80042cc:	e000      	b.n	80042d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80042ce:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d102      	bne.n	80042de <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	e012      	b.n	8004304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d106      	bne.n	80042f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80042e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fa45 	bl	800477c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80042f2:	61f8      	str	r0, [r7, #28]
 80042f4:	e005      	b.n	8004302 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80042f6:	ed97 0a06 	vldr	s0, [r7, #24]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 faca 	bl	8004894 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004300:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004302:	69fb      	ldr	r3, [r7, #28]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	43500000 	.word	0x43500000
 8004310:	43500000 	.word	0x43500000

08004314 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3320      	adds	r3, #32
 8004326:	f107 020b 	add.w	r2, r7, #11
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fd7f 	bl	8004e30 <lsm6dso_gy_full_scale_get>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	e030      	b.n	80043a0 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	2b06      	cmp	r3, #6
 8004342:	d828      	bhi.n	8004396 <LSM6DSO_GYRO_GetFullScale+0x82>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004371 	.word	0x08004371
 8004350:	08004369 	.word	0x08004369
 8004354:	08004379 	.word	0x08004379
 8004358:	08004397 	.word	0x08004397
 800435c:	08004383 	.word	0x08004383
 8004360:	08004397 	.word	0x08004397
 8004364:	0800438d 	.word	0x0800438d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	227d      	movs	r2, #125	; 0x7d
 800436c:	601a      	str	r2, [r3, #0]
      break;
 800436e:	e016      	b.n	800439e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	22fa      	movs	r2, #250	; 0xfa
 8004374:	601a      	str	r2, [r3, #0]
      break;
 8004376:	e012      	b.n	800439e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800437e:	601a      	str	r2, [r3, #0]
      break;
 8004380:	e00d      	b.n	800439e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004388:	601a      	str	r2, [r3, #0]
      break;
 800438a:	e008      	b.n	800439e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004392:	601a      	str	r2, [r3, #0]
      break;
 8004394:	e003      	b.n	800439e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	60fb      	str	r3, [r7, #12]
      break;
 800439c:	bf00      	nop
  }

  return ret;
 800439e:	68fb      	ldr	r3, [r7, #12]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b7d      	cmp	r3, #125	; 0x7d
 80043b6:	dd12      	ble.n	80043de <LSM6DSO_GYRO_SetFullScale+0x36>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2bfa      	cmp	r3, #250	; 0xfa
 80043bc:	dd0d      	ble.n	80043da <LSM6DSO_GYRO_SetFullScale+0x32>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043c4:	dd07      	ble.n	80043d6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043cc:	dc01      	bgt.n	80043d2 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80043ce:	2304      	movs	r3, #4
 80043d0:	e006      	b.n	80043e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80043d2:	2306      	movs	r3, #6
 80043d4:	e004      	b.n	80043e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e002      	b.n	80043e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80043de:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80043e0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3320      	adds	r3, #32
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fcfa 	bl	8004de4 <lsm6dso_gy_full_scale_set>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e000      	b.n	80043fe <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3320      	adds	r3, #32
 8004414:	f107 0208 	add.w	r2, r7, #8
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fecc 	bl	80051b8 <lsm6dso_angular_rate_raw_get>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
 800442a:	e00c      	b.n	8004446 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800442c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004434:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800443c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3320      	adds	r3, #32
 800445c:	f107 0210 	add.w	r2, r7, #16
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fea8 	bl	80051b8 <lsm6dso_angular_rate_raw_get>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e03c      	b.n	80044ee <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004474:	f107 030c 	add.w	r3, r7, #12
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff fdd4 	bl	8004028 <LSM6DSO_GYRO_GetSensitivity>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e030      	b.n	80044ee <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800448c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004498:	edd7 7a03 	vldr	s15, [r7, #12]
 800449c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044a4:	ee17 2a90 	vmov	r2, s15
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80044ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c4:	ee17 2a90 	vmov	r2, s15
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80044cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044d0:	ee07 3a90 	vmov	s15, r3
 80044d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e4:	ee17 2a90 	vmov	r2, s15
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
 8004502:	4613      	mov	r3, r2
 8004504:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f103 0020 	add.w	r0, r3, #32
 800450c:	1cba      	adds	r2, r7, #2
 800450e:	78f9      	ldrb	r1, [r7, #3]
 8004510:	2301      	movs	r3, #1
 8004512:	f000 fa8f 	bl	8004a34 <lsm6dso_write_reg>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
 8004520:	e000      	b.n	8004524 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004538:	edd7 7a00 	vldr	s15, [r7]
 800453c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800463c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	d801      	bhi.n	800454e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800454a:	230b      	movs	r3, #11
 800454c:	e063      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800454e:	edd7 7a00 	vldr	s15, [r7]
 8004552:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	d801      	bhi.n	8004564 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004560:	2301      	movs	r3, #1
 8004562:	e058      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004564:	edd7 7a00 	vldr	s15, [r7]
 8004568:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800456c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004574:	d801      	bhi.n	800457a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004576:	2302      	movs	r3, #2
 8004578:	e04d      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800457a:	edd7 7a00 	vldr	s15, [r7]
 800457e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004640 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458a:	d801      	bhi.n	8004590 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 800458c:	2303      	movs	r3, #3
 800458e:	e042      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004590:	edd7 7a00 	vldr	s15, [r7]
 8004594:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004644 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	d801      	bhi.n	80045a6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80045a2:	2304      	movs	r3, #4
 80045a4:	e037      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80045a6:	edd7 7a00 	vldr	s15, [r7]
 80045aa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004648 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80045ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	d801      	bhi.n	80045bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80045b8:	2305      	movs	r3, #5
 80045ba:	e02c      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80045bc:	edd7 7a00 	vldr	s15, [r7]
 80045c0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800464c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80045c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045cc:	d801      	bhi.n	80045d2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80045ce:	2306      	movs	r3, #6
 80045d0:	e021      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80045d2:	edd7 7a00 	vldr	s15, [r7]
 80045d6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004650 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80045da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e2:	d801      	bhi.n	80045e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80045e4:	2307      	movs	r3, #7
 80045e6:	e016      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80045e8:	edd7 7a00 	vldr	s15, [r7]
 80045ec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004654 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80045f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f8:	d801      	bhi.n	80045fe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80045fa:	2308      	movs	r3, #8
 80045fc:	e00b      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80045fe:	edd7 7a00 	vldr	s15, [r7]
 8004602:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004658 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460e:	d801      	bhi.n	8004614 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004610:	2309      	movs	r3, #9
 8004612:	e000      	b.n	8004616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004614:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004616:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3320      	adds	r3, #32
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fa7d 	bl	8004b20 <lsm6dso_xl_data_rate_set>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 800462c:	f04f 33ff 	mov.w	r3, #4294967295
 8004630:	e000      	b.n	8004634 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	3fcccccd 	.word	0x3fcccccd
 8004640:	42500000 	.word	0x42500000
 8004644:	42d00000 	.word	0x42d00000
 8004648:	43500000 	.word	0x43500000
 800464c:	43d08000 	.word	0x43d08000
 8004650:	44504000 	.word	0x44504000
 8004654:	44d06000 	.word	0x44d06000
 8004658:	45505000 	.word	0x45505000

0800465c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004668:	edd7 7a00 	vldr	s15, [r7]
 800466c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800475c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	d801      	bhi.n	800467e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800467a:	230b      	movs	r3, #11
 800467c:	e063      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800467e:	edd7 7a00 	vldr	s15, [r7]
 8004682:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	d801      	bhi.n	8004694 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004690:	2301      	movs	r3, #1
 8004692:	e058      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004694:	edd7 7a00 	vldr	s15, [r7]
 8004698:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800469c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	d801      	bhi.n	80046aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e04d      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80046aa:	edd7 7a00 	vldr	s15, [r7]
 80046ae:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004760 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80046b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d801      	bhi.n	80046c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80046bc:	2303      	movs	r3, #3
 80046be:	e042      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80046c0:	edd7 7a00 	vldr	s15, [r7]
 80046c4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004764 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80046c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	d801      	bhi.n	80046d6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80046d2:	2304      	movs	r3, #4
 80046d4:	e037      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80046d6:	edd7 7a00 	vldr	s15, [r7]
 80046da:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004768 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80046de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e6:	d801      	bhi.n	80046ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80046e8:	2305      	movs	r3, #5
 80046ea:	e02c      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80046ec:	edd7 7a00 	vldr	s15, [r7]
 80046f0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800476c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80046f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	d801      	bhi.n	8004702 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80046fe:	2306      	movs	r3, #6
 8004700:	e021      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004702:	edd7 7a00 	vldr	s15, [r7]
 8004706:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800470a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	d801      	bhi.n	8004718 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004714:	2307      	movs	r3, #7
 8004716:	e016      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004718:	edd7 7a00 	vldr	s15, [r7]
 800471c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004774 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004728:	d801      	bhi.n	800472e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800472a:	2308      	movs	r3, #8
 800472c:	e00b      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800472e:	edd7 7a00 	vldr	s15, [r7]
 8004732:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004778 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473e:	d801      	bhi.n	8004744 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004740:	2309      	movs	r3, #9
 8004742:	e000      	b.n	8004746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004744:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	3fcccccd 	.word	0x3fcccccd
 8004760:	42500000 	.word	0x42500000
 8004764:	42d00000 	.word	0x42d00000
 8004768:	43500000 	.word	0x43500000
 800476c:	43d08000 	.word	0x43d08000
 8004770:	44504000 	.word	0x44504000
 8004774:	44d06000 	.word	0x44d06000
 8004778:	45505000 	.word	0x45505000

0800477c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004788:	edd7 7a00 	vldr	s15, [r7]
 800478c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004798:	d801      	bhi.n	800479e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800479a:	2301      	movs	r3, #1
 800479c:	e058      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800479e:	edd7 7a00 	vldr	s15, [r7]
 80047a2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80047a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ae:	d801      	bhi.n	80047b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e04d      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80047b4:	edd7 7a00 	vldr	s15, [r7]
 80047b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004878 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80047bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d801      	bhi.n	80047ca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80047c6:	2303      	movs	r3, #3
 80047c8:	e042      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80047ca:	edd7 7a00 	vldr	s15, [r7]
 80047ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800487c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80047d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047da:	d801      	bhi.n	80047e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80047dc:	2304      	movs	r3, #4
 80047de:	e037      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80047e0:	edd7 7a00 	vldr	s15, [r7]
 80047e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004880 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80047e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f0:	d801      	bhi.n	80047f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80047f2:	2305      	movs	r3, #5
 80047f4:	e02c      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80047f6:	edd7 7a00 	vldr	s15, [r7]
 80047fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004884 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80047fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004806:	d801      	bhi.n	800480c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004808:	2306      	movs	r3, #6
 800480a:	e021      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800480c:	edd7 7a00 	vldr	s15, [r7]
 8004810:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004888 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481c:	d801      	bhi.n	8004822 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800481e:	2307      	movs	r3, #7
 8004820:	e016      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004822:	edd7 7a00 	vldr	s15, [r7]
 8004826:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800488c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800482a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	d801      	bhi.n	8004838 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004834:	2308      	movs	r3, #8
 8004836:	e00b      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004838:	edd7 7a00 	vldr	s15, [r7]
 800483c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004848:	d801      	bhi.n	800484e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800484a:	2309      	movs	r3, #9
 800484c:	e000      	b.n	8004850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800484e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004850:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3320      	adds	r3, #32
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	4611      	mov	r1, r2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb2a 	bl	8004eb4 <lsm6dso_gy_data_rate_set>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	e000      	b.n	800486e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	42500000 	.word	0x42500000
 800487c:	42d00000 	.word	0x42d00000
 8004880:	43500000 	.word	0x43500000
 8004884:	43d08000 	.word	0x43d08000
 8004888:	44504000 	.word	0x44504000
 800488c:	44d06000 	.word	0x44d06000
 8004890:	45505000 	.word	0x45505000

08004894 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80048a0:	edd7 7a00 	vldr	s15, [r7]
 80048a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80048a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	d801      	bhi.n	80048b6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e058      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048b6:	edd7 7a00 	vldr	s15, [r7]
 80048ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c6:	d801      	bhi.n	80048cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e04d      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048cc:	edd7 7a00 	vldr	s15, [r7]
 80048d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800497c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80048d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	d801      	bhi.n	80048e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80048de:	2303      	movs	r3, #3
 80048e0:	e042      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048e2:	edd7 7a00 	vldr	s15, [r7]
 80048e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004980 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80048ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f2:	d801      	bhi.n	80048f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80048f4:	2304      	movs	r3, #4
 80048f6:	e037      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80048f8:	edd7 7a00 	vldr	s15, [r7]
 80048fc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004984 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	d801      	bhi.n	800490e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800490a:	2305      	movs	r3, #5
 800490c:	e02c      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800490e:	edd7 7a00 	vldr	s15, [r7]
 8004912:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004988 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d801      	bhi.n	8004924 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004920:	2306      	movs	r3, #6
 8004922:	e021      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004924:	edd7 7a00 	vldr	s15, [r7]
 8004928:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800498c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800492c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	d801      	bhi.n	800493a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004936:	2307      	movs	r3, #7
 8004938:	e016      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800493a:	edd7 7a00 	vldr	s15, [r7]
 800493e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004990 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d801      	bhi.n	8004950 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800494c:	2308      	movs	r3, #8
 800494e:	e00b      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004950:	edd7 7a00 	vldr	s15, [r7]
 8004954:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004994 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004960:	d801      	bhi.n	8004966 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004962:	2309      	movs	r3, #9
 8004964:	e000      	b.n	8004968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004966:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	42500000 	.word	0x42500000
 8004980:	42d00000 	.word	0x42d00000
 8004984:	43500000 	.word	0x43500000
 8004988:	43d08000 	.word	0x43d08000
 800498c:	44504000 	.word	0x44504000
 8004990:	44d06000 	.word	0x44d06000
 8004994:	45505000 	.word	0x45505000

08004998 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	461a      	mov	r2, r3
 80049a4:	460b      	mov	r3, r1
 80049a6:	72fb      	strb	r3, [r7, #11]
 80049a8:	4613      	mov	r3, r2
 80049aa:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	695c      	ldr	r4, [r3, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	7b1b      	ldrb	r3, [r3, #12]
 80049b8:	b298      	uxth	r0, r3
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	b299      	uxth	r1, r3
 80049be:	893b      	ldrh	r3, [r7, #8]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	47a0      	blx	r4
 80049c4:	4603      	mov	r3, r0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd90      	pop	{r4, r7, pc}

080049ce <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80049ce:	b590      	push	{r4, r7, lr}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	461a      	mov	r2, r3
 80049da:	460b      	mov	r3, r1
 80049dc:	72fb      	strb	r3, [r7, #11]
 80049de:	4613      	mov	r3, r2
 80049e0:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	691c      	ldr	r4, [r3, #16]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	7b1b      	ldrb	r3, [r3, #12]
 80049ee:	b298      	uxth	r0, r3
 80049f0:	7afb      	ldrb	r3, [r7, #11]
 80049f2:	b299      	uxth	r1, r3
 80049f4:	893b      	ldrh	r3, [r7, #8]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	47a0      	blx	r4
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	460b      	mov	r3, r1
 8004a12:	72fb      	strb	r3, [r7, #11]
 8004a14:	4613      	mov	r3, r2
 8004a16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685c      	ldr	r4, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68d8      	ldr	r0, [r3, #12]
 8004a20:	893b      	ldrh	r3, [r7, #8]
 8004a22:	7af9      	ldrb	r1, [r7, #11]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	47a0      	blx	r4
 8004a28:	6178      	str	r0, [r7, #20]

  return ret;
 8004a2a:	697b      	ldr	r3, [r7, #20]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}

08004a34 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	460b      	mov	r3, r1
 8004a42:	72fb      	strb	r3, [r7, #11]
 8004a44:	4613      	mov	r3, r2
 8004a46:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68d8      	ldr	r0, [r3, #12]
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	7af9      	ldrb	r1, [r7, #11]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	47a0      	blx	r4
 8004a58:	6178      	str	r0, [r7, #20]

  return ret;
 8004a5a:	697b      	ldr	r3, [r7, #20]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd90      	pop	{r4, r7, pc}

08004a64 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a70:	f107 0208 	add.w	r2, r7, #8
 8004a74:	2301      	movs	r3, #1
 8004a76:	2110      	movs	r1, #16
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ffc3 	bl	8004a04 <lsm6dso_read_reg>
 8004a7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	7a3b      	ldrb	r3, [r7, #8]
 8004a90:	f362 0383 	bfi	r3, r2, #2, #2
 8004a94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a96:	f107 0208 	add.w	r2, r7, #8
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff ffc8 	bl	8004a34 <lsm6dso_write_reg>
 8004aa4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004aba:	f107 0208 	add.w	r2, r7, #8
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2110      	movs	r1, #16
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff9e 	bl	8004a04 <lsm6dso_read_reg>
 8004ac8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004aca:	7a3b      	ldrb	r3, [r7, #8]
 8004acc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d81a      	bhi.n	8004b0c <lsm6dso_xl_full_scale_get+0x5c>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <lsm6dso_xl_full_scale_get+0x2c>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004af5 	.word	0x08004af5
 8004ae4:	08004afd 	.word	0x08004afd
 8004ae8:	08004b05 	.word	0x08004b05
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]
      break;
 8004af2:	e00f      	b.n	8004b14 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
      break;
 8004afa:	e00b      	b.n	8004b14 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2202      	movs	r2, #2
 8004b00:	701a      	strb	r2, [r3, #0]
      break;
 8004b02:	e007      	b.n	8004b14 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2203      	movs	r2, #3
 8004b08:	701a      	strb	r2, [r3, #0]
      break;
 8004b0a:	e003      	b.n	8004b14 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
      break;
 8004b12:	bf00      	nop
  }

  return ret;
 8004b14:	68fb      	ldr	r3, [r7, #12]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop

08004b20 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fc96 	bl	8005468 <lsm6dso_fsm_enable_get>
 8004b3c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <lsm6dso_xl_data_rate_set+0x28>
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	e0e1      	b.n	8004d0c <lsm6dso_xl_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004b48:	7b3b      	ldrb	r3, [r7, #12]
 8004b4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b4e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004b50:	7b3b      	ldrb	r3, [r7, #12]
 8004b52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b56:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004b5c:	7b3b      	ldrb	r3, [r7, #12]
 8004b5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b62:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004b68:	7b3b      	ldrb	r3, [r7, #12]
 8004b6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b6e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004b70:	4313      	orrs	r3, r2
 8004b72:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004b74:	7b3b      	ldrb	r3, [r7, #12]
 8004b76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b7a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004b80:	7b3b      	ldrb	r3, [r7, #12]
 8004b82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b86:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004b8c:	7b3b      	ldrb	r3, [r7, #12]
 8004b8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b92:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004b94:	4313      	orrs	r3, r2
 8004b96:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004b98:	7b3b      	ldrb	r3, [r7, #12]
 8004b9a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b9e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004ba4:	7b7b      	ldrb	r3, [r7, #13]
 8004ba6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004baa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004bb0:	7b7b      	ldrb	r3, [r7, #13]
 8004bb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004bb6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004bbc:	7b7b      	ldrb	r3, [r7, #13]
 8004bbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004bc2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004bc8:	7b7b      	ldrb	r3, [r7, #13]
 8004bca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004bce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004bd4:	7b7b      	ldrb	r3, [r7, #13]
 8004bd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004bda:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004be0:	7b7b      	ldrb	r3, [r7, #13]
 8004be2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004be6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004be8:	4313      	orrs	r3, r2
 8004bea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004bec:	7b7b      	ldrb	r3, [r7, #13]
 8004bee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004bf2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004bf8:	7b7b      	ldrb	r3, [r7, #13]
 8004bfa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004bfe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004c00:	4313      	orrs	r3, r2
 8004c02:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d164      	bne.n	8004cd2 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004c08:	f107 030b 	add.w	r3, r7, #11
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fc4c 	bl	80054ac <lsm6dso_fsm_data_rate_get>
 8004c14:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <lsm6dso_xl_data_rate_set+0x100>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	e075      	b.n	8004d0c <lsm6dso_xl_data_rate_set+0x1ec>

    switch (fsm_odr)
 8004c20:	7afb      	ldrb	r3, [r7, #11]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d852      	bhi.n	8004ccc <lsm6dso_xl_data_rate_set+0x1ac>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <lsm6dso_xl_data_rate_set+0x10c>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c3d 	.word	0x08004c3d
 8004c30:	08004c4f 	.word	0x08004c4f
 8004c34:	08004c6d 	.word	0x08004c6d
 8004c38:	08004c97 	.word	0x08004c97
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004c46:	e045      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	75fb      	strb	r3, [r7, #23]
        break;
 8004c4c:	e042      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004c54:	2302      	movs	r3, #2
 8004c56:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004c58:	e03c      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d102      	bne.n	8004c66 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004c60:	2302      	movs	r3, #2
 8004c62:	75fb      	strb	r3, [r7, #23]
        break;
 8004c64:	e036      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	75fb      	strb	r3, [r7, #23]
        break;
 8004c6a:	e033      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004c72:	2303      	movs	r3, #3
 8004c74:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004c76:	e02d      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	75fb      	strb	r3, [r7, #23]
        break;
 8004c82:	e027      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d102      	bne.n	8004c90 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	75fb      	strb	r3, [r7, #23]
        break;
 8004c8e:	e021      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	75fb      	strb	r3, [r7, #23]
        break;
 8004c94:	e01e      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004ca0:	e018      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d102      	bne.n	8004cae <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004ca8:	2304      	movs	r3, #4
 8004caa:	75fb      	strb	r3, [r7, #23]
        break;
 8004cac:	e012      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d102      	bne.n	8004cba <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	75fb      	strb	r3, [r7, #23]
        break;
 8004cb8:	e00c      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d102      	bne.n	8004cc6 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	75fb      	strb	r3, [r7, #23]
        break;
 8004cc4:	e006      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	75fb      	strb	r3, [r7, #23]
        break;
 8004cca:	e003      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>

      default:
        odr_xl = val;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	75fb      	strb	r3, [r7, #23]
        break;
 8004cd0:	e000      	b.n	8004cd4 <lsm6dso_xl_data_rate_set+0x1b4>
    }
  }
 8004cd2:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004cd4:	f107 0208 	add.w	r2, r7, #8
 8004cd8:	2301      	movs	r3, #1
 8004cda:	2110      	movs	r1, #16
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fe91 	bl	8004a04 <lsm6dso_read_reg>
 8004ce2:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	7a3b      	ldrb	r3, [r7, #8]
 8004cee:	f362 1307 	bfi	r3, r2, #4, #4
 8004cf2:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004cf4:	f107 0208 	add.w	r2, r7, #8
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	2110      	movs	r1, #16
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fe99 	bl	8004a34 <lsm6dso_write_reg>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  return ret;
 8004d0a:	693b      	ldr	r3, [r7, #16]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004d1e:	f107 0208 	add.w	r2, r7, #8
 8004d22:	2301      	movs	r3, #1
 8004d24:	2110      	movs	r1, #16
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff fe6c 	bl	8004a04 <lsm6dso_read_reg>
 8004d2c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8004d2e:	7a3b      	ldrb	r3, [r7, #8]
 8004d30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b0b      	cmp	r3, #11
 8004d38:	d84a      	bhi.n	8004dd0 <lsm6dso_xl_data_rate_get+0xbc>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <lsm6dso_xl_data_rate_get+0x2c>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d71 	.word	0x08004d71
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d81 	.word	0x08004d81
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d91 	.word	0x08004d91
 8004d54:	08004d99 	.word	0x08004d99
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004da9 	.word	0x08004da9
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004dc1 	.word	0x08004dc1
 8004d6c:	08004dc9 	.word	0x08004dc9
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	e02f      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
      break;
 8004d7e:	e02b      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2202      	movs	r2, #2
 8004d84:	701a      	strb	r2, [r3, #0]
      break;
 8004d86:	e027      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	701a      	strb	r2, [r3, #0]
      break;
 8004d8e:	e023      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2204      	movs	r2, #4
 8004d94:	701a      	strb	r2, [r3, #0]
      break;
 8004d96:	e01f      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	701a      	strb	r2, [r3, #0]
      break;
 8004d9e:	e01b      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2206      	movs	r2, #6
 8004da4:	701a      	strb	r2, [r3, #0]
      break;
 8004da6:	e017      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2207      	movs	r2, #7
 8004dac:	701a      	strb	r2, [r3, #0]
      break;
 8004dae:	e013      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2208      	movs	r2, #8
 8004db4:	701a      	strb	r2, [r3, #0]
      break;
 8004db6:	e00f      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2209      	movs	r2, #9
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e00b      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	220a      	movs	r2, #10
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e007      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	220b      	movs	r2, #11
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e003      	b.n	8004dd8 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	bf00      	nop
  }

  return ret;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop

08004de4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	2301      	movs	r3, #1
 8004df6:	2111      	movs	r1, #17
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fe03 	bl	8004a04 <lsm6dso_read_reg>
 8004dfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	7a3b      	ldrb	r3, [r7, #8]
 8004e10:	f362 0343 	bfi	r3, r2, #1, #3
 8004e14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004e16:	f107 0208 	add.w	r2, r7, #8
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	2111      	movs	r1, #17
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fe08 	bl	8004a34 <lsm6dso_write_reg>
 8004e24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004e3a:	f107 0208 	add.w	r2, r7, #8
 8004e3e:	2301      	movs	r3, #1
 8004e40:	2111      	movs	r1, #17
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fdde 	bl	8004a04 <lsm6dso_read_reg>
 8004e48:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004e4a:	7a3b      	ldrb	r3, [r7, #8]
 8004e4c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d824      	bhi.n	8004ea0 <lsm6dso_gy_full_scale_get+0x70>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <lsm6dso_gy_full_scale_get+0x2c>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e79 	.word	0x08004e79
 8004e60:	08004e81 	.word	0x08004e81
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004ea1 	.word	0x08004ea1
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004ea1 	.word	0x08004ea1
 8004e74:	08004e99 	.word	0x08004e99
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
      break;
 8004e7e:	e013      	b.n	8004ea8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
      break;
 8004e86:	e00f      	b.n	8004ea8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	701a      	strb	r2, [r3, #0]
      break;
 8004e8e:	e00b      	b.n	8004ea8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2204      	movs	r2, #4
 8004e94:	701a      	strb	r2, [r3, #0]
      break;
 8004e96:	e007      	b.n	8004ea8 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2206      	movs	r2, #6
 8004e9c:	701a      	strb	r2, [r3, #0]
      break;
 8004e9e:	e003      	b.n	8004ea8 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
      break;
 8004ea6:	bf00      	nop
  }

  return ret;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop

08004eb4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 facc 	bl	8005468 <lsm6dso_fsm_enable_get>
 8004ed0:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <lsm6dso_gy_data_rate_set+0x28>
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	e0e1      	b.n	80050a0 <lsm6dso_gy_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004edc:	7b3b      	ldrb	r3, [r7, #12]
 8004ede:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ee2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004ee4:	7b3b      	ldrb	r3, [r7, #12]
 8004ee6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004eea:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004eec:	4313      	orrs	r3, r2
 8004eee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004ef0:	7b3b      	ldrb	r3, [r7, #12]
 8004ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ef6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004efc:	7b3b      	ldrb	r3, [r7, #12]
 8004efe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f02:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004f04:	4313      	orrs	r3, r2
 8004f06:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004f08:	7b3b      	ldrb	r3, [r7, #12]
 8004f0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f0e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004f10:	4313      	orrs	r3, r2
 8004f12:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004f14:	7b3b      	ldrb	r3, [r7, #12]
 8004f16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004f1a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004f20:	7b3b      	ldrb	r3, [r7, #12]
 8004f22:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f26:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004f2c:	7b3b      	ldrb	r3, [r7, #12]
 8004f2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f32:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004f34:	4313      	orrs	r3, r2
 8004f36:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004f38:	7b7b      	ldrb	r3, [r7, #13]
 8004f3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f3e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004f40:	4313      	orrs	r3, r2
 8004f42:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004f44:	7b7b      	ldrb	r3, [r7, #13]
 8004f46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f4a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004f50:	7b7b      	ldrb	r3, [r7, #13]
 8004f52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f56:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004f5c:	7b7b      	ldrb	r3, [r7, #13]
 8004f5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f62:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004f68:	7b7b      	ldrb	r3, [r7, #13]
 8004f6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f6e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004f74:	7b7b      	ldrb	r3, [r7, #13]
 8004f76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004f7a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004f80:	7b7b      	ldrb	r3, [r7, #13]
 8004f82:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004f86:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004f8c:	7b7b      	ldrb	r3, [r7, #13]
 8004f8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004f92:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004f94:	4313      	orrs	r3, r2
 8004f96:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d164      	bne.n	8005066 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004f9c:	f107 030b 	add.w	r3, r7, #11
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa82 	bl	80054ac <lsm6dso_fsm_data_rate_get>
 8004fa8:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <lsm6dso_gy_data_rate_set+0x100>
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	e075      	b.n	80050a0 <lsm6dso_gy_data_rate_set+0x1ec>

    switch (fsm_odr)
 8004fb4:	7afb      	ldrb	r3, [r7, #11]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d852      	bhi.n	8005060 <lsm6dso_gy_data_rate_set+0x1ac>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <lsm6dso_gy_data_rate_set+0x10c>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fe3 	.word	0x08004fe3
 8004fc8:	08005001 	.word	0x08005001
 8004fcc:	0800502b 	.word	0x0800502b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004fda:	e045      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	75fb      	strb	r3, [r7, #23]
        break;
 8004fe0:	e042      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8004fec:	e03c      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
        break;
 8004ff8:	e036      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	75fb      	strb	r3, [r7, #23]
        break;
 8004ffe:	e033      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005006:	2303      	movs	r3, #3
 8005008:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800500a:	e02d      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d102      	bne.n	8005018 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8005012:	2303      	movs	r3, #3
 8005014:	75fb      	strb	r3, [r7, #23]
        break;
 8005016:	e027      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d102      	bne.n	8005024 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800501e:	2303      	movs	r3, #3
 8005020:	75fb      	strb	r3, [r7, #23]
        break;
 8005022:	e021      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	75fb      	strb	r3, [r7, #23]
        break;
 8005028:	e01e      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005030:	2304      	movs	r3, #4
 8005032:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8005034:	e018      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d102      	bne.n	8005042 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800503c:	2304      	movs	r3, #4
 800503e:	75fb      	strb	r3, [r7, #23]
        break;
 8005040:	e012      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d102      	bne.n	800504e <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005048:	2304      	movs	r3, #4
 800504a:	75fb      	strb	r3, [r7, #23]
        break;
 800504c:	e00c      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d102      	bne.n	800505a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005054:	2304      	movs	r3, #4
 8005056:	75fb      	strb	r3, [r7, #23]
        break;
 8005058:	e006      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	75fb      	strb	r3, [r7, #23]
        break;
 800505e:	e003      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>

      default:
        odr_gy = val;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	75fb      	strb	r3, [r7, #23]
        break;
 8005064:	e000      	b.n	8005068 <lsm6dso_gy_data_rate_set+0x1b4>
    }
  }
 8005066:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005068:	f107 0208 	add.w	r2, r7, #8
 800506c:	2301      	movs	r3, #1
 800506e:	2111      	movs	r1, #17
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fcc7 	bl	8004a04 <lsm6dso_read_reg>
 8005076:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	b2da      	uxtb	r2, r3
 8005080:	7a3b      	ldrb	r3, [r7, #8]
 8005082:	f362 1307 	bfi	r3, r2, #4, #4
 8005086:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005088:	f107 0208 	add.w	r2, r7, #8
 800508c:	2301      	movs	r3, #1
 800508e:	2111      	movs	r1, #17
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fccf 	bl	8004a34 <lsm6dso_write_reg>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  return ret;
 800509e:	693b      	ldr	r3, [r7, #16]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80050b2:	f107 0208 	add.w	r2, r7, #8
 80050b6:	2301      	movs	r3, #1
 80050b8:	2111      	movs	r1, #17
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff fca2 	bl	8004a04 <lsm6dso_read_reg>
 80050c0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80050c2:	7a3b      	ldrb	r3, [r7, #8]
 80050c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b0a      	cmp	r3, #10
 80050cc:	d844      	bhi.n	8005158 <lsm6dso_gy_data_rate_get+0xb0>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <lsm6dso_gy_data_rate_get+0x2c>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	08005101 	.word	0x08005101
 80050d8:	08005109 	.word	0x08005109
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005119 	.word	0x08005119
 80050e4:	08005121 	.word	0x08005121
 80050e8:	08005129 	.word	0x08005129
 80050ec:	08005131 	.word	0x08005131
 80050f0:	08005139 	.word	0x08005139
 80050f4:	08005141 	.word	0x08005141
 80050f8:	08005149 	.word	0x08005149
 80050fc:	08005151 	.word	0x08005151
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
      break;
 8005106:	e02b      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
      break;
 800510e:	e027      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2202      	movs	r2, #2
 8005114:	701a      	strb	r2, [r3, #0]
      break;
 8005116:	e023      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2203      	movs	r2, #3
 800511c:	701a      	strb	r2, [r3, #0]
      break;
 800511e:	e01f      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2204      	movs	r2, #4
 8005124:	701a      	strb	r2, [r3, #0]
      break;
 8005126:	e01b      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2205      	movs	r2, #5
 800512c:	701a      	strb	r2, [r3, #0]
      break;
 800512e:	e017      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2206      	movs	r2, #6
 8005134:	701a      	strb	r2, [r3, #0]
      break;
 8005136:	e013      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2207      	movs	r2, #7
 800513c:	701a      	strb	r2, [r3, #0]
      break;
 800513e:	e00f      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2208      	movs	r2, #8
 8005144:	701a      	strb	r2, [r3, #0]
      break;
 8005146:	e00b      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2209      	movs	r2, #9
 800514c:	701a      	strb	r2, [r3, #0]
      break;
 800514e:	e007      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	220a      	movs	r2, #10
 8005154:	701a      	strb	r2, [r3, #0]
      break;
 8005156:	e003      	b.n	8005160 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
      break;
 800515e:	bf00      	nop
  }

  return ret;
 8005160:	68fb      	ldr	r3, [r7, #12]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop

0800516c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005178:	f107 0208 	add.w	r2, r7, #8
 800517c:	2301      	movs	r3, #1
 800517e:	2112      	movs	r1, #18
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fc3f 	bl	8004a04 <lsm6dso_read_reg>
 8005186:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	b2da      	uxtb	r2, r3
 8005196:	7a3b      	ldrb	r3, [r7, #8]
 8005198:	f362 1386 	bfi	r3, r2, #6, #1
 800519c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800519e:	f107 0208 	add.w	r2, r7, #8
 80051a2:	2301      	movs	r3, #1
 80051a4:	2112      	movs	r1, #18
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fc44 	bl	8004a34 <lsm6dso_write_reg>
 80051ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80051c2:	f107 020c 	add.w	r2, r7, #12
 80051c6:	2306      	movs	r3, #6
 80051c8:	2122      	movs	r1, #34	; 0x22
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff fc1a 	bl	8004a04 <lsm6dso_read_reg>
 80051d0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80051d2:	7b7b      	ldrb	r3, [r7, #13]
 80051d4:	b21a      	sxth	r2, r3
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	7b3b      	ldrb	r3, [r7, #12]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	4413      	add	r3, r2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	b21a      	sxth	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80051f4:	7bfa      	ldrb	r2, [r7, #15]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	3302      	adds	r3, #2
 80051fa:	b212      	sxth	r2, r2
 80051fc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	3302      	adds	r3, #2
 8005202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005206:	b29b      	uxth	r3, r3
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	b29a      	uxth	r2, r3
 800520c:	7bbb      	ldrb	r3, [r7, #14]
 800520e:	b29b      	uxth	r3, r3
 8005210:	4413      	add	r3, r2
 8005212:	b29a      	uxth	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	3302      	adds	r3, #2
 8005218:	b212      	sxth	r2, r2
 800521a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800521c:	7c7a      	ldrb	r2, [r7, #17]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	3304      	adds	r3, #4
 8005222:	b212      	sxth	r2, r2
 8005224:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	3304      	adds	r3, #4
 800522a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800522e:	b29b      	uxth	r3, r3
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	b29a      	uxth	r2, r3
 8005234:	7c3b      	ldrb	r3, [r7, #16]
 8005236:	b29b      	uxth	r3, r3
 8005238:	4413      	add	r3, r2
 800523a:	b29a      	uxth	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	3304      	adds	r3, #4
 8005240:	b212      	sxth	r2, r2
 8005242:	801a      	strh	r2, [r3, #0]

  return ret;
 8005244:	697b      	ldr	r3, [r7, #20]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005258:	f107 020c 	add.w	r2, r7, #12
 800525c:	2306      	movs	r3, #6
 800525e:	2128      	movs	r1, #40	; 0x28
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff fbcf 	bl	8004a04 <lsm6dso_read_reg>
 8005266:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005268:	7b7b      	ldrb	r3, [r7, #13]
 800526a:	b21a      	sxth	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005276:	b29b      	uxth	r3, r3
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	b29a      	uxth	r2, r3
 800527c:	7b3b      	ldrb	r3, [r7, #12]
 800527e:	b29b      	uxth	r3, r3
 8005280:	4413      	add	r3, r2
 8005282:	b29b      	uxth	r3, r3
 8005284:	b21a      	sxth	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800528a:	7bfa      	ldrb	r2, [r7, #15]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	3302      	adds	r3, #2
 8005290:	b212      	sxth	r2, r2
 8005292:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	3302      	adds	r3, #2
 8005298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800529c:	b29b      	uxth	r3, r3
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	3302      	adds	r3, #2
 80052ae:	b212      	sxth	r2, r2
 80052b0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80052b2:	7c7a      	ldrb	r2, [r7, #17]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	3304      	adds	r3, #4
 80052b8:	b212      	sxth	r2, r2
 80052ba:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	3304      	adds	r3, #4
 80052c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	7c3b      	ldrb	r3, [r7, #16]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	3304      	adds	r3, #4
 80052d6:	b212      	sxth	r2, r2
 80052d8:	801a      	strh	r2, [r3, #0]

  return ret;
 80052da:	697b      	ldr	r3, [r7, #20]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 80052f0:	2300      	movs	r3, #0
 80052f2:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	7a3b      	ldrb	r3, [r7, #8]
 80052fe:	f362 1387 	bfi	r3, r2, #6, #2
 8005302:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005304:	f107 0208 	add.w	r2, r7, #8
 8005308:	2301      	movs	r3, #1
 800530a:	2101      	movs	r1, #1
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fb91 	bl	8004a34 <lsm6dso_write_reg>
 8005312:	60f8      	str	r0, [r7, #12]

  return ret;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005328:	2301      	movs	r3, #1
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	210f      	movs	r1, #15
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fb68 	bl	8004a04 <lsm6dso_read_reg>
 8005334:	60f8      	str	r0, [r7, #12]

  return ret;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800534c:	f107 0208 	add.w	r2, r7, #8
 8005350:	2301      	movs	r3, #1
 8005352:	2112      	movs	r1, #18
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fb55 	bl	8004a04 <lsm6dso_read_reg>
 800535a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	b2da      	uxtb	r2, r3
 800536a:	7a3b      	ldrb	r3, [r7, #8]
 800536c:	f362 0382 	bfi	r3, r2, #2, #1
 8005370:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	2301      	movs	r3, #1
 8005378:	2112      	movs	r1, #18
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fb5a 	bl	8004a34 <lsm6dso_write_reg>
 8005380:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005398:	f107 020c 	add.w	r2, r7, #12
 800539c:	2301      	movs	r3, #1
 800539e:	2118      	movs	r1, #24
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff fb2f 	bl	8004a04 <lsm6dso_read_reg>
 80053a6:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	09db      	lsrs	r3, r3, #7
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	7b3b      	ldrb	r3, [r7, #12]
 80053b6:	f362 0341 	bfi	r3, r2, #1, #1
 80053ba:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80053bc:	f107 020c 	add.w	r2, r7, #12
 80053c0:	2301      	movs	r3, #1
 80053c2:	2118      	movs	r1, #24
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff fb35 	bl	8004a34 <lsm6dso_write_reg>
 80053ca:	4602      	mov	r2, r0
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4413      	add	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <lsm6dso_i3c_disable_set+0x50>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	e01b      	b.n	8005414 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80053dc:	f107 0210 	add.w	r2, r7, #16
 80053e0:	2301      	movs	r3, #1
 80053e2:	2162      	movs	r1, #98	; 0x62
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fb0d 	bl	8004a04 <lsm6dso_read_reg>
 80053ea:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	7c3b      	ldrb	r3, [r7, #16]
 80053f6:	f362 03c4 	bfi	r3, r2, #3, #2
 80053fa:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80053fc:	f107 0210 	add.w	r2, r7, #16
 8005400:	2301      	movs	r3, #1
 8005402:	2162      	movs	r1, #98	; 0x62
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fb15 	bl	8004a34 <lsm6dso_write_reg>
 800540a:	4602      	mov	r2, r0
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  return ret;
 8005412:	697b      	ldr	r3, [r7, #20]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005428:	f107 0208 	add.w	r2, r7, #8
 800542c:	2301      	movs	r3, #1
 800542e:	210a      	movs	r1, #10
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fae7 	bl	8004a04 <lsm6dso_read_reg>
 8005436:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	b2da      	uxtb	r2, r3
 8005446:	7a3b      	ldrb	r3, [r7, #8]
 8005448:	f362 0302 	bfi	r3, r2, #0, #3
 800544c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800544e:	f107 0208 	add.w	r2, r7, #8
 8005452:	2301      	movs	r3, #1
 8005454:	210a      	movs	r1, #10
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff faec 	bl	8004a34 <lsm6dso_write_reg>
 800545c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800545e:	68fb      	ldr	r3, [r7, #12]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005472:	2102      	movs	r1, #2
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff35 	bl	80052e4 <lsm6dso_mem_bank_set>
 800547a:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800547c:	2302      	movs	r3, #2
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	2146      	movs	r1, #70	; 0x46
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fabe 	bl	8004a04 <lsm6dso_read_reg>
 8005488:	4602      	mov	r2, r0
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005490:	2100      	movs	r1, #0
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ff26 	bl	80052e4 <lsm6dso_mem_bank_set>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  return ret;
 80054a0:	68fb      	ldr	r3, [r7, #12]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80054b6:	2102      	movs	r1, #2
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ff13 	bl	80052e4 <lsm6dso_mem_bank_set>
 80054be:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <lsm6dso_fsm_data_rate_get+0x1e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	e03a      	b.n	8005540 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 80054ca:	f107 0208 	add.w	r2, r7, #8
 80054ce:	2301      	movs	r3, #1
 80054d0:	215f      	movs	r1, #95	; 0x5f
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fa96 	bl	8004a04 <lsm6dso_read_reg>
 80054d8:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d125      	bne.n	800552c <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 80054e0:	7a3b      	ldrb	r3, [r7, #8]
 80054e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d81b      	bhi.n	8005524 <lsm6dso_fsm_data_rate_get+0x78>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <lsm6dso_fsm_data_rate_get+0x48>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005505 	.word	0x08005505
 80054f8:	0800550d 	.word	0x0800550d
 80054fc:	08005515 	.word	0x08005515
 8005500:	0800551d 	.word	0x0800551d
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
      break;
 800550a:	e010      	b.n	800552e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
      break;
 8005512:	e00c      	b.n	800552e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2202      	movs	r2, #2
 8005518:	701a      	strb	r2, [r3, #0]
      break;
 800551a:	e008      	b.n	800552e <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2203      	movs	r2, #3
 8005520:	701a      	strb	r2, [r3, #0]
      break;
 8005522:	e004      	b.n	800552e <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
      break;
 800552a:	e000      	b.n	800552e <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 800552c:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800552e:	2100      	movs	r1, #0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fed7 	bl	80052e4 <lsm6dso_mem_bank_set>
 8005536:	4602      	mov	r2, r0
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  return ret;
 800553e:	68fb      	ldr	r3, [r7, #12]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005556:	2301      	movs	r3, #1
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d06e      	beq.n	8005642 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	f200 809d 	bhi.w	80056a6 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <IKS01A3_MOTION_SENSOR_Init+0x32>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d032      	beq.n	80055de <IKS01A3_MOTION_SENSOR_Init+0x96>
 8005578:	e095      	b.n	80056a6 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800557a:	6838      	ldr	r0, [r7, #0]
 800557c:	f000 f966 	bl	800584c <LSM6DSO_0_Probe>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	e0cc      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800558c:	4a68      	ldr	r2, [pc, #416]	; (8005730 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4967      	ldr	r1, [pc, #412]	; (8005734 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800559e:	f107 010c 	add.w	r1, r7, #12
 80055a2:	4610      	mov	r0, r2
 80055a4:	4798      	blx	r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80055ac:	f06f 0306 	mvn.w	r3, #6
 80055b0:	e0b9      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80055b2:	7b3b      	ldrb	r3, [r7, #12]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d103      	bne.n	80055c0 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f043 0302 	orr.w	r3, r3, #2
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80055c0:	7b7b      	ldrb	r3, [r7, #13]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d103      	bne.n	80055ce <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d16c      	bne.n	80056ae <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	f043 0304 	orr.w	r3, r3, #4
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80055dc:	e067      	b.n	80056ae <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80055de:	6838      	ldr	r0, [r7, #0]
 80055e0:	f000 f9f4 	bl	80059cc <LIS2DW12_0_Probe>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295
 80055ee:	e09a      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80055f0:	4a4f      	ldr	r2, [pc, #316]	; (8005730 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	494e      	ldr	r1, [pc, #312]	; (8005734 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005602:	f107 010c 	add.w	r1, r7, #12
 8005606:	4610      	mov	r0, r2
 8005608:	4798      	blx	r3
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005610:	f06f 0306 	mvn.w	r3, #6
 8005614:	e087      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005616:	7b3b      	ldrb	r3, [r7, #12]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d103      	bne.n	8005624 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f043 0302 	orr.w	r3, r3, #2
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005624:	7b7b      	ldrb	r3, [r7, #13]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d103      	bne.n	8005632 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005632:	7bbb      	ldrb	r3, [r7, #14]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d13c      	bne.n	80056b2 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	f043 0304 	orr.w	r3, r3, #4
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005640:	e037      	b.n	80056b2 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005642:	6838      	ldr	r0, [r7, #0]
 8005644:	f000 fa6a 	bl	8005b1c <LIS2MDL_0_Probe>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
 8005652:	e068      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005654:	4a36      	ldr	r2, [pc, #216]	; (8005730 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	4935      	ldr	r1, [pc, #212]	; (8005734 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005666:	f107 010c 	add.w	r1, r7, #12
 800566a:	4610      	mov	r0, r2
 800566c:	4798      	blx	r3
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005674:	f06f 0306 	mvn.w	r3, #6
 8005678:	e055      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800567a:	7b3b      	ldrb	r3, [r7, #12]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d103      	bne.n	8005688 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	f043 0302 	orr.w	r3, r3, #2
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005688:	7b7b      	ldrb	r3, [r7, #13]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d103      	bne.n	8005696 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d10c      	bne.n	80056b6 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80056a4:	e007      	b.n	80056b6 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80056a6:	f06f 0301 	mvn.w	r3, #1
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80056ac:	e004      	b.n	80056b8 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80056ae:	bf00      	nop
 80056b0:	e002      	b.n	80056b8 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80056b6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	e031      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80056c2:	2300      	movs	r3, #0
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c6:	e02a      	b.n	800571e <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	4013      	ands	r3, r2
 80056ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d11e      	bne.n	8005712 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80056d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	4013      	ands	r3, r2
 80056da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056dc:	429a      	cmp	r2, r3
 80056de:	d118      	bne.n	8005712 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80056e0:	4a15      	ldr	r2, [pc, #84]	; (8005738 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056e8:	4814      	ldr	r0, [pc, #80]	; (800573c <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4413      	add	r3, r2
 80056f2:	440b      	add	r3, r1
 80056f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	490e      	ldr	r1, [pc, #56]	; (8005734 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005702:	4610      	mov	r0, r2
 8005704:	4798      	blx	r3
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800570c:	f06f 0304 	mvn.w	r3, #4
 8005710:	e009      	b.n	8005726 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	3301      	adds	r3, #1
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b02      	cmp	r3, #2
 8005722:	d9d1      	bls.n	80056c8 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005726:	4618      	mov	r0, r3
 8005728:	3738      	adds	r7, #56	; 0x38
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000190 	.word	0x20000190
 8005734:	200003cc 	.word	0x200003cc
 8005738:	200000c4 	.word	0x200000c4
 800573c:	2000016c 	.word	0x2000016c

08005740 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d903      	bls.n	8005758 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005750:	f06f 0301 	mvn.w	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e028      	b.n	80057aa <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4013      	ands	r3, r2
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d11c      	bne.n	80057a4 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800576a:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005772:	4812      	ldr	r0, [pc, #72]	; (80057bc <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	440b      	add	r3, r1
 800577e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	490e      	ldr	r1, [pc, #56]	; (80057c0 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800578c:	4610      	mov	r0, r2
 800578e:	4798      	blx	r3
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005796:	f06f 0304 	mvn.w	r3, #4
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e005      	b.n	80057aa <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e002      	b.n	80057aa <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80057a4:	f06f 0301 	mvn.w	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80057aa:	68fb      	ldr	r3, [r7, #12]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	2000019c 	.word	0x2000019c
 80057b8:	200000c4 	.word	0x200000c4
 80057bc:	2000016c 	.word	0x2000016c
 80057c0:	200003cc 	.word	0x200003cc

080057c4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d903      	bls.n	80057de <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80057d6:	f06f 0301 	mvn.w	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e029      	b.n	8005832 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80057de:	4a17      	ldr	r2, [pc, #92]	; (800583c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d11d      	bne.n	800582c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80057f0:	4a13      	ldr	r2, [pc, #76]	; (8005840 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057f8:	4812      	ldr	r0, [pc, #72]	; (8005844 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4613      	mov	r3, r2
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	440b      	add	r3, r1
 8005804:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	490f      	ldr	r1, [pc, #60]	; (8005848 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800581e:	f06f 0304 	mvn.w	r3, #4
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e005      	b.n	8005832 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e002      	b.n	8005832 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800582c:	f06f 0301 	mvn.w	r3, #1
 8005830:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005832:	697b      	ldr	r3, [r7, #20]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	2000019c 	.word	0x2000019c
 8005840:	200000c4 	.word	0x200000c4
 8005844:	2000016c 	.word	0x2000016c
 8005848:	200003cc 	.word	0x200003cc

0800584c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b094      	sub	sp, #80	; 0x50
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005854:	2300      	movs	r3, #0
 8005856:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8005858:	2300      	movs	r3, #0
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800585c:	23d7      	movs	r3, #215	; 0xd7
 800585e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005862:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <LSM6DSO_0_Probe+0x144>)
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005866:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <LSM6DSO_0_Probe+0x148>)
 8005868:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800586a:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <LSM6DSO_0_Probe+0x14c>)
 800586c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800586e:	4b4b      	ldr	r3, [pc, #300]	; (800599c <LSM6DSO_0_Probe+0x150>)
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005872:	4b4b      	ldr	r3, [pc, #300]	; (80059a0 <LSM6DSO_0_Probe+0x154>)
 8005874:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005876:	4b4b      	ldr	r3, [pc, #300]	; (80059a4 <LSM6DSO_0_Probe+0x158>)
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800587a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800587e:	4619      	mov	r1, r3
 8005880:	4849      	ldr	r0, [pc, #292]	; (80059a8 <LSM6DSO_0_Probe+0x15c>)
 8005882:	f7fd fe81 	bl	8003588 <LSM6DSO_RegisterBusIO>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800588c:	f06f 0306 	mvn.w	r3, #6
 8005890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005892:	e077      	b.n	8005984 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8005894:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005898:	4619      	mov	r1, r3
 800589a:	4843      	ldr	r0, [pc, #268]	; (80059a8 <LSM6DSO_0_Probe+0x15c>)
 800589c:	f7fd ff7e 	bl	800379c <LSM6DSO_ReadID>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80058a6:	f06f 0306 	mvn.w	r3, #6
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ac:	e06a      	b.n	8005984 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80058ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058b2:	2b6c      	cmp	r3, #108	; 0x6c
 80058b4:	d003      	beq.n	80058be <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80058b6:	f06f 0306 	mvn.w	r3, #6
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058bc:	e062      	b.n	8005984 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	4619      	mov	r1, r3
 80058c4:	4838      	ldr	r0, [pc, #224]	; (80059a8 <LSM6DSO_0_Probe+0x15c>)
 80058c6:	f7fd ff7f 	bl	80037c8 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80058ca:	7b7b      	ldrb	r3, [r7, #13]
 80058cc:	461a      	mov	r2, r3
 80058ce:	7b3b      	ldrb	r3, [r7, #12]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	431a      	orrs	r2, r3
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4313      	orrs	r3, r2
 80058da:	4a34      	ldr	r2, [pc, #208]	; (80059ac <LSM6DSO_0_Probe+0x160>)
 80058dc:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <LSM6DSO_0_Probe+0x164>)
 80058e0:	4a31      	ldr	r2, [pc, #196]	; (80059a8 <LSM6DSO_0_Probe+0x15c>)
 80058e2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80058e4:	4b33      	ldr	r3, [pc, #204]	; (80059b4 <LSM6DSO_0_Probe+0x168>)
 80058e6:	4a34      	ldr	r2, [pc, #208]	; (80059b8 <LSM6DSO_0_Probe+0x16c>)
 80058e8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80058ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11d      	bne.n	800592c <LSM6DSO_0_Probe+0xe0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d018      	beq.n	800592c <LSM6DSO_0_Probe+0xe0>
 80058fa:	7b7b      	ldrb	r3, [r7, #13]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d115      	bne.n	800592c <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8005900:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <LSM6DSO_0_Probe+0x170>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a2e      	ldr	r2, [pc, #184]	; (80059c0 <LSM6DSO_0_Probe+0x174>)
 8005906:	492f      	ldr	r1, [pc, #188]	; (80059c4 <LSM6DSO_0_Probe+0x178>)
 8005908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800590c:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <LSM6DSO_0_Probe+0x168>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <LSM6DSO_0_Probe+0x164>)
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	4610      	mov	r0, r2
 8005918:	4798      	blx	r3
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005920:	f06f 0304 	mvn.w	r3, #4
 8005924:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005926:	e001      	b.n	800592c <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005928:	2300      	movs	r3, #0
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11d      	bne.n	800596e <LSM6DSO_0_Probe+0x122>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d018      	beq.n	800596e <LSM6DSO_0_Probe+0x122>
 800593c:	7b3b      	ldrb	r3, [r7, #12]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d115      	bne.n	800596e <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <LSM6DSO_0_Probe+0x170>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <LSM6DSO_0_Probe+0x174>)
 8005948:	491f      	ldr	r1, [pc, #124]	; (80059c8 <LSM6DSO_0_Probe+0x17c>)
 800594a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <LSM6DSO_0_Probe+0x168>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <LSM6DSO_0_Probe+0x164>)
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005962:	f06f 0304 	mvn.w	r3, #4
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	e001      	b.n	800596e <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800596a:	2300      	movs	r3, #0
 800596c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800596e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d107      	bne.n	8005984 <LSM6DSO_0_Probe+0x138>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800597e:	f06f 0304 	mvn.w	r3, #4
 8005982:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005986:	4618      	mov	r0, r3
 8005988:	3750      	adds	r7, #80	; 0x50
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	08000b31 	.word	0x08000b31
 8005994:	08000b95 	.word	0x08000b95
 8005998:	08000c49 	.word	0x08000c49
 800599c:	08000be5 	.word	0x08000be5
 80059a0:	08000cad 	.word	0x08000cad
 80059a4:	08005d51 	.word	0x08005d51
 80059a8:	200001a8 	.word	0x200001a8
 80059ac:	2000019c 	.word	0x2000019c
 80059b0:	200003cc 	.word	0x200003cc
 80059b4:	20000190 	.word	0x20000190
 80059b8:	2000006c 	.word	0x2000006c
 80059bc:	200000c4 	.word	0x200000c4
 80059c0:	2000016c 	.word	0x2000016c
 80059c4:	200000a0 	.word	0x200000a0
 80059c8:	2000007c 	.word	0x2000007c

080059cc <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b094      	sub	sp, #80	; 0x50
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80059d8:	2300      	movs	r3, #0
 80059da:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80059dc:	2333      	movs	r3, #51	; 0x33
 80059de:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80059e2:	4b40      	ldr	r3, [pc, #256]	; (8005ae4 <LIS2DW12_0_Probe+0x118>)
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80059e6:	4b40      	ldr	r3, [pc, #256]	; (8005ae8 <LIS2DW12_0_Probe+0x11c>)
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80059ea:	4b40      	ldr	r3, [pc, #256]	; (8005aec <LIS2DW12_0_Probe+0x120>)
 80059ec:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80059ee:	4b40      	ldr	r3, [pc, #256]	; (8005af0 <LIS2DW12_0_Probe+0x124>)
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80059f2:	4b40      	ldr	r3, [pc, #256]	; (8005af4 <LIS2DW12_0_Probe+0x128>)
 80059f4:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80059f6:	4b40      	ldr	r3, [pc, #256]	; (8005af8 <LIS2DW12_0_Probe+0x12c>)
 80059f8:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80059fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059fe:	4619      	mov	r1, r3
 8005a00:	483e      	ldr	r0, [pc, #248]	; (8005afc <LIS2DW12_0_Probe+0x130>)
 8005a02:	f7fb fa67 	bl	8000ed4 <LIS2DW12_RegisterBusIO>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a0c:	f06f 0306 	mvn.w	r3, #6
 8005a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a12:	e062      	b.n	8005ada <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005a14:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4838      	ldr	r0, [pc, #224]	; (8005afc <LIS2DW12_0_Probe+0x130>)
 8005a1c:	f7fb fb48 	bl	80010b0 <LIS2DW12_ReadID>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a26:	f06f 0306 	mvn.w	r3, #6
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2c:	e055      	b.n	8005ada <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8005a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a32:	2b44      	cmp	r3, #68	; 0x44
 8005a34:	d003      	beq.n	8005a3e <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a36:	f06f 0306 	mvn.w	r3, #6
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a3c:	e04d      	b.n	8005ada <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	4619      	mov	r1, r3
 8005a44:	482d      	ldr	r0, [pc, #180]	; (8005afc <LIS2DW12_0_Probe+0x130>)
 8005a46:	f7fb fb49 	bl	80010dc <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005a4a:	7b7b      	ldrb	r3, [r7, #13]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	7b3b      	ldrb	r3, [r7, #12]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	431a      	orrs	r2, r3
 8005a54:	7bbb      	ldrb	r3, [r7, #14]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <LIS2DW12_0_Probe+0x134>)
 8005a5c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8005a5e:	4b29      	ldr	r3, [pc, #164]	; (8005b04 <LIS2DW12_0_Probe+0x138>)
 8005a60:	4a26      	ldr	r2, [pc, #152]	; (8005afc <LIS2DW12_0_Probe+0x130>)
 8005a62:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <LIS2DW12_0_Probe+0x13c>)
 8005a66:	4a29      	ldr	r2, [pc, #164]	; (8005b0c <LIS2DW12_0_Probe+0x140>)
 8005a68:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11e      	bne.n	8005aae <LIS2DW12_0_Probe+0xe2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d019      	beq.n	8005aae <LIS2DW12_0_Probe+0xe2>
 8005a7a:	7b3b      	ldrb	r3, [r7, #12]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d116      	bne.n	8005aae <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <LIS2DW12_0_Probe+0x144>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <LIS2DW12_0_Probe+0x148>)
 8005a86:	3303      	adds	r3, #3
 8005a88:	4923      	ldr	r1, [pc, #140]	; (8005b18 <LIS2DW12_0_Probe+0x14c>)
 8005a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8005a8e:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <LIS2DW12_0_Probe+0x13c>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <LIS2DW12_0_Probe+0x138>)
 8005a96:	6852      	ldr	r2, [r2, #4]
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4798      	blx	r3
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005aa2:	f06f 0304 	mvn.w	r3, #4
 8005aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa8:	e001      	b.n	8005aae <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d107      	bne.n	8005ac4 <LIS2DW12_0_Probe+0xf8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005abe:	f06f 0304 	mvn.w	r3, #4
 8005ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <LIS2DW12_0_Probe+0x10e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ad4:	f06f 0304 	mvn.w	r3, #4
 8005ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3750      	adds	r7, #80	; 0x50
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	08000b31 	.word	0x08000b31
 8005ae8:	08000b95 	.word	0x08000b95
 8005aec:	08000c49 	.word	0x08000c49
 8005af0:	08000be5 	.word	0x08000be5
 8005af4:	08000cad 	.word	0x08000cad
 8005af8:	08005d51 	.word	0x08005d51
 8005afc:	200001e0 	.word	0x200001e0
 8005b00:	2000019c 	.word	0x2000019c
 8005b04:	200003cc 	.word	0x200003cc
 8005b08:	20000190 	.word	0x20000190
 8005b0c:	20000004 	.word	0x20000004
 8005b10:	200000c4 	.word	0x200000c4
 8005b14:	2000016c 	.word	0x2000016c
 8005b18:	20000014 	.word	0x20000014

08005b1c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b094      	sub	sp, #80	; 0x50
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005b28:	2300      	movs	r3, #0
 8005b2a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005b2c:	233d      	movs	r3, #61	; 0x3d
 8005b2e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005b32:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <LIS2MDL_0_Probe+0x118>)
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005b36:	4b40      	ldr	r3, [pc, #256]	; (8005c38 <LIS2MDL_0_Probe+0x11c>)
 8005b38:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005b3a:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <LIS2MDL_0_Probe+0x120>)
 8005b3c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005b3e:	4b40      	ldr	r3, [pc, #256]	; (8005c40 <LIS2MDL_0_Probe+0x124>)
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005b42:	4b40      	ldr	r3, [pc, #256]	; (8005c44 <LIS2MDL_0_Probe+0x128>)
 8005b44:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8005b46:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <LIS2MDL_0_Probe+0x12c>)
 8005b48:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8005b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b4e:	4619      	mov	r1, r3
 8005b50:	483e      	ldr	r0, [pc, #248]	; (8005c4c <LIS2MDL_0_Probe+0x130>)
 8005b52:	f7fc fd13 	bl	800257c <LIS2MDL_RegisterBusIO>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b5c:	f06f 0306 	mvn.w	r3, #6
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b62:	e062      	b.n	8005c2a <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005b64:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4838      	ldr	r0, [pc, #224]	; (8005c4c <LIS2MDL_0_Probe+0x130>)
 8005b6c:	f7fc fe22 	bl	80027b4 <LIS2MDL_ReadID>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b76:	f06f 0306 	mvn.w	r3, #6
 8005b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7c:	e055      	b.n	8005c2a <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8005b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d003      	beq.n	8005b8e <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b86:	f06f 0306 	mvn.w	r3, #6
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	e04d      	b.n	8005c2a <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	4619      	mov	r1, r3
 8005b94:	482d      	ldr	r0, [pc, #180]	; (8005c4c <LIS2MDL_0_Probe+0x130>)
 8005b96:	f7fc fe33 	bl	8002800 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b9a:	7b7b      	ldrb	r3, [r7, #13]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	7b3b      	ldrb	r3, [r7, #12]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	4a29      	ldr	r2, [pc, #164]	; (8005c50 <LIS2MDL_0_Probe+0x134>)
 8005bac:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8005bae:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <LIS2MDL_0_Probe+0x138>)
 8005bb0:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <LIS2MDL_0_Probe+0x130>)
 8005bb2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8005bb4:	4b28      	ldr	r3, [pc, #160]	; (8005c58 <LIS2MDL_0_Probe+0x13c>)
 8005bb6:	4a29      	ldr	r2, [pc, #164]	; (8005c5c <LIS2MDL_0_Probe+0x140>)
 8005bb8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11e      	bne.n	8005bfe <LIS2MDL_0_Probe+0xe2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d019      	beq.n	8005bfe <LIS2MDL_0_Probe+0xe2>
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d116      	bne.n	8005bfe <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005bd0:	4b23      	ldr	r3, [pc, #140]	; (8005c60 <LIS2MDL_0_Probe+0x144>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <LIS2MDL_0_Probe+0x148>)
 8005bd6:	3306      	adds	r3, #6
 8005bd8:	4923      	ldr	r1, [pc, #140]	; (8005c68 <LIS2MDL_0_Probe+0x14c>)
 8005bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005bde:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <LIS2MDL_0_Probe+0x13c>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <LIS2MDL_0_Probe+0x138>)
 8005be6:	6892      	ldr	r2, [r2, #8]
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bf2:	f06f 0304 	mvn.w	r3, #4
 8005bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf8:	e001      	b.n	8005bfe <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d107      	bne.n	8005c14 <LIS2MDL_0_Probe+0xf8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c0e:	f06f 0304 	mvn.w	r3, #4
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d107      	bne.n	8005c2a <LIS2MDL_0_Probe+0x10e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c24:	f06f 0304 	mvn.w	r3, #4
 8005c28:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3750      	adds	r7, #80	; 0x50
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	08000b31 	.word	0x08000b31
 8005c38:	08000b95 	.word	0x08000b95
 8005c3c:	08000c49 	.word	0x08000c49
 8005c40:	08000be5 	.word	0x08000be5
 8005c44:	08000cad 	.word	0x08000cad
 8005c48:	08005d51 	.word	0x08005d51
 8005c4c:	2000021c 	.word	0x2000021c
 8005c50:	2000019c 	.word	0x2000019c
 8005c54:	200003cc 	.word	0x200003cc
 8005c58:	20000190 	.word	0x20000190
 8005c5c:	20000038 	.word	0x20000038
 8005c60:	200000c4 	.word	0x200000c4
 8005c64:	2000016c 	.word	0x2000016c
 8005c68:	20000048 	.word	0x20000048

08005c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <HAL_Init+0x40>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <HAL_Init+0x40>)
 8005c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <HAL_Init+0x40>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <HAL_Init+0x40>)
 8005c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <HAL_Init+0x40>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a07      	ldr	r2, [pc, #28]	; (8005cac <HAL_Init+0x40>)
 8005c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c94:	2003      	movs	r0, #3
 8005c96:	f000 f94f 	bl	8005f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f000 f808 	bl	8005cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ca0:	f7fa fe68 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40023c00 	.word	0x40023c00

08005cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cb8:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <HAL_InitTick+0x54>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <HAL_InitTick+0x58>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f967 	bl	8005fa2 <HAL_SYSTICK_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e00e      	b.n	8005cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b0f      	cmp	r3, #15
 8005ce2:	d80a      	bhi.n	8005cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	f000 f92f 	bl	8005f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cf0:	4a06      	ldr	r2, [pc, #24]	; (8005d0c <HAL_InitTick+0x5c>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000000 	.word	0x20000000
 8005d08:	200000dc 	.word	0x200000dc
 8005d0c:	200000d8 	.word	0x200000d8

08005d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_IncTick+0x20>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <HAL_IncTick+0x24>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4413      	add	r3, r2
 8005d20:	4a04      	ldr	r2, [pc, #16]	; (8005d34 <HAL_IncTick+0x24>)
 8005d22:	6013      	str	r3, [r2, #0]
}
 8005d24:	bf00      	nop
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	200000dc 	.word	0x200000dc
 8005d34:	200003d8 	.word	0x200003d8

08005d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d3c:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <HAL_GetTick+0x14>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	200003d8 	.word	0x200003d8

08005d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d58:	f7ff ffee 	bl	8005d38 <HAL_GetTick>
 8005d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d005      	beq.n	8005d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <HAL_Delay+0x44>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d76:	bf00      	nop
 8005d78:	f7ff ffde 	bl	8005d38 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d8f7      	bhi.n	8005d78 <HAL_Delay+0x28>
  {
  }
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	200000dc 	.word	0x200000dc

08005d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <__NVIC_SetPriorityGrouping+0x44>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005db4:	4013      	ands	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dca:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <__NVIC_SetPriorityGrouping+0x44>)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	60d3      	str	r3, [r2, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	e000ed00 	.word	0xe000ed00

08005de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <__NVIC_GetPriorityGrouping+0x18>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 0307 	and.w	r3, r3, #7
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	e000ed00 	.word	0xe000ed00

08005dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	db0b      	blt.n	8005e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	f003 021f 	and.w	r2, r3, #31
 8005e14:	4907      	ldr	r1, [pc, #28]	; (8005e34 <__NVIC_EnableIRQ+0x38>)
 8005e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	e000e100 	.word	0xe000e100

08005e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db0a      	blt.n	8005e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	490c      	ldr	r1, [pc, #48]	; (8005e84 <__NVIC_SetPriority+0x4c>)
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e60:	e00a      	b.n	8005e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4908      	ldr	r1, [pc, #32]	; (8005e88 <__NVIC_SetPriority+0x50>)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	0112      	lsls	r2, r2, #4
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	440b      	add	r3, r1
 8005e76:	761a      	strb	r2, [r3, #24]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	e000e100 	.word	0xe000e100
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	bf28      	it	cs
 8005eaa:	2304      	movcs	r3, #4
 8005eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d902      	bls.n	8005ebc <NVIC_EncodePriority+0x30>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3b03      	subs	r3, #3
 8005eba:	e000      	b.n	8005ebe <NVIC_EncodePriority+0x32>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	401a      	ands	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43d9      	mvns	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee4:	4313      	orrs	r3, r2
         );
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f04:	d301      	bcc.n	8005f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f06:	2301      	movs	r3, #1
 8005f08:	e00f      	b.n	8005f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <SysTick_Config+0x40>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f12:	210f      	movs	r1, #15
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295
 8005f18:	f7ff ff8e 	bl	8005e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <SysTick_Config+0x40>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f22:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <SysTick_Config+0x40>)
 8005f24:	2207      	movs	r2, #7
 8005f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	e000e010 	.word	0xe000e010

08005f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff29 	bl	8005d98 <__NVIC_SetPriorityGrouping>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f60:	f7ff ff3e 	bl	8005de0 <__NVIC_GetPriorityGrouping>
 8005f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7ff ff8e 	bl	8005e8c <NVIC_EncodePriority>
 8005f70:	4602      	mov	r2, r0
 8005f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff5d 	bl	8005e38 <__NVIC_SetPriority>
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ff31 	bl	8005dfc <__NVIC_EnableIRQ>
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ffa2 	bl	8005ef4 <SysTick_Config>
 8005fb0:	4603      	mov	r3, r0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005fc8:	f7ff feb6 	bl	8005d38 <HAL_GetTick>
 8005fcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d008      	beq.n	8005fec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e052      	b.n	8006092 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0216 	bic.w	r2, r2, #22
 8005ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800600a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d103      	bne.n	800601c <HAL_DMA_Abort+0x62>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0208 	bic.w	r2, r2, #8
 800602a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800603c:	e013      	b.n	8006066 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800603e:	f7ff fe7b 	bl	8005d38 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b05      	cmp	r3, #5
 800604a:	d90c      	bls.n	8006066 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2203      	movs	r2, #3
 8006056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e015      	b.n	8006092 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e4      	bne.n	800603e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006078:	223f      	movs	r2, #63	; 0x3f
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d004      	beq.n	80060b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2280      	movs	r2, #128	; 0x80
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e00c      	b.n	80060d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2205      	movs	r2, #5
 80060bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b089      	sub	sp, #36	; 0x24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	e159      	b.n	80063b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060fc:	2201      	movs	r2, #1
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4013      	ands	r3, r2
 800610e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	429a      	cmp	r2, r3
 8006116:	f040 8148 	bne.w	80063aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d005      	beq.n	8006132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800612e:	2b02      	cmp	r3, #2
 8006130:	d130      	bne.n	8006194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	2203      	movs	r2, #3
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43db      	mvns	r3, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4013      	ands	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006168:	2201      	movs	r2, #1
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	43db      	mvns	r3, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	091b      	lsrs	r3, r3, #4
 800617e:	f003 0201 	and.w	r2, r3, #1
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4313      	orrs	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	2b03      	cmp	r3, #3
 800619e:	d017      	beq.n	80061d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	2203      	movs	r2, #3
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d123      	bne.n	8006224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	08da      	lsrs	r2, r3, #3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3208      	adds	r2, #8
 80061e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	220f      	movs	r2, #15
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	43db      	mvns	r3, r3
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4013      	ands	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	08da      	lsrs	r2, r3, #3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3208      	adds	r2, #8
 800621e:	69b9      	ldr	r1, [r7, #24]
 8006220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	2203      	movs	r2, #3
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	43db      	mvns	r3, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4013      	ands	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f003 0203 	and.w	r2, r3, #3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	4313      	orrs	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 80a2 	beq.w	80063aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	4b57      	ldr	r3, [pc, #348]	; (80063c8 <HAL_GPIO_Init+0x2e8>)
 800626c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626e:	4a56      	ldr	r2, [pc, #344]	; (80063c8 <HAL_GPIO_Init+0x2e8>)
 8006270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006274:	6453      	str	r3, [r2, #68]	; 0x44
 8006276:	4b54      	ldr	r3, [pc, #336]	; (80063c8 <HAL_GPIO_Init+0x2e8>)
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006282:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_GPIO_Init+0x2ec>)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	3302      	adds	r3, #2
 800628a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	220f      	movs	r2, #15
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4013      	ands	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a49      	ldr	r2, [pc, #292]	; (80063d0 <HAL_GPIO_Init+0x2f0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d019      	beq.n	80062e2 <HAL_GPIO_Init+0x202>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a48      	ldr	r2, [pc, #288]	; (80063d4 <HAL_GPIO_Init+0x2f4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_GPIO_Init+0x1fe>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a47      	ldr	r2, [pc, #284]	; (80063d8 <HAL_GPIO_Init+0x2f8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00d      	beq.n	80062da <HAL_GPIO_Init+0x1fa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a46      	ldr	r2, [pc, #280]	; (80063dc <HAL_GPIO_Init+0x2fc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <HAL_GPIO_Init+0x1f6>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a45      	ldr	r2, [pc, #276]	; (80063e0 <HAL_GPIO_Init+0x300>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <HAL_GPIO_Init+0x1f2>
 80062ce:	2304      	movs	r3, #4
 80062d0:	e008      	b.n	80062e4 <HAL_GPIO_Init+0x204>
 80062d2:	2307      	movs	r3, #7
 80062d4:	e006      	b.n	80062e4 <HAL_GPIO_Init+0x204>
 80062d6:	2303      	movs	r3, #3
 80062d8:	e004      	b.n	80062e4 <HAL_GPIO_Init+0x204>
 80062da:	2302      	movs	r3, #2
 80062dc:	e002      	b.n	80062e4 <HAL_GPIO_Init+0x204>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <HAL_GPIO_Init+0x204>
 80062e2:	2300      	movs	r3, #0
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	f002 0203 	and.w	r2, r2, #3
 80062ea:	0092      	lsls	r2, r2, #2
 80062ec:	4093      	lsls	r3, r2
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062f4:	4935      	ldr	r1, [pc, #212]	; (80063cc <HAL_GPIO_Init+0x2ec>)
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	089b      	lsrs	r3, r3, #2
 80062fa:	3302      	adds	r3, #2
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006302:	4b38      	ldr	r3, [pc, #224]	; (80063e4 <HAL_GPIO_Init+0x304>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	43db      	mvns	r3, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4013      	ands	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006326:	4a2f      	ldr	r2, [pc, #188]	; (80063e4 <HAL_GPIO_Init+0x304>)
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800632c:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <HAL_GPIO_Init+0x304>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006350:	4a24      	ldr	r2, [pc, #144]	; (80063e4 <HAL_GPIO_Init+0x304>)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <HAL_GPIO_Init+0x304>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	43db      	mvns	r3, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <HAL_GPIO_Init+0x304>)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006380:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <HAL_GPIO_Init+0x304>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	43db      	mvns	r3, r3
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4013      	ands	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063a4:	4a0f      	ldr	r2, [pc, #60]	; (80063e4 <HAL_GPIO_Init+0x304>)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	3301      	adds	r3, #1
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	f67f aea2 	bls.w	80060fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	3724      	adds	r7, #36	; 0x24
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40023800 	.word	0x40023800
 80063cc:	40013800 	.word	0x40013800
 80063d0:	40020000 	.word	0x40020000
 80063d4:	40020400 	.word	0x40020400
 80063d8:	40020800 	.word	0x40020800
 80063dc:	40020c00 	.word	0x40020c00
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40013c00 	.word	0x40013c00

080063e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e0bb      	b.n	800657c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006404:	2201      	movs	r2, #1
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4013      	ands	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	429a      	cmp	r2, r3
 800641c:	f040 80ab 	bne.w	8006576 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006420:	4a5c      	ldr	r2, [pc, #368]	; (8006594 <HAL_GPIO_DeInit+0x1ac>)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	3302      	adds	r3, #2
 8006428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	220f      	movs	r2, #15
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	4013      	ands	r3, r2
 8006440:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a54      	ldr	r2, [pc, #336]	; (8006598 <HAL_GPIO_DeInit+0x1b0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d019      	beq.n	800647e <HAL_GPIO_DeInit+0x96>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a53      	ldr	r2, [pc, #332]	; (800659c <HAL_GPIO_DeInit+0x1b4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_GPIO_DeInit+0x92>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a52      	ldr	r2, [pc, #328]	; (80065a0 <HAL_GPIO_DeInit+0x1b8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00d      	beq.n	8006476 <HAL_GPIO_DeInit+0x8e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a51      	ldr	r2, [pc, #324]	; (80065a4 <HAL_GPIO_DeInit+0x1bc>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <HAL_GPIO_DeInit+0x8a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a50      	ldr	r2, [pc, #320]	; (80065a8 <HAL_GPIO_DeInit+0x1c0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <HAL_GPIO_DeInit+0x86>
 800646a:	2304      	movs	r3, #4
 800646c:	e008      	b.n	8006480 <HAL_GPIO_DeInit+0x98>
 800646e:	2307      	movs	r3, #7
 8006470:	e006      	b.n	8006480 <HAL_GPIO_DeInit+0x98>
 8006472:	2303      	movs	r3, #3
 8006474:	e004      	b.n	8006480 <HAL_GPIO_DeInit+0x98>
 8006476:	2302      	movs	r3, #2
 8006478:	e002      	b.n	8006480 <HAL_GPIO_DeInit+0x98>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <HAL_GPIO_DeInit+0x98>
 800647e:	2300      	movs	r3, #0
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	f002 0203 	and.w	r2, r2, #3
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	4093      	lsls	r3, r2
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	429a      	cmp	r2, r3
 800648e:	d132      	bne.n	80064f6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006490:	4b46      	ldr	r3, [pc, #280]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	43db      	mvns	r3, r3
 8006498:	4944      	ldr	r1, [pc, #272]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 800649a:	4013      	ands	r3, r2
 800649c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800649e:	4b43      	ldr	r3, [pc, #268]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	4941      	ldr	r1, [pc, #260]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80064ac:	4b3f      	ldr	r3, [pc, #252]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	43db      	mvns	r3, r3
 80064b4:	493d      	ldr	r1, [pc, #244]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80064ba:	4b3c      	ldr	r3, [pc, #240]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	43db      	mvns	r3, r3
 80064c2:	493a      	ldr	r1, [pc, #232]	; (80065ac <HAL_GPIO_DeInit+0x1c4>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	220f      	movs	r2, #15
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80064d8:	4a2e      	ldr	r2, [pc, #184]	; (8006594 <HAL_GPIO_DeInit+0x1ac>)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	089b      	lsrs	r3, r3, #2
 80064de:	3302      	adds	r3, #2
 80064e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	43da      	mvns	r2, r3
 80064e8:	482a      	ldr	r0, [pc, #168]	; (8006594 <HAL_GPIO_DeInit+0x1ac>)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	400a      	ands	r2, r1
 80064f0:	3302      	adds	r3, #2
 80064f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	2103      	movs	r1, #3
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	43db      	mvns	r3, r3
 8006506:	401a      	ands	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	08da      	lsrs	r2, r3, #3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3208      	adds	r2, #8
 8006514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	220f      	movs	r2, #15
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43db      	mvns	r3, r3
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	08d2      	lsrs	r2, r2, #3
 800652c:	4019      	ands	r1, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3208      	adds	r2, #8
 8006532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	2103      	movs	r1, #3
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	401a      	ands	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	2101      	movs	r1, #1
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	401a      	ands	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	2103      	movs	r1, #3
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	43db      	mvns	r3, r3
 8006570:	401a      	ands	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	3301      	adds	r3, #1
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2b0f      	cmp	r3, #15
 8006580:	f67f af40 	bls.w	8006404 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40013800 	.word	0x40013800
 8006598:	40020000 	.word	0x40020000
 800659c:	40020400 	.word	0x40020400
 80065a0:	40020800 	.word	0x40020800
 80065a4:	40020c00 	.word	0x40020c00
 80065a8:	40021000 	.word	0x40021000
 80065ac:	40013c00 	.word	0x40013c00

080065b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	807b      	strh	r3, [r7, #2]
 80065bc:	4613      	mov	r3, r2
 80065be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065c0:	787b      	ldrb	r3, [r7, #1]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065c6:	887a      	ldrh	r2, [r7, #2]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065cc:	e003      	b.n	80065d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065ce:	887b      	ldrh	r3, [r7, #2]
 80065d0:	041a      	lsls	r2, r3, #16
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	619a      	str	r2, [r3, #24]
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065f4:	887a      	ldrh	r2, [r7, #2]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4013      	ands	r3, r2
 80065fa:	041a      	lsls	r2, r3, #16
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	43d9      	mvns	r1, r3
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	400b      	ands	r3, r1
 8006604:	431a      	orrs	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	619a      	str	r2, [r3, #24]
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e12b      	b.n	8006882 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f95d 	bl	80068fe <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800666a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800667c:	f001 fc36 	bl	8007eec <HAL_RCC_GetPCLK1Freq>
 8006680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4a81      	ldr	r2, [pc, #516]	; (800688c <HAL_I2C_Init+0x274>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d807      	bhi.n	800669c <HAL_I2C_Init+0x84>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a80      	ldr	r2, [pc, #512]	; (8006890 <HAL_I2C_Init+0x278>)
 8006690:	4293      	cmp	r3, r2
 8006692:	bf94      	ite	ls
 8006694:	2301      	movls	r3, #1
 8006696:	2300      	movhi	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	e006      	b.n	80066aa <HAL_I2C_Init+0x92>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a7d      	ldr	r2, [pc, #500]	; (8006894 <HAL_I2C_Init+0x27c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bf94      	ite	ls
 80066a4:	2301      	movls	r3, #1
 80066a6:	2300      	movhi	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0e7      	b.n	8006882 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4a78      	ldr	r2, [pc, #480]	; (8006898 <HAL_I2C_Init+0x280>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	0c9b      	lsrs	r3, r3, #18
 80066bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a6a      	ldr	r2, [pc, #424]	; (800688c <HAL_I2C_Init+0x274>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d802      	bhi.n	80066ec <HAL_I2C_Init+0xd4>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3301      	adds	r3, #1
 80066ea:	e009      	b.n	8006700 <HAL_I2C_Init+0xe8>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	4a69      	ldr	r2, [pc, #420]	; (800689c <HAL_I2C_Init+0x284>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	099b      	lsrs	r3, r3, #6
 80066fe:	3301      	adds	r3, #1
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	430b      	orrs	r3, r1
 8006706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	495c      	ldr	r1, [pc, #368]	; (800688c <HAL_I2C_Init+0x274>)
 800671c:	428b      	cmp	r3, r1
 800671e:	d819      	bhi.n	8006754 <HAL_I2C_Init+0x13c>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	1e59      	subs	r1, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	fbb1 f3f3 	udiv	r3, r1, r3
 800672e:	1c59      	adds	r1, r3, #1
 8006730:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006734:	400b      	ands	r3, r1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_I2C_Init+0x138>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	1e59      	subs	r1, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	fbb1 f3f3 	udiv	r3, r1, r3
 8006748:	3301      	adds	r3, #1
 800674a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800674e:	e051      	b.n	80067f4 <HAL_I2C_Init+0x1dc>
 8006750:	2304      	movs	r3, #4
 8006752:	e04f      	b.n	80067f4 <HAL_I2C_Init+0x1dc>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d111      	bne.n	8006780 <HAL_I2C_Init+0x168>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1e58      	subs	r0, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	440b      	add	r3, r1
 800676a:	fbb0 f3f3 	udiv	r3, r0, r3
 800676e:	3301      	adds	r3, #1
 8006770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf0c      	ite	eq
 8006778:	2301      	moveq	r3, #1
 800677a:	2300      	movne	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	e012      	b.n	80067a6 <HAL_I2C_Init+0x18e>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	1e58      	subs	r0, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6859      	ldr	r1, [r3, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	0099      	lsls	r1, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	fbb0 f3f3 	udiv	r3, r0, r3
 8006796:	3301      	adds	r3, #1
 8006798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800679c:	2b00      	cmp	r3, #0
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_I2C_Init+0x196>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e022      	b.n	80067f4 <HAL_I2C_Init+0x1dc>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10e      	bne.n	80067d4 <HAL_I2C_Init+0x1bc>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1e58      	subs	r0, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6859      	ldr	r1, [r3, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	440b      	add	r3, r1
 80067c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80067c8:	3301      	adds	r3, #1
 80067ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	e00f      	b.n	80067f4 <HAL_I2C_Init+0x1dc>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	1e58      	subs	r0, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	0099      	lsls	r1, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ea:	3301      	adds	r3, #1
 80067ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	6809      	ldr	r1, [r1, #0]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69da      	ldr	r2, [r3, #28]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6911      	ldr	r1, [r2, #16]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68d2      	ldr	r2, [r2, #12]
 800682e:	4311      	orrs	r1, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	430b      	orrs	r3, r1
 8006836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	000186a0 	.word	0x000186a0
 8006890:	001e847f 	.word	0x001e847f
 8006894:	003d08ff 	.word	0x003d08ff
 8006898:	431bde83 	.word	0x431bde83
 800689c:	10624dd3 	.word	0x10624dd3

080068a0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e021      	b.n	80068f6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2224      	movs	r2, #36	; 0x24
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0201 	bic.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f821 	bl	8006912 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	461a      	mov	r2, r3
 8006936:	4603      	mov	r3, r0
 8006938:	817b      	strh	r3, [r7, #10]
 800693a:	460b      	mov	r3, r1
 800693c:	813b      	strh	r3, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006942:	f7ff f9f9 	bl	8005d38 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b20      	cmp	r3, #32
 8006952:	f040 80d9 	bne.w	8006b08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	2319      	movs	r3, #25
 800695c:	2201      	movs	r2, #1
 800695e:	496d      	ldr	r1, [pc, #436]	; (8006b14 <HAL_I2C_Mem_Write+0x1ec>)
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fc99 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800696c:	2302      	movs	r3, #2
 800696e:	e0cc      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2C_Mem_Write+0x56>
 800697a:	2302      	movs	r3, #2
 800697c:	e0c5      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d007      	beq.n	80069a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2221      	movs	r2, #33	; 0x21
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a3a      	ldr	r2, [r7, #32]
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a4d      	ldr	r2, [pc, #308]	; (8006b18 <HAL_I2C_Mem_Write+0x1f0>)
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069e6:	88f8      	ldrh	r0, [r7, #6]
 80069e8:	893a      	ldrh	r2, [r7, #8]
 80069ea:	8979      	ldrh	r1, [r7, #10]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4603      	mov	r3, r0
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fad0 	bl	8006f9c <I2C_RequestMemoryWrite>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d052      	beq.n	8006aa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e081      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fd1a 	bl	8007444 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d107      	bne.n	8006a2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e06b      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	781a      	ldrb	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d11b      	bne.n	8006aa8 <HAL_I2C_Mem_Write+0x180>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d017      	beq.n	8006aa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1aa      	bne.n	8006a06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fd06 	bl	80074c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00d      	beq.n	8006adc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d107      	bne.n	8006ad8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e016      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e000      	b.n	8006b0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b08:	2302      	movs	r3, #2
  }
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	00100002 	.word	0x00100002
 8006b18:	ffff0000 	.word	0xffff0000

08006b1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	817b      	strh	r3, [r7, #10]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	813b      	strh	r3, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b36:	f7ff f8ff 	bl	8005d38 <HAL_GetTick>
 8006b3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	f040 8208 	bne.w	8006f5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2319      	movs	r3, #25
 8006b50:	2201      	movs	r2, #1
 8006b52:	497b      	ldr	r1, [pc, #492]	; (8006d40 <HAL_I2C_Mem_Read+0x224>)
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fb9f 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
 8006b62:	e1fb      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_I2C_Mem_Read+0x56>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e1f4      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d007      	beq.n	8006b98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2222      	movs	r2, #34	; 0x22
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2240      	movs	r2, #64	; 0x40
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a5b      	ldr	r2, [pc, #364]	; (8006d44 <HAL_I2C_Mem_Read+0x228>)
 8006bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bda:	88f8      	ldrh	r0, [r7, #6]
 8006bdc:	893a      	ldrh	r2, [r7, #8]
 8006bde:	8979      	ldrh	r1, [r7, #10]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	4603      	mov	r3, r0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fa6c 	bl	80070c8 <I2C_RequestMemoryRead>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e1b0      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d113      	bne.n	8006c2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c02:	2300      	movs	r3, #0
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e184      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d11b      	bne.n	8006c6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	e164      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d11b      	bne.n	8006caa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c92:	2300      	movs	r3, #0
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	e144      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cc0:	e138      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	f200 80f1 	bhi.w	8006eae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d123      	bne.n	8006d1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fc35 	bl	8007548 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e139      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d1a:	e10b      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d14e      	bne.n	8006dc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4906      	ldr	r1, [pc, #24]	; (8006d48 <HAL_I2C_Mem_Read+0x22c>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fab2 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e10e      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
 8006d3e:	bf00      	nop
 8006d40:	00100002 	.word	0x00100002
 8006d44:	ffff0000 	.word	0xffff0000
 8006d48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dc0:	e0b8      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4966      	ldr	r1, [pc, #408]	; (8006f64 <HAL_I2C_Mem_Read+0x448>)
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fa63 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0bf      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	2200      	movs	r2, #0
 8006e26:	494f      	ldr	r1, [pc, #316]	; (8006f64 <HAL_I2C_Mem_Read+0x448>)
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fa35 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e091      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eac:	e042      	b.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fb48 	bl	8007548 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e04c      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d118      	bne.n	8006f34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f aec2 	bne.w	8006cc2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e000      	b.n	8006f5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f5a:	2302      	movs	r3, #2
  }
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3728      	adds	r7, #40	; 0x28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	00010004 	.word	0x00010004

08006f68 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f76:	b2db      	uxtb	r3, r3
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4603      	mov	r3, r0
 8006fac:	817b      	strh	r3, [r7, #10]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	813b      	strh	r3, [r7, #8]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f960 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00d      	beq.n	8006ffa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fec:	d103      	bne.n	8006ff6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e05f      	b.n	80070ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ffa:	897b      	ldrh	r3, [r7, #10]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	6a3a      	ldr	r2, [r7, #32]
 800700e:	492d      	ldr	r1, [pc, #180]	; (80070c4 <I2C_RequestMemoryWrite+0x128>)
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f998 	bl	8007346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e04c      	b.n	80070ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007038:	6a39      	ldr	r1, [r7, #32]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fa02 	bl	8007444 <I2C_WaitOnTXEFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00d      	beq.n	8007062 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	2b04      	cmp	r3, #4
 800704c:	d107      	bne.n	800705e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800705c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e02b      	b.n	80070ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d105      	bne.n	8007074 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007068:	893b      	ldrh	r3, [r7, #8]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	611a      	str	r2, [r3, #16]
 8007072:	e021      	b.n	80070b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007074:	893b      	ldrh	r3, [r7, #8]
 8007076:	0a1b      	lsrs	r3, r3, #8
 8007078:	b29b      	uxth	r3, r3
 800707a:	b2da      	uxtb	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	6a39      	ldr	r1, [r7, #32]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f9dc 	bl	8007444 <I2C_WaitOnTXEFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00d      	beq.n	80070ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	2b04      	cmp	r3, #4
 8007098:	d107      	bne.n	80070aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e005      	b.n	80070ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070ae:	893b      	ldrh	r3, [r7, #8]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	00010002 	.word	0x00010002

080070c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	4608      	mov	r0, r1
 80070d2:	4611      	mov	r1, r2
 80070d4:	461a      	mov	r2, r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	817b      	strh	r3, [r7, #10]
 80070da:	460b      	mov	r3, r1
 80070dc:	813b      	strh	r3, [r7, #8]
 80070de:	4613      	mov	r3, r2
 80070e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	2200      	movs	r2, #0
 800710a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f8c2 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007128:	d103      	bne.n	8007132 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007130:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e0aa      	b.n	800728c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007136:	897b      	ldrh	r3, [r7, #10]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	6a3a      	ldr	r2, [r7, #32]
 800714a:	4952      	ldr	r1, [pc, #328]	; (8007294 <I2C_RequestMemoryRead+0x1cc>)
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f8fa 	bl	8007346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e097      	b.n	800728c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007174:	6a39      	ldr	r1, [r7, #32]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f964 	bl	8007444 <I2C_WaitOnTXEFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00d      	beq.n	800719e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b04      	cmp	r3, #4
 8007188:	d107      	bne.n	800719a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e076      	b.n	800728c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d105      	bne.n	80071b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	611a      	str	r2, [r3, #16]
 80071ae:	e021      	b.n	80071f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071b0:	893b      	ldrh	r3, [r7, #8]
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c0:	6a39      	ldr	r1, [r7, #32]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 f93e 	bl	8007444 <I2C_WaitOnTXEFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d107      	bne.n	80071e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e050      	b.n	800728c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071ea:	893b      	ldrh	r3, [r7, #8]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f6:	6a39      	ldr	r1, [r7, #32]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f923 	bl	8007444 <I2C_WaitOnTXEFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00d      	beq.n	8007220 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	2b04      	cmp	r3, #4
 800720a:	d107      	bne.n	800721c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e035      	b.n	800728c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800722e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	2200      	movs	r2, #0
 8007238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f82b 	bl	8007298 <I2C_WaitOnFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00d      	beq.n	8007264 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007256:	d103      	bne.n	8007260 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e013      	b.n	800728c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007264:	897b      	ldrh	r3, [r7, #10]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	6a3a      	ldr	r2, [r7, #32]
 8007278:	4906      	ldr	r1, [pc, #24]	; (8007294 <I2C_RequestMemoryRead+0x1cc>)
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f863 	bl	8007346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	00010002 	.word	0x00010002

08007298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072a8:	e025      	b.n	80072f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d021      	beq.n	80072f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b2:	f7fe fd41 	bl	8005d38 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d302      	bcc.n	80072c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d116      	bne.n	80072f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	f043 0220 	orr.w	r2, r3, #32
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e023      	b.n	800733e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d10d      	bne.n	800731c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	43da      	mvns	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	e00c      	b.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	43da      	mvns	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4013      	ands	r3, r2
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	bf0c      	ite	eq
 800732e:	2301      	moveq	r3, #1
 8007330:	2300      	movne	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	429a      	cmp	r2, r3
 800733a:	d0b6      	beq.n	80072aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007354:	e051      	b.n	80073fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007364:	d123      	bne.n	80073ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007374:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800737e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f043 0204 	orr.w	r2, r3, #4
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e046      	b.n	800743c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d021      	beq.n	80073fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b6:	f7fe fcbf 	bl	8005d38 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d302      	bcc.n	80073cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d116      	bne.n	80073fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f043 0220 	orr.w	r2, r3, #32
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e020      	b.n	800743c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	0c1b      	lsrs	r3, r3, #16
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d10c      	bne.n	800741e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	43da      	mvns	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4013      	ands	r3, r2
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	bf14      	ite	ne
 8007416:	2301      	movne	r3, #1
 8007418:	2300      	moveq	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	e00b      	b.n	8007436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	43da      	mvns	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d18d      	bne.n	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007450:	e02d      	b.n	80074ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f8ce 	bl	80075f4 <I2C_IsAcknowledgeFailed>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e02d      	b.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d021      	beq.n	80074ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800746a:	f7fe fc65 	bl	8005d38 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	429a      	cmp	r2, r3
 8007478:	d302      	bcc.n	8007480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d116      	bne.n	80074ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f043 0220 	orr.w	r2, r3, #32
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e007      	b.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b8:	2b80      	cmp	r3, #128	; 0x80
 80074ba:	d1ca      	bne.n	8007452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074d2:	e02d      	b.n	8007530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f88d 	bl	80075f4 <I2C_IsAcknowledgeFailed>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e02d      	b.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d021      	beq.n	8007530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ec:	f7fe fc24 	bl	8005d38 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d302      	bcc.n	8007502 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d116      	bne.n	8007530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e007      	b.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b04      	cmp	r3, #4
 800753c:	d1ca      	bne.n	80074d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007554:	e042      	b.n	80075dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b10      	cmp	r3, #16
 8007562:	d119      	bne.n	8007598 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0210 	mvn.w	r2, #16
 800756c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e029      	b.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007598:	f7fe fbce 	bl	8005d38 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d116      	bne.n	80075dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	f043 0220 	orr.w	r2, r3, #32
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e007      	b.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d1b5      	bne.n	8007556 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800760a:	d11b      	bne.n	8007644 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007614:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f043 0204 	orr.w	r2, r3, #4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e264      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d075      	beq.n	800775e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007672:	4ba3      	ldr	r3, [pc, #652]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
 800767a:	2b04      	cmp	r3, #4
 800767c:	d00c      	beq.n	8007698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800767e:	4ba0      	ldr	r3, [pc, #640]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007686:	2b08      	cmp	r3, #8
 8007688:	d112      	bne.n	80076b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800768a:	4b9d      	ldr	r3, [pc, #628]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007696:	d10b      	bne.n	80076b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007698:	4b99      	ldr	r3, [pc, #612]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05b      	beq.n	800775c <HAL_RCC_OscConfig+0x108>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d157      	bne.n	800775c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e23f      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b8:	d106      	bne.n	80076c8 <HAL_RCC_OscConfig+0x74>
 80076ba:	4b91      	ldr	r3, [pc, #580]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a90      	ldr	r2, [pc, #576]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e01d      	b.n	8007704 <HAL_RCC_OscConfig+0xb0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076d0:	d10c      	bne.n	80076ec <HAL_RCC_OscConfig+0x98>
 80076d2:	4b8b      	ldr	r3, [pc, #556]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a8a      	ldr	r2, [pc, #552]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	4b88      	ldr	r3, [pc, #544]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a87      	ldr	r2, [pc, #540]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	e00b      	b.n	8007704 <HAL_RCC_OscConfig+0xb0>
 80076ec:	4b84      	ldr	r3, [pc, #528]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a83      	ldr	r2, [pc, #524]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	4b81      	ldr	r3, [pc, #516]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a80      	ldr	r2, [pc, #512]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80076fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d013      	beq.n	8007734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770c:	f7fe fb14 	bl	8005d38 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007714:	f7fe fb10 	bl	8005d38 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b64      	cmp	r3, #100	; 0x64
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e204      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007726:	4b76      	ldr	r3, [pc, #472]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f0      	beq.n	8007714 <HAL_RCC_OscConfig+0xc0>
 8007732:	e014      	b.n	800775e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007734:	f7fe fb00 	bl	8005d38 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800773c:	f7fe fafc 	bl	8005d38 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b64      	cmp	r3, #100	; 0x64
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e1f0      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800774e:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0xe8>
 800775a:	e000      	b.n	800775e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800775c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d063      	beq.n	8007832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800776a:	4b65      	ldr	r3, [pc, #404]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007776:	4b62      	ldr	r3, [pc, #392]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800777e:	2b08      	cmp	r3, #8
 8007780:	d11c      	bne.n	80077bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007782:	4b5f      	ldr	r3, [pc, #380]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d116      	bne.n	80077bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800778e:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_RCC_OscConfig+0x152>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d001      	beq.n	80077a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e1c4      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a6:	4b56      	ldr	r3, [pc, #344]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4952      	ldr	r1, [pc, #328]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ba:	e03a      	b.n	8007832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077c4:	4b4f      	ldr	r3, [pc, #316]	; (8007904 <HAL_RCC_OscConfig+0x2b0>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ca:	f7fe fab5 	bl	8005d38 <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077d2:	f7fe fab1 	bl	8005d38 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e1a5      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e4:	4b46      	ldr	r3, [pc, #280]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077f0:	4b43      	ldr	r3, [pc, #268]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4940      	ldr	r1, [pc, #256]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007800:	4313      	orrs	r3, r2
 8007802:	600b      	str	r3, [r1, #0]
 8007804:	e015      	b.n	8007832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007806:	4b3f      	ldr	r3, [pc, #252]	; (8007904 <HAL_RCC_OscConfig+0x2b0>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780c:	f7fe fa94 	bl	8005d38 <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007814:	f7fe fa90 	bl	8005d38 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e184      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007826:	4b36      	ldr	r3, [pc, #216]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f0      	bne.n	8007814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d030      	beq.n	80078a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <HAL_RCC_OscConfig+0x2b4>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784c:	f7fe fa74 	bl	8005d38 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007854:	f7fe fa70 	bl	8005d38 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e164      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x200>
 8007872:	e015      	b.n	80078a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <HAL_RCC_OscConfig+0x2b4>)
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800787a:	f7fe fa5d 	bl	8005d38 <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007882:	f7fe fa59 	bl	8005d38 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e14d      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 8007896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f0      	bne.n	8007882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80a0 	beq.w	80079ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078b2:	4b13      	ldr	r3, [pc, #76]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	4a0e      	ldr	r2, [pc, #56]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078cc:	6413      	str	r3, [r2, #64]	; 0x40
 80078ce:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <HAL_RCC_OscConfig+0x2ac>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d6:	60bb      	str	r3, [r7, #8]
 80078d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <HAL_RCC_OscConfig+0x2b8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d121      	bne.n	800792e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078ea:	4b08      	ldr	r3, [pc, #32]	; (800790c <HAL_RCC_OscConfig+0x2b8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a07      	ldr	r2, [pc, #28]	; (800790c <HAL_RCC_OscConfig+0x2b8>)
 80078f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078f6:	f7fe fa1f 	bl	8005d38 <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fc:	e011      	b.n	8007922 <HAL_RCC_OscConfig+0x2ce>
 80078fe:	bf00      	nop
 8007900:	40023800 	.word	0x40023800
 8007904:	42470000 	.word	0x42470000
 8007908:	42470e80 	.word	0x42470e80
 800790c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007910:	f7fe fa12 	bl	8005d38 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e106      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007922:	4b85      	ldr	r3, [pc, #532]	; (8007b38 <HAL_RCC_OscConfig+0x4e4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d106      	bne.n	8007944 <HAL_RCC_OscConfig+0x2f0>
 8007936:	4b81      	ldr	r3, [pc, #516]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	4a80      	ldr	r2, [pc, #512]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	6713      	str	r3, [r2, #112]	; 0x70
 8007942:	e01c      	b.n	800797e <HAL_RCC_OscConfig+0x32a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b05      	cmp	r3, #5
 800794a:	d10c      	bne.n	8007966 <HAL_RCC_OscConfig+0x312>
 800794c:	4b7b      	ldr	r3, [pc, #492]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	4a7a      	ldr	r2, [pc, #488]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007952:	f043 0304 	orr.w	r3, r3, #4
 8007956:	6713      	str	r3, [r2, #112]	; 0x70
 8007958:	4b78      	ldr	r3, [pc, #480]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795c:	4a77      	ldr	r2, [pc, #476]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	6713      	str	r3, [r2, #112]	; 0x70
 8007964:	e00b      	b.n	800797e <HAL_RCC_OscConfig+0x32a>
 8007966:	4b75      	ldr	r3, [pc, #468]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	4a74      	ldr	r2, [pc, #464]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	6713      	str	r3, [r2, #112]	; 0x70
 8007972:	4b72      	ldr	r3, [pc, #456]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	4a71      	ldr	r2, [pc, #452]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007978:	f023 0304 	bic.w	r3, r3, #4
 800797c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d015      	beq.n	80079b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007986:	f7fe f9d7 	bl	8005d38 <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800798c:	e00a      	b.n	80079a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800798e:	f7fe f9d3 	bl	8005d38 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	f241 3288 	movw	r2, #5000	; 0x1388
 800799c:	4293      	cmp	r3, r2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e0c5      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a4:	4b65      	ldr	r3, [pc, #404]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0ee      	beq.n	800798e <HAL_RCC_OscConfig+0x33a>
 80079b0:	e014      	b.n	80079dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079b2:	f7fe f9c1 	bl	8005d38 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b8:	e00a      	b.n	80079d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ba:	f7fe f9bd 	bl	8005d38 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d901      	bls.n	80079d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e0af      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d0:	4b5a      	ldr	r3, [pc, #360]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1ee      	bne.n	80079ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d105      	bne.n	80079ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e2:	4b56      	ldr	r3, [pc, #344]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	4a55      	ldr	r2, [pc, #340]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 809b 	beq.w	8007b2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079f8:	4b50      	ldr	r3, [pc, #320]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 030c 	and.w	r3, r3, #12
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d05c      	beq.n	8007abe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d141      	bne.n	8007a90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a0c:	4b4c      	ldr	r3, [pc, #304]	; (8007b40 <HAL_RCC_OscConfig+0x4ec>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a12:	f7fe f991 	bl	8005d38 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a1a:	f7fe f98d 	bl	8005d38 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e081      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2c:	4b43      	ldr	r3, [pc, #268]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f0      	bne.n	8007a1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	019b      	lsls	r3, r3, #6
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	3b01      	subs	r3, #1
 8007a52:	041b      	lsls	r3, r3, #16
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	061b      	lsls	r3, r3, #24
 8007a5c:	4937      	ldr	r1, [pc, #220]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a62:	4b37      	ldr	r3, [pc, #220]	; (8007b40 <HAL_RCC_OscConfig+0x4ec>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a68:	f7fe f966 	bl	8005d38 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a70:	f7fe f962 	bl	8005d38 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e056      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a82:	4b2e      	ldr	r3, [pc, #184]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0f0      	beq.n	8007a70 <HAL_RCC_OscConfig+0x41c>
 8007a8e:	e04e      	b.n	8007b2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a90:	4b2b      	ldr	r3, [pc, #172]	; (8007b40 <HAL_RCC_OscConfig+0x4ec>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a96:	f7fe f94f 	bl	8005d38 <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a9e:	f7fe f94b 	bl	8005d38 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e03f      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab0:	4b22      	ldr	r3, [pc, #136]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f0      	bne.n	8007a9e <HAL_RCC_OscConfig+0x44a>
 8007abc:	e037      	b.n	8007b2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e032      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007aca:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <HAL_RCC_OscConfig+0x4e8>)
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d028      	beq.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d121      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d11a      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007afa:	4013      	ands	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d111      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	3b01      	subs	r3, #1
 8007b14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d107      	bne.n	8007b2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d001      	beq.n	8007b2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40007000 	.word	0x40007000
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	42470060 	.word	0x42470060

08007b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0cc      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b58:	4b68      	ldr	r3, [pc, #416]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d90c      	bls.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b65      	ldr	r3, [pc, #404]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b63      	ldr	r3, [pc, #396]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0b8      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d020      	beq.n	8007bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b98:	4b59      	ldr	r3, [pc, #356]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4a58      	ldr	r2, [pc, #352]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bb0:	4b53      	ldr	r3, [pc, #332]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a52      	ldr	r2, [pc, #328]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bbc:	4b50      	ldr	r3, [pc, #320]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	494d      	ldr	r1, [pc, #308]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d044      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d107      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007be2:	4b47      	ldr	r3, [pc, #284]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d119      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e07f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d107      	bne.n	8007c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c02:	4b3f      	ldr	r3, [pc, #252]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e06f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c12:	4b3b      	ldr	r3, [pc, #236]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e067      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c22:	4b37      	ldr	r3, [pc, #220]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f023 0203 	bic.w	r2, r3, #3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4934      	ldr	r1, [pc, #208]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c34:	f7fe f880 	bl	8005d38 <HAL_GetTick>
 8007c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3a:	e00a      	b.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c3c:	f7fe f87c 	bl	8005d38 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e04f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c52:	4b2b      	ldr	r3, [pc, #172]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 020c 	and.w	r2, r3, #12
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d1eb      	bne.n	8007c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c64:	4b25      	ldr	r3, [pc, #148]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d20c      	bcs.n	8007c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c72:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7a:	4b20      	ldr	r3, [pc, #128]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d001      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e032      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c98:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	4916      	ldr	r1, [pc, #88]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cb6:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	490e      	ldr	r1, [pc, #56]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cca:	f000 f821 	bl	8007d10 <HAL_RCC_GetSysClockFreq>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	091b      	lsrs	r3, r3, #4
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	490a      	ldr	r1, [pc, #40]	; (8007d04 <HAL_RCC_ClockConfig+0x1c0>)
 8007cdc:	5ccb      	ldrb	r3, [r1, r3]
 8007cde:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce2:	4a09      	ldr	r2, [pc, #36]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd ffe0 	bl	8005cb0 <HAL_InitTick>

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40023c00 	.word	0x40023c00
 8007d00:	40023800 	.word	0x40023800
 8007d04:	0800a424 	.word	0x0800a424
 8007d08:	20000000 	.word	0x20000000
 8007d0c:	200000d8 	.word	0x200000d8

08007d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	2300      	movs	r3, #0
 8007d22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d28:	4b67      	ldr	r3, [pc, #412]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 030c 	and.w	r3, r3, #12
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d00d      	beq.n	8007d50 <HAL_RCC_GetSysClockFreq+0x40>
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	f200 80bd 	bhi.w	8007eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_RCC_GetSysClockFreq+0x34>
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d003      	beq.n	8007d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8007d42:	e0b7      	b.n	8007eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d44:	4b61      	ldr	r3, [pc, #388]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d46:	60bb      	str	r3, [r7, #8]
       break;
 8007d48:	e0b7      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d4a:	4b61      	ldr	r3, [pc, #388]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007d4c:	60bb      	str	r3, [r7, #8]
      break;
 8007d4e:	e0b4      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d50:	4b5d      	ldr	r3, [pc, #372]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d5a:	4b5b      	ldr	r3, [pc, #364]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d04d      	beq.n	8007e02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d66:	4b58      	ldr	r3, [pc, #352]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	099b      	lsrs	r3, r3, #6
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d76:	f04f 0100 	mov.w	r1, #0
 8007d7a:	ea02 0800 	and.w	r8, r2, r0
 8007d7e:	ea03 0901 	and.w	r9, r3, r1
 8007d82:	4640      	mov	r0, r8
 8007d84:	4649      	mov	r1, r9
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	014b      	lsls	r3, r1, #5
 8007d90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d94:	0142      	lsls	r2, r0, #5
 8007d96:	4610      	mov	r0, r2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	ebb0 0008 	subs.w	r0, r0, r8
 8007d9e:	eb61 0109 	sbc.w	r1, r1, r9
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	018b      	lsls	r3, r1, #6
 8007dac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007db0:	0182      	lsls	r2, r0, #6
 8007db2:	1a12      	subs	r2, r2, r0
 8007db4:	eb63 0301 	sbc.w	r3, r3, r1
 8007db8:	f04f 0000 	mov.w	r0, #0
 8007dbc:	f04f 0100 	mov.w	r1, #0
 8007dc0:	00d9      	lsls	r1, r3, #3
 8007dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dc6:	00d0      	lsls	r0, r2, #3
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	eb12 0208 	adds.w	r2, r2, r8
 8007dd0:	eb43 0309 	adc.w	r3, r3, r9
 8007dd4:	f04f 0000 	mov.w	r0, #0
 8007dd8:	f04f 0100 	mov.w	r1, #0
 8007ddc:	0259      	lsls	r1, r3, #9
 8007dde:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007de2:	0250      	lsls	r0, r2, #9
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4610      	mov	r0, r2
 8007dea:	4619      	mov	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	461a      	mov	r2, r3
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	f7f8 fa44 	bl	8000280 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e04a      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e02:	4b31      	ldr	r3, [pc, #196]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e12:	f04f 0100 	mov.w	r1, #0
 8007e16:	ea02 0400 	and.w	r4, r2, r0
 8007e1a:	ea03 0501 	and.w	r5, r3, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	014b      	lsls	r3, r1, #5
 8007e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e30:	0142      	lsls	r2, r0, #5
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	1b00      	subs	r0, r0, r4
 8007e38:	eb61 0105 	sbc.w	r1, r1, r5
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	018b      	lsls	r3, r1, #6
 8007e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e4a:	0182      	lsls	r2, r0, #6
 8007e4c:	1a12      	subs	r2, r2, r0
 8007e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	00d9      	lsls	r1, r3, #3
 8007e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e60:	00d0      	lsls	r0, r2, #3
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	1912      	adds	r2, r2, r4
 8007e68:	eb45 0303 	adc.w	r3, r5, r3
 8007e6c:	f04f 0000 	mov.w	r0, #0
 8007e70:	f04f 0100 	mov.w	r1, #0
 8007e74:	0299      	lsls	r1, r3, #10
 8007e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e7a:	0290      	lsls	r0, r2, #10
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	f7f8 f9f8 	bl	8000280 <__aeabi_uldivmod>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4613      	mov	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb0:	60bb      	str	r3, [r7, #8]
      break;
 8007eb2:	e002      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007eb6:	60bb      	str	r3, [r7, #8]
      break;
 8007eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eba:	68bb      	ldr	r3, [r7, #8]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	00f42400 	.word	0x00f42400
 8007ed0:	007a1200 	.word	0x007a1200

08007ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ed8:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007eda:	681b      	ldr	r3, [r3, #0]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000000 	.word	0x20000000

08007eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ef0:	f7ff fff0 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	0a9b      	lsrs	r3, r3, #10
 8007efc:	f003 0307 	and.w	r3, r3, #7
 8007f00:	4903      	ldr	r1, [pc, #12]	; (8007f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f02:	5ccb      	ldrb	r3, [r1, r3]
 8007f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40023800 	.word	0x40023800
 8007f10:	0800a434 	.word	0x0800a434

08007f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f18:	f7ff ffdc 	bl	8007ed4 <HAL_RCC_GetHCLKFreq>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	0b5b      	lsrs	r3, r3, #13
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	4903      	ldr	r1, [pc, #12]	; (8007f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f2a:	5ccb      	ldrb	r3, [r1, r3]
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	40023800 	.word	0x40023800
 8007f38:	0800a434 	.word	0x0800a434

08007f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e041      	b.n	8007fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7f8 fd2e 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f000 fbd8 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e041      	b.n	8008070 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f839 	bl	8008078 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f000 fb89 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <HAL_TIM_OC_Start_IT+0x28>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	e022      	b.n	80080fa <HAL_TIM_OC_Start_IT+0x6e>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	d109      	bne.n	80080ce <HAL_TIM_OC_Start_IT+0x42>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	bf14      	ite	ne
 80080c6:	2301      	movne	r3, #1
 80080c8:	2300      	moveq	r3, #0
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	e015      	b.n	80080fa <HAL_TIM_OC_Start_IT+0x6e>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	d109      	bne.n	80080e8 <HAL_TIM_OC_Start_IT+0x5c>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	bf14      	ite	ne
 80080e0:	2301      	movne	r3, #1
 80080e2:	2300      	moveq	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	e008      	b.n	80080fa <HAL_TIM_OC_Start_IT+0x6e>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	bf14      	ite	ne
 80080f4:	2301      	movne	r3, #1
 80080f6:	2300      	moveq	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e0b3      	b.n	800826a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <HAL_TIM_OC_Start_IT+0x86>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008110:	e013      	b.n	800813a <HAL_TIM_OC_Start_IT+0xae>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b04      	cmp	r3, #4
 8008116:	d104      	bne.n	8008122 <HAL_TIM_OC_Start_IT+0x96>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008120:	e00b      	b.n	800813a <HAL_TIM_OC_Start_IT+0xae>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d104      	bne.n	8008132 <HAL_TIM_OC_Start_IT+0xa6>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008130:	e003      	b.n	800813a <HAL_TIM_OC_Start_IT+0xae>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b0c      	cmp	r3, #12
 800813e:	d841      	bhi.n	80081c4 <HAL_TIM_OC_Start_IT+0x138>
 8008140:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <HAL_TIM_OC_Start_IT+0xbc>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	0800817d 	.word	0x0800817d
 800814c:	080081c5 	.word	0x080081c5
 8008150:	080081c5 	.word	0x080081c5
 8008154:	080081c5 	.word	0x080081c5
 8008158:	0800818f 	.word	0x0800818f
 800815c:	080081c5 	.word	0x080081c5
 8008160:	080081c5 	.word	0x080081c5
 8008164:	080081c5 	.word	0x080081c5
 8008168:	080081a1 	.word	0x080081a1
 800816c:	080081c5 	.word	0x080081c5
 8008170:	080081c5 	.word	0x080081c5
 8008174:	080081c5 	.word	0x080081c5
 8008178:	080081b3 	.word	0x080081b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0202 	orr.w	r2, r2, #2
 800818a:	60da      	str	r2, [r3, #12]
      break;
 800818c:	e01d      	b.n	80081ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0204 	orr.w	r2, r2, #4
 800819c:	60da      	str	r2, [r3, #12]
      break;
 800819e:	e014      	b.n	80081ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0208 	orr.w	r2, r2, #8
 80081ae:	60da      	str	r2, [r3, #12]
      break;
 80081b0:	e00b      	b.n	80081ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0210 	orr.w	r2, r2, #16
 80081c0:	60da      	str	r2, [r3, #12]
      break;
 80081c2:	e002      	b.n	80081ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
      break;
 80081c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d14b      	bne.n	8008268 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2201      	movs	r2, #1
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fd4f 	bl	8008c7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a24      	ldr	r2, [pc, #144]	; (8008274 <HAL_TIM_OC_Start_IT+0x1e8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d107      	bne.n	80081f8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <HAL_TIM_OC_Start_IT+0x1e8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d018      	beq.n	8008234 <HAL_TIM_OC_Start_IT+0x1a8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820a:	d013      	beq.n	8008234 <HAL_TIM_OC_Start_IT+0x1a8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <HAL_TIM_OC_Start_IT+0x1ec>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00e      	beq.n	8008234 <HAL_TIM_OC_Start_IT+0x1a8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a18      	ldr	r2, [pc, #96]	; (800827c <HAL_TIM_OC_Start_IT+0x1f0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d009      	beq.n	8008234 <HAL_TIM_OC_Start_IT+0x1a8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a16      	ldr	r2, [pc, #88]	; (8008280 <HAL_TIM_OC_Start_IT+0x1f4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d004      	beq.n	8008234 <HAL_TIM_OC_Start_IT+0x1a8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a15      	ldr	r2, [pc, #84]	; (8008284 <HAL_TIM_OC_Start_IT+0x1f8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d111      	bne.n	8008258 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b06      	cmp	r3, #6
 8008244:	d010      	beq.n	8008268 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0201 	orr.w	r2, r2, #1
 8008254:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008256:	e007      	b.n	8008268 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40010000 	.word	0x40010000
 8008278:	40000400 	.word	0x40000400
 800827c:	40000800 	.word	0x40000800
 8008280:	40000c00 	.word	0x40000c00
 8008284:	40014000 	.word	0x40014000

08008288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b02      	cmp	r3, #2
 800829c:	d122      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d11b      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0202 	mvn.w	r2, #2
 80082b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa11 	bl	80086f2 <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7f8 fb34 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa14 	bl	8008706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d122      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d11b      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0204 	mvn.w	r2, #4
 8008308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9e7 	bl	80086f2 <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7f8 fb0a 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f9ea 	bl	8008706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b08      	cmp	r3, #8
 8008344:	d122      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d11b      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0208 	mvn.w	r2, #8
 800835c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2204      	movs	r2, #4
 8008362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f9bd 	bl	80086f2 <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7f8 fae0 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9c0 	bl	8008706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d122      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d11b      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0210 	mvn.w	r2, #16
 80083b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2208      	movs	r2, #8
 80083b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f993 	bl	80086f2 <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f8 fab6 	bl	8000940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f996 	bl	8008706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d10e      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d107      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0201 	mvn.w	r2, #1
 8008404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f969 	bl	80086de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d10e      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d107      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fcc0 	bl	8008db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d10e      	bne.n	8008464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008450:	2b40      	cmp	r3, #64	; 0x40
 8008452:	d107      	bne.n	8008464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800845c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f95b 	bl	800871a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b20      	cmp	r3, #32
 8008470:	d10e      	bne.n	8008490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b20      	cmp	r3, #32
 800847e:	d107      	bne.n	8008490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0220 	mvn.w	r2, #32
 8008488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fc8a 	bl	8008da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d101      	bne.n	80084b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80084b2:	2302      	movs	r3, #2
 80084b4:	e048      	b.n	8008548 <HAL_TIM_OC_ConfigChannel+0xb0>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b0c      	cmp	r3, #12
 80084c2:	d839      	bhi.n	8008538 <HAL_TIM_OC_ConfigChannel+0xa0>
 80084c4:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80084c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ca:	bf00      	nop
 80084cc:	08008501 	.word	0x08008501
 80084d0:	08008539 	.word	0x08008539
 80084d4:	08008539 	.word	0x08008539
 80084d8:	08008539 	.word	0x08008539
 80084dc:	0800850f 	.word	0x0800850f
 80084e0:	08008539 	.word	0x08008539
 80084e4:	08008539 	.word	0x08008539
 80084e8:	08008539 	.word	0x08008539
 80084ec:	0800851d 	.word	0x0800851d
 80084f0:	08008539 	.word	0x08008539
 80084f4:	08008539 	.word	0x08008539
 80084f8:	08008539 	.word	0x08008539
 80084fc:	0800852b 	.word	0x0800852b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f992 	bl	8008830 <TIM_OC1_SetConfig>
      break;
 800850c:	e017      	b.n	800853e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f9f1 	bl	80088fc <TIM_OC2_SetConfig>
      break;
 800851a:	e010      	b.n	800853e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fa56 	bl	80089d4 <TIM_OC3_SetConfig>
      break;
 8008528:	e009      	b.n	800853e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fab9 	bl	8008aa8 <TIM_OC4_SetConfig>
      break;
 8008536:	e002      	b.n	800853e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
      break;
 800853c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008564:	2b01      	cmp	r3, #1
 8008566:	d101      	bne.n	800856c <HAL_TIM_ConfigClockSource+0x1c>
 8008568:	2302      	movs	r3, #2
 800856a:	e0b4      	b.n	80086d6 <HAL_TIM_ConfigClockSource+0x186>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800858a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a4:	d03e      	beq.n	8008624 <HAL_TIM_ConfigClockSource+0xd4>
 80085a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085aa:	f200 8087 	bhi.w	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b2:	f000 8086 	beq.w	80086c2 <HAL_TIM_ConfigClockSource+0x172>
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ba:	d87f      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085bc:	2b70      	cmp	r3, #112	; 0x70
 80085be:	d01a      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0xa6>
 80085c0:	2b70      	cmp	r3, #112	; 0x70
 80085c2:	d87b      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085c4:	2b60      	cmp	r3, #96	; 0x60
 80085c6:	d050      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x11a>
 80085c8:	2b60      	cmp	r3, #96	; 0x60
 80085ca:	d877      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085cc:	2b50      	cmp	r3, #80	; 0x50
 80085ce:	d03c      	beq.n	800864a <HAL_TIM_ConfigClockSource+0xfa>
 80085d0:	2b50      	cmp	r3, #80	; 0x50
 80085d2:	d873      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085d4:	2b40      	cmp	r3, #64	; 0x40
 80085d6:	d058      	beq.n	800868a <HAL_TIM_ConfigClockSource+0x13a>
 80085d8:	2b40      	cmp	r3, #64	; 0x40
 80085da:	d86f      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085dc:	2b30      	cmp	r3, #48	; 0x30
 80085de:	d064      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x15a>
 80085e0:	2b30      	cmp	r3, #48	; 0x30
 80085e2:	d86b      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d060      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x15a>
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d867      	bhi.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d05c      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x15a>
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d05a      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x15a>
 80085f4:	e062      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6899      	ldr	r1, [r3, #8]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f000 fb19 	bl	8008c3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	609a      	str	r2, [r3, #8]
      break;
 8008622:	e04f      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	6899      	ldr	r1, [r3, #8]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f000 fb02 	bl	8008c3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008646:	609a      	str	r2, [r3, #8]
      break;
 8008648:	e03c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	6859      	ldr	r1, [r3, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	461a      	mov	r2, r3
 8008658:	f000 fa76 	bl	8008b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2150      	movs	r1, #80	; 0x50
 8008662:	4618      	mov	r0, r3
 8008664:	f000 facf 	bl	8008c06 <TIM_ITRx_SetConfig>
      break;
 8008668:	e02c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	6859      	ldr	r1, [r3, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	461a      	mov	r2, r3
 8008678:	f000 fa95 	bl	8008ba6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2160      	movs	r1, #96	; 0x60
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fabf 	bl	8008c06 <TIM_ITRx_SetConfig>
      break;
 8008688:	e01c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6859      	ldr	r1, [r3, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	461a      	mov	r2, r3
 8008698:	f000 fa56 	bl	8008b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2140      	movs	r1, #64	; 0x40
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 faaf 	bl	8008c06 <TIM_ITRx_SetConfig>
      break;
 80086a8:	e00c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f000 faa6 	bl	8008c06 <TIM_ITRx_SetConfig>
      break;
 80086ba:	e003      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e000      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80086c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a34      	ldr	r2, [pc, #208]	; (8008814 <TIM_Base_SetConfig+0xe4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00f      	beq.n	8008768 <TIM_Base_SetConfig+0x38>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874e:	d00b      	beq.n	8008768 <TIM_Base_SetConfig+0x38>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a31      	ldr	r2, [pc, #196]	; (8008818 <TIM_Base_SetConfig+0xe8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d007      	beq.n	8008768 <TIM_Base_SetConfig+0x38>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a30      	ldr	r2, [pc, #192]	; (800881c <TIM_Base_SetConfig+0xec>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_Base_SetConfig+0x38>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a2f      	ldr	r2, [pc, #188]	; (8008820 <TIM_Base_SetConfig+0xf0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d108      	bne.n	800877a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a25      	ldr	r2, [pc, #148]	; (8008814 <TIM_Base_SetConfig+0xe4>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d01b      	beq.n	80087ba <TIM_Base_SetConfig+0x8a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008788:	d017      	beq.n	80087ba <TIM_Base_SetConfig+0x8a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a22      	ldr	r2, [pc, #136]	; (8008818 <TIM_Base_SetConfig+0xe8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d013      	beq.n	80087ba <TIM_Base_SetConfig+0x8a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a21      	ldr	r2, [pc, #132]	; (800881c <TIM_Base_SetConfig+0xec>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00f      	beq.n	80087ba <TIM_Base_SetConfig+0x8a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a20      	ldr	r2, [pc, #128]	; (8008820 <TIM_Base_SetConfig+0xf0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00b      	beq.n	80087ba <TIM_Base_SetConfig+0x8a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <TIM_Base_SetConfig+0xf4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d007      	beq.n	80087ba <TIM_Base_SetConfig+0x8a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a1e      	ldr	r2, [pc, #120]	; (8008828 <TIM_Base_SetConfig+0xf8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d003      	beq.n	80087ba <TIM_Base_SetConfig+0x8a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a1d      	ldr	r2, [pc, #116]	; (800882c <TIM_Base_SetConfig+0xfc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d108      	bne.n	80087cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a08      	ldr	r2, [pc, #32]	; (8008814 <TIM_Base_SetConfig+0xe4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d103      	bne.n	8008800 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	615a      	str	r2, [r3, #20]
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40010000 	.word	0x40010000
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	40000c00 	.word	0x40000c00
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800

08008830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 0201 	bic.w	r2, r3, #1
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f023 0302 	bic.w	r3, r3, #2
 8008878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1c      	ldr	r2, [pc, #112]	; (80088f8 <TIM_OC1_SetConfig+0xc8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d10c      	bne.n	80088a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f023 0308 	bic.w	r3, r3, #8
 8008892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f023 0304 	bic.w	r3, r3, #4
 80088a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a13      	ldr	r2, [pc, #76]	; (80088f8 <TIM_OC1_SetConfig+0xc8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d111      	bne.n	80088d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	621a      	str	r2, [r3, #32]
}
 80088ec:	bf00      	nop
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	40010000 	.word	0x40010000

080088fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	f023 0210 	bic.w	r2, r3, #16
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800892a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f023 0320 	bic.w	r3, r3, #32
 8008946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a1e      	ldr	r2, [pc, #120]	; (80089d0 <TIM_OC2_SetConfig+0xd4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d10d      	bne.n	8008978 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	011b      	lsls	r3, r3, #4
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a15      	ldr	r2, [pc, #84]	; (80089d0 <TIM_OC2_SetConfig+0xd4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d113      	bne.n	80089a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800898e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	40010000 	.word	0x40010000

080089d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <TIM_OC3_SetConfig+0xd0>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d10d      	bne.n	8008a4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a14      	ldr	r2, [pc, #80]	; (8008aa4 <TIM_OC3_SetConfig+0xd0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d113      	bne.n	8008a7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	621a      	str	r2, [r3, #32]
}
 8008a98:	bf00      	nop
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	40010000 	.word	0x40010000

08008aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	031b      	lsls	r3, r3, #12
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a10      	ldr	r2, [pc, #64]	; (8008b44 <TIM_OC4_SetConfig+0x9c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d109      	bne.n	8008b1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	019b      	lsls	r3, r3, #6
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	621a      	str	r2, [r3, #32]
}
 8008b36:	bf00      	nop
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	40010000 	.word	0x40010000

08008b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	f023 0201 	bic.w	r2, r3, #1
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f023 030a 	bic.w	r3, r3, #10
 8008b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	621a      	str	r2, [r3, #32]
}
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b087      	sub	sp, #28
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0210 	bic.w	r2, r3, #16
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	031b      	lsls	r3, r3, #12
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	621a      	str	r2, [r3, #32]
}
 8008bfa:	bf00      	nop
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b085      	sub	sp, #20
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f043 0307 	orr.w	r3, r3, #7
 8008c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	609a      	str	r2, [r3, #8]
}
 8008c30:	bf00      	nop
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	021a      	lsls	r2, r3, #8
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	609a      	str	r2, [r3, #8]
}
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f003 031f 	and.w	r3, r3, #31
 8008c8e:	2201      	movs	r2, #1
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6a1a      	ldr	r2, [r3, #32]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	43db      	mvns	r3, r3
 8008c9e:	401a      	ands	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a1a      	ldr	r2, [r3, #32]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 031f 	and.w	r3, r3, #31
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	621a      	str	r2, [r3, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e050      	b.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a1c      	ldr	r2, [pc, #112]	; (8008d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d018      	beq.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2c:	d013      	beq.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00e      	beq.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d009      	beq.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d004      	beq.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d10c      	bne.n	8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40014000 	.word	0x40014000

08008da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e03f      	b.n	8008e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f7 fe0e 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2224      	movs	r2, #36	; 0x24
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fcbf 	bl	8009794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691a      	ldr	r2, [r3, #16]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695a      	ldr	r2, [r3, #20]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68da      	ldr	r2, [r3, #12]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	4613      	mov	r3, r2
 8008e72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b20      	cmp	r3, #32
 8008e7e:	d130      	bne.n	8008ee2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <HAL_UART_Transmit_IT+0x26>
 8008e86:	88fb      	ldrh	r3, [r7, #6]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e029      	b.n	8008ee4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Transmit_IT+0x38>
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e022      	b.n	8008ee4 <HAL_UART_Transmit_IT+0x7e>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	88fa      	ldrh	r2, [r7, #6]
 8008eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2221      	movs	r2, #33	; 0x21
 8008ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008edc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e000      	b.n	8008ee4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008ee2:	2302      	movs	r3, #2
  }
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b0ba      	sub	sp, #232	; 0xe8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10f      	bne.n	8008f56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d009      	beq.n	8008f56 <HAL_UART_IRQHandler+0x66>
 8008f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fb65 	bl	800961e <UART_Receive_IT>
      return;
 8008f54:	e256      	b.n	8009404 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80de 	beq.w	800911c <HAL_UART_IRQHandler+0x22c>
 8008f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d106      	bne.n	8008f7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80d1 	beq.w	800911c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <HAL_UART_IRQHandler+0xae>
 8008f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	f043 0201 	orr.w	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <HAL_UART_IRQHandler+0xd2>
 8008faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	f043 0202 	orr.w	r2, r3, #2
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <HAL_UART_IRQHandler+0xf6>
 8008fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	f043 0204 	orr.w	r2, r3, #4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fea:	f003 0308 	and.w	r3, r3, #8
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d011      	beq.n	8009016 <HAL_UART_IRQHandler+0x126>
 8008ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d005      	beq.n	8009016 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	f043 0208 	orr.w	r2, r3, #8
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 81ed 	beq.w	80093fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d008      	beq.n	800903e <HAL_UART_IRQHandler+0x14e>
 800902c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 faf0 	bl	800961e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009048:	2b40      	cmp	r3, #64	; 0x40
 800904a:	bf0c      	ite	eq
 800904c:	2301      	moveq	r3, #1
 800904e:	2300      	movne	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	f003 0308 	and.w	r3, r3, #8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d103      	bne.n	800906a <HAL_UART_IRQHandler+0x17a>
 8009062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d04f      	beq.n	800910a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f9f8 	bl	8009460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907a:	2b40      	cmp	r3, #64	; 0x40
 800907c:	d141      	bne.n	8009102 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3314      	adds	r3, #20
 8009084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800909c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3314      	adds	r3, #20
 80090a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1d9      	bne.n	800907e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d013      	beq.n	80090fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	4a7d      	ldr	r2, [pc, #500]	; (80092cc <HAL_UART_IRQHandler+0x3dc>)
 80090d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fc ffdb 	bl	800609a <HAL_DMA_Abort_IT>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d016      	beq.n	8009118 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090f4:	4610      	mov	r0, r2
 80090f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e00e      	b.n	8009118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f99a 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e00a      	b.n	8009118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f996 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009108:	e006      	b.n	8009118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f992 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009116:	e170      	b.n	80093fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009118:	bf00      	nop
    return;
 800911a:	e16e      	b.n	80093fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	2b01      	cmp	r3, #1
 8009122:	f040 814a 	bne.w	80093ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912a:	f003 0310 	and.w	r3, r3, #16
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8143 	beq.w	80093ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 813c 	beq.w	80093ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009142:	2300      	movs	r3, #0
 8009144:	60bb      	str	r3, [r7, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	60bb      	str	r3, [r7, #8]
 8009156:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	f040 80b4 	bne.w	80092d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8140 	beq.w	80093fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009186:	429a      	cmp	r2, r3
 8009188:	f080 8139 	bcs.w	80093fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009192:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919e:	f000 8088 	beq.w	80092b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	330c      	adds	r3, #12
 80091ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1d9      	bne.n	80091a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3314      	adds	r3, #20
 80091f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3314      	adds	r3, #20
 800920e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009212:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009216:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800921a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e1      	bne.n	80091ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3314      	adds	r3, #20
 8009230:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800923a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800923c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3314      	adds	r3, #20
 800924a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800924e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009250:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009254:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800925c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e3      	bne.n	800922a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	330c      	adds	r3, #12
 8009276:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009282:	f023 0310 	bic.w	r3, r3, #16
 8009286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	330c      	adds	r3, #12
 8009290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009294:	65ba      	str	r2, [r7, #88]	; 0x58
 8009296:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800929a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e3      	bne.n	8009270 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fc fe84 	bl	8005fba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f8c0 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c8:	e099      	b.n	80093fe <HAL_UART_IRQHandler+0x50e>
 80092ca:	bf00      	nop
 80092cc:	08009527 	.word	0x08009527
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092d8:	b29b      	uxth	r3, r3
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 808b 	beq.w	8009402 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80092ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8086 	beq.w	8009402 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	330c      	adds	r3, #12
 80092fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800930c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800931a:	647a      	str	r2, [r7, #68]	; 0x44
 800931c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009322:	e841 2300 	strex	r3, r2, [r1]
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1e3      	bne.n	80092f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3314      	adds	r3, #20
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	623b      	str	r3, [r7, #32]
   return(result);
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	f023 0301 	bic.w	r3, r3, #1
 8009344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3314      	adds	r3, #20
 800934e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009352:	633a      	str	r2, [r7, #48]	; 0x30
 8009354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e3      	bne.n	800932e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	330c      	adds	r3, #12
 800937a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	60fb      	str	r3, [r7, #12]
   return(result);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0310 	bic.w	r3, r3, #16
 800938a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	330c      	adds	r3, #12
 8009394:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009398:	61fa      	str	r2, [r7, #28]
 800939a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	69b9      	ldr	r1, [r7, #24]
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	617b      	str	r3, [r7, #20]
   return(result);
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e3      	bne.n	8009374 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f848 	bl	8009448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093b8:	e023      	b.n	8009402 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d009      	beq.n	80093da <HAL_UART_IRQHandler+0x4ea>
 80093c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8bb 	bl	800954e <UART_Transmit_IT>
    return;
 80093d8:	e014      	b.n	8009404 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00e      	beq.n	8009404 <HAL_UART_IRQHandler+0x514>
 80093e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d008      	beq.n	8009404 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f8fb 	bl	80095ee <UART_EndTransmit_IT>
    return;
 80093f8:	e004      	b.n	8009404 <HAL_UART_IRQHandler+0x514>
    return;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <HAL_UART_IRQHandler+0x514>
      return;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <HAL_UART_IRQHandler+0x514>
      return;
 8009402:	bf00      	nop
  }
}
 8009404:	37e8      	adds	r7, #232	; 0xe8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop

0800940c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009460:	b480      	push	{r7}
 8009462:	b095      	sub	sp, #84	; 0x54
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	330c      	adds	r3, #12
 800946e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800947e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	330c      	adds	r3, #12
 8009486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009488:	643a      	str	r2, [r7, #64]	; 0x40
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800948e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e5      	bne.n	8009468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3314      	adds	r3, #20
 80094a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f023 0301 	bic.w	r3, r3, #1
 80094b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3314      	adds	r3, #20
 80094ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e5      	bne.n	800949c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d119      	bne.n	800950c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f023 0310 	bic.w	r3, r3, #16
 80094ee:	647b      	str	r3, [r7, #68]	; 0x44
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f8:	61ba      	str	r2, [r7, #24]
 80094fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6979      	ldr	r1, [r7, #20]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	613b      	str	r3, [r7, #16]
   return(result);
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e5      	bne.n	80094d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2220      	movs	r2, #32
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800951a:	bf00      	nop
 800951c:	3754      	adds	r7, #84	; 0x54
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff ff77 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b21      	cmp	r3, #33	; 0x21
 8009560:	d13e      	bne.n	80095e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956a:	d114      	bne.n	8009596 <UART_Transmit_IT+0x48>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d110      	bne.n	8009596 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009588:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	1c9a      	adds	r2, r3, #2
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	621a      	str	r2, [r3, #32]
 8009594:	e008      	b.n	80095a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	1c59      	adds	r1, r3, #1
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6211      	str	r1, [r2, #32]
 80095a0:	781a      	ldrb	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	4619      	mov	r1, r3
 80095b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10f      	bne.n	80095dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	e000      	b.n	80095e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095e0:	2302      	movs	r3, #2
  }
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009604:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff fefc 	bl	800940c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b08c      	sub	sp, #48	; 0x30
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b22      	cmp	r3, #34	; 0x22
 8009630:	f040 80ab 	bne.w	800978a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963c:	d117      	bne.n	800966e <UART_Receive_IT+0x50>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d113      	bne.n	800966e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	b29b      	uxth	r3, r3
 8009658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965c:	b29a      	uxth	r2, r3
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	1c9a      	adds	r2, r3, #2
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	629a      	str	r2, [r3, #40]	; 0x28
 800966c:	e026      	b.n	80096bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009674:	2300      	movs	r3, #0
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009680:	d007      	beq.n	8009692 <UART_Receive_IT+0x74>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <UART_Receive_IT+0x82>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	b2da      	uxtb	r2, r3
 800969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	e008      	b.n	80096b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4619      	mov	r1, r3
 80096ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d15a      	bne.n	8009786 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0220 	bic.w	r2, r2, #32
 80096de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	695a      	ldr	r2, [r3, #20]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2220      	movs	r2, #32
 8009704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	2b01      	cmp	r3, #1
 800970e:	d135      	bne.n	800977c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	330c      	adds	r3, #12
 800971c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	613b      	str	r3, [r7, #16]
   return(result);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f023 0310 	bic.w	r3, r3, #16
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	330c      	adds	r3, #12
 8009734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009736:	623a      	str	r2, [r7, #32]
 8009738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	69f9      	ldr	r1, [r7, #28]
 800973c:	6a3a      	ldr	r2, [r7, #32]
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	61bb      	str	r3, [r7, #24]
   return(result);
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e5      	bne.n	8009716 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b10      	cmp	r3, #16
 8009756:	d10a      	bne.n	800976e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff fe67 	bl	8009448 <HAL_UARTEx_RxEventCallback>
 800977a:	e002      	b.n	8009782 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff fe4f 	bl	8009420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e002      	b.n	800978c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	e000      	b.n	800978c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800978a:	2302      	movs	r3, #2
  }
}
 800978c:	4618      	mov	r0, r3
 800978e:	3730      	adds	r7, #48	; 0x30
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	b09f      	sub	sp, #124	; 0x7c
 800979a:	af00      	add	r7, sp, #0
 800979c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800979e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80097a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097aa:	68d9      	ldr	r1, [r3, #12]
 80097ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	ea40 0301 	orr.w	r3, r0, r1
 80097b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b8:	689a      	ldr	r2, [r3, #8]
 80097ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	431a      	orrs	r2, r3
 80097c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	431a      	orrs	r2, r3
 80097c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80097ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80097d8:	f021 010c 	bic.w	r1, r1, #12
 80097dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097e2:	430b      	orrs	r3, r1
 80097e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f2:	6999      	ldr	r1, [r3, #24]
 80097f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	ea40 0301 	orr.w	r3, r0, r1
 80097fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4bc5      	ldr	r3, [pc, #788]	; (8009b18 <UART_SetConfig+0x384>)
 8009804:	429a      	cmp	r2, r3
 8009806:	d004      	beq.n	8009812 <UART_SetConfig+0x7e>
 8009808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	4bc3      	ldr	r3, [pc, #780]	; (8009b1c <UART_SetConfig+0x388>)
 800980e:	429a      	cmp	r2, r3
 8009810:	d103      	bne.n	800981a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009812:	f7fe fb7f 	bl	8007f14 <HAL_RCC_GetPCLK2Freq>
 8009816:	6778      	str	r0, [r7, #116]	; 0x74
 8009818:	e002      	b.n	8009820 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800981a:	f7fe fb67 	bl	8007eec <HAL_RCC_GetPCLK1Freq>
 800981e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009828:	f040 80b6 	bne.w	8009998 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800982c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800982e:	461c      	mov	r4, r3
 8009830:	f04f 0500 	mov.w	r5, #0
 8009834:	4622      	mov	r2, r4
 8009836:	462b      	mov	r3, r5
 8009838:	1891      	adds	r1, r2, r2
 800983a:	6439      	str	r1, [r7, #64]	; 0x40
 800983c:	415b      	adcs	r3, r3
 800983e:	647b      	str	r3, [r7, #68]	; 0x44
 8009840:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009844:	1912      	adds	r2, r2, r4
 8009846:	eb45 0303 	adc.w	r3, r5, r3
 800984a:	f04f 0000 	mov.w	r0, #0
 800984e:	f04f 0100 	mov.w	r1, #0
 8009852:	00d9      	lsls	r1, r3, #3
 8009854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009858:	00d0      	lsls	r0, r2, #3
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	1911      	adds	r1, r2, r4
 8009860:	6639      	str	r1, [r7, #96]	; 0x60
 8009862:	416b      	adcs	r3, r5
 8009864:	667b      	str	r3, [r7, #100]	; 0x64
 8009866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	461a      	mov	r2, r3
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	1891      	adds	r1, r2, r2
 8009872:	63b9      	str	r1, [r7, #56]	; 0x38
 8009874:	415b      	adcs	r3, r3
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800987c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009880:	f7f6 fcfe 	bl	8000280 <__aeabi_uldivmod>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4ba5      	ldr	r3, [pc, #660]	; (8009b20 <UART_SetConfig+0x38c>)
 800988a:	fba3 2302 	umull	r2, r3, r3, r2
 800988e:	095b      	lsrs	r3, r3, #5
 8009890:	011e      	lsls	r6, r3, #4
 8009892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009894:	461c      	mov	r4, r3
 8009896:	f04f 0500 	mov.w	r5, #0
 800989a:	4622      	mov	r2, r4
 800989c:	462b      	mov	r3, r5
 800989e:	1891      	adds	r1, r2, r2
 80098a0:	6339      	str	r1, [r7, #48]	; 0x30
 80098a2:	415b      	adcs	r3, r3
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
 80098a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80098aa:	1912      	adds	r2, r2, r4
 80098ac:	eb45 0303 	adc.w	r3, r5, r3
 80098b0:	f04f 0000 	mov.w	r0, #0
 80098b4:	f04f 0100 	mov.w	r1, #0
 80098b8:	00d9      	lsls	r1, r3, #3
 80098ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098be:	00d0      	lsls	r0, r2, #3
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	1911      	adds	r1, r2, r4
 80098c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80098c8:	416b      	adcs	r3, r5
 80098ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	461a      	mov	r2, r3
 80098d2:	f04f 0300 	mov.w	r3, #0
 80098d6:	1891      	adds	r1, r2, r2
 80098d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80098da:	415b      	adcs	r3, r3
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80098e6:	f7f6 fccb 	bl	8000280 <__aeabi_uldivmod>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4b8c      	ldr	r3, [pc, #560]	; (8009b20 <UART_SetConfig+0x38c>)
 80098f0:	fba3 1302 	umull	r1, r3, r3, r2
 80098f4:	095b      	lsrs	r3, r3, #5
 80098f6:	2164      	movs	r1, #100	; 0x64
 80098f8:	fb01 f303 	mul.w	r3, r1, r3
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	3332      	adds	r3, #50	; 0x32
 8009902:	4a87      	ldr	r2, [pc, #540]	; (8009b20 <UART_SetConfig+0x38c>)
 8009904:	fba2 2303 	umull	r2, r3, r2, r3
 8009908:	095b      	lsrs	r3, r3, #5
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009910:	441e      	add	r6, r3
 8009912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009914:	4618      	mov	r0, r3
 8009916:	f04f 0100 	mov.w	r1, #0
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	1894      	adds	r4, r2, r2
 8009920:	623c      	str	r4, [r7, #32]
 8009922:	415b      	adcs	r3, r3
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
 8009926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800992a:	1812      	adds	r2, r2, r0
 800992c:	eb41 0303 	adc.w	r3, r1, r3
 8009930:	f04f 0400 	mov.w	r4, #0
 8009934:	f04f 0500 	mov.w	r5, #0
 8009938:	00dd      	lsls	r5, r3, #3
 800993a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800993e:	00d4      	lsls	r4, r2, #3
 8009940:	4622      	mov	r2, r4
 8009942:	462b      	mov	r3, r5
 8009944:	1814      	adds	r4, r2, r0
 8009946:	653c      	str	r4, [r7, #80]	; 0x50
 8009948:	414b      	adcs	r3, r1
 800994a:	657b      	str	r3, [r7, #84]	; 0x54
 800994c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	461a      	mov	r2, r3
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	1891      	adds	r1, r2, r2
 8009958:	61b9      	str	r1, [r7, #24]
 800995a:	415b      	adcs	r3, r3
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009962:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009966:	f7f6 fc8b 	bl	8000280 <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4b6c      	ldr	r3, [pc, #432]	; (8009b20 <UART_SetConfig+0x38c>)
 8009970:	fba3 1302 	umull	r1, r3, r3, r2
 8009974:	095b      	lsrs	r3, r3, #5
 8009976:	2164      	movs	r1, #100	; 0x64
 8009978:	fb01 f303 	mul.w	r3, r1, r3
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	3332      	adds	r3, #50	; 0x32
 8009982:	4a67      	ldr	r2, [pc, #412]	; (8009b20 <UART_SetConfig+0x38c>)
 8009984:	fba2 2303 	umull	r2, r3, r2, r3
 8009988:	095b      	lsrs	r3, r3, #5
 800998a:	f003 0207 	and.w	r2, r3, #7
 800998e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4432      	add	r2, r6
 8009994:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009996:	e0b9      	b.n	8009b0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800999a:	461c      	mov	r4, r3
 800999c:	f04f 0500 	mov.w	r5, #0
 80099a0:	4622      	mov	r2, r4
 80099a2:	462b      	mov	r3, r5
 80099a4:	1891      	adds	r1, r2, r2
 80099a6:	6139      	str	r1, [r7, #16]
 80099a8:	415b      	adcs	r3, r3
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80099b0:	1912      	adds	r2, r2, r4
 80099b2:	eb45 0303 	adc.w	r3, r5, r3
 80099b6:	f04f 0000 	mov.w	r0, #0
 80099ba:	f04f 0100 	mov.w	r1, #0
 80099be:	00d9      	lsls	r1, r3, #3
 80099c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099c4:	00d0      	lsls	r0, r2, #3
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	eb12 0804 	adds.w	r8, r2, r4
 80099ce:	eb43 0905 	adc.w	r9, r3, r5
 80099d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f04f 0100 	mov.w	r1, #0
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	f04f 0300 	mov.w	r3, #0
 80099e4:	008b      	lsls	r3, r1, #2
 80099e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099ea:	0082      	lsls	r2, r0, #2
 80099ec:	4640      	mov	r0, r8
 80099ee:	4649      	mov	r1, r9
 80099f0:	f7f6 fc46 	bl	8000280 <__aeabi_uldivmod>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4b49      	ldr	r3, [pc, #292]	; (8009b20 <UART_SetConfig+0x38c>)
 80099fa:	fba3 2302 	umull	r2, r3, r3, r2
 80099fe:	095b      	lsrs	r3, r3, #5
 8009a00:	011e      	lsls	r6, r3, #4
 8009a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a04:	4618      	mov	r0, r3
 8009a06:	f04f 0100 	mov.w	r1, #0
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	1894      	adds	r4, r2, r2
 8009a10:	60bc      	str	r4, [r7, #8]
 8009a12:	415b      	adcs	r3, r3
 8009a14:	60fb      	str	r3, [r7, #12]
 8009a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a1a:	1812      	adds	r2, r2, r0
 8009a1c:	eb41 0303 	adc.w	r3, r1, r3
 8009a20:	f04f 0400 	mov.w	r4, #0
 8009a24:	f04f 0500 	mov.w	r5, #0
 8009a28:	00dd      	lsls	r5, r3, #3
 8009a2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a2e:	00d4      	lsls	r4, r2, #3
 8009a30:	4622      	mov	r2, r4
 8009a32:	462b      	mov	r3, r5
 8009a34:	1814      	adds	r4, r2, r0
 8009a36:	64bc      	str	r4, [r7, #72]	; 0x48
 8009a38:	414b      	adcs	r3, r1
 8009a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f04f 0100 	mov.w	r1, #0
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	008b      	lsls	r3, r1, #2
 8009a50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a54:	0082      	lsls	r2, r0, #2
 8009a56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009a5a:	f7f6 fc11 	bl	8000280 <__aeabi_uldivmod>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4b2f      	ldr	r3, [pc, #188]	; (8009b20 <UART_SetConfig+0x38c>)
 8009a64:	fba3 1302 	umull	r1, r3, r3, r2
 8009a68:	095b      	lsrs	r3, r3, #5
 8009a6a:	2164      	movs	r1, #100	; 0x64
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	3332      	adds	r3, #50	; 0x32
 8009a76:	4a2a      	ldr	r2, [pc, #168]	; (8009b20 <UART_SetConfig+0x38c>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	095b      	lsrs	r3, r3, #5
 8009a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a82:	441e      	add	r6, r3
 8009a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a86:	4618      	mov	r0, r3
 8009a88:	f04f 0100 	mov.w	r1, #0
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	1894      	adds	r4, r2, r2
 8009a92:	603c      	str	r4, [r7, #0]
 8009a94:	415b      	adcs	r3, r3
 8009a96:	607b      	str	r3, [r7, #4]
 8009a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a9c:	1812      	adds	r2, r2, r0
 8009a9e:	eb41 0303 	adc.w	r3, r1, r3
 8009aa2:	f04f 0400 	mov.w	r4, #0
 8009aa6:	f04f 0500 	mov.w	r5, #0
 8009aaa:	00dd      	lsls	r5, r3, #3
 8009aac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ab0:	00d4      	lsls	r4, r2, #3
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	eb12 0a00 	adds.w	sl, r2, r0
 8009aba:	eb43 0b01 	adc.w	fp, r3, r1
 8009abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f04f 0100 	mov.w	r1, #0
 8009ac8:	f04f 0200 	mov.w	r2, #0
 8009acc:	f04f 0300 	mov.w	r3, #0
 8009ad0:	008b      	lsls	r3, r1, #2
 8009ad2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ad6:	0082      	lsls	r2, r0, #2
 8009ad8:	4650      	mov	r0, sl
 8009ada:	4659      	mov	r1, fp
 8009adc:	f7f6 fbd0 	bl	8000280 <__aeabi_uldivmod>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <UART_SetConfig+0x38c>)
 8009ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8009aea:	095b      	lsrs	r3, r3, #5
 8009aec:	2164      	movs	r1, #100	; 0x64
 8009aee:	fb01 f303 	mul.w	r3, r1, r3
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	3332      	adds	r3, #50	; 0x32
 8009af8:	4a09      	ldr	r2, [pc, #36]	; (8009b20 <UART_SetConfig+0x38c>)
 8009afa:	fba2 2303 	umull	r2, r3, r2, r3
 8009afe:	095b      	lsrs	r3, r3, #5
 8009b00:	f003 020f 	and.w	r2, r3, #15
 8009b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4432      	add	r2, r6
 8009b0a:	609a      	str	r2, [r3, #8]
}
 8009b0c:	bf00      	nop
 8009b0e:	377c      	adds	r7, #124	; 0x7c
 8009b10:	46bd      	mov	sp, r7
 8009b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b16:	bf00      	nop
 8009b18:	40011000 	.word	0x40011000
 8009b1c:	40011400 	.word	0x40011400
 8009b20:	51eb851f 	.word	0x51eb851f

08009b24 <__errno>:
 8009b24:	4b01      	ldr	r3, [pc, #4]	; (8009b2c <__errno+0x8>)
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	200000e0 	.word	0x200000e0

08009b30 <__libc_init_array>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	4d0d      	ldr	r5, [pc, #52]	; (8009b68 <__libc_init_array+0x38>)
 8009b34:	4c0d      	ldr	r4, [pc, #52]	; (8009b6c <__libc_init_array+0x3c>)
 8009b36:	1b64      	subs	r4, r4, r5
 8009b38:	10a4      	asrs	r4, r4, #2
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	42a6      	cmp	r6, r4
 8009b3e:	d109      	bne.n	8009b54 <__libc_init_array+0x24>
 8009b40:	4d0b      	ldr	r5, [pc, #44]	; (8009b70 <__libc_init_array+0x40>)
 8009b42:	4c0c      	ldr	r4, [pc, #48]	; (8009b74 <__libc_init_array+0x44>)
 8009b44:	f000 fc4e 	bl	800a3e4 <_init>
 8009b48:	1b64      	subs	r4, r4, r5
 8009b4a:	10a4      	asrs	r4, r4, #2
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	42a6      	cmp	r6, r4
 8009b50:	d105      	bne.n	8009b5e <__libc_init_array+0x2e>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b58:	4798      	blx	r3
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	e7ee      	b.n	8009b3c <__libc_init_array+0xc>
 8009b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b62:	4798      	blx	r3
 8009b64:	3601      	adds	r6, #1
 8009b66:	e7f2      	b.n	8009b4e <__libc_init_array+0x1e>
 8009b68:	0800a478 	.word	0x0800a478
 8009b6c:	0800a478 	.word	0x0800a478
 8009b70:	0800a478 	.word	0x0800a478
 8009b74:	0800a47c 	.word	0x0800a47c

08009b78 <memset>:
 8009b78:	4402      	add	r2, r0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d100      	bne.n	8009b82 <memset+0xa>
 8009b80:	4770      	bx	lr
 8009b82:	f803 1b01 	strb.w	r1, [r3], #1
 8009b86:	e7f9      	b.n	8009b7c <memset+0x4>

08009b88 <siprintf>:
 8009b88:	b40e      	push	{r1, r2, r3}
 8009b8a:	b500      	push	{lr}
 8009b8c:	b09c      	sub	sp, #112	; 0x70
 8009b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b90:	9002      	str	r0, [sp, #8]
 8009b92:	9006      	str	r0, [sp, #24]
 8009b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b98:	4809      	ldr	r0, [pc, #36]	; (8009bc0 <siprintf+0x38>)
 8009b9a:	9107      	str	r1, [sp, #28]
 8009b9c:	9104      	str	r1, [sp, #16]
 8009b9e:	4909      	ldr	r1, [pc, #36]	; (8009bc4 <siprintf+0x3c>)
 8009ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba4:	9105      	str	r1, [sp, #20]
 8009ba6:	6800      	ldr	r0, [r0, #0]
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	a902      	add	r1, sp, #8
 8009bac:	f000 f868 	bl	8009c80 <_svfiprintf_r>
 8009bb0:	9b02      	ldr	r3, [sp, #8]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	701a      	strb	r2, [r3, #0]
 8009bb6:	b01c      	add	sp, #112	; 0x70
 8009bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bbc:	b003      	add	sp, #12
 8009bbe:	4770      	bx	lr
 8009bc0:	200000e0 	.word	0x200000e0
 8009bc4:	ffff0208 	.word	0xffff0208

08009bc8 <__ssputs_r>:
 8009bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	688e      	ldr	r6, [r1, #8]
 8009bce:	429e      	cmp	r6, r3
 8009bd0:	4682      	mov	sl, r0
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	4690      	mov	r8, r2
 8009bd6:	461f      	mov	r7, r3
 8009bd8:	d838      	bhi.n	8009c4c <__ssputs_r+0x84>
 8009bda:	898a      	ldrh	r2, [r1, #12]
 8009bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009be0:	d032      	beq.n	8009c48 <__ssputs_r+0x80>
 8009be2:	6825      	ldr	r5, [r4, #0]
 8009be4:	6909      	ldr	r1, [r1, #16]
 8009be6:	eba5 0901 	sub.w	r9, r5, r1
 8009bea:	6965      	ldr	r5, [r4, #20]
 8009bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	444b      	add	r3, r9
 8009bf8:	106d      	asrs	r5, r5, #1
 8009bfa:	429d      	cmp	r5, r3
 8009bfc:	bf38      	it	cc
 8009bfe:	461d      	movcc	r5, r3
 8009c00:	0553      	lsls	r3, r2, #21
 8009c02:	d531      	bpl.n	8009c68 <__ssputs_r+0xa0>
 8009c04:	4629      	mov	r1, r5
 8009c06:	f000 fb47 	bl	800a298 <_malloc_r>
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	b950      	cbnz	r0, 8009c24 <__ssputs_r+0x5c>
 8009c0e:	230c      	movs	r3, #12
 8009c10:	f8ca 3000 	str.w	r3, [sl]
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c24:	6921      	ldr	r1, [r4, #16]
 8009c26:	464a      	mov	r2, r9
 8009c28:	f000 fabe 	bl	800a1a8 <memcpy>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	6126      	str	r6, [r4, #16]
 8009c3a:	6165      	str	r5, [r4, #20]
 8009c3c:	444e      	add	r6, r9
 8009c3e:	eba5 0509 	sub.w	r5, r5, r9
 8009c42:	6026      	str	r6, [r4, #0]
 8009c44:	60a5      	str	r5, [r4, #8]
 8009c46:	463e      	mov	r6, r7
 8009c48:	42be      	cmp	r6, r7
 8009c4a:	d900      	bls.n	8009c4e <__ssputs_r+0x86>
 8009c4c:	463e      	mov	r6, r7
 8009c4e:	4632      	mov	r2, r6
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	4641      	mov	r1, r8
 8009c54:	f000 fab6 	bl	800a1c4 <memmove>
 8009c58:	68a3      	ldr	r3, [r4, #8]
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	1b9b      	subs	r3, r3, r6
 8009c5e:	4432      	add	r2, r6
 8009c60:	60a3      	str	r3, [r4, #8]
 8009c62:	6022      	str	r2, [r4, #0]
 8009c64:	2000      	movs	r0, #0
 8009c66:	e7db      	b.n	8009c20 <__ssputs_r+0x58>
 8009c68:	462a      	mov	r2, r5
 8009c6a:	f000 fb6f 	bl	800a34c <_realloc_r>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d1e1      	bne.n	8009c38 <__ssputs_r+0x70>
 8009c74:	6921      	ldr	r1, [r4, #16]
 8009c76:	4650      	mov	r0, sl
 8009c78:	f000 fabe 	bl	800a1f8 <_free_r>
 8009c7c:	e7c7      	b.n	8009c0e <__ssputs_r+0x46>
	...

08009c80 <_svfiprintf_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	4698      	mov	r8, r3
 8009c86:	898b      	ldrh	r3, [r1, #12]
 8009c88:	061b      	lsls	r3, r3, #24
 8009c8a:	b09d      	sub	sp, #116	; 0x74
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	460d      	mov	r5, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	d50e      	bpl.n	8009cb2 <_svfiprintf_r+0x32>
 8009c94:	690b      	ldr	r3, [r1, #16]
 8009c96:	b963      	cbnz	r3, 8009cb2 <_svfiprintf_r+0x32>
 8009c98:	2140      	movs	r1, #64	; 0x40
 8009c9a:	f000 fafd 	bl	800a298 <_malloc_r>
 8009c9e:	6028      	str	r0, [r5, #0]
 8009ca0:	6128      	str	r0, [r5, #16]
 8009ca2:	b920      	cbnz	r0, 8009cae <_svfiprintf_r+0x2e>
 8009ca4:	230c      	movs	r3, #12
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	e0d1      	b.n	8009e52 <_svfiprintf_r+0x1d2>
 8009cae:	2340      	movs	r3, #64	; 0x40
 8009cb0:	616b      	str	r3, [r5, #20]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb6:	2320      	movs	r3, #32
 8009cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cc0:	2330      	movs	r3, #48	; 0x30
 8009cc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e6c <_svfiprintf_r+0x1ec>
 8009cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cca:	f04f 0901 	mov.w	r9, #1
 8009cce:	4623      	mov	r3, r4
 8009cd0:	469a      	mov	sl, r3
 8009cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd6:	b10a      	cbz	r2, 8009cdc <_svfiprintf_r+0x5c>
 8009cd8:	2a25      	cmp	r2, #37	; 0x25
 8009cda:	d1f9      	bne.n	8009cd0 <_svfiprintf_r+0x50>
 8009cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ce0:	d00b      	beq.n	8009cfa <_svfiprintf_r+0x7a>
 8009ce2:	465b      	mov	r3, fp
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff ff6d 	bl	8009bc8 <__ssputs_r>
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f000 80aa 	beq.w	8009e48 <_svfiprintf_r+0x1c8>
 8009cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf6:	445a      	add	r2, fp
 8009cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8009cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 80a2 	beq.w	8009e48 <_svfiprintf_r+0x1c8>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d0e:	f10a 0a01 	add.w	sl, sl, #1
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	9307      	str	r3, [sp, #28]
 8009d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	2205      	movs	r2, #5
 8009d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d24:	4851      	ldr	r0, [pc, #324]	; (8009e6c <_svfiprintf_r+0x1ec>)
 8009d26:	f7f6 fa5b 	bl	80001e0 <memchr>
 8009d2a:	9a04      	ldr	r2, [sp, #16]
 8009d2c:	b9d8      	cbnz	r0, 8009d66 <_svfiprintf_r+0xe6>
 8009d2e:	06d0      	lsls	r0, r2, #27
 8009d30:	bf44      	itt	mi
 8009d32:	2320      	movmi	r3, #32
 8009d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d38:	0711      	lsls	r1, r2, #28
 8009d3a:	bf44      	itt	mi
 8009d3c:	232b      	movmi	r3, #43	; 0x2b
 8009d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d42:	f89a 3000 	ldrb.w	r3, [sl]
 8009d46:	2b2a      	cmp	r3, #42	; 0x2a
 8009d48:	d015      	beq.n	8009d76 <_svfiprintf_r+0xf6>
 8009d4a:	9a07      	ldr	r2, [sp, #28]
 8009d4c:	4654      	mov	r4, sl
 8009d4e:	2000      	movs	r0, #0
 8009d50:	f04f 0c0a 	mov.w	ip, #10
 8009d54:	4621      	mov	r1, r4
 8009d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d5a:	3b30      	subs	r3, #48	; 0x30
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d94e      	bls.n	8009dfe <_svfiprintf_r+0x17e>
 8009d60:	b1b0      	cbz	r0, 8009d90 <_svfiprintf_r+0x110>
 8009d62:	9207      	str	r2, [sp, #28]
 8009d64:	e014      	b.n	8009d90 <_svfiprintf_r+0x110>
 8009d66:	eba0 0308 	sub.w	r3, r0, r8
 8009d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	46a2      	mov	sl, r4
 8009d74:	e7d2      	b.n	8009d1c <_svfiprintf_r+0x9c>
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	1d19      	adds	r1, r3, #4
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	9103      	str	r1, [sp, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfbb      	ittet	lt
 8009d82:	425b      	neglt	r3, r3
 8009d84:	f042 0202 	orrlt.w	r2, r2, #2
 8009d88:	9307      	strge	r3, [sp, #28]
 8009d8a:	9307      	strlt	r3, [sp, #28]
 8009d8c:	bfb8      	it	lt
 8009d8e:	9204      	strlt	r2, [sp, #16]
 8009d90:	7823      	ldrb	r3, [r4, #0]
 8009d92:	2b2e      	cmp	r3, #46	; 0x2e
 8009d94:	d10c      	bne.n	8009db0 <_svfiprintf_r+0x130>
 8009d96:	7863      	ldrb	r3, [r4, #1]
 8009d98:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9a:	d135      	bne.n	8009e08 <_svfiprintf_r+0x188>
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	1d1a      	adds	r2, r3, #4
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	9203      	str	r2, [sp, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	bfb8      	it	lt
 8009da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dac:	3402      	adds	r4, #2
 8009dae:	9305      	str	r3, [sp, #20]
 8009db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e7c <_svfiprintf_r+0x1fc>
 8009db4:	7821      	ldrb	r1, [r4, #0]
 8009db6:	2203      	movs	r2, #3
 8009db8:	4650      	mov	r0, sl
 8009dba:	f7f6 fa11 	bl	80001e0 <memchr>
 8009dbe:	b140      	cbz	r0, 8009dd2 <_svfiprintf_r+0x152>
 8009dc0:	2340      	movs	r3, #64	; 0x40
 8009dc2:	eba0 000a 	sub.w	r0, r0, sl
 8009dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8009dca:	9b04      	ldr	r3, [sp, #16]
 8009dcc:	4303      	orrs	r3, r0
 8009dce:	3401      	adds	r4, #1
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd6:	4826      	ldr	r0, [pc, #152]	; (8009e70 <_svfiprintf_r+0x1f0>)
 8009dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ddc:	2206      	movs	r2, #6
 8009dde:	f7f6 f9ff 	bl	80001e0 <memchr>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d038      	beq.n	8009e58 <_svfiprintf_r+0x1d8>
 8009de6:	4b23      	ldr	r3, [pc, #140]	; (8009e74 <_svfiprintf_r+0x1f4>)
 8009de8:	bb1b      	cbnz	r3, 8009e32 <_svfiprintf_r+0x1b2>
 8009dea:	9b03      	ldr	r3, [sp, #12]
 8009dec:	3307      	adds	r3, #7
 8009dee:	f023 0307 	bic.w	r3, r3, #7
 8009df2:	3308      	adds	r3, #8
 8009df4:	9303      	str	r3, [sp, #12]
 8009df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df8:	4433      	add	r3, r6
 8009dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfc:	e767      	b.n	8009cce <_svfiprintf_r+0x4e>
 8009dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e02:	460c      	mov	r4, r1
 8009e04:	2001      	movs	r0, #1
 8009e06:	e7a5      	b.n	8009d54 <_svfiprintf_r+0xd4>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	3401      	adds	r4, #1
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	f04f 0c0a 	mov.w	ip, #10
 8009e14:	4620      	mov	r0, r4
 8009e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e1a:	3a30      	subs	r2, #48	; 0x30
 8009e1c:	2a09      	cmp	r2, #9
 8009e1e:	d903      	bls.n	8009e28 <_svfiprintf_r+0x1a8>
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0c5      	beq.n	8009db0 <_svfiprintf_r+0x130>
 8009e24:	9105      	str	r1, [sp, #20]
 8009e26:	e7c3      	b.n	8009db0 <_svfiprintf_r+0x130>
 8009e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e7f0      	b.n	8009e14 <_svfiprintf_r+0x194>
 8009e32:	ab03      	add	r3, sp, #12
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	462a      	mov	r2, r5
 8009e38:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <_svfiprintf_r+0x1f8>)
 8009e3a:	a904      	add	r1, sp, #16
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f3af 8000 	nop.w
 8009e42:	1c42      	adds	r2, r0, #1
 8009e44:	4606      	mov	r6, r0
 8009e46:	d1d6      	bne.n	8009df6 <_svfiprintf_r+0x176>
 8009e48:	89ab      	ldrh	r3, [r5, #12]
 8009e4a:	065b      	lsls	r3, r3, #25
 8009e4c:	f53f af2c 	bmi.w	8009ca8 <_svfiprintf_r+0x28>
 8009e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e52:	b01d      	add	sp, #116	; 0x74
 8009e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e58:	ab03      	add	r3, sp, #12
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <_svfiprintf_r+0x1f8>)
 8009e60:	a904      	add	r1, sp, #16
 8009e62:	4638      	mov	r0, r7
 8009e64:	f000 f87a 	bl	8009f5c <_printf_i>
 8009e68:	e7eb      	b.n	8009e42 <_svfiprintf_r+0x1c2>
 8009e6a:	bf00      	nop
 8009e6c:	0800a43c 	.word	0x0800a43c
 8009e70:	0800a446 	.word	0x0800a446
 8009e74:	00000000 	.word	0x00000000
 8009e78:	08009bc9 	.word	0x08009bc9
 8009e7c:	0800a442 	.word	0x0800a442

08009e80 <_printf_common>:
 8009e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	4616      	mov	r6, r2
 8009e86:	4699      	mov	r9, r3
 8009e88:	688a      	ldr	r2, [r1, #8]
 8009e8a:	690b      	ldr	r3, [r1, #16]
 8009e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e90:	4293      	cmp	r3, r2
 8009e92:	bfb8      	it	lt
 8009e94:	4613      	movlt	r3, r2
 8009e96:	6033      	str	r3, [r6, #0]
 8009e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	b10a      	cbz	r2, 8009ea6 <_printf_common+0x26>
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	6033      	str	r3, [r6, #0]
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	0699      	lsls	r1, r3, #26
 8009eaa:	bf42      	ittt	mi
 8009eac:	6833      	ldrmi	r3, [r6, #0]
 8009eae:	3302      	addmi	r3, #2
 8009eb0:	6033      	strmi	r3, [r6, #0]
 8009eb2:	6825      	ldr	r5, [r4, #0]
 8009eb4:	f015 0506 	ands.w	r5, r5, #6
 8009eb8:	d106      	bne.n	8009ec8 <_printf_common+0x48>
 8009eba:	f104 0a19 	add.w	sl, r4, #25
 8009ebe:	68e3      	ldr	r3, [r4, #12]
 8009ec0:	6832      	ldr	r2, [r6, #0]
 8009ec2:	1a9b      	subs	r3, r3, r2
 8009ec4:	42ab      	cmp	r3, r5
 8009ec6:	dc26      	bgt.n	8009f16 <_printf_common+0x96>
 8009ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ecc:	1e13      	subs	r3, r2, #0
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	bf18      	it	ne
 8009ed2:	2301      	movne	r3, #1
 8009ed4:	0692      	lsls	r2, r2, #26
 8009ed6:	d42b      	bmi.n	8009f30 <_printf_common+0xb0>
 8009ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009edc:	4649      	mov	r1, r9
 8009ede:	4638      	mov	r0, r7
 8009ee0:	47c0      	blx	r8
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d01e      	beq.n	8009f24 <_printf_common+0xa4>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	68e5      	ldr	r5, [r4, #12]
 8009eea:	6832      	ldr	r2, [r6, #0]
 8009eec:	f003 0306 	and.w	r3, r3, #6
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	bf08      	it	eq
 8009ef4:	1aad      	subeq	r5, r5, r2
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	6922      	ldr	r2, [r4, #16]
 8009efa:	bf0c      	ite	eq
 8009efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f00:	2500      	movne	r5, #0
 8009f02:	4293      	cmp	r3, r2
 8009f04:	bfc4      	itt	gt
 8009f06:	1a9b      	subgt	r3, r3, r2
 8009f08:	18ed      	addgt	r5, r5, r3
 8009f0a:	2600      	movs	r6, #0
 8009f0c:	341a      	adds	r4, #26
 8009f0e:	42b5      	cmp	r5, r6
 8009f10:	d11a      	bne.n	8009f48 <_printf_common+0xc8>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e008      	b.n	8009f28 <_printf_common+0xa8>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4652      	mov	r2, sl
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	47c0      	blx	r8
 8009f20:	3001      	adds	r0, #1
 8009f22:	d103      	bne.n	8009f2c <_printf_common+0xac>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	e7c6      	b.n	8009ebe <_printf_common+0x3e>
 8009f30:	18e1      	adds	r1, r4, r3
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	2030      	movs	r0, #48	; 0x30
 8009f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f3a:	4422      	add	r2, r4
 8009f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f44:	3302      	adds	r3, #2
 8009f46:	e7c7      	b.n	8009ed8 <_printf_common+0x58>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	4638      	mov	r0, r7
 8009f50:	47c0      	blx	r8
 8009f52:	3001      	adds	r0, #1
 8009f54:	d0e6      	beq.n	8009f24 <_printf_common+0xa4>
 8009f56:	3601      	adds	r6, #1
 8009f58:	e7d9      	b.n	8009f0e <_printf_common+0x8e>
	...

08009f5c <_printf_i>:
 8009f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	460c      	mov	r4, r1
 8009f62:	4691      	mov	r9, r2
 8009f64:	7e27      	ldrb	r7, [r4, #24]
 8009f66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f68:	2f78      	cmp	r7, #120	; 0x78
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	469a      	mov	sl, r3
 8009f6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f72:	d807      	bhi.n	8009f84 <_printf_i+0x28>
 8009f74:	2f62      	cmp	r7, #98	; 0x62
 8009f76:	d80a      	bhi.n	8009f8e <_printf_i+0x32>
 8009f78:	2f00      	cmp	r7, #0
 8009f7a:	f000 80d8 	beq.w	800a12e <_printf_i+0x1d2>
 8009f7e:	2f58      	cmp	r7, #88	; 0x58
 8009f80:	f000 80a3 	beq.w	800a0ca <_printf_i+0x16e>
 8009f84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f8c:	e03a      	b.n	800a004 <_printf_i+0xa8>
 8009f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f92:	2b15      	cmp	r3, #21
 8009f94:	d8f6      	bhi.n	8009f84 <_printf_i+0x28>
 8009f96:	a001      	add	r0, pc, #4	; (adr r0, 8009f9c <_printf_i+0x40>)
 8009f98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	0800a009 	.word	0x0800a009
 8009fa4:	08009f85 	.word	0x08009f85
 8009fa8:	08009f85 	.word	0x08009f85
 8009fac:	08009f85 	.word	0x08009f85
 8009fb0:	08009f85 	.word	0x08009f85
 8009fb4:	0800a009 	.word	0x0800a009
 8009fb8:	08009f85 	.word	0x08009f85
 8009fbc:	08009f85 	.word	0x08009f85
 8009fc0:	08009f85 	.word	0x08009f85
 8009fc4:	08009f85 	.word	0x08009f85
 8009fc8:	0800a115 	.word	0x0800a115
 8009fcc:	0800a039 	.word	0x0800a039
 8009fd0:	0800a0f7 	.word	0x0800a0f7
 8009fd4:	08009f85 	.word	0x08009f85
 8009fd8:	08009f85 	.word	0x08009f85
 8009fdc:	0800a137 	.word	0x0800a137
 8009fe0:	08009f85 	.word	0x08009f85
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	08009f85 	.word	0x08009f85
 8009fec:	08009f85 	.word	0x08009f85
 8009ff0:	0800a0ff 	.word	0x0800a0ff
 8009ff4:	680b      	ldr	r3, [r1, #0]
 8009ff6:	1d1a      	adds	r2, r3, #4
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	600a      	str	r2, [r1, #0]
 8009ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a004:	2301      	movs	r3, #1
 800a006:	e0a3      	b.n	800a150 <_printf_i+0x1f4>
 800a008:	6825      	ldr	r5, [r4, #0]
 800a00a:	6808      	ldr	r0, [r1, #0]
 800a00c:	062e      	lsls	r6, r5, #24
 800a00e:	f100 0304 	add.w	r3, r0, #4
 800a012:	d50a      	bpl.n	800a02a <_printf_i+0xce>
 800a014:	6805      	ldr	r5, [r0, #0]
 800a016:	600b      	str	r3, [r1, #0]
 800a018:	2d00      	cmp	r5, #0
 800a01a:	da03      	bge.n	800a024 <_printf_i+0xc8>
 800a01c:	232d      	movs	r3, #45	; 0x2d
 800a01e:	426d      	negs	r5, r5
 800a020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a024:	485e      	ldr	r0, [pc, #376]	; (800a1a0 <_printf_i+0x244>)
 800a026:	230a      	movs	r3, #10
 800a028:	e019      	b.n	800a05e <_printf_i+0x102>
 800a02a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a02e:	6805      	ldr	r5, [r0, #0]
 800a030:	600b      	str	r3, [r1, #0]
 800a032:	bf18      	it	ne
 800a034:	b22d      	sxthne	r5, r5
 800a036:	e7ef      	b.n	800a018 <_printf_i+0xbc>
 800a038:	680b      	ldr	r3, [r1, #0]
 800a03a:	6825      	ldr	r5, [r4, #0]
 800a03c:	1d18      	adds	r0, r3, #4
 800a03e:	6008      	str	r0, [r1, #0]
 800a040:	0628      	lsls	r0, r5, #24
 800a042:	d501      	bpl.n	800a048 <_printf_i+0xec>
 800a044:	681d      	ldr	r5, [r3, #0]
 800a046:	e002      	b.n	800a04e <_printf_i+0xf2>
 800a048:	0669      	lsls	r1, r5, #25
 800a04a:	d5fb      	bpl.n	800a044 <_printf_i+0xe8>
 800a04c:	881d      	ldrh	r5, [r3, #0]
 800a04e:	4854      	ldr	r0, [pc, #336]	; (800a1a0 <_printf_i+0x244>)
 800a050:	2f6f      	cmp	r7, #111	; 0x6f
 800a052:	bf0c      	ite	eq
 800a054:	2308      	moveq	r3, #8
 800a056:	230a      	movne	r3, #10
 800a058:	2100      	movs	r1, #0
 800a05a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a05e:	6866      	ldr	r6, [r4, #4]
 800a060:	60a6      	str	r6, [r4, #8]
 800a062:	2e00      	cmp	r6, #0
 800a064:	bfa2      	ittt	ge
 800a066:	6821      	ldrge	r1, [r4, #0]
 800a068:	f021 0104 	bicge.w	r1, r1, #4
 800a06c:	6021      	strge	r1, [r4, #0]
 800a06e:	b90d      	cbnz	r5, 800a074 <_printf_i+0x118>
 800a070:	2e00      	cmp	r6, #0
 800a072:	d04d      	beq.n	800a110 <_printf_i+0x1b4>
 800a074:	4616      	mov	r6, r2
 800a076:	fbb5 f1f3 	udiv	r1, r5, r3
 800a07a:	fb03 5711 	mls	r7, r3, r1, r5
 800a07e:	5dc7      	ldrb	r7, [r0, r7]
 800a080:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a084:	462f      	mov	r7, r5
 800a086:	42bb      	cmp	r3, r7
 800a088:	460d      	mov	r5, r1
 800a08a:	d9f4      	bls.n	800a076 <_printf_i+0x11a>
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	d10b      	bne.n	800a0a8 <_printf_i+0x14c>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	07df      	lsls	r7, r3, #31
 800a094:	d508      	bpl.n	800a0a8 <_printf_i+0x14c>
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	6861      	ldr	r1, [r4, #4]
 800a09a:	4299      	cmp	r1, r3
 800a09c:	bfde      	ittt	le
 800a09e:	2330      	movle	r3, #48	; 0x30
 800a0a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0a8:	1b92      	subs	r2, r2, r6
 800a0aa:	6122      	str	r2, [r4, #16]
 800a0ac:	f8cd a000 	str.w	sl, [sp]
 800a0b0:	464b      	mov	r3, r9
 800a0b2:	aa03      	add	r2, sp, #12
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	f7ff fee2 	bl	8009e80 <_printf_common>
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d14c      	bne.n	800a15a <_printf_i+0x1fe>
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c4:	b004      	add	sp, #16
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	4835      	ldr	r0, [pc, #212]	; (800a1a0 <_printf_i+0x244>)
 800a0cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	680e      	ldr	r6, [r1, #0]
 800a0d4:	061f      	lsls	r7, r3, #24
 800a0d6:	f856 5b04 	ldr.w	r5, [r6], #4
 800a0da:	600e      	str	r6, [r1, #0]
 800a0dc:	d514      	bpl.n	800a108 <_printf_i+0x1ac>
 800a0de:	07d9      	lsls	r1, r3, #31
 800a0e0:	bf44      	itt	mi
 800a0e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a0e6:	6023      	strmi	r3, [r4, #0]
 800a0e8:	b91d      	cbnz	r5, 800a0f2 <_printf_i+0x196>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	f023 0320 	bic.w	r3, r3, #32
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	e7b0      	b.n	800a058 <_printf_i+0xfc>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	f043 0320 	orr.w	r3, r3, #32
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	2378      	movs	r3, #120	; 0x78
 800a100:	4828      	ldr	r0, [pc, #160]	; (800a1a4 <_printf_i+0x248>)
 800a102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a106:	e7e3      	b.n	800a0d0 <_printf_i+0x174>
 800a108:	065e      	lsls	r6, r3, #25
 800a10a:	bf48      	it	mi
 800a10c:	b2ad      	uxthmi	r5, r5
 800a10e:	e7e6      	b.n	800a0de <_printf_i+0x182>
 800a110:	4616      	mov	r6, r2
 800a112:	e7bb      	b.n	800a08c <_printf_i+0x130>
 800a114:	680b      	ldr	r3, [r1, #0]
 800a116:	6826      	ldr	r6, [r4, #0]
 800a118:	6960      	ldr	r0, [r4, #20]
 800a11a:	1d1d      	adds	r5, r3, #4
 800a11c:	600d      	str	r5, [r1, #0]
 800a11e:	0635      	lsls	r5, r6, #24
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	d501      	bpl.n	800a128 <_printf_i+0x1cc>
 800a124:	6018      	str	r0, [r3, #0]
 800a126:	e002      	b.n	800a12e <_printf_i+0x1d2>
 800a128:	0671      	lsls	r1, r6, #25
 800a12a:	d5fb      	bpl.n	800a124 <_printf_i+0x1c8>
 800a12c:	8018      	strh	r0, [r3, #0]
 800a12e:	2300      	movs	r3, #0
 800a130:	6123      	str	r3, [r4, #16]
 800a132:	4616      	mov	r6, r2
 800a134:	e7ba      	b.n	800a0ac <_printf_i+0x150>
 800a136:	680b      	ldr	r3, [r1, #0]
 800a138:	1d1a      	adds	r2, r3, #4
 800a13a:	600a      	str	r2, [r1, #0]
 800a13c:	681e      	ldr	r6, [r3, #0]
 800a13e:	6862      	ldr	r2, [r4, #4]
 800a140:	2100      	movs	r1, #0
 800a142:	4630      	mov	r0, r6
 800a144:	f7f6 f84c 	bl	80001e0 <memchr>
 800a148:	b108      	cbz	r0, 800a14e <_printf_i+0x1f2>
 800a14a:	1b80      	subs	r0, r0, r6
 800a14c:	6060      	str	r0, [r4, #4]
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	2300      	movs	r3, #0
 800a154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a158:	e7a8      	b.n	800a0ac <_printf_i+0x150>
 800a15a:	6923      	ldr	r3, [r4, #16]
 800a15c:	4632      	mov	r2, r6
 800a15e:	4649      	mov	r1, r9
 800a160:	4640      	mov	r0, r8
 800a162:	47d0      	blx	sl
 800a164:	3001      	adds	r0, #1
 800a166:	d0ab      	beq.n	800a0c0 <_printf_i+0x164>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	079b      	lsls	r3, r3, #30
 800a16c:	d413      	bmi.n	800a196 <_printf_i+0x23a>
 800a16e:	68e0      	ldr	r0, [r4, #12]
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	4298      	cmp	r0, r3
 800a174:	bfb8      	it	lt
 800a176:	4618      	movlt	r0, r3
 800a178:	e7a4      	b.n	800a0c4 <_printf_i+0x168>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4632      	mov	r2, r6
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	47d0      	blx	sl
 800a184:	3001      	adds	r0, #1
 800a186:	d09b      	beq.n	800a0c0 <_printf_i+0x164>
 800a188:	3501      	adds	r5, #1
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	9903      	ldr	r1, [sp, #12]
 800a18e:	1a5b      	subs	r3, r3, r1
 800a190:	42ab      	cmp	r3, r5
 800a192:	dcf2      	bgt.n	800a17a <_printf_i+0x21e>
 800a194:	e7eb      	b.n	800a16e <_printf_i+0x212>
 800a196:	2500      	movs	r5, #0
 800a198:	f104 0619 	add.w	r6, r4, #25
 800a19c:	e7f5      	b.n	800a18a <_printf_i+0x22e>
 800a19e:	bf00      	nop
 800a1a0:	0800a44d 	.word	0x0800a44d
 800a1a4:	0800a45e 	.word	0x0800a45e

0800a1a8 <memcpy>:
 800a1a8:	440a      	add	r2, r1
 800a1aa:	4291      	cmp	r1, r2
 800a1ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1b0:	d100      	bne.n	800a1b4 <memcpy+0xc>
 800a1b2:	4770      	bx	lr
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1be:	4291      	cmp	r1, r2
 800a1c0:	d1f9      	bne.n	800a1b6 <memcpy+0xe>
 800a1c2:	bd10      	pop	{r4, pc}

0800a1c4 <memmove>:
 800a1c4:	4288      	cmp	r0, r1
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	eb01 0402 	add.w	r4, r1, r2
 800a1cc:	d902      	bls.n	800a1d4 <memmove+0x10>
 800a1ce:	4284      	cmp	r4, r0
 800a1d0:	4623      	mov	r3, r4
 800a1d2:	d807      	bhi.n	800a1e4 <memmove+0x20>
 800a1d4:	1e43      	subs	r3, r0, #1
 800a1d6:	42a1      	cmp	r1, r4
 800a1d8:	d008      	beq.n	800a1ec <memmove+0x28>
 800a1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1e2:	e7f8      	b.n	800a1d6 <memmove+0x12>
 800a1e4:	4402      	add	r2, r0
 800a1e6:	4601      	mov	r1, r0
 800a1e8:	428a      	cmp	r2, r1
 800a1ea:	d100      	bne.n	800a1ee <memmove+0x2a>
 800a1ec:	bd10      	pop	{r4, pc}
 800a1ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1f6:	e7f7      	b.n	800a1e8 <memmove+0x24>

0800a1f8 <_free_r>:
 800a1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1fa:	2900      	cmp	r1, #0
 800a1fc:	d048      	beq.n	800a290 <_free_r+0x98>
 800a1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a202:	9001      	str	r0, [sp, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f1a1 0404 	sub.w	r4, r1, #4
 800a20a:	bfb8      	it	lt
 800a20c:	18e4      	addlt	r4, r4, r3
 800a20e:	f000 f8d3 	bl	800a3b8 <__malloc_lock>
 800a212:	4a20      	ldr	r2, [pc, #128]	; (800a294 <_free_r+0x9c>)
 800a214:	9801      	ldr	r0, [sp, #4]
 800a216:	6813      	ldr	r3, [r2, #0]
 800a218:	4615      	mov	r5, r2
 800a21a:	b933      	cbnz	r3, 800a22a <_free_r+0x32>
 800a21c:	6063      	str	r3, [r4, #4]
 800a21e:	6014      	str	r4, [r2, #0]
 800a220:	b003      	add	sp, #12
 800a222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a226:	f000 b8cd 	b.w	800a3c4 <__malloc_unlock>
 800a22a:	42a3      	cmp	r3, r4
 800a22c:	d90b      	bls.n	800a246 <_free_r+0x4e>
 800a22e:	6821      	ldr	r1, [r4, #0]
 800a230:	1862      	adds	r2, r4, r1
 800a232:	4293      	cmp	r3, r2
 800a234:	bf04      	itt	eq
 800a236:	681a      	ldreq	r2, [r3, #0]
 800a238:	685b      	ldreq	r3, [r3, #4]
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	bf04      	itt	eq
 800a23e:	1852      	addeq	r2, r2, r1
 800a240:	6022      	streq	r2, [r4, #0]
 800a242:	602c      	str	r4, [r5, #0]
 800a244:	e7ec      	b.n	800a220 <_free_r+0x28>
 800a246:	461a      	mov	r2, r3
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	b10b      	cbz	r3, 800a250 <_free_r+0x58>
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	d9fa      	bls.n	800a246 <_free_r+0x4e>
 800a250:	6811      	ldr	r1, [r2, #0]
 800a252:	1855      	adds	r5, r2, r1
 800a254:	42a5      	cmp	r5, r4
 800a256:	d10b      	bne.n	800a270 <_free_r+0x78>
 800a258:	6824      	ldr	r4, [r4, #0]
 800a25a:	4421      	add	r1, r4
 800a25c:	1854      	adds	r4, r2, r1
 800a25e:	42a3      	cmp	r3, r4
 800a260:	6011      	str	r1, [r2, #0]
 800a262:	d1dd      	bne.n	800a220 <_free_r+0x28>
 800a264:	681c      	ldr	r4, [r3, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	6053      	str	r3, [r2, #4]
 800a26a:	4421      	add	r1, r4
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	e7d7      	b.n	800a220 <_free_r+0x28>
 800a270:	d902      	bls.n	800a278 <_free_r+0x80>
 800a272:	230c      	movs	r3, #12
 800a274:	6003      	str	r3, [r0, #0]
 800a276:	e7d3      	b.n	800a220 <_free_r+0x28>
 800a278:	6825      	ldr	r5, [r4, #0]
 800a27a:	1961      	adds	r1, r4, r5
 800a27c:	428b      	cmp	r3, r1
 800a27e:	bf04      	itt	eq
 800a280:	6819      	ldreq	r1, [r3, #0]
 800a282:	685b      	ldreq	r3, [r3, #4]
 800a284:	6063      	str	r3, [r4, #4]
 800a286:	bf04      	itt	eq
 800a288:	1949      	addeq	r1, r1, r5
 800a28a:	6021      	streq	r1, [r4, #0]
 800a28c:	6054      	str	r4, [r2, #4]
 800a28e:	e7c7      	b.n	800a220 <_free_r+0x28>
 800a290:	b003      	add	sp, #12
 800a292:	bd30      	pop	{r4, r5, pc}
 800a294:	20000250 	.word	0x20000250

0800a298 <_malloc_r>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	1ccd      	adds	r5, r1, #3
 800a29c:	f025 0503 	bic.w	r5, r5, #3
 800a2a0:	3508      	adds	r5, #8
 800a2a2:	2d0c      	cmp	r5, #12
 800a2a4:	bf38      	it	cc
 800a2a6:	250c      	movcc	r5, #12
 800a2a8:	2d00      	cmp	r5, #0
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	db01      	blt.n	800a2b2 <_malloc_r+0x1a>
 800a2ae:	42a9      	cmp	r1, r5
 800a2b0:	d903      	bls.n	800a2ba <_malloc_r+0x22>
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	6033      	str	r3, [r6, #0]
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ba:	f000 f87d 	bl	800a3b8 <__malloc_lock>
 800a2be:	4921      	ldr	r1, [pc, #132]	; (800a344 <_malloc_r+0xac>)
 800a2c0:	680a      	ldr	r2, [r1, #0]
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	b99c      	cbnz	r4, 800a2ee <_malloc_r+0x56>
 800a2c6:	4f20      	ldr	r7, [pc, #128]	; (800a348 <_malloc_r+0xb0>)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	b923      	cbnz	r3, 800a2d6 <_malloc_r+0x3e>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f000 f862 	bl	800a398 <_sbrk_r>
 800a2d4:	6038      	str	r0, [r7, #0]
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f000 f85d 	bl	800a398 <_sbrk_r>
 800a2de:	1c43      	adds	r3, r0, #1
 800a2e0:	d123      	bne.n	800a32a <_malloc_r+0x92>
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	6033      	str	r3, [r6, #0]
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f000 f86c 	bl	800a3c4 <__malloc_unlock>
 800a2ec:	e7e3      	b.n	800a2b6 <_malloc_r+0x1e>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	1b5b      	subs	r3, r3, r5
 800a2f2:	d417      	bmi.n	800a324 <_malloc_r+0x8c>
 800a2f4:	2b0b      	cmp	r3, #11
 800a2f6:	d903      	bls.n	800a300 <_malloc_r+0x68>
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	441c      	add	r4, r3
 800a2fc:	6025      	str	r5, [r4, #0]
 800a2fe:	e004      	b.n	800a30a <_malloc_r+0x72>
 800a300:	6863      	ldr	r3, [r4, #4]
 800a302:	42a2      	cmp	r2, r4
 800a304:	bf0c      	ite	eq
 800a306:	600b      	streq	r3, [r1, #0]
 800a308:	6053      	strne	r3, [r2, #4]
 800a30a:	4630      	mov	r0, r6
 800a30c:	f000 f85a 	bl	800a3c4 <__malloc_unlock>
 800a310:	f104 000b 	add.w	r0, r4, #11
 800a314:	1d23      	adds	r3, r4, #4
 800a316:	f020 0007 	bic.w	r0, r0, #7
 800a31a:	1ac2      	subs	r2, r0, r3
 800a31c:	d0cc      	beq.n	800a2b8 <_malloc_r+0x20>
 800a31e:	1a1b      	subs	r3, r3, r0
 800a320:	50a3      	str	r3, [r4, r2]
 800a322:	e7c9      	b.n	800a2b8 <_malloc_r+0x20>
 800a324:	4622      	mov	r2, r4
 800a326:	6864      	ldr	r4, [r4, #4]
 800a328:	e7cc      	b.n	800a2c4 <_malloc_r+0x2c>
 800a32a:	1cc4      	adds	r4, r0, #3
 800a32c:	f024 0403 	bic.w	r4, r4, #3
 800a330:	42a0      	cmp	r0, r4
 800a332:	d0e3      	beq.n	800a2fc <_malloc_r+0x64>
 800a334:	1a21      	subs	r1, r4, r0
 800a336:	4630      	mov	r0, r6
 800a338:	f000 f82e 	bl	800a398 <_sbrk_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	d1dd      	bne.n	800a2fc <_malloc_r+0x64>
 800a340:	e7cf      	b.n	800a2e2 <_malloc_r+0x4a>
 800a342:	bf00      	nop
 800a344:	20000250 	.word	0x20000250
 800a348:	20000254 	.word	0x20000254

0800a34c <_realloc_r>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	4607      	mov	r7, r0
 800a350:	4614      	mov	r4, r2
 800a352:	460e      	mov	r6, r1
 800a354:	b921      	cbnz	r1, 800a360 <_realloc_r+0x14>
 800a356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a35a:	4611      	mov	r1, r2
 800a35c:	f7ff bf9c 	b.w	800a298 <_malloc_r>
 800a360:	b922      	cbnz	r2, 800a36c <_realloc_r+0x20>
 800a362:	f7ff ff49 	bl	800a1f8 <_free_r>
 800a366:	4625      	mov	r5, r4
 800a368:	4628      	mov	r0, r5
 800a36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a36c:	f000 f830 	bl	800a3d0 <_malloc_usable_size_r>
 800a370:	42a0      	cmp	r0, r4
 800a372:	d20f      	bcs.n	800a394 <_realloc_r+0x48>
 800a374:	4621      	mov	r1, r4
 800a376:	4638      	mov	r0, r7
 800a378:	f7ff ff8e 	bl	800a298 <_malloc_r>
 800a37c:	4605      	mov	r5, r0
 800a37e:	2800      	cmp	r0, #0
 800a380:	d0f2      	beq.n	800a368 <_realloc_r+0x1c>
 800a382:	4631      	mov	r1, r6
 800a384:	4622      	mov	r2, r4
 800a386:	f7ff ff0f 	bl	800a1a8 <memcpy>
 800a38a:	4631      	mov	r1, r6
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff ff33 	bl	800a1f8 <_free_r>
 800a392:	e7e9      	b.n	800a368 <_realloc_r+0x1c>
 800a394:	4635      	mov	r5, r6
 800a396:	e7e7      	b.n	800a368 <_realloc_r+0x1c>

0800a398 <_sbrk_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d06      	ldr	r5, [pc, #24]	; (800a3b4 <_sbrk_r+0x1c>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	f7f6 fd24 	bl	8000df0 <_sbrk>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_sbrk_r+0x1a>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_sbrk_r+0x1a>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	200003dc 	.word	0x200003dc

0800a3b8 <__malloc_lock>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__malloc_lock+0x8>)
 800a3ba:	f000 b811 	b.w	800a3e0 <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	200003e4 	.word	0x200003e4

0800a3c4 <__malloc_unlock>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__malloc_unlock+0x8>)
 800a3c6:	f000 b80c 	b.w	800a3e2 <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	200003e4 	.word	0x200003e4

0800a3d0 <_malloc_usable_size_r>:
 800a3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d4:	1f18      	subs	r0, r3, #4
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	bfbc      	itt	lt
 800a3da:	580b      	ldrlt	r3, [r1, r0]
 800a3dc:	18c0      	addlt	r0, r0, r3
 800a3de:	4770      	bx	lr

0800a3e0 <__retarget_lock_acquire_recursive>:
 800a3e0:	4770      	bx	lr

0800a3e2 <__retarget_lock_release_recursive>:
 800a3e2:	4770      	bx	lr

0800a3e4 <_init>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	bf00      	nop
 800a3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ea:	bc08      	pop	{r3}
 800a3ec:	469e      	mov	lr, r3
 800a3ee:	4770      	bx	lr

0800a3f0 <_fini>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	bf00      	nop
 800a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f6:	bc08      	pop	{r3}
 800a3f8:	469e      	mov	lr, r3
 800a3fa:	4770      	bx	lr

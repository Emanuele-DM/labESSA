/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
//#include "math.h"
#include "iks01a3_motion_sensors.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int volatile time_to_read = 0;
char msg[100];
int volatile ready_to_transmit = 0;
uint8_t filter_initialised = 0;
IKS01A3_MOTION_SENSOR_Axes_t MA5_filtered_accelero_axes;
IKS01A3_MOTION_SENSOR_Axes_t MA50_filtered_accelero_axes;
IKS01A3_MOTION_SENSOR_Axes_t IIRLP_filtered_accelero_axes;
IKS01A3_MOTION_SENSOR_Axes_t circular_buffer[5];
IKS01A3_MOTION_SENSOR_Axes_t circular_buffer_51[52];
uint8_t cnt = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void transmitSensorData(IKS01A3_MOTION_SENSOR_Axes_t sensorData, const char *sensorName);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  float b1 = 0.001;
  float a0 = 1-b1;
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
  IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
  MA5_filtered_accelero_axes.x = 0;
  MA5_filtered_accelero_axes.y = 0;
  MA5_filtered_accelero_axes.z = 0;
  for (int i = 0; i < 5; ++i) {
      // Set the entire structure to zero
      memset(&circular_buffer[i], 0, sizeof(circular_buffer[i]));
  }
  for (int i = 0; i <= 51; ++i) {
      // Set the entire structure to zero
      memset(&circular_buffer_51[i], 0, sizeof(circular_buffer_51[i]));
  }
  IIRLP_filtered_accelero_axes.x = 0;
  IIRLP_filtered_accelero_axes.y = 0;
  IIRLP_filtered_accelero_axes.z = 0;
  MA50_filtered_accelero_axes.x = 0;
  MA50_filtered_accelero_axes.y = 0;
  MA50_filtered_accelero_axes.z = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time_to_read == 1){
		  time_to_read = 0;
		  if (cnt < 51) ++cnt;
		  // moving average FIR filter with 5 coefficients
		  memset(&MA5_filtered_accelero_axes, 0, sizeof(MA5_filtered_accelero_axes));
		  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2DW12_0, MOTION_ACCELERO, &circular_buffer[0]);
		  memcpy(&circular_buffer_51[51], &circular_buffer[0], sizeof(circular_buffer[0]));
		  for (int i = 0; i<5; ++i){
			  MA5_filtered_accelero_axes.x += circular_buffer[i].x;
			  MA5_filtered_accelero_axes.y += circular_buffer[i].y;
			  MA5_filtered_accelero_axes.z += circular_buffer[i].z;
		  }
		  MA5_filtered_accelero_axes.x /= 5;
		  MA5_filtered_accelero_axes.y /= 5;
		  MA5_filtered_accelero_axes.z /= 5;
		  for (int j = 4; j > 0; --j) {
			  memcpy(&circular_buffer[j], &circular_buffer[j-1], sizeof(circular_buffer[j]));
		  }
		  // moving average FIR filter with 50 coefficients
		  // initially this calculates the sum of the first 51 values, which is y[25]
		  MA50_filtered_accelero_axes.x += circular_buffer_51[51].x - circular_buffer_51[0].x;
		  MA50_filtered_accelero_axes.y += circular_buffer_51[51].y - circular_buffer_51[0].y;
		  MA50_filtered_accelero_axes.z = MA50_filtered_accelero_axes.z + circular_buffer_51[51].z - circular_buffer_51[0].z;
		  if (cnt == 51 && filter_initialised == 0){
			  MA50_filtered_accelero_axes.x /= 51;
			  MA50_filtered_accelero_axes.y /= 51;
			  MA50_filtered_accelero_axes.z /= 51;
			  filter_initialised = 1;
		  }
		  for (int j = 0; j <= 50; ++j) {
			  memcpy(&circular_buffer_51[j], &circular_buffer_51[j+1], sizeof(circular_buffer_51[j+1]));
		  }
		  // IIR low pass filter
		  IIRLP_filtered_accelero_axes.x = b1*IIRLP_filtered_accelero_axes.x + a0*circular_buffer_51[51].x;
		  IIRLP_filtered_accelero_axes.y = b1*IIRLP_filtered_accelero_axes.y + a0*circular_buffer_51[51].y;
		  IIRLP_filtered_accelero_axes.z = b1*IIRLP_filtered_accelero_axes.z + a0*circular_buffer_51[51].z;
		  uint8_t length = sprintf(msg,
				  "%s, %ld, %ld, %ld\n\r%s, %ld, %ld, %ld\n\r%s, %ld, %ld, %ld\n\r%s, %ld, %ld, %ld\n\r",
				  "Raw",
				  circular_buffer[0].x,
				  circular_buffer[0].y,
				  circular_buffer[0].z,
				  "MA5",
				  MA5_filtered_accelero_axes.x,
				  MA5_filtered_accelero_axes.y,
				  MA5_filtered_accelero_axes.z,
				  "MA50",
				  MA50_filtered_accelero_axes.x,
				  MA50_filtered_accelero_axes.y,
				  MA50_filtered_accelero_axes.z,
				  "IIR",
				  IIRLP_filtered_accelero_axes.x,
				  IIRLP_filtered_accelero_axes.y,
				  IIRLP_filtered_accelero_axes.z);
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 839;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 499;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
	time_to_read = 1;
}

void HAL_UART_TxCpltCallback (UART_HandleTypeDef * huart){
	ready_to_transmit = 1;
}
//void transmitSensorData(IKS01A3_MOTION_SENSOR_Axes_t sensor_axes, const char *sensorName){
//	uint8_t length = sprintf(msg, "%s X:%ld, Y:%ld, Z:%ld\n\r",
//			sensorName, sensor_axes.x, sensor_axes.y, sensor_axes.z);
//	HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/


LAB05_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008590  08008590  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008598  08008598  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008598  08008598  00018598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  080085a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000128  080086c8  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080086c8  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f3c4  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003665  00000000  00000000  0003f51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00042b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  00044300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018382  00000000  00000000  00045968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178b3  00000000  00000000  0005dcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e76  00000000  00000000  0007559d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f0  00000000  00000000  0010a468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000128 	.word	0x20000128
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008514 	.word	0x08008514

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000012c 	.word	0x2000012c
 80001dc:	08008514 	.word	0x08008514

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2uiz>:
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	d211      	bcs.n	8000620 <__aeabi_d2uiz+0x28>
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d211      	bcs.n	8000626 <__aeabi_d2uiz+0x2e>
 8000602:	d50d      	bpl.n	8000620 <__aeabi_d2uiz+0x28>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d40e      	bmi.n	800062c <__aeabi_d2uiz+0x34>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	fa23 f002 	lsr.w	r0, r3, r2
 800061e:	4770      	bx	lr
 8000620:	f04f 0000 	mov.w	r0, #0
 8000624:	4770      	bx	lr
 8000626:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800062a:	d102      	bne.n	8000632 <__aeabi_d2uiz+0x3a>
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f003 fa3d 	bl	8003db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f899 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f9a3 	bl	8000c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000942:	f000 f977 	bl	8000c34 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000946:	f000 f8ff 	bl	8000b48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // start the timer in OC mode with interrupts
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800094a:	2100      	movs	r1, #0
 800094c:	483f      	ldr	r0, [pc, #252]	; (8000a4c <main+0x11c>)
 800094e:	f005 fc03 	bl	8006158 <HAL_TIM_OC_Start_IT>
  // repeated for each sensor:
  // sensor is first initalized then enabled
  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 8000952:	2104      	movs	r1, #4
 8000954:	2000      	movs	r0, #0
 8000956:	f002 fe55 	bl	8003604 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800095a:	2104      	movs	r1, #4
 800095c:	2000      	movs	r0, #0
 800095e:	f002 ff5f 	bl	8003820 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 8000962:	2102      	movs	r1, #2
 8000964:	2001      	movs	r0, #1
 8000966:	f002 fe4d 	bl	8003604 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800096a:	2102      	movs	r1, #2
 800096c:	2001      	movs	r0, #1
 800096e:	f002 ff57 	bl	8003820 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8000972:	2101      	movs	r1, #1
 8000974:	2002      	movs	r0, #2
 8000976:	f002 fe45 	bl	8003604 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800097a:	2101      	movs	r1, #1
 800097c:	2002      	movs	r0, #2
 800097e:	f002 ff4f 	bl	8003820 <IKS01A3_ENV_SENSOR_Enable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // every 500ms the variable time_to_read is set to 1 by the timer's callback function
	  if (time_to_read == 1) {
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <main+0x120>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d1fb      	bne.n	8000982 <main+0x52>
		  // reset the variable
		  time_to_read = 0;
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <main+0x120>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
		  // read the value of each sensor and write it to the corresponding variable
		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &humidity_value);
 8000990:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <main+0x124>)
 8000992:	2104      	movs	r1, #4
 8000994:	2000      	movs	r0, #0
 8000996:	f002 ff83 	bl	80038a0 <IKS01A3_ENV_SENSOR_GetValue>
		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &pressure_value);
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <main+0x128>)
 800099c:	2102      	movs	r1, #2
 800099e:	2001      	movs	r0, #1
 80009a0:	f002 ff7e 	bl	80038a0 <IKS01A3_ENV_SENSOR_GetValue>
		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &temperature_value);
 80009a4:	4a2d      	ldr	r2, [pc, #180]	; (8000a5c <main+0x12c>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f002 ff79 	bl	80038a0 <IKS01A3_ENV_SENSOR_GetValue>
		  // truncate the float values and convert to integer
		  uint8_t truncated_humidity_value = (uint8_t) trunc(humidity_value);
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <main+0x124>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fdc8 	bl	8000548 <__aeabi_f2d>
 80009b8:	4602      	mov	r2, r0
 80009ba:	460b      	mov	r3, r1
 80009bc:	ec43 2b10 	vmov	d0, r2, r3
 80009c0:	f007 fd76 	bl	80084b0 <trunc>
 80009c4:	ec53 2b10 	vmov	r2, r3, d0
 80009c8:	4610      	mov	r0, r2
 80009ca:	4619      	mov	r1, r3
 80009cc:	f7ff fe14 	bl	80005f8 <__aeabi_d2uiz>
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
		  uint16_t truncated_pressure_value = (uint16_t) trunc(pressure_value);
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <main+0x128>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fdb5 	bl	8000548 <__aeabi_f2d>
 80009de:	4602      	mov	r2, r0
 80009e0:	460b      	mov	r3, r1
 80009e2:	ec43 2b10 	vmov	d0, r2, r3
 80009e6:	f007 fd63 	bl	80084b0 <trunc>
 80009ea:	ec53 2b10 	vmov	r2, r3, d0
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	f7ff fe01 	bl	80005f8 <__aeabi_d2uiz>
 80009f6:	4603      	mov	r3, r0
 80009f8:	80bb      	strh	r3, [r7, #4]
		  uint8_t truncated_temperature_value = (uint8_t) trunc(temperature_value);
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <main+0x12c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fda2 	bl	8000548 <__aeabi_f2d>
 8000a04:	4602      	mov	r2, r0
 8000a06:	460b      	mov	r3, r1
 8000a08:	ec43 2b10 	vmov	d0, r2, r3
 8000a0c:	f007 fd50 	bl	80084b0 <trunc>
 8000a10:	ec53 2b10 	vmov	r2, r3, d0
 8000a14:	4610      	mov	r0, r2
 8000a16:	4619      	mov	r1, r3
 8000a18:	f7ff fdee 	bl	80005f8 <__aeabi_d2uiz>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	70fb      	strb	r3, [r7, #3]
		  length = sprintf(msg, "h: %u p: %u t: %u \n\r",
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	88b9      	ldrh	r1, [r7, #4]
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <main+0x130>)
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <main+0x134>)
 8000a2e:	f007 f911 	bl	8007c54 <siprintf>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <main+0x138>)
 8000a38:	701a      	strb	r2, [r3, #0]
				  truncated_humidity_value,
				  truncated_pressure_value,
				  truncated_temperature_value);
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, length);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <main+0x138>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <main+0x134>)
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <main+0x13c>)
 8000a46:	f006 fa74 	bl	8006f32 <HAL_UART_Transmit_IT>
	  if (time_to_read == 1) {
 8000a4a:	e79a      	b.n	8000982 <main+0x52>
 8000a4c:	20000268 	.word	0x20000268
 8000a50:	20000144 	.word	0x20000144
 8000a54:	200002b4 	.word	0x200002b4
 8000a58:	200002b0 	.word	0x200002b0
 8000a5c:	20000240 	.word	0x20000240
 8000a60:	0800852c 	.word	0x0800852c
 8000a64:	20000248 	.word	0x20000248
 8000a68:	20000244 	.word	0x20000244
 8000a6c:	200002b8 	.word	0x200002b8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 f8e0 	bl	8007c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemClock_Config+0xd4>)
 8000abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af2:	2307      	movs	r3, #7
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fe10 	bl	8005720 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b06:	f000 f93d 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 f872 	bl	8005c10 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f927 	bl	8000d84 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	f107 0320 	add.w	r3, r7, #32
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	615a      	str	r2, [r3, #20]
 8000b76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b78:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000b7a:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4199;
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000b80:	f241 0267 	movw	r2, #4199	; 0x1067
 8000b84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000b8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ba0:	4822      	ldr	r0, [pc, #136]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000ba2:	f005 fa31 	bl	8006008 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bac:	f000 f8ea 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481b      	ldr	r0, [pc, #108]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000bbe:	f005 fd2d 	bl	800661c <HAL_TIM_ConfigClockSource>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bc8:	f000 f8dc 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000bcc:	4817      	ldr	r0, [pc, #92]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000bce:	f005 fa6a 	bl	80060a6 <HAL_TIM_OC_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000bd8:	f000 f8d4 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	4619      	mov	r1, r3
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000bec:	f006 f8d2 	bl	8006d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bf6:	f000 f8c5 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 8000bfe:	f241 3387 	movw	r3, #4999	; 0x1387
 8000c02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM3_Init+0xe4>)
 8000c14:	f005 fca6 	bl	8006564 <HAL_TIM_OC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c1e:	f000 f8b1 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	; 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000268 	.word	0x20000268
 8000c30:	40000400 	.word	0x40000400

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_USART2_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f006 f914 	bl	8006e98 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f885 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200002b8 	.word	0x200002b8
 8000c84:	40004400 	.word	0x40004400

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a25      	ldr	r2, [pc, #148]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2120      	movs	r1, #32
 8000d12:	4812      	ldr	r0, [pc, #72]	; (8000d5c <MX_GPIO_Init+0xd4>)
 8000d14:	f003 fccc 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_GPIO_Init+0xd8>)
 8000d30:	f003 fa56 	bl	80041e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d34:	2320      	movs	r3, #32
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_GPIO_Init+0xd4>)
 8000d4c:	f003 fa48 	bl	80041e0 <HAL_GPIO_Init>

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	; 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020800 	.word	0x40020800

08000d64 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	time_to_read = 1;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000144 	.word	0x20000144

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dce:	2007      	movs	r0, #7
 8000dd0:	f003 f932 	bl	8004038 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d115      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_TIM_Base_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_TIM_Base_MspInit+0x4c>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	201d      	movs	r0, #29
 8000e14:	f003 f91b 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f003 f934 	bl	8004086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_UART_MspInit+0x94>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d133      	bne.n	8000eba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <HAL_UART_MspInit+0x9c>)
 8000ea6:	f003 f99b 	bl	80041e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2026      	movs	r0, #38	; 0x26
 8000eb0:	f003 f8cd 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb4:	2026      	movs	r0, #38	; 0x26
 8000eb6:	f003 f8e6 	bl	8004086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f002 ff9c 	bl	8003e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <TIM3_IRQHandler+0x10>)
 8000f2a:	f005 fa13 	bl	8006354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000268 	.word	0x20000268

08000f38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <USART2_IRQHandler+0x10>)
 8000f3e:	f006 f83d 	bl	8006fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200002b8 	.word	0x200002b8

08000f4c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <BSP_I2C1_Init+0x58>)
 8000f58:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <BSP_I2C1_Init+0x5c>)
 8000f5a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <BSP_I2C1_Init+0x60>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	4912      	ldr	r1, [pc, #72]	; (8000fac <BSP_I2C1_Init+0x60>)
 8000f64:	600a      	str	r2, [r1, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d117      	bne.n	8000f9a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <BSP_I2C1_Init+0x58>)
 8000f6c:	f004 f862 	bl	8005034 <HAL_I2C_GetState>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d111      	bne.n	8000f9a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <BSP_I2C1_Init+0x58>)
 8000f78:	f000 f8e2 	bl	8001140 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10b      	bne.n	8000f9a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <BSP_I2C1_Init+0x58>)
 8000f84:	f000 f8a8 	bl	80010d8 <MX_I2C1_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f8e:	f06f 0307 	mvn.w	r3, #7
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	e001      	b.n	8000f9a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200002fc 	.word	0x200002fc
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	20000148 	.word	0x20000148

08000fb0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <BSP_I2C1_DeInit+0x48>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d014      	beq.n	8000fec <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <BSP_I2C1_DeInit+0x48>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <BSP_I2C1_DeInit+0x48>)
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <BSP_I2C1_DeInit+0x48>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <BSP_I2C1_DeInit+0x4c>)
 8000fd6:	f000 f8fd 	bl	80011d4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <BSP_I2C1_DeInit+0x4c>)
 8000fdc:	f003 fcc6 	bl	800496c <HAL_I2C_DeInit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000fe6:	f06f 0307 	mvn.w	r3, #7
 8000fea:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000148 	.word	0x20000148
 8000ffc:	200002fc 	.word	0x200002fc

08001000 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af04      	add	r7, sp, #16
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	461a      	mov	r2, r3
 800100a:	4603      	mov	r3, r0
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	460b      	mov	r3, r1
 8001010:	81bb      	strh	r3, [r7, #12]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800101a:	89ba      	ldrh	r2, [r7, #12]
 800101c:	89f9      	ldrh	r1, [r7, #14]
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <BSP_I2C1_WriteReg+0x60>)
 8001030:	f003 fce0 	bl	80049f4 <HAL_I2C_Mem_Write>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00c      	beq.n	8001054 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <BSP_I2C1_WriteReg+0x60>)
 800103c:	f004 f808 	bl	8005050 <HAL_I2C_GetError>
 8001040:	4603      	mov	r3, r0
 8001042:	2b04      	cmp	r3, #4
 8001044:	d103      	bne.n	800104e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001046:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e002      	b.n	8001054 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800104e:	f06f 0303 	mvn.w	r3, #3
 8001052:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001054:	697b      	ldr	r3, [r7, #20]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200002fc 	.word	0x200002fc

08001064 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af04      	add	r7, sp, #16
 800106a:	60ba      	str	r2, [r7, #8]
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	81fb      	strh	r3, [r7, #14]
 8001072:	460b      	mov	r3, r1
 8001074:	81bb      	strh	r3, [r7, #12]
 8001076:	4613      	mov	r3, r2
 8001078:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800107e:	89ba      	ldrh	r2, [r7, #12]
 8001080:	89f9      	ldrh	r1, [r7, #14]
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <BSP_I2C1_ReadReg+0x60>)
 8001094:	f003 fda8 	bl	8004be8 <HAL_I2C_Mem_Read>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00c      	beq.n	80010b8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <BSP_I2C1_ReadReg+0x60>)
 80010a0:	f003 ffd6 	bl	8005050 <HAL_I2C_GetError>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d103      	bne.n	80010b2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010aa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e002      	b.n	80010b8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80010b2:	f06f 0303 	mvn.w	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80010b8:	697b      	ldr	r3, [r7, #20]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200002fc 	.word	0x200002fc

080010c8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010cc:	f002 fed8 	bl	8003e80 <HAL_GetTick>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <MX_I2C1_Init+0x60>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_I2C1_Init+0x64>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f003 fae1 	bl	80046e4 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40005400 	.word	0x40005400
 800113c:	00061a80 	.word	0x00061a80

08001140 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <I2C1_MspInit+0x8c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <I2C1_MspInit+0x8c>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <I2C1_MspInit+0x8c>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116a:	2312      	movs	r3, #18
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001176:	2304      	movs	r3, #4
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4813      	ldr	r0, [pc, #76]	; (80011d0 <I2C1_MspInit+0x90>)
 8001182:	f003 f82d 	bl	80041e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001198:	2304      	movs	r3, #4
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480b      	ldr	r0, [pc, #44]	; (80011d0 <I2C1_MspInit+0x90>)
 80011a4:	f003 f81c 	bl	80041e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <I2C1_MspInit+0x8c>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <I2C1_MspInit+0x8c>)
 80011b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b6:	6413      	str	r3, [r2, #64]	; 0x40
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <I2C1_MspInit+0x8c>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400

080011d4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <I2C1_MspDeInit+0x30>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a08      	ldr	r2, [pc, #32]	; (8001204 <I2C1_MspDeInit+0x30>)
 80011e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <I2C1_MspDeInit+0x34>)
 80011ee:	f003 f97b 	bl	80044e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80011f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <I2C1_MspDeInit+0x34>)
 80011f8:	f003 f976 	bl	80044e8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f006 fcd8 	bl	8007bf0 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20018000 	.word	0x20018000
 800126c:	00000400 	.word	0x00000400
 8001270:	2000014c 	.word	0x2000014c
 8001274:	20000370 	.word	0x20000370

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b8:	4c0b      	ldr	r4, [pc, #44]	; (80012e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012c6:	f7ff ffd7 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f006 fc97 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fb2f 	bl	8000930 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80012e0:	080085a0 	.word	0x080085a0
  ldr r2, =_sbss
 80012e4:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80012e8:	20000370 	.word	0x20000370

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e034      	b.n	8001372 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	7b1a      	ldrb	r2, [r3, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HTS221_RegisterBusIO+0x8c>)
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HTS221_RegisterBusIO+0x90>)
 800134a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	69da      	ldr	r2, [r3, #28]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4798      	blx	r3
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	e002      	b.n	8001372 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	080019bf 	.word	0x080019bf
 8001380:	08001a21 	.word	0x08001a21

08001384 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001392:	2b00      	cmp	r3, #0
 8001394:	d108      	bne.n	80013a8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 faac 	bl	80018f4 <HTS221_Initialize>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e004      	b.n	80013b2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d111      	bne.n	80013f0 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f880 	bl	80014d2 <HTS221_HUM_Disable>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	e00d      	b.n	80013fa <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f967 	bl	80016b2 <HTS221_TEMP_Disable>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e004      	b.n	80013fa <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3320      	adds	r3, #32
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fc30 	bl	8001c78 <hts221_device_id_get>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e000      	b.n	8001426 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HTS221_GetCapabilities+0x54>)
 800145c:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HTS221_GetCapabilities+0x54>)
 8001462:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	41480000 	.word	0x41480000

08001488 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e015      	b.n	80014ca <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3320      	adds	r3, #32
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fbf3 	bl	8001c9a <hts221_power_on_set>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e004      	b.n	80014ca <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e015      	b.n	8001514 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10b      	bne.n	800150a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3320      	adds	r3, #32
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fbce 	bl	8001c9a <hts221_power_on_set>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	e004      	b.n	8001514 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001526:	6839      	ldr	r1, [r7, #0]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f96f 	bl	800180c <HTS221_GetOutputDataRate>
 800152e:	4603      	mov	r3, r0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001544:	ed97 0a00 	vldr	s0, [r7]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f9a3 	bl	8001894 <HTS221_SetOutputDataRate>
 800154e:	4603      	mov	r3, r0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3320      	adds	r3, #32
 8001566:	f107 020c 	add.w	r2, r7, #12
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fc58 	bl	8001e22 <hts221_hum_adc_point_0_get>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	e06b      	b.n	8001656 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f103 0220 	add.w	r2, r3, #32
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	3304      	adds	r3, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f000 fbaa 	bl	8001ce6 <hts221_hum_rh_point_0_get>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e05b      	b.n	8001656 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f103 0220 	add.w	r2, r3, #32
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	3308      	adds	r3, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f000 fc5c 	bl	8001e6a <hts221_hum_adc_point_1_get>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	e04b      	b.n	8001656 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f103 0220 	add.w	r2, r3, #32
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	330c      	adds	r3, #12
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f000 fba8 	bl	8001d22 <hts221_hum_rh_point_1_get>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	e03b      	b.n	8001656 <HTS221_HUM_GetHumidity+0xfe>
 80015de:	2300      	movs	r3, #0
 80015e0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3320      	adds	r3, #32
 80015e6:	f107 021c 	add.w	r2, r7, #28
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fafd 	bl	8001bec <hts221_humidity_raw_get>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	e02b      	b.n	8001656 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80015fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f99a 	bl	800194c <Linear_Interpolation>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	d503      	bpl.n	800163a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001660 <HTS221_HUM_GetHumidity+0x108>
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	dd02      	ble.n	8001654 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HTS221_HUM_GetHumidity+0x10c>)
 8001652:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	42c80000 	.word	0x42c80000
 8001664:	42c80000 	.word	0x42c80000

08001668 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e015      	b.n	80016aa <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10b      	bne.n	80016a0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3320      	adds	r3, #32
 800168c:	2101      	movs	r1, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fb03 	bl	8001c9a <hts221_power_on_set>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e004      	b.n	80016aa <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e015      	b.n	80016f4 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10b      	bne.n	80016ea <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3320      	adds	r3, #32
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fade 	bl	8001c9a <hts221_power_on_set>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	e004      	b.n	80016f4 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f87f 	bl	800180c <HTS221_GetOutputDataRate>
 800170e:	4603      	mov	r3, r0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001724:	ed97 0a00 	vldr	s0, [r7]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f8b3 	bl	8001894 <HTS221_SetOutputDataRate>
 800172e:	4603      	mov	r3, r0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3320      	adds	r3, #32
 8001746:	f107 020c 	add.w	r2, r7, #12
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fbb0 	bl	8001eb2 <hts221_temp_adc_point_0_get>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	e052      	b.n	8001804 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f103 0220 	add.w	r2, r3, #32
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	3304      	adds	r3, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f000 faf6 	bl	8001d5e <hts221_temp_deg_point_0_get>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	e042      	b.n	8001804 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 0220 	add.w	r2, r3, #32
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	3308      	adds	r3, #8
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f000 fbb4 	bl	8001efa <hts221_temp_adc_point_1_get>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	e032      	b.n	8001804 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f103 0220 	add.w	r2, r3, #32
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	330c      	adds	r3, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f000 fb07 	bl	8001dc0 <hts221_temp_deg_point_1_get>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
 80017bc:	e022      	b.n	8001804 <HTS221_TEMP_GetTemperature+0xcc>
 80017be:	2300      	movs	r3, #0
 80017c0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3320      	adds	r3, #32
 80017c6:	f107 021c 	add.w	r2, r7, #28
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fa30 	bl	8001c32 <hts221_temperature_raw_get>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	e012      	b.n	8001804 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80017de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f8aa 	bl	800194c <Linear_Interpolation>
 80017f8:	eef0 7a40 	vmov.f32	s15, s0
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3320      	adds	r3, #32
 800181e:	f107 020b 	add.w	r2, r7, #11
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f983 	bl	8001b30 <hts221_data_rate_get>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	e025      	b.n	8001882 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001836:	7afb      	ldrb	r3, [r7, #11]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d81d      	bhi.n	8001878 <HTS221_GetOutputDataRate+0x6c>
 800183c:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HTS221_GetOutputDataRate+0x38>)
 800183e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001842:	bf00      	nop
 8001844:	08001855 	.word	0x08001855
 8001848:	0800185f 	.word	0x0800185f
 800184c:	08001869 	.word	0x08001869
 8001850:	08001871 	.word	0x08001871
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
      break;
 800185c:	e010      	b.n	8001880 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001864:	601a      	str	r2, [r3, #0]
      break;
 8001866:	e00b      	b.n	8001880 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HTS221_GetOutputDataRate+0x80>)
 800186c:	601a      	str	r2, [r3, #0]
      break;
 800186e:	e007      	b.n	8001880 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HTS221_GetOutputDataRate+0x84>)
 8001874:	601a      	str	r2, [r3, #0]
      break;
 8001876:	e003      	b.n	8001880 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
 800187c:	60fb      	str	r3, [r7, #12]
      break;
 800187e:	bf00      	nop
  }

  return ret;
 8001880:	68fb      	ldr	r3, [r7, #12]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40e00000 	.word	0x40e00000
 8001890:	41480000 	.word	0x41480000

08001894 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80018a0:	edd7 7a00 	vldr	s15, [r7]
 80018a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d801      	bhi.n	80018b6 <HTS221_SetOutputDataRate+0x22>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00b      	b.n	80018ce <HTS221_SetOutputDataRate+0x3a>
 80018b6:	edd7 7a00 	vldr	s15, [r7]
 80018ba:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80018be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	d801      	bhi.n	80018cc <HTS221_SetOutputDataRate+0x38>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e000      	b.n	80018ce <HTS221_SetOutputDataRate+0x3a>
 80018cc:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80018ce:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3320      	adds	r3, #32
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f902 	bl	8001ae2 <hts221_data_rate_set>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	e000      	b.n	80018ec <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3320      	adds	r3, #32
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f9c9 	bl	8001c9a <hts221_power_on_set>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e017      	b.n	8001944 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3320      	adds	r3, #32
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f940 	bl	8001ba0 <hts221_block_data_update_set>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e00b      	b.n	8001944 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800192c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffaf 	bl	8001894 <HTS221_SetOutputDataRate>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	e000      	b.n	8001944 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	ed93 7a03 	vldr	s14, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	edd3 7a01 	vldr	s15, [r3, #4]
 8001964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001968:	edd7 7a00 	vldr	s15, [r7]
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edd3 6a02 	vldr	s13, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	edd3 7a01 	vldr	s15, [r3, #4]
 800197c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	ed93 6a00 	vldr	s12, [r3]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	edd3 7a03 	vldr	s15, [r3, #12]
 800198c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001990:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001994:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	edd3 6a02 	vldr	s13, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80019b0:	eeb0 0a67 	vmov.f32	s0, s15
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80019be:	b590      	push	{r4, r7, lr}
 80019c0:	b087      	sub	sp, #28
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	461a      	mov	r2, r3
 80019ca:	460b      	mov	r3, r1
 80019cc:	72fb      	strb	r3, [r7, #11]
 80019ce:	4613      	mov	r3, r2
 80019d0:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10e      	bne.n	80019fc <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	695c      	ldr	r4, [r3, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	7b1b      	ldrb	r3, [r3, #12]
 80019e6:	b298      	uxth	r0, r3
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	b299      	uxth	r1, r3
 80019f2:	893b      	ldrh	r3, [r7, #8]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	47a0      	blx	r4
 80019f8:	4603      	mov	r3, r0
 80019fa:	e00d      	b.n	8001a18 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	695c      	ldr	r4, [r3, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	7b1b      	ldrb	r3, [r3, #12]
 8001a04:	b298      	uxth	r0, r3
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	b299      	uxth	r1, r3
 8001a10:	893b      	ldrh	r3, [r7, #8]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	47a0      	blx	r4
 8001a16:	4603      	mov	r3, r0
  }
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}

08001a20 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	72fb      	strb	r3, [r7, #11]
 8001a30:	4613      	mov	r3, r2
 8001a32:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10e      	bne.n	8001a5e <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	691c      	ldr	r4, [r3, #16]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	7b1b      	ldrb	r3, [r3, #12]
 8001a48:	b298      	uxth	r0, r3
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
 8001a4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	b299      	uxth	r1, r3
 8001a54:	893b      	ldrh	r3, [r7, #8]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	47a0      	blx	r4
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	e00d      	b.n	8001a7a <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	691c      	ldr	r4, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	7b1b      	ldrb	r3, [r3, #12]
 8001a66:	b298      	uxth	r0, r3
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	b299      	uxth	r1, r3
 8001a72:	893b      	ldrh	r3, [r7, #8]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	47a0      	blx	r4
 8001a78:	4603      	mov	r3, r0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd90      	pop	{r4, r7, pc}

08001a82 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8001a82:	b590      	push	{r4, r7, lr}
 8001a84:	b087      	sub	sp, #28
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	72fb      	strb	r3, [r7, #11]
 8001a92:	4613      	mov	r3, r2
 8001a94:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685c      	ldr	r4, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	68d8      	ldr	r0, [r3, #12]
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	7af9      	ldrb	r1, [r7, #11]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	47a0      	blx	r4
 8001aa6:	6178      	str	r0, [r7, #20]

  return ret;
 8001aa8:	697b      	ldr	r3, [r7, #20]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001ab2:	b590      	push	{r4, r7, lr}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	461a      	mov	r2, r3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	72fb      	strb	r3, [r7, #11]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681c      	ldr	r4, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	68d8      	ldr	r0, [r3, #12]
 8001ace:	893b      	ldrh	r3, [r7, #8]
 8001ad0:	7af9      	ldrb	r1, [r7, #11]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	47a0      	blx	r4
 8001ad6:	6178      	str	r0, [r7, #20]

  return ret;
 8001ad8:	697b      	ldr	r3, [r7, #20]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001aee:	f107 0208 	add.w	r2, r7, #8
 8001af2:	2301      	movs	r3, #1
 8001af4:	2120      	movs	r1, #32
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffc3 	bl	8001a82 <hts221_read_reg>
 8001afc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	7a3b      	ldrb	r3, [r7, #8]
 8001b0e:	f362 0301 	bfi	r3, r2, #0, #2
 8001b12:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001b14:	f107 0208 	add.w	r2, r7, #8
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2120      	movs	r1, #32
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffc8 	bl	8001ab2 <hts221_write_reg>
 8001b22:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001b3a:	f107 0208 	add.w	r2, r7, #8
 8001b3e:	2301      	movs	r3, #1
 8001b40:	2120      	movs	r1, #32
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff9d 	bl	8001a82 <hts221_read_reg>
 8001b48:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8001b4a:	7a3b      	ldrb	r3, [r7, #8]
 8001b4c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d81a      	bhi.n	8001b8c <hts221_data_rate_get+0x5c>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <hts221_data_rate_get+0x2c>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	08001b75 	.word	0x08001b75
 8001b64:	08001b7d 	.word	0x08001b7d
 8001b68:	08001b85 	.word	0x08001b85
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      break;
 8001b72:	e00f      	b.n	8001b94 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
      break;
 8001b7a:	e00b      	b.n	8001b94 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	701a      	strb	r2, [r3, #0]
      break;
 8001b82:	e007      	b.n	8001b94 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2203      	movs	r2, #3
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e003      	b.n	8001b94 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	701a      	strb	r2, [r3, #0]
      break;
 8001b92:	bf00      	nop
  }

  return ret;
 8001b94:	68fb      	ldr	r3, [r7, #12]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop

08001ba0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001bac:	f107 0208 	add.w	r2, r7, #8
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff64 	bl	8001a82 <hts221_read_reg>
 8001bba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	7a3b      	ldrb	r3, [r7, #8]
 8001bcc:	f362 0382 	bfi	r3, r2, #2, #1
 8001bd0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001bd2:	f107 0208 	add.w	r2, r7, #8
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2120      	movs	r1, #32
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff69 	bl	8001ab2 <hts221_write_reg>
 8001be0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001bf6:	f107 0208 	add.w	r2, r7, #8
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	2128      	movs	r1, #40	; 0x28
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff3f 	bl	8001a82 <hts221_read_reg>
 8001c04:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001c06:	7a7b      	ldrb	r3, [r7, #9]
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	7a3b      	ldrb	r3, [r7, #8]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001c3c:	f107 0208 	add.w	r2, r7, #8
 8001c40:	2302      	movs	r3, #2
 8001c42:	212a      	movs	r1, #42	; 0x2a
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff1c 	bl	8001a82 <hts221_read_reg>
 8001c4a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001c4c:	7a7b      	ldrb	r3, [r7, #9]
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	7a3b      	ldrb	r3, [r7, #8]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001c82:	2301      	movs	r3, #1
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	210f      	movs	r1, #15
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fefa 	bl	8001a82 <hts221_read_reg>
 8001c8e:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001ca6:	f107 0208 	add.w	r2, r7, #8
 8001caa:	2301      	movs	r3, #1
 8001cac:	2120      	movs	r1, #32
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fee7 	bl	8001a82 <hts221_read_reg>
 8001cb4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10f      	bne.n	8001cdc <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	7a3b      	ldrb	r3, [r7, #8]
 8001cc6:	f362 13c7 	bfi	r3, r2, #7, #1
 8001cca:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001ccc:	f107 0208 	add.w	r2, r7, #8
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff feec 	bl	8001ab2 <hts221_write_reg>
 8001cda:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001cf0:	f107 020b 	add.w	r2, r7, #11
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	2130      	movs	r1, #48	; 0x30
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fec2 	bl	8001a82 <hts221_read_reg>
 8001cfe:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001d18:	68fb      	ldr	r3, [r7, #12]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001d2c:	f107 020b 	add.w	r2, r7, #11
 8001d30:	2301      	movs	r3, #1
 8001d32:	2131      	movs	r1, #49	; 0x31
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fea4 	bl	8001a82 <hts221_read_reg>
 8001d3a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001d54:	68fb      	ldr	r3, [r7, #12]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001d68:	f107 020f 	add.w	r2, r7, #15
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	2132      	movs	r1, #50	; 0x32
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fe86 	bl	8001a82 <hts221_read_reg>
 8001d76:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11b      	bne.n	8001db6 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001d7e:	f107 0210 	add.w	r2, r7, #16
 8001d82:	2301      	movs	r3, #1
 8001d84:	2135      	movs	r1, #53	; 0x35
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fe7b 	bl	8001a82 <hts221_read_reg>
 8001d8c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001d8e:	7c3b      	ldrb	r3, [r7, #16]
 8001d90:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	4413      	add	r3, r2
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001db6:	697b      	ldr	r3, [r7, #20]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001dca:	f107 020f 	add.w	r2, r7, #15
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2133      	movs	r1, #51	; 0x33
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fe55 	bl	8001a82 <hts221_read_reg>
 8001dd8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11b      	bne.n	8001e18 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001de0:	f107 0210 	add.w	r2, r7, #16
 8001de4:	2301      	movs	r3, #1
 8001de6:	2135      	movs	r1, #53	; 0x35
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fe4a 	bl	8001a82 <hts221_read_reg>
 8001dee:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001df0:	7c3b      	ldrb	r3, [r7, #16]
 8001df2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	4413      	add	r3, r2
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001e18:	697b      	ldr	r3, [r7, #20]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001e2c:	f107 0208 	add.w	r2, r7, #8
 8001e30:	2302      	movs	r3, #2
 8001e32:	2136      	movs	r1, #54	; 0x36
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fe24 	bl	8001a82 <hts221_read_reg>
 8001e3a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001e3c:	7a7b      	ldrb	r3, [r7, #9]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	7a3b      	ldrb	r3, [r7, #8]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001e4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001e60:	68fb      	ldr	r3, [r7, #12]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	2302      	movs	r3, #2
 8001e7a:	213a      	movs	r1, #58	; 0x3a
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff fe00 	bl	8001a82 <hts221_read_reg>
 8001e82:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	7a3b      	ldrb	r3, [r7, #8]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001e96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001ebc:	f107 0208 	add.w	r2, r7, #8
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	213c      	movs	r1, #60	; 0x3c
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fddc 	bl	8001a82 <hts221_read_reg>
 8001eca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001ecc:	7a7b      	ldrb	r3, [r7, #9]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	7a3b      	ldrb	r3, [r7, #8]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001ede:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001f04:	f107 0208 	add.w	r2, r7, #8
 8001f08:	2302      	movs	r3, #2
 8001f0a:	213e      	movs	r1, #62	; 0x3e
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fdb8 	bl	8001a82 <hts221_read_reg>
 8001f12:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	7a3b      	ldrb	r3, [r7, #8]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001f26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001f38:	68fb      	ldr	r3, [r7, #12]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e051      	b.n	8002004 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	7b1a      	ldrb	r2, [r3, #12]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <LPS22HH_RegisterBusIO+0xcc>)
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <LPS22HH_RegisterBusIO+0xd0>)
 8001fa2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e020      	b.n	8002004 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4798      	blx	r3
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e016      	b.n	8002004 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d112      	bne.n	8002004 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9e7 	bl	80023c6 <LPS22HH_Write_Reg>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002004:	68fb      	ldr	r3, [r7, #12]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	080026f7 	.word	0x080026f7
 8002014:	0800272d 	.word	0x0800272d

08002018 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fb16 	bl	800265c <LPS22HH_Initialize>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e004      	b.n	8002046 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800205c:	2b01      	cmp	r3, #1
 800205e:	d111      	bne.n	8002084 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f87f 	bl	8002164 <LPS22HH_PRESS_Disable>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	e00d      	b.n	800208e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f920 	bl	80022b8 <LPS22HH_TEMP_Disable>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e004      	b.n	800208e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3320      	adds	r3, #32
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fd26 	bl	8002af8 <lps22hh_device_id_get>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e000      	b.n	80020ba <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2200      	movs	r2, #0
 80020d2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <LPS22HH_GetCapabilities+0x54>)
 80020f8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <LPS22HH_GetCapabilities+0x54>)
 80020fe:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	43480000 	.word	0x43480000

0800211c <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e014      	b.n	800215c <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0220 	add.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800213e:	4619      	mov	r1, r3
 8002140:	4610      	mov	r0, r2
 8002142:	f000 fb97 	bl	8002874 <lps22hh_data_rate_set>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	e004      	b.n	800215c <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e024      	b.n	80021c4 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11a      	bne.n	80021ba <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0220 	add.w	r2, r3, #32
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3333      	adds	r3, #51	; 0x33
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f000 fbbd 	bl	8002910 <lps22hh_data_rate_get>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	e010      	b.n	80021c4 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3320      	adds	r3, #32
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fb63 	bl	8002874 <lps22hh_data_rate_set>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	e004      	b.n	80021c4 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f90f 	bl	80023fc <LPS22HH_GetOutputDataRate>
 80021de:	4603      	mov	r3, r0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d106      	bne.n	800220c <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80021fe:	ed97 0a00 	vldr	s0, [r7]
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f95e 	bl	80024c4 <LPS22HH_SetOutputDataRate_When_Enabled>
 8002208:	4603      	mov	r3, r0
 800220a:	e005      	b.n	8002218 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800220c:	ed97 0a00 	vldr	s0, [r7]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f9c9 	bl	80025a8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8002216:	4603      	mov	r3, r0
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2204      	movs	r2, #4
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f005 fd06 	bl	8007c44 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3320      	adds	r3, #32
 800223c:	f107 020c 	add.w	r2, r7, #12
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fc0c 	bl	8002a60 <lps22hh_pressure_raw_get>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	e009      	b.n	8002268 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fab4 	bl	80027c4 <lps22hh_from_lsb_to_hpa>
 800225c:	eef0 7a40 	vmov.f32	s15, s0
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e014      	b.n	80022b0 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0220 	add.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f000 faed 	bl	8002874 <lps22hh_data_rate_set>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	e004      	b.n	80022b0 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e024      	b.n	8002318 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11a      	bne.n	800230e <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f103 0220 	add.w	r2, r3, #32
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3333      	adds	r3, #51	; 0x33
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f000 fb13 	bl	8002910 <lps22hh_data_rate_get>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	e010      	b.n	8002318 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3320      	adds	r3, #32
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fab9 	bl	8002874 <lps22hh_data_rate_set>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	e004      	b.n	8002318 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800232a:	6839      	ldr	r1, [r7, #0]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f865 	bl	80023fc <LPS22HH_GetOutputDataRate>
 8002332:	4603      	mov	r3, r0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800234e:	2b01      	cmp	r3, #1
 8002350:	d106      	bne.n	8002360 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002352:	ed97 0a00 	vldr	s0, [r7]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8b4 	bl	80024c4 <LPS22HH_SetOutputDataRate_When_Enabled>
 800235c:	4603      	mov	r3, r0
 800235e:	e005      	b.n	800236c <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002360:	ed97 0a00 	vldr	s0, [r7]
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f91f 	bl	80025a8 <LPS22HH_SetOutputDataRate_When_Disabled>
 800236a:	4603      	mov	r3, r0
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	2202      	movs	r2, #2
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f005 fc5c 	bl	8007c44 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3320      	adds	r3, #32
 8002390:	f107 020c 	add.w	r2, r7, #12
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fb8b 	bl	8002ab2 <lps22hh_temperature_raw_get>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e00a      	b.n	80023be <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80023a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fa21 	bl	80027f4 <lps22hh_from_lsb_to_celsius>
 80023b2:	eef0 7a40 	vmov.f32	s15, s0
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
 80023d2:	4613      	mov	r3, r2
 80023d4:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f103 0020 	add.w	r0, r3, #32
 80023dc:	1cba      	adds	r2, r7, #2
 80023de:	78f9      	ldrb	r1, [r7, #3]
 80023e0:	2301      	movs	r3, #1
 80023e2:	f000 f9d6 	bl	8002792 <lps22hh_write_reg>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	e000      	b.n	80023f4 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3320      	adds	r3, #32
 800240e:	f107 020b 	add.w	r2, r7, #11
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fa7b 	bl	8002910 <lps22hh_data_rate_get>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	e03d      	b.n	80024a2 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	2b07      	cmp	r3, #7
 800242a:	d835      	bhi.n	8002498 <LPS22HH_GetOutputDataRate+0x9c>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <LPS22HH_GetOutputDataRate+0x38>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002455 	.word	0x08002455
 8002438:	0800245f 	.word	0x0800245f
 800243c:	08002469 	.word	0x08002469
 8002440:	08002471 	.word	0x08002471
 8002444:	08002479 	.word	0x08002479
 8002448:	08002481 	.word	0x08002481
 800244c:	08002489 	.word	0x08002489
 8002450:	08002491 	.word	0x08002491
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
      break;
 800245c:	e020      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002464:	601a      	str	r2, [r3, #0]
      break;
 8002466:	e01b      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4a10      	ldr	r2, [pc, #64]	; (80024ac <LPS22HH_GetOutputDataRate+0xb0>)
 800246c:	601a      	str	r2, [r3, #0]
      break;
 800246e:	e017      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <LPS22HH_GetOutputDataRate+0xb4>)
 8002474:	601a      	str	r2, [r3, #0]
      break;
 8002476:	e013      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <LPS22HH_GetOutputDataRate+0xb8>)
 800247c:	601a      	str	r2, [r3, #0]
      break;
 800247e:	e00f      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <LPS22HH_GetOutputDataRate+0xbc>)
 8002484:	601a      	str	r2, [r3, #0]
      break;
 8002486:	e00b      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <LPS22HH_GetOutputDataRate+0xc0>)
 800248c:	601a      	str	r2, [r3, #0]
      break;
 800248e:	e007      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <LPS22HH_GetOutputDataRate+0xc4>)
 8002494:	601a      	str	r2, [r3, #0]
      break;
 8002496:	e003      	b.n	80024a0 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	60fb      	str	r3, [r7, #12]
      break;
 800249e:	bf00      	nop
  }

  return ret;
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	41200000 	.word	0x41200000
 80024b0:	41c80000 	.word	0x41c80000
 80024b4:	42480000 	.word	0x42480000
 80024b8:	42960000 	.word	0x42960000
 80024bc:	42c80000 	.word	0x42c80000
 80024c0:	43480000 	.word	0x43480000

080024c4 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80024d0:	edd7 7a00 	vldr	s15, [r7]
 80024d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	d801      	bhi.n	80024e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e037      	b.n	8002556 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80024e6:	edd7 7a00 	vldr	s15, [r7]
 80024ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	d801      	bhi.n	80024fc <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e02c      	b.n	8002556 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80024fc:	edd7 7a00 	vldr	s15, [r7]
 8002500:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d801      	bhi.n	8002512 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800250e:	2303      	movs	r3, #3
 8002510:	e021      	b.n	8002556 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002512:	edd7 7a00 	vldr	s15, [r7]
 8002516:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800259c <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 800251a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d801      	bhi.n	8002528 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8002524:	2304      	movs	r3, #4
 8002526:	e016      	b.n	8002556 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002528:	edd7 7a00 	vldr	s15, [r7]
 800252c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80025a0 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	d801      	bhi.n	800253e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800253a:	2305      	movs	r3, #5
 800253c:	e00b      	b.n	8002556 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800253e:	edd7 7a00 	vldr	s15, [r7]
 8002542:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80025a4 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8002546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d801      	bhi.n	8002554 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8002550:	2306      	movs	r3, #6
 8002552:	e000      	b.n	8002556 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002554:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8002556:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3320      	adds	r3, #32
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f987 	bl	8002874 <lps22hh_data_rate_set>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
 8002570:	e00f      	b.n	8002592 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f103 0220 	add.w	r2, r3, #32
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3333      	adds	r3, #51	; 0x33
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f000 f9c6 	bl	8002910 <lps22hh_data_rate_get>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e000      	b.n	8002592 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	42480000 	.word	0x42480000
 80025a0:	42960000 	.word	0x42960000
 80025a4:	42c80000 	.word	0x42c80000

080025a8 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80025b4:	edd7 7a00 	vldr	s15, [r7]
 80025b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	d801      	bhi.n	80025ca <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e037      	b.n	800263a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80025ca:	edd7 7a00 	vldr	s15, [r7]
 80025ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d801      	bhi.n	80025e0 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 80025dc:	2302      	movs	r3, #2
 80025de:	e02c      	b.n	800263a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80025e0:	edd7 7a00 	vldr	s15, [r7]
 80025e4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80025e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	d801      	bhi.n	80025f6 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e021      	b.n	800263a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80025f6:	edd7 7a00 	vldr	s15, [r7]
 80025fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002650 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 80025fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d801      	bhi.n	800260c <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8002608:	2304      	movs	r3, #4
 800260a:	e016      	b.n	800263a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800260c:	edd7 7a00 	vldr	s15, [r7]
 8002610:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002654 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8002614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	d801      	bhi.n	8002622 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800261e:	2305      	movs	r3, #5
 8002620:	e00b      	b.n	800263a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002622:	edd7 7a00 	vldr	s15, [r7]
 8002626:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002658 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 800262a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	d801      	bhi.n	8002638 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8002634:	2306      	movs	r3, #6
 8002636:	e000      	b.n	800263a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002638:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	42480000 	.word	0x42480000
 8002654:	42960000 	.word	0x42960000
 8002658:	42c80000 	.word	0x42c80000

0800265c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d00b      	beq.n	8002684 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3320      	adds	r3, #32
 8002670:	2111      	movs	r1, #17
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fa9d 	bl	8002bb2 <lps22hh_i3c_interface_set>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	e034      	b.n	80026ee <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3320      	adds	r3, #32
 8002688:	2110      	movs	r1, #16
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f8f2 	bl	8002874 <lps22hh_data_rate_set>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e028      	b.n	80026ee <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3320      	adds	r3, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fa5f 	bl	8002b66 <lps22hh_lp_bandwidth_set>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e01c      	b.n	80026ee <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3320      	adds	r3, #32
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f8b4 	bl	8002828 <lps22hh_block_data_update_set>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e010      	b.n	80026ee <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3320      	adds	r3, #32
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fa21 	bl	8002b1a <lps22hh_auto_increment_set>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e004      	b.n	80026ee <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2203      	movs	r2, #3
 80026e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80026f6:	b590      	push	{r4, r7, lr}
 80026f8:	b087      	sub	sp, #28
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	461a      	mov	r2, r3
 8002702:	460b      	mov	r3, r1
 8002704:	72fb      	strb	r3, [r7, #11]
 8002706:	4613      	mov	r3, r2
 8002708:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	695c      	ldr	r4, [r3, #20]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	7b1b      	ldrb	r3, [r3, #12]
 8002716:	b298      	uxth	r0, r3
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	b299      	uxth	r1, r3
 800271c:	893b      	ldrh	r3, [r7, #8]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	47a0      	blx	r4
 8002722:	4603      	mov	r3, r0
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}

0800272c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	461a      	mov	r2, r3
 8002738:	460b      	mov	r3, r1
 800273a:	72fb      	strb	r3, [r7, #11]
 800273c:	4613      	mov	r3, r2
 800273e:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	691c      	ldr	r4, [r3, #16]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	7b1b      	ldrb	r3, [r3, #12]
 800274c:	b298      	uxth	r0, r3
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	b299      	uxth	r1, r3
 8002752:	893b      	ldrh	r3, [r7, #8]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	47a0      	blx	r4
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}

08002762 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002762:	b590      	push	{r4, r7, lr}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	461a      	mov	r2, r3
 800276e:	460b      	mov	r3, r1
 8002770:	72fb      	strb	r3, [r7, #11]
 8002772:	4613      	mov	r3, r2
 8002774:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685c      	ldr	r4, [r3, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	68d8      	ldr	r0, [r3, #12]
 800277e:	893b      	ldrh	r3, [r7, #8]
 8002780:	7af9      	ldrb	r1, [r7, #11]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	47a0      	blx	r4
 8002786:	6178      	str	r0, [r7, #20]

  return ret;
 8002788:	697b      	ldr	r3, [r7, #20]
}
 800278a:	4618      	mov	r0, r3
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd90      	pop	{r4, r7, pc}

08002792 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002792:	b590      	push	{r4, r7, lr}
 8002794:	b087      	sub	sp, #28
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	461a      	mov	r2, r3
 800279e:	460b      	mov	r3, r1
 80027a0:	72fb      	strb	r3, [r7, #11]
 80027a2:	4613      	mov	r3, r2
 80027a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681c      	ldr	r4, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68d8      	ldr	r0, [r3, #12]
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	7af9      	ldrb	r1, [r7, #11]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	47a0      	blx	r4
 80027b6:	6178      	str	r0, [r7, #20]

  return ret;
 80027b8:	697b      	ldr	r3, [r7, #20]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
	...

080027c4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027f0 <lps22hh_from_lsb_to_hpa+0x2c>
 80027da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027de:	eef0 7a66 	vmov.f32	s15, s13
}
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	49800000 	.word	0x49800000

080027f4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80027fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002824 <lps22hh_from_lsb_to_celsius+0x30>
 800280e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002812:	eef0 7a66 	vmov.f32	s15, s13
}
 8002816:	eeb0 0a67 	vmov.f32	s0, s15
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	42c80000 	.word	0x42c80000

08002828 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002834:	f107 0208 	add.w	r2, r7, #8
 8002838:	2301      	movs	r3, #1
 800283a:	2110      	movs	r1, #16
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff90 	bl	8002762 <lps22hh_read_reg>
 8002842:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	b2da      	uxtb	r2, r3
 8002852:	7a3b      	ldrb	r3, [r7, #8]
 8002854:	f362 0341 	bfi	r3, r2, #1, #1
 8002858:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800285a:	f107 0208 	add.w	r2, r7, #8
 800285e:	2301      	movs	r3, #1
 8002860:	2110      	movs	r1, #16
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff95 	bl	8002792 <lps22hh_write_reg>
 8002868:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002880:	f107 0210 	add.w	r2, r7, #16
 8002884:	2301      	movs	r3, #1
 8002886:	2110      	movs	r1, #16
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff6a 	bl	8002762 <lps22hh_read_reg>
 800288e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002896:	f107 020c 	add.w	r2, r7, #12
 800289a:	2301      	movs	r3, #1
 800289c:	2111      	movs	r1, #17
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff5f 	bl	8002762 <lps22hh_read_reg>
 80028a4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10f      	bne.n	80028cc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	7c3b      	ldrb	r3, [r7, #16]
 80028b6:	f362 1306 	bfi	r3, r2, #4, #3
 80028ba:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80028bc:	f107 0210 	add.w	r2, r7, #16
 80028c0:	2301      	movs	r3, #1
 80028c2:	2110      	movs	r1, #16
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff64 	bl	8002792 <lps22hh_write_reg>
 80028ca:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	7b3b      	ldrb	r3, [r7, #12]
 80028de:	f362 0341 	bfi	r3, r2, #1, #1
 80028e2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	08db      	lsrs	r3, r3, #3
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	7b3b      	ldrb	r3, [r7, #12]
 80028f0:	f362 0300 	bfi	r3, r2, #0, #1
 80028f4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80028f6:	f107 020c 	add.w	r2, r7, #12
 80028fa:	2301      	movs	r3, #1
 80028fc:	2111      	movs	r1, #17
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff47 	bl	8002792 <lps22hh_write_reg>
 8002904:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002906:	697b      	ldr	r3, [r7, #20]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800291a:	f107 0210 	add.w	r2, r7, #16
 800291e:	2301      	movs	r3, #1
 8002920:	2110      	movs	r1, #16
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ff1d 	bl	8002762 <lps22hh_read_reg>
 8002928:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002930:	f107 020c 	add.w	r2, r7, #12
 8002934:	2301      	movs	r3, #1
 8002936:	2111      	movs	r1, #17
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff12 	bl	8002762 <lps22hh_read_reg>
 800293e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 8086 	bne.w	8002a54 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002948:	f107 020c 	add.w	r2, r7, #12
 800294c:	2301      	movs	r3, #1
 800294e:	2111      	movs	r1, #17
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff06 	bl	8002762 <lps22hh_read_reg>
 8002956:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002958:	7b3b      	ldrb	r3, [r7, #12]
 800295a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	011a      	lsls	r2, r3, #4
 8002962:	7b3b      	ldrb	r3, [r7, #12]
 8002964:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800296e:	7c3a      	ldrb	r2, [r7, #16]
 8002970:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002974:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002976:	4413      	add	r3, r2
 8002978:	2b15      	cmp	r3, #21
 800297a:	d867      	bhi.n	8002a4c <lps22hh_data_rate_get+0x13c>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <lps22hh_data_rate_get+0x74>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029dd 	.word	0x080029dd
 8002988:	080029ed 	.word	0x080029ed
 800298c:	080029f5 	.word	0x080029f5
 8002990:	080029fd 	.word	0x080029fd
 8002994:	08002a05 	.word	0x08002a05
 8002998:	08002a0d 	.word	0x08002a0d
 800299c:	08002a3d 	.word	0x08002a3d
 80029a0:	08002a45 	.word	0x08002a45
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	08002a4d 	.word	0x08002a4d
 80029ac:	08002a4d 	.word	0x08002a4d
 80029b0:	08002a4d 	.word	0x08002a4d
 80029b4:	08002a4d 	.word	0x08002a4d
 80029b8:	08002a4d 	.word	0x08002a4d
 80029bc:	08002a4d 	.word	0x08002a4d
 80029c0:	08002a4d 	.word	0x08002a4d
 80029c4:	08002a4d 	.word	0x08002a4d
 80029c8:	08002a15 	.word	0x08002a15
 80029cc:	08002a1d 	.word	0x08002a1d
 80029d0:	08002a25 	.word	0x08002a25
 80029d4:	08002a2d 	.word	0x08002a2d
 80029d8:	08002a35 	.word	0x08002a35
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
        break;
 80029e2:	e038      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2208      	movs	r2, #8
 80029e8:	701a      	strb	r2, [r3, #0]
        break;
 80029ea:	e034      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
        break;
 80029f2:	e030      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
        break;
 80029fa:	e02c      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2203      	movs	r2, #3
 8002a00:	701a      	strb	r2, [r3, #0]
        break;
 8002a02:	e028      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2204      	movs	r2, #4
 8002a08:	701a      	strb	r2, [r3, #0]
        break;
 8002a0a:	e024      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2205      	movs	r2, #5
 8002a10:	701a      	strb	r2, [r3, #0]
        break;
 8002a12:	e020      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2211      	movs	r2, #17
 8002a18:	701a      	strb	r2, [r3, #0]
        break;
 8002a1a:	e01c      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2212      	movs	r2, #18
 8002a20:	701a      	strb	r2, [r3, #0]
        break;
 8002a22:	e018      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2213      	movs	r2, #19
 8002a28:	701a      	strb	r2, [r3, #0]
        break;
 8002a2a:	e014      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2214      	movs	r2, #20
 8002a30:	701a      	strb	r2, [r3, #0]
        break;
 8002a32:	e010      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2215      	movs	r2, #21
 8002a38:	701a      	strb	r2, [r3, #0]
        break;
 8002a3a:	e00c      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2206      	movs	r2, #6
 8002a40:	701a      	strb	r2, [r3, #0]
        break;
 8002a42:	e008      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2207      	movs	r2, #7
 8002a48:	701a      	strb	r2, [r3, #0]
        break;
 8002a4a:	e004      	b.n	8002a56 <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
        break;
 8002a52:	e000      	b.n	8002a56 <lps22hh_data_rate_get+0x146>
    }
  }
 8002a54:	bf00      	nop

  return ret;
 8002a56:	697b      	ldr	r3, [r7, #20]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8002a6a:	f107 0208 	add.w	r2, r7, #8
 8002a6e:	2303      	movs	r3, #3
 8002a70:	2128      	movs	r1, #40	; 0x28
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fe75 	bl	8002762 <lps22hh_read_reg>
 8002a78:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8002a7a:	7abb      	ldrb	r3, [r7, #10]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	7a7a      	ldrb	r2, [r7, #9]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	7a3a      	ldrb	r2, [r7, #8]
 8002a98:	441a      	add	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	021a      	lsls	r2, r3, #8
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	601a      	str	r2, [r3, #0]

  return ret;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8002abc:	f107 0208 	add.w	r2, r7, #8
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	212b      	movs	r1, #43	; 0x2b
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fe4c 	bl	8002762 <lps22hh_read_reg>
 8002aca:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8002acc:	7a7b      	ldrb	r3, [r7, #9]
 8002ace:	b21a      	sxth	r2, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	7a3b      	ldrb	r3, [r7, #8]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	801a      	strh	r2, [r3, #0]

  return ret;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8002b02:	2301      	movs	r3, #1
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	210f      	movs	r1, #15
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fe2a 	bl	8002762 <lps22hh_read_reg>
 8002b0e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002b26:	f107 0208 	add.w	r2, r7, #8
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2111      	movs	r1, #17
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fe17 	bl	8002762 <lps22hh_read_reg>
 8002b34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	7a3b      	ldrb	r3, [r7, #8]
 8002b46:	f362 1304 	bfi	r3, r2, #4, #1
 8002b4a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002b4c:	f107 0208 	add.w	r2, r7, #8
 8002b50:	2301      	movs	r3, #1
 8002b52:	2111      	movs	r1, #17
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fe1c 	bl	8002792 <lps22hh_write_reg>
 8002b5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002b72:	f107 0208 	add.w	r2, r7, #8
 8002b76:	2301      	movs	r3, #1
 8002b78:	2110      	movs	r1, #16
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fdf1 	bl	8002762 <lps22hh_read_reg>
 8002b80:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	7a3b      	ldrb	r3, [r7, #8]
 8002b92:	f362 0383 	bfi	r3, r2, #2, #2
 8002b96:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002b98:	f107 0208 	add.w	r2, r7, #8
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fdf6 	bl	8002792 <lps22hh_write_reg>
 8002ba6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8002bbe:	f107 0208 	add.w	r2, r7, #8
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	210e      	movs	r1, #14
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fdcb 	bl	8002762 <lps22hh_read_reg>
 8002bcc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d118      	bne.n	8002c06 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	7a3b      	ldrb	r3, [r7, #8]
 8002bde:	f362 0341 	bfi	r3, r2, #1, #1
 8002be2:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	7a3b      	ldrb	r3, [r7, #8]
 8002bf0:	f362 13c7 	bfi	r3, r2, #7, #1
 8002bf4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8002bf6:	f107 0208 	add.w	r2, r7, #8
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	210e      	movs	r1, #14
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fdc7 	bl	8002792 <lps22hh_write_reg>
 8002c04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e034      	b.n	8002c92 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	7b1a      	ldrb	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <STTS751_RegisterBusIO+0x8c>)
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <STTS751_RegisterBusIO+0x90>)
 8002c6a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4798      	blx	r3
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	e002      	b.n	8002c92 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	08003135 	.word	0x08003135
 8002ca0:	080031a3 	.word	0x080031a3

08002ca4 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d127      	bne.n	8002d06 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3320      	adds	r3, #32
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fc54 	bl	800356a <stts751_pin_event_route_set>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	e020      	b.n	8002d10 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3320      	adds	r3, #32
 8002cda:	2103      	movs	r1, #3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fbb7 	bl	8003450 <stts751_resolution_set>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	e010      	b.n	8002d10 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3320      	adds	r3, #32
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fad5 	bl	80032a4 <stts751_temp_data_rate_set>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	e004      	b.n	8002d10 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f877 	bl	8002e1e <STTS751_TEMP_Disable>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e004      	b.n	8002d46 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3320      	adds	r3, #32
 8002d5c:	f107 020c 	add.w	r2, r7, #12
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fc27 	bl	80035b6 <stts751_device_id_get>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	e003      	b.n	8002d7c <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8002d74:	7b7a      	ldrb	r2, [r7, #13]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2200      	movs	r2, #0
 8002d92:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002dba:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e012      	b.n	8002e16 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002df6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8b6 	bl	8002f6c <STTS751_TEMP_SetOutputDataRate>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	e004      	b.n	8002e16 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e01c      	b.n	8002e6e <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3334      	adds	r3, #52	; 0x34
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f81c 	bl	8002e78 <STTS751_TEMP_GetOutputDataRate>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e010      	b.n	8002e6e <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3320      	adds	r3, #32
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fa26 	bl	80032a4 <stts751_temp_data_rate_set>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e004      	b.n	8002e6e <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3320      	adds	r3, #32
 8002e8a:	f107 020b 	add.w	r2, r7, #11
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fa5d 	bl	8003350 <stts751_temp_data_rate_get>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	e060      	b.n	8002f64 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	2b90      	cmp	r3, #144	; 0x90
 8002ea6:	d021      	beq.n	8002eec <STTS751_TEMP_GetOutputDataRate+0x74>
 8002ea8:	2b90      	cmp	r3, #144	; 0x90
 8002eaa:	dc56      	bgt.n	8002f5a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	dc1b      	bgt.n	8002ee8 <STTS751_TEMP_GetOutputDataRate+0x70>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db52      	blt.n	8002f5a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8002eb4:	2b09      	cmp	r3, #9
 8002eb6:	d850      	bhi.n	8002f5a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ef7 	.word	0x08002ef7
 8002ec4:	08002f01 	.word	0x08002f01
 8002ec8:	08002f0b 	.word	0x08002f0b
 8002ecc:	08002f15 	.word	0x08002f15
 8002ed0:	08002f1f 	.word	0x08002f1f
 8002ed4:	08002f29 	.word	0x08002f29
 8002ed8:	08002f33 	.word	0x08002f33
 8002edc:	08002f3d 	.word	0x08002f3d
 8002ee0:	08002f47 	.word	0x08002f47
 8002ee4:	08002f51 	.word	0x08002f51
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d136      	bne.n	8002f5a <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
      break;
 8002ef4:	e035      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8002efc:	601a      	str	r2, [r3, #0]
      break;
 8002efe:	e030      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8002f06:	601a      	str	r2, [r3, #0]
      break;
 8002f08:	e02b      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8002f10:	601a      	str	r2, [r3, #0]
      break;
 8002f12:	e026      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002f1a:	601a      	str	r2, [r3, #0]
      break;
 8002f1c:	e021      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f24:	601a      	str	r2, [r3, #0]
      break;
 8002f26:	e01c      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f2e:	601a      	str	r2, [r3, #0]
      break;
 8002f30:	e017      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002f38:	601a      	str	r2, [r3, #0]
      break;
 8002f3a:	e012      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002f42:	601a      	str	r2, [r3, #0]
      break;
 8002f44:	e00d      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002f4c:	601a      	str	r2, [r3, #0]
      break;
 8002f4e:	e008      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002f56:	601a      	str	r2, [r3, #0]
      break;
 8002f58:	e003      	b.n	8002f62 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	60fb      	str	r3, [r7, #12]
      break;
 8002f60:	bf00      	nop
  }

  return ret;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3320      	adds	r3, #32
 8002f7c:	f107 020e 	add.w	r2, r7, #14
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa8a 	bl	800349c <stts751_resolution_get>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e0a5      	b.n	80030e0 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8002f94:	edd7 7a00 	vldr	s15, [r7]
 8002f98:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002f9c:	eef4 7a47 	vcmp.f32	s15, s14
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	d10e      	bne.n	8002fc4 <STTS751_TEMP_SetOutputDataRate+0x58>
 8002fa6:	7bbb      	ldrb	r3, [r7, #14]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d10b      	bne.n	8002fc4 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3320      	adds	r3, #32
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fa4c 	bl	8003450 <stts751_resolution_set>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	e08d      	b.n	80030e0 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8002fc4:	edd7 7a00 	vldr	s15, [r7]
 8002fc8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80030e8 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8002fcc:	eef4 7a47 	vcmp.f32	s15, s14
 8002fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd4:	d111      	bne.n	8002ffa <STTS751_TEMP_SetOutputDataRate+0x8e>
 8002fd6:	7bbb      	ldrb	r3, [r7, #14]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d002      	beq.n	8002fe2 <STTS751_TEMP_SetOutputDataRate+0x76>
 8002fdc:	7bbb      	ldrb	r3, [r7, #14]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d10b      	bne.n	8002ffa <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3320      	adds	r3, #32
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fa31 	bl	8003450 <stts751_resolution_set>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff8:	e072      	b.n	80030e0 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8002ffa:	edd7 7a00 	vldr	s15, [r7]
 8002ffe:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80030ec <STTS751_TEMP_SetOutputDataRate+0x180>
 8003002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	d801      	bhi.n	8003010 <STTS751_TEMP_SetOutputDataRate+0xa4>
 800300c:	2300      	movs	r3, #0
 800300e:	e058      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003010:	edd7 7a00 	vldr	s15, [r7]
 8003014:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8003018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003020:	d801      	bhi.n	8003026 <STTS751_TEMP_SetOutputDataRate+0xba>
 8003022:	2301      	movs	r3, #1
 8003024:	e04d      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003026:	edd7 7a00 	vldr	s15, [r7]
 800302a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800302e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	d801      	bhi.n	800303c <STTS751_TEMP_SetOutputDataRate+0xd0>
 8003038:	2302      	movs	r3, #2
 800303a:	e042      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 800303c:	edd7 7a00 	vldr	s15, [r7]
 8003040:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304c:	d801      	bhi.n	8003052 <STTS751_TEMP_SetOutputDataRate+0xe6>
 800304e:	2303      	movs	r3, #3
 8003050:	e037      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003052:	edd7 7a00 	vldr	s15, [r7]
 8003056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800305a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003062:	d801      	bhi.n	8003068 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8003064:	2304      	movs	r3, #4
 8003066:	e02c      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003068:	edd7 7a00 	vldr	s15, [r7]
 800306c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	d801      	bhi.n	800307e <STTS751_TEMP_SetOutputDataRate+0x112>
 800307a:	2305      	movs	r3, #5
 800307c:	e021      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 800307e:	edd7 7a00 	vldr	s15, [r7]
 8003082:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	d801      	bhi.n	8003094 <STTS751_TEMP_SetOutputDataRate+0x128>
 8003090:	2306      	movs	r3, #6
 8003092:	e016      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003094:	edd7 7a00 	vldr	s15, [r7]
 8003098:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800309c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	d801      	bhi.n	80030aa <STTS751_TEMP_SetOutputDataRate+0x13e>
 80030a6:	2307      	movs	r3, #7
 80030a8:	e00b      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80030aa:	edd7 7a00 	vldr	s15, [r7]
 80030ae:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ba:	d801      	bhi.n	80030c0 <STTS751_TEMP_SetOutputDataRate+0x154>
 80030bc:	2308      	movs	r3, #8
 80030be:	e000      	b.n	80030c2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80030c0:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80030c2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3320      	adds	r3, #32
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f8e9 	bl	80032a4 <stts751_temp_data_rate_set>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e000      	b.n	80030e0 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	42000000 	.word	0x42000000
 80030ec:	3d800000 	.word	0x3d800000

080030f0 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3320      	adds	r3, #32
 80030fe:	f107 020e 	add.w	r2, r7, #14
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fa01 	bl	800350c <stts751_temperature_raw_get>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	e00a      	b.n	800312c <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8003116:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f8a8 	bl	8003270 <stts751_from_lsb_to_celsius>
 8003120:	eef0 7a40 	vmov.f32	s15, s0
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	460b      	mov	r3, r1
 8003142:	72fb      	strb	r3, [r7, #11]
 8003144:	4613      	mov	r3, r2
 8003146:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11f      	bne.n	8003198 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8003158:	2300      	movs	r3, #0
 800315a:	83fb      	strh	r3, [r7, #30]
 800315c:	e018      	b.n	8003190 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	695c      	ldr	r4, [r3, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	7b1b      	ldrb	r3, [r3, #12]
 8003166:	b298      	uxth	r0, r3
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	b29a      	uxth	r2, r3
 800316c:	8bfb      	ldrh	r3, [r7, #30]
 800316e:	4413      	add	r3, r2
 8003170:	b299      	uxth	r1, r3
 8003172:	8bfb      	ldrh	r3, [r7, #30]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	441a      	add	r2, r3
 8003178:	2301      	movs	r3, #1
 800317a:	47a0      	blx	r4
 800317c:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	e007      	b.n	800319a <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800318a:	8bfb      	ldrh	r3, [r7, #30]
 800318c:	3301      	adds	r3, #1
 800318e:	83fb      	strh	r3, [r7, #30]
 8003190:	8bfa      	ldrh	r2, [r7, #30]
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d3e2      	bcc.n	800315e <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8003198:	69bb      	ldr	r3, [r7, #24]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}

080031a2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80031a2:	b590      	push	{r4, r7, lr}
 80031a4:	b089      	sub	sp, #36	; 0x24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	461a      	mov	r2, r3
 80031ae:	460b      	mov	r3, r1
 80031b0:	72fb      	strb	r3, [r7, #11]
 80031b2:	4613      	mov	r3, r2
 80031b4:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11f      	bne.n	8003206 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	83fb      	strh	r3, [r7, #30]
 80031ca:	e018      	b.n	80031fe <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	691c      	ldr	r4, [r3, #16]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	7b1b      	ldrb	r3, [r3, #12]
 80031d4:	b298      	uxth	r0, r3
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	8bfb      	ldrh	r3, [r7, #30]
 80031dc:	4413      	add	r3, r2
 80031de:	b299      	uxth	r1, r3
 80031e0:	8bfb      	ldrh	r3, [r7, #30]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	441a      	add	r2, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	47a0      	blx	r4
 80031ea:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e007      	b.n	8003208 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 80031f8:	8bfb      	ldrh	r3, [r7, #30]
 80031fa:	3301      	adds	r3, #1
 80031fc:	83fb      	strh	r3, [r7, #30]
 80031fe:	8bfa      	ldrh	r2, [r7, #30]
 8003200:	893b      	ldrh	r3, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	d3e2      	bcc.n	80031cc <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8003206:	69bb      	ldr	r3, [r7, #24]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3724      	adds	r7, #36	; 0x24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	461a      	mov	r2, r3
 800321c:	460b      	mov	r3, r1
 800321e:	72fb      	strb	r3, [r7, #11]
 8003220:	4613      	mov	r3, r2
 8003222:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685c      	ldr	r4, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68d8      	ldr	r0, [r3, #12]
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	7af9      	ldrb	r1, [r7, #11]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	47a0      	blx	r4
 8003234:	6178      	str	r0, [r7, #20]

  return ret;
 8003236:	697b      	ldr	r3, [r7, #20]
}
 8003238:	4618      	mov	r0, r3
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	460b      	mov	r3, r1
 800324e:	72fb      	strb	r3, [r7, #11]
 8003250:	4613      	mov	r3, r2
 8003252:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681c      	ldr	r4, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68d8      	ldr	r0, [r3, #12]
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	7af9      	ldrb	r1, [r7, #11]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	47a0      	blx	r4
 8003264:	6178      	str	r0, [r7, #20]

  return ret;
 8003266:	697b      	ldr	r3, [r7, #20]
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd90      	pop	{r4, r7, pc}

08003270 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 800327a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003286:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80032a0 <stts751_from_lsb_to_celsius+0x30>
 800328a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800328e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003292:	eeb0 0a67 	vmov.f32	s0, s15
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	43800000 	.word	0x43800000

080032a4 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80032b0:	23aa      	movs	r3, #170	; 0xaa
 80032b2:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80032b4:	f107 020c 	add.w	r2, r7, #12
 80032b8:	2301      	movs	r3, #1
 80032ba:	2104      	movs	r1, #4
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ffa7 	bl	8003210 <stts751_read_reg>
 80032c2:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	7b3b      	ldrb	r3, [r7, #12]
 80032d4:	f362 0303 	bfi	r3, r2, #0, #4
 80032d8:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80032da:	f107 020c 	add.w	r2, r7, #12
 80032de:	2301      	movs	r3, #1
 80032e0:	2104      	movs	r1, #4
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffac 	bl	8003240 <stts751_write_reg>
 80032e8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80032f0:	f107 0210 	add.w	r2, r7, #16
 80032f4:	2301      	movs	r3, #1
 80032f6:	2103      	movs	r1, #3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff89 	bl	8003210 <stts751_read_reg>
 80032fe:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d111      	bne.n	800332a <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	09db      	lsrs	r3, r3, #7
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	b2da      	uxtb	r2, r3
 8003312:	7c3b      	ldrb	r3, [r7, #16]
 8003314:	f362 1386 	bfi	r3, r2, #6, #1
 8003318:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800331a:	f107 0210 	add.w	r2, r7, #16
 800331e:	2301      	movs	r3, #1
 8003320:	2103      	movs	r1, #3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff8c 	bl	8003240 <stts751_write_reg>
 8003328:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <stts751_temp_data_rate_set+0xa2>
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	2b90      	cmp	r3, #144	; 0x90
 8003334:	d107      	bne.n	8003346 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8003336:	f107 020b 	add.w	r2, r7, #11
 800333a:	2301      	movs	r3, #1
 800333c:	210f      	movs	r1, #15
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff7e 	bl	8003240 <stts751_write_reg>
 8003344:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800335a:	f107 0210 	add.w	r2, r7, #16
 800335e:	2301      	movs	r3, #1
 8003360:	2104      	movs	r1, #4
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff54 	bl	8003210 <stts751_read_reg>
 8003368:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d107      	bne.n	8003380 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8003370:	f107 020c 	add.w	r2, r7, #12
 8003374:	2301      	movs	r3, #1
 8003376:	2103      	movs	r1, #3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff49 	bl	8003210 <stts751_read_reg>
 800337e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8003380:	7b3b      	ldrb	r3, [r7, #12]
 8003382:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	01db      	lsls	r3, r3, #7
 800338a:	7c3a      	ldrb	r2, [r7, #16]
 800338c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	4413      	add	r3, r2
 8003394:	2b90      	cmp	r3, #144	; 0x90
 8003396:	d025      	beq.n	80033e4 <stts751_temp_data_rate_get+0x94>
 8003398:	2b90      	cmp	r3, #144	; 0x90
 800339a:	dc4f      	bgt.n	800343c <stts751_temp_data_rate_get+0xec>
 800339c:	2b09      	cmp	r3, #9
 800339e:	dc1b      	bgt.n	80033d8 <stts751_temp_data_rate_get+0x88>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db4b      	blt.n	800343c <stts751_temp_data_rate_get+0xec>
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	d849      	bhi.n	800343c <stts751_temp_data_rate_get+0xec>
 80033a8:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <stts751_temp_data_rate_get+0x60>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	080033ed 	.word	0x080033ed
 80033b4:	080033f5 	.word	0x080033f5
 80033b8:	080033fd 	.word	0x080033fd
 80033bc:	08003405 	.word	0x08003405
 80033c0:	0800340d 	.word	0x0800340d
 80033c4:	08003415 	.word	0x08003415
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	08003425 	.word	0x08003425
 80033d0:	0800342d 	.word	0x0800342d
 80033d4:	08003435 	.word	0x08003435
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d12f      	bne.n	800343c <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	701a      	strb	r2, [r3, #0]
      break;
 80033e2:	e02f      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2290      	movs	r2, #144	; 0x90
 80033e8:	701a      	strb	r2, [r3, #0]
      break;
 80033ea:	e02b      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
      break;
 80033f2:	e027      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
      break;
 80033fa:	e023      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2202      	movs	r2, #2
 8003400:	701a      	strb	r2, [r3, #0]
      break;
 8003402:	e01f      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2203      	movs	r2, #3
 8003408:	701a      	strb	r2, [r3, #0]
      break;
 800340a:	e01b      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2204      	movs	r2, #4
 8003410:	701a      	strb	r2, [r3, #0]
      break;
 8003412:	e017      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2205      	movs	r2, #5
 8003418:	701a      	strb	r2, [r3, #0]
      break;
 800341a:	e013      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2206      	movs	r2, #6
 8003420:	701a      	strb	r2, [r3, #0]
      break;
 8003422:	e00f      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2207      	movs	r2, #7
 8003428:	701a      	strb	r2, [r3, #0]
      break;
 800342a:	e00b      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2208      	movs	r2, #8
 8003430:	701a      	strb	r2, [r3, #0]
      break;
 8003432:	e007      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2209      	movs	r2, #9
 8003438:	701a      	strb	r2, [r3, #0]
      break;
 800343a:	e003      	b.n	8003444 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	701a      	strb	r2, [r3, #0]
      break;
 8003442:	bf00      	nop
  }

  return ret;
 8003444:	697b      	ldr	r3, [r7, #20]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop

08003450 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800345c:	f107 0208 	add.w	r2, r7, #8
 8003460:	2301      	movs	r3, #1
 8003462:	2103      	movs	r1, #3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fed3 	bl	8003210 <stts751_read_reg>
 800346a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	b2da      	uxtb	r2, r3
 800347a:	7a3b      	ldrb	r3, [r7, #8]
 800347c:	f362 0383 	bfi	r3, r2, #2, #2
 8003480:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003482:	f107 0208 	add.w	r2, r7, #8
 8003486:	2301      	movs	r3, #1
 8003488:	2103      	movs	r1, #3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fed8 	bl	8003240 <stts751_write_reg>
 8003490:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80034a6:	f107 0208 	add.w	r2, r7, #8
 80034aa:	2301      	movs	r3, #1
 80034ac:	2103      	movs	r1, #3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff feae 	bl	8003210 <stts751_read_reg>
 80034b4:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 80034b6:	7a3b      	ldrb	r3, [r7, #8]
 80034b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d81a      	bhi.n	80034f8 <stts751_resolution_get+0x5c>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <stts751_resolution_get+0x2c>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034e1 	.word	0x080034e1
 80034cc:	080034e9 	.word	0x080034e9
 80034d0:	080034d9 	.word	0x080034d9
 80034d4:	080034f1 	.word	0x080034f1
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2202      	movs	r2, #2
 80034dc:	701a      	strb	r2, [r3, #0]
      break;
 80034de:	e00f      	b.n	8003500 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
      break;
 80034e6:	e00b      	b.n	8003500 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
      break;
 80034ee:	e007      	b.n	8003500 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2203      	movs	r2, #3
 80034f4:	701a      	strb	r2, [r3, #0]
      break;
 80034f6:	e003      	b.n	8003500 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
      break;
 80034fe:	bf00      	nop
  }

  return ret;
 8003500:	68fb      	ldr	r3, [r7, #12]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	2301      	movs	r3, #1
 800351e:	2100      	movs	r1, #0
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fe75 	bl	8003210 <stts751_read_reg>
 8003526:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800352e:	f107 0208 	add.w	r2, r7, #8
 8003532:	2301      	movs	r3, #1
 8003534:	2102      	movs	r1, #2
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fe6a 	bl	8003210 <stts751_read_reg>
 800353c:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800353e:	7a7b      	ldrb	r3, [r7, #9]
 8003540:	b21a      	sxth	r2, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354c:	b29b      	uxth	r3, r3
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	b29a      	uxth	r2, r3
 8003552:	7a3b      	ldrb	r3, [r7, #8]
 8003554:	b29b      	uxth	r3, r3
 8003556:	4413      	add	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	b21a      	sxth	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8003560:	68fb      	ldr	r3, [r7, #12]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8003576:	f107 0208 	add.w	r2, r7, #8
 800357a:	2301      	movs	r3, #1
 800357c:	2103      	movs	r1, #3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fe46 	bl	8003210 <stts751_read_reg>
 8003584:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10f      	bne.n	80035ac <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	7a3b      	ldrb	r3, [r7, #8]
 8003596:	f362 13c7 	bfi	r3, r2, #7, #1
 800359a:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800359c:	f107 0208 	add.w	r2, r7, #8
 80035a0:	2301      	movs	r3, #1
 80035a2:	2103      	movs	r1, #3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fe4b 	bl	8003240 <stts751_write_reg>
 80035aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	2301      	movs	r3, #1
 80035c4:	21fd      	movs	r1, #253	; 0xfd
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fe22 	bl	8003210 <stts751_read_reg>
 80035cc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	2301      	movs	r3, #1
 80035da:	21fe      	movs	r1, #254	; 0xfe
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff fe17 	bl	8003210 <stts751_read_reg>
 80035e2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	2301      	movs	r3, #1
 80035f0:	21ff      	movs	r1, #255	; 0xff
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fe0c 	bl	8003210 <stts751_read_reg>
 80035f8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	; 0x30
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800360e:	2300      	movs	r3, #0
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8003612:	2301      	movs	r3, #1
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d07c      	beq.n	800371a <IKS01A3_ENV_SENSOR_Init+0x116>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	f200 80b2 	bhi.w	800378c <IKS01A3_ENV_SENSOR_Init+0x188>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <IKS01A3_ENV_SENSOR_Init+0x32>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d039      	beq.n	80036a8 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8003634:	e0aa      	b.n	800378c <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8003636:	6838      	ldr	r0, [r7, #0]
 8003638:	f000 f974 	bl	8003924 <HTS221_0_Probe>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e0df      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003648:	4a71      	ldr	r2, [pc, #452]	; (8003810 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4970      	ldr	r1, [pc, #448]	; (8003814 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800365a:	f107 0108 	add.w	r1, r7, #8
 800365e:	4610      	mov	r0, r2
 8003660:	4798      	blx	r3
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003668:	f06f 0306 	mvn.w	r3, #6
 800366c:	e0cc      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800366e:	7a3b      	ldrb	r3, [r7, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d103      	bne.n	800367c <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800367c:	7abb      	ldrb	r3, [r7, #10]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d103      	bne.n	800368a <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800368a:	7a7b      	ldrb	r3, [r7, #9]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d103      	bne.n	8003698 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8003698:	7afb      	ldrb	r3, [r7, #11]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d17a      	bne.n	8003794 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	623b      	str	r3, [r7, #32]
      }
      break;
 80036a6:	e075      	b.n	8003794 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 80036a8:	6838      	ldr	r0, [r7, #0]
 80036aa:	f000 fa05 	bl	8003ab8 <LPS22HH_0_Probe>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	e0a6      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80036ba:	4a55      	ldr	r2, [pc, #340]	; (8003810 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4953      	ldr	r1, [pc, #332]	; (8003814 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80036cc:	f107 0108 	add.w	r1, r7, #8
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80036da:	f06f 0306 	mvn.w	r3, #6
 80036de:	e093      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80036e0:	7a3b      	ldrb	r3, [r7, #8]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d103      	bne.n	80036ee <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80036ee:	7abb      	ldrb	r3, [r7, #10]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d103      	bne.n	80036fc <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80036fc:	7a7b      	ldrb	r3, [r7, #9]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d103      	bne.n	800370a <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d143      	bne.n	8003798 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f043 0308 	orr.w	r3, r3, #8
 8003716:	623b      	str	r3, [r7, #32]
      }
      break;
 8003718:	e03e      	b.n	8003798 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f000 fa98 	bl	8003c50 <STTS751_0_Probe>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	e06d      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800372c:	4a38      	ldr	r2, [pc, #224]	; (8003810 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4937      	ldr	r1, [pc, #220]	; (8003814 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800373e:	f107 0108 	add.w	r1, r7, #8
 8003742:	4610      	mov	r0, r2
 8003744:	4798      	blx	r3
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800374c:	f06f 0306 	mvn.w	r3, #6
 8003750:	e05a      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003752:	7a3b      	ldrb	r3, [r7, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d103      	bne.n	8003760 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003760:	7abb      	ldrb	r3, [r7, #10]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d103      	bne.n	800376e <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800376e:	7a7b      	ldrb	r3, [r7, #9]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d103      	bne.n	800377c <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f043 0302 	orr.w	r3, r3, #2
 800377a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800377c:	7afb      	ldrb	r3, [r7, #11]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10c      	bne.n	800379c <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	623b      	str	r3, [r7, #32]
      }
      break;
 800378a:	e007      	b.n	800379c <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800378c:	f06f 0301 	mvn.w	r3, #1
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003792:	e004      	b.n	800379e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 800379c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	e02f      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e028      	b.n	8003800 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	4013      	ands	r3, r2
 80037b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d11c      	bne.n	80037f4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	4013      	ands	r3, r2
 80037c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d116      	bne.n	80037f4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <IKS01A3_ENV_SENSOR_Init+0x214>)
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	4913      	ldr	r1, [pc, #76]	; (800381c <IKS01A3_ENV_SENSOR_Init+0x218>)
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	490d      	ldr	r1, [pc, #52]	; (8003814 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80037e4:	4610      	mov	r0, r2
 80037e6:	4798      	blx	r3
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80037ee:	f06f 0304 	mvn.w	r3, #4
 80037f2:	e009      	b.n	8003808 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	3301      	adds	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	2b03      	cmp	r3, #3
 8003804:	d9d3      	bls.n	80037ae <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003808:	4618      	mov	r0, r3
 800380a:	3730      	adds	r7, #48	; 0x30
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000180 	.word	0x20000180
 8003814:	20000350 	.word	0x20000350
 8003818:	20000098 	.word	0x20000098
 800381c:	20000150 	.word	0x20000150

08003820 <IKS01A3_ENV_SENSOR_Enable>:
  * @param  Instance environmental sensor instance to be used
  * @param  Function Environmental sensor function
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d903      	bls.n	8003838 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003830:	f06f 0301 	mvn.w	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e026      	b.n	8003886 <IKS01A3_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <IKS01A3_ENV_SENSOR_Enable+0x70>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4013      	ands	r3, r2
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d11a      	bne.n	8003880 <IKS01A3_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800384a:	4a12      	ldr	r2, [pc, #72]	; (8003894 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003852:	4911      	ldr	r1, [pc, #68]	; (8003898 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	0092      	lsls	r2, r2, #2
 8003858:	4413      	add	r3, r2
 800385a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	490e      	ldr	r1, [pc, #56]	; (800389c <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003868:	4610      	mov	r0, r2
 800386a:	4798      	blx	r3
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <IKS01A3_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003872:	f06f 0304 	mvn.w	r3, #4
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e005      	b.n	8003886 <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e002      	b.n	8003886 <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003880:	f06f 0301 	mvn.w	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003886:	68fb      	ldr	r3, [r7, #12]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	2000018c 	.word	0x2000018c
 8003894:	20000098 	.word	0x20000098
 8003898:	20000150 	.word	0x20000150
 800389c:	20000350 	.word	0x20000350

080038a0 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d903      	bls.n	80038ba <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80038b2:	f06f 0301 	mvn.w	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e027      	b.n	800390a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80038ba:	4a16      	ldr	r2, [pc, #88]	; (8003914 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4013      	ands	r3, r2
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d11b      	bne.n	8003904 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	4911      	ldr	r1, [pc, #68]	; (800391c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	4413      	add	r3, r2
 80038dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	490f      	ldr	r1, [pc, #60]	; (8003920 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4610      	mov	r0, r2
 80038ee:	4798      	blx	r3
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80038f6:	f06f 0304 	mvn.w	r3, #4
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e005      	b.n	800390a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e002      	b.n	800390a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003904:	f06f 0301 	mvn.w	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800390a:	697b      	ldr	r3, [r7, #20]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2000018c 	.word	0x2000018c
 8003918:	20000098 	.word	0x20000098
 800391c:	20000150 	.word	0x20000150
 8003920:	20000350 	.word	0x20000350

08003924 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b092      	sub	sp, #72	; 0x48
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800392c:	2300      	movs	r3, #0
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8003930:	2300      	movs	r3, #0
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8003934:	23bf      	movs	r3, #191	; 0xbf
 8003936:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800393a:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <HTS221_0_Probe+0x15c>)
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800393e:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HTS221_0_Probe+0x160>)
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <HTS221_0_Probe+0x164>)
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003946:	4b51      	ldr	r3, [pc, #324]	; (8003a8c <HTS221_0_Probe+0x168>)
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800394a:	4b51      	ldr	r3, [pc, #324]	; (8003a90 <HTS221_0_Probe+0x16c>)
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800394e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003952:	4619      	mov	r1, r3
 8003954:	484f      	ldr	r0, [pc, #316]	; (8003a94 <HTS221_0_Probe+0x170>)
 8003956:	f7fd fccb 	bl	80012f0 <HTS221_RegisterBusIO>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003960:	f06f 0306 	mvn.w	r3, #6
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
 8003966:	e085      	b.n	8003a74 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8003968:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800396c:	4619      	mov	r1, r3
 800396e:	4849      	ldr	r0, [pc, #292]	; (8003a94 <HTS221_0_Probe+0x170>)
 8003970:	f7fd fd47 	bl	8001402 <HTS221_ReadID>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800397a:	f06f 0306 	mvn.w	r3, #6
 800397e:	647b      	str	r3, [r7, #68]	; 0x44
 8003980:	e078      	b.n	8003a74 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8003982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003986:	2bbc      	cmp	r3, #188	; 0xbc
 8003988:	d003      	beq.n	8003992 <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800398a:	f06f 0306 	mvn.w	r3, #6
 800398e:	647b      	str	r3, [r7, #68]	; 0x44
 8003990:	e070      	b.n	8003a74 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	4619      	mov	r1, r3
 8003998:	483e      	ldr	r0, [pc, #248]	; (8003a94 <HTS221_0_Probe+0x170>)
 800399a:	f7fd fd49 	bl	8001430 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800399e:	7a3b      	ldrb	r3, [r7, #8]
 80039a0:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 80039a2:	7a7b      	ldrb	r3, [r7, #9]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 80039a8:	7abb      	ldrb	r3, [r7, #10]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80039b4:	4a38      	ldr	r2, [pc, #224]	; (8003a98 <HTS221_0_Probe+0x174>)
 80039b6:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80039b8:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HTS221_0_Probe+0x178>)
 80039ba:	4a36      	ldr	r2, [pc, #216]	; (8003a94 <HTS221_0_Probe+0x170>)
 80039bc:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80039be:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <HTS221_0_Probe+0x17c>)
 80039c0:	4a38      	ldr	r2, [pc, #224]	; (8003aa4 <HTS221_0_Probe+0x180>)
 80039c2:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <HTS221_0_Probe+0xe2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d018      	beq.n	8003a06 <HTS221_0_Probe+0xe2>
 80039d4:	7a3b      	ldrb	r3, [r7, #8]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d115      	bne.n	8003a06 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80039da:	4b33      	ldr	r3, [pc, #204]	; (8003aa8 <HTS221_0_Probe+0x184>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a33      	ldr	r2, [pc, #204]	; (8003aac <HTS221_0_Probe+0x188>)
 80039e0:	4933      	ldr	r1, [pc, #204]	; (8003ab0 <HTS221_0_Probe+0x18c>)
 80039e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80039e6:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <HTS221_0_Probe+0x17c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <HTS221_0_Probe+0x178>)
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4610      	mov	r0, r2
 80039f2:	4798      	blx	r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80039fa:	f06f 0304 	mvn.w	r3, #4
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003a00:	e001      	b.n	8003a06 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8003a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11d      	bne.n	8003a48 <HTS221_0_Probe+0x124>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <HTS221_0_Probe+0x124>
 8003a16:	7abb      	ldrb	r3, [r7, #10]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d115      	bne.n	8003a48 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8003a1c:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <HTS221_0_Probe+0x184>)
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	4a22      	ldr	r2, [pc, #136]	; (8003aac <HTS221_0_Probe+0x188>)
 8003a22:	4924      	ldr	r1, [pc, #144]	; (8003ab4 <HTS221_0_Probe+0x190>)
 8003a24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HTS221_0_Probe+0x17c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HTS221_0_Probe+0x178>)
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	4610      	mov	r0, r2
 8003a34:	4798      	blx	r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a3c:	f06f 0304 	mvn.w	r3, #4
 8003a40:	647b      	str	r3, [r7, #68]	; 0x44
 8003a42:	e001      	b.n	8003a48 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d107      	bne.n	8003a5e <HTS221_0_Probe+0x13a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a58:	f06f 0304 	mvn.w	r3, #4
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8003a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HTS221_0_Probe+0x150>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a6e:	f06f 0304 	mvn.w	r3, #4
 8003a72:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8003a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3748      	adds	r7, #72	; 0x48
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	08000f4d 	.word	0x08000f4d
 8003a84:	08000fb1 	.word	0x08000fb1
 8003a88:	08001065 	.word	0x08001065
 8003a8c:	08001001 	.word	0x08001001
 8003a90:	080010c9 	.word	0x080010c9
 8003a94:	20000198 	.word	0x20000198
 8003a98:	2000018c 	.word	0x2000018c
 8003a9c:	20000350 	.word	0x20000350
 8003aa0:	20000180 	.word	0x20000180
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	20000098 	.word	0x20000098
 8003aac:	20000150 	.word	0x20000150
 8003ab0:	20000028 	.word	0x20000028
 8003ab4:	20000014 	.word	0x20000014

08003ab8 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b092      	sub	sp, #72	; 0x48
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8003ac8:	23bb      	movs	r3, #187	; 0xbb
 8003aca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8003ace:	4b52      	ldr	r3, [pc, #328]	; (8003c18 <LPS22HH_0_Probe+0x160>)
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <LPS22HH_0_Probe+0x164>)
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003ad6:	4b52      	ldr	r3, [pc, #328]	; (8003c20 <LPS22HH_0_Probe+0x168>)
 8003ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003ada:	4b52      	ldr	r3, [pc, #328]	; (8003c24 <LPS22HH_0_Probe+0x16c>)
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8003ade:	4b52      	ldr	r3, [pc, #328]	; (8003c28 <LPS22HH_0_Probe+0x170>)
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8003ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4850      	ldr	r0, [pc, #320]	; (8003c2c <LPS22HH_0_Probe+0x174>)
 8003aea:	f7fe fa2b 	bl	8001f44 <LPS22HH_RegisterBusIO>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003af4:	f06f 0306 	mvn.w	r3, #6
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
 8003afa:	e087      	b.n	8003c0c <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8003afc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8003b00:	4619      	mov	r1, r3
 8003b02:	484a      	ldr	r0, [pc, #296]	; (8003c2c <LPS22HH_0_Probe+0x174>)
 8003b04:	f7fe fac7 	bl	8002096 <LPS22HH_ReadID>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b0e:	f06f 0306 	mvn.w	r3, #6
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
 8003b14:	e07a      	b.n	8003c0c <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8003b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b1a:	2bb3      	cmp	r3, #179	; 0xb3
 8003b1c:	d003      	beq.n	8003b26 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b1e:	f06f 0306 	mvn.w	r3, #6
 8003b22:	647b      	str	r3, [r7, #68]	; 0x44
 8003b24:	e072      	b.n	8003c0c <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	483f      	ldr	r0, [pc, #252]	; (8003c2c <LPS22HH_0_Probe+0x174>)
 8003b2e:	f7fe fac9 	bl	80020c4 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8003b32:	7a3b      	ldrb	r3, [r7, #8]
 8003b34:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8003b36:	7a7b      	ldrb	r3, [r7, #9]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8003b3c:	7abb      	ldrb	r3, [r7, #10]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8003b48:	4a39      	ldr	r2, [pc, #228]	; (8003c30 <LPS22HH_0_Probe+0x178>)
 8003b4a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8003b4c:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <LPS22HH_0_Probe+0x17c>)
 8003b4e:	4a37      	ldr	r2, [pc, #220]	; (8003c2c <LPS22HH_0_Probe+0x174>)
 8003b50:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <LPS22HH_0_Probe+0x180>)
 8003b54:	4a39      	ldr	r2, [pc, #228]	; (8003c3c <LPS22HH_0_Probe+0x184>)
 8003b56:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11e      	bne.n	8003b9c <LPS22HH_0_Probe+0xe4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d019      	beq.n	8003b9c <LPS22HH_0_Probe+0xe4>
 8003b68:	7a3b      	ldrb	r3, [r7, #8]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d116      	bne.n	8003b9c <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8003b6e:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <LPS22HH_0_Probe+0x188>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <LPS22HH_0_Probe+0x18c>)
 8003b74:	3304      	adds	r3, #4
 8003b76:	4934      	ldr	r1, [pc, #208]	; (8003c48 <LPS22HH_0_Probe+0x190>)
 8003b78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <LPS22HH_0_Probe+0x180>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <LPS22HH_0_Probe+0x17c>)
 8003b84:	6852      	ldr	r2, [r2, #4]
 8003b86:	4610      	mov	r0, r2
 8003b88:	4798      	blx	r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b90:	f06f 0304 	mvn.w	r3, #4
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44
 8003b96:	e001      	b.n	8003b9c <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8003b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11e      	bne.n	8003be0 <LPS22HH_0_Probe+0x128>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d019      	beq.n	8003be0 <LPS22HH_0_Probe+0x128>
 8003bac:	7a7b      	ldrb	r3, [r7, #9]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d116      	bne.n	8003be0 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <LPS22HH_0_Probe+0x188>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <LPS22HH_0_Probe+0x18c>)
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4924      	ldr	r1, [pc, #144]	; (8003c4c <LPS22HH_0_Probe+0x194>)
 8003bbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <LPS22HH_0_Probe+0x180>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <LPS22HH_0_Probe+0x17c>)
 8003bc8:	6852      	ldr	r2, [r2, #4]
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4798      	blx	r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003bd4:	f06f 0304 	mvn.w	r3, #4
 8003bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bda:	e001      	b.n	8003be0 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <LPS22HH_0_Probe+0x13e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003bf0:	f06f 0304 	mvn.w	r3, #4
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8003bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <LPS22HH_0_Probe+0x154>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c06:	f06f 0304 	mvn.w	r3, #4
 8003c0a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3748      	adds	r7, #72	; 0x48
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	08000f4d 	.word	0x08000f4d
 8003c1c:	08000fb1 	.word	0x08000fb1
 8003c20:	08001065 	.word	0x08001065
 8003c24:	08001001 	.word	0x08001001
 8003c28:	080010c9 	.word	0x080010c9
 8003c2c:	200001cc 	.word	0x200001cc
 8003c30:	2000018c 	.word	0x2000018c
 8003c34:	20000350 	.word	0x20000350
 8003c38:	20000180 	.word	0x20000180
 8003c3c:	2000003c 	.word	0x2000003c
 8003c40:	20000098 	.word	0x20000098
 8003c44:	20000150 	.word	0x20000150
 8003c48:	20000060 	.word	0x20000060
 8003c4c:	2000004c 	.word	0x2000004c

08003c50 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b092      	sub	sp, #72	; 0x48
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8003c60:	2395      	movs	r3, #149	; 0x95
 8003c62:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8003c66:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <STTS751_0_Probe+0x130>)
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8003c6a:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <STTS751_0_Probe+0x134>)
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003c6e:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <STTS751_0_Probe+0x138>)
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003c72:	4b46      	ldr	r3, [pc, #280]	; (8003d8c <STTS751_0_Probe+0x13c>)
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8003c76:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <STTS751_0_Probe+0x140>)
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8003c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4844      	ldr	r0, [pc, #272]	; (8003d94 <STTS751_0_Probe+0x144>)
 8003c82:	f7fe ffc5 	bl	8002c10 <STTS751_RegisterBusIO>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003c8c:	f06f 0306 	mvn.w	r3, #6
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
 8003c92:	e070      	b.n	8003d76 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8003c94:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8003c98:	4619      	mov	r1, r3
 8003c9a:	483e      	ldr	r0, [pc, #248]	; (8003d94 <STTS751_0_Probe+0x144>)
 8003c9c:	f7ff f857 	bl	8002d4e <STTS751_ReadID>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003ca6:	f06f 0306 	mvn.w	r3, #6
 8003caa:	647b      	str	r3, [r7, #68]	; 0x44
 8003cac:	e063      	b.n	8003d76 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 8003cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb2:	2b53      	cmp	r3, #83	; 0x53
 8003cb4:	d003      	beq.n	8003cbe <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003cb6:	f06f 0306 	mvn.w	r3, #6
 8003cba:	647b      	str	r3, [r7, #68]	; 0x44
 8003cbc:	e05b      	b.n	8003d76 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4833      	ldr	r0, [pc, #204]	; (8003d94 <STTS751_0_Probe+0x144>)
 8003cc6:	f7ff f85d 	bl	8002d84 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8003cca:	7a3b      	ldrb	r3, [r7, #8]
 8003ccc:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8003cce:	7a7b      	ldrb	r3, [r7, #9]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8003cd4:	7abb      	ldrb	r3, [r7, #10]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <STTS751_0_Probe+0x148>)
 8003ce2:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <STTS751_0_Probe+0x14c>)
 8003ce6:	4a2b      	ldr	r2, [pc, #172]	; (8003d94 <STTS751_0_Probe+0x144>)
 8003ce8:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8003cea:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <STTS751_0_Probe+0x150>)
 8003cec:	4a2d      	ldr	r2, [pc, #180]	; (8003da4 <STTS751_0_Probe+0x154>)
 8003cee:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11e      	bne.n	8003d34 <STTS751_0_Probe+0xe4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d019      	beq.n	8003d34 <STTS751_0_Probe+0xe4>
 8003d00:	7a3b      	ldrb	r3, [r7, #8]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d116      	bne.n	8003d34 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8003d06:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <STTS751_0_Probe+0x158>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4a28      	ldr	r2, [pc, #160]	; (8003dac <STTS751_0_Probe+0x15c>)
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	4928      	ldr	r1, [pc, #160]	; (8003db0 <STTS751_0_Probe+0x160>)
 8003d10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <STTS751_0_Probe+0x150>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <STTS751_0_Probe+0x14c>)
 8003d1c:	6892      	ldr	r2, [r2, #8]
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4798      	blx	r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d28:	f06f 0304 	mvn.w	r3, #4
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2e:	e001      	b.n	8003d34 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8003d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d107      	bne.n	8003d4a <STTS751_0_Probe+0xfa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d44:	f06f 0304 	mvn.w	r3, #4
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <STTS751_0_Probe+0x110>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d5a:	f06f 0304 	mvn.w	r3, #4
 8003d5e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8003d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <STTS751_0_Probe+0x126>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d70:	f06f 0304 	mvn.w	r3, #4
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8003d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3748      	adds	r7, #72	; 0x48
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	08000f4d 	.word	0x08000f4d
 8003d84:	08000fb1 	.word	0x08000fb1
 8003d88:	08001065 	.word	0x08001065
 8003d8c:	08001001 	.word	0x08001001
 8003d90:	080010c9 	.word	0x080010c9
 8003d94:	20000200 	.word	0x20000200
 8003d98:	2000018c 	.word	0x2000018c
 8003d9c:	20000350 	.word	0x20000350
 8003da0:	20000180 	.word	0x20000180
 8003da4:	20000074 	.word	0x20000074
 8003da8:	20000098 	.word	0x20000098
 8003dac:	20000150 	.word	0x20000150
 8003db0:	20000084 	.word	0x20000084

08003db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <HAL_Init+0x40>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <HAL_Init+0x40>)
 8003dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_Init+0x40>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_Init+0x40>)
 8003dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_Init+0x40>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_Init+0x40>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f000 f92b 	bl	8004038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003de2:	2000      	movs	r0, #0
 8003de4:	f000 f808 	bl	8003df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003de8:	f7fc ffd2 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00

08003df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_InitTick+0x54>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_InitTick+0x58>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f943 	bl	80040a2 <HAL_SYSTICK_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00e      	b.n	8003e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	d80a      	bhi.n	8003e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f000 f90b 	bl	800404e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <HAL_InitTick+0x5c>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	200000c0 	.word	0x200000c0
 8003e54:	200000bc 	.word	0x200000bc

08003e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_IncTick+0x20>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_IncTick+0x24>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4413      	add	r3, r2
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <HAL_IncTick+0x24>)
 8003e6a:	6013      	str	r3, [r2, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	200000c0 	.word	0x200000c0
 8003e7c:	2000035c 	.word	0x2000035c

08003e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return uwTick;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_GetTick+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000035c 	.word	0x2000035c

08003e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eca:	4a04      	ldr	r2, [pc, #16]	; (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	60d3      	str	r3, [r2, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f003 0307 	and.w	r3, r3, #7
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db0b      	blt.n	8003f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4907      	ldr	r1, [pc, #28]	; (8003f34 <__NVIC_EnableIRQ+0x38>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000e100 	.word	0xe000e100

08003f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db0a      	blt.n	8003f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	490c      	ldr	r1, [pc, #48]	; (8003f84 <__NVIC_SetPriority+0x4c>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f60:	e00a      	b.n	8003f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <__NVIC_SetPriority+0x50>)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	761a      	strb	r2, [r3, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	bf28      	it	cs
 8003faa:	2304      	movcs	r3, #4
 8003fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d902      	bls.n	8003fbc <NVIC_EncodePriority+0x30>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3b03      	subs	r3, #3
 8003fba:	e000      	b.n	8003fbe <NVIC_EncodePriority+0x32>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	401a      	ands	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43d9      	mvns	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	4313      	orrs	r3, r2
         );
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004004:	d301      	bcc.n	800400a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004006:	2301      	movs	r3, #1
 8004008:	e00f      	b.n	800402a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <SysTick_Config+0x40>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004012:	210f      	movs	r1, #15
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f7ff ff8e 	bl	8003f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <SysTick_Config+0x40>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <SysTick_Config+0x40>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	e000e010 	.word	0xe000e010

08004038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff29 	bl	8003e98 <__NVIC_SetPriorityGrouping>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	4603      	mov	r3, r0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004060:	f7ff ff3e 	bl	8003ee0 <__NVIC_GetPriorityGrouping>
 8004064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff ff8e 	bl	8003f8c <NVIC_EncodePriority>
 8004070:	4602      	mov	r2, r0
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff5d 	bl	8003f38 <__NVIC_SetPriority>
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	4603      	mov	r3, r0
 800408e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff31 	bl	8003efc <__NVIC_EnableIRQ>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ffa2 	bl	8003ff4 <SysTick_Config>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7ff feda 	bl	8003e80 <HAL_GetTick>
 80040cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d008      	beq.n	80040ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2280      	movs	r2, #128	; 0x80
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e052      	b.n	8004192 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0216 	bic.w	r2, r2, #22
 80040fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <HAL_DMA_Abort+0x62>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0208 	bic.w	r2, r2, #8
 800412a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800413c:	e013      	b.n	8004166 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800413e:	f7ff fe9f 	bl	8003e80 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b05      	cmp	r3, #5
 800414a:	d90c      	bls.n	8004166 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2203      	movs	r2, #3
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e015      	b.n	8004192 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e4      	bne.n	800413e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004178:	223f      	movs	r2, #63	; 0x3f
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d004      	beq.n	80041b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e00c      	b.n	80041d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2205      	movs	r2, #5
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	e159      	b.n	80044b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041fc:	2201      	movs	r2, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	429a      	cmp	r2, r3
 8004216:	f040 8148 	bne.w	80044aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d005      	beq.n	8004232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422e:	2b02      	cmp	r3, #2
 8004230:	d130      	bne.n	8004294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004268:	2201      	movs	r2, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0201 	and.w	r2, r3, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d017      	beq.n	80042d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d123      	bne.n	8004324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	220f      	movs	r2, #15
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	08da      	lsrs	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3208      	adds	r2, #8
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2203      	movs	r2, #3
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0203 	and.w	r2, r3, #3
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a2 	beq.w	80044aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	4b57      	ldr	r3, [pc, #348]	; (80044c8 <HAL_GPIO_Init+0x2e8>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	4a56      	ldr	r2, [pc, #344]	; (80044c8 <HAL_GPIO_Init+0x2e8>)
 8004370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004374:	6453      	str	r3, [r2, #68]	; 0x44
 8004376:	4b54      	ldr	r3, [pc, #336]	; (80044c8 <HAL_GPIO_Init+0x2e8>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004382:	4a52      	ldr	r2, [pc, #328]	; (80044cc <HAL_GPIO_Init+0x2ec>)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	089b      	lsrs	r3, r3, #2
 8004388:	3302      	adds	r3, #2
 800438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	220f      	movs	r2, #15
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a49      	ldr	r2, [pc, #292]	; (80044d0 <HAL_GPIO_Init+0x2f0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d019      	beq.n	80043e2 <HAL_GPIO_Init+0x202>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a48      	ldr	r2, [pc, #288]	; (80044d4 <HAL_GPIO_Init+0x2f4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_GPIO_Init+0x1fe>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a47      	ldr	r2, [pc, #284]	; (80044d8 <HAL_GPIO_Init+0x2f8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00d      	beq.n	80043da <HAL_GPIO_Init+0x1fa>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a46      	ldr	r2, [pc, #280]	; (80044dc <HAL_GPIO_Init+0x2fc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <HAL_GPIO_Init+0x1f6>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a45      	ldr	r2, [pc, #276]	; (80044e0 <HAL_GPIO_Init+0x300>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_GPIO_Init+0x1f2>
 80043ce:	2304      	movs	r3, #4
 80043d0:	e008      	b.n	80043e4 <HAL_GPIO_Init+0x204>
 80043d2:	2307      	movs	r3, #7
 80043d4:	e006      	b.n	80043e4 <HAL_GPIO_Init+0x204>
 80043d6:	2303      	movs	r3, #3
 80043d8:	e004      	b.n	80043e4 <HAL_GPIO_Init+0x204>
 80043da:	2302      	movs	r3, #2
 80043dc:	e002      	b.n	80043e4 <HAL_GPIO_Init+0x204>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_GPIO_Init+0x204>
 80043e2:	2300      	movs	r3, #0
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	f002 0203 	and.w	r2, r2, #3
 80043ea:	0092      	lsls	r2, r2, #2
 80043ec:	4093      	lsls	r3, r2
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f4:	4935      	ldr	r1, [pc, #212]	; (80044cc <HAL_GPIO_Init+0x2ec>)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	3302      	adds	r3, #2
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004402:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <HAL_GPIO_Init+0x304>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004426:	4a2f      	ldr	r2, [pc, #188]	; (80044e4 <HAL_GPIO_Init+0x304>)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800442c:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <HAL_GPIO_Init+0x304>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004450:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <HAL_GPIO_Init+0x304>)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004456:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_GPIO_Init+0x304>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800447a:	4a1a      	ldr	r2, [pc, #104]	; (80044e4 <HAL_GPIO_Init+0x304>)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <HAL_GPIO_Init+0x304>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <HAL_GPIO_Init+0x304>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b0f      	cmp	r3, #15
 80044b4:	f67f aea2 	bls.w	80041fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40013800 	.word	0x40013800
 80044d0:	40020000 	.word	0x40020000
 80044d4:	40020400 	.word	0x40020400
 80044d8:	40020800 	.word	0x40020800
 80044dc:	40020c00 	.word	0x40020c00
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40013c00 	.word	0x40013c00

080044e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e0bb      	b.n	800467c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004504:	2201      	movs	r2, #1
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	429a      	cmp	r2, r3
 800451c:	f040 80ab 	bne.w	8004676 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004520:	4a5c      	ldr	r2, [pc, #368]	; (8004694 <HAL_GPIO_DeInit+0x1ac>)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	220f      	movs	r2, #15
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a54      	ldr	r2, [pc, #336]	; (8004698 <HAL_GPIO_DeInit+0x1b0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d019      	beq.n	800457e <HAL_GPIO_DeInit+0x96>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a53      	ldr	r2, [pc, #332]	; (800469c <HAL_GPIO_DeInit+0x1b4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_GPIO_DeInit+0x92>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a52      	ldr	r2, [pc, #328]	; (80046a0 <HAL_GPIO_DeInit+0x1b8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00d      	beq.n	8004576 <HAL_GPIO_DeInit+0x8e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a51      	ldr	r2, [pc, #324]	; (80046a4 <HAL_GPIO_DeInit+0x1bc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <HAL_GPIO_DeInit+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a50      	ldr	r2, [pc, #320]	; (80046a8 <HAL_GPIO_DeInit+0x1c0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_GPIO_DeInit+0x86>
 800456a:	2304      	movs	r3, #4
 800456c:	e008      	b.n	8004580 <HAL_GPIO_DeInit+0x98>
 800456e:	2307      	movs	r3, #7
 8004570:	e006      	b.n	8004580 <HAL_GPIO_DeInit+0x98>
 8004572:	2303      	movs	r3, #3
 8004574:	e004      	b.n	8004580 <HAL_GPIO_DeInit+0x98>
 8004576:	2302      	movs	r3, #2
 8004578:	e002      	b.n	8004580 <HAL_GPIO_DeInit+0x98>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <HAL_GPIO_DeInit+0x98>
 800457e:	2300      	movs	r3, #0
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	f002 0203 	and.w	r2, r2, #3
 8004586:	0092      	lsls	r2, r2, #2
 8004588:	4093      	lsls	r3, r2
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d132      	bne.n	80045f6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004590:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	43db      	mvns	r3, r3
 8004598:	4944      	ldr	r1, [pc, #272]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 800459a:	4013      	ands	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800459e:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	4941      	ldr	r1, [pc, #260]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80045ac:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	493d      	ldr	r1, [pc, #244]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80045ba:	4b3c      	ldr	r3, [pc, #240]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	493a      	ldr	r1, [pc, #232]	; (80046ac <HAL_GPIO_DeInit+0x1c4>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	220f      	movs	r2, #15
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80045d8:	4a2e      	ldr	r2, [pc, #184]	; (8004694 <HAL_GPIO_DeInit+0x1ac>)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	43da      	mvns	r2, r3
 80045e8:	482a      	ldr	r0, [pc, #168]	; (8004694 <HAL_GPIO_DeInit+0x1ac>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	400a      	ands	r2, r1
 80045f0:	3302      	adds	r3, #2
 80045f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	2103      	movs	r1, #3
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	08d2      	lsrs	r2, r2, #3
 800462c:	4019      	ands	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3208      	adds	r2, #8
 8004632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	2103      	movs	r1, #3
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	401a      	ands	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	2101      	movs	r1, #1
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	401a      	ands	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2103      	movs	r1, #3
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	401a      	ands	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	3301      	adds	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	f67f af40 	bls.w	8004504 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40013800 	.word	0x40013800
 8004698:	40020000 	.word	0x40020000
 800469c:	40020400 	.word	0x40020400
 80046a0:	40020800 	.word	0x40020800
 80046a4:	40020c00 	.word	0x40020c00
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40013c00 	.word	0x40013c00

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046cc:	e003      	b.n	80046d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	619a      	str	r2, [r3, #24]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e12b      	b.n	800494e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f95d 	bl	80049ca <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2224      	movs	r2, #36	; 0x24
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004746:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004748:	f001 fc36 	bl	8005fb8 <HAL_RCC_GetPCLK1Freq>
 800474c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4a81      	ldr	r2, [pc, #516]	; (8004958 <HAL_I2C_Init+0x274>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d807      	bhi.n	8004768 <HAL_I2C_Init+0x84>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a80      	ldr	r2, [pc, #512]	; (800495c <HAL_I2C_Init+0x278>)
 800475c:	4293      	cmp	r3, r2
 800475e:	bf94      	ite	ls
 8004760:	2301      	movls	r3, #1
 8004762:	2300      	movhi	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e006      	b.n	8004776 <HAL_I2C_Init+0x92>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a7d      	ldr	r2, [pc, #500]	; (8004960 <HAL_I2C_Init+0x27c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	bf94      	ite	ls
 8004770:	2301      	movls	r3, #1
 8004772:	2300      	movhi	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0e7      	b.n	800494e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a78      	ldr	r2, [pc, #480]	; (8004964 <HAL_I2C_Init+0x280>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	0c9b      	lsrs	r3, r3, #18
 8004788:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a6a      	ldr	r2, [pc, #424]	; (8004958 <HAL_I2C_Init+0x274>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d802      	bhi.n	80047b8 <HAL_I2C_Init+0xd4>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	3301      	adds	r3, #1
 80047b6:	e009      	b.n	80047cc <HAL_I2C_Init+0xe8>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	4a69      	ldr	r2, [pc, #420]	; (8004968 <HAL_I2C_Init+0x284>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	099b      	lsrs	r3, r3, #6
 80047ca:	3301      	adds	r3, #1
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	495c      	ldr	r1, [pc, #368]	; (8004958 <HAL_I2C_Init+0x274>)
 80047e8:	428b      	cmp	r3, r1
 80047ea:	d819      	bhi.n	8004820 <HAL_I2C_Init+0x13c>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1e59      	subs	r1, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fa:	1c59      	adds	r1, r3, #1
 80047fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004800:	400b      	ands	r3, r1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_I2C_Init+0x138>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1e59      	subs	r1, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fbb1 f3f3 	udiv	r3, r1, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481a:	e051      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 800481c:	2304      	movs	r3, #4
 800481e:	e04f      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d111      	bne.n	800484c <HAL_I2C_Init+0x168>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e58      	subs	r0, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	440b      	add	r3, r1
 8004836:	fbb0 f3f3 	udiv	r3, r0, r3
 800483a:	3301      	adds	r3, #1
 800483c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e012      	b.n	8004872 <HAL_I2C_Init+0x18e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1e58      	subs	r0, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	0099      	lsls	r1, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004862:	3301      	adds	r3, #1
 8004864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Init+0x196>
 8004876:	2301      	movs	r3, #1
 8004878:	e022      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10e      	bne.n	80048a0 <HAL_I2C_Init+0x1bc>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1e58      	subs	r0, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	440b      	add	r3, r1
 8004890:	fbb0 f3f3 	udiv	r3, r0, r3
 8004894:	3301      	adds	r3, #1
 8004896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	e00f      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1e58      	subs	r0, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	0099      	lsls	r1, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	6809      	ldr	r1, [r1, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6911      	ldr	r1, [r2, #16]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68d2      	ldr	r2, [r2, #12]
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	430b      	orrs	r3, r1
 8004902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	000186a0 	.word	0x000186a0
 800495c:	001e847f 	.word	0x001e847f
 8004960:	003d08ff 	.word	0x003d08ff
 8004964:	431bde83 	.word	0x431bde83
 8004968:	10624dd3 	.word	0x10624dd3

0800496c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e021      	b.n	80049c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2224      	movs	r2, #36	; 0x24
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f821 	bl	80049de <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	817b      	strh	r3, [r7, #10]
 8004a06:	460b      	mov	r3, r1
 8004a08:	813b      	strh	r3, [r7, #8]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a0e:	f7ff fa37 	bl	8003e80 <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	f040 80d9 	bne.w	8004bd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	2319      	movs	r3, #25
 8004a28:	2201      	movs	r2, #1
 8004a2a:	496d      	ldr	r1, [pc, #436]	; (8004be0 <HAL_I2C_Mem_Write+0x1ec>)
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fc99 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0cc      	b.n	8004bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_I2C_Mem_Write+0x56>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0c5      	b.n	8004bd6 <HAL_I2C_Mem_Write+0x1e2>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d007      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2221      	movs	r2, #33	; 0x21
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a3a      	ldr	r2, [r7, #32]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a4d      	ldr	r2, [pc, #308]	; (8004be4 <HAL_I2C_Mem_Write+0x1f0>)
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ab2:	88f8      	ldrh	r0, [r7, #6]
 8004ab4:	893a      	ldrh	r2, [r7, #8]
 8004ab6:	8979      	ldrh	r1, [r7, #10]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fad0 	bl	8005068 <I2C_RequestMemoryWrite>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d052      	beq.n	8004b74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e081      	b.n	8004bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fd1a 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d107      	bne.n	8004afa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e06b      	b.n	8004bd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d11b      	bne.n	8004b74 <HAL_I2C_Mem_Write+0x180>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d017      	beq.n	8004b74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1aa      	bne.n	8004ad2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fd06 	bl	8005592 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d107      	bne.n	8004ba4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e016      	b.n	8004bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	00100002 	.word	0x00100002
 8004be4:	ffff0000 	.word	0xffff0000

08004be8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	; 0x30
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	817b      	strh	r3, [r7, #10]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	813b      	strh	r3, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c02:	f7ff f93d 	bl	8003e80 <HAL_GetTick>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	f040 8208 	bne.w	8005026 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	2319      	movs	r3, #25
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	497b      	ldr	r1, [pc, #492]	; (8004e0c <HAL_I2C_Mem_Read+0x224>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fb9f 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e1fb      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_I2C_Mem_Read+0x56>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e1f4      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d007      	beq.n	8004c64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2222      	movs	r2, #34	; 0x22
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2240      	movs	r2, #64	; 0x40
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a5b      	ldr	r2, [pc, #364]	; (8004e10 <HAL_I2C_Mem_Read+0x228>)
 8004ca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ca6:	88f8      	ldrh	r0, [r7, #6]
 8004ca8:	893a      	ldrh	r2, [r7, #8]
 8004caa:	8979      	ldrh	r1, [r7, #10]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fa6c 	bl	8005194 <I2C_RequestMemoryRead>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e1b0      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d113      	bne.n	8004cf6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	623b      	str	r3, [r7, #32]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e184      	b.n	8005000 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d11b      	bne.n	8004d36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	e164      	b.n	8005000 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d11b      	bne.n	8004d76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	e144      	b.n	8005000 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d8c:	e138      	b.n	8005000 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	f200 80f1 	bhi.w	8004f7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d123      	bne.n	8004de8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fc35 	bl	8005614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e139      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de6:	e10b      	b.n	8005000 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d14e      	bne.n	8004e8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	2200      	movs	r2, #0
 8004df8:	4906      	ldr	r1, [pc, #24]	; (8004e14 <HAL_I2C_Mem_Read+0x22c>)
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fab2 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e10e      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
 8004e0a:	bf00      	nop
 8004e0c:	00100002 	.word	0x00100002
 8004e10:	ffff0000 	.word	0xffff0000
 8004e14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e8c:	e0b8      	b.n	8005000 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2200      	movs	r2, #0
 8004e96:	4966      	ldr	r1, [pc, #408]	; (8005030 <HAL_I2C_Mem_Read+0x448>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa63 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0bf      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	494f      	ldr	r1, [pc, #316]	; (8005030 <HAL_I2C_Mem_Read+0x448>)
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fa35 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e091      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f78:	e042      	b.n	8005000 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fb48 	bl	8005614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e04c      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d118      	bne.n	8005000 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	f47f aec2 	bne.w	8004d8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	e000      	b.n	8005028 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
  }
}
 8005028:	4618      	mov	r0, r3
 800502a:	3728      	adds	r7, #40	; 0x28
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	00010004 	.word	0x00010004

08005034 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005042:	b2db      	uxtb	r3, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	4608      	mov	r0, r1
 8005072:	4611      	mov	r1, r2
 8005074:	461a      	mov	r2, r3
 8005076:	4603      	mov	r3, r0
 8005078:	817b      	strh	r3, [r7, #10]
 800507a:	460b      	mov	r3, r1
 800507c:	813b      	strh	r3, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	2200      	movs	r2, #0
 800509a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f960 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b8:	d103      	bne.n	80050c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e05f      	b.n	8005186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	6a3a      	ldr	r2, [r7, #32]
 80050da:	492d      	ldr	r1, [pc, #180]	; (8005190 <I2C_RequestMemoryWrite+0x128>)
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f998 	bl	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e04c      	b.n	8005186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	6a39      	ldr	r1, [r7, #32]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fa02 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b04      	cmp	r3, #4
 8005118:	d107      	bne.n	800512a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e02b      	b.n	8005186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005134:	893b      	ldrh	r3, [r7, #8]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	611a      	str	r2, [r3, #16]
 800513e:	e021      	b.n	8005184 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	b29b      	uxth	r3, r3
 8005146:	b2da      	uxtb	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f9dc 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b04      	cmp	r3, #4
 8005164:	d107      	bne.n	8005176 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e005      	b.n	8005186 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800517a:	893b      	ldrh	r3, [r7, #8]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	00010002 	.word	0x00010002

08005194 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	817b      	strh	r3, [r7, #10]
 80051a6:	460b      	mov	r3, r1
 80051a8:	813b      	strh	r3, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f8c2 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f4:	d103      	bne.n	80051fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0aa      	b.n	8005358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005202:	897b      	ldrh	r3, [r7, #10]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	6a3a      	ldr	r2, [r7, #32]
 8005216:	4952      	ldr	r1, [pc, #328]	; (8005360 <I2C_RequestMemoryRead+0x1cc>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f8fa 	bl	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e097      	b.n	8005358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	6a39      	ldr	r1, [r7, #32]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f964 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00d      	beq.n	800526a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	2b04      	cmp	r3, #4
 8005254:	d107      	bne.n	8005266 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e076      	b.n	8005358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d105      	bne.n	800527c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005270:	893b      	ldrh	r3, [r7, #8]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	611a      	str	r2, [r3, #16]
 800527a:	e021      	b.n	80052c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800527c:	893b      	ldrh	r3, [r7, #8]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	b29b      	uxth	r3, r3
 8005282:	b2da      	uxtb	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	6a39      	ldr	r1, [r7, #32]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f93e 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00d      	beq.n	80052b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d107      	bne.n	80052b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e050      	b.n	8005358 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c2:	6a39      	ldr	r1, [r7, #32]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f923 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00d      	beq.n	80052ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d107      	bne.n	80052e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e035      	b.n	8005358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2200      	movs	r2, #0
 8005304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f82b 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00d      	beq.n	8005330 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d103      	bne.n	800532c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e013      	b.n	8005358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005330:	897b      	ldrh	r3, [r7, #10]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	6a3a      	ldr	r2, [r7, #32]
 8005344:	4906      	ldr	r1, [pc, #24]	; (8005360 <I2C_RequestMemoryRead+0x1cc>)
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f863 	bl	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	00010002 	.word	0x00010002

08005364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005374:	e025      	b.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d021      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fe fd7f 	bl	8003e80 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e023      	b.n	800540a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10d      	bne.n	80053e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	e00c      	b.n	8005402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	429a      	cmp	r2, r3
 8005406:	d0b6      	beq.n	8005376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005420:	e051      	b.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005430:	d123      	bne.n	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800544a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f043 0204 	orr.w	r2, r3, #4
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e046      	b.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d021      	beq.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fe fcfd 	bl	8003e80 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e020      	b.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10c      	bne.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	43da      	mvns	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e00b      	b.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	43da      	mvns	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d18d      	bne.n	8005422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800551c:	e02d      	b.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f8ce 	bl	80056c0 <I2C_IsAcknowledgeFailed>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02d      	b.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d021      	beq.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fe fca3 	bl	8003e80 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d116      	bne.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e007      	b.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d1ca      	bne.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800559e:	e02d      	b.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f88d 	bl	80056c0 <I2C_IsAcknowledgeFailed>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e02d      	b.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d021      	beq.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b8:	f7fe fc62 	bl	8003e80 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d302      	bcc.n	80055ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d116      	bne.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e007      	b.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d1ca      	bne.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005620:	e042      	b.n	80056a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	d119      	bne.n	8005664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e029      	b.n	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005664:	f7fe fc0c 	bl	8003e80 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d116      	bne.n	80056a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e007      	b.n	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d1b5      	bne.n	8005622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d6:	d11b      	bne.n	8005710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f043 0204 	orr.w	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e264      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d075      	beq.n	800582a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800573e:	4ba3      	ldr	r3, [pc, #652]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 030c 	and.w	r3, r3, #12
 8005746:	2b04      	cmp	r3, #4
 8005748:	d00c      	beq.n	8005764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800574a:	4ba0      	ldr	r3, [pc, #640]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005752:	2b08      	cmp	r3, #8
 8005754:	d112      	bne.n	800577c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005756:	4b9d      	ldr	r3, [pc, #628]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005762:	d10b      	bne.n	800577c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005764:	4b99      	ldr	r3, [pc, #612]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d05b      	beq.n	8005828 <HAL_RCC_OscConfig+0x108>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d157      	bne.n	8005828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e23f      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d106      	bne.n	8005794 <HAL_RCC_OscConfig+0x74>
 8005786:	4b91      	ldr	r3, [pc, #580]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a90      	ldr	r2, [pc, #576]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800578c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	e01d      	b.n	80057d0 <HAL_RCC_OscConfig+0xb0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x98>
 800579e:	4b8b      	ldr	r3, [pc, #556]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a8a      	ldr	r2, [pc, #552]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4b88      	ldr	r3, [pc, #544]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a87      	ldr	r2, [pc, #540]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e00b      	b.n	80057d0 <HAL_RCC_OscConfig+0xb0>
 80057b8:	4b84      	ldr	r3, [pc, #528]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a83      	ldr	r2, [pc, #524]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	4b81      	ldr	r3, [pc, #516]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a80      	ldr	r2, [pc, #512]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d013      	beq.n	8005800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d8:	f7fe fb52 	bl	8003e80 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057e0:	f7fe fb4e 	bl	8003e80 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b64      	cmp	r3, #100	; 0x64
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e204      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	4b76      	ldr	r3, [pc, #472]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0xc0>
 80057fe:	e014      	b.n	800582a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fe fb3e 	bl	8003e80 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005808:	f7fe fb3a 	bl	8003e80 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b64      	cmp	r3, #100	; 0x64
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e1f0      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581a:	4b6c      	ldr	r3, [pc, #432]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0xe8>
 8005826:	e000      	b.n	800582a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d063      	beq.n	80058fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005836:	4b65      	ldr	r3, [pc, #404]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 030c 	and.w	r3, r3, #12
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005842:	4b62      	ldr	r3, [pc, #392]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800584a:	2b08      	cmp	r3, #8
 800584c:	d11c      	bne.n	8005888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584e:	4b5f      	ldr	r3, [pc, #380]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d116      	bne.n	8005888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585a:	4b5c      	ldr	r3, [pc, #368]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_RCC_OscConfig+0x152>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d001      	beq.n	8005872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e1c4      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005872:	4b56      	ldr	r3, [pc, #344]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	4952      	ldr	r1, [pc, #328]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005886:	e03a      	b.n	80058fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d020      	beq.n	80058d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005890:	4b4f      	ldr	r3, [pc, #316]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 8005892:	2201      	movs	r2, #1
 8005894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fe faf3 	bl	8003e80 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800589e:	f7fe faef 	bl	8003e80 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e1a5      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b0:	4b46      	ldr	r3, [pc, #280]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	4b43      	ldr	r3, [pc, #268]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4940      	ldr	r1, [pc, #256]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	600b      	str	r3, [r1, #0]
 80058d0:	e015      	b.n	80058fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d2:	4b3f      	ldr	r3, [pc, #252]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fe fad2 	bl	8003e80 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e0:	f7fe face 	bl	8003e80 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e184      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f2:	4b36      	ldr	r3, [pc, #216]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d030      	beq.n	800596c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005912:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <HAL_RCC_OscConfig+0x2b4>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fe fab2 	bl	8003e80 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005920:	f7fe faae 	bl	8003e80 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e164      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0x200>
 800593e:	e015      	b.n	800596c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005940:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <HAL_RCC_OscConfig+0x2b4>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005946:	f7fe fa9b 	bl	8003e80 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800594e:	f7fe fa97 	bl	8003e80 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e14d      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005960:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f0      	bne.n	800594e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80a0 	beq.w	8005aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10f      	bne.n	80059aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_OscConfig+0x2b8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d121      	bne.n	80059fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <HAL_RCC_OscConfig+0x2b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a07      	ldr	r2, [pc, #28]	; (80059d8 <HAL_RCC_OscConfig+0x2b8>)
 80059bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059c2:	f7fe fa5d 	bl	8003e80 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c8:	e011      	b.n	80059ee <HAL_RCC_OscConfig+0x2ce>
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	42470000 	.word	0x42470000
 80059d4:	42470e80 	.word	0x42470e80
 80059d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059dc:	f7fe fa50 	bl	8003e80 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e106      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ee:	4b85      	ldr	r3, [pc, #532]	; (8005c04 <HAL_RCC_OscConfig+0x4e4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d106      	bne.n	8005a10 <HAL_RCC_OscConfig+0x2f0>
 8005a02:	4b81      	ldr	r3, [pc, #516]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a80      	ldr	r2, [pc, #512]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0e:	e01c      	b.n	8005a4a <HAL_RCC_OscConfig+0x32a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	d10c      	bne.n	8005a32 <HAL_RCC_OscConfig+0x312>
 8005a18:	4b7b      	ldr	r3, [pc, #492]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1c:	4a7a      	ldr	r2, [pc, #488]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a1e:	f043 0304 	orr.w	r3, r3, #4
 8005a22:	6713      	str	r3, [r2, #112]	; 0x70
 8005a24:	4b78      	ldr	r3, [pc, #480]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a28:	4a77      	ldr	r2, [pc, #476]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a30:	e00b      	b.n	8005a4a <HAL_RCC_OscConfig+0x32a>
 8005a32:	4b75      	ldr	r3, [pc, #468]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	4a74      	ldr	r2, [pc, #464]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3e:	4b72      	ldr	r3, [pc, #456]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a71      	ldr	r2, [pc, #452]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a44:	f023 0304 	bic.w	r3, r3, #4
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d015      	beq.n	8005a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a52:	f7fe fa15 	bl	8003e80 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fe fa11 	bl	8003e80 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e0c5      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	4b65      	ldr	r3, [pc, #404]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ee      	beq.n	8005a5a <HAL_RCC_OscConfig+0x33a>
 8005a7c:	e014      	b.n	8005aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7e:	f7fe f9ff 	bl	8003e80 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fe f9fb 	bl	8003e80 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0af      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9c:	4b5a      	ldr	r3, [pc, #360]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ee      	bne.n	8005a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d105      	bne.n	8005aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aae:	4b56      	ldr	r3, [pc, #344]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	4a55      	ldr	r2, [pc, #340]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 809b 	beq.w	8005bfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ac4:	4b50      	ldr	r3, [pc, #320]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 030c 	and.w	r3, r3, #12
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d05c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d141      	bne.n	8005b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad8:	4b4c      	ldr	r3, [pc, #304]	; (8005c0c <HAL_RCC_OscConfig+0x4ec>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ade:	f7fe f9cf 	bl	8003e80 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fe f9cb 	bl	8003e80 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e081      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af8:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	019b      	lsls	r3, r3, #6
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	061b      	lsls	r3, r3, #24
 8005b28:	4937      	ldr	r1, [pc, #220]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b2e:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <HAL_RCC_OscConfig+0x4ec>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fe f9a4 	bl	8003e80 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3c:	f7fe f9a0 	bl	8003e80 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e056      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0x41c>
 8005b5a:	e04e      	b.n	8005bfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5c:	4b2b      	ldr	r3, [pc, #172]	; (8005c0c <HAL_RCC_OscConfig+0x4ec>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b62:	f7fe f98d 	bl	8003e80 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b6a:	f7fe f989 	bl	8003e80 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e03f      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7c:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f0      	bne.n	8005b6a <HAL_RCC_OscConfig+0x44a>
 8005b88:	e037      	b.n	8005bfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e032      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b96:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <HAL_RCC_OscConfig+0x4e8>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d028      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d121      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d11a      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d111      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	3b01      	subs	r3, #1
 8005be0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40007000 	.word	0x40007000
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	42470060 	.word	0x42470060

08005c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0cc      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c24:	4b68      	ldr	r3, [pc, #416]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d90c      	bls.n	8005c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b65      	ldr	r3, [pc, #404]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3a:	4b63      	ldr	r3, [pc, #396]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0b8      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d020      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c64:	4b59      	ldr	r3, [pc, #356]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4a58      	ldr	r2, [pc, #352]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c7c:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4a52      	ldr	r2, [pc, #328]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c88:	4b50      	ldr	r3, [pc, #320]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	494d      	ldr	r1, [pc, #308]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d044      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cae:	4b47      	ldr	r3, [pc, #284]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d119      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e07f      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d003      	beq.n	8005cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cce:	4b3f      	ldr	r3, [pc, #252]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e06f      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cde:	4b3b      	ldr	r3, [pc, #236]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e067      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cee:	4b37      	ldr	r3, [pc, #220]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4934      	ldr	r1, [pc, #208]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d00:	f7fe f8be 	bl	8003e80 <HAL_GetTick>
 8005d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d08:	f7fe f8ba 	bl	8003e80 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e04f      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 020c 	and.w	r2, r3, #12
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d1eb      	bne.n	8005d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d30:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d20c      	bcs.n	8005d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d46:	4b20      	ldr	r3, [pc, #128]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d001      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e032      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d64:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4916      	ldr	r1, [pc, #88]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	490e      	ldr	r1, [pc, #56]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d96:	f000 f821 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	490a      	ldr	r1, [pc, #40]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005da8:	5ccb      	ldrb	r3, [r1, r3]
 8005daa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f81e 	bl	8003df8 <HAL_InitTick>

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40023c00 	.word	0x40023c00
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	08008544 	.word	0x08008544
 8005dd4:	20000000 	.word	0x20000000
 8005dd8:	200000bc 	.word	0x200000bc

08005ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	607b      	str	r3, [r7, #4]
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	2300      	movs	r3, #0
 8005dee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005df4:	4b67      	ldr	r3, [pc, #412]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d00d      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x40>
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	f200 80bd 	bhi.w	8005f80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x34>
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d003      	beq.n	8005e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e0e:	e0b7      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e10:	4b61      	ldr	r3, [pc, #388]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e12:	60bb      	str	r3, [r7, #8]
       break;
 8005e14:	e0b7      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e16:	4b61      	ldr	r3, [pc, #388]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e18:	60bb      	str	r3, [r7, #8]
      break;
 8005e1a:	e0b4      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e1c:	4b5d      	ldr	r3, [pc, #372]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e26:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d04d      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e32:	4b58      	ldr	r3, [pc, #352]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e42:	f04f 0100 	mov.w	r1, #0
 8005e46:	ea02 0800 	and.w	r8, r2, r0
 8005e4a:	ea03 0901 	and.w	r9, r3, r1
 8005e4e:	4640      	mov	r0, r8
 8005e50:	4649      	mov	r1, r9
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	014b      	lsls	r3, r1, #5
 8005e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e60:	0142      	lsls	r2, r0, #5
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	ebb0 0008 	subs.w	r0, r0, r8
 8005e6a:	eb61 0109 	sbc.w	r1, r1, r9
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	018b      	lsls	r3, r1, #6
 8005e78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e7c:	0182      	lsls	r2, r0, #6
 8005e7e:	1a12      	subs	r2, r2, r0
 8005e80:	eb63 0301 	sbc.w	r3, r3, r1
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	00d9      	lsls	r1, r3, #3
 8005e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e92:	00d0      	lsls	r0, r2, #3
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	eb12 0208 	adds.w	r2, r2, r8
 8005e9c:	eb43 0309 	adc.w	r3, r3, r9
 8005ea0:	f04f 0000 	mov.w	r0, #0
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	0259      	lsls	r1, r3, #9
 8005eaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005eae:	0250      	lsls	r0, r2, #9
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	f7fa fbba 	bl	8000638 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4613      	mov	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e04a      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ece:	4b31      	ldr	r3, [pc, #196]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	099b      	lsrs	r3, r3, #6
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ede:	f04f 0100 	mov.w	r1, #0
 8005ee2:	ea02 0400 	and.w	r4, r2, r0
 8005ee6:	ea03 0501 	and.w	r5, r3, r1
 8005eea:	4620      	mov	r0, r4
 8005eec:	4629      	mov	r1, r5
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	014b      	lsls	r3, r1, #5
 8005ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005efc:	0142      	lsls	r2, r0, #5
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	1b00      	subs	r0, r0, r4
 8005f04:	eb61 0105 	sbc.w	r1, r1, r5
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	018b      	lsls	r3, r1, #6
 8005f12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f16:	0182      	lsls	r2, r0, #6
 8005f18:	1a12      	subs	r2, r2, r0
 8005f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f1e:	f04f 0000 	mov.w	r0, #0
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	00d9      	lsls	r1, r3, #3
 8005f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f2c:	00d0      	lsls	r0, r2, #3
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	1912      	adds	r2, r2, r4
 8005f34:	eb45 0303 	adc.w	r3, r5, r3
 8005f38:	f04f 0000 	mov.w	r0, #0
 8005f3c:	f04f 0100 	mov.w	r1, #0
 8005f40:	0299      	lsls	r1, r3, #10
 8005f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f46:	0290      	lsls	r0, r2, #10
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	f7fa fb6e 	bl	8000638 <__aeabi_uldivmod>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4613      	mov	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	3301      	adds	r3, #1
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	60bb      	str	r3, [r7, #8]
      break;
 8005f7e:	e002      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f82:	60bb      	str	r3, [r7, #8]
      break;
 8005f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f86:	68bb      	ldr	r3, [r7, #8]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800
 8005f98:	00f42400 	.word	0x00f42400
 8005f9c:	007a1200 	.word	0x007a1200

08005fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa4:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000000 	.word	0x20000000

08005fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fbc:	f7ff fff0 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	0a9b      	lsrs	r3, r3, #10
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	4903      	ldr	r1, [pc, #12]	; (8005fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fce:	5ccb      	ldrb	r3, [r1, r3]
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	08008554 	.word	0x08008554

08005fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fe4:	f7ff ffdc 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0b5b      	lsrs	r3, r3, #13
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4903      	ldr	r1, [pc, #12]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40023800 	.word	0x40023800
 8006004:	08008554 	.word	0x08008554

08006008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e041      	b.n	800609e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fa fed6 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f000 fbd8 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e041      	b.n	800613c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f839 	bl	8006144 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f000 fb89 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <HAL_TIM_OC_Start_IT+0x28>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	e022      	b.n	80061c6 <HAL_TIM_OC_Start_IT+0x6e>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b04      	cmp	r3, #4
 8006184:	d109      	bne.n	800619a <HAL_TIM_OC_Start_IT+0x42>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	e015      	b.n	80061c6 <HAL_TIM_OC_Start_IT+0x6e>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d109      	bne.n	80061b4 <HAL_TIM_OC_Start_IT+0x5c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e008      	b.n	80061c6 <HAL_TIM_OC_Start_IT+0x6e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e0b3      	b.n	8006336 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <HAL_TIM_OC_Start_IT+0x86>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061dc:	e013      	b.n	8006206 <HAL_TIM_OC_Start_IT+0xae>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_OC_Start_IT+0x96>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_OC_Start_IT+0xae>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_OC_Start_IT+0xa6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061fc:	e003      	b.n	8006206 <HAL_TIM_OC_Start_IT+0xae>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b0c      	cmp	r3, #12
 800620a:	d841      	bhi.n	8006290 <HAL_TIM_OC_Start_IT+0x138>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <HAL_TIM_OC_Start_IT+0xbc>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006249 	.word	0x08006249
 8006218:	08006291 	.word	0x08006291
 800621c:	08006291 	.word	0x08006291
 8006220:	08006291 	.word	0x08006291
 8006224:	0800625b 	.word	0x0800625b
 8006228:	08006291 	.word	0x08006291
 800622c:	08006291 	.word	0x08006291
 8006230:	08006291 	.word	0x08006291
 8006234:	0800626d 	.word	0x0800626d
 8006238:	08006291 	.word	0x08006291
 800623c:	08006291 	.word	0x08006291
 8006240:	08006291 	.word	0x08006291
 8006244:	0800627f 	.word	0x0800627f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0202 	orr.w	r2, r2, #2
 8006256:	60da      	str	r2, [r3, #12]
      break;
 8006258:	e01d      	b.n	8006296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0204 	orr.w	r2, r2, #4
 8006268:	60da      	str	r2, [r3, #12]
      break;
 800626a:	e014      	b.n	8006296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0208 	orr.w	r2, r2, #8
 800627a:	60da      	str	r2, [r3, #12]
      break;
 800627c:	e00b      	b.n	8006296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0210 	orr.w	r2, r2, #16
 800628c:	60da      	str	r2, [r3, #12]
      break;
 800628e:	e002      	b.n	8006296 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
      break;
 8006294:	bf00      	nop
  }

  if (status == HAL_OK)
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d14b      	bne.n	8006334 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2201      	movs	r2, #1
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fd4f 	bl	8006d48 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a24      	ldr	r2, [pc, #144]	; (8006340 <HAL_TIM_OC_Start_IT+0x1e8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d107      	bne.n	80062c4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <HAL_TIM_OC_Start_IT+0x1e8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d018      	beq.n	8006300 <HAL_TIM_OC_Start_IT+0x1a8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d6:	d013      	beq.n	8006300 <HAL_TIM_OC_Start_IT+0x1a8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <HAL_TIM_OC_Start_IT+0x1ec>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00e      	beq.n	8006300 <HAL_TIM_OC_Start_IT+0x1a8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_TIM_OC_Start_IT+0x1f0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d009      	beq.n	8006300 <HAL_TIM_OC_Start_IT+0x1a8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIM_OC_Start_IT+0x1f4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <HAL_TIM_OC_Start_IT+0x1a8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a15      	ldr	r2, [pc, #84]	; (8006350 <HAL_TIM_OC_Start_IT+0x1f8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d111      	bne.n	8006324 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b06      	cmp	r3, #6
 8006310:	d010      	beq.n	8006334 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006322:	e007      	b.n	8006334 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40014000 	.word	0x40014000

08006354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0202 	mvn.w	r2, #2
 8006380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa11 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fa fce0 	bl	8000d64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa14 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d122      	bne.n	8006404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0204 	mvn.w	r2, #4
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9e7 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fa fcb6 	bl	8000d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f9ea 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d122      	bne.n	8006458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d11b      	bne.n	8006458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0208 	mvn.w	r2, #8
 8006428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9bd 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 8006444:	e005      	b.n	8006452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fa fc8c 	bl	8000d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9c0 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b10      	cmp	r3, #16
 8006464:	d122      	bne.n	80064ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	2b10      	cmp	r3, #16
 8006472:	d11b      	bne.n	80064ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0210 	mvn.w	r2, #16
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2208      	movs	r2, #8
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f993 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fa fc62 	bl	8000d64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f996 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d10e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0201 	mvn.w	r2, #1
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f969 	bl	80067aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	d10e      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d107      	bne.n	8006504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fcc0 	bl	8006e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d10e      	bne.n	8006530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d107      	bne.n	8006530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f95b 	bl	80067e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b20      	cmp	r3, #32
 800653c:	d10e      	bne.n	800655c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b20      	cmp	r3, #32
 800654a:	d107      	bne.n	800655c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0220 	mvn.w	r2, #32
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fc8a 	bl	8006e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_TIM_OC_ConfigChannel+0x1e>
 800657e:	2302      	movs	r3, #2
 8006580:	e048      	b.n	8006614 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b0c      	cmp	r3, #12
 800658e:	d839      	bhi.n	8006604 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065cd 	.word	0x080065cd
 800659c:	08006605 	.word	0x08006605
 80065a0:	08006605 	.word	0x08006605
 80065a4:	08006605 	.word	0x08006605
 80065a8:	080065db 	.word	0x080065db
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006605 	.word	0x08006605
 80065b8:	080065e9 	.word	0x080065e9
 80065bc:	08006605 	.word	0x08006605
 80065c0:	08006605 	.word	0x08006605
 80065c4:	08006605 	.word	0x08006605
 80065c8:	080065f7 	.word	0x080065f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f992 	bl	80068fc <TIM_OC1_SetConfig>
      break;
 80065d8:	e017      	b.n	800660a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f9f1 	bl	80069c8 <TIM_OC2_SetConfig>
      break;
 80065e6:	e010      	b.n	800660a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fa56 	bl	8006aa0 <TIM_OC3_SetConfig>
      break;
 80065f4:	e009      	b.n	800660a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fab9 	bl	8006b74 <TIM_OC4_SetConfig>
      break;
 8006602:	e002      	b.n	800660a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
      break;
 8006608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIM_ConfigClockSource+0x1c>
 8006634:	2302      	movs	r3, #2
 8006636:	e0b4      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x186>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006670:	d03e      	beq.n	80066f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006676:	f200 8087 	bhi.w	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 800667a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667e:	f000 8086 	beq.w	800678e <HAL_TIM_ConfigClockSource+0x172>
 8006682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006686:	d87f      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	2b70      	cmp	r3, #112	; 0x70
 800668a:	d01a      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0xa6>
 800668c:	2b70      	cmp	r3, #112	; 0x70
 800668e:	d87b      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 8006690:	2b60      	cmp	r3, #96	; 0x60
 8006692:	d050      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x11a>
 8006694:	2b60      	cmp	r3, #96	; 0x60
 8006696:	d877      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 8006698:	2b50      	cmp	r3, #80	; 0x50
 800669a:	d03c      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0xfa>
 800669c:	2b50      	cmp	r3, #80	; 0x50
 800669e:	d873      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d058      	beq.n	8006756 <HAL_TIM_ConfigClockSource+0x13a>
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d86f      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 80066a8:	2b30      	cmp	r3, #48	; 0x30
 80066aa:	d064      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0x15a>
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d86b      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d060      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0x15a>
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d867      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d05c      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d05a      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0x15a>
 80066c0:	e062      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	6899      	ldr	r1, [r3, #8]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f000 fb19 	bl	8006d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	609a      	str	r2, [r3, #8]
      break;
 80066ee:	e04f      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	6899      	ldr	r1, [r3, #8]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f000 fb02 	bl	8006d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006712:	609a      	str	r2, [r3, #8]
      break;
 8006714:	e03c      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fa76 	bl	8006c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2150      	movs	r1, #80	; 0x50
 800672e:	4618      	mov	r0, r3
 8006730:	f000 facf 	bl	8006cd2 <TIM_ITRx_SetConfig>
      break;
 8006734:	e02c      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6859      	ldr	r1, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	461a      	mov	r2, r3
 8006744:	f000 fa95 	bl	8006c72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2160      	movs	r1, #96	; 0x60
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fabf 	bl	8006cd2 <TIM_ITRx_SetConfig>
      break;
 8006754:	e01c      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	6859      	ldr	r1, [r3, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	461a      	mov	r2, r3
 8006764:	f000 fa56 	bl	8006c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2140      	movs	r1, #64	; 0x40
 800676e:	4618      	mov	r0, r3
 8006770:	f000 faaf 	bl	8006cd2 <TIM_ITRx_SetConfig>
      break;
 8006774:	e00c      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f000 faa6 	bl	8006cd2 <TIM_ITRx_SetConfig>
      break;
 8006786:	e003      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
      break;
 800678c:	e000      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800678e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a34      	ldr	r2, [pc, #208]	; (80068e0 <TIM_Base_SetConfig+0xe4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00f      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d00b      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a31      	ldr	r2, [pc, #196]	; (80068e4 <TIM_Base_SetConfig+0xe8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a30      	ldr	r2, [pc, #192]	; (80068e8 <TIM_Base_SetConfig+0xec>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_Base_SetConfig+0x38>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a2f      	ldr	r2, [pc, #188]	; (80068ec <TIM_Base_SetConfig+0xf0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d108      	bne.n	8006846 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <TIM_Base_SetConfig+0xe4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01b      	beq.n	8006886 <TIM_Base_SetConfig+0x8a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006854:	d017      	beq.n	8006886 <TIM_Base_SetConfig+0x8a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a22      	ldr	r2, [pc, #136]	; (80068e4 <TIM_Base_SetConfig+0xe8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <TIM_Base_SetConfig+0x8a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a21      	ldr	r2, [pc, #132]	; (80068e8 <TIM_Base_SetConfig+0xec>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00f      	beq.n	8006886 <TIM_Base_SetConfig+0x8a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a20      	ldr	r2, [pc, #128]	; (80068ec <TIM_Base_SetConfig+0xf0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00b      	beq.n	8006886 <TIM_Base_SetConfig+0x8a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1f      	ldr	r2, [pc, #124]	; (80068f0 <TIM_Base_SetConfig+0xf4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <TIM_Base_SetConfig+0x8a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <TIM_Base_SetConfig+0xf8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_Base_SetConfig+0x8a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1d      	ldr	r2, [pc, #116]	; (80068f8 <TIM_Base_SetConfig+0xfc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d108      	bne.n	8006898 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a08      	ldr	r2, [pc, #32]	; (80068e0 <TIM_Base_SetConfig+0xe4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d103      	bne.n	80068cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	615a      	str	r2, [r3, #20]
}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40000400 	.word	0x40000400
 80068e8:	40000800 	.word	0x40000800
 80068ec:	40000c00 	.word	0x40000c00
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800

080068fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f023 0201 	bic.w	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 0302 	bic.w	r3, r3, #2
 8006944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <TIM_OC1_SetConfig+0xc8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d10c      	bne.n	8006972 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0308 	bic.w	r3, r3, #8
 800695e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a13      	ldr	r2, [pc, #76]	; (80069c4 <TIM_OC1_SetConfig+0xc8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d111      	bne.n	800699e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	621a      	str	r2, [r3, #32]
}
 80069b8:	bf00      	nop
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40010000 	.word	0x40010000

080069c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f023 0210 	bic.w	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0320 	bic.w	r3, r3, #32
 8006a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <TIM_OC2_SetConfig+0xd4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10d      	bne.n	8006a44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a15      	ldr	r2, [pc, #84]	; (8006a9c <TIM_OC2_SetConfig+0xd4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d113      	bne.n	8006a74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40010000 	.word	0x40010000

08006aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1d      	ldr	r2, [pc, #116]	; (8006b70 <TIM_OC3_SetConfig+0xd0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10d      	bne.n	8006b1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <TIM_OC3_SetConfig+0xd0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d113      	bne.n	8006b4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	621a      	str	r2, [r3, #32]
}
 8006b64:	bf00      	nop
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	40010000 	.word	0x40010000

08006b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	031b      	lsls	r3, r3, #12
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a10      	ldr	r2, [pc, #64]	; (8006c10 <TIM_OC4_SetConfig+0x9c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d109      	bne.n	8006be8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010000 	.word	0x40010000

08006c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f023 0201 	bic.w	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 030a 	bic.w	r3, r3, #10
 8006c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b087      	sub	sp, #28
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 0210 	bic.w	r2, r3, #16
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	031b      	lsls	r3, r3, #12
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f043 0307 	orr.w	r3, r3, #7
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	021a      	lsls	r2, r3, #8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1a      	ldr	r2, [r3, #32]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a1a      	ldr	r2, [r3, #32]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f003 031f 	and.w	r3, r3, #31
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e050      	b.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1c      	ldr	r2, [pc, #112]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df8:	d013      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a18      	ldr	r2, [pc, #96]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a16      	ldr	r2, [pc, #88]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a15      	ldr	r2, [pc, #84]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a13      	ldr	r2, [pc, #76]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d10c      	bne.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40000c00 	.word	0x40000c00
 8006e6c:	40014000 	.word	0x40014000

08006e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e03f      	b.n	8006f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7f9 ffb6 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2224      	movs	r2, #36	; 0x24
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fcbf 	bl	8007860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d130      	bne.n	8006fae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_UART_Transmit_IT+0x26>
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e029      	b.n	8006fb0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_UART_Transmit_IT+0x38>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e022      	b.n	8006fb0 <HAL_UART_Transmit_IT+0x7e>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2221      	movs	r2, #33	; 0x21
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fa8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b0ba      	sub	sp, #232	; 0xe8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10f      	bne.n	8007022 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <HAL_UART_IRQHandler+0x66>
 800700e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fb65 	bl	80076ea <UART_Receive_IT>
      return;
 8007020:	e256      	b.n	80074d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80de 	beq.w	80071e8 <HAL_UART_IRQHandler+0x22c>
 800702c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80d1 	beq.w	80071e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <HAL_UART_IRQHandler+0xae>
 8007052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f043 0201 	orr.w	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800706a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <HAL_UART_IRQHandler+0xd2>
 8007076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f043 0202 	orr.w	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <HAL_UART_IRQHandler+0xf6>
 800709a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d011      	beq.n	80070e2 <HAL_UART_IRQHandler+0x126>
 80070be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f043 0208 	orr.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 81ed 	beq.w	80074c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_UART_IRQHandler+0x14e>
 80070f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 faf0 	bl	80076ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d103      	bne.n	8007136 <HAL_UART_IRQHandler+0x17a>
 800712e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007132:	2b00      	cmp	r3, #0
 8007134:	d04f      	beq.n	80071d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f9f8 	bl	800752c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	d141      	bne.n	80071ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3314      	adds	r3, #20
 8007150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007176:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800717a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800718e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1d9      	bne.n	800714a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	2b00      	cmp	r3, #0
 800719c:	d013      	beq.n	80071c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	4a7d      	ldr	r2, [pc, #500]	; (8007398 <HAL_UART_IRQHandler+0x3dc>)
 80071a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fc fff5 	bl	800419a <HAL_DMA_Abort_IT>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d016      	beq.n	80071e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	e00e      	b.n	80071e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f99a 	bl	8007500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	e00a      	b.n	80071e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f996 	bl	8007500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	e006      	b.n	80071e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f992 	bl	8007500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071e2:	e170      	b.n	80074c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	bf00      	nop
    return;
 80071e6:	e16e      	b.n	80074c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	f040 814a 	bne.w	8007486 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8143 	beq.w	8007486 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 813c 	beq.w	8007486 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800720e:	2300      	movs	r3, #0
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60bb      	str	r3, [r7, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	f040 80b4 	bne.w	800739c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8140 	beq.w	80074ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800724e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007252:	429a      	cmp	r2, r3
 8007254:	f080 8139 	bcs.w	80074ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800725e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726a:	f000 8088 	beq.w	800737e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800729a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800729e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1d9      	bne.n	800726e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3314      	adds	r3, #20
 80072da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e1      	bne.n	80072ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3314      	adds	r3, #20
 8007316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800731a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800731c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007320:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e3      	bne.n	80072f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330c      	adds	r3, #12
 8007342:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800734c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800734e:	f023 0310 	bic.w	r3, r3, #16
 8007352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007360:	65ba      	str	r2, [r7, #88]	; 0x58
 8007362:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800736e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e3      	bne.n	800733c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	4618      	mov	r0, r3
 800737a:	f7fc fe9e 	bl	80040ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007386:	b29b      	uxth	r3, r3
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	b29b      	uxth	r3, r3
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f8c0 	bl	8007514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007394:	e099      	b.n	80074ca <HAL_UART_IRQHandler+0x50e>
 8007396:	bf00      	nop
 8007398:	080075f3 	.word	0x080075f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 808b 	beq.w	80074ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80073b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8086 	beq.w	80074ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330c      	adds	r3, #12
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	330c      	adds	r3, #12
 80073e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073e6:	647a      	str	r2, [r7, #68]	; 0x44
 80073e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e3      	bne.n	80073c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3314      	adds	r3, #20
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	623b      	str	r3, [r7, #32]
   return(result);
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3314      	adds	r3, #20
 800741a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800741e:	633a      	str	r2, [r7, #48]	; 0x30
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e3      	bne.n	80073fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0310 	bic.w	r3, r3, #16
 8007456:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007464:	61fa      	str	r2, [r7, #28]
 8007466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	69b9      	ldr	r1, [r7, #24]
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	617b      	str	r3, [r7, #20]
   return(result);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e3      	bne.n	8007440 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f848 	bl	8007514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007484:	e023      	b.n	80074ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <HAL_UART_IRQHandler+0x4ea>
 8007492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8bb 	bl	800761a <UART_Transmit_IT>
    return;
 80074a4:	e014      	b.n	80074d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00e      	beq.n	80074d0 <HAL_UART_IRQHandler+0x514>
 80074b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8fb 	bl	80076ba <UART_EndTransmit_IT>
    return;
 80074c4:	e004      	b.n	80074d0 <HAL_UART_IRQHandler+0x514>
    return;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <HAL_UART_IRQHandler+0x514>
      return;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <HAL_UART_IRQHandler+0x514>
      return;
 80074ce:	bf00      	nop
  }
}
 80074d0:	37e8      	adds	r7, #232	; 0xe8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop

080074d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b095      	sub	sp, #84	; 0x54
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800754a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	330c      	adds	r3, #12
 8007552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007554:	643a      	str	r2, [r7, #64]	; 0x40
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800755a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	61fb      	str	r3, [r7, #28]
   return(result);
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3314      	adds	r3, #20
 8007586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800758a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800758e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e5      	bne.n	8007568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d119      	bne.n	80075d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 0310 	bic.w	r3, r3, #16
 80075ba:	647b      	str	r3, [r7, #68]	; 0x44
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075c4:	61ba      	str	r2, [r7, #24]
 80075c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6979      	ldr	r1, [r7, #20]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	613b      	str	r3, [r7, #16]
   return(result);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e5      	bne.n	80075a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075e6:	bf00      	nop
 80075e8:	3754      	adds	r7, #84	; 0x54
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7ff ff77 	bl	8007500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b21      	cmp	r3, #33	; 0x21
 800762c:	d13e      	bne.n	80076ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007636:	d114      	bne.n	8007662 <UART_Transmit_IT+0x48>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d110      	bne.n	8007662 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007654:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]
 8007660:	e008      	b.n	8007674 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6211      	str	r1, [r2, #32]
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29b      	uxth	r3, r3
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	4619      	mov	r1, r3
 8007682:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10f      	bne.n	80076a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007696:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fefc 	bl	80074d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b08c      	sub	sp, #48	; 0x30
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b22      	cmp	r3, #34	; 0x22
 80076fc:	f040 80ab 	bne.w	8007856 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007708:	d117      	bne.n	800773a <UART_Receive_IT+0x50>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d113      	bne.n	800773a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007728:	b29a      	uxth	r2, r3
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
 8007738:	e026      	b.n	8007788 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774c:	d007      	beq.n	800775e <UART_Receive_IT+0x74>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <UART_Receive_IT+0x82>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e008      	b.n	800777e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007778:	b2da      	uxtb	r2, r3
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29b      	uxth	r3, r3
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4619      	mov	r1, r3
 8007796:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007798:	2b00      	cmp	r3, #0
 800779a:	d15a      	bne.n	8007852 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0220 	bic.w	r2, r2, #32
 80077aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d135      	bne.n	8007848 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	613b      	str	r3, [r7, #16]
   return(result);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f023 0310 	bic.w	r3, r3, #16
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	330c      	adds	r3, #12
 8007800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007802:	623a      	str	r2, [r7, #32]
 8007804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	69f9      	ldr	r1, [r7, #28]
 8007808:	6a3a      	ldr	r2, [r7, #32]
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e5      	bne.n	80077e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b10      	cmp	r3, #16
 8007822:	d10a      	bne.n	800783a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fe67 	bl	8007514 <HAL_UARTEx_RxEventCallback>
 8007846:	e002      	b.n	800784e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fe4f 	bl	80074ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e002      	b.n	8007858 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	e000      	b.n	8007858 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007856:	2302      	movs	r3, #2
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3730      	adds	r7, #48	; 0x30
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	b09f      	sub	sp, #124	; 0x7c
 8007866:	af00      	add	r7, sp, #0
 8007868:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800786a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007876:	68d9      	ldr	r1, [r3, #12]
 8007878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	ea40 0301 	orr.w	r3, r0, r1
 8007880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	431a      	orrs	r2, r3
 800788c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	431a      	orrs	r2, r3
 8007892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	4313      	orrs	r3, r2
 8007898:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800789a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078a4:	f021 010c 	bic.w	r1, r1, #12
 80078a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078ae:	430b      	orrs	r3, r1
 80078b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078be:	6999      	ldr	r1, [r3, #24]
 80078c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	ea40 0301 	orr.w	r3, r0, r1
 80078c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4bc5      	ldr	r3, [pc, #788]	; (8007be4 <UART_SetConfig+0x384>)
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d004      	beq.n	80078de <UART_SetConfig+0x7e>
 80078d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4bc3      	ldr	r3, [pc, #780]	; (8007be8 <UART_SetConfig+0x388>)
 80078da:	429a      	cmp	r2, r3
 80078dc:	d103      	bne.n	80078e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078de:	f7fe fb7f 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 80078e2:	6778      	str	r0, [r7, #116]	; 0x74
 80078e4:	e002      	b.n	80078ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078e6:	f7fe fb67 	bl	8005fb8 <HAL_RCC_GetPCLK1Freq>
 80078ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f4:	f040 80b6 	bne.w	8007a64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fa:	461c      	mov	r4, r3
 80078fc:	f04f 0500 	mov.w	r5, #0
 8007900:	4622      	mov	r2, r4
 8007902:	462b      	mov	r3, r5
 8007904:	1891      	adds	r1, r2, r2
 8007906:	6439      	str	r1, [r7, #64]	; 0x40
 8007908:	415b      	adcs	r3, r3
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
 800790c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007910:	1912      	adds	r2, r2, r4
 8007912:	eb45 0303 	adc.w	r3, r5, r3
 8007916:	f04f 0000 	mov.w	r0, #0
 800791a:	f04f 0100 	mov.w	r1, #0
 800791e:	00d9      	lsls	r1, r3, #3
 8007920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007924:	00d0      	lsls	r0, r2, #3
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	1911      	adds	r1, r2, r4
 800792c:	6639      	str	r1, [r7, #96]	; 0x60
 800792e:	416b      	adcs	r3, r5
 8007930:	667b      	str	r3, [r7, #100]	; 0x64
 8007932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	461a      	mov	r2, r3
 8007938:	f04f 0300 	mov.w	r3, #0
 800793c:	1891      	adds	r1, r2, r2
 800793e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007940:	415b      	adcs	r3, r3
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007948:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800794c:	f7f8 fe74 	bl	8000638 <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4ba5      	ldr	r3, [pc, #660]	; (8007bec <UART_SetConfig+0x38c>)
 8007956:	fba3 2302 	umull	r2, r3, r3, r2
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	011e      	lsls	r6, r3, #4
 800795e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007960:	461c      	mov	r4, r3
 8007962:	f04f 0500 	mov.w	r5, #0
 8007966:	4622      	mov	r2, r4
 8007968:	462b      	mov	r3, r5
 800796a:	1891      	adds	r1, r2, r2
 800796c:	6339      	str	r1, [r7, #48]	; 0x30
 800796e:	415b      	adcs	r3, r3
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
 8007972:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007976:	1912      	adds	r2, r2, r4
 8007978:	eb45 0303 	adc.w	r3, r5, r3
 800797c:	f04f 0000 	mov.w	r0, #0
 8007980:	f04f 0100 	mov.w	r1, #0
 8007984:	00d9      	lsls	r1, r3, #3
 8007986:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800798a:	00d0      	lsls	r0, r2, #3
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	1911      	adds	r1, r2, r4
 8007992:	65b9      	str	r1, [r7, #88]	; 0x58
 8007994:	416b      	adcs	r3, r5
 8007996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	461a      	mov	r2, r3
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	1891      	adds	r1, r2, r2
 80079a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80079a6:	415b      	adcs	r3, r3
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80079b2:	f7f8 fe41 	bl	8000638 <__aeabi_uldivmod>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4b8c      	ldr	r3, [pc, #560]	; (8007bec <UART_SetConfig+0x38c>)
 80079bc:	fba3 1302 	umull	r1, r3, r3, r2
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	2164      	movs	r1, #100	; 0x64
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	3332      	adds	r3, #50	; 0x32
 80079ce:	4a87      	ldr	r2, [pc, #540]	; (8007bec <UART_SetConfig+0x38c>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079dc:	441e      	add	r6, r3
 80079de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e0:	4618      	mov	r0, r3
 80079e2:	f04f 0100 	mov.w	r1, #0
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	1894      	adds	r4, r2, r2
 80079ec:	623c      	str	r4, [r7, #32]
 80079ee:	415b      	adcs	r3, r3
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
 80079f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079f6:	1812      	adds	r2, r2, r0
 80079f8:	eb41 0303 	adc.w	r3, r1, r3
 80079fc:	f04f 0400 	mov.w	r4, #0
 8007a00:	f04f 0500 	mov.w	r5, #0
 8007a04:	00dd      	lsls	r5, r3, #3
 8007a06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a0a:	00d4      	lsls	r4, r2, #3
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	462b      	mov	r3, r5
 8007a10:	1814      	adds	r4, r2, r0
 8007a12:	653c      	str	r4, [r7, #80]	; 0x50
 8007a14:	414b      	adcs	r3, r1
 8007a16:	657b      	str	r3, [r7, #84]	; 0x54
 8007a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	1891      	adds	r1, r2, r2
 8007a24:	61b9      	str	r1, [r7, #24]
 8007a26:	415b      	adcs	r3, r3
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a32:	f7f8 fe01 	bl	8000638 <__aeabi_uldivmod>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4b6c      	ldr	r3, [pc, #432]	; (8007bec <UART_SetConfig+0x38c>)
 8007a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	2164      	movs	r1, #100	; 0x64
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	3332      	adds	r3, #50	; 0x32
 8007a4e:	4a67      	ldr	r2, [pc, #412]	; (8007bec <UART_SetConfig+0x38c>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	f003 0207 	and.w	r2, r3, #7
 8007a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4432      	add	r2, r6
 8007a60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a62:	e0b9      	b.n	8007bd8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a66:	461c      	mov	r4, r3
 8007a68:	f04f 0500 	mov.w	r5, #0
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	462b      	mov	r3, r5
 8007a70:	1891      	adds	r1, r2, r2
 8007a72:	6139      	str	r1, [r7, #16]
 8007a74:	415b      	adcs	r3, r3
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a7c:	1912      	adds	r2, r2, r4
 8007a7e:	eb45 0303 	adc.w	r3, r5, r3
 8007a82:	f04f 0000 	mov.w	r0, #0
 8007a86:	f04f 0100 	mov.w	r1, #0
 8007a8a:	00d9      	lsls	r1, r3, #3
 8007a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a90:	00d0      	lsls	r0, r2, #3
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	eb12 0804 	adds.w	r8, r2, r4
 8007a9a:	eb43 0905 	adc.w	r9, r3, r5
 8007a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f04f 0100 	mov.w	r1, #0
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	008b      	lsls	r3, r1, #2
 8007ab2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ab6:	0082      	lsls	r2, r0, #2
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4649      	mov	r1, r9
 8007abc:	f7f8 fdbc 	bl	8000638 <__aeabi_uldivmod>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4b49      	ldr	r3, [pc, #292]	; (8007bec <UART_SetConfig+0x38c>)
 8007ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	011e      	lsls	r6, r3, #4
 8007ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f04f 0100 	mov.w	r1, #0
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	1894      	adds	r4, r2, r2
 8007adc:	60bc      	str	r4, [r7, #8]
 8007ade:	415b      	adcs	r3, r3
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ae6:	1812      	adds	r2, r2, r0
 8007ae8:	eb41 0303 	adc.w	r3, r1, r3
 8007aec:	f04f 0400 	mov.w	r4, #0
 8007af0:	f04f 0500 	mov.w	r5, #0
 8007af4:	00dd      	lsls	r5, r3, #3
 8007af6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007afa:	00d4      	lsls	r4, r2, #3
 8007afc:	4622      	mov	r2, r4
 8007afe:	462b      	mov	r3, r5
 8007b00:	1814      	adds	r4, r2, r0
 8007b02:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b04:	414b      	adcs	r3, r1
 8007b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	008b      	lsls	r3, r1, #2
 8007b1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b20:	0082      	lsls	r2, r0, #2
 8007b22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b26:	f7f8 fd87 	bl	8000638 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4b2f      	ldr	r3, [pc, #188]	; (8007bec <UART_SetConfig+0x38c>)
 8007b30:	fba3 1302 	umull	r1, r3, r3, r2
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	2164      	movs	r1, #100	; 0x64
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	3332      	adds	r3, #50	; 0x32
 8007b42:	4a2a      	ldr	r2, [pc, #168]	; (8007bec <UART_SetConfig+0x38c>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b4e:	441e      	add	r6, r3
 8007b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b52:	4618      	mov	r0, r3
 8007b54:	f04f 0100 	mov.w	r1, #0
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	1894      	adds	r4, r2, r2
 8007b5e:	603c      	str	r4, [r7, #0]
 8007b60:	415b      	adcs	r3, r3
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b68:	1812      	adds	r2, r2, r0
 8007b6a:	eb41 0303 	adc.w	r3, r1, r3
 8007b6e:	f04f 0400 	mov.w	r4, #0
 8007b72:	f04f 0500 	mov.w	r5, #0
 8007b76:	00dd      	lsls	r5, r3, #3
 8007b78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b7c:	00d4      	lsls	r4, r2, #3
 8007b7e:	4622      	mov	r2, r4
 8007b80:	462b      	mov	r3, r5
 8007b82:	eb12 0a00 	adds.w	sl, r2, r0
 8007b86:	eb43 0b01 	adc.w	fp, r3, r1
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f04f 0100 	mov.w	r1, #0
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	008b      	lsls	r3, r1, #2
 8007b9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ba2:	0082      	lsls	r2, r0, #2
 8007ba4:	4650      	mov	r0, sl
 8007ba6:	4659      	mov	r1, fp
 8007ba8:	f7f8 fd46 	bl	8000638 <__aeabi_uldivmod>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <UART_SetConfig+0x38c>)
 8007bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	2164      	movs	r1, #100	; 0x64
 8007bba:	fb01 f303 	mul.w	r3, r1, r3
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	3332      	adds	r3, #50	; 0x32
 8007bc4:	4a09      	ldr	r2, [pc, #36]	; (8007bec <UART_SetConfig+0x38c>)
 8007bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	f003 020f 	and.w	r2, r3, #15
 8007bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4432      	add	r2, r6
 8007bd6:	609a      	str	r2, [r3, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	377c      	adds	r7, #124	; 0x7c
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be2:	bf00      	nop
 8007be4:	40011000 	.word	0x40011000
 8007be8:	40011400 	.word	0x40011400
 8007bec:	51eb851f 	.word	0x51eb851f

08007bf0 <__errno>:
 8007bf0:	4b01      	ldr	r3, [pc, #4]	; (8007bf8 <__errno+0x8>)
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	200000c4 	.word	0x200000c4

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	4d0d      	ldr	r5, [pc, #52]	; (8007c34 <__libc_init_array+0x38>)
 8007c00:	4c0d      	ldr	r4, [pc, #52]	; (8007c38 <__libc_init_array+0x3c>)
 8007c02:	1b64      	subs	r4, r4, r5
 8007c04:	10a4      	asrs	r4, r4, #2
 8007c06:	2600      	movs	r6, #0
 8007c08:	42a6      	cmp	r6, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	4d0b      	ldr	r5, [pc, #44]	; (8007c3c <__libc_init_array+0x40>)
 8007c0e:	4c0c      	ldr	r4, [pc, #48]	; (8007c40 <__libc_init_array+0x44>)
 8007c10:	f000 fc80 	bl	8008514 <_init>
 8007c14:	1b64      	subs	r4, r4, r5
 8007c16:	10a4      	asrs	r4, r4, #2
 8007c18:	2600      	movs	r6, #0
 8007c1a:	42a6      	cmp	r6, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c24:	4798      	blx	r3
 8007c26:	3601      	adds	r6, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2e:	4798      	blx	r3
 8007c30:	3601      	adds	r6, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	08008598 	.word	0x08008598
 8007c38:	08008598 	.word	0x08008598
 8007c3c:	08008598 	.word	0x08008598
 8007c40:	0800859c 	.word	0x0800859c

08007c44 <memset>:
 8007c44:	4402      	add	r2, r0
 8007c46:	4603      	mov	r3, r0
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d100      	bne.n	8007c4e <memset+0xa>
 8007c4c:	4770      	bx	lr
 8007c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c52:	e7f9      	b.n	8007c48 <memset+0x4>

08007c54 <siprintf>:
 8007c54:	b40e      	push	{r1, r2, r3}
 8007c56:	b500      	push	{lr}
 8007c58:	b09c      	sub	sp, #112	; 0x70
 8007c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007c5c:	9002      	str	r0, [sp, #8]
 8007c5e:	9006      	str	r0, [sp, #24]
 8007c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c64:	4809      	ldr	r0, [pc, #36]	; (8007c8c <siprintf+0x38>)
 8007c66:	9107      	str	r1, [sp, #28]
 8007c68:	9104      	str	r1, [sp, #16]
 8007c6a:	4909      	ldr	r1, [pc, #36]	; (8007c90 <siprintf+0x3c>)
 8007c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c70:	9105      	str	r1, [sp, #20]
 8007c72:	6800      	ldr	r0, [r0, #0]
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	a902      	add	r1, sp, #8
 8007c78:	f000 f868 	bl	8007d4c <_svfiprintf_r>
 8007c7c:	9b02      	ldr	r3, [sp, #8]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	b01c      	add	sp, #112	; 0x70
 8007c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c88:	b003      	add	sp, #12
 8007c8a:	4770      	bx	lr
 8007c8c:	200000c4 	.word	0x200000c4
 8007c90:	ffff0208 	.word	0xffff0208

08007c94 <__ssputs_r>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	688e      	ldr	r6, [r1, #8]
 8007c9a:	429e      	cmp	r6, r3
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4690      	mov	r8, r2
 8007ca2:	461f      	mov	r7, r3
 8007ca4:	d838      	bhi.n	8007d18 <__ssputs_r+0x84>
 8007ca6:	898a      	ldrh	r2, [r1, #12]
 8007ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cac:	d032      	beq.n	8007d14 <__ssputs_r+0x80>
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	6909      	ldr	r1, [r1, #16]
 8007cb2:	eba5 0901 	sub.w	r9, r5, r1
 8007cb6:	6965      	ldr	r5, [r4, #20]
 8007cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	444b      	add	r3, r9
 8007cc4:	106d      	asrs	r5, r5, #1
 8007cc6:	429d      	cmp	r5, r3
 8007cc8:	bf38      	it	cc
 8007cca:	461d      	movcc	r5, r3
 8007ccc:	0553      	lsls	r3, r2, #21
 8007cce:	d531      	bpl.n	8007d34 <__ssputs_r+0xa0>
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f000 fb47 	bl	8008364 <_malloc_r>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	b950      	cbnz	r0, 8007cf0 <__ssputs_r+0x5c>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	f8ca 3000 	str.w	r3, [sl]
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf0:	6921      	ldr	r1, [r4, #16]
 8007cf2:	464a      	mov	r2, r9
 8007cf4:	f000 fabe 	bl	8008274 <memcpy>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	6126      	str	r6, [r4, #16]
 8007d06:	6165      	str	r5, [r4, #20]
 8007d08:	444e      	add	r6, r9
 8007d0a:	eba5 0509 	sub.w	r5, r5, r9
 8007d0e:	6026      	str	r6, [r4, #0]
 8007d10:	60a5      	str	r5, [r4, #8]
 8007d12:	463e      	mov	r6, r7
 8007d14:	42be      	cmp	r6, r7
 8007d16:	d900      	bls.n	8007d1a <__ssputs_r+0x86>
 8007d18:	463e      	mov	r6, r7
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	4641      	mov	r1, r8
 8007d20:	f000 fab6 	bl	8008290 <memmove>
 8007d24:	68a3      	ldr	r3, [r4, #8]
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	1b9b      	subs	r3, r3, r6
 8007d2a:	4432      	add	r2, r6
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	6022      	str	r2, [r4, #0]
 8007d30:	2000      	movs	r0, #0
 8007d32:	e7db      	b.n	8007cec <__ssputs_r+0x58>
 8007d34:	462a      	mov	r2, r5
 8007d36:	f000 fb6f 	bl	8008418 <_realloc_r>
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d1e1      	bne.n	8007d04 <__ssputs_r+0x70>
 8007d40:	6921      	ldr	r1, [r4, #16]
 8007d42:	4650      	mov	r0, sl
 8007d44:	f000 fabe 	bl	80082c4 <_free_r>
 8007d48:	e7c7      	b.n	8007cda <__ssputs_r+0x46>
	...

08007d4c <_svfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4698      	mov	r8, r3
 8007d52:	898b      	ldrh	r3, [r1, #12]
 8007d54:	061b      	lsls	r3, r3, #24
 8007d56:	b09d      	sub	sp, #116	; 0x74
 8007d58:	4607      	mov	r7, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	d50e      	bpl.n	8007d7e <_svfiprintf_r+0x32>
 8007d60:	690b      	ldr	r3, [r1, #16]
 8007d62:	b963      	cbnz	r3, 8007d7e <_svfiprintf_r+0x32>
 8007d64:	2140      	movs	r1, #64	; 0x40
 8007d66:	f000 fafd 	bl	8008364 <_malloc_r>
 8007d6a:	6028      	str	r0, [r5, #0]
 8007d6c:	6128      	str	r0, [r5, #16]
 8007d6e:	b920      	cbnz	r0, 8007d7a <_svfiprintf_r+0x2e>
 8007d70:	230c      	movs	r3, #12
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	e0d1      	b.n	8007f1e <_svfiprintf_r+0x1d2>
 8007d7a:	2340      	movs	r3, #64	; 0x40
 8007d7c:	616b      	str	r3, [r5, #20]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9309      	str	r3, [sp, #36]	; 0x24
 8007d82:	2320      	movs	r3, #32
 8007d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d8c:	2330      	movs	r3, #48	; 0x30
 8007d8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f38 <_svfiprintf_r+0x1ec>
 8007d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d96:	f04f 0901 	mov.w	r9, #1
 8007d9a:	4623      	mov	r3, r4
 8007d9c:	469a      	mov	sl, r3
 8007d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da2:	b10a      	cbz	r2, 8007da8 <_svfiprintf_r+0x5c>
 8007da4:	2a25      	cmp	r2, #37	; 0x25
 8007da6:	d1f9      	bne.n	8007d9c <_svfiprintf_r+0x50>
 8007da8:	ebba 0b04 	subs.w	fp, sl, r4
 8007dac:	d00b      	beq.n	8007dc6 <_svfiprintf_r+0x7a>
 8007dae:	465b      	mov	r3, fp
 8007db0:	4622      	mov	r2, r4
 8007db2:	4629      	mov	r1, r5
 8007db4:	4638      	mov	r0, r7
 8007db6:	f7ff ff6d 	bl	8007c94 <__ssputs_r>
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f000 80aa 	beq.w	8007f14 <_svfiprintf_r+0x1c8>
 8007dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc2:	445a      	add	r2, fp
 8007dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80a2 	beq.w	8007f14 <_svfiprintf_r+0x1c8>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dda:	f10a 0a01 	add.w	sl, sl, #1
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	9307      	str	r3, [sp, #28]
 8007de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007de6:	931a      	str	r3, [sp, #104]	; 0x68
 8007de8:	4654      	mov	r4, sl
 8007dea:	2205      	movs	r2, #5
 8007dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df0:	4851      	ldr	r0, [pc, #324]	; (8007f38 <_svfiprintf_r+0x1ec>)
 8007df2:	f7f8 f9f5 	bl	80001e0 <memchr>
 8007df6:	9a04      	ldr	r2, [sp, #16]
 8007df8:	b9d8      	cbnz	r0, 8007e32 <_svfiprintf_r+0xe6>
 8007dfa:	06d0      	lsls	r0, r2, #27
 8007dfc:	bf44      	itt	mi
 8007dfe:	2320      	movmi	r3, #32
 8007e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e04:	0711      	lsls	r1, r2, #28
 8007e06:	bf44      	itt	mi
 8007e08:	232b      	movmi	r3, #43	; 0x2b
 8007e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e12:	2b2a      	cmp	r3, #42	; 0x2a
 8007e14:	d015      	beq.n	8007e42 <_svfiprintf_r+0xf6>
 8007e16:	9a07      	ldr	r2, [sp, #28]
 8007e18:	4654      	mov	r4, sl
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f04f 0c0a 	mov.w	ip, #10
 8007e20:	4621      	mov	r1, r4
 8007e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e26:	3b30      	subs	r3, #48	; 0x30
 8007e28:	2b09      	cmp	r3, #9
 8007e2a:	d94e      	bls.n	8007eca <_svfiprintf_r+0x17e>
 8007e2c:	b1b0      	cbz	r0, 8007e5c <_svfiprintf_r+0x110>
 8007e2e:	9207      	str	r2, [sp, #28]
 8007e30:	e014      	b.n	8007e5c <_svfiprintf_r+0x110>
 8007e32:	eba0 0308 	sub.w	r3, r0, r8
 8007e36:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	46a2      	mov	sl, r4
 8007e40:	e7d2      	b.n	8007de8 <_svfiprintf_r+0x9c>
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	1d19      	adds	r1, r3, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	9103      	str	r1, [sp, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bfbb      	ittet	lt
 8007e4e:	425b      	neglt	r3, r3
 8007e50:	f042 0202 	orrlt.w	r2, r2, #2
 8007e54:	9307      	strge	r3, [sp, #28]
 8007e56:	9307      	strlt	r3, [sp, #28]
 8007e58:	bfb8      	it	lt
 8007e5a:	9204      	strlt	r2, [sp, #16]
 8007e5c:	7823      	ldrb	r3, [r4, #0]
 8007e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e60:	d10c      	bne.n	8007e7c <_svfiprintf_r+0x130>
 8007e62:	7863      	ldrb	r3, [r4, #1]
 8007e64:	2b2a      	cmp	r3, #42	; 0x2a
 8007e66:	d135      	bne.n	8007ed4 <_svfiprintf_r+0x188>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	1d1a      	adds	r2, r3, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	9203      	str	r2, [sp, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bfb8      	it	lt
 8007e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e78:	3402      	adds	r4, #2
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f48 <_svfiprintf_r+0x1fc>
 8007e80:	7821      	ldrb	r1, [r4, #0]
 8007e82:	2203      	movs	r2, #3
 8007e84:	4650      	mov	r0, sl
 8007e86:	f7f8 f9ab 	bl	80001e0 <memchr>
 8007e8a:	b140      	cbz	r0, 8007e9e <_svfiprintf_r+0x152>
 8007e8c:	2340      	movs	r3, #64	; 0x40
 8007e8e:	eba0 000a 	sub.w	r0, r0, sl
 8007e92:	fa03 f000 	lsl.w	r0, r3, r0
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	4303      	orrs	r3, r0
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea2:	4826      	ldr	r0, [pc, #152]	; (8007f3c <_svfiprintf_r+0x1f0>)
 8007ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ea8:	2206      	movs	r2, #6
 8007eaa:	f7f8 f999 	bl	80001e0 <memchr>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d038      	beq.n	8007f24 <_svfiprintf_r+0x1d8>
 8007eb2:	4b23      	ldr	r3, [pc, #140]	; (8007f40 <_svfiprintf_r+0x1f4>)
 8007eb4:	bb1b      	cbnz	r3, 8007efe <_svfiprintf_r+0x1b2>
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	3307      	adds	r3, #7
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	9303      	str	r3, [sp, #12]
 8007ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec4:	4433      	add	r3, r6
 8007ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec8:	e767      	b.n	8007d9a <_svfiprintf_r+0x4e>
 8007eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ece:	460c      	mov	r4, r1
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	e7a5      	b.n	8007e20 <_svfiprintf_r+0xd4>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	3401      	adds	r4, #1
 8007ed8:	9305      	str	r3, [sp, #20]
 8007eda:	4619      	mov	r1, r3
 8007edc:	f04f 0c0a 	mov.w	ip, #10
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee6:	3a30      	subs	r2, #48	; 0x30
 8007ee8:	2a09      	cmp	r2, #9
 8007eea:	d903      	bls.n	8007ef4 <_svfiprintf_r+0x1a8>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0c5      	beq.n	8007e7c <_svfiprintf_r+0x130>
 8007ef0:	9105      	str	r1, [sp, #20]
 8007ef2:	e7c3      	b.n	8007e7c <_svfiprintf_r+0x130>
 8007ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef8:	4604      	mov	r4, r0
 8007efa:	2301      	movs	r3, #1
 8007efc:	e7f0      	b.n	8007ee0 <_svfiprintf_r+0x194>
 8007efe:	ab03      	add	r3, sp, #12
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	462a      	mov	r2, r5
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <_svfiprintf_r+0x1f8>)
 8007f06:	a904      	add	r1, sp, #16
 8007f08:	4638      	mov	r0, r7
 8007f0a:	f3af 8000 	nop.w
 8007f0e:	1c42      	adds	r2, r0, #1
 8007f10:	4606      	mov	r6, r0
 8007f12:	d1d6      	bne.n	8007ec2 <_svfiprintf_r+0x176>
 8007f14:	89ab      	ldrh	r3, [r5, #12]
 8007f16:	065b      	lsls	r3, r3, #25
 8007f18:	f53f af2c 	bmi.w	8007d74 <_svfiprintf_r+0x28>
 8007f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f1e:	b01d      	add	sp, #116	; 0x74
 8007f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f24:	ab03      	add	r3, sp, #12
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	462a      	mov	r2, r5
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <_svfiprintf_r+0x1f8>)
 8007f2c:	a904      	add	r1, sp, #16
 8007f2e:	4638      	mov	r0, r7
 8007f30:	f000 f87a 	bl	8008028 <_printf_i>
 8007f34:	e7eb      	b.n	8007f0e <_svfiprintf_r+0x1c2>
 8007f36:	bf00      	nop
 8007f38:	0800855c 	.word	0x0800855c
 8007f3c:	08008566 	.word	0x08008566
 8007f40:	00000000 	.word	0x00000000
 8007f44:	08007c95 	.word	0x08007c95
 8007f48:	08008562 	.word	0x08008562

08007f4c <_printf_common>:
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	4616      	mov	r6, r2
 8007f52:	4699      	mov	r9, r3
 8007f54:	688a      	ldr	r2, [r1, #8]
 8007f56:	690b      	ldr	r3, [r1, #16]
 8007f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	bfb8      	it	lt
 8007f60:	4613      	movlt	r3, r2
 8007f62:	6033      	str	r3, [r6, #0]
 8007f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f68:	4607      	mov	r7, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b10a      	cbz	r2, 8007f72 <_printf_common+0x26>
 8007f6e:	3301      	adds	r3, #1
 8007f70:	6033      	str	r3, [r6, #0]
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	0699      	lsls	r1, r3, #26
 8007f76:	bf42      	ittt	mi
 8007f78:	6833      	ldrmi	r3, [r6, #0]
 8007f7a:	3302      	addmi	r3, #2
 8007f7c:	6033      	strmi	r3, [r6, #0]
 8007f7e:	6825      	ldr	r5, [r4, #0]
 8007f80:	f015 0506 	ands.w	r5, r5, #6
 8007f84:	d106      	bne.n	8007f94 <_printf_common+0x48>
 8007f86:	f104 0a19 	add.w	sl, r4, #25
 8007f8a:	68e3      	ldr	r3, [r4, #12]
 8007f8c:	6832      	ldr	r2, [r6, #0]
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	42ab      	cmp	r3, r5
 8007f92:	dc26      	bgt.n	8007fe2 <_printf_common+0x96>
 8007f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f98:	1e13      	subs	r3, r2, #0
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	bf18      	it	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	0692      	lsls	r2, r2, #26
 8007fa2:	d42b      	bmi.n	8007ffc <_printf_common+0xb0>
 8007fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fa8:	4649      	mov	r1, r9
 8007faa:	4638      	mov	r0, r7
 8007fac:	47c0      	blx	r8
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d01e      	beq.n	8007ff0 <_printf_common+0xa4>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	68e5      	ldr	r5, [r4, #12]
 8007fb6:	6832      	ldr	r2, [r6, #0]
 8007fb8:	f003 0306 	and.w	r3, r3, #6
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	bf08      	it	eq
 8007fc0:	1aad      	subeq	r5, r5, r2
 8007fc2:	68a3      	ldr	r3, [r4, #8]
 8007fc4:	6922      	ldr	r2, [r4, #16]
 8007fc6:	bf0c      	ite	eq
 8007fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fcc:	2500      	movne	r5, #0
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	bfc4      	itt	gt
 8007fd2:	1a9b      	subgt	r3, r3, r2
 8007fd4:	18ed      	addgt	r5, r5, r3
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	341a      	adds	r4, #26
 8007fda:	42b5      	cmp	r5, r6
 8007fdc:	d11a      	bne.n	8008014 <_printf_common+0xc8>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	e008      	b.n	8007ff4 <_printf_common+0xa8>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4652      	mov	r2, sl
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	4638      	mov	r0, r7
 8007fea:	47c0      	blx	r8
 8007fec:	3001      	adds	r0, #1
 8007fee:	d103      	bne.n	8007ff8 <_printf_common+0xac>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	e7c6      	b.n	8007f8a <_printf_common+0x3e>
 8007ffc:	18e1      	adds	r1, r4, r3
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	2030      	movs	r0, #48	; 0x30
 8008002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008006:	4422      	add	r2, r4
 8008008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800800c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008010:	3302      	adds	r3, #2
 8008012:	e7c7      	b.n	8007fa4 <_printf_common+0x58>
 8008014:	2301      	movs	r3, #1
 8008016:	4622      	mov	r2, r4
 8008018:	4649      	mov	r1, r9
 800801a:	4638      	mov	r0, r7
 800801c:	47c0      	blx	r8
 800801e:	3001      	adds	r0, #1
 8008020:	d0e6      	beq.n	8007ff0 <_printf_common+0xa4>
 8008022:	3601      	adds	r6, #1
 8008024:	e7d9      	b.n	8007fda <_printf_common+0x8e>
	...

08008028 <_printf_i>:
 8008028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	460c      	mov	r4, r1
 800802e:	4691      	mov	r9, r2
 8008030:	7e27      	ldrb	r7, [r4, #24]
 8008032:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008034:	2f78      	cmp	r7, #120	; 0x78
 8008036:	4680      	mov	r8, r0
 8008038:	469a      	mov	sl, r3
 800803a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800803e:	d807      	bhi.n	8008050 <_printf_i+0x28>
 8008040:	2f62      	cmp	r7, #98	; 0x62
 8008042:	d80a      	bhi.n	800805a <_printf_i+0x32>
 8008044:	2f00      	cmp	r7, #0
 8008046:	f000 80d8 	beq.w	80081fa <_printf_i+0x1d2>
 800804a:	2f58      	cmp	r7, #88	; 0x58
 800804c:	f000 80a3 	beq.w	8008196 <_printf_i+0x16e>
 8008050:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008058:	e03a      	b.n	80080d0 <_printf_i+0xa8>
 800805a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800805e:	2b15      	cmp	r3, #21
 8008060:	d8f6      	bhi.n	8008050 <_printf_i+0x28>
 8008062:	a001      	add	r0, pc, #4	; (adr r0, 8008068 <_printf_i+0x40>)
 8008064:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008068:	080080c1 	.word	0x080080c1
 800806c:	080080d5 	.word	0x080080d5
 8008070:	08008051 	.word	0x08008051
 8008074:	08008051 	.word	0x08008051
 8008078:	08008051 	.word	0x08008051
 800807c:	08008051 	.word	0x08008051
 8008080:	080080d5 	.word	0x080080d5
 8008084:	08008051 	.word	0x08008051
 8008088:	08008051 	.word	0x08008051
 800808c:	08008051 	.word	0x08008051
 8008090:	08008051 	.word	0x08008051
 8008094:	080081e1 	.word	0x080081e1
 8008098:	08008105 	.word	0x08008105
 800809c:	080081c3 	.word	0x080081c3
 80080a0:	08008051 	.word	0x08008051
 80080a4:	08008051 	.word	0x08008051
 80080a8:	08008203 	.word	0x08008203
 80080ac:	08008051 	.word	0x08008051
 80080b0:	08008105 	.word	0x08008105
 80080b4:	08008051 	.word	0x08008051
 80080b8:	08008051 	.word	0x08008051
 80080bc:	080081cb 	.word	0x080081cb
 80080c0:	680b      	ldr	r3, [r1, #0]
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	600a      	str	r2, [r1, #0]
 80080c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0a3      	b.n	800821c <_printf_i+0x1f4>
 80080d4:	6825      	ldr	r5, [r4, #0]
 80080d6:	6808      	ldr	r0, [r1, #0]
 80080d8:	062e      	lsls	r6, r5, #24
 80080da:	f100 0304 	add.w	r3, r0, #4
 80080de:	d50a      	bpl.n	80080f6 <_printf_i+0xce>
 80080e0:	6805      	ldr	r5, [r0, #0]
 80080e2:	600b      	str	r3, [r1, #0]
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	da03      	bge.n	80080f0 <_printf_i+0xc8>
 80080e8:	232d      	movs	r3, #45	; 0x2d
 80080ea:	426d      	negs	r5, r5
 80080ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f0:	485e      	ldr	r0, [pc, #376]	; (800826c <_printf_i+0x244>)
 80080f2:	230a      	movs	r3, #10
 80080f4:	e019      	b.n	800812a <_printf_i+0x102>
 80080f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080fa:	6805      	ldr	r5, [r0, #0]
 80080fc:	600b      	str	r3, [r1, #0]
 80080fe:	bf18      	it	ne
 8008100:	b22d      	sxthne	r5, r5
 8008102:	e7ef      	b.n	80080e4 <_printf_i+0xbc>
 8008104:	680b      	ldr	r3, [r1, #0]
 8008106:	6825      	ldr	r5, [r4, #0]
 8008108:	1d18      	adds	r0, r3, #4
 800810a:	6008      	str	r0, [r1, #0]
 800810c:	0628      	lsls	r0, r5, #24
 800810e:	d501      	bpl.n	8008114 <_printf_i+0xec>
 8008110:	681d      	ldr	r5, [r3, #0]
 8008112:	e002      	b.n	800811a <_printf_i+0xf2>
 8008114:	0669      	lsls	r1, r5, #25
 8008116:	d5fb      	bpl.n	8008110 <_printf_i+0xe8>
 8008118:	881d      	ldrh	r5, [r3, #0]
 800811a:	4854      	ldr	r0, [pc, #336]	; (800826c <_printf_i+0x244>)
 800811c:	2f6f      	cmp	r7, #111	; 0x6f
 800811e:	bf0c      	ite	eq
 8008120:	2308      	moveq	r3, #8
 8008122:	230a      	movne	r3, #10
 8008124:	2100      	movs	r1, #0
 8008126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800812a:	6866      	ldr	r6, [r4, #4]
 800812c:	60a6      	str	r6, [r4, #8]
 800812e:	2e00      	cmp	r6, #0
 8008130:	bfa2      	ittt	ge
 8008132:	6821      	ldrge	r1, [r4, #0]
 8008134:	f021 0104 	bicge.w	r1, r1, #4
 8008138:	6021      	strge	r1, [r4, #0]
 800813a:	b90d      	cbnz	r5, 8008140 <_printf_i+0x118>
 800813c:	2e00      	cmp	r6, #0
 800813e:	d04d      	beq.n	80081dc <_printf_i+0x1b4>
 8008140:	4616      	mov	r6, r2
 8008142:	fbb5 f1f3 	udiv	r1, r5, r3
 8008146:	fb03 5711 	mls	r7, r3, r1, r5
 800814a:	5dc7      	ldrb	r7, [r0, r7]
 800814c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008150:	462f      	mov	r7, r5
 8008152:	42bb      	cmp	r3, r7
 8008154:	460d      	mov	r5, r1
 8008156:	d9f4      	bls.n	8008142 <_printf_i+0x11a>
 8008158:	2b08      	cmp	r3, #8
 800815a:	d10b      	bne.n	8008174 <_printf_i+0x14c>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	07df      	lsls	r7, r3, #31
 8008160:	d508      	bpl.n	8008174 <_printf_i+0x14c>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	4299      	cmp	r1, r3
 8008168:	bfde      	ittt	le
 800816a:	2330      	movle	r3, #48	; 0x30
 800816c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008174:	1b92      	subs	r2, r2, r6
 8008176:	6122      	str	r2, [r4, #16]
 8008178:	f8cd a000 	str.w	sl, [sp]
 800817c:	464b      	mov	r3, r9
 800817e:	aa03      	add	r2, sp, #12
 8008180:	4621      	mov	r1, r4
 8008182:	4640      	mov	r0, r8
 8008184:	f7ff fee2 	bl	8007f4c <_printf_common>
 8008188:	3001      	adds	r0, #1
 800818a:	d14c      	bne.n	8008226 <_printf_i+0x1fe>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	b004      	add	sp, #16
 8008192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008196:	4835      	ldr	r0, [pc, #212]	; (800826c <_printf_i+0x244>)
 8008198:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	680e      	ldr	r6, [r1, #0]
 80081a0:	061f      	lsls	r7, r3, #24
 80081a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80081a6:	600e      	str	r6, [r1, #0]
 80081a8:	d514      	bpl.n	80081d4 <_printf_i+0x1ac>
 80081aa:	07d9      	lsls	r1, r3, #31
 80081ac:	bf44      	itt	mi
 80081ae:	f043 0320 	orrmi.w	r3, r3, #32
 80081b2:	6023      	strmi	r3, [r4, #0]
 80081b4:	b91d      	cbnz	r5, 80081be <_printf_i+0x196>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	f023 0320 	bic.w	r3, r3, #32
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	2310      	movs	r3, #16
 80081c0:	e7b0      	b.n	8008124 <_printf_i+0xfc>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f043 0320 	orr.w	r3, r3, #32
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	2378      	movs	r3, #120	; 0x78
 80081cc:	4828      	ldr	r0, [pc, #160]	; (8008270 <_printf_i+0x248>)
 80081ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081d2:	e7e3      	b.n	800819c <_printf_i+0x174>
 80081d4:	065e      	lsls	r6, r3, #25
 80081d6:	bf48      	it	mi
 80081d8:	b2ad      	uxthmi	r5, r5
 80081da:	e7e6      	b.n	80081aa <_printf_i+0x182>
 80081dc:	4616      	mov	r6, r2
 80081de:	e7bb      	b.n	8008158 <_printf_i+0x130>
 80081e0:	680b      	ldr	r3, [r1, #0]
 80081e2:	6826      	ldr	r6, [r4, #0]
 80081e4:	6960      	ldr	r0, [r4, #20]
 80081e6:	1d1d      	adds	r5, r3, #4
 80081e8:	600d      	str	r5, [r1, #0]
 80081ea:	0635      	lsls	r5, r6, #24
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	d501      	bpl.n	80081f4 <_printf_i+0x1cc>
 80081f0:	6018      	str	r0, [r3, #0]
 80081f2:	e002      	b.n	80081fa <_printf_i+0x1d2>
 80081f4:	0671      	lsls	r1, r6, #25
 80081f6:	d5fb      	bpl.n	80081f0 <_printf_i+0x1c8>
 80081f8:	8018      	strh	r0, [r3, #0]
 80081fa:	2300      	movs	r3, #0
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	4616      	mov	r6, r2
 8008200:	e7ba      	b.n	8008178 <_printf_i+0x150>
 8008202:	680b      	ldr	r3, [r1, #0]
 8008204:	1d1a      	adds	r2, r3, #4
 8008206:	600a      	str	r2, [r1, #0]
 8008208:	681e      	ldr	r6, [r3, #0]
 800820a:	6862      	ldr	r2, [r4, #4]
 800820c:	2100      	movs	r1, #0
 800820e:	4630      	mov	r0, r6
 8008210:	f7f7 ffe6 	bl	80001e0 <memchr>
 8008214:	b108      	cbz	r0, 800821a <_printf_i+0x1f2>
 8008216:	1b80      	subs	r0, r0, r6
 8008218:	6060      	str	r0, [r4, #4]
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	6123      	str	r3, [r4, #16]
 800821e:	2300      	movs	r3, #0
 8008220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008224:	e7a8      	b.n	8008178 <_printf_i+0x150>
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	4632      	mov	r2, r6
 800822a:	4649      	mov	r1, r9
 800822c:	4640      	mov	r0, r8
 800822e:	47d0      	blx	sl
 8008230:	3001      	adds	r0, #1
 8008232:	d0ab      	beq.n	800818c <_printf_i+0x164>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	079b      	lsls	r3, r3, #30
 8008238:	d413      	bmi.n	8008262 <_printf_i+0x23a>
 800823a:	68e0      	ldr	r0, [r4, #12]
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	4298      	cmp	r0, r3
 8008240:	bfb8      	it	lt
 8008242:	4618      	movlt	r0, r3
 8008244:	e7a4      	b.n	8008190 <_printf_i+0x168>
 8008246:	2301      	movs	r3, #1
 8008248:	4632      	mov	r2, r6
 800824a:	4649      	mov	r1, r9
 800824c:	4640      	mov	r0, r8
 800824e:	47d0      	blx	sl
 8008250:	3001      	adds	r0, #1
 8008252:	d09b      	beq.n	800818c <_printf_i+0x164>
 8008254:	3501      	adds	r5, #1
 8008256:	68e3      	ldr	r3, [r4, #12]
 8008258:	9903      	ldr	r1, [sp, #12]
 800825a:	1a5b      	subs	r3, r3, r1
 800825c:	42ab      	cmp	r3, r5
 800825e:	dcf2      	bgt.n	8008246 <_printf_i+0x21e>
 8008260:	e7eb      	b.n	800823a <_printf_i+0x212>
 8008262:	2500      	movs	r5, #0
 8008264:	f104 0619 	add.w	r6, r4, #25
 8008268:	e7f5      	b.n	8008256 <_printf_i+0x22e>
 800826a:	bf00      	nop
 800826c:	0800856d 	.word	0x0800856d
 8008270:	0800857e 	.word	0x0800857e

08008274 <memcpy>:
 8008274:	440a      	add	r2, r1
 8008276:	4291      	cmp	r1, r2
 8008278:	f100 33ff 	add.w	r3, r0, #4294967295
 800827c:	d100      	bne.n	8008280 <memcpy+0xc>
 800827e:	4770      	bx	lr
 8008280:	b510      	push	{r4, lr}
 8008282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828a:	4291      	cmp	r1, r2
 800828c:	d1f9      	bne.n	8008282 <memcpy+0xe>
 800828e:	bd10      	pop	{r4, pc}

08008290 <memmove>:
 8008290:	4288      	cmp	r0, r1
 8008292:	b510      	push	{r4, lr}
 8008294:	eb01 0402 	add.w	r4, r1, r2
 8008298:	d902      	bls.n	80082a0 <memmove+0x10>
 800829a:	4284      	cmp	r4, r0
 800829c:	4623      	mov	r3, r4
 800829e:	d807      	bhi.n	80082b0 <memmove+0x20>
 80082a0:	1e43      	subs	r3, r0, #1
 80082a2:	42a1      	cmp	r1, r4
 80082a4:	d008      	beq.n	80082b8 <memmove+0x28>
 80082a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082ae:	e7f8      	b.n	80082a2 <memmove+0x12>
 80082b0:	4402      	add	r2, r0
 80082b2:	4601      	mov	r1, r0
 80082b4:	428a      	cmp	r2, r1
 80082b6:	d100      	bne.n	80082ba <memmove+0x2a>
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082c2:	e7f7      	b.n	80082b4 <memmove+0x24>

080082c4 <_free_r>:
 80082c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082c6:	2900      	cmp	r1, #0
 80082c8:	d048      	beq.n	800835c <_free_r+0x98>
 80082ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ce:	9001      	str	r0, [sp, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f1a1 0404 	sub.w	r4, r1, #4
 80082d6:	bfb8      	it	lt
 80082d8:	18e4      	addlt	r4, r4, r3
 80082da:	f000 f8d3 	bl	8008484 <__malloc_lock>
 80082de:	4a20      	ldr	r2, [pc, #128]	; (8008360 <_free_r+0x9c>)
 80082e0:	9801      	ldr	r0, [sp, #4]
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	4615      	mov	r5, r2
 80082e6:	b933      	cbnz	r3, 80082f6 <_free_r+0x32>
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	6014      	str	r4, [r2, #0]
 80082ec:	b003      	add	sp, #12
 80082ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082f2:	f000 b8cd 	b.w	8008490 <__malloc_unlock>
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	d90b      	bls.n	8008312 <_free_r+0x4e>
 80082fa:	6821      	ldr	r1, [r4, #0]
 80082fc:	1862      	adds	r2, r4, r1
 80082fe:	4293      	cmp	r3, r2
 8008300:	bf04      	itt	eq
 8008302:	681a      	ldreq	r2, [r3, #0]
 8008304:	685b      	ldreq	r3, [r3, #4]
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	bf04      	itt	eq
 800830a:	1852      	addeq	r2, r2, r1
 800830c:	6022      	streq	r2, [r4, #0]
 800830e:	602c      	str	r4, [r5, #0]
 8008310:	e7ec      	b.n	80082ec <_free_r+0x28>
 8008312:	461a      	mov	r2, r3
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b10b      	cbz	r3, 800831c <_free_r+0x58>
 8008318:	42a3      	cmp	r3, r4
 800831a:	d9fa      	bls.n	8008312 <_free_r+0x4e>
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	1855      	adds	r5, r2, r1
 8008320:	42a5      	cmp	r5, r4
 8008322:	d10b      	bne.n	800833c <_free_r+0x78>
 8008324:	6824      	ldr	r4, [r4, #0]
 8008326:	4421      	add	r1, r4
 8008328:	1854      	adds	r4, r2, r1
 800832a:	42a3      	cmp	r3, r4
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	d1dd      	bne.n	80082ec <_free_r+0x28>
 8008330:	681c      	ldr	r4, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	6053      	str	r3, [r2, #4]
 8008336:	4421      	add	r1, r4
 8008338:	6011      	str	r1, [r2, #0]
 800833a:	e7d7      	b.n	80082ec <_free_r+0x28>
 800833c:	d902      	bls.n	8008344 <_free_r+0x80>
 800833e:	230c      	movs	r3, #12
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	e7d3      	b.n	80082ec <_free_r+0x28>
 8008344:	6825      	ldr	r5, [r4, #0]
 8008346:	1961      	adds	r1, r4, r5
 8008348:	428b      	cmp	r3, r1
 800834a:	bf04      	itt	eq
 800834c:	6819      	ldreq	r1, [r3, #0]
 800834e:	685b      	ldreq	r3, [r3, #4]
 8008350:	6063      	str	r3, [r4, #4]
 8008352:	bf04      	itt	eq
 8008354:	1949      	addeq	r1, r1, r5
 8008356:	6021      	streq	r1, [r4, #0]
 8008358:	6054      	str	r4, [r2, #4]
 800835a:	e7c7      	b.n	80082ec <_free_r+0x28>
 800835c:	b003      	add	sp, #12
 800835e:	bd30      	pop	{r4, r5, pc}
 8008360:	20000238 	.word	0x20000238

08008364 <_malloc_r>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	1ccd      	adds	r5, r1, #3
 8008368:	f025 0503 	bic.w	r5, r5, #3
 800836c:	3508      	adds	r5, #8
 800836e:	2d0c      	cmp	r5, #12
 8008370:	bf38      	it	cc
 8008372:	250c      	movcc	r5, #12
 8008374:	2d00      	cmp	r5, #0
 8008376:	4606      	mov	r6, r0
 8008378:	db01      	blt.n	800837e <_malloc_r+0x1a>
 800837a:	42a9      	cmp	r1, r5
 800837c:	d903      	bls.n	8008386 <_malloc_r+0x22>
 800837e:	230c      	movs	r3, #12
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	2000      	movs	r0, #0
 8008384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008386:	f000 f87d 	bl	8008484 <__malloc_lock>
 800838a:	4921      	ldr	r1, [pc, #132]	; (8008410 <_malloc_r+0xac>)
 800838c:	680a      	ldr	r2, [r1, #0]
 800838e:	4614      	mov	r4, r2
 8008390:	b99c      	cbnz	r4, 80083ba <_malloc_r+0x56>
 8008392:	4f20      	ldr	r7, [pc, #128]	; (8008414 <_malloc_r+0xb0>)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	b923      	cbnz	r3, 80083a2 <_malloc_r+0x3e>
 8008398:	4621      	mov	r1, r4
 800839a:	4630      	mov	r0, r6
 800839c:	f000 f862 	bl	8008464 <_sbrk_r>
 80083a0:	6038      	str	r0, [r7, #0]
 80083a2:	4629      	mov	r1, r5
 80083a4:	4630      	mov	r0, r6
 80083a6:	f000 f85d 	bl	8008464 <_sbrk_r>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	d123      	bne.n	80083f6 <_malloc_r+0x92>
 80083ae:	230c      	movs	r3, #12
 80083b0:	6033      	str	r3, [r6, #0]
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 f86c 	bl	8008490 <__malloc_unlock>
 80083b8:	e7e3      	b.n	8008382 <_malloc_r+0x1e>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	1b5b      	subs	r3, r3, r5
 80083be:	d417      	bmi.n	80083f0 <_malloc_r+0x8c>
 80083c0:	2b0b      	cmp	r3, #11
 80083c2:	d903      	bls.n	80083cc <_malloc_r+0x68>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	441c      	add	r4, r3
 80083c8:	6025      	str	r5, [r4, #0]
 80083ca:	e004      	b.n	80083d6 <_malloc_r+0x72>
 80083cc:	6863      	ldr	r3, [r4, #4]
 80083ce:	42a2      	cmp	r2, r4
 80083d0:	bf0c      	ite	eq
 80083d2:	600b      	streq	r3, [r1, #0]
 80083d4:	6053      	strne	r3, [r2, #4]
 80083d6:	4630      	mov	r0, r6
 80083d8:	f000 f85a 	bl	8008490 <__malloc_unlock>
 80083dc:	f104 000b 	add.w	r0, r4, #11
 80083e0:	1d23      	adds	r3, r4, #4
 80083e2:	f020 0007 	bic.w	r0, r0, #7
 80083e6:	1ac2      	subs	r2, r0, r3
 80083e8:	d0cc      	beq.n	8008384 <_malloc_r+0x20>
 80083ea:	1a1b      	subs	r3, r3, r0
 80083ec:	50a3      	str	r3, [r4, r2]
 80083ee:	e7c9      	b.n	8008384 <_malloc_r+0x20>
 80083f0:	4622      	mov	r2, r4
 80083f2:	6864      	ldr	r4, [r4, #4]
 80083f4:	e7cc      	b.n	8008390 <_malloc_r+0x2c>
 80083f6:	1cc4      	adds	r4, r0, #3
 80083f8:	f024 0403 	bic.w	r4, r4, #3
 80083fc:	42a0      	cmp	r0, r4
 80083fe:	d0e3      	beq.n	80083c8 <_malloc_r+0x64>
 8008400:	1a21      	subs	r1, r4, r0
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f82e 	bl	8008464 <_sbrk_r>
 8008408:	3001      	adds	r0, #1
 800840a:	d1dd      	bne.n	80083c8 <_malloc_r+0x64>
 800840c:	e7cf      	b.n	80083ae <_malloc_r+0x4a>
 800840e:	bf00      	nop
 8008410:	20000238 	.word	0x20000238
 8008414:	2000023c 	.word	0x2000023c

08008418 <_realloc_r>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	4607      	mov	r7, r0
 800841c:	4614      	mov	r4, r2
 800841e:	460e      	mov	r6, r1
 8008420:	b921      	cbnz	r1, 800842c <_realloc_r+0x14>
 8008422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008426:	4611      	mov	r1, r2
 8008428:	f7ff bf9c 	b.w	8008364 <_malloc_r>
 800842c:	b922      	cbnz	r2, 8008438 <_realloc_r+0x20>
 800842e:	f7ff ff49 	bl	80082c4 <_free_r>
 8008432:	4625      	mov	r5, r4
 8008434:	4628      	mov	r0, r5
 8008436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008438:	f000 f830 	bl	800849c <_malloc_usable_size_r>
 800843c:	42a0      	cmp	r0, r4
 800843e:	d20f      	bcs.n	8008460 <_realloc_r+0x48>
 8008440:	4621      	mov	r1, r4
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff ff8e 	bl	8008364 <_malloc_r>
 8008448:	4605      	mov	r5, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d0f2      	beq.n	8008434 <_realloc_r+0x1c>
 800844e:	4631      	mov	r1, r6
 8008450:	4622      	mov	r2, r4
 8008452:	f7ff ff0f 	bl	8008274 <memcpy>
 8008456:	4631      	mov	r1, r6
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff ff33 	bl	80082c4 <_free_r>
 800845e:	e7e9      	b.n	8008434 <_realloc_r+0x1c>
 8008460:	4635      	mov	r5, r6
 8008462:	e7e7      	b.n	8008434 <_realloc_r+0x1c>

08008464 <_sbrk_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d06      	ldr	r5, [pc, #24]	; (8008480 <_sbrk_r+0x1c>)
 8008468:	2300      	movs	r3, #0
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	602b      	str	r3, [r5, #0]
 8008470:	f7f8 fecc 	bl	800120c <_sbrk>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_sbrk_r+0x1a>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_sbrk_r+0x1a>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	20000360 	.word	0x20000360

08008484 <__malloc_lock>:
 8008484:	4801      	ldr	r0, [pc, #4]	; (800848c <__malloc_lock+0x8>)
 8008486:	f000 b811 	b.w	80084ac <__retarget_lock_acquire_recursive>
 800848a:	bf00      	nop
 800848c:	20000368 	.word	0x20000368

08008490 <__malloc_unlock>:
 8008490:	4801      	ldr	r0, [pc, #4]	; (8008498 <__malloc_unlock+0x8>)
 8008492:	f000 b80c 	b.w	80084ae <__retarget_lock_release_recursive>
 8008496:	bf00      	nop
 8008498:	20000368 	.word	0x20000368

0800849c <_malloc_usable_size_r>:
 800849c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a0:	1f18      	subs	r0, r3, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bfbc      	itt	lt
 80084a6:	580b      	ldrlt	r3, [r1, r0]
 80084a8:	18c0      	addlt	r0, r0, r3
 80084aa:	4770      	bx	lr

080084ac <__retarget_lock_acquire_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_release_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <trunc>:
 80084b0:	ec51 0b10 	vmov	r0, r1, d0
 80084b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80084b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80084bc:	2b13      	cmp	r3, #19
 80084be:	b5d0      	push	{r4, r6, r7, lr}
 80084c0:	460c      	mov	r4, r1
 80084c2:	dc10      	bgt.n	80084e6 <trunc+0x36>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bfa5      	ittet	ge
 80084c8:	4a11      	ldrge	r2, [pc, #68]	; (8008510 <trunc+0x60>)
 80084ca:	fa42 f303 	asrge.w	r3, r2, r3
 80084ce:	2100      	movlt	r1, #0
 80084d0:	2100      	movge	r1, #0
 80084d2:	bfb9      	ittee	lt
 80084d4:	2000      	movlt	r0, #0
 80084d6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 80084da:	2000      	movge	r0, #0
 80084dc:	ea24 0103 	bicge.w	r1, r4, r3
 80084e0:	ec41 0b10 	vmov	d0, r0, r1
 80084e4:	bdd0      	pop	{r4, r6, r7, pc}
 80084e6:	2b33      	cmp	r3, #51	; 0x33
 80084e8:	dd08      	ble.n	80084fc <trunc+0x4c>
 80084ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ee:	d1f7      	bne.n	80084e0 <trunc+0x30>
 80084f0:	ee10 2a10 	vmov	r2, s0
 80084f4:	460b      	mov	r3, r1
 80084f6:	f7f7 fec9 	bl	800028c <__adddf3>
 80084fa:	e7f1      	b.n	80084e0 <trunc+0x30>
 80084fc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008500:	f04f 33ff 	mov.w	r3, #4294967295
 8008504:	fa23 f202 	lsr.w	r2, r3, r2
 8008508:	ea20 0602 	bic.w	r6, r0, r2
 800850c:	4630      	mov	r0, r6
 800850e:	e7e7      	b.n	80084e0 <trunc+0x30>
 8008510:	000fffff 	.word	0x000fffff

08008514 <_init>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	bf00      	nop
 8008518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851a:	bc08      	pop	{r3}
 800851c:	469e      	mov	lr, r3
 800851e:	4770      	bx	lr

08008520 <_fini>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	bf00      	nop
 8008524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008526:	bc08      	pop	{r3}
 8008528:	469e      	mov	lr, r3
 800852a:	4770      	bx	lr


LAB05_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  080085e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000128  0800870c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800870c  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f3d3  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003681  00000000  00000000  0003f52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00042bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  00044328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018390  00000000  00000000  00045990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178d1  00000000  00000000  0005dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e8b  00000000  00000000  000755f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a47c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ec  00000000  00000000  0010a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000128 	.word	0x20000128
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008558 	.word	0x08008558

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000012c 	.word	0x2000012c
 80001dc:	08008558 	.word	0x08008558

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f003 fa3d 	bl	8003dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f895 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 f99f 	bl	8000c90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000952:	f000 f973 	bl	8000c3c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000956:	f000 f8fb 	bl	8000b50 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_1);
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800095a:	2100      	movs	r1, #0
 800095c:	483e      	ldr	r0, [pc, #248]	; (8000a58 <main+0x118>)
 800095e:	f005 fc1d 	bl	800619c <HAL_TIM_OC_Start_IT>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 8000962:	2104      	movs	r1, #4
 8000964:	2000      	movs	r0, #0
 8000966:	f002 fe55 	bl	8003614 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800096a:	2104      	movs	r1, #4
 800096c:	2000      	movs	r0, #0
 800096e:	f002 ff5f 	bl	8003830 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 8000972:	2102      	movs	r1, #2
 8000974:	2001      	movs	r0, #1
 8000976:	f002 fe4d 	bl	8003614 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800097a:	2102      	movs	r1, #2
 800097c:	2001      	movs	r0, #1
 800097e:	f002 ff57 	bl	8003830 <IKS01A3_ENV_SENSOR_Enable>
  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8000982:	2101      	movs	r1, #1
 8000984:	2002      	movs	r0, #2
 8000986:	f002 fe45 	bl	8003614 <IKS01A3_ENV_SENSOR_Init>
  IKS01A3_ENV_SENSOR_Enable(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800098a:	2101      	movs	r1, #1
 800098c:	2002      	movs	r0, #2
 800098e:	f002 ff4f 	bl	8003830 <IKS01A3_ENV_SENSOR_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time_to_read == 1) {
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <main+0x11c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d1fb      	bne.n	8000992 <main+0x52>
		  time_to_read = 0;
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <main+0x11c>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, &humidity_value);
 80009a0:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <main+0x120>)
 80009a2:	2104      	movs	r1, #4
 80009a4:	2000      	movs	r0, #0
 80009a6:	f002 ff83 	bl	80038b0 <IKS01A3_ENV_SENSOR_GetValue>
		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &pressure_value);
 80009aa:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <main+0x124>)
 80009ac:	2102      	movs	r1, #2
 80009ae:	2001      	movs	r0, #1
 80009b0:	f002 ff7e 	bl	80038b0 <IKS01A3_ENV_SENSOR_GetValue>
		  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_STTS751_0, ENV_TEMPERATURE, &temperature_value);
 80009b4:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <main+0x128>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	2002      	movs	r0, #2
 80009ba:	f002 ff79 	bl	80038b0 <IKS01A3_ENV_SENSOR_GetValue>
		  uint8_t truncated_humidity_value = (uint8_t) trunc(humidity_value);
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <main+0x120>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdc8 	bl	8000558 <__aeabi_f2d>
 80009c8:	4602      	mov	r2, r0
 80009ca:	460b      	mov	r3, r1
 80009cc:	ec43 2b10 	vmov	d0, r2, r3
 80009d0:	f007 fd90 	bl	80084f4 <trunc>
 80009d4:	ec53 2b10 	vmov	r2, r3, d0
 80009d8:	4610      	mov	r0, r2
 80009da:	4619      	mov	r1, r3
 80009dc:	f7ff fe14 	bl	8000608 <__aeabi_d2uiz>
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
		  uint8_t truncated_pressure_value = (uint8_t) trunc(pressure_value);
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <main+0x124>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fdb5 	bl	8000558 <__aeabi_f2d>
 80009ee:	4602      	mov	r2, r0
 80009f0:	460b      	mov	r3, r1
 80009f2:	ec43 2b10 	vmov	d0, r2, r3
 80009f6:	f007 fd7d 	bl	80084f4 <trunc>
 80009fa:	ec53 2b10 	vmov	r2, r3, d0
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	f7ff fe01 	bl	8000608 <__aeabi_d2uiz>
 8000a06:	4603      	mov	r3, r0
 8000a08:	71bb      	strb	r3, [r7, #6]
		  uint8_t truncated_temperature_value = (uint8_t) trunc(temperature_value);
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <main+0x128>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fda2 	bl	8000558 <__aeabi_f2d>
 8000a14:	4602      	mov	r2, r0
 8000a16:	460b      	mov	r3, r1
 8000a18:	ec43 2b10 	vmov	d0, r2, r3
 8000a1c:	f007 fd6a 	bl	80084f4 <trunc>
 8000a20:	ec53 2b10 	vmov	r2, r3, d0
 8000a24:	4610      	mov	r0, r2
 8000a26:	4619      	mov	r1, r3
 8000a28:	f7ff fdee 	bl	8000608 <__aeabi_d2uiz>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	717b      	strb	r3, [r7, #5]
		  sprintf(msg, "h: %u p: %u t: %u \n\r", truncated_humidity_value, truncated_pressure_value, truncated_temperature_value);
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	79b9      	ldrb	r1, [r7, #6]
 8000a34:	797b      	ldrb	r3, [r7, #5]
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	490c      	ldr	r1, [pc, #48]	; (8000a6c <main+0x12c>)
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <main+0x130>)
 8000a3e:	f007 f92b 	bl	8007c98 <siprintf>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <main+0x130>)
 8000a44:	f7ff fbcc 	bl	80001e0 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <main+0x130>)
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <main+0x134>)
 8000a52:	f006 fa90 	bl	8006f76 <HAL_UART_Transmit_IT>
	  if (time_to_read == 1) {
 8000a56:	e79c      	b.n	8000992 <main+0x52>
 8000a58:	20000264 	.word	0x20000264
 8000a5c:	20000144 	.word	0x20000144
 8000a60:	200002b0 	.word	0x200002b0
 8000a64:	200002ac 	.word	0x200002ac
 8000a68:	20000240 	.word	0x20000240
 8000a6c:	08008570 	.word	0x08008570
 8000a70:	20000244 	.word	0x20000244
 8000a74:	200002b4 	.word	0x200002b4

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 f8fe 	bl	8007c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <SystemClock_Config+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <SystemClock_Config+0xd4>)
 8000ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <SystemClock_Config+0xd4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aec:	2310      	movs	r3, #16
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000af6:	2304      	movs	r3, #4
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000afa:	2307      	movs	r3, #7
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fe2e 	bl	8005764 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b0e:	f000 f941 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2302      	movs	r3, #2
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f005 f890 	bl	8005c54 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b3a:	f000 f92b 	bl	8000d94 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3750      	adds	r7, #80	; 0x50
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	f107 0320 	add.w	r3, r7, #32
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000b82:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4199;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000b88:	f241 0267 	movw	r2, #4199	; 0x1067
 8000b8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000b96:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ba8:	4822      	ldr	r0, [pc, #136]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000baa:	f005 fa4f 	bl	800604c <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bb4:	f000 f8ee 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481b      	ldr	r0, [pc, #108]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000bc6:	f005 fd4b 	bl	8006660 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bd0:	f000 f8e0 	bl	8000d94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000bd4:	4817      	ldr	r0, [pc, #92]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000bd6:	f005 fa88 	bl	80060ea <HAL_TIM_OC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000be0:	f000 f8d8 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000bf4:	f006 f8f0 	bl	8006dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bfe:	f000 f8c9 	bl	8000d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 8000c06:	f241 3387 	movw	r3, #4999	; 0x1387
 8000c0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_TIM3_Init+0xe4>)
 8000c1c:	f005 fcc4 	bl	80065a8 <HAL_TIM_OC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c26:	f000 f8b5 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3738      	adds	r7, #56	; 0x38
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000264 	.word	0x20000264
 8000c38:	40000400 	.word	0x40000400

08000c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART2_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f006 f932 	bl	8006edc <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f000 f889 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200002b4 	.word	0x200002b4
 8000c8c:	40004400 	.word	0x40004400

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a2c      	ldr	r2, [pc, #176]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a25      	ldr	r2, [pc, #148]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4812      	ldr	r0, [pc, #72]	; (8000d64 <MX_GPIO_Init+0xd4>)
 8000d1c:	f003 fcd0 	bl	80046c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_GPIO_Init+0xd8>)
 8000d38:	f003 fa5a 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_GPIO_Init+0xd4>)
 8000d54:	f003 fa4c 	bl	80041f0 <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020800 	.word	0x40020800

08000d6c <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	time_to_read = 1;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x20>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8000d7e:	f003 fcb8 	bl	80046f2 <HAL_GPIO_TogglePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000144 	.word	0x20000144
 8000d90:	40020000 	.word	0x40020000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dde:	2007      	movs	r0, #7
 8000de0:	f003 f932 	bl	8004048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d115      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_TIM_Base_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_TIM_Base_MspInit+0x4c>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_Base_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	201d      	movs	r0, #29
 8000e24:	f003 f91b 	bl	800405e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e28:	201d      	movs	r0, #29
 8000e2a:	f003 f934 	bl	8004096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <HAL_UART_MspInit+0x94>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d133      	bne.n	8000eca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4809      	ldr	r0, [pc, #36]	; (8000edc <HAL_UART_MspInit+0x9c>)
 8000eb6:	f003 f99b 	bl	80041f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2026      	movs	r0, #38	; 0x26
 8000ec0:	f003 f8cd 	bl	800405e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec4:	2026      	movs	r0, #38	; 0x26
 8000ec6:	f003 f8e6 	bl	8004096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f002 ff9c 	bl	8003e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM3_IRQHandler+0x10>)
 8000f3a:	f005 fa2d 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000264 	.word	0x20000264

08000f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f006 f857 	bl	8007000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002b4 	.word	0x200002b4

08000f5c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <BSP_I2C1_Init+0x58>)
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <BSP_I2C1_Init+0x5c>)
 8000f6a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <BSP_I2C1_Init+0x60>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	4912      	ldr	r1, [pc, #72]	; (8000fbc <BSP_I2C1_Init+0x60>)
 8000f74:	600a      	str	r2, [r1, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d117      	bne.n	8000faa <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <BSP_I2C1_Init+0x58>)
 8000f7c:	f004 f87c 	bl	8005078 <HAL_I2C_GetState>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d111      	bne.n	8000faa <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <BSP_I2C1_Init+0x58>)
 8000f88:	f000 f8e2 	bl	8001150 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10b      	bne.n	8000faa <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <BSP_I2C1_Init+0x58>)
 8000f94:	f000 f8a8 	bl	80010e8 <MX_I2C1_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f9e:	f06f 0307 	mvn.w	r3, #7
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	e001      	b.n	8000faa <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000faa:	687b      	ldr	r3, [r7, #4]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002f8 	.word	0x200002f8
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	20000148 	.word	0x20000148

08000fc0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d014      	beq.n	8000ffc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10b      	bne.n	8000ffc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <BSP_I2C1_DeInit+0x4c>)
 8000fe6:	f000 f8fd 	bl	80011e4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000fea:	4808      	ldr	r0, [pc, #32]	; (800100c <BSP_I2C1_DeInit+0x4c>)
 8000fec:	f003 fce0 	bl	80049b0 <HAL_I2C_DeInit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000ff6:	f06f 0307 	mvn.w	r3, #7
 8000ffa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000148 	.word	0x20000148
 800100c:	200002f8 	.word	0x200002f8

08001010 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af04      	add	r7, sp, #16
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	461a      	mov	r2, r3
 800101a:	4603      	mov	r3, r0
 800101c:	81fb      	strh	r3, [r7, #14]
 800101e:	460b      	mov	r3, r1
 8001020:	81bb      	strh	r3, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800102a:	89ba      	ldrh	r2, [r7, #12]
 800102c:	89f9      	ldrh	r1, [r7, #14]
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <BSP_I2C1_WriteReg+0x60>)
 8001040:	f003 fcfa 	bl	8004a38 <HAL_I2C_Mem_Write>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00c      	beq.n	8001064 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <BSP_I2C1_WriteReg+0x60>)
 800104c:	f004 f822 	bl	8005094 <HAL_I2C_GetError>
 8001050:	4603      	mov	r3, r0
 8001052:	2b04      	cmp	r3, #4
 8001054:	d103      	bne.n	800105e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001056:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e002      	b.n	8001064 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800105e:	f06f 0303 	mvn.w	r3, #3
 8001062:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001064:	697b      	ldr	r3, [r7, #20]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002f8 	.word	0x200002f8

08001074 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af04      	add	r7, sp, #16
 800107a:	60ba      	str	r2, [r7, #8]
 800107c:	461a      	mov	r2, r3
 800107e:	4603      	mov	r3, r0
 8001080:	81fb      	strh	r3, [r7, #14]
 8001082:	460b      	mov	r3, r1
 8001084:	81bb      	strh	r3, [r7, #12]
 8001086:	4613      	mov	r3, r2
 8001088:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800108e:	89ba      	ldrh	r2, [r7, #12]
 8001090:	89f9      	ldrh	r1, [r7, #14]
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <BSP_I2C1_ReadReg+0x60>)
 80010a4:	f003 fdc2 	bl	8004c2c <HAL_I2C_Mem_Read>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <BSP_I2C1_ReadReg+0x60>)
 80010b0:	f003 fff0 	bl	8005094 <HAL_I2C_GetError>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d103      	bne.n	80010c2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010ba:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e002      	b.n	80010c8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80010c2:	f06f 0303 	mvn.w	r3, #3
 80010c6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80010c8:	697b      	ldr	r3, [r7, #20]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002f8 	.word	0x200002f8

080010d8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010dc:	f002 fed8 	bl	8003e90 <HAL_GetTick>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <MX_I2C1_Init+0x60>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_I2C1_Init+0x64>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001112:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f003 fafb 	bl	8004728 <HAL_I2C_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40005400 	.word	0x40005400
 800114c:	00061a80 	.word	0x00061a80

08001150 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <I2C1_MspInit+0x8c>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <I2C1_MspInit+0x8c>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	6313      	str	r3, [r2, #48]	; 0x30
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <I2C1_MspInit+0x8c>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117a:	2312      	movs	r3, #18
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001186:	2304      	movs	r3, #4
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4813      	ldr	r0, [pc, #76]	; (80011e0 <I2C1_MspInit+0x90>)
 8001192:	f003 f82d 	bl	80041f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80011a8:	2304      	movs	r3, #4
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <I2C1_MspInit+0x90>)
 80011b4:	f003 f81c 	bl	80041f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <I2C1_MspInit+0x8c>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <I2C1_MspInit+0x8c>)
 80011c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <I2C1_MspInit+0x8c>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020400 	.word	0x40020400

080011e4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <I2C1_MspDeInit+0x30>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <I2C1_MspDeInit+0x30>)
 80011f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <I2C1_MspDeInit+0x34>)
 80011fe:	f003 f97b 	bl	80044f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <I2C1_MspDeInit+0x34>)
 8001208:	f003 f976 	bl	80044f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f006 fcf2 	bl	8007c34 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20018000 	.word	0x20018000
 800127c:	00000400 	.word	0x00000400
 8001280:	2000014c 	.word	0x2000014c
 8001284:	20000370 	.word	0x20000370

08001288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b2:	490e      	ldr	r1, [pc, #56]	; (80012ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b4:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c8:	4c0b      	ldr	r4, [pc, #44]	; (80012f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012d6:	f7ff ffd7 	bl	8001288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f006 fcb1 	bl	8007c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff fb2f 	bl	8000940 <main>
  bx  lr    
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80012f0:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 80012f4:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80012f8:	2000036c 	.word	0x2000036c

080012fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC_IRQHandler>
	...

08001300 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e034      	b.n	8001382 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	7b1a      	ldrb	r2, [r3, #12]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	699a      	ldr	r2, [r3, #24]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HTS221_RegisterBusIO+0x8c>)
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HTS221_RegisterBusIO+0x90>)
 800135a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4798      	blx	r3
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	e002      	b.n	8001382 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	080019cf 	.word	0x080019cf
 8001390:	08001a31 	.word	0x08001a31

08001394 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d108      	bne.n	80013b8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 faac 	bl	8001904 <HTS221_Initialize>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e004      	b.n	80013c2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d111      	bne.n	8001400 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f880 	bl	80014e2 <HTS221_HUM_Disable>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	e00d      	b.n	800140a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f967 	bl	80016c2 <HTS221_TEMP_Disable>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e004      	b.n	800140a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3320      	adds	r3, #32
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fc30 	bl	8001c88 <hts221_device_id_get>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	e000      	b.n	8001436 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HTS221_GetCapabilities+0x54>)
 800146c:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HTS221_GetCapabilities+0x54>)
 8001472:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	41480000 	.word	0x41480000

08001498 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e015      	b.n	80014da <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10b      	bne.n	80014d0 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3320      	adds	r3, #32
 80014bc:	2101      	movs	r1, #1
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fbf3 	bl	8001caa <hts221_power_on_set>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e004      	b.n	80014da <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e015      	b.n	8001524 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10b      	bne.n	800151a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3320      	adds	r3, #32
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fbce 	bl	8001caa <hts221_power_on_set>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	e004      	b.n	8001524 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001536:	6839      	ldr	r1, [r7, #0]
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f96f 	bl	800181c <HTS221_GetOutputDataRate>
 800153e:	4603      	mov	r3, r0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001554:	ed97 0a00 	vldr	s0, [r7]
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f9a3 	bl	80018a4 <HTS221_SetOutputDataRate>
 800155e:	4603      	mov	r3, r0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3320      	adds	r3, #32
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fc58 	bl	8001e32 <hts221_hum_adc_point_0_get>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	e06b      	b.n	8001666 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f103 0220 	add.w	r2, r3, #32
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	3304      	adds	r3, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4610      	mov	r0, r2
 800159e:	f000 fbaa 	bl	8001cf6 <hts221_hum_rh_point_0_get>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	e05b      	b.n	8001666 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f103 0220 	add.w	r2, r3, #32
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	3308      	adds	r3, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f000 fc5c 	bl	8001e7a <hts221_hum_adc_point_1_get>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	e04b      	b.n	8001666 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f103 0220 	add.w	r2, r3, #32
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	330c      	adds	r3, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f000 fba8 	bl	8001d32 <hts221_hum_rh_point_1_get>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	e03b      	b.n	8001666 <HTS221_HUM_GetHumidity+0xfe>
 80015ee:	2300      	movs	r3, #0
 80015f0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3320      	adds	r3, #32
 80015f6:	f107 021c 	add.w	r2, r7, #28
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fafd 	bl	8001bfc <hts221_humidity_raw_get>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	e02b      	b.n	8001666 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800160e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f99a 	bl	800195c <Linear_Interpolation>
 8001628:	eef0 7a40 	vmov.f32	s15, s0
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d503      	bpl.n	800164a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001670 <HTS221_HUM_GetHumidity+0x108>
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	dd02      	ble.n	8001664 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HTS221_HUM_GetHumidity+0x10c>)
 8001662:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3720      	adds	r7, #32
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	42c80000 	.word	0x42c80000
 8001674:	42c80000 	.word	0x42c80000

08001678 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e015      	b.n	80016ba <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10b      	bne.n	80016b0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3320      	adds	r3, #32
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fb03 	bl	8001caa <hts221_power_on_set>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e004      	b.n	80016ba <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e015      	b.n	8001704 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10b      	bne.n	80016fa <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3320      	adds	r3, #32
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fade 	bl	8001caa <hts221_power_on_set>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	e004      	b.n	8001704 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f87f 	bl	800181c <HTS221_GetOutputDataRate>
 800171e:	4603      	mov	r3, r0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001734:	ed97 0a00 	vldr	s0, [r7]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8b3 	bl	80018a4 <HTS221_SetOutputDataRate>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3320      	adds	r3, #32
 8001756:	f107 020c 	add.w	r2, r7, #12
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fbb0 	bl	8001ec2 <hts221_temp_adc_point_0_get>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	e052      	b.n	8001814 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f103 0220 	add.w	r2, r3, #32
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	3304      	adds	r3, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f000 faf6 	bl	8001d6e <hts221_temp_deg_point_0_get>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	e042      	b.n	8001814 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f103 0220 	add.w	r2, r3, #32
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	3308      	adds	r3, #8
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f000 fbb4 	bl	8001f0a <hts221_temp_adc_point_1_get>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	e032      	b.n	8001814 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f103 0220 	add.w	r2, r3, #32
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	330c      	adds	r3, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f000 fb07 	bl	8001dd0 <hts221_temp_deg_point_1_get>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	e022      	b.n	8001814 <HTS221_TEMP_GetTemperature+0xcc>
 80017ce:	2300      	movs	r3, #0
 80017d0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3320      	adds	r3, #32
 80017d6:	f107 021c 	add.w	r2, r7, #28
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fa30 	bl	8001c42 <hts221_temperature_raw_get>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	e012      	b.n	8001814 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80017ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f8aa 	bl	800195c <Linear_Interpolation>
 8001808:	eef0 7a40 	vmov.f32	s15, s0
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3320      	adds	r3, #32
 800182e:	f107 020b 	add.w	r2, r7, #11
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f983 	bl	8001b40 <hts221_data_rate_get>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	e025      	b.n	8001892 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d81d      	bhi.n	8001888 <HTS221_GetOutputDataRate+0x6c>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <HTS221_GetOutputDataRate+0x38>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001865 	.word	0x08001865
 8001858:	0800186f 	.word	0x0800186f
 800185c:	08001879 	.word	0x08001879
 8001860:	08001881 	.word	0x08001881
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
      break;
 800186c:	e010      	b.n	8001890 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001874:	601a      	str	r2, [r3, #0]
      break;
 8001876:	e00b      	b.n	8001890 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HTS221_GetOutputDataRate+0x80>)
 800187c:	601a      	str	r2, [r3, #0]
      break;
 800187e:	e007      	b.n	8001890 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HTS221_GetOutputDataRate+0x84>)
 8001884:	601a      	str	r2, [r3, #0]
      break;
 8001886:	e003      	b.n	8001890 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	60fb      	str	r3, [r7, #12]
      break;
 800188e:	bf00      	nop
  }

  return ret;
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40e00000 	.word	0x40e00000
 80018a0:	41480000 	.word	0x41480000

080018a4 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80018b0:	edd7 7a00 	vldr	s15, [r7]
 80018b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d801      	bhi.n	80018c6 <HTS221_SetOutputDataRate+0x22>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00b      	b.n	80018de <HTS221_SetOutputDataRate+0x3a>
 80018c6:	edd7 7a00 	vldr	s15, [r7]
 80018ca:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80018ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d801      	bhi.n	80018dc <HTS221_SetOutputDataRate+0x38>
 80018d8:	2302      	movs	r3, #2
 80018da:	e000      	b.n	80018de <HTS221_SetOutputDataRate+0x3a>
 80018dc:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80018de:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3320      	adds	r3, #32
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f902 	bl	8001af2 <hts221_data_rate_set>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	e000      	b.n	80018fc <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3320      	adds	r3, #32
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f9c9 	bl	8001caa <hts221_power_on_set>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e017      	b.n	8001954 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3320      	adds	r3, #32
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f940 	bl	8001bb0 <hts221_block_data_update_set>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e00b      	b.n	8001954 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800193c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffaf 	bl	80018a4 <HTS221_SetOutputDataRate>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	e000      	b.n	8001954 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	ed93 7a03 	vldr	s14, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	edd3 7a01 	vldr	s15, [r3, #4]
 8001974:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001978:	edd7 7a00 	vldr	s15, [r7]
 800197c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 6a02 	vldr	s13, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	edd3 7a01 	vldr	s15, [r3, #4]
 800198c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	ed93 6a00 	vldr	s12, [r3]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edd3 7a03 	vldr	s15, [r3, #12]
 800199c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019bc:	eef0 7a66 	vmov.f32	s15, s13
}
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80019ce:	b590      	push	{r4, r7, lr}
 80019d0:	b087      	sub	sp, #28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	461a      	mov	r2, r3
 80019da:	460b      	mov	r3, r1
 80019dc:	72fb      	strb	r3, [r7, #11]
 80019de:	4613      	mov	r3, r2
 80019e0:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10e      	bne.n	8001a0c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	695c      	ldr	r4, [r3, #20]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	7b1b      	ldrb	r3, [r3, #12]
 80019f6:	b298      	uxth	r0, r3
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	b299      	uxth	r1, r3
 8001a02:	893b      	ldrh	r3, [r7, #8]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	47a0      	blx	r4
 8001a08:	4603      	mov	r3, r0
 8001a0a:	e00d      	b.n	8001a28 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	695c      	ldr	r4, [r3, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	7b1b      	ldrb	r3, [r3, #12]
 8001a14:	b298      	uxth	r0, r3
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	893b      	ldrh	r3, [r7, #8]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	47a0      	blx	r4
 8001a26:	4603      	mov	r3, r0
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}

08001a30 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	72fb      	strb	r3, [r7, #11]
 8001a40:	4613      	mov	r3, r2
 8001a42:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10e      	bne.n	8001a6e <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	691c      	ldr	r4, [r3, #16]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
 8001a58:	b298      	uxth	r0, r3
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	b299      	uxth	r1, r3
 8001a64:	893b      	ldrh	r3, [r7, #8]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	47a0      	blx	r4
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e00d      	b.n	8001a8a <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	691c      	ldr	r4, [r3, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	7b1b      	ldrb	r3, [r3, #12]
 8001a76:	b298      	uxth	r0, r3
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	b299      	uxth	r1, r3
 8001a82:	893b      	ldrh	r3, [r7, #8]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	47a0      	blx	r4
 8001a88:	4603      	mov	r3, r0
  }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}

08001a92 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8001a92:	b590      	push	{r4, r7, lr}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	72fb      	strb	r3, [r7, #11]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685c      	ldr	r4, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68d8      	ldr	r0, [r3, #12]
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	7af9      	ldrb	r1, [r7, #11]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	47a0      	blx	r4
 8001ab6:	6178      	str	r0, [r7, #20]

  return ret;
 8001ab8:	697b      	ldr	r3, [r7, #20]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}

08001ac2 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001ac2:	b590      	push	{r4, r7, lr}
 8001ac4:	b087      	sub	sp, #28
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	461a      	mov	r2, r3
 8001ace:	460b      	mov	r3, r1
 8001ad0:	72fb      	strb	r3, [r7, #11]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681c      	ldr	r4, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68d8      	ldr	r0, [r3, #12]
 8001ade:	893b      	ldrh	r3, [r7, #8]
 8001ae0:	7af9      	ldrb	r1, [r7, #11]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	47a0      	blx	r4
 8001ae6:	6178      	str	r0, [r7, #20]

  return ret;
 8001ae8:	697b      	ldr	r3, [r7, #20]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}

08001af2 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001afe:	f107 0208 	add.w	r2, r7, #8
 8001b02:	2301      	movs	r3, #1
 8001b04:	2120      	movs	r1, #32
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffc3 	bl	8001a92 <hts221_read_reg>
 8001b0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10f      	bne.n	8001b34 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	7a3b      	ldrb	r3, [r7, #8]
 8001b1e:	f362 0301 	bfi	r3, r2, #0, #2
 8001b22:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001b24:	f107 0208 	add.w	r2, r7, #8
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffc8 	bl	8001ac2 <hts221_write_reg>
 8001b32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b34:	68fb      	ldr	r3, [r7, #12]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001b4a:	f107 0208 	add.w	r2, r7, #8
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2120      	movs	r1, #32
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff9d 	bl	8001a92 <hts221_read_reg>
 8001b58:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8001b5a:	7a3b      	ldrb	r3, [r7, #8]
 8001b5c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d81a      	bhi.n	8001b9c <hts221_data_rate_get+0x5c>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <hts221_data_rate_get+0x2c>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b85 	.word	0x08001b85
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001b95 	.word	0x08001b95
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
      break;
 8001b82:	e00f      	b.n	8001ba4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e00b      	b.n	8001ba4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	701a      	strb	r2, [r3, #0]
      break;
 8001b92:	e007      	b.n	8001ba4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2203      	movs	r2, #3
 8001b98:	701a      	strb	r2, [r3, #0]
      break;
 8001b9a:	e003      	b.n	8001ba4 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	701a      	strb	r2, [r3, #0]
      break;
 8001ba2:	bf00      	nop
  }

  return ret;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop

08001bb0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001bbc:	f107 0208 	add.w	r2, r7, #8
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff64 	bl	8001a92 <hts221_read_reg>
 8001bca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	7a3b      	ldrb	r3, [r7, #8]
 8001bdc:	f362 0382 	bfi	r3, r2, #2, #1
 8001be0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001be2:	f107 0208 	add.w	r2, r7, #8
 8001be6:	2301      	movs	r3, #1
 8001be8:	2120      	movs	r1, #32
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff69 	bl	8001ac2 <hts221_write_reg>
 8001bf0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001c06:	f107 0208 	add.w	r2, r7, #8
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	2128      	movs	r1, #40	; 0x28
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff3f 	bl	8001a92 <hts221_read_reg>
 8001c14:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001c16:	7a7b      	ldrb	r3, [r7, #9]
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	7a3b      	ldrb	r3, [r7, #8]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001c4c:	f107 0208 	add.w	r2, r7, #8
 8001c50:	2302      	movs	r3, #2
 8001c52:	212a      	movs	r1, #42	; 0x2a
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff1c 	bl	8001a92 <hts221_read_reg>
 8001c5a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001c5c:	7a7b      	ldrb	r3, [r7, #9]
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	7a3b      	ldrb	r3, [r7, #8]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001c92:	2301      	movs	r3, #1
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	210f      	movs	r1, #15
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fefa 	bl	8001a92 <hts221_read_reg>
 8001c9e:	60f8      	str	r0, [r7, #12]

  return ret;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001cb6:	f107 0208 	add.w	r2, r7, #8
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fee7 	bl	8001a92 <hts221_read_reg>
 8001cc4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	f362 13c7 	bfi	r3, r2, #7, #1
 8001cda:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001cdc:	f107 0208 	add.w	r2, r7, #8
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	2120      	movs	r1, #32
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff feec 	bl	8001ac2 <hts221_write_reg>
 8001cea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cec:	68fb      	ldr	r3, [r7, #12]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001d00:	f107 020b 	add.w	r2, r7, #11
 8001d04:	2301      	movs	r3, #1
 8001d06:	2130      	movs	r1, #48	; 0x30
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fec2 	bl	8001a92 <hts221_read_reg>
 8001d0e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001d28:	68fb      	ldr	r3, [r7, #12]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001d3c:	f107 020b 	add.w	r2, r7, #11
 8001d40:	2301      	movs	r3, #1
 8001d42:	2131      	movs	r1, #49	; 0x31
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fea4 	bl	8001a92 <hts221_read_reg>
 8001d4a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001d78:	f107 020f 	add.w	r2, r7, #15
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	2132      	movs	r1, #50	; 0x32
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fe86 	bl	8001a92 <hts221_read_reg>
 8001d86:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11b      	bne.n	8001dc6 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001d8e:	f107 0210 	add.w	r2, r7, #16
 8001d92:	2301      	movs	r3, #1
 8001d94:	2135      	movs	r1, #53	; 0x35
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fe7b 	bl	8001a92 <hts221_read_reg>
 8001d9c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001d9e:	7c3b      	ldrb	r3, [r7, #16]
 8001da0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001da8:	7cfb      	ldrb	r3, [r7, #19]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	4413      	add	r3, r2
 8001db0:	ee07 3a90 	vmov	s15, r3
 8001db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001dc6:	697b      	ldr	r3, [r7, #20]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001dda:	f107 020f 	add.w	r2, r7, #15
 8001dde:	2301      	movs	r3, #1
 8001de0:	2133      	movs	r1, #51	; 0x33
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fe55 	bl	8001a92 <hts221_read_reg>
 8001de8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11b      	bne.n	8001e28 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001df0:	f107 0210 	add.w	r2, r7, #16
 8001df4:	2301      	movs	r3, #1
 8001df6:	2135      	movs	r1, #53	; 0x35
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fe4a 	bl	8001a92 <hts221_read_reg>
 8001dfe:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001e00:	7c3b      	ldrb	r3, [r7, #16]
 8001e02:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	4413      	add	r3, r2
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001e28:	697b      	ldr	r3, [r7, #20]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001e3c:	f107 0208 	add.w	r2, r7, #8
 8001e40:	2302      	movs	r3, #2
 8001e42:	2136      	movs	r1, #54	; 0x36
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff fe24 	bl	8001a92 <hts221_read_reg>
 8001e4a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001e4c:	7a7b      	ldrb	r3, [r7, #9]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	7a3b      	ldrb	r3, [r7, #8]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001e5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001e70:	68fb      	ldr	r3, [r7, #12]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001e84:	f107 0208 	add.w	r2, r7, #8
 8001e88:	2302      	movs	r3, #2
 8001e8a:	213a      	movs	r1, #58	; 0x3a
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fe00 	bl	8001a92 <hts221_read_reg>
 8001e92:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001e94:	7a7b      	ldrb	r3, [r7, #9]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	7a3b      	ldrb	r3, [r7, #8]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001ea6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001ecc:	f107 0208 	add.w	r2, r7, #8
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	213c      	movs	r1, #60	; 0x3c
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fddc 	bl	8001a92 <hts221_read_reg>
 8001eda:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001edc:	7a7b      	ldrb	r3, [r7, #9]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	7a3b      	ldrb	r3, [r7, #8]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001eee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001f14:	f107 0208 	add.w	r2, r7, #8
 8001f18:	2302      	movs	r3, #2
 8001f1a:	213e      	movs	r1, #62	; 0x3e
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fdb8 	bl	8001a92 <hts221_read_reg>
 8001f22:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001f24:	7a7b      	ldrb	r3, [r7, #9]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	7a3b      	ldrb	r3, [r7, #8]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001f36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001f48:	68fb      	ldr	r3, [r7, #12]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e051      	b.n	8002014 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	7b1a      	ldrb	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <LPS22HH_RegisterBusIO+0xcc>)
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1c      	ldr	r2, [pc, #112]	; (8002024 <LPS22HH_RegisterBusIO+0xd0>)
 8001fb2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e020      	b.n	8002014 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4798      	blx	r3
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e016      	b.n	8002014 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d112      	bne.n	8002014 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
 8001ffe:	461a      	mov	r2, r3
 8002000:	2110      	movs	r1, #16
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f9e7 	bl	80023d6 <LPS22HH_Write_Reg>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	08002707 	.word	0x08002707
 8002024:	0800273d 	.word	0x0800273d

08002028 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fb16 	bl	800266c <LPS22HH_Initialize>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	e004      	b.n	8002056 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800206c:	2b01      	cmp	r3, #1
 800206e:	d111      	bne.n	8002094 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f87f 	bl	8002174 <LPS22HH_PRESS_Disable>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	e00d      	b.n	800209e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f920 	bl	80022c8 <LPS22HH_TEMP_Disable>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e004      	b.n	800209e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3320      	adds	r3, #32
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fd26 	bl	8002b08 <lps22hh_device_id_get>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	e000      	b.n	80020ca <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <LPS22HH_GetCapabilities+0x54>)
 8002108:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <LPS22HH_GetCapabilities+0x54>)
 800210e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	43480000 	.word	0x43480000

0800212c <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e014      	b.n	800216c <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f103 0220 	add.w	r2, r3, #32
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800214e:	4619      	mov	r1, r3
 8002150:	4610      	mov	r0, r2
 8002152:	f000 fb97 	bl	8002884 <lps22hh_data_rate_set>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	e004      	b.n	800216c <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e024      	b.n	80021d4 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11a      	bne.n	80021ca <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 0220 	add.w	r2, r3, #32
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3333      	adds	r3, #51	; 0x33
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f000 fbbd 	bl	8002920 <lps22hh_data_rate_get>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	e010      	b.n	80021d4 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3320      	adds	r3, #32
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fb63 	bl	8002884 <lps22hh_data_rate_set>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	e004      	b.n	80021d4 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f90f 	bl	800240c <LPS22HH_GetOutputDataRate>
 80021ee:	4603      	mov	r3, r0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800220a:	2b01      	cmp	r3, #1
 800220c:	d106      	bne.n	800221c <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800220e:	ed97 0a00 	vldr	s0, [r7]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f95e 	bl	80024d4 <LPS22HH_SetOutputDataRate_When_Enabled>
 8002218:	4603      	mov	r3, r0
 800221a:	e005      	b.n	8002228 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 800221c:	ed97 0a00 	vldr	s0, [r7]
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f9c9 	bl	80025b8 <LPS22HH_SetOutputDataRate_When_Disabled>
 8002226:	4603      	mov	r3, r0
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	2204      	movs	r2, #4
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f005 fd20 	bl	8007c88 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3320      	adds	r3, #32
 800224c:	f107 020c 	add.w	r2, r7, #12
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fc0c 	bl	8002a70 <lps22hh_pressure_raw_get>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	e009      	b.n	8002278 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fab4 	bl	80027d4 <lps22hh_from_lsb_to_hpa>
 800226c:	eef0 7a40 	vmov.f32	s15, s0
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e014      	b.n	80022c0 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 0220 	add.w	r2, r3, #32
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f000 faed 	bl	8002884 <lps22hh_data_rate_set>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	e004      	b.n	80022c0 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e024      	b.n	8002328 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11a      	bne.n	800231e <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0220 	add.w	r2, r3, #32
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3333      	adds	r3, #51	; 0x33
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f000 fb13 	bl	8002920 <lps22hh_data_rate_get>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8002300:	f04f 33ff 	mov.w	r3, #4294967295
 8002304:	e010      	b.n	8002328 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3320      	adds	r3, #32
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fab9 	bl	8002884 <lps22hh_data_rate_set>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e004      	b.n	8002328 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f865 	bl	800240c <LPS22HH_GetOutputDataRate>
 8002342:	4603      	mov	r3, r0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002362:	ed97 0a00 	vldr	s0, [r7]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f8b4 	bl	80024d4 <LPS22HH_SetOutputDataRate_When_Enabled>
 800236c:	4603      	mov	r3, r0
 800236e:	e005      	b.n	800237c <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002370:	ed97 0a00 	vldr	s0, [r7]
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f91f 	bl	80025b8 <LPS22HH_SetOutputDataRate_When_Disabled>
 800237a:	4603      	mov	r3, r0
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2202      	movs	r2, #2
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f005 fc76 	bl	8007c88 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3320      	adds	r3, #32
 80023a0:	f107 020c 	add.w	r2, r7, #12
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fb8b 	bl	8002ac2 <lps22hh_temperature_raw_get>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e00a      	b.n	80023ce <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80023b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fa21 	bl	8002804 <lps22hh_from_lsb_to_celsius>
 80023c2:	eef0 7a40 	vmov.f32	s15, s0
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
 80023e2:	4613      	mov	r3, r2
 80023e4:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f103 0020 	add.w	r0, r3, #32
 80023ec:	1cba      	adds	r2, r7, #2
 80023ee:	78f9      	ldrb	r1, [r7, #3]
 80023f0:	2301      	movs	r3, #1
 80023f2:	f000 f9d6 	bl	80027a2 <lps22hh_write_reg>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e000      	b.n	8002404 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3320      	adds	r3, #32
 800241e:	f107 020b 	add.w	r2, r7, #11
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fa7b 	bl	8002920 <lps22hh_data_rate_get>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	e03d      	b.n	80024b2 <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	2b07      	cmp	r3, #7
 800243a:	d835      	bhi.n	80024a8 <LPS22HH_GetOutputDataRate+0x9c>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <LPS22HH_GetOutputDataRate+0x38>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	08002465 	.word	0x08002465
 8002448:	0800246f 	.word	0x0800246f
 800244c:	08002479 	.word	0x08002479
 8002450:	08002481 	.word	0x08002481
 8002454:	08002489 	.word	0x08002489
 8002458:	08002491 	.word	0x08002491
 800245c:	08002499 	.word	0x08002499
 8002460:	080024a1 	.word	0x080024a1
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
      break;
 800246c:	e020      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002474:	601a      	str	r2, [r3, #0]
      break;
 8002476:	e01b      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <LPS22HH_GetOutputDataRate+0xb0>)
 800247c:	601a      	str	r2, [r3, #0]
      break;
 800247e:	e017      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <LPS22HH_GetOutputDataRate+0xb4>)
 8002484:	601a      	str	r2, [r3, #0]
      break;
 8002486:	e013      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <LPS22HH_GetOutputDataRate+0xb8>)
 800248c:	601a      	str	r2, [r3, #0]
      break;
 800248e:	e00f      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <LPS22HH_GetOutputDataRate+0xbc>)
 8002494:	601a      	str	r2, [r3, #0]
      break;
 8002496:	e00b      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <LPS22HH_GetOutputDataRate+0xc0>)
 800249c:	601a      	str	r2, [r3, #0]
      break;
 800249e:	e007      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <LPS22HH_GetOutputDataRate+0xc4>)
 80024a4:	601a      	str	r2, [r3, #0]
      break;
 80024a6:	e003      	b.n	80024b0 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	60fb      	str	r3, [r7, #12]
      break;
 80024ae:	bf00      	nop
  }

  return ret;
 80024b0:	68fb      	ldr	r3, [r7, #12]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	41200000 	.word	0x41200000
 80024c0:	41c80000 	.word	0x41c80000
 80024c4:	42480000 	.word	0x42480000
 80024c8:	42960000 	.word	0x42960000
 80024cc:	42c80000 	.word	0x42c80000
 80024d0:	43480000 	.word	0x43480000

080024d4 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80024e0:	edd7 7a00 	vldr	s15, [r7]
 80024e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	d801      	bhi.n	80024f6 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e037      	b.n	8002566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80024f6:	edd7 7a00 	vldr	s15, [r7]
 80024fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	d801      	bhi.n	800250c <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8002508:	2302      	movs	r3, #2
 800250a:	e02c      	b.n	8002566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800250c:	edd7 7a00 	vldr	s15, [r7]
 8002510:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	d801      	bhi.n	8002522 <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800251e:	2303      	movs	r3, #3
 8002520:	e021      	b.n	8002566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002522:	edd7 7a00 	vldr	s15, [r7]
 8002526:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80025ac <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 800252a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	d801      	bhi.n	8002538 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8002534:	2304      	movs	r3, #4
 8002536:	e016      	b.n	8002566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002538:	edd7 7a00 	vldr	s15, [r7]
 800253c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80025b0 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8002540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	d801      	bhi.n	800254e <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800254a:	2305      	movs	r3, #5
 800254c:	e00b      	b.n	8002566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800254e:	edd7 7a00 	vldr	s15, [r7]
 8002552:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80025b4 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8002556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	d801      	bhi.n	8002564 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8002560:	2306      	movs	r3, #6
 8002562:	e000      	b.n	8002566 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8002564:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8002566:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3320      	adds	r3, #32
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f987 	bl	8002884 <lps22hh_data_rate_set>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	e00f      	b.n	80025a2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 0220 	add.w	r2, r3, #32
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3333      	adds	r3, #51	; 0x33
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f000 f9c6 	bl	8002920 <lps22hh_data_rate_get>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e000      	b.n	80025a2 <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	42480000 	.word	0x42480000
 80025b0:	42960000 	.word	0x42960000
 80025b4:	42c80000 	.word	0x42c80000

080025b8 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80025c4:	edd7 7a00 	vldr	s15, [r7]
 80025c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	d801      	bhi.n	80025da <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e037      	b.n	800264a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80025da:	edd7 7a00 	vldr	s15, [r7]
 80025de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	d801      	bhi.n	80025f0 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e02c      	b.n	800264a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80025f0:	edd7 7a00 	vldr	s15, [r7]
 80025f4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80025f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d801      	bhi.n	8002606 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8002602:	2303      	movs	r3, #3
 8002604:	e021      	b.n	800264a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002606:	edd7 7a00 	vldr	s15, [r7]
 800260a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002660 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800260e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002616:	d801      	bhi.n	800261c <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8002618:	2304      	movs	r3, #4
 800261a:	e016      	b.n	800264a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800261c:	edd7 7a00 	vldr	s15, [r7]
 8002620:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002664 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8002624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262c:	d801      	bhi.n	8002632 <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800262e:	2305      	movs	r3, #5
 8002630:	e00b      	b.n	800264a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002632:	edd7 7a00 	vldr	s15, [r7]
 8002636:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002668 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 800263a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	d801      	bhi.n	8002648 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8002644:	2306      	movs	r3, #6
 8002646:	e000      	b.n	800264a <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8002648:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	42480000 	.word	0x42480000
 8002664:	42960000 	.word	0x42960000
 8002668:	42c80000 	.word	0x42c80000

0800266c <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d00b      	beq.n	8002694 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3320      	adds	r3, #32
 8002680:	2111      	movs	r1, #17
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fa9d 	bl	8002bc2 <lps22hh_i3c_interface_set>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e034      	b.n	80026fe <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3320      	adds	r3, #32
 8002698:	2110      	movs	r1, #16
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f8f2 	bl	8002884 <lps22hh_data_rate_set>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e028      	b.n	80026fe <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3320      	adds	r3, #32
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fa5f 	bl	8002b76 <lps22hh_lp_bandwidth_set>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e01c      	b.n	80026fe <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3320      	adds	r3, #32
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f8b4 	bl	8002838 <lps22hh_block_data_update_set>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e010      	b.n	80026fe <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3320      	adds	r3, #32
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fa21 	bl	8002b2a <lps22hh_auto_increment_set>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e004      	b.n	80026fe <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2203      	movs	r2, #3
 80026f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002706:	b590      	push	{r4, r7, lr}
 8002708:	b087      	sub	sp, #28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	461a      	mov	r2, r3
 8002712:	460b      	mov	r3, r1
 8002714:	72fb      	strb	r3, [r7, #11]
 8002716:	4613      	mov	r3, r2
 8002718:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	695c      	ldr	r4, [r3, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	7b1b      	ldrb	r3, [r3, #12]
 8002726:	b298      	uxth	r0, r3
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	b299      	uxth	r1, r3
 800272c:	893b      	ldrh	r3, [r7, #8]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	47a0      	blx	r4
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}

0800273c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	461a      	mov	r2, r3
 8002748:	460b      	mov	r3, r1
 800274a:	72fb      	strb	r3, [r7, #11]
 800274c:	4613      	mov	r3, r2
 800274e:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	691c      	ldr	r4, [r3, #16]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	7b1b      	ldrb	r3, [r3, #12]
 800275c:	b298      	uxth	r0, r3
 800275e:	7afb      	ldrb	r3, [r7, #11]
 8002760:	b299      	uxth	r1, r3
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	47a0      	blx	r4
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}

08002772 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002772:	b590      	push	{r4, r7, lr}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	461a      	mov	r2, r3
 800277e:	460b      	mov	r3, r1
 8002780:	72fb      	strb	r3, [r7, #11]
 8002782:	4613      	mov	r3, r2
 8002784:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	685c      	ldr	r4, [r3, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	68d8      	ldr	r0, [r3, #12]
 800278e:	893b      	ldrh	r3, [r7, #8]
 8002790:	7af9      	ldrb	r1, [r7, #11]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	47a0      	blx	r4
 8002796:	6178      	str	r0, [r7, #20]

  return ret;
 8002798:	697b      	ldr	r3, [r7, #20]
}
 800279a:	4618      	mov	r0, r3
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd90      	pop	{r4, r7, pc}

080027a2 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	461a      	mov	r2, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	72fb      	strb	r3, [r7, #11]
 80027b2:	4613      	mov	r3, r2
 80027b4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681c      	ldr	r4, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68d8      	ldr	r0, [r3, #12]
 80027be:	893b      	ldrh	r3, [r7, #8]
 80027c0:	7af9      	ldrb	r1, [r7, #11]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	47a0      	blx	r4
 80027c6:	6178      	str	r0, [r7, #20]

  return ret;
 80027c8:	697b      	ldr	r3, [r7, #20]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
	...

080027d4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002800 <lps22hh_from_lsb_to_hpa+0x2c>
 80027ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027ee:	eef0 7a66 	vmov.f32	s15, s13
}
 80027f2:	eeb0 0a67 	vmov.f32	s0, s15
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	49800000 	.word	0x49800000

08002804 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800280e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002834 <lps22hh_from_lsb_to_celsius+0x30>
 800281e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002822:	eef0 7a66 	vmov.f32	s15, s13
}
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	42c80000 	.word	0x42c80000

08002838 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002844:	f107 0208 	add.w	r2, r7, #8
 8002848:	2301      	movs	r3, #1
 800284a:	2110      	movs	r1, #16
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff90 	bl	8002772 <lps22hh_read_reg>
 8002852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10f      	bne.n	800287a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	7a3b      	ldrb	r3, [r7, #8]
 8002864:	f362 0341 	bfi	r3, r2, #1, #1
 8002868:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800286a:	f107 0208 	add.w	r2, r7, #8
 800286e:	2301      	movs	r3, #1
 8002870:	2110      	movs	r1, #16
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ff95 	bl	80027a2 <lps22hh_write_reg>
 8002878:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800287a:	68fb      	ldr	r3, [r7, #12]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002890:	f107 0210 	add.w	r2, r7, #16
 8002894:	2301      	movs	r3, #1
 8002896:	2110      	movs	r1, #16
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff6a 	bl	8002772 <lps22hh_read_reg>
 800289e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80028a6:	f107 020c 	add.w	r2, r7, #12
 80028aa:	2301      	movs	r3, #1
 80028ac:	2111      	movs	r1, #17
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff5f 	bl	8002772 <lps22hh_read_reg>
 80028b4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10f      	bne.n	80028dc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	7c3b      	ldrb	r3, [r7, #16]
 80028c6:	f362 1306 	bfi	r3, r2, #4, #3
 80028ca:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80028cc:	f107 0210 	add.w	r2, r7, #16
 80028d0:	2301      	movs	r3, #1
 80028d2:	2110      	movs	r1, #16
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff64 	bl	80027a2 <lps22hh_write_reg>
 80028da:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d119      	bne.n	8002916 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	7b3b      	ldrb	r3, [r7, #12]
 80028ee:	f362 0341 	bfi	r3, r2, #1, #1
 80028f2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	7b3b      	ldrb	r3, [r7, #12]
 8002900:	f362 0300 	bfi	r3, r2, #0, #1
 8002904:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002906:	f107 020c 	add.w	r2, r7, #12
 800290a:	2301      	movs	r3, #1
 800290c:	2111      	movs	r1, #17
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff47 	bl	80027a2 <lps22hh_write_reg>
 8002914:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002916:	697b      	ldr	r3, [r7, #20]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800292a:	f107 0210 	add.w	r2, r7, #16
 800292e:	2301      	movs	r3, #1
 8002930:	2110      	movs	r1, #16
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ff1d 	bl	8002772 <lps22hh_read_reg>
 8002938:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002940:	f107 020c 	add.w	r2, r7, #12
 8002944:	2301      	movs	r3, #1
 8002946:	2111      	movs	r1, #17
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff12 	bl	8002772 <lps22hh_read_reg>
 800294e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 8086 	bne.w	8002a64 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002958:	f107 020c 	add.w	r2, r7, #12
 800295c:	2301      	movs	r3, #1
 800295e:	2111      	movs	r1, #17
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff06 	bl	8002772 <lps22hh_read_reg>
 8002966:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002968:	7b3b      	ldrb	r3, [r7, #12]
 800296a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	011a      	lsls	r2, r3, #4
 8002972:	7b3b      	ldrb	r3, [r7, #12]
 8002974:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800297e:	7c3a      	ldrb	r2, [r7, #16]
 8002980:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002984:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8002986:	4413      	add	r3, r2
 8002988:	2b15      	cmp	r3, #21
 800298a:	d867      	bhi.n	8002a5c <lps22hh_data_rate_get+0x13c>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <lps22hh_data_rate_get+0x74>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029ed 	.word	0x080029ed
 8002998:	080029fd 	.word	0x080029fd
 800299c:	08002a05 	.word	0x08002a05
 80029a0:	08002a0d 	.word	0x08002a0d
 80029a4:	08002a15 	.word	0x08002a15
 80029a8:	08002a1d 	.word	0x08002a1d
 80029ac:	08002a4d 	.word	0x08002a4d
 80029b0:	08002a55 	.word	0x08002a55
 80029b4:	080029f5 	.word	0x080029f5
 80029b8:	08002a5d 	.word	0x08002a5d
 80029bc:	08002a5d 	.word	0x08002a5d
 80029c0:	08002a5d 	.word	0x08002a5d
 80029c4:	08002a5d 	.word	0x08002a5d
 80029c8:	08002a5d 	.word	0x08002a5d
 80029cc:	08002a5d 	.word	0x08002a5d
 80029d0:	08002a5d 	.word	0x08002a5d
 80029d4:	08002a5d 	.word	0x08002a5d
 80029d8:	08002a25 	.word	0x08002a25
 80029dc:	08002a2d 	.word	0x08002a2d
 80029e0:	08002a35 	.word	0x08002a35
 80029e4:	08002a3d 	.word	0x08002a3d
 80029e8:	08002a45 	.word	0x08002a45
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
        break;
 80029f2:	e038      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2208      	movs	r2, #8
 80029f8:	701a      	strb	r2, [r3, #0]
        break;
 80029fa:	e034      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
        break;
 8002a02:	e030      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2202      	movs	r2, #2
 8002a08:	701a      	strb	r2, [r3, #0]
        break;
 8002a0a:	e02c      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2203      	movs	r2, #3
 8002a10:	701a      	strb	r2, [r3, #0]
        break;
 8002a12:	e028      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2204      	movs	r2, #4
 8002a18:	701a      	strb	r2, [r3, #0]
        break;
 8002a1a:	e024      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2205      	movs	r2, #5
 8002a20:	701a      	strb	r2, [r3, #0]
        break;
 8002a22:	e020      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2211      	movs	r2, #17
 8002a28:	701a      	strb	r2, [r3, #0]
        break;
 8002a2a:	e01c      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2212      	movs	r2, #18
 8002a30:	701a      	strb	r2, [r3, #0]
        break;
 8002a32:	e018      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2213      	movs	r2, #19
 8002a38:	701a      	strb	r2, [r3, #0]
        break;
 8002a3a:	e014      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2214      	movs	r2, #20
 8002a40:	701a      	strb	r2, [r3, #0]
        break;
 8002a42:	e010      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2215      	movs	r2, #21
 8002a48:	701a      	strb	r2, [r3, #0]
        break;
 8002a4a:	e00c      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2206      	movs	r2, #6
 8002a50:	701a      	strb	r2, [r3, #0]
        break;
 8002a52:	e008      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2207      	movs	r2, #7
 8002a58:	701a      	strb	r2, [r3, #0]
        break;
 8002a5a:	e004      	b.n	8002a66 <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
        break;
 8002a62:	e000      	b.n	8002a66 <lps22hh_data_rate_get+0x146>
    }
  }
 8002a64:	bf00      	nop

  return ret;
 8002a66:	697b      	ldr	r3, [r7, #20]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8002a7a:	f107 0208 	add.w	r2, r7, #8
 8002a7e:	2303      	movs	r3, #3
 8002a80:	2128      	movs	r1, #40	; 0x28
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fe75 	bl	8002772 <lps22hh_read_reg>
 8002a88:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8002a8a:	7abb      	ldrb	r3, [r7, #10]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	7a7a      	ldrb	r2, [r7, #9]
 8002a9a:	441a      	add	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	7a3a      	ldrb	r2, [r7, #8]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	601a      	str	r2, [r3, #0]

  return ret;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8002acc:	f107 0208 	add.w	r2, r7, #8
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	212b      	movs	r1, #43	; 0x2b
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fe4c 	bl	8002772 <lps22hh_read_reg>
 8002ada:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8002adc:	7a7b      	ldrb	r3, [r7, #9]
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	7a3b      	ldrb	r3, [r7, #8]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21a      	sxth	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	801a      	strh	r2, [r3, #0]

  return ret;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8002b12:	2301      	movs	r3, #1
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	210f      	movs	r1, #15
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fe2a 	bl	8002772 <lps22hh_read_reg>
 8002b1e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002b20:	68fb      	ldr	r3, [r7, #12]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002b36:	f107 0208 	add.w	r2, r7, #8
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	2111      	movs	r1, #17
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fe17 	bl	8002772 <lps22hh_read_reg>
 8002b44:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10f      	bne.n	8002b6c <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	7a3b      	ldrb	r3, [r7, #8]
 8002b56:	f362 1304 	bfi	r3, r2, #4, #1
 8002b5a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002b5c:	f107 0208 	add.w	r2, r7, #8
 8002b60:	2301      	movs	r3, #1
 8002b62:	2111      	movs	r1, #17
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fe1c 	bl	80027a2 <lps22hh_write_reg>
 8002b6a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002b82:	f107 0208 	add.w	r2, r7, #8
 8002b86:	2301      	movs	r3, #1
 8002b88:	2110      	movs	r1, #16
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fdf1 	bl	8002772 <lps22hh_read_reg>
 8002b90:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	7a3b      	ldrb	r3, [r7, #8]
 8002ba2:	f362 0383 	bfi	r3, r2, #2, #2
 8002ba6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	2301      	movs	r3, #1
 8002bae:	2110      	movs	r1, #16
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fdf6 	bl	80027a2 <lps22hh_write_reg>
 8002bb6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8002bce:	f107 0208 	add.w	r2, r7, #8
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	210e      	movs	r1, #14
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fdcb 	bl	8002772 <lps22hh_read_reg>
 8002bdc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d118      	bne.n	8002c16 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	7a3b      	ldrb	r3, [r7, #8]
 8002bee:	f362 0341 	bfi	r3, r2, #1, #1
 8002bf2:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	7a3b      	ldrb	r3, [r7, #8]
 8002c00:	f362 13c7 	bfi	r3, r2, #7, #1
 8002c04:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8002c06:	f107 0208 	add.w	r2, r7, #8
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	210e      	movs	r1, #14
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fdc7 	bl	80027a2 <lps22hh_write_reg>
 8002c14:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e034      	b.n	8002ca2 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	7b1a      	ldrb	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <STTS751_RegisterBusIO+0x8c>)
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <STTS751_RegisterBusIO+0x90>)
 8002c7a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4798      	blx	r3
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	e002      	b.n	8002ca2 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	08003145 	.word	0x08003145
 8002cb0:	080031b3 	.word	0x080031b3

08002cb4 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d127      	bne.n	8002d16 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3320      	adds	r3, #32
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fc54 	bl	800357a <stts751_pin_event_route_set>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cdc:	e020      	b.n	8002d20 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3320      	adds	r3, #32
 8002cea:	2103      	movs	r1, #3
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fbb7 	bl	8003460 <stts751_resolution_set>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8002cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfc:	e010      	b.n	8002d20 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3320      	adds	r3, #32
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fad5 	bl	80032b4 <stts751_temp_data_rate_set>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	e004      	b.n	8002d20 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f877 	bl	8002e2e <STTS751_TEMP_Disable>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e004      	b.n	8002d56 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3320      	adds	r3, #32
 8002d6c:	f107 020c 	add.w	r2, r7, #12
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fc27 	bl	80035c6 <stts751_device_id_get>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e003      	b.n	8002d8c <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8002d84:	7b7a      	ldrb	r2, [r7, #13]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002dca:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e012      	b.n	8002e26 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002e06:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8b6 	bl	8002f7c <STTS751_TEMP_SetOutputDataRate>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e004      	b.n	8002e26 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e01c      	b.n	8002e7e <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3334      	adds	r3, #52	; 0x34
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f81c 	bl	8002e88 <STTS751_TEMP_GetOutputDataRate>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e010      	b.n	8002e7e <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3320      	adds	r3, #32
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fa26 	bl	80032b4 <stts751_temp_data_rate_set>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	e004      	b.n	8002e7e <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3320      	adds	r3, #32
 8002e9a:	f107 020b 	add.w	r2, r7, #11
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fa5d 	bl	8003360 <stts751_temp_data_rate_get>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb0:	e060      	b.n	8002f74 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	2b90      	cmp	r3, #144	; 0x90
 8002eb6:	d021      	beq.n	8002efc <STTS751_TEMP_GetOutputDataRate+0x74>
 8002eb8:	2b90      	cmp	r3, #144	; 0x90
 8002eba:	dc56      	bgt.n	8002f6a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	dc1b      	bgt.n	8002ef8 <STTS751_TEMP_GetOutputDataRate+0x70>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db52      	blt.n	8002f6a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	d850      	bhi.n	8002f6a <STTS751_TEMP_GetOutputDataRate+0xe2>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002f07 	.word	0x08002f07
 8002ed4:	08002f11 	.word	0x08002f11
 8002ed8:	08002f1b 	.word	0x08002f1b
 8002edc:	08002f25 	.word	0x08002f25
 8002ee0:	08002f2f 	.word	0x08002f2f
 8002ee4:	08002f39 	.word	0x08002f39
 8002ee8:	08002f43 	.word	0x08002f43
 8002eec:	08002f4d 	.word	0x08002f4d
 8002ef0:	08002f57 	.word	0x08002f57
 8002ef4:	08002f61 	.word	0x08002f61
 8002ef8:	2b80      	cmp	r3, #128	; 0x80
 8002efa:	d136      	bne.n	8002f6a <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
      break;
 8002f04:	e035      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8002f0c:	601a      	str	r2, [r3, #0]
      break;
 8002f0e:	e030      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8002f16:	601a      	str	r2, [r3, #0]
      break;
 8002f18:	e02b      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8002f20:	601a      	str	r2, [r3, #0]
      break;
 8002f22:	e026      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002f2a:	601a      	str	r2, [r3, #0]
      break;
 8002f2c:	e021      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f34:	601a      	str	r2, [r3, #0]
      break;
 8002f36:	e01c      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f3e:	601a      	str	r2, [r3, #0]
      break;
 8002f40:	e017      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002f48:	601a      	str	r2, [r3, #0]
      break;
 8002f4a:	e012      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002f52:	601a      	str	r2, [r3, #0]
      break;
 8002f54:	e00d      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002f5c:	601a      	str	r2, [r3, #0]
      break;
 8002f5e:	e008      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002f66:	601a      	str	r2, [r3, #0]
      break;
 8002f68:	e003      	b.n	8002f72 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	60fb      	str	r3, [r7, #12]
      break;
 8002f70:	bf00      	nop
  }

  return ret;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3320      	adds	r3, #32
 8002f8c:	f107 020e 	add.w	r2, r7, #14
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fa8a 	bl	80034ac <stts751_resolution_get>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e0a5      	b.n	80030f0 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8002fa4:	edd7 7a00 	vldr	s15, [r7]
 8002fa8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002fac:	eef4 7a47 	vcmp.f32	s15, s14
 8002fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb4:	d10e      	bne.n	8002fd4 <STTS751_TEMP_SetOutputDataRate+0x58>
 8002fb6:	7bbb      	ldrb	r3, [r7, #14]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d10b      	bne.n	8002fd4 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fa4c 	bl	8003460 <stts751_resolution_set>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e08d      	b.n	80030f0 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8002fd4:	edd7 7a00 	vldr	s15, [r7]
 8002fd8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80030f8 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8002fdc:	eef4 7a47 	vcmp.f32	s15, s14
 8002fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe4:	d111      	bne.n	800300a <STTS751_TEMP_SetOutputDataRate+0x8e>
 8002fe6:	7bbb      	ldrb	r3, [r7, #14]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d002      	beq.n	8002ff2 <STTS751_TEMP_SetOutputDataRate+0x76>
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d10b      	bne.n	800300a <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3320      	adds	r3, #32
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fa31 	bl	8003460 <stts751_resolution_set>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
 8003008:	e072      	b.n	80030f0 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800300a:	edd7 7a00 	vldr	s15, [r7]
 800300e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80030fc <STTS751_TEMP_SetOutputDataRate+0x180>
 8003012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301a:	d801      	bhi.n	8003020 <STTS751_TEMP_SetOutputDataRate+0xa4>
 800301c:	2300      	movs	r3, #0
 800301e:	e058      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003020:	edd7 7a00 	vldr	s15, [r7]
 8003024:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8003028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	d801      	bhi.n	8003036 <STTS751_TEMP_SetOutputDataRate+0xba>
 8003032:	2301      	movs	r3, #1
 8003034:	e04d      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003036:	edd7 7a00 	vldr	s15, [r7]
 800303a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800303e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003046:	d801      	bhi.n	800304c <STTS751_TEMP_SetOutputDataRate+0xd0>
 8003048:	2302      	movs	r3, #2
 800304a:	e042      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 800304c:	edd7 7a00 	vldr	s15, [r7]
 8003050:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305c:	d801      	bhi.n	8003062 <STTS751_TEMP_SetOutputDataRate+0xe6>
 800305e:	2303      	movs	r3, #3
 8003060:	e037      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003062:	edd7 7a00 	vldr	s15, [r7]
 8003066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	d801      	bhi.n	8003078 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8003074:	2304      	movs	r3, #4
 8003076:	e02c      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 8003078:	edd7 7a00 	vldr	s15, [r7]
 800307c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003088:	d801      	bhi.n	800308e <STTS751_TEMP_SetOutputDataRate+0x112>
 800308a:	2305      	movs	r3, #5
 800308c:	e021      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 800308e:	edd7 7a00 	vldr	s15, [r7]
 8003092:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309e:	d801      	bhi.n	80030a4 <STTS751_TEMP_SetOutputDataRate+0x128>
 80030a0:	2306      	movs	r3, #6
 80030a2:	e016      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80030a4:	edd7 7a00 	vldr	s15, [r7]
 80030a8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80030ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b4:	d801      	bhi.n	80030ba <STTS751_TEMP_SetOutputDataRate+0x13e>
 80030b6:	2307      	movs	r3, #7
 80030b8:	e00b      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80030ba:	edd7 7a00 	vldr	s15, [r7]
 80030be:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d801      	bhi.n	80030d0 <STTS751_TEMP_SetOutputDataRate+0x154>
 80030cc:	2308      	movs	r3, #8
 80030ce:	e000      	b.n	80030d2 <STTS751_TEMP_SetOutputDataRate+0x156>
 80030d0:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80030d2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3320      	adds	r3, #32
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f8e9 	bl	80032b4 <stts751_temp_data_rate_set>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	e000      	b.n	80030f0 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	42000000 	.word	0x42000000
 80030fc:	3d800000 	.word	0x3d800000

08003100 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3320      	adds	r3, #32
 800310e:	f107 020e 	add.w	r2, r7, #14
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fa01 	bl	800351c <stts751_temperature_raw_get>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	e00a      	b.n	800313c <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8003126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f8a8 	bl	8003280 <stts751_from_lsb_to_celsius>
 8003130:	eef0 7a40 	vmov.f32	s15, s0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	72fb      	strb	r3, [r7, #11]
 8003154:	4613      	mov	r3, r2
 8003156:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11f      	bne.n	80031a8 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	83fb      	strh	r3, [r7, #30]
 800316c:	e018      	b.n	80031a0 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	695c      	ldr	r4, [r3, #20]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	7b1b      	ldrb	r3, [r3, #12]
 8003176:	b298      	uxth	r0, r3
 8003178:	7afb      	ldrb	r3, [r7, #11]
 800317a:	b29a      	uxth	r2, r3
 800317c:	8bfb      	ldrh	r3, [r7, #30]
 800317e:	4413      	add	r3, r2
 8003180:	b299      	uxth	r1, r3
 8003182:	8bfb      	ldrh	r3, [r7, #30]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	441a      	add	r2, r3
 8003188:	2301      	movs	r3, #1
 800318a:	47a0      	blx	r4
 800318c:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8003194:	f04f 33ff 	mov.w	r3, #4294967295
 8003198:	e007      	b.n	80031aa <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800319a:	8bfb      	ldrh	r3, [r7, #30]
 800319c:	3301      	adds	r3, #1
 800319e:	83fb      	strh	r3, [r7, #30]
 80031a0:	8bfa      	ldrh	r2, [r7, #30]
 80031a2:	893b      	ldrh	r3, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3e2      	bcc.n	800316e <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 80031a8:	69bb      	ldr	r3, [r7, #24]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}

080031b2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80031b2:	b590      	push	{r4, r7, lr}
 80031b4:	b089      	sub	sp, #36	; 0x24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	461a      	mov	r2, r3
 80031be:	460b      	mov	r3, r1
 80031c0:	72fb      	strb	r3, [r7, #11]
 80031c2:	4613      	mov	r3, r2
 80031c4:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11f      	bne.n	8003216 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	83fb      	strh	r3, [r7, #30]
 80031da:	e018      	b.n	800320e <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	691c      	ldr	r4, [r3, #16]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	7b1b      	ldrb	r3, [r3, #12]
 80031e4:	b298      	uxth	r0, r3
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	8bfb      	ldrh	r3, [r7, #30]
 80031ec:	4413      	add	r3, r2
 80031ee:	b299      	uxth	r1, r3
 80031f0:	8bfb      	ldrh	r3, [r7, #30]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	441a      	add	r2, r3
 80031f6:	2301      	movs	r3, #1
 80031f8:	47a0      	blx	r4
 80031fa:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e007      	b.n	8003218 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8003208:	8bfb      	ldrh	r3, [r7, #30]
 800320a:	3301      	adds	r3, #1
 800320c:	83fb      	strh	r3, [r7, #30]
 800320e:	8bfa      	ldrh	r2, [r7, #30]
 8003210:	893b      	ldrh	r3, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d3e2      	bcc.n	80031dc <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8003216:	69bb      	ldr	r3, [r7, #24]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3724      	adds	r7, #36	; 0x24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	72fb      	strb	r3, [r7, #11]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685c      	ldr	r4, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68d8      	ldr	r0, [r3, #12]
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	7af9      	ldrb	r1, [r7, #11]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	47a0      	blx	r4
 8003244:	6178      	str	r0, [r7, #20]

  return ret;
 8003246:	697b      	ldr	r3, [r7, #20]
}
 8003248:	4618      	mov	r0, r3
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}

08003250 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	460b      	mov	r3, r1
 800325e:	72fb      	strb	r3, [r7, #11]
 8003260:	4613      	mov	r3, r2
 8003262:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681c      	ldr	r4, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68d8      	ldr	r0, [r3, #12]
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	7af9      	ldrb	r1, [r7, #11]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	47a0      	blx	r4
 8003274:	6178      	str	r0, [r7, #20]

  return ret;
 8003276:	697b      	ldr	r3, [r7, #20]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}

08003280 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 800328a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003296:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80032b0 <stts751_from_lsb_to_celsius+0x30>
 800329a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800329e:	eef0 7a66 	vmov.f32	s15, s13
}
 80032a2:	eeb0 0a67 	vmov.f32	s0, s15
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	43800000 	.word	0x43800000

080032b4 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80032c0:	23aa      	movs	r3, #170	; 0xaa
 80032c2:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80032c4:	f107 020c 	add.w	r2, r7, #12
 80032c8:	2301      	movs	r3, #1
 80032ca:	2104      	movs	r1, #4
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ffa7 	bl	8003220 <stts751_read_reg>
 80032d2:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	7b3b      	ldrb	r3, [r7, #12]
 80032e4:	f362 0303 	bfi	r3, r2, #0, #4
 80032e8:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80032ea:	f107 020c 	add.w	r2, r7, #12
 80032ee:	2301      	movs	r3, #1
 80032f0:	2104      	movs	r1, #4
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffac 	bl	8003250 <stts751_write_reg>
 80032f8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8003300:	f107 0210 	add.w	r2, r7, #16
 8003304:	2301      	movs	r3, #1
 8003306:	2103      	movs	r1, #3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff89 	bl	8003220 <stts751_read_reg>
 800330e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d111      	bne.n	800333a <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	09db      	lsrs	r3, r3, #7
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	b2da      	uxtb	r2, r3
 8003322:	7c3b      	ldrb	r3, [r7, #16]
 8003324:	f362 1386 	bfi	r3, r2, #6, #1
 8003328:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800332a:	f107 0210 	add.w	r2, r7, #16
 800332e:	2301      	movs	r3, #1
 8003330:	2103      	movs	r1, #3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff8c 	bl	8003250 <stts751_write_reg>
 8003338:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <stts751_temp_data_rate_set+0xa2>
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	2b90      	cmp	r3, #144	; 0x90
 8003344:	d107      	bne.n	8003356 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8003346:	f107 020b 	add.w	r2, r7, #11
 800334a:	2301      	movs	r3, #1
 800334c:	210f      	movs	r1, #15
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff7e 	bl	8003250 <stts751_write_reg>
 8003354:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003356:	697b      	ldr	r3, [r7, #20]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800336a:	f107 0210 	add.w	r2, r7, #16
 800336e:	2301      	movs	r3, #1
 8003370:	2104      	movs	r1, #4
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ff54 	bl	8003220 <stts751_read_reg>
 8003378:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8003380:	f107 020c 	add.w	r2, r7, #12
 8003384:	2301      	movs	r3, #1
 8003386:	2103      	movs	r1, #3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff49 	bl	8003220 <stts751_read_reg>
 800338e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8003390:	7b3b      	ldrb	r3, [r7, #12]
 8003392:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	01db      	lsls	r3, r3, #7
 800339a:	7c3a      	ldrb	r2, [r7, #16]
 800339c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	4413      	add	r3, r2
 80033a4:	2b90      	cmp	r3, #144	; 0x90
 80033a6:	d025      	beq.n	80033f4 <stts751_temp_data_rate_get+0x94>
 80033a8:	2b90      	cmp	r3, #144	; 0x90
 80033aa:	dc4f      	bgt.n	800344c <stts751_temp_data_rate_get+0xec>
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	dc1b      	bgt.n	80033e8 <stts751_temp_data_rate_get+0x88>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	db4b      	blt.n	800344c <stts751_temp_data_rate_get+0xec>
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d849      	bhi.n	800344c <stts751_temp_data_rate_get+0xec>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <stts751_temp_data_rate_get+0x60>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033fd 	.word	0x080033fd
 80033c4:	08003405 	.word	0x08003405
 80033c8:	0800340d 	.word	0x0800340d
 80033cc:	08003415 	.word	0x08003415
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003425 	.word	0x08003425
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	08003435 	.word	0x08003435
 80033e0:	0800343d 	.word	0x0800343d
 80033e4:	08003445 	.word	0x08003445
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d12f      	bne.n	800344c <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	701a      	strb	r2, [r3, #0]
      break;
 80033f2:	e02f      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2290      	movs	r2, #144	; 0x90
 80033f8:	701a      	strb	r2, [r3, #0]
      break;
 80033fa:	e02b      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
      break;
 8003402:	e027      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
      break;
 800340a:	e023      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]
      break;
 8003412:	e01f      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2203      	movs	r2, #3
 8003418:	701a      	strb	r2, [r3, #0]
      break;
 800341a:	e01b      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2204      	movs	r2, #4
 8003420:	701a      	strb	r2, [r3, #0]
      break;
 8003422:	e017      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2205      	movs	r2, #5
 8003428:	701a      	strb	r2, [r3, #0]
      break;
 800342a:	e013      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2206      	movs	r2, #6
 8003430:	701a      	strb	r2, [r3, #0]
      break;
 8003432:	e00f      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2207      	movs	r2, #7
 8003438:	701a      	strb	r2, [r3, #0]
      break;
 800343a:	e00b      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2208      	movs	r2, #8
 8003440:	701a      	strb	r2, [r3, #0]
      break;
 8003442:	e007      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2209      	movs	r2, #9
 8003448:	701a      	strb	r2, [r3, #0]
      break;
 800344a:	e003      	b.n	8003454 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	701a      	strb	r2, [r3, #0]
      break;
 8003452:	bf00      	nop
  }

  return ret;
 8003454:	697b      	ldr	r3, [r7, #20]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop

08003460 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800346c:	f107 0208 	add.w	r2, r7, #8
 8003470:	2301      	movs	r3, #1
 8003472:	2103      	movs	r1, #3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fed3 	bl	8003220 <stts751_read_reg>
 800347a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	7a3b      	ldrb	r3, [r7, #8]
 800348c:	f362 0383 	bfi	r3, r2, #2, #2
 8003490:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8003492:	f107 0208 	add.w	r2, r7, #8
 8003496:	2301      	movs	r3, #1
 8003498:	2103      	movs	r1, #3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fed8 	bl	8003250 <stts751_write_reg>
 80034a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80034b6:	f107 0208 	add.w	r2, r7, #8
 80034ba:	2301      	movs	r3, #1
 80034bc:	2103      	movs	r1, #3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff feae 	bl	8003220 <stts751_read_reg>
 80034c4:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 80034c6:	7a3b      	ldrb	r3, [r7, #8]
 80034c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d81a      	bhi.n	8003508 <stts751_resolution_get+0x5c>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <stts751_resolution_get+0x2c>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034f1 	.word	0x080034f1
 80034dc:	080034f9 	.word	0x080034f9
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	08003501 	.word	0x08003501
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
      break;
 80034ee:	e00f      	b.n	8003510 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
      break;
 80034f6:	e00b      	b.n	8003510 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
      break;
 80034fe:	e007      	b.n	8003510 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2203      	movs	r2, #3
 8003504:	701a      	strb	r2, [r3, #0]
      break;
 8003506:	e003      	b.n	8003510 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2202      	movs	r2, #2
 800350c:	701a      	strb	r2, [r3, #0]
      break;
 800350e:	bf00      	nop
  }

  return ret;
 8003510:	68fb      	ldr	r3, [r7, #12]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop

0800351c <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	2301      	movs	r3, #1
 800352e:	2100      	movs	r1, #0
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fe75 	bl	8003220 <stts751_read_reg>
 8003536:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800353e:	f107 0208 	add.w	r2, r7, #8
 8003542:	2301      	movs	r3, #1
 8003544:	2102      	movs	r1, #2
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe6a 	bl	8003220 <stts751_read_reg>
 800354c:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800354e:	7a7b      	ldrb	r3, [r7, #9]
 8003550:	b21a      	sxth	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800355c:	b29b      	uxth	r3, r3
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	b29a      	uxth	r2, r3
 8003562:	7a3b      	ldrb	r3, [r7, #8]
 8003564:	b29b      	uxth	r3, r3
 8003566:	4413      	add	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	b21a      	sxth	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8003570:	68fb      	ldr	r3, [r7, #12]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8003586:	f107 0208 	add.w	r2, r7, #8
 800358a:	2301      	movs	r3, #1
 800358c:	2103      	movs	r1, #3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fe46 	bl	8003220 <stts751_read_reg>
 8003594:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10f      	bne.n	80035bc <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	7a3b      	ldrb	r3, [r7, #8]
 80035a6:	f362 13c7 	bfi	r3, r2, #7, #1
 80035aa:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80035ac:	f107 0208 	add.w	r2, r7, #8
 80035b0:	2301      	movs	r3, #1
 80035b2:	2103      	movs	r1, #3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff fe4b 	bl	8003250 <stts751_write_reg>
 80035ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	2301      	movs	r3, #1
 80035d4:	21fd      	movs	r1, #253	; 0xfd
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff fe22 	bl	8003220 <stts751_read_reg>
 80035dc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	2301      	movs	r3, #1
 80035ea:	21fe      	movs	r1, #254	; 0xfe
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fe17 	bl	8003220 <stts751_read_reg>
 80035f2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	2301      	movs	r3, #1
 8003600:	21ff      	movs	r1, #255	; 0xff
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fe0c 	bl	8003220 <stts751_read_reg>
 8003608:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 800360a:	68fb      	ldr	r3, [r7, #12]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08c      	sub	sp, #48	; 0x30
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800361e:	2300      	movs	r3, #0
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8003622:	2301      	movs	r3, #1
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d07c      	beq.n	800372a <IKS01A3_ENV_SENSOR_Init+0x116>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	f200 80b2 	bhi.w	800379c <IKS01A3_ENV_SENSOR_Init+0x188>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <IKS01A3_ENV_SENSOR_Init+0x32>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d039      	beq.n	80036b8 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8003644:	e0aa      	b.n	800379c <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	f000 f974 	bl	8003934 <HTS221_0_Probe>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	e0df      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003658:	4a71      	ldr	r2, [pc, #452]	; (8003820 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4970      	ldr	r1, [pc, #448]	; (8003824 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800366a:	f107 0108 	add.w	r1, r7, #8
 800366e:	4610      	mov	r0, r2
 8003670:	4798      	blx	r3
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003678:	f06f 0306 	mvn.w	r3, #6
 800367c:	e0cc      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800367e:	7a3b      	ldrb	r3, [r7, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d103      	bne.n	800368c <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800368c:	7abb      	ldrb	r3, [r7, #10]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d103      	bne.n	800369a <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800369a:	7a7b      	ldrb	r3, [r7, #9]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d103      	bne.n	80036a8 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80036a8:	7afb      	ldrb	r3, [r7, #11]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d17a      	bne.n	80037a4 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	623b      	str	r3, [r7, #32]
      }
      break;
 80036b6:	e075      	b.n	80037a4 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f000 fa05 	bl	8003ac8 <LPS22HH_0_Probe>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
 80036c8:	e0a6      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80036ca:	4a55      	ldr	r2, [pc, #340]	; (8003820 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4953      	ldr	r1, [pc, #332]	; (8003824 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80036dc:	f107 0108 	add.w	r1, r7, #8
 80036e0:	4610      	mov	r0, r2
 80036e2:	4798      	blx	r3
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80036ea:	f06f 0306 	mvn.w	r3, #6
 80036ee:	e093      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80036f0:	7a3b      	ldrb	r3, [r7, #8]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d103      	bne.n	80036fe <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80036fe:	7abb      	ldrb	r3, [r7, #10]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d103      	bne.n	800370c <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	f043 0304 	orr.w	r3, r3, #4
 800370a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800370c:	7a7b      	ldrb	r3, [r7, #9]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d103      	bne.n	800371a <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800371a:	7afb      	ldrb	r3, [r7, #11]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d143      	bne.n	80037a8 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	623b      	str	r3, [r7, #32]
      }
      break;
 8003728:	e03e      	b.n	80037a8 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f000 fa98 	bl	8003c60 <STTS751_0_Probe>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	e06d      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800373c:	4a38      	ldr	r2, [pc, #224]	; (8003820 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4937      	ldr	r1, [pc, #220]	; (8003824 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800374e:	f107 0108 	add.w	r1, r7, #8
 8003752:	4610      	mov	r0, r2
 8003754:	4798      	blx	r3
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800375c:	f06f 0306 	mvn.w	r3, #6
 8003760:	e05a      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8003762:	7a3b      	ldrb	r3, [r7, #8]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d103      	bne.n	8003770 <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8003770:	7abb      	ldrb	r3, [r7, #10]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d103      	bne.n	800377e <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800377e:	7a7b      	ldrb	r3, [r7, #9]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d103      	bne.n	800378c <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f043 0302 	orr.w	r3, r3, #2
 800378a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800378c:	7afb      	ldrb	r3, [r7, #11]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10c      	bne.n	80037ac <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	623b      	str	r3, [r7, #32]
      }
      break;
 800379a:	e007      	b.n	80037ac <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800379c:	f06f 0301 	mvn.w	r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80037a2:	e004      	b.n	80037ae <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80037a4:	bf00      	nop
 80037a6:	e002      	b.n	80037ae <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80037a8:	bf00      	nop
 80037aa:	e000      	b.n	80037ae <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80037ac:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	e02f      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e028      	b.n	8003810 <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	4013      	ands	r3, r2
 80037c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d11c      	bne.n	8003804 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	4013      	ands	r3, r2
 80037d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d116      	bne.n	8003804 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <IKS01A3_ENV_SENSOR_Init+0x214>)
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	4913      	ldr	r1, [pc, #76]	; (800382c <IKS01A3_ENV_SENSOR_Init+0x218>)
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	490d      	ldr	r1, [pc, #52]	; (8003824 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80037f4:	4610      	mov	r0, r2
 80037f6:	4798      	blx	r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80037fe:	f06f 0304 	mvn.w	r3, #4
 8003802:	e009      	b.n	8003818 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	3301      	adds	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	2b03      	cmp	r3, #3
 8003814:	d9d3      	bls.n	80037be <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003818:	4618      	mov	r0, r3
 800381a:	3730      	adds	r7, #48	; 0x30
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000180 	.word	0x20000180
 8003824:	2000034c 	.word	0x2000034c
 8003828:	20000098 	.word	0x20000098
 800382c:	20000150 	.word	0x20000150

08003830 <IKS01A3_ENV_SENSOR_Enable>:
  * @param  Instance environmental sensor instance to be used
  * @param  Function Environmental sensor function
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d903      	bls.n	8003848 <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003840:	f06f 0301 	mvn.w	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e026      	b.n	8003896 <IKS01A3_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <IKS01A3_ENV_SENSOR_Enable+0x70>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4013      	ands	r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d11a      	bne.n	8003890 <IKS01A3_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	4911      	ldr	r1, [pc, #68]	; (80038a8 <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	4413      	add	r3, r2
 800386a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003878:	4610      	mov	r0, r2
 800387a:	4798      	blx	r3
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <IKS01A3_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003882:	f06f 0304 	mvn.w	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e005      	b.n	8003896 <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e002      	b.n	8003896 <IKS01A3_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003890:	f06f 0301 	mvn.w	r3, #1
 8003894:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2000018c 	.word	0x2000018c
 80038a4:	20000098 	.word	0x20000098
 80038a8:	20000150 	.word	0x20000150
 80038ac:	2000034c 	.word	0x2000034c

080038b0 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d903      	bls.n	80038ca <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80038c2:	f06f 0301 	mvn.w	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e027      	b.n	800391a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d11b      	bne.n	8003914 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	4911      	ldr	r1, [pc, #68]	; (800392c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	0092      	lsls	r2, r2, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	490f      	ldr	r1, [pc, #60]	; (8003930 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4610      	mov	r0, r2
 80038fe:	4798      	blx	r3
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003906:	f06f 0304 	mvn.w	r3, #4
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e005      	b.n	800391a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e002      	b.n	800391a <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8003914:	f06f 0301 	mvn.w	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	2000018c 	.word	0x2000018c
 8003928:	20000098 	.word	0x20000098
 800392c:	20000150 	.word	0x20000150
 8003930:	2000034c 	.word	0x2000034c

08003934 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b092      	sub	sp, #72	; 0x48
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800393c:	2300      	movs	r3, #0
 800393e:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8003940:	2300      	movs	r3, #0
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8003944:	23bf      	movs	r3, #191	; 0xbf
 8003946:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800394a:	4b51      	ldr	r3, [pc, #324]	; (8003a90 <HTS221_0_Probe+0x15c>)
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800394e:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <HTS221_0_Probe+0x160>)
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003952:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HTS221_0_Probe+0x164>)
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003956:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <HTS221_0_Probe+0x168>)
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800395a:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HTS221_0_Probe+0x16c>)
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800395e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003962:	4619      	mov	r1, r3
 8003964:	484f      	ldr	r0, [pc, #316]	; (8003aa4 <HTS221_0_Probe+0x170>)
 8003966:	f7fd fccb 	bl	8001300 <HTS221_RegisterBusIO>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003970:	f06f 0306 	mvn.w	r3, #6
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	e085      	b.n	8003a84 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8003978:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800397c:	4619      	mov	r1, r3
 800397e:	4849      	ldr	r0, [pc, #292]	; (8003aa4 <HTS221_0_Probe+0x170>)
 8003980:	f7fd fd47 	bl	8001412 <HTS221_ReadID>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800398a:	f06f 0306 	mvn.w	r3, #6
 800398e:	647b      	str	r3, [r7, #68]	; 0x44
 8003990:	e078      	b.n	8003a84 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8003992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003996:	2bbc      	cmp	r3, #188	; 0xbc
 8003998:	d003      	beq.n	80039a2 <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800399a:	f06f 0306 	mvn.w	r3, #6
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	e070      	b.n	8003a84 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	4619      	mov	r1, r3
 80039a8:	483e      	ldr	r0, [pc, #248]	; (8003aa4 <HTS221_0_Probe+0x170>)
 80039aa:	f7fd fd49 	bl	8001440 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80039ae:	7a3b      	ldrb	r3, [r7, #8]
 80039b0:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 80039b2:	7a7b      	ldrb	r3, [r7, #9]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 80039b8:	7abb      	ldrb	r3, [r7, #10]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80039c4:	4a38      	ldr	r2, [pc, #224]	; (8003aa8 <HTS221_0_Probe+0x174>)
 80039c6:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80039c8:	4b38      	ldr	r3, [pc, #224]	; (8003aac <HTS221_0_Probe+0x178>)
 80039ca:	4a36      	ldr	r2, [pc, #216]	; (8003aa4 <HTS221_0_Probe+0x170>)
 80039cc:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80039ce:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HTS221_0_Probe+0x17c>)
 80039d0:	4a38      	ldr	r2, [pc, #224]	; (8003ab4 <HTS221_0_Probe+0x180>)
 80039d2:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11d      	bne.n	8003a16 <HTS221_0_Probe+0xe2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HTS221_0_Probe+0xe2>
 80039e4:	7a3b      	ldrb	r3, [r7, #8]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d115      	bne.n	8003a16 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80039ea:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HTS221_0_Probe+0x184>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a33      	ldr	r2, [pc, #204]	; (8003abc <HTS221_0_Probe+0x188>)
 80039f0:	4933      	ldr	r1, [pc, #204]	; (8003ac0 <HTS221_0_Probe+0x18c>)
 80039f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HTS221_0_Probe+0x17c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <HTS221_0_Probe+0x178>)
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	4610      	mov	r0, r2
 8003a02:	4798      	blx	r3
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a0a:	f06f 0304 	mvn.w	r3, #4
 8003a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a10:	e001      	b.n	8003a16 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8003a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11d      	bne.n	8003a58 <HTS221_0_Probe+0x124>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <HTS221_0_Probe+0x124>
 8003a26:	7abb      	ldrb	r3, [r7, #10]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d115      	bne.n	8003a58 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <HTS221_0_Probe+0x184>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <HTS221_0_Probe+0x188>)
 8003a32:	4924      	ldr	r1, [pc, #144]	; (8003ac4 <HTS221_0_Probe+0x190>)
 8003a34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HTS221_0_Probe+0x17c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HTS221_0_Probe+0x178>)
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	4610      	mov	r0, r2
 8003a44:	4798      	blx	r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a4c:	f06f 0304 	mvn.w	r3, #4
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
 8003a52:	e001      	b.n	8003a58 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8003a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d107      	bne.n	8003a6e <HTS221_0_Probe+0x13a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a68:	f06f 0304 	mvn.w	r3, #4
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8003a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HTS221_0_Probe+0x150>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a7e:	f06f 0304 	mvn.w	r3, #4
 8003a82:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3748      	adds	r7, #72	; 0x48
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	08000f5d 	.word	0x08000f5d
 8003a94:	08000fc1 	.word	0x08000fc1
 8003a98:	08001075 	.word	0x08001075
 8003a9c:	08001011 	.word	0x08001011
 8003aa0:	080010d9 	.word	0x080010d9
 8003aa4:	20000198 	.word	0x20000198
 8003aa8:	2000018c 	.word	0x2000018c
 8003aac:	2000034c 	.word	0x2000034c
 8003ab0:	20000180 	.word	0x20000180
 8003ab4:	20000004 	.word	0x20000004
 8003ab8:	20000098 	.word	0x20000098
 8003abc:	20000150 	.word	0x20000150
 8003ac0:	20000028 	.word	0x20000028
 8003ac4:	20000014 	.word	0x20000014

08003ac8 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b092      	sub	sp, #72	; 0x48
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8003ad8:	23bb      	movs	r3, #187	; 0xbb
 8003ada:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8003ade:	4b52      	ldr	r3, [pc, #328]	; (8003c28 <LPS22HH_0_Probe+0x160>)
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8003ae2:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <LPS22HH_0_Probe+0x164>)
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003ae6:	4b52      	ldr	r3, [pc, #328]	; (8003c30 <LPS22HH_0_Probe+0x168>)
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003aea:	4b52      	ldr	r3, [pc, #328]	; (8003c34 <LPS22HH_0_Probe+0x16c>)
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8003aee:	4b52      	ldr	r3, [pc, #328]	; (8003c38 <LPS22HH_0_Probe+0x170>)
 8003af0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8003af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af6:	4619      	mov	r1, r3
 8003af8:	4850      	ldr	r0, [pc, #320]	; (8003c3c <LPS22HH_0_Probe+0x174>)
 8003afa:	f7fe fa2b 	bl	8001f54 <LPS22HH_RegisterBusIO>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b04:	f06f 0306 	mvn.w	r3, #6
 8003b08:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0a:	e087      	b.n	8003c1c <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8003b0c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8003b10:	4619      	mov	r1, r3
 8003b12:	484a      	ldr	r0, [pc, #296]	; (8003c3c <LPS22HH_0_Probe+0x174>)
 8003b14:	f7fe fac7 	bl	80020a6 <LPS22HH_ReadID>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b1e:	f06f 0306 	mvn.w	r3, #6
 8003b22:	647b      	str	r3, [r7, #68]	; 0x44
 8003b24:	e07a      	b.n	8003c1c <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8003b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b2a:	2bb3      	cmp	r3, #179	; 0xb3
 8003b2c:	d003      	beq.n	8003b36 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b2e:	f06f 0306 	mvn.w	r3, #6
 8003b32:	647b      	str	r3, [r7, #68]	; 0x44
 8003b34:	e072      	b.n	8003c1c <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	483f      	ldr	r0, [pc, #252]	; (8003c3c <LPS22HH_0_Probe+0x174>)
 8003b3e:	f7fe fac9 	bl	80020d4 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8003b42:	7a3b      	ldrb	r3, [r7, #8]
 8003b44:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8003b46:	7a7b      	ldrb	r3, [r7, #9]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8003b4c:	7abb      	ldrb	r3, [r7, #10]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8003b58:	4a39      	ldr	r2, [pc, #228]	; (8003c40 <LPS22HH_0_Probe+0x178>)
 8003b5a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <LPS22HH_0_Probe+0x17c>)
 8003b5e:	4a37      	ldr	r2, [pc, #220]	; (8003c3c <LPS22HH_0_Probe+0x174>)
 8003b60:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8003b62:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <LPS22HH_0_Probe+0x180>)
 8003b64:	4a39      	ldr	r2, [pc, #228]	; (8003c4c <LPS22HH_0_Probe+0x184>)
 8003b66:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11e      	bne.n	8003bac <LPS22HH_0_Probe+0xe4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d019      	beq.n	8003bac <LPS22HH_0_Probe+0xe4>
 8003b78:	7a3b      	ldrb	r3, [r7, #8]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d116      	bne.n	8003bac <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8003b7e:	4b34      	ldr	r3, [pc, #208]	; (8003c50 <LPS22HH_0_Probe+0x188>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <LPS22HH_0_Probe+0x18c>)
 8003b84:	3304      	adds	r3, #4
 8003b86:	4934      	ldr	r1, [pc, #208]	; (8003c58 <LPS22HH_0_Probe+0x190>)
 8003b88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <LPS22HH_0_Probe+0x180>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <LPS22HH_0_Probe+0x17c>)
 8003b94:	6852      	ldr	r2, [r2, #4]
 8003b96:	4610      	mov	r0, r2
 8003b98:	4798      	blx	r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ba0:	f06f 0304 	mvn.w	r3, #4
 8003ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba6:	e001      	b.n	8003bac <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8003bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11e      	bne.n	8003bf0 <LPS22HH_0_Probe+0x128>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d019      	beq.n	8003bf0 <LPS22HH_0_Probe+0x128>
 8003bbc:	7a7b      	ldrb	r3, [r7, #9]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d116      	bne.n	8003bf0 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8003bc2:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <LPS22HH_0_Probe+0x188>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <LPS22HH_0_Probe+0x18c>)
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4924      	ldr	r1, [pc, #144]	; (8003c5c <LPS22HH_0_Probe+0x194>)
 8003bcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <LPS22HH_0_Probe+0x180>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <LPS22HH_0_Probe+0x17c>)
 8003bd8:	6852      	ldr	r2, [r2, #4]
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4798      	blx	r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003be4:	f06f 0304 	mvn.w	r3, #4
 8003be8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bea:	e001      	b.n	8003bf0 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d107      	bne.n	8003c06 <LPS22HH_0_Probe+0x13e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c00:	f06f 0304 	mvn.w	r3, #4
 8003c04:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8003c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <LPS22HH_0_Probe+0x154>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c16:	f06f 0304 	mvn.w	r3, #4
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3748      	adds	r7, #72	; 0x48
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08000f5d 	.word	0x08000f5d
 8003c2c:	08000fc1 	.word	0x08000fc1
 8003c30:	08001075 	.word	0x08001075
 8003c34:	08001011 	.word	0x08001011
 8003c38:	080010d9 	.word	0x080010d9
 8003c3c:	200001cc 	.word	0x200001cc
 8003c40:	2000018c 	.word	0x2000018c
 8003c44:	2000034c 	.word	0x2000034c
 8003c48:	20000180 	.word	0x20000180
 8003c4c:	2000003c 	.word	0x2000003c
 8003c50:	20000098 	.word	0x20000098
 8003c54:	20000150 	.word	0x20000150
 8003c58:	20000060 	.word	0x20000060
 8003c5c:	2000004c 	.word	0x2000004c

08003c60 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b092      	sub	sp, #72	; 0x48
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8003c70:	2395      	movs	r3, #149	; 0x95
 8003c72:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8003c76:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <STTS751_0_Probe+0x130>)
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8003c7a:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <STTS751_0_Probe+0x134>)
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8003c7e:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <STTS751_0_Probe+0x138>)
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8003c82:	4b46      	ldr	r3, [pc, #280]	; (8003d9c <STTS751_0_Probe+0x13c>)
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8003c86:	4b46      	ldr	r3, [pc, #280]	; (8003da0 <STTS751_0_Probe+0x140>)
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8003c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4844      	ldr	r0, [pc, #272]	; (8003da4 <STTS751_0_Probe+0x144>)
 8003c92:	f7fe ffc5 	bl	8002c20 <STTS751_RegisterBusIO>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003c9c:	f06f 0306 	mvn.w	r3, #6
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca2:	e070      	b.n	8003d86 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8003ca4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8003ca8:	4619      	mov	r1, r3
 8003caa:	483e      	ldr	r0, [pc, #248]	; (8003da4 <STTS751_0_Probe+0x144>)
 8003cac:	f7ff f857 	bl	8002d5e <STTS751_ReadID>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003cb6:	f06f 0306 	mvn.w	r3, #6
 8003cba:	647b      	str	r3, [r7, #68]	; 0x44
 8003cbc:	e063      	b.n	8003d86 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 8003cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc2:	2b53      	cmp	r3, #83	; 0x53
 8003cc4:	d003      	beq.n	8003cce <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003cc6:	f06f 0306 	mvn.w	r3, #6
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	e05b      	b.n	8003d86 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4833      	ldr	r0, [pc, #204]	; (8003da4 <STTS751_0_Probe+0x144>)
 8003cd6:	f7ff f85d 	bl	8002d94 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8003cda:	7a3b      	ldrb	r3, [r7, #8]
 8003cdc:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8003cde:	7a7b      	ldrb	r3, [r7, #9]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8003ce4:	7abb      	ldrb	r3, [r7, #10]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <STTS751_0_Probe+0x148>)
 8003cf2:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	; (8003dac <STTS751_0_Probe+0x14c>)
 8003cf6:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <STTS751_0_Probe+0x144>)
 8003cf8:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <STTS751_0_Probe+0x150>)
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <STTS751_0_Probe+0x154>)
 8003cfe:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11e      	bne.n	8003d44 <STTS751_0_Probe+0xe4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d019      	beq.n	8003d44 <STTS751_0_Probe+0xe4>
 8003d10:	7a3b      	ldrb	r3, [r7, #8]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d116      	bne.n	8003d44 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <STTS751_0_Probe+0x158>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <STTS751_0_Probe+0x15c>)
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	4928      	ldr	r1, [pc, #160]	; (8003dc0 <STTS751_0_Probe+0x160>)
 8003d20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <STTS751_0_Probe+0x150>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a20      	ldr	r2, [pc, #128]	; (8003dac <STTS751_0_Probe+0x14c>)
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4798      	blx	r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d38:	f06f 0304 	mvn.w	r3, #4
 8003d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3e:	e001      	b.n	8003d44 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8003d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d107      	bne.n	8003d5a <STTS751_0_Probe+0xfa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d54:	f06f 0304 	mvn.w	r3, #4
 8003d58:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8003d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d107      	bne.n	8003d70 <STTS751_0_Probe+0x110>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d6a:	f06f 0304 	mvn.w	r3, #4
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8003d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d107      	bne.n	8003d86 <STTS751_0_Probe+0x126>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d80:	f06f 0304 	mvn.w	r3, #4
 8003d84:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8003d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3748      	adds	r7, #72	; 0x48
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	08000f5d 	.word	0x08000f5d
 8003d94:	08000fc1 	.word	0x08000fc1
 8003d98:	08001075 	.word	0x08001075
 8003d9c:	08001011 	.word	0x08001011
 8003da0:	080010d9 	.word	0x080010d9
 8003da4:	20000200 	.word	0x20000200
 8003da8:	2000018c 	.word	0x2000018c
 8003dac:	2000034c 	.word	0x2000034c
 8003db0:	20000180 	.word	0x20000180
 8003db4:	20000074 	.word	0x20000074
 8003db8:	20000098 	.word	0x20000098
 8003dbc:	20000150 	.word	0x20000150
 8003dc0:	20000084 	.word	0x20000084

08003dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_Init+0x40>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <HAL_Init+0x40>)
 8003dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_Init+0x40>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <HAL_Init+0x40>)
 8003dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_Init+0x40>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <HAL_Init+0x40>)
 8003de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dec:	2003      	movs	r0, #3
 8003dee:	f000 f92b 	bl	8004048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003df2:	2000      	movs	r0, #0
 8003df4:	f000 f808 	bl	8003e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003df8:	f7fc ffd2 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023c00 	.word	0x40023c00

08003e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e10:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <HAL_InitTick+0x54>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_InitTick+0x58>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f943 	bl	80040b2 <HAL_SYSTICK_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e00e      	b.n	8003e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d80a      	bhi.n	8003e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	f000 f90b 	bl	800405e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e48:	4a06      	ldr	r2, [pc, #24]	; (8003e64 <HAL_InitTick+0x5c>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	200000c0 	.word	0x200000c0
 8003e64:	200000bc 	.word	0x200000bc

08003e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_IncTick+0x20>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_IncTick+0x24>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <HAL_IncTick+0x24>)
 8003e7a:	6013      	str	r3, [r2, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	200000c0 	.word	0x200000c0
 8003e8c:	20000358 	.word	0x20000358

08003e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return uwTick;
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_GetTick+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000358 	.word	0x20000358

08003ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <__NVIC_SetPriorityGrouping+0x44>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eda:	4a04      	ldr	r2, [pc, #16]	; (8003eec <__NVIC_SetPriorityGrouping+0x44>)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	60d3      	str	r3, [r2, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f003 0307 	and.w	r3, r3, #7
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	db0b      	blt.n	8003f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	f003 021f 	and.w	r2, r3, #31
 8003f24:	4907      	ldr	r1, [pc, #28]	; (8003f44 <__NVIC_EnableIRQ+0x38>)
 8003f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000e100 	.word	0xe000e100

08003f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	6039      	str	r1, [r7, #0]
 8003f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	db0a      	blt.n	8003f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	490c      	ldr	r1, [pc, #48]	; (8003f94 <__NVIC_SetPriority+0x4c>)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	0112      	lsls	r2, r2, #4
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f70:	e00a      	b.n	8003f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4908      	ldr	r1, [pc, #32]	; (8003f98 <__NVIC_SetPriority+0x50>)
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	3b04      	subs	r3, #4
 8003f80:	0112      	lsls	r2, r2, #4
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	440b      	add	r3, r1
 8003f86:	761a      	strb	r2, [r3, #24]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000e100 	.word	0xe000e100
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b089      	sub	sp, #36	; 0x24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f1c3 0307 	rsb	r3, r3, #7
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	bf28      	it	cs
 8003fba:	2304      	movcs	r3, #4
 8003fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d902      	bls.n	8003fcc <NVIC_EncodePriority+0x30>
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3b03      	subs	r3, #3
 8003fca:	e000      	b.n	8003fce <NVIC_EncodePriority+0x32>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	401a      	ands	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	43d9      	mvns	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff4:	4313      	orrs	r3, r2
         );
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004014:	d301      	bcc.n	800401a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004016:	2301      	movs	r3, #1
 8004018:	e00f      	b.n	800403a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <SysTick_Config+0x40>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004022:	210f      	movs	r1, #15
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	f7ff ff8e 	bl	8003f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <SysTick_Config+0x40>)
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <SysTick_Config+0x40>)
 8004034:	2207      	movs	r2, #7
 8004036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	e000e010 	.word	0xe000e010

08004048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff29 	bl	8003ea8 <__NVIC_SetPriorityGrouping>
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800405e:	b580      	push	{r7, lr}
 8004060:	b086      	sub	sp, #24
 8004062:	af00      	add	r7, sp, #0
 8004064:	4603      	mov	r3, r0
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004070:	f7ff ff3e 	bl	8003ef0 <__NVIC_GetPriorityGrouping>
 8004074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	6978      	ldr	r0, [r7, #20]
 800407c:	f7ff ff8e 	bl	8003f9c <NVIC_EncodePriority>
 8004080:	4602      	mov	r2, r0
 8004082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff5d 	bl	8003f48 <__NVIC_SetPriority>
}
 800408e:	bf00      	nop
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff31 	bl	8003f0c <__NVIC_EnableIRQ>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ffa2 	bl	8004004 <SysTick_Config>
 80040c0:	4603      	mov	r3, r0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040d8:	f7ff feda 	bl	8003e90 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d008      	beq.n	80040fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e052      	b.n	80041a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0216 	bic.w	r2, r2, #22
 800410a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800411a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <HAL_DMA_Abort+0x62>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0208 	bic.w	r2, r2, #8
 800413a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800414c:	e013      	b.n	8004176 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800414e:	f7ff fe9f 	bl	8003e90 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b05      	cmp	r3, #5
 800415a:	d90c      	bls.n	8004176 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2203      	movs	r2, #3
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e015      	b.n	80041a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e4      	bne.n	800414e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	223f      	movs	r2, #63	; 0x3f
 800418a:	409a      	lsls	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d004      	beq.n	80041c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2280      	movs	r2, #128	; 0x80
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e00c      	b.n	80041e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2205      	movs	r2, #5
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	e159      	b.n	80044c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800420c:	2201      	movs	r2, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	429a      	cmp	r2, r3
 8004226:	f040 8148 	bne.w	80044ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d005      	beq.n	8004242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800423e:	2b02      	cmp	r3, #2
 8004240:	d130      	bne.n	80042a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004278:	2201      	movs	r2, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 0201 	and.w	r2, r3, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d017      	beq.n	80042e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	2203      	movs	r2, #3
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d123      	bne.n	8004334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	08da      	lsrs	r2, r3, #3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3208      	adds	r2, #8
 80042f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	220f      	movs	r2, #15
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	08da      	lsrs	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3208      	adds	r2, #8
 800432e:	69b9      	ldr	r1, [r7, #24]
 8004330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 0203 	and.w	r2, r3, #3
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a2 	beq.w	80044ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	4b57      	ldr	r3, [pc, #348]	; (80044d8 <HAL_GPIO_Init+0x2e8>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	4a56      	ldr	r2, [pc, #344]	; (80044d8 <HAL_GPIO_Init+0x2e8>)
 8004380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004384:	6453      	str	r3, [r2, #68]	; 0x44
 8004386:	4b54      	ldr	r3, [pc, #336]	; (80044d8 <HAL_GPIO_Init+0x2e8>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004392:	4a52      	ldr	r2, [pc, #328]	; (80044dc <HAL_GPIO_Init+0x2ec>)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	3302      	adds	r3, #2
 800439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	220f      	movs	r2, #15
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a49      	ldr	r2, [pc, #292]	; (80044e0 <HAL_GPIO_Init+0x2f0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d019      	beq.n	80043f2 <HAL_GPIO_Init+0x202>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a48      	ldr	r2, [pc, #288]	; (80044e4 <HAL_GPIO_Init+0x2f4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_GPIO_Init+0x1fe>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a47      	ldr	r2, [pc, #284]	; (80044e8 <HAL_GPIO_Init+0x2f8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00d      	beq.n	80043ea <HAL_GPIO_Init+0x1fa>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a46      	ldr	r2, [pc, #280]	; (80044ec <HAL_GPIO_Init+0x2fc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <HAL_GPIO_Init+0x1f6>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a45      	ldr	r2, [pc, #276]	; (80044f0 <HAL_GPIO_Init+0x300>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <HAL_GPIO_Init+0x1f2>
 80043de:	2304      	movs	r3, #4
 80043e0:	e008      	b.n	80043f4 <HAL_GPIO_Init+0x204>
 80043e2:	2307      	movs	r3, #7
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_Init+0x204>
 80043e6:	2303      	movs	r3, #3
 80043e8:	e004      	b.n	80043f4 <HAL_GPIO_Init+0x204>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e002      	b.n	80043f4 <HAL_GPIO_Init+0x204>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_GPIO_Init+0x204>
 80043f2:	2300      	movs	r3, #0
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	f002 0203 	and.w	r2, r2, #3
 80043fa:	0092      	lsls	r2, r2, #2
 80043fc:	4093      	lsls	r3, r2
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004404:	4935      	ldr	r1, [pc, #212]	; (80044dc <HAL_GPIO_Init+0x2ec>)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	3302      	adds	r3, #2
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004412:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <HAL_GPIO_Init+0x304>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004436:	4a2f      	ldr	r2, [pc, #188]	; (80044f4 <HAL_GPIO_Init+0x304>)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800443c:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <HAL_GPIO_Init+0x304>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004460:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <HAL_GPIO_Init+0x304>)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_GPIO_Init+0x304>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448a:	4a1a      	ldr	r2, [pc, #104]	; (80044f4 <HAL_GPIO_Init+0x304>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <HAL_GPIO_Init+0x304>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b4:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <HAL_GPIO_Init+0x304>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	f67f aea2 	bls.w	800420c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40020000 	.word	0x40020000
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020c00 	.word	0x40020c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40013c00 	.word	0x40013c00

080044f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e0bb      	b.n	800468c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004514:	2201      	movs	r2, #1
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	f040 80ab 	bne.w	8004686 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004530:	4a5c      	ldr	r2, [pc, #368]	; (80046a4 <HAL_GPIO_DeInit+0x1ac>)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	3302      	adds	r3, #2
 8004538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	220f      	movs	r2, #15
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a54      	ldr	r2, [pc, #336]	; (80046a8 <HAL_GPIO_DeInit+0x1b0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d019      	beq.n	800458e <HAL_GPIO_DeInit+0x96>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a53      	ldr	r2, [pc, #332]	; (80046ac <HAL_GPIO_DeInit+0x1b4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_GPIO_DeInit+0x92>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a52      	ldr	r2, [pc, #328]	; (80046b0 <HAL_GPIO_DeInit+0x1b8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00d      	beq.n	8004586 <HAL_GPIO_DeInit+0x8e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a51      	ldr	r2, [pc, #324]	; (80046b4 <HAL_GPIO_DeInit+0x1bc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <HAL_GPIO_DeInit+0x8a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a50      	ldr	r2, [pc, #320]	; (80046b8 <HAL_GPIO_DeInit+0x1c0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_GPIO_DeInit+0x86>
 800457a:	2304      	movs	r3, #4
 800457c:	e008      	b.n	8004590 <HAL_GPIO_DeInit+0x98>
 800457e:	2307      	movs	r3, #7
 8004580:	e006      	b.n	8004590 <HAL_GPIO_DeInit+0x98>
 8004582:	2303      	movs	r3, #3
 8004584:	e004      	b.n	8004590 <HAL_GPIO_DeInit+0x98>
 8004586:	2302      	movs	r3, #2
 8004588:	e002      	b.n	8004590 <HAL_GPIO_DeInit+0x98>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_GPIO_DeInit+0x98>
 800458e:	2300      	movs	r3, #0
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	f002 0203 	and.w	r2, r2, #3
 8004596:	0092      	lsls	r2, r2, #2
 8004598:	4093      	lsls	r3, r2
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	d132      	bne.n	8004606 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80045a0:	4b46      	ldr	r3, [pc, #280]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	4944      	ldr	r1, [pc, #272]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80045ae:	4b43      	ldr	r3, [pc, #268]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	4941      	ldr	r1, [pc, #260]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	493d      	ldr	r1, [pc, #244]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80045ca:	4b3c      	ldr	r3, [pc, #240]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	493a      	ldr	r1, [pc, #232]	; (80046bc <HAL_GPIO_DeInit+0x1c4>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80045e8:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <HAL_GPIO_DeInit+0x1ac>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	3302      	adds	r3, #2
 80045f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	43da      	mvns	r2, r3
 80045f8:	482a      	ldr	r0, [pc, #168]	; (80046a4 <HAL_GPIO_DeInit+0x1ac>)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	400a      	ands	r2, r1
 8004600:	3302      	adds	r3, #2
 8004602:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2103      	movs	r1, #3
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	401a      	ands	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	08da      	lsrs	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3208      	adds	r2, #8
 8004624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	220f      	movs	r2, #15
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	08d2      	lsrs	r2, r2, #3
 800463c:	4019      	ands	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2103      	movs	r1, #3
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	2101      	movs	r1, #1
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	fa01 f303 	lsl.w	r3, r1, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	401a      	ands	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	2103      	movs	r1, #3
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	401a      	ands	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3301      	adds	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b0f      	cmp	r3, #15
 8004690:	f67f af40 	bls.w	8004514 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40013800 	.word	0x40013800
 80046a8:	40020000 	.word	0x40020000
 80046ac:	40020400 	.word	0x40020400
 80046b0:	40020800 	.word	0x40020800
 80046b4:	40020c00 	.word	0x40020c00
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40013c00 	.word	0x40013c00

080046c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
 80046cc:	4613      	mov	r3, r2
 80046ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046d0:	787b      	ldrb	r3, [r7, #1]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046dc:	e003      	b.n	80046e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	041a      	lsls	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	619a      	str	r2, [r3, #24]
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004704:	887a      	ldrh	r2, [r7, #2]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4013      	ands	r3, r2
 800470a:	041a      	lsls	r2, r3, #16
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	43d9      	mvns	r1, r3
 8004710:	887b      	ldrh	r3, [r7, #2]
 8004712:	400b      	ands	r3, r1
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	619a      	str	r2, [r3, #24]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e12b      	b.n	8004992 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f95d 	bl	8004a0e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800478a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800478c:	f001 fc36 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 8004790:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4a81      	ldr	r2, [pc, #516]	; (800499c <HAL_I2C_Init+0x274>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d807      	bhi.n	80047ac <HAL_I2C_Init+0x84>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a80      	ldr	r2, [pc, #512]	; (80049a0 <HAL_I2C_Init+0x278>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	bf94      	ite	ls
 80047a4:	2301      	movls	r3, #1
 80047a6:	2300      	movhi	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e006      	b.n	80047ba <HAL_I2C_Init+0x92>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a7d      	ldr	r2, [pc, #500]	; (80049a4 <HAL_I2C_Init+0x27c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bf94      	ite	ls
 80047b4:	2301      	movls	r3, #1
 80047b6:	2300      	movhi	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0e7      	b.n	8004992 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a78      	ldr	r2, [pc, #480]	; (80049a8 <HAL_I2C_Init+0x280>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	0c9b      	lsrs	r3, r3, #18
 80047cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a6a      	ldr	r2, [pc, #424]	; (800499c <HAL_I2C_Init+0x274>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d802      	bhi.n	80047fc <HAL_I2C_Init+0xd4>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	3301      	adds	r3, #1
 80047fa:	e009      	b.n	8004810 <HAL_I2C_Init+0xe8>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	4a69      	ldr	r2, [pc, #420]	; (80049ac <HAL_I2C_Init+0x284>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	3301      	adds	r3, #1
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	430b      	orrs	r3, r1
 8004816:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004822:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	495c      	ldr	r1, [pc, #368]	; (800499c <HAL_I2C_Init+0x274>)
 800482c:	428b      	cmp	r3, r1
 800482e:	d819      	bhi.n	8004864 <HAL_I2C_Init+0x13c>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e59      	subs	r1, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fbb1 f3f3 	udiv	r3, r1, r3
 800483e:	1c59      	adds	r1, r3, #1
 8004840:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004844:	400b      	ands	r3, r1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_I2C_Init+0x138>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1e59      	subs	r1, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fbb1 f3f3 	udiv	r3, r1, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485e:	e051      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 8004860:	2304      	movs	r3, #4
 8004862:	e04f      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d111      	bne.n	8004890 <HAL_I2C_Init+0x168>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1e58      	subs	r0, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	440b      	add	r3, r1
 800487a:	fbb0 f3f3 	udiv	r3, r0, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e012      	b.n	80048b6 <HAL_I2C_Init+0x18e>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e58      	subs	r0, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	0099      	lsls	r1, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_I2C_Init+0x196>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e022      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10e      	bne.n	80048e4 <HAL_I2C_Init+0x1bc>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1e58      	subs	r0, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	440b      	add	r3, r1
 80048d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d8:	3301      	adds	r3, #1
 80048da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	e00f      	b.n	8004904 <HAL_I2C_Init+0x1dc>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1e58      	subs	r0, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	0099      	lsls	r1, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fa:	3301      	adds	r3, #1
 80048fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	6809      	ldr	r1, [r1, #0]
 8004908:	4313      	orrs	r3, r2
 800490a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6911      	ldr	r1, [r2, #16]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68d2      	ldr	r2, [r2, #12]
 800493e:	4311      	orrs	r1, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	430b      	orrs	r3, r1
 8004946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	000186a0 	.word	0x000186a0
 80049a0:	001e847f 	.word	0x001e847f
 80049a4:	003d08ff 	.word	0x003d08ff
 80049a8:	431bde83 	.word	0x431bde83
 80049ac:	10624dd3 	.word	0x10624dd3

080049b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e021      	b.n	8004a06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2224      	movs	r2, #36	; 0x24
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f821 	bl	8004a22 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	817b      	strh	r3, [r7, #10]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	813b      	strh	r3, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a52:	f7ff fa1d 	bl	8003e90 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	f040 80d9 	bne.w	8004c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	2319      	movs	r3, #25
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	496d      	ldr	r1, [pc, #436]	; (8004c24 <HAL_I2C_Mem_Write+0x1ec>)
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fc99 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e0cc      	b.n	8004c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_I2C_Mem_Write+0x56>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0c5      	b.n	8004c1a <HAL_I2C_Mem_Write+0x1e2>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d007      	beq.n	8004ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2221      	movs	r2, #33	; 0x21
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a3a      	ldr	r2, [r7, #32]
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a4d      	ldr	r2, [pc, #308]	; (8004c28 <HAL_I2C_Mem_Write+0x1f0>)
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004af6:	88f8      	ldrh	r0, [r7, #6]
 8004af8:	893a      	ldrh	r2, [r7, #8]
 8004afa:	8979      	ldrh	r1, [r7, #10]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	4603      	mov	r3, r0
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fad0 	bl	80050ac <I2C_RequestMemoryWrite>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d052      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e081      	b.n	8004c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fd1a 	bl	8005554 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d107      	bne.n	8004b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e06b      	b.n	8004c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_I2C_Mem_Write+0x180>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d017      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1aa      	bne.n	8004b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 fd06 	bl	80055d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d107      	bne.n	8004be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e016      	b.n	8004c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	00100002 	.word	0x00100002
 8004c28:	ffff0000 	.word	0xffff0000

08004c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08c      	sub	sp, #48	; 0x30
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	4608      	mov	r0, r1
 8004c36:	4611      	mov	r1, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	817b      	strh	r3, [r7, #10]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	813b      	strh	r3, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c46:	f7ff f923 	bl	8003e90 <HAL_GetTick>
 8004c4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	f040 8208 	bne.w	800506a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2319      	movs	r3, #25
 8004c60:	2201      	movs	r2, #1
 8004c62:	497b      	ldr	r1, [pc, #492]	; (8004e50 <HAL_I2C_Mem_Read+0x224>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fb9f 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
 8004c72:	e1fb      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2C_Mem_Read+0x56>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e1f4      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d007      	beq.n	8004ca8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2222      	movs	r2, #34	; 0x22
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2240      	movs	r2, #64	; 0x40
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_I2C_Mem_Read+0x228>)
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cea:	88f8      	ldrh	r0, [r7, #6]
 8004cec:	893a      	ldrh	r2, [r7, #8]
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fa6c 	bl	80051d8 <I2C_RequestMemoryRead>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e1b0      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d113      	bne.n	8004d3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e184      	b.n	8005044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d11b      	bne.n	8004d7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e164      	b.n	8005044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d11b      	bne.n	8004dba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	e144      	b.n	8005044 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dd0:	e138      	b.n	8005044 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	f200 80f1 	bhi.w	8004fbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d123      	bne.n	8004e2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fc35 	bl	8005658 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e139      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e2a:	e10b      	b.n	8005044 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d14e      	bne.n	8004ed2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	4906      	ldr	r1, [pc, #24]	; (8004e58 <HAL_I2C_Mem_Read+0x22c>)
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fab2 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e10e      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
 8004e4e:	bf00      	nop
 8004e50:	00100002 	.word	0x00100002
 8004e54:	ffff0000 	.word	0xffff0000
 8004e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed0:	e0b8      	b.n	8005044 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4966      	ldr	r1, [pc, #408]	; (8005074 <HAL_I2C_Mem_Read+0x448>)
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fa63 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0bf      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	2200      	movs	r2, #0
 8004f36:	494f      	ldr	r1, [pc, #316]	; (8005074 <HAL_I2C_Mem_Read+0x448>)
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fa35 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e091      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fbc:	e042      	b.n	8005044 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fb48 	bl	8005658 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e04c      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b04      	cmp	r3, #4
 8005010:	d118      	bne.n	8005044 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f aec2 	bne.w	8004dd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e000      	b.n	800506c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	; 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	00010004 	.word	0x00010004

08005078 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	4608      	mov	r0, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	461a      	mov	r2, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	817b      	strh	r3, [r7, #10]
 80050be:	460b      	mov	r3, r1
 80050c0:	813b      	strh	r3, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	2200      	movs	r2, #0
 80050de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f960 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fc:	d103      	bne.n	8005106 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e05f      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005118:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	6a3a      	ldr	r2, [r7, #32]
 800511e:	492d      	ldr	r1, [pc, #180]	; (80051d4 <I2C_RequestMemoryWrite+0x128>)
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f998 	bl	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04c      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005148:	6a39      	ldr	r1, [r7, #32]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fa02 	bl	8005554 <I2C_WaitOnTXEFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b04      	cmp	r3, #4
 800515c:	d107      	bne.n	800516e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e02b      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d105      	bne.n	8005184 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005178:	893b      	ldrh	r3, [r7, #8]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	611a      	str	r2, [r3, #16]
 8005182:	e021      	b.n	80051c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	b29b      	uxth	r3, r3
 800518a:	b2da      	uxtb	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	6a39      	ldr	r1, [r7, #32]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f9dc 	bl	8005554 <I2C_WaitOnTXEFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d107      	bne.n	80051ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e005      	b.n	80051ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051be:	893b      	ldrh	r3, [r7, #8]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	00010002 	.word	0x00010002

080051d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	4608      	mov	r0, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	817b      	strh	r3, [r7, #10]
 80051ea:	460b      	mov	r3, r1
 80051ec:	813b      	strh	r3, [r7, #8]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005200:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005210:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	2200      	movs	r2, #0
 800521a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f8c2 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005238:	d103      	bne.n	8005242 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e0aa      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005254:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	6a3a      	ldr	r2, [r7, #32]
 800525a:	4952      	ldr	r1, [pc, #328]	; (80053a4 <I2C_RequestMemoryRead+0x1cc>)
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f8fa 	bl	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e097      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	6a39      	ldr	r1, [r7, #32]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f964 	bl	8005554 <I2C_WaitOnTXEFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00d      	beq.n	80052ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b04      	cmp	r3, #4
 8005298:	d107      	bne.n	80052aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e076      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b4:	893b      	ldrh	r3, [r7, #8]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	611a      	str	r2, [r3, #16]
 80052be:	e021      	b.n	8005304 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	6a39      	ldr	r1, [r7, #32]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f93e 	bl	8005554 <I2C_WaitOnTXEFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d107      	bne.n	80052f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e050      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052fa:	893b      	ldrh	r3, [r7, #8]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005306:	6a39      	ldr	r1, [r7, #32]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f923 	bl	8005554 <I2C_WaitOnTXEFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00d      	beq.n	8005330 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	2b04      	cmp	r3, #4
 800531a:	d107      	bne.n	800532c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e035      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800533e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2200      	movs	r2, #0
 8005348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f82b 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00d      	beq.n	8005374 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005366:	d103      	bne.n	8005370 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e013      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005374:	897b      	ldrh	r3, [r7, #10]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	6a3a      	ldr	r2, [r7, #32]
 8005388:	4906      	ldr	r1, [pc, #24]	; (80053a4 <I2C_RequestMemoryRead+0x1cc>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f863 	bl	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	00010002 	.word	0x00010002

080053a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b8:	e025      	b.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d021      	beq.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7fe fd65 	bl	8003e90 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d116      	bne.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e023      	b.n	800544e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10d      	bne.n	800542c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	e00c      	b.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	43da      	mvns	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d0b6      	beq.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005464:	e051      	b.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005474:	d123      	bne.n	80054be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800548e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f043 0204 	orr.w	r2, r3, #4
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e046      	b.n	800554c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d021      	beq.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fe fce3 	bl	8003e90 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e020      	b.n	800554c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10c      	bne.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	43da      	mvns	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4013      	ands	r3, r2
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	bf14      	ite	ne
 8005526:	2301      	movne	r3, #1
 8005528:	2300      	moveq	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	e00b      	b.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	43da      	mvns	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d18d      	bne.n	8005466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005560:	e02d      	b.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f8ce 	bl	8005704 <I2C_IsAcknowledgeFailed>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e02d      	b.n	80055ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d021      	beq.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557a:	f7fe fc89 	bl	8003e90 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d116      	bne.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e007      	b.n	80055ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d1ca      	bne.n	8005562 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e2:	e02d      	b.n	8005640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f88d 	bl	8005704 <I2C_IsAcknowledgeFailed>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e02d      	b.n	8005650 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d021      	beq.n	8005640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fc:	f7fe fc48 	bl	8003e90 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	d302      	bcc.n	8005612 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d116      	bne.n	8005640 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e007      	b.n	8005650 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d1ca      	bne.n	80055e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005664:	e042      	b.n	80056ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b10      	cmp	r3, #16
 8005672:	d119      	bne.n	80056a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0210 	mvn.w	r2, #16
 800567c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e029      	b.n	80056fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7fe fbf2 	bl	8003e90 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d116      	bne.n	80056ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	f043 0220 	orr.w	r2, r3, #32
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e007      	b.n	80056fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d1b5      	bne.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571a:	d11b      	bne.n	8005754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	f043 0204 	orr.w	r2, r3, #4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e264      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d075      	beq.n	800586e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005782:	4ba3      	ldr	r3, [pc, #652]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b04      	cmp	r3, #4
 800578c:	d00c      	beq.n	80057a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800578e:	4ba0      	ldr	r3, [pc, #640]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005796:	2b08      	cmp	r3, #8
 8005798:	d112      	bne.n	80057c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800579a:	4b9d      	ldr	r3, [pc, #628]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a6:	d10b      	bne.n	80057c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	4b99      	ldr	r3, [pc, #612]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d05b      	beq.n	800586c <HAL_RCC_OscConfig+0x108>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d157      	bne.n	800586c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e23f      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d106      	bne.n	80057d8 <HAL_RCC_OscConfig+0x74>
 80057ca:	4b91      	ldr	r3, [pc, #580]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a90      	ldr	r2, [pc, #576]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e01d      	b.n	8005814 <HAL_RCC_OscConfig+0xb0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0x98>
 80057e2:	4b8b      	ldr	r3, [pc, #556]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a8a      	ldr	r2, [pc, #552]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b88      	ldr	r3, [pc, #544]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a87      	ldr	r2, [pc, #540]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0xb0>
 80057fc:	4b84      	ldr	r3, [pc, #528]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a83      	ldr	r2, [pc, #524]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4b81      	ldr	r3, [pc, #516]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a80      	ldr	r2, [pc, #512]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 800580e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d013      	beq.n	8005844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fe fb38 	bl	8003e90 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005824:	f7fe fb34 	bl	8003e90 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e204      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	4b76      	ldr	r3, [pc, #472]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0xc0>
 8005842:	e014      	b.n	800586e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fe fb24 	bl	8003e90 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800584c:	f7fe fb20 	bl	8003e90 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	; 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e1f0      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	4b6c      	ldr	r3, [pc, #432]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0xe8>
 800586a:	e000      	b.n	800586e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d063      	beq.n	8005942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800587a:	4b65      	ldr	r3, [pc, #404]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005886:	4b62      	ldr	r3, [pc, #392]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800588e:	2b08      	cmp	r3, #8
 8005890:	d11c      	bne.n	80058cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005892:	4b5f      	ldr	r3, [pc, #380]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d116      	bne.n	80058cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	4b5c      	ldr	r3, [pc, #368]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_RCC_OscConfig+0x152>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e1c4      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	4b56      	ldr	r3, [pc, #344]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4952      	ldr	r1, [pc, #328]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ca:	e03a      	b.n	8005942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d020      	beq.n	8005916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d4:	4b4f      	ldr	r3, [pc, #316]	; (8005a14 <HAL_RCC_OscConfig+0x2b0>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fe fad9 	bl	8003e90 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e2:	f7fe fad5 	bl	8003e90 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e1a5      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4940      	ldr	r1, [pc, #256]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	4313      	orrs	r3, r2
 8005912:	600b      	str	r3, [r1, #0]
 8005914:	e015      	b.n	8005942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <HAL_RCC_OscConfig+0x2b0>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fe fab8 	bl	8003e90 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005924:	f7fe fab4 	bl	8003e90 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e184      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	4b36      	ldr	r3, [pc, #216]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d030      	beq.n	80059b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d016      	beq.n	8005984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005956:	4b30      	ldr	r3, [pc, #192]	; (8005a18 <HAL_RCC_OscConfig+0x2b4>)
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fe fa98 	bl	8003e90 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005964:	f7fe fa94 	bl	8003e90 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e164      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x200>
 8005982:	e015      	b.n	80059b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005984:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <HAL_RCC_OscConfig+0x2b4>)
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598a:	f7fe fa81 	bl	8003e90 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005992:	f7fe fa7d 	bl	8003e90 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e14d      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a4:	4b1a      	ldr	r3, [pc, #104]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80059a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f0      	bne.n	8005992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80a0 	beq.w	8005afe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c2:	4b13      	ldr	r3, [pc, #76]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6413      	str	r3, [r2, #64]	; 0x40
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <HAL_RCC_OscConfig+0x2ac>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ee:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_OscConfig+0x2b8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d121      	bne.n	8005a3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <HAL_RCC_OscConfig+0x2b8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a07      	ldr	r2, [pc, #28]	; (8005a1c <HAL_RCC_OscConfig+0x2b8>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a06:	f7fe fa43 	bl	8003e90 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	e011      	b.n	8005a32 <HAL_RCC_OscConfig+0x2ce>
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	42470000 	.word	0x42470000
 8005a18:	42470e80 	.word	0x42470e80
 8005a1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a20:	f7fe fa36 	bl	8003e90 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e106      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a32:	4b85      	ldr	r3, [pc, #532]	; (8005c48 <HAL_RCC_OscConfig+0x4e4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d106      	bne.n	8005a54 <HAL_RCC_OscConfig+0x2f0>
 8005a46:	4b81      	ldr	r3, [pc, #516]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	4a80      	ldr	r2, [pc, #512]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	6713      	str	r3, [r2, #112]	; 0x70
 8005a52:	e01c      	b.n	8005a8e <HAL_RCC_OscConfig+0x32a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d10c      	bne.n	8005a76 <HAL_RCC_OscConfig+0x312>
 8005a5c:	4b7b      	ldr	r3, [pc, #492]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	4a7a      	ldr	r2, [pc, #488]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	6713      	str	r3, [r2, #112]	; 0x70
 8005a68:	4b78      	ldr	r3, [pc, #480]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6c:	4a77      	ldr	r2, [pc, #476]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6713      	str	r3, [r2, #112]	; 0x70
 8005a74:	e00b      	b.n	8005a8e <HAL_RCC_OscConfig+0x32a>
 8005a76:	4b75      	ldr	r3, [pc, #468]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a74      	ldr	r2, [pc, #464]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	4b72      	ldr	r3, [pc, #456]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a71      	ldr	r2, [pc, #452]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d015      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fe f9fb 	bl	8003e90 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fe f9f7 	bl	8003e90 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e0c5      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab4:	4b65      	ldr	r3, [pc, #404]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ee      	beq.n	8005a9e <HAL_RCC_OscConfig+0x33a>
 8005ac0:	e014      	b.n	8005aec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac2:	f7fe f9e5 	bl	8003e90 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aca:	f7fe f9e1 	bl	8003e90 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e0af      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ee      	bne.n	8005aca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af2:	4b56      	ldr	r3, [pc, #344]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a55      	ldr	r2, [pc, #340]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 809b 	beq.w	8005c3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b08:	4b50      	ldr	r3, [pc, #320]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 030c 	and.w	r3, r3, #12
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d05c      	beq.n	8005bce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d141      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1c:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <HAL_RCC_OscConfig+0x4ec>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b22:	f7fe f9b5 	bl	8003e90 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2a:	f7fe f9b1 	bl	8003e90 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e081      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3c:	4b43      	ldr	r3, [pc, #268]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	019b      	lsls	r3, r3, #6
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	3b01      	subs	r3, #1
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	4937      	ldr	r1, [pc, #220]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b72:	4b37      	ldr	r3, [pc, #220]	; (8005c50 <HAL_RCC_OscConfig+0x4ec>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b78:	f7fe f98a 	bl	8003e90 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fe f986 	bl	8003e90 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e056      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b92:	4b2e      	ldr	r3, [pc, #184]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x41c>
 8005b9e:	e04e      	b.n	8005c3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <HAL_RCC_OscConfig+0x4ec>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba6:	f7fe f973 	bl	8003e90 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bae:	f7fe f96f 	bl	8003e90 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e03f      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc0:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCC_OscConfig+0x44a>
 8005bcc:	e037      	b.n	8005c3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e032      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bda:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <HAL_RCC_OscConfig+0x4e8>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d028      	beq.n	8005c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d121      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d11a      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d111      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	3b01      	subs	r3, #1
 8005c24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d001      	beq.n	8005c3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40007000 	.word	0x40007000
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	42470060 	.word	0x42470060

08005c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0cc      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c68:	4b68      	ldr	r3, [pc, #416]	; (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d90c      	bls.n	8005c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b65      	ldr	r3, [pc, #404]	; (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b63      	ldr	r3, [pc, #396]	; (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0b8      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ca8:	4b59      	ldr	r3, [pc, #356]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a58      	ldr	r2, [pc, #352]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cc0:	4b53      	ldr	r3, [pc, #332]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4a52      	ldr	r2, [pc, #328]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ccc:	4b50      	ldr	r3, [pc, #320]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	494d      	ldr	r1, [pc, #308]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d044      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	4b47      	ldr	r3, [pc, #284]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d119      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e07f      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d003      	beq.n	8005d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d107      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d12:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e06f      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d22:	4b3b      	ldr	r3, [pc, #236]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e067      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d32:	4b37      	ldr	r3, [pc, #220]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f023 0203 	bic.w	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4934      	ldr	r1, [pc, #208]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d44:	f7fe f8a4 	bl	8003e90 <HAL_GetTick>
 8005d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d4c:	f7fe f8a0 	bl	8003e90 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e04f      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d62:	4b2b      	ldr	r3, [pc, #172]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 020c 	and.w	r2, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d1eb      	bne.n	8005d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d74:	4b25      	ldr	r3, [pc, #148]	; (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d20c      	bcs.n	8005d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d82:	4b22      	ldr	r3, [pc, #136]	; (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	4b20      	ldr	r3, [pc, #128]	; (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d001      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e032      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da8:	4b19      	ldr	r3, [pc, #100]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4916      	ldr	r1, [pc, #88]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dc6:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	490e      	ldr	r1, [pc, #56]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dda:	f000 f821 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 8005dde:	4602      	mov	r2, r0
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	490a      	ldr	r1, [pc, #40]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005dec:	5ccb      	ldrb	r3, [r1, r3]
 8005dee:	fa22 f303 	lsr.w	r3, r2, r3
 8005df2:	4a09      	ldr	r2, [pc, #36]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <HAL_RCC_ClockConfig+0x1c8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe f804 	bl	8003e08 <HAL_InitTick>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023c00 	.word	0x40023c00
 8005e10:	40023800 	.word	0x40023800
 8005e14:	08008588 	.word	0x08008588
 8005e18:	20000000 	.word	0x20000000
 8005e1c:	200000bc 	.word	0x200000bc

08005e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	2300      	movs	r3, #0
 8005e32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e38:	4b67      	ldr	r3, [pc, #412]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d00d      	beq.n	8005e60 <HAL_RCC_GetSysClockFreq+0x40>
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	f200 80bd 	bhi.w	8005fc4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x34>
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d003      	beq.n	8005e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e52:	e0b7      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e54:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e56:	60bb      	str	r3, [r7, #8]
       break;
 8005e58:	e0b7      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e5a:	4b61      	ldr	r3, [pc, #388]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e5c:	60bb      	str	r3, [r7, #8]
      break;
 8005e5e:	e0b4      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e60:	4b5d      	ldr	r3, [pc, #372]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e6a:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d04d      	beq.n	8005f12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e76:	4b58      	ldr	r3, [pc, #352]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	099b      	lsrs	r3, r3, #6
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e86:	f04f 0100 	mov.w	r1, #0
 8005e8a:	ea02 0800 	and.w	r8, r2, r0
 8005e8e:	ea03 0901 	and.w	r9, r3, r1
 8005e92:	4640      	mov	r0, r8
 8005e94:	4649      	mov	r1, r9
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	014b      	lsls	r3, r1, #5
 8005ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ea4:	0142      	lsls	r2, r0, #5
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	ebb0 0008 	subs.w	r0, r0, r8
 8005eae:	eb61 0109 	sbc.w	r1, r1, r9
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	018b      	lsls	r3, r1, #6
 8005ebc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ec0:	0182      	lsls	r2, r0, #6
 8005ec2:	1a12      	subs	r2, r2, r0
 8005ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ec8:	f04f 0000 	mov.w	r0, #0
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	00d9      	lsls	r1, r3, #3
 8005ed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed6:	00d0      	lsls	r0, r2, #3
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	eb12 0208 	adds.w	r2, r2, r8
 8005ee0:	eb43 0309 	adc.w	r3, r3, r9
 8005ee4:	f04f 0000 	mov.w	r0, #0
 8005ee8:	f04f 0100 	mov.w	r1, #0
 8005eec:	0259      	lsls	r1, r3, #9
 8005eee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ef2:	0250      	lsls	r0, r2, #9
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4619      	mov	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	f7fa fba0 	bl	8000648 <__aeabi_uldivmod>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e04a      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f12:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	099b      	lsrs	r3, r3, #6
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	ea02 0400 	and.w	r4, r2, r0
 8005f2a:	ea03 0501 	and.w	r5, r3, r1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	014b      	lsls	r3, r1, #5
 8005f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f40:	0142      	lsls	r2, r0, #5
 8005f42:	4610      	mov	r0, r2
 8005f44:	4619      	mov	r1, r3
 8005f46:	1b00      	subs	r0, r0, r4
 8005f48:	eb61 0105 	sbc.w	r1, r1, r5
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	018b      	lsls	r3, r1, #6
 8005f56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f5a:	0182      	lsls	r2, r0, #6
 8005f5c:	1a12      	subs	r2, r2, r0
 8005f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	00d9      	lsls	r1, r3, #3
 8005f6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f70:	00d0      	lsls	r0, r2, #3
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	1912      	adds	r2, r2, r4
 8005f78:	eb45 0303 	adc.w	r3, r5, r3
 8005f7c:	f04f 0000 	mov.w	r0, #0
 8005f80:	f04f 0100 	mov.w	r1, #0
 8005f84:	0299      	lsls	r1, r3, #10
 8005f86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f8a:	0290      	lsls	r0, r2, #10
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	f7fa fb54 	bl	8000648 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	60bb      	str	r3, [r7, #8]
      break;
 8005fc2:	e002      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fc6:	60bb      	str	r3, [r7, #8]
      break;
 8005fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fca:	68bb      	ldr	r3, [r7, #8]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	00f42400 	.word	0x00f42400
 8005fe0:	007a1200 	.word	0x007a1200

08005fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000000 	.word	0x20000000

08005ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006000:	f7ff fff0 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8006004:	4602      	mov	r2, r0
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	0a9b      	lsrs	r3, r3, #10
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	4903      	ldr	r1, [pc, #12]	; (8006020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006012:	5ccb      	ldrb	r3, [r1, r3]
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40023800 	.word	0x40023800
 8006020:	08008598 	.word	0x08008598

08006024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006028:	f7ff ffdc 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 800602c:	4602      	mov	r2, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	0b5b      	lsrs	r3, r3, #13
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4903      	ldr	r1, [pc, #12]	; (8006048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800603a:	5ccb      	ldrb	r3, [r1, r3]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40023800 	.word	0x40023800
 8006048:	08008598 	.word	0x08008598

0800604c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e041      	b.n	80060e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fa febc 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f000 fbd8 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e041      	b.n	8006180 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f839 	bl	8006188 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f000 fb89 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_TIM_OC_Start_IT+0x28>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e022      	b.n	800620a <HAL_TIM_OC_Start_IT+0x6e>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d109      	bne.n	80061de <HAL_TIM_OC_Start_IT+0x42>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	bf14      	ite	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	2300      	moveq	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	e015      	b.n	800620a <HAL_TIM_OC_Start_IT+0x6e>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_OC_Start_IT+0x5c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e008      	b.n	800620a <HAL_TIM_OC_Start_IT+0x6e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e0b3      	b.n	800637a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <HAL_TIM_OC_Start_IT+0x86>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006220:	e013      	b.n	800624a <HAL_TIM_OC_Start_IT+0xae>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d104      	bne.n	8006232 <HAL_TIM_OC_Start_IT+0x96>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006230:	e00b      	b.n	800624a <HAL_TIM_OC_Start_IT+0xae>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d104      	bne.n	8006242 <HAL_TIM_OC_Start_IT+0xa6>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006240:	e003      	b.n	800624a <HAL_TIM_OC_Start_IT+0xae>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b0c      	cmp	r3, #12
 800624e:	d841      	bhi.n	80062d4 <HAL_TIM_OC_Start_IT+0x138>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <HAL_TIM_OC_Start_IT+0xbc>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	0800628d 	.word	0x0800628d
 800625c:	080062d5 	.word	0x080062d5
 8006260:	080062d5 	.word	0x080062d5
 8006264:	080062d5 	.word	0x080062d5
 8006268:	0800629f 	.word	0x0800629f
 800626c:	080062d5 	.word	0x080062d5
 8006270:	080062d5 	.word	0x080062d5
 8006274:	080062d5 	.word	0x080062d5
 8006278:	080062b1 	.word	0x080062b1
 800627c:	080062d5 	.word	0x080062d5
 8006280:	080062d5 	.word	0x080062d5
 8006284:	080062d5 	.word	0x080062d5
 8006288:	080062c3 	.word	0x080062c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0202 	orr.w	r2, r2, #2
 800629a:	60da      	str	r2, [r3, #12]
      break;
 800629c:	e01d      	b.n	80062da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0204 	orr.w	r2, r2, #4
 80062ac:	60da      	str	r2, [r3, #12]
      break;
 80062ae:	e014      	b.n	80062da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0208 	orr.w	r2, r2, #8
 80062be:	60da      	str	r2, [r3, #12]
      break;
 80062c0:	e00b      	b.n	80062da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0210 	orr.w	r2, r2, #16
 80062d0:	60da      	str	r2, [r3, #12]
      break;
 80062d2:	e002      	b.n	80062da <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      break;
 80062d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d14b      	bne.n	8006378 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fd4f 	bl	8006d8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a24      	ldr	r2, [pc, #144]	; (8006384 <HAL_TIM_OC_Start_IT+0x1e8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006306:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <HAL_TIM_OC_Start_IT+0x1e8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d018      	beq.n	8006344 <HAL_TIM_OC_Start_IT+0x1a8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d013      	beq.n	8006344 <HAL_TIM_OC_Start_IT+0x1a8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a19      	ldr	r2, [pc, #100]	; (8006388 <HAL_TIM_OC_Start_IT+0x1ec>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00e      	beq.n	8006344 <HAL_TIM_OC_Start_IT+0x1a8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a18      	ldr	r2, [pc, #96]	; (800638c <HAL_TIM_OC_Start_IT+0x1f0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d009      	beq.n	8006344 <HAL_TIM_OC_Start_IT+0x1a8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a16      	ldr	r2, [pc, #88]	; (8006390 <HAL_TIM_OC_Start_IT+0x1f4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d004      	beq.n	8006344 <HAL_TIM_OC_Start_IT+0x1a8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a15      	ldr	r2, [pc, #84]	; (8006394 <HAL_TIM_OC_Start_IT+0x1f8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d111      	bne.n	8006368 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b06      	cmp	r3, #6
 8006354:	d010      	beq.n	8006378 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0201 	orr.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006366:	e007      	b.n	8006378 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40010000 	.word	0x40010000
 8006388:	40000400 	.word	0x40000400
 800638c:	40000800 	.word	0x40000800
 8006390:	40000c00 	.word	0x40000c00
 8006394:	40014000 	.word	0x40014000

08006398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0202 	mvn.w	r2, #2
 80063c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa11 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fa fcc2 	bl	8000d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa14 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0204 	mvn.w	r2, #4
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9e7 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fa fc98 	bl	8000d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f9ea 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0208 	mvn.w	r2, #8
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9bd 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fa fc6e 	bl	8000d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9c0 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2208      	movs	r2, #8
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f993 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fa fc44 	bl	8000d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f996 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0201 	mvn.w	r2, #1
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f969 	bl	80067ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fcc0 	bl	8006ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d10e      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d107      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f95b 	bl	800682a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d10e      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b20      	cmp	r3, #32
 800658e:	d107      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0220 	mvn.w	r2, #32
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fc8a 	bl	8006eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e048      	b.n	8006658 <HAL_TIM_OC_ConfigChannel+0xb0>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	d839      	bhi.n	8006648 <HAL_TIM_OC_ConfigChannel+0xa0>
 80065d4:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	08006611 	.word	0x08006611
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	0800661f 	.word	0x0800661f
 80065f0:	08006649 	.word	0x08006649
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006649 	.word	0x08006649
 80065fc:	0800662d 	.word	0x0800662d
 8006600:	08006649 	.word	0x08006649
 8006604:	08006649 	.word	0x08006649
 8006608:	08006649 	.word	0x08006649
 800660c:	0800663b 	.word	0x0800663b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f992 	bl	8006940 <TIM_OC1_SetConfig>
      break;
 800661c:	e017      	b.n	800664e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f9f1 	bl	8006a0c <TIM_OC2_SetConfig>
      break;
 800662a:	e010      	b.n	800664e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fa56 	bl	8006ae4 <TIM_OC3_SetConfig>
      break;
 8006638:	e009      	b.n	800664e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fab9 	bl	8006bb8 <TIM_OC4_SetConfig>
      break;
 8006646:	e002      	b.n	800664e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
      break;
 800664c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006656:	7dfb      	ldrb	r3, [r7, #23]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_TIM_ConfigClockSource+0x1c>
 8006678:	2302      	movs	r3, #2
 800667a:	e0b4      	b.n	80067e6 <HAL_TIM_ConfigClockSource+0x186>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800669a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b4:	d03e      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0xd4>
 80066b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ba:	f200 8087 	bhi.w	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	f000 8086 	beq.w	80067d2 <HAL_TIM_ConfigClockSource+0x172>
 80066c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ca:	d87f      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066cc:	2b70      	cmp	r3, #112	; 0x70
 80066ce:	d01a      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0xa6>
 80066d0:	2b70      	cmp	r3, #112	; 0x70
 80066d2:	d87b      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066d4:	2b60      	cmp	r3, #96	; 0x60
 80066d6:	d050      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x11a>
 80066d8:	2b60      	cmp	r3, #96	; 0x60
 80066da:	d877      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066dc:	2b50      	cmp	r3, #80	; 0x50
 80066de:	d03c      	beq.n	800675a <HAL_TIM_ConfigClockSource+0xfa>
 80066e0:	2b50      	cmp	r3, #80	; 0x50
 80066e2:	d873      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d058      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x13a>
 80066e8:	2b40      	cmp	r3, #64	; 0x40
 80066ea:	d86f      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b30      	cmp	r3, #48	; 0x30
 80066ee:	d064      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 80066f0:	2b30      	cmp	r3, #48	; 0x30
 80066f2:	d86b      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d060      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d867      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d05c      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 8006700:	2b10      	cmp	r3, #16
 8006702:	d05a      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 8006704:	e062      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6899      	ldr	r1, [r3, #8]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f000 fb19 	bl	8006d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	609a      	str	r2, [r3, #8]
      break;
 8006732:	e04f      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6899      	ldr	r1, [r3, #8]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f000 fb02 	bl	8006d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006756:	609a      	str	r2, [r3, #8]
      break;
 8006758:	e03c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	461a      	mov	r2, r3
 8006768:	f000 fa76 	bl	8006c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2150      	movs	r1, #80	; 0x50
 8006772:	4618      	mov	r0, r3
 8006774:	f000 facf 	bl	8006d16 <TIM_ITRx_SetConfig>
      break;
 8006778:	e02c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	461a      	mov	r2, r3
 8006788:	f000 fa95 	bl	8006cb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2160      	movs	r1, #96	; 0x60
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fabf 	bl	8006d16 <TIM_ITRx_SetConfig>
      break;
 8006798:	e01c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 fa56 	bl	8006c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2140      	movs	r1, #64	; 0x40
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 faaf 	bl	8006d16 <TIM_ITRx_SetConfig>
      break;
 80067b8:	e00c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4619      	mov	r1, r3
 80067c4:	4610      	mov	r0, r2
 80067c6:	f000 faa6 	bl	8006d16 <TIM_ITRx_SetConfig>
      break;
 80067ca:	e003      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	73fb      	strb	r3, [r7, #15]
      break;
 80067d0:	e000      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a34      	ldr	r2, [pc, #208]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d00b      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a31      	ldr	r2, [pc, #196]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a30      	ldr	r2, [pc, #192]	; (800692c <TIM_Base_SetConfig+0xec>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a2f      	ldr	r2, [pc, #188]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d108      	bne.n	800688a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a25      	ldr	r2, [pc, #148]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01b      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006898:	d017      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a22      	ldr	r2, [pc, #136]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a21      	ldr	r2, [pc, #132]	; (800692c <TIM_Base_SetConfig+0xec>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a20      	ldr	r2, [pc, #128]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <TIM_Base_SetConfig+0xf4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <TIM_Base_SetConfig+0xf8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <TIM_Base_SetConfig+0xfc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d103      	bne.n	8006910 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	615a      	str	r2, [r3, #20]
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f023 0302 	bic.w	r3, r3, #2
 8006988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <TIM_OC1_SetConfig+0xc8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d10c      	bne.n	80069b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0308 	bic.w	r3, r3, #8
 80069a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 0304 	bic.w	r3, r3, #4
 80069b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <TIM_OC1_SetConfig+0xc8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d111      	bne.n	80069e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	621a      	str	r2, [r3, #32]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40010000 	.word	0x40010000

08006a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0210 	bic.w	r2, r3, #16
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0320 	bic.w	r3, r3, #32
 8006a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1e      	ldr	r2, [pc, #120]	; (8006ae0 <TIM_OC2_SetConfig+0xd4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d10d      	bne.n	8006a88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <TIM_OC2_SetConfig+0xd4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d113      	bne.n	8006ab8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000

08006ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <TIM_OC3_SetConfig+0xd0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d10d      	bne.n	8006b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_OC3_SetConfig+0xd0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d113      	bne.n	8006b8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40010000 	.word	0x40010000

08006bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a10      	ldr	r2, [pc, #64]	; (8006c54 <TIM_OC4_SetConfig+0x9c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d109      	bne.n	8006c2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	019b      	lsls	r3, r3, #6
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000

08006c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 030a 	bic.w	r3, r3, #10
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b087      	sub	sp, #28
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0210 	bic.w	r2, r3, #16
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	031b      	lsls	r3, r3, #12
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	bf00      	nop
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f043 0307 	orr.w	r3, r3, #7
 8006d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	021a      	lsls	r2, r3, #8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	609a      	str	r2, [r3, #8]
}
 8006d80:	bf00      	nop
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	2201      	movs	r2, #1
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a1a      	ldr	r2, [r3, #32]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	43db      	mvns	r3, r3
 8006dae:	401a      	ands	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a1a      	ldr	r2, [r3, #32]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e050      	b.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d018      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3c:	d013      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a16      	ldr	r2, [pc, #88]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a15      	ldr	r2, [pc, #84]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d10c      	bne.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40010000 	.word	0x40010000
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40000800 	.word	0x40000800
 8006eac:	40000c00 	.word	0x40000c00
 8006eb0:	40014000 	.word	0x40014000

08006eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e03f      	b.n	8006f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7f9 ff9c 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2224      	movs	r2, #36	; 0x24
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fcbf 	bl	80078a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d130      	bne.n	8006ff2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_UART_Transmit_IT+0x26>
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e029      	b.n	8006ff4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_UART_Transmit_IT+0x38>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e022      	b.n	8006ff4 <HAL_UART_Transmit_IT+0x7e>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	88fa      	ldrh	r2, [r7, #6]
 8006fc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e000      	b.n	8006ff4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006ff2:	2302      	movs	r3, #2
  }
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b0ba      	sub	sp, #232	; 0xe8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007026:	2300      	movs	r3, #0
 8007028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800703e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10f      	bne.n	8007066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <HAL_UART_IRQHandler+0x66>
 8007052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fb65 	bl	800772e <UART_Receive_IT>
      return;
 8007064:	e256      	b.n	8007514 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80de 	beq.w	800722c <HAL_UART_IRQHandler+0x22c>
 8007070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800707c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007080:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80d1 	beq.w	800722c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800708a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <HAL_UART_IRQHandler+0xae>
 8007096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f043 0201 	orr.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00b      	beq.n	80070d2 <HAL_UART_IRQHandler+0xd2>
 80070ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f043 0202 	orr.w	r2, r3, #2
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_UART_IRQHandler+0xf6>
 80070de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f043 0204 	orr.w	r2, r3, #4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d011      	beq.n	8007126 <HAL_UART_IRQHandler+0x126>
 8007102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d105      	bne.n	800711a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800710e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f043 0208 	orr.w	r2, r3, #8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 81ed 	beq.w	800750a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	d008      	beq.n	800714e <HAL_UART_IRQHandler+0x14e>
 800713c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 faf0 	bl	800772e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	bf0c      	ite	eq
 800715c:	2301      	moveq	r3, #1
 800715e:	2300      	movne	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <HAL_UART_IRQHandler+0x17a>
 8007172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d04f      	beq.n	800721a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9f8 	bl	8007570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d141      	bne.n	8007212 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3314      	adds	r3, #20
 8007194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3314      	adds	r3, #20
 80071b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1d9      	bne.n	800718e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d013      	beq.n	800720a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	4a7d      	ldr	r2, [pc, #500]	; (80073dc <HAL_UART_IRQHandler+0x3dc>)
 80071e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fc ffdb 	bl	80041aa <HAL_DMA_Abort_IT>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d016      	beq.n	8007228 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	e00e      	b.n	8007228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f99a 	bl	8007544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	e00a      	b.n	8007228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f996 	bl	8007544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	e006      	b.n	8007228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f992 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007226:	e170      	b.n	800750a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007228:	bf00      	nop
    return;
 800722a:	e16e      	b.n	800750a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	2b01      	cmp	r3, #1
 8007232:	f040 814a 	bne.w	80074ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723a:	f003 0310 	and.w	r3, r3, #16
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8143 	beq.w	80074ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 813c 	beq.w	80074ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	f040 80b4 	bne.w	80073e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8140 	beq.w	800750e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007296:	429a      	cmp	r2, r3
 8007298:	f080 8139 	bcs.w	800750e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ae:	f000 8088 	beq.w	80073c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	330c      	adds	r3, #12
 80072b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1d9      	bne.n	80072b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800730e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007322:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007326:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800732a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e1      	bne.n	80072fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3314      	adds	r3, #20
 8007340:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800734a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800734c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3314      	adds	r3, #20
 800735a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800735e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007360:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800736c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e3      	bne.n	800733a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	330c      	adds	r3, #12
 8007386:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007392:	f023 0310 	bic.w	r3, r3, #16
 8007396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	330c      	adds	r3, #12
 80073a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80073a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e3      	bne.n	8007380 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fc fe84 	bl	80040ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8c0 	bl	8007558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073d8:	e099      	b.n	800750e <HAL_UART_IRQHandler+0x50e>
 80073da:	bf00      	nop
 80073dc:	08007637 	.word	0x08007637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 808b 	beq.w	8007512 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80073fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 8086 	beq.w	8007512 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800741c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800742a:	647a      	str	r2, [r7, #68]	; 0x44
 800742c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e3      	bne.n	8007406 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3314      	adds	r3, #20
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	623b      	str	r3, [r7, #32]
   return(result);
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007462:	633a      	str	r2, [r7, #48]	; 0x30
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e3      	bne.n	800743e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	60fb      	str	r3, [r7, #12]
   return(result);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074a8:	61fa      	str	r2, [r7, #28]
 80074aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	617b      	str	r3, [r7, #20]
   return(result);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e3      	bne.n	8007484 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f848 	bl	8007558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074c8:	e023      	b.n	8007512 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_UART_IRQHandler+0x4ea>
 80074d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8bb 	bl	800765e <UART_Transmit_IT>
    return;
 80074e8:	e014      	b.n	8007514 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <HAL_UART_IRQHandler+0x514>
 80074f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d008      	beq.n	8007514 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f8fb 	bl	80076fe <UART_EndTransmit_IT>
    return;
 8007508:	e004      	b.n	8007514 <HAL_UART_IRQHandler+0x514>
    return;
 800750a:	bf00      	nop
 800750c:	e002      	b.n	8007514 <HAL_UART_IRQHandler+0x514>
      return;
 800750e:	bf00      	nop
 8007510:	e000      	b.n	8007514 <HAL_UART_IRQHandler+0x514>
      return;
 8007512:	bf00      	nop
  }
}
 8007514:	37e8      	adds	r7, #232	; 0xe8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop

0800751c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b095      	sub	sp, #84	; 0x54
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800758e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007598:	643a      	str	r2, [r7, #64]	; 0x40
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800759e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e5      	bne.n	8007578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3314      	adds	r3, #20
 80075ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e5      	bne.n	80075ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d119      	bne.n	800761c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f023 0310 	bic.w	r3, r3, #16
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007608:	61ba      	str	r2, [r7, #24]
 800760a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6979      	ldr	r1, [r7, #20]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	613b      	str	r3, [r7, #16]
   return(result);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800762a:	bf00      	nop
 800762c:	3754      	adds	r7, #84	; 0x54
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7ff ff77 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007656:	bf00      	nop
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b21      	cmp	r3, #33	; 0x21
 8007670:	d13e      	bne.n	80076f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767a:	d114      	bne.n	80076a6 <UART_Transmit_IT+0x48>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d110      	bne.n	80076a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	1c9a      	adds	r2, r3, #2
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	621a      	str	r2, [r3, #32]
 80076a4:	e008      	b.n	80076b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	1c59      	adds	r1, r3, #1
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6211      	str	r1, [r2, #32]
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4619      	mov	r1, r3
 80076c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10f      	bne.n	80076ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e000      	b.n	80076f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076f0:	2302      	movs	r3, #2
  }
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fefc 	bl	800751c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b08c      	sub	sp, #48	; 0x30
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b22      	cmp	r3, #34	; 0x22
 8007740:	f040 80ab 	bne.w	800789a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774c:	d117      	bne.n	800777e <UART_Receive_IT+0x50>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d113      	bne.n	800777e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776c:	b29a      	uxth	r2, r3
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	1c9a      	adds	r2, r3, #2
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
 800777c:	e026      	b.n	80077cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007790:	d007      	beq.n	80077a2 <UART_Receive_IT+0x74>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <UART_Receive_IT+0x82>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e008      	b.n	80077c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4619      	mov	r1, r3
 80077da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d15a      	bne.n	8007896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0220 	bic.w	r2, r2, #32
 80077ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695a      	ldr	r2, [r3, #20]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	2b01      	cmp	r3, #1
 800781e:	d135      	bne.n	800788c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	613b      	str	r3, [r7, #16]
   return(result);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f023 0310 	bic.w	r3, r3, #16
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007846:	623a      	str	r2, [r7, #32]
 8007848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	69f9      	ldr	r1, [r7, #28]
 800784c:	6a3a      	ldr	r2, [r7, #32]
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	61bb      	str	r3, [r7, #24]
   return(result);
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e5      	bne.n	8007826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b10      	cmp	r3, #16
 8007866:	d10a      	bne.n	800787e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff fe67 	bl	8007558 <HAL_UARTEx_RxEventCallback>
 800788a:	e002      	b.n	8007892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fe4f 	bl	8007530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e002      	b.n	800789c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	e000      	b.n	800789c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800789a:	2302      	movs	r3, #2
  }
}
 800789c:	4618      	mov	r0, r3
 800789e:	3730      	adds	r7, #48	; 0x30
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	b09f      	sub	sp, #124	; 0x7c
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ba:	68d9      	ldr	r1, [r3, #12]
 80078bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	ea40 0301 	orr.w	r3, r0, r1
 80078c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	431a      	orrs	r2, r3
 80078d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	4313      	orrs	r3, r2
 80078dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80078de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078e8:	f021 010c 	bic.w	r1, r1, #12
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078f2:	430b      	orrs	r3, r1
 80078f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007902:	6999      	ldr	r1, [r3, #24]
 8007904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	ea40 0301 	orr.w	r3, r0, r1
 800790c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800790e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4bc5      	ldr	r3, [pc, #788]	; (8007c28 <UART_SetConfig+0x384>)
 8007914:	429a      	cmp	r2, r3
 8007916:	d004      	beq.n	8007922 <UART_SetConfig+0x7e>
 8007918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	4bc3      	ldr	r3, [pc, #780]	; (8007c2c <UART_SetConfig+0x388>)
 800791e:	429a      	cmp	r2, r3
 8007920:	d103      	bne.n	800792a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007922:	f7fe fb7f 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 8007926:	6778      	str	r0, [r7, #116]	; 0x74
 8007928:	e002      	b.n	8007930 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800792a:	f7fe fb67 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 800792e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007938:	f040 80b6 	bne.w	8007aa8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800793c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800793e:	461c      	mov	r4, r3
 8007940:	f04f 0500 	mov.w	r5, #0
 8007944:	4622      	mov	r2, r4
 8007946:	462b      	mov	r3, r5
 8007948:	1891      	adds	r1, r2, r2
 800794a:	6439      	str	r1, [r7, #64]	; 0x40
 800794c:	415b      	adcs	r3, r3
 800794e:	647b      	str	r3, [r7, #68]	; 0x44
 8007950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007954:	1912      	adds	r2, r2, r4
 8007956:	eb45 0303 	adc.w	r3, r5, r3
 800795a:	f04f 0000 	mov.w	r0, #0
 800795e:	f04f 0100 	mov.w	r1, #0
 8007962:	00d9      	lsls	r1, r3, #3
 8007964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007968:	00d0      	lsls	r0, r2, #3
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	1911      	adds	r1, r2, r4
 8007970:	6639      	str	r1, [r7, #96]	; 0x60
 8007972:	416b      	adcs	r3, r5
 8007974:	667b      	str	r3, [r7, #100]	; 0x64
 8007976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	461a      	mov	r2, r3
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	1891      	adds	r1, r2, r2
 8007982:	63b9      	str	r1, [r7, #56]	; 0x38
 8007984:	415b      	adcs	r3, r3
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800798c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007990:	f7f8 fe5a 	bl	8000648 <__aeabi_uldivmod>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4ba5      	ldr	r3, [pc, #660]	; (8007c30 <UART_SetConfig+0x38c>)
 800799a:	fba3 2302 	umull	r2, r3, r3, r2
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	011e      	lsls	r6, r3, #4
 80079a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a4:	461c      	mov	r4, r3
 80079a6:	f04f 0500 	mov.w	r5, #0
 80079aa:	4622      	mov	r2, r4
 80079ac:	462b      	mov	r3, r5
 80079ae:	1891      	adds	r1, r2, r2
 80079b0:	6339      	str	r1, [r7, #48]	; 0x30
 80079b2:	415b      	adcs	r3, r3
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
 80079b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80079ba:	1912      	adds	r2, r2, r4
 80079bc:	eb45 0303 	adc.w	r3, r5, r3
 80079c0:	f04f 0000 	mov.w	r0, #0
 80079c4:	f04f 0100 	mov.w	r1, #0
 80079c8:	00d9      	lsls	r1, r3, #3
 80079ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079ce:	00d0      	lsls	r0, r2, #3
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	1911      	adds	r1, r2, r4
 80079d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80079d8:	416b      	adcs	r3, r5
 80079da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	461a      	mov	r2, r3
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	1891      	adds	r1, r2, r2
 80079e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80079ea:	415b      	adcs	r3, r3
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80079f6:	f7f8 fe27 	bl	8000648 <__aeabi_uldivmod>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4b8c      	ldr	r3, [pc, #560]	; (8007c30 <UART_SetConfig+0x38c>)
 8007a00:	fba3 1302 	umull	r1, r3, r3, r2
 8007a04:	095b      	lsrs	r3, r3, #5
 8007a06:	2164      	movs	r1, #100	; 0x64
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	3332      	adds	r3, #50	; 0x32
 8007a12:	4a87      	ldr	r2, [pc, #540]	; (8007c30 <UART_SetConfig+0x38c>)
 8007a14:	fba2 2303 	umull	r2, r3, r2, r3
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a20:	441e      	add	r6, r3
 8007a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a24:	4618      	mov	r0, r3
 8007a26:	f04f 0100 	mov.w	r1, #0
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	1894      	adds	r4, r2, r2
 8007a30:	623c      	str	r4, [r7, #32]
 8007a32:	415b      	adcs	r3, r3
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
 8007a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a3a:	1812      	adds	r2, r2, r0
 8007a3c:	eb41 0303 	adc.w	r3, r1, r3
 8007a40:	f04f 0400 	mov.w	r4, #0
 8007a44:	f04f 0500 	mov.w	r5, #0
 8007a48:	00dd      	lsls	r5, r3, #3
 8007a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a4e:	00d4      	lsls	r4, r2, #3
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	1814      	adds	r4, r2, r0
 8007a56:	653c      	str	r4, [r7, #80]	; 0x50
 8007a58:	414b      	adcs	r3, r1
 8007a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	461a      	mov	r2, r3
 8007a62:	f04f 0300 	mov.w	r3, #0
 8007a66:	1891      	adds	r1, r2, r2
 8007a68:	61b9      	str	r1, [r7, #24]
 8007a6a:	415b      	adcs	r3, r3
 8007a6c:	61fb      	str	r3, [r7, #28]
 8007a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a76:	f7f8 fde7 	bl	8000648 <__aeabi_uldivmod>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4b6c      	ldr	r3, [pc, #432]	; (8007c30 <UART_SetConfig+0x38c>)
 8007a80:	fba3 1302 	umull	r1, r3, r3, r2
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	2164      	movs	r1, #100	; 0x64
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	3332      	adds	r3, #50	; 0x32
 8007a92:	4a67      	ldr	r2, [pc, #412]	; (8007c30 <UART_SetConfig+0x38c>)
 8007a94:	fba2 2303 	umull	r2, r3, r2, r3
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	f003 0207 	and.w	r2, r3, #7
 8007a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4432      	add	r2, r6
 8007aa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007aa6:	e0b9      	b.n	8007c1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aaa:	461c      	mov	r4, r3
 8007aac:	f04f 0500 	mov.w	r5, #0
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	1891      	adds	r1, r2, r2
 8007ab6:	6139      	str	r1, [r7, #16]
 8007ab8:	415b      	adcs	r3, r3
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ac0:	1912      	adds	r2, r2, r4
 8007ac2:	eb45 0303 	adc.w	r3, r5, r3
 8007ac6:	f04f 0000 	mov.w	r0, #0
 8007aca:	f04f 0100 	mov.w	r1, #0
 8007ace:	00d9      	lsls	r1, r3, #3
 8007ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ad4:	00d0      	lsls	r0, r2, #3
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	eb12 0804 	adds.w	r8, r2, r4
 8007ade:	eb43 0905 	adc.w	r9, r3, r5
 8007ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	008b      	lsls	r3, r1, #2
 8007af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007afa:	0082      	lsls	r2, r0, #2
 8007afc:	4640      	mov	r0, r8
 8007afe:	4649      	mov	r1, r9
 8007b00:	f7f8 fda2 	bl	8000648 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4b49      	ldr	r3, [pc, #292]	; (8007c30 <UART_SetConfig+0x38c>)
 8007b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	011e      	lsls	r6, r3, #4
 8007b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b14:	4618      	mov	r0, r3
 8007b16:	f04f 0100 	mov.w	r1, #0
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	1894      	adds	r4, r2, r2
 8007b20:	60bc      	str	r4, [r7, #8]
 8007b22:	415b      	adcs	r3, r3
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b2a:	1812      	adds	r2, r2, r0
 8007b2c:	eb41 0303 	adc.w	r3, r1, r3
 8007b30:	f04f 0400 	mov.w	r4, #0
 8007b34:	f04f 0500 	mov.w	r5, #0
 8007b38:	00dd      	lsls	r5, r3, #3
 8007b3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b3e:	00d4      	lsls	r4, r2, #3
 8007b40:	4622      	mov	r2, r4
 8007b42:	462b      	mov	r3, r5
 8007b44:	1814      	adds	r4, r2, r0
 8007b46:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b48:	414b      	adcs	r3, r1
 8007b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f04f 0100 	mov.w	r1, #0
 8007b56:	f04f 0200 	mov.w	r2, #0
 8007b5a:	f04f 0300 	mov.w	r3, #0
 8007b5e:	008b      	lsls	r3, r1, #2
 8007b60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b64:	0082      	lsls	r2, r0, #2
 8007b66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b6a:	f7f8 fd6d 	bl	8000648 <__aeabi_uldivmod>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4b2f      	ldr	r3, [pc, #188]	; (8007c30 <UART_SetConfig+0x38c>)
 8007b74:	fba3 1302 	umull	r1, r3, r3, r2
 8007b78:	095b      	lsrs	r3, r3, #5
 8007b7a:	2164      	movs	r1, #100	; 0x64
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	3332      	adds	r3, #50	; 0x32
 8007b86:	4a2a      	ldr	r2, [pc, #168]	; (8007c30 <UART_SetConfig+0x38c>)
 8007b88:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b92:	441e      	add	r6, r3
 8007b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b96:	4618      	mov	r0, r3
 8007b98:	f04f 0100 	mov.w	r1, #0
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	1894      	adds	r4, r2, r2
 8007ba2:	603c      	str	r4, [r7, #0]
 8007ba4:	415b      	adcs	r3, r3
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bac:	1812      	adds	r2, r2, r0
 8007bae:	eb41 0303 	adc.w	r3, r1, r3
 8007bb2:	f04f 0400 	mov.w	r4, #0
 8007bb6:	f04f 0500 	mov.w	r5, #0
 8007bba:	00dd      	lsls	r5, r3, #3
 8007bbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bc0:	00d4      	lsls	r4, r2, #3
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	462b      	mov	r3, r5
 8007bc6:	eb12 0a00 	adds.w	sl, r2, r0
 8007bca:	eb43 0b01 	adc.w	fp, r3, r1
 8007bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f04f 0100 	mov.w	r1, #0
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	008b      	lsls	r3, r1, #2
 8007be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007be6:	0082      	lsls	r2, r0, #2
 8007be8:	4650      	mov	r0, sl
 8007bea:	4659      	mov	r1, fp
 8007bec:	f7f8 fd2c 	bl	8000648 <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <UART_SetConfig+0x38c>)
 8007bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	2164      	movs	r1, #100	; 0x64
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	3332      	adds	r3, #50	; 0x32
 8007c08:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <UART_SetConfig+0x38c>)
 8007c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0e:	095b      	lsrs	r3, r3, #5
 8007c10:	f003 020f 	and.w	r2, r3, #15
 8007c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4432      	add	r2, r6
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	377c      	adds	r7, #124	; 0x7c
 8007c20:	46bd      	mov	sp, r7
 8007c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c26:	bf00      	nop
 8007c28:	40011000 	.word	0x40011000
 8007c2c:	40011400 	.word	0x40011400
 8007c30:	51eb851f 	.word	0x51eb851f

08007c34 <__errno>:
 8007c34:	4b01      	ldr	r3, [pc, #4]	; (8007c3c <__errno+0x8>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	200000c4 	.word	0x200000c4

08007c40 <__libc_init_array>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	4d0d      	ldr	r5, [pc, #52]	; (8007c78 <__libc_init_array+0x38>)
 8007c44:	4c0d      	ldr	r4, [pc, #52]	; (8007c7c <__libc_init_array+0x3c>)
 8007c46:	1b64      	subs	r4, r4, r5
 8007c48:	10a4      	asrs	r4, r4, #2
 8007c4a:	2600      	movs	r6, #0
 8007c4c:	42a6      	cmp	r6, r4
 8007c4e:	d109      	bne.n	8007c64 <__libc_init_array+0x24>
 8007c50:	4d0b      	ldr	r5, [pc, #44]	; (8007c80 <__libc_init_array+0x40>)
 8007c52:	4c0c      	ldr	r4, [pc, #48]	; (8007c84 <__libc_init_array+0x44>)
 8007c54:	f000 fc80 	bl	8008558 <_init>
 8007c58:	1b64      	subs	r4, r4, r5
 8007c5a:	10a4      	asrs	r4, r4, #2
 8007c5c:	2600      	movs	r6, #0
 8007c5e:	42a6      	cmp	r6, r4
 8007c60:	d105      	bne.n	8007c6e <__libc_init_array+0x2e>
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c68:	4798      	blx	r3
 8007c6a:	3601      	adds	r6, #1
 8007c6c:	e7ee      	b.n	8007c4c <__libc_init_array+0xc>
 8007c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c72:	4798      	blx	r3
 8007c74:	3601      	adds	r6, #1
 8007c76:	e7f2      	b.n	8007c5e <__libc_init_array+0x1e>
 8007c78:	080085dc 	.word	0x080085dc
 8007c7c:	080085dc 	.word	0x080085dc
 8007c80:	080085dc 	.word	0x080085dc
 8007c84:	080085e0 	.word	0x080085e0

08007c88 <memset>:
 8007c88:	4402      	add	r2, r0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d100      	bne.n	8007c92 <memset+0xa>
 8007c90:	4770      	bx	lr
 8007c92:	f803 1b01 	strb.w	r1, [r3], #1
 8007c96:	e7f9      	b.n	8007c8c <memset+0x4>

08007c98 <siprintf>:
 8007c98:	b40e      	push	{r1, r2, r3}
 8007c9a:	b500      	push	{lr}
 8007c9c:	b09c      	sub	sp, #112	; 0x70
 8007c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8007ca0:	9002      	str	r0, [sp, #8]
 8007ca2:	9006      	str	r0, [sp, #24]
 8007ca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ca8:	4809      	ldr	r0, [pc, #36]	; (8007cd0 <siprintf+0x38>)
 8007caa:	9107      	str	r1, [sp, #28]
 8007cac:	9104      	str	r1, [sp, #16]
 8007cae:	4909      	ldr	r1, [pc, #36]	; (8007cd4 <siprintf+0x3c>)
 8007cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb4:	9105      	str	r1, [sp, #20]
 8007cb6:	6800      	ldr	r0, [r0, #0]
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	a902      	add	r1, sp, #8
 8007cbc:	f000 f868 	bl	8007d90 <_svfiprintf_r>
 8007cc0:	9b02      	ldr	r3, [sp, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	b01c      	add	sp, #112	; 0x70
 8007cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ccc:	b003      	add	sp, #12
 8007cce:	4770      	bx	lr
 8007cd0:	200000c4 	.word	0x200000c4
 8007cd4:	ffff0208 	.word	0xffff0208

08007cd8 <__ssputs_r>:
 8007cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	688e      	ldr	r6, [r1, #8]
 8007cde:	429e      	cmp	r6, r3
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	4690      	mov	r8, r2
 8007ce6:	461f      	mov	r7, r3
 8007ce8:	d838      	bhi.n	8007d5c <__ssputs_r+0x84>
 8007cea:	898a      	ldrh	r2, [r1, #12]
 8007cec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cf0:	d032      	beq.n	8007d58 <__ssputs_r+0x80>
 8007cf2:	6825      	ldr	r5, [r4, #0]
 8007cf4:	6909      	ldr	r1, [r1, #16]
 8007cf6:	eba5 0901 	sub.w	r9, r5, r1
 8007cfa:	6965      	ldr	r5, [r4, #20]
 8007cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d04:	3301      	adds	r3, #1
 8007d06:	444b      	add	r3, r9
 8007d08:	106d      	asrs	r5, r5, #1
 8007d0a:	429d      	cmp	r5, r3
 8007d0c:	bf38      	it	cc
 8007d0e:	461d      	movcc	r5, r3
 8007d10:	0553      	lsls	r3, r2, #21
 8007d12:	d531      	bpl.n	8007d78 <__ssputs_r+0xa0>
 8007d14:	4629      	mov	r1, r5
 8007d16:	f000 fb47 	bl	80083a8 <_malloc_r>
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	b950      	cbnz	r0, 8007d34 <__ssputs_r+0x5c>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	f8ca 3000 	str.w	r3, [sl]
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d34:	6921      	ldr	r1, [r4, #16]
 8007d36:	464a      	mov	r2, r9
 8007d38:	f000 fabe 	bl	80082b8 <memcpy>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d46:	81a3      	strh	r3, [r4, #12]
 8007d48:	6126      	str	r6, [r4, #16]
 8007d4a:	6165      	str	r5, [r4, #20]
 8007d4c:	444e      	add	r6, r9
 8007d4e:	eba5 0509 	sub.w	r5, r5, r9
 8007d52:	6026      	str	r6, [r4, #0]
 8007d54:	60a5      	str	r5, [r4, #8]
 8007d56:	463e      	mov	r6, r7
 8007d58:	42be      	cmp	r6, r7
 8007d5a:	d900      	bls.n	8007d5e <__ssputs_r+0x86>
 8007d5c:	463e      	mov	r6, r7
 8007d5e:	4632      	mov	r2, r6
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	4641      	mov	r1, r8
 8007d64:	f000 fab6 	bl	80082d4 <memmove>
 8007d68:	68a3      	ldr	r3, [r4, #8]
 8007d6a:	6822      	ldr	r2, [r4, #0]
 8007d6c:	1b9b      	subs	r3, r3, r6
 8007d6e:	4432      	add	r2, r6
 8007d70:	60a3      	str	r3, [r4, #8]
 8007d72:	6022      	str	r2, [r4, #0]
 8007d74:	2000      	movs	r0, #0
 8007d76:	e7db      	b.n	8007d30 <__ssputs_r+0x58>
 8007d78:	462a      	mov	r2, r5
 8007d7a:	f000 fb6f 	bl	800845c <_realloc_r>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1e1      	bne.n	8007d48 <__ssputs_r+0x70>
 8007d84:	6921      	ldr	r1, [r4, #16]
 8007d86:	4650      	mov	r0, sl
 8007d88:	f000 fabe 	bl	8008308 <_free_r>
 8007d8c:	e7c7      	b.n	8007d1e <__ssputs_r+0x46>
	...

08007d90 <_svfiprintf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	4698      	mov	r8, r3
 8007d96:	898b      	ldrh	r3, [r1, #12]
 8007d98:	061b      	lsls	r3, r3, #24
 8007d9a:	b09d      	sub	sp, #116	; 0x74
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	460d      	mov	r5, r1
 8007da0:	4614      	mov	r4, r2
 8007da2:	d50e      	bpl.n	8007dc2 <_svfiprintf_r+0x32>
 8007da4:	690b      	ldr	r3, [r1, #16]
 8007da6:	b963      	cbnz	r3, 8007dc2 <_svfiprintf_r+0x32>
 8007da8:	2140      	movs	r1, #64	; 0x40
 8007daa:	f000 fafd 	bl	80083a8 <_malloc_r>
 8007dae:	6028      	str	r0, [r5, #0]
 8007db0:	6128      	str	r0, [r5, #16]
 8007db2:	b920      	cbnz	r0, 8007dbe <_svfiprintf_r+0x2e>
 8007db4:	230c      	movs	r3, #12
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	e0d1      	b.n	8007f62 <_svfiprintf_r+0x1d2>
 8007dbe:	2340      	movs	r3, #64	; 0x40
 8007dc0:	616b      	str	r3, [r5, #20]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd0:	2330      	movs	r3, #48	; 0x30
 8007dd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f7c <_svfiprintf_r+0x1ec>
 8007dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dda:	f04f 0901 	mov.w	r9, #1
 8007dde:	4623      	mov	r3, r4
 8007de0:	469a      	mov	sl, r3
 8007de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de6:	b10a      	cbz	r2, 8007dec <_svfiprintf_r+0x5c>
 8007de8:	2a25      	cmp	r2, #37	; 0x25
 8007dea:	d1f9      	bne.n	8007de0 <_svfiprintf_r+0x50>
 8007dec:	ebba 0b04 	subs.w	fp, sl, r4
 8007df0:	d00b      	beq.n	8007e0a <_svfiprintf_r+0x7a>
 8007df2:	465b      	mov	r3, fp
 8007df4:	4622      	mov	r2, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ff6d 	bl	8007cd8 <__ssputs_r>
 8007dfe:	3001      	adds	r0, #1
 8007e00:	f000 80aa 	beq.w	8007f58 <_svfiprintf_r+0x1c8>
 8007e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e06:	445a      	add	r2, fp
 8007e08:	9209      	str	r2, [sp, #36]	; 0x24
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a2 	beq.w	8007f58 <_svfiprintf_r+0x1c8>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e1e:	f10a 0a01 	add.w	sl, sl, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	9307      	str	r3, [sp, #28]
 8007e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e2c:	4654      	mov	r4, sl
 8007e2e:	2205      	movs	r2, #5
 8007e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e34:	4851      	ldr	r0, [pc, #324]	; (8007f7c <_svfiprintf_r+0x1ec>)
 8007e36:	f7f8 f9db 	bl	80001f0 <memchr>
 8007e3a:	9a04      	ldr	r2, [sp, #16]
 8007e3c:	b9d8      	cbnz	r0, 8007e76 <_svfiprintf_r+0xe6>
 8007e3e:	06d0      	lsls	r0, r2, #27
 8007e40:	bf44      	itt	mi
 8007e42:	2320      	movmi	r3, #32
 8007e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e48:	0711      	lsls	r1, r2, #28
 8007e4a:	bf44      	itt	mi
 8007e4c:	232b      	movmi	r3, #43	; 0x2b
 8007e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e52:	f89a 3000 	ldrb.w	r3, [sl]
 8007e56:	2b2a      	cmp	r3, #42	; 0x2a
 8007e58:	d015      	beq.n	8007e86 <_svfiprintf_r+0xf6>
 8007e5a:	9a07      	ldr	r2, [sp, #28]
 8007e5c:	4654      	mov	r4, sl
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f04f 0c0a 	mov.w	ip, #10
 8007e64:	4621      	mov	r1, r4
 8007e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e6a:	3b30      	subs	r3, #48	; 0x30
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d94e      	bls.n	8007f0e <_svfiprintf_r+0x17e>
 8007e70:	b1b0      	cbz	r0, 8007ea0 <_svfiprintf_r+0x110>
 8007e72:	9207      	str	r2, [sp, #28]
 8007e74:	e014      	b.n	8007ea0 <_svfiprintf_r+0x110>
 8007e76:	eba0 0308 	sub.w	r3, r0, r8
 8007e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	46a2      	mov	sl, r4
 8007e84:	e7d2      	b.n	8007e2c <_svfiprintf_r+0x9c>
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	1d19      	adds	r1, r3, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	9103      	str	r1, [sp, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfbb      	ittet	lt
 8007e92:	425b      	neglt	r3, r3
 8007e94:	f042 0202 	orrlt.w	r2, r2, #2
 8007e98:	9307      	strge	r3, [sp, #28]
 8007e9a:	9307      	strlt	r3, [sp, #28]
 8007e9c:	bfb8      	it	lt
 8007e9e:	9204      	strlt	r2, [sp, #16]
 8007ea0:	7823      	ldrb	r3, [r4, #0]
 8007ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea4:	d10c      	bne.n	8007ec0 <_svfiprintf_r+0x130>
 8007ea6:	7863      	ldrb	r3, [r4, #1]
 8007ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eaa:	d135      	bne.n	8007f18 <_svfiprintf_r+0x188>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	1d1a      	adds	r2, r3, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	9203      	str	r2, [sp, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bfb8      	it	lt
 8007eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ebc:	3402      	adds	r4, #2
 8007ebe:	9305      	str	r3, [sp, #20]
 8007ec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f8c <_svfiprintf_r+0x1fc>
 8007ec4:	7821      	ldrb	r1, [r4, #0]
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	4650      	mov	r0, sl
 8007eca:	f7f8 f991 	bl	80001f0 <memchr>
 8007ece:	b140      	cbz	r0, 8007ee2 <_svfiprintf_r+0x152>
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	eba0 000a 	sub.w	r0, r0, sl
 8007ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8007eda:	9b04      	ldr	r3, [sp, #16]
 8007edc:	4303      	orrs	r3, r0
 8007ede:	3401      	adds	r4, #1
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee6:	4826      	ldr	r0, [pc, #152]	; (8007f80 <_svfiprintf_r+0x1f0>)
 8007ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eec:	2206      	movs	r2, #6
 8007eee:	f7f8 f97f 	bl	80001f0 <memchr>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d038      	beq.n	8007f68 <_svfiprintf_r+0x1d8>
 8007ef6:	4b23      	ldr	r3, [pc, #140]	; (8007f84 <_svfiprintf_r+0x1f4>)
 8007ef8:	bb1b      	cbnz	r3, 8007f42 <_svfiprintf_r+0x1b2>
 8007efa:	9b03      	ldr	r3, [sp, #12]
 8007efc:	3307      	adds	r3, #7
 8007efe:	f023 0307 	bic.w	r3, r3, #7
 8007f02:	3308      	adds	r3, #8
 8007f04:	9303      	str	r3, [sp, #12]
 8007f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f08:	4433      	add	r3, r6
 8007f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0c:	e767      	b.n	8007dde <_svfiprintf_r+0x4e>
 8007f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f12:	460c      	mov	r4, r1
 8007f14:	2001      	movs	r0, #1
 8007f16:	e7a5      	b.n	8007e64 <_svfiprintf_r+0xd4>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	3401      	adds	r4, #1
 8007f1c:	9305      	str	r3, [sp, #20]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	f04f 0c0a 	mov.w	ip, #10
 8007f24:	4620      	mov	r0, r4
 8007f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f2a:	3a30      	subs	r2, #48	; 0x30
 8007f2c:	2a09      	cmp	r2, #9
 8007f2e:	d903      	bls.n	8007f38 <_svfiprintf_r+0x1a8>
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0c5      	beq.n	8007ec0 <_svfiprintf_r+0x130>
 8007f34:	9105      	str	r1, [sp, #20]
 8007f36:	e7c3      	b.n	8007ec0 <_svfiprintf_r+0x130>
 8007f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e7f0      	b.n	8007f24 <_svfiprintf_r+0x194>
 8007f42:	ab03      	add	r3, sp, #12
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	462a      	mov	r2, r5
 8007f48:	4b0f      	ldr	r3, [pc, #60]	; (8007f88 <_svfiprintf_r+0x1f8>)
 8007f4a:	a904      	add	r1, sp, #16
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f3af 8000 	nop.w
 8007f52:	1c42      	adds	r2, r0, #1
 8007f54:	4606      	mov	r6, r0
 8007f56:	d1d6      	bne.n	8007f06 <_svfiprintf_r+0x176>
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	065b      	lsls	r3, r3, #25
 8007f5c:	f53f af2c 	bmi.w	8007db8 <_svfiprintf_r+0x28>
 8007f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f62:	b01d      	add	sp, #116	; 0x74
 8007f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f68:	ab03      	add	r3, sp, #12
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	462a      	mov	r2, r5
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <_svfiprintf_r+0x1f8>)
 8007f70:	a904      	add	r1, sp, #16
 8007f72:	4638      	mov	r0, r7
 8007f74:	f000 f87a 	bl	800806c <_printf_i>
 8007f78:	e7eb      	b.n	8007f52 <_svfiprintf_r+0x1c2>
 8007f7a:	bf00      	nop
 8007f7c:	080085a0 	.word	0x080085a0
 8007f80:	080085aa 	.word	0x080085aa
 8007f84:	00000000 	.word	0x00000000
 8007f88:	08007cd9 	.word	0x08007cd9
 8007f8c:	080085a6 	.word	0x080085a6

08007f90 <_printf_common>:
 8007f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	4616      	mov	r6, r2
 8007f96:	4699      	mov	r9, r3
 8007f98:	688a      	ldr	r2, [r1, #8]
 8007f9a:	690b      	ldr	r3, [r1, #16]
 8007f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bfb8      	it	lt
 8007fa4:	4613      	movlt	r3, r2
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fac:	4607      	mov	r7, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b10a      	cbz	r2, 8007fb6 <_printf_common+0x26>
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	0699      	lsls	r1, r3, #26
 8007fba:	bf42      	ittt	mi
 8007fbc:	6833      	ldrmi	r3, [r6, #0]
 8007fbe:	3302      	addmi	r3, #2
 8007fc0:	6033      	strmi	r3, [r6, #0]
 8007fc2:	6825      	ldr	r5, [r4, #0]
 8007fc4:	f015 0506 	ands.w	r5, r5, #6
 8007fc8:	d106      	bne.n	8007fd8 <_printf_common+0x48>
 8007fca:	f104 0a19 	add.w	sl, r4, #25
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	6832      	ldr	r2, [r6, #0]
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	dc26      	bgt.n	8008026 <_printf_common+0x96>
 8007fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fdc:	1e13      	subs	r3, r2, #0
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	0692      	lsls	r2, r2, #26
 8007fe6:	d42b      	bmi.n	8008040 <_printf_common+0xb0>
 8007fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fec:	4649      	mov	r1, r9
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c0      	blx	r8
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d01e      	beq.n	8008034 <_printf_common+0xa4>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	68e5      	ldr	r5, [r4, #12]
 8007ffa:	6832      	ldr	r2, [r6, #0]
 8007ffc:	f003 0306 	and.w	r3, r3, #6
 8008000:	2b04      	cmp	r3, #4
 8008002:	bf08      	it	eq
 8008004:	1aad      	subeq	r5, r5, r2
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	6922      	ldr	r2, [r4, #16]
 800800a:	bf0c      	ite	eq
 800800c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008010:	2500      	movne	r5, #0
 8008012:	4293      	cmp	r3, r2
 8008014:	bfc4      	itt	gt
 8008016:	1a9b      	subgt	r3, r3, r2
 8008018:	18ed      	addgt	r5, r5, r3
 800801a:	2600      	movs	r6, #0
 800801c:	341a      	adds	r4, #26
 800801e:	42b5      	cmp	r5, r6
 8008020:	d11a      	bne.n	8008058 <_printf_common+0xc8>
 8008022:	2000      	movs	r0, #0
 8008024:	e008      	b.n	8008038 <_printf_common+0xa8>
 8008026:	2301      	movs	r3, #1
 8008028:	4652      	mov	r2, sl
 800802a:	4649      	mov	r1, r9
 800802c:	4638      	mov	r0, r7
 800802e:	47c0      	blx	r8
 8008030:	3001      	adds	r0, #1
 8008032:	d103      	bne.n	800803c <_printf_common+0xac>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803c:	3501      	adds	r5, #1
 800803e:	e7c6      	b.n	8007fce <_printf_common+0x3e>
 8008040:	18e1      	adds	r1, r4, r3
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	2030      	movs	r0, #48	; 0x30
 8008046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800804a:	4422      	add	r2, r4
 800804c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008054:	3302      	adds	r3, #2
 8008056:	e7c7      	b.n	8007fe8 <_printf_common+0x58>
 8008058:	2301      	movs	r3, #1
 800805a:	4622      	mov	r2, r4
 800805c:	4649      	mov	r1, r9
 800805e:	4638      	mov	r0, r7
 8008060:	47c0      	blx	r8
 8008062:	3001      	adds	r0, #1
 8008064:	d0e6      	beq.n	8008034 <_printf_common+0xa4>
 8008066:	3601      	adds	r6, #1
 8008068:	e7d9      	b.n	800801e <_printf_common+0x8e>
	...

0800806c <_printf_i>:
 800806c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	460c      	mov	r4, r1
 8008072:	4691      	mov	r9, r2
 8008074:	7e27      	ldrb	r7, [r4, #24]
 8008076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008078:	2f78      	cmp	r7, #120	; 0x78
 800807a:	4680      	mov	r8, r0
 800807c:	469a      	mov	sl, r3
 800807e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008082:	d807      	bhi.n	8008094 <_printf_i+0x28>
 8008084:	2f62      	cmp	r7, #98	; 0x62
 8008086:	d80a      	bhi.n	800809e <_printf_i+0x32>
 8008088:	2f00      	cmp	r7, #0
 800808a:	f000 80d8 	beq.w	800823e <_printf_i+0x1d2>
 800808e:	2f58      	cmp	r7, #88	; 0x58
 8008090:	f000 80a3 	beq.w	80081da <_printf_i+0x16e>
 8008094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800809c:	e03a      	b.n	8008114 <_printf_i+0xa8>
 800809e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080a2:	2b15      	cmp	r3, #21
 80080a4:	d8f6      	bhi.n	8008094 <_printf_i+0x28>
 80080a6:	a001      	add	r0, pc, #4	; (adr r0, 80080ac <_printf_i+0x40>)
 80080a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80080ac:	08008105 	.word	0x08008105
 80080b0:	08008119 	.word	0x08008119
 80080b4:	08008095 	.word	0x08008095
 80080b8:	08008095 	.word	0x08008095
 80080bc:	08008095 	.word	0x08008095
 80080c0:	08008095 	.word	0x08008095
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008095 	.word	0x08008095
 80080cc:	08008095 	.word	0x08008095
 80080d0:	08008095 	.word	0x08008095
 80080d4:	08008095 	.word	0x08008095
 80080d8:	08008225 	.word	0x08008225
 80080dc:	08008149 	.word	0x08008149
 80080e0:	08008207 	.word	0x08008207
 80080e4:	08008095 	.word	0x08008095
 80080e8:	08008095 	.word	0x08008095
 80080ec:	08008247 	.word	0x08008247
 80080f0:	08008095 	.word	0x08008095
 80080f4:	08008149 	.word	0x08008149
 80080f8:	08008095 	.word	0x08008095
 80080fc:	08008095 	.word	0x08008095
 8008100:	0800820f 	.word	0x0800820f
 8008104:	680b      	ldr	r3, [r1, #0]
 8008106:	1d1a      	adds	r2, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	600a      	str	r2, [r1, #0]
 800810c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008114:	2301      	movs	r3, #1
 8008116:	e0a3      	b.n	8008260 <_printf_i+0x1f4>
 8008118:	6825      	ldr	r5, [r4, #0]
 800811a:	6808      	ldr	r0, [r1, #0]
 800811c:	062e      	lsls	r6, r5, #24
 800811e:	f100 0304 	add.w	r3, r0, #4
 8008122:	d50a      	bpl.n	800813a <_printf_i+0xce>
 8008124:	6805      	ldr	r5, [r0, #0]
 8008126:	600b      	str	r3, [r1, #0]
 8008128:	2d00      	cmp	r5, #0
 800812a:	da03      	bge.n	8008134 <_printf_i+0xc8>
 800812c:	232d      	movs	r3, #45	; 0x2d
 800812e:	426d      	negs	r5, r5
 8008130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008134:	485e      	ldr	r0, [pc, #376]	; (80082b0 <_printf_i+0x244>)
 8008136:	230a      	movs	r3, #10
 8008138:	e019      	b.n	800816e <_printf_i+0x102>
 800813a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800813e:	6805      	ldr	r5, [r0, #0]
 8008140:	600b      	str	r3, [r1, #0]
 8008142:	bf18      	it	ne
 8008144:	b22d      	sxthne	r5, r5
 8008146:	e7ef      	b.n	8008128 <_printf_i+0xbc>
 8008148:	680b      	ldr	r3, [r1, #0]
 800814a:	6825      	ldr	r5, [r4, #0]
 800814c:	1d18      	adds	r0, r3, #4
 800814e:	6008      	str	r0, [r1, #0]
 8008150:	0628      	lsls	r0, r5, #24
 8008152:	d501      	bpl.n	8008158 <_printf_i+0xec>
 8008154:	681d      	ldr	r5, [r3, #0]
 8008156:	e002      	b.n	800815e <_printf_i+0xf2>
 8008158:	0669      	lsls	r1, r5, #25
 800815a:	d5fb      	bpl.n	8008154 <_printf_i+0xe8>
 800815c:	881d      	ldrh	r5, [r3, #0]
 800815e:	4854      	ldr	r0, [pc, #336]	; (80082b0 <_printf_i+0x244>)
 8008160:	2f6f      	cmp	r7, #111	; 0x6f
 8008162:	bf0c      	ite	eq
 8008164:	2308      	moveq	r3, #8
 8008166:	230a      	movne	r3, #10
 8008168:	2100      	movs	r1, #0
 800816a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800816e:	6866      	ldr	r6, [r4, #4]
 8008170:	60a6      	str	r6, [r4, #8]
 8008172:	2e00      	cmp	r6, #0
 8008174:	bfa2      	ittt	ge
 8008176:	6821      	ldrge	r1, [r4, #0]
 8008178:	f021 0104 	bicge.w	r1, r1, #4
 800817c:	6021      	strge	r1, [r4, #0]
 800817e:	b90d      	cbnz	r5, 8008184 <_printf_i+0x118>
 8008180:	2e00      	cmp	r6, #0
 8008182:	d04d      	beq.n	8008220 <_printf_i+0x1b4>
 8008184:	4616      	mov	r6, r2
 8008186:	fbb5 f1f3 	udiv	r1, r5, r3
 800818a:	fb03 5711 	mls	r7, r3, r1, r5
 800818e:	5dc7      	ldrb	r7, [r0, r7]
 8008190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008194:	462f      	mov	r7, r5
 8008196:	42bb      	cmp	r3, r7
 8008198:	460d      	mov	r5, r1
 800819a:	d9f4      	bls.n	8008186 <_printf_i+0x11a>
 800819c:	2b08      	cmp	r3, #8
 800819e:	d10b      	bne.n	80081b8 <_printf_i+0x14c>
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	07df      	lsls	r7, r3, #31
 80081a4:	d508      	bpl.n	80081b8 <_printf_i+0x14c>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4299      	cmp	r1, r3
 80081ac:	bfde      	ittt	le
 80081ae:	2330      	movle	r3, #48	; 0x30
 80081b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081b8:	1b92      	subs	r2, r2, r6
 80081ba:	6122      	str	r2, [r4, #16]
 80081bc:	f8cd a000 	str.w	sl, [sp]
 80081c0:	464b      	mov	r3, r9
 80081c2:	aa03      	add	r2, sp, #12
 80081c4:	4621      	mov	r1, r4
 80081c6:	4640      	mov	r0, r8
 80081c8:	f7ff fee2 	bl	8007f90 <_printf_common>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d14c      	bne.n	800826a <_printf_i+0x1fe>
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	b004      	add	sp, #16
 80081d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081da:	4835      	ldr	r0, [pc, #212]	; (80082b0 <_printf_i+0x244>)
 80081dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	680e      	ldr	r6, [r1, #0]
 80081e4:	061f      	lsls	r7, r3, #24
 80081e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80081ea:	600e      	str	r6, [r1, #0]
 80081ec:	d514      	bpl.n	8008218 <_printf_i+0x1ac>
 80081ee:	07d9      	lsls	r1, r3, #31
 80081f0:	bf44      	itt	mi
 80081f2:	f043 0320 	orrmi.w	r3, r3, #32
 80081f6:	6023      	strmi	r3, [r4, #0]
 80081f8:	b91d      	cbnz	r5, 8008202 <_printf_i+0x196>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	f023 0320 	bic.w	r3, r3, #32
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	2310      	movs	r3, #16
 8008204:	e7b0      	b.n	8008168 <_printf_i+0xfc>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	f043 0320 	orr.w	r3, r3, #32
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	2378      	movs	r3, #120	; 0x78
 8008210:	4828      	ldr	r0, [pc, #160]	; (80082b4 <_printf_i+0x248>)
 8008212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008216:	e7e3      	b.n	80081e0 <_printf_i+0x174>
 8008218:	065e      	lsls	r6, r3, #25
 800821a:	bf48      	it	mi
 800821c:	b2ad      	uxthmi	r5, r5
 800821e:	e7e6      	b.n	80081ee <_printf_i+0x182>
 8008220:	4616      	mov	r6, r2
 8008222:	e7bb      	b.n	800819c <_printf_i+0x130>
 8008224:	680b      	ldr	r3, [r1, #0]
 8008226:	6826      	ldr	r6, [r4, #0]
 8008228:	6960      	ldr	r0, [r4, #20]
 800822a:	1d1d      	adds	r5, r3, #4
 800822c:	600d      	str	r5, [r1, #0]
 800822e:	0635      	lsls	r5, r6, #24
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	d501      	bpl.n	8008238 <_printf_i+0x1cc>
 8008234:	6018      	str	r0, [r3, #0]
 8008236:	e002      	b.n	800823e <_printf_i+0x1d2>
 8008238:	0671      	lsls	r1, r6, #25
 800823a:	d5fb      	bpl.n	8008234 <_printf_i+0x1c8>
 800823c:	8018      	strh	r0, [r3, #0]
 800823e:	2300      	movs	r3, #0
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	4616      	mov	r6, r2
 8008244:	e7ba      	b.n	80081bc <_printf_i+0x150>
 8008246:	680b      	ldr	r3, [r1, #0]
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	600a      	str	r2, [r1, #0]
 800824c:	681e      	ldr	r6, [r3, #0]
 800824e:	6862      	ldr	r2, [r4, #4]
 8008250:	2100      	movs	r1, #0
 8008252:	4630      	mov	r0, r6
 8008254:	f7f7 ffcc 	bl	80001f0 <memchr>
 8008258:	b108      	cbz	r0, 800825e <_printf_i+0x1f2>
 800825a:	1b80      	subs	r0, r0, r6
 800825c:	6060      	str	r0, [r4, #4]
 800825e:	6863      	ldr	r3, [r4, #4]
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	2300      	movs	r3, #0
 8008264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008268:	e7a8      	b.n	80081bc <_printf_i+0x150>
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	4632      	mov	r2, r6
 800826e:	4649      	mov	r1, r9
 8008270:	4640      	mov	r0, r8
 8008272:	47d0      	blx	sl
 8008274:	3001      	adds	r0, #1
 8008276:	d0ab      	beq.n	80081d0 <_printf_i+0x164>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	079b      	lsls	r3, r3, #30
 800827c:	d413      	bmi.n	80082a6 <_printf_i+0x23a>
 800827e:	68e0      	ldr	r0, [r4, #12]
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	4298      	cmp	r0, r3
 8008284:	bfb8      	it	lt
 8008286:	4618      	movlt	r0, r3
 8008288:	e7a4      	b.n	80081d4 <_printf_i+0x168>
 800828a:	2301      	movs	r3, #1
 800828c:	4632      	mov	r2, r6
 800828e:	4649      	mov	r1, r9
 8008290:	4640      	mov	r0, r8
 8008292:	47d0      	blx	sl
 8008294:	3001      	adds	r0, #1
 8008296:	d09b      	beq.n	80081d0 <_printf_i+0x164>
 8008298:	3501      	adds	r5, #1
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	9903      	ldr	r1, [sp, #12]
 800829e:	1a5b      	subs	r3, r3, r1
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	dcf2      	bgt.n	800828a <_printf_i+0x21e>
 80082a4:	e7eb      	b.n	800827e <_printf_i+0x212>
 80082a6:	2500      	movs	r5, #0
 80082a8:	f104 0619 	add.w	r6, r4, #25
 80082ac:	e7f5      	b.n	800829a <_printf_i+0x22e>
 80082ae:	bf00      	nop
 80082b0:	080085b1 	.word	0x080085b1
 80082b4:	080085c2 	.word	0x080085c2

080082b8 <memcpy>:
 80082b8:	440a      	add	r2, r1
 80082ba:	4291      	cmp	r1, r2
 80082bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082c0:	d100      	bne.n	80082c4 <memcpy+0xc>
 80082c2:	4770      	bx	lr
 80082c4:	b510      	push	{r4, lr}
 80082c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ce:	4291      	cmp	r1, r2
 80082d0:	d1f9      	bne.n	80082c6 <memcpy+0xe>
 80082d2:	bd10      	pop	{r4, pc}

080082d4 <memmove>:
 80082d4:	4288      	cmp	r0, r1
 80082d6:	b510      	push	{r4, lr}
 80082d8:	eb01 0402 	add.w	r4, r1, r2
 80082dc:	d902      	bls.n	80082e4 <memmove+0x10>
 80082de:	4284      	cmp	r4, r0
 80082e0:	4623      	mov	r3, r4
 80082e2:	d807      	bhi.n	80082f4 <memmove+0x20>
 80082e4:	1e43      	subs	r3, r0, #1
 80082e6:	42a1      	cmp	r1, r4
 80082e8:	d008      	beq.n	80082fc <memmove+0x28>
 80082ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082f2:	e7f8      	b.n	80082e6 <memmove+0x12>
 80082f4:	4402      	add	r2, r0
 80082f6:	4601      	mov	r1, r0
 80082f8:	428a      	cmp	r2, r1
 80082fa:	d100      	bne.n	80082fe <memmove+0x2a>
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008306:	e7f7      	b.n	80082f8 <memmove+0x24>

08008308 <_free_r>:
 8008308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800830a:	2900      	cmp	r1, #0
 800830c:	d048      	beq.n	80083a0 <_free_r+0x98>
 800830e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008312:	9001      	str	r0, [sp, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f1a1 0404 	sub.w	r4, r1, #4
 800831a:	bfb8      	it	lt
 800831c:	18e4      	addlt	r4, r4, r3
 800831e:	f000 f8d3 	bl	80084c8 <__malloc_lock>
 8008322:	4a20      	ldr	r2, [pc, #128]	; (80083a4 <_free_r+0x9c>)
 8008324:	9801      	ldr	r0, [sp, #4]
 8008326:	6813      	ldr	r3, [r2, #0]
 8008328:	4615      	mov	r5, r2
 800832a:	b933      	cbnz	r3, 800833a <_free_r+0x32>
 800832c:	6063      	str	r3, [r4, #4]
 800832e:	6014      	str	r4, [r2, #0]
 8008330:	b003      	add	sp, #12
 8008332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008336:	f000 b8cd 	b.w	80084d4 <__malloc_unlock>
 800833a:	42a3      	cmp	r3, r4
 800833c:	d90b      	bls.n	8008356 <_free_r+0x4e>
 800833e:	6821      	ldr	r1, [r4, #0]
 8008340:	1862      	adds	r2, r4, r1
 8008342:	4293      	cmp	r3, r2
 8008344:	bf04      	itt	eq
 8008346:	681a      	ldreq	r2, [r3, #0]
 8008348:	685b      	ldreq	r3, [r3, #4]
 800834a:	6063      	str	r3, [r4, #4]
 800834c:	bf04      	itt	eq
 800834e:	1852      	addeq	r2, r2, r1
 8008350:	6022      	streq	r2, [r4, #0]
 8008352:	602c      	str	r4, [r5, #0]
 8008354:	e7ec      	b.n	8008330 <_free_r+0x28>
 8008356:	461a      	mov	r2, r3
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	b10b      	cbz	r3, 8008360 <_free_r+0x58>
 800835c:	42a3      	cmp	r3, r4
 800835e:	d9fa      	bls.n	8008356 <_free_r+0x4e>
 8008360:	6811      	ldr	r1, [r2, #0]
 8008362:	1855      	adds	r5, r2, r1
 8008364:	42a5      	cmp	r5, r4
 8008366:	d10b      	bne.n	8008380 <_free_r+0x78>
 8008368:	6824      	ldr	r4, [r4, #0]
 800836a:	4421      	add	r1, r4
 800836c:	1854      	adds	r4, r2, r1
 800836e:	42a3      	cmp	r3, r4
 8008370:	6011      	str	r1, [r2, #0]
 8008372:	d1dd      	bne.n	8008330 <_free_r+0x28>
 8008374:	681c      	ldr	r4, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	6053      	str	r3, [r2, #4]
 800837a:	4421      	add	r1, r4
 800837c:	6011      	str	r1, [r2, #0]
 800837e:	e7d7      	b.n	8008330 <_free_r+0x28>
 8008380:	d902      	bls.n	8008388 <_free_r+0x80>
 8008382:	230c      	movs	r3, #12
 8008384:	6003      	str	r3, [r0, #0]
 8008386:	e7d3      	b.n	8008330 <_free_r+0x28>
 8008388:	6825      	ldr	r5, [r4, #0]
 800838a:	1961      	adds	r1, r4, r5
 800838c:	428b      	cmp	r3, r1
 800838e:	bf04      	itt	eq
 8008390:	6819      	ldreq	r1, [r3, #0]
 8008392:	685b      	ldreq	r3, [r3, #4]
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	bf04      	itt	eq
 8008398:	1949      	addeq	r1, r1, r5
 800839a:	6021      	streq	r1, [r4, #0]
 800839c:	6054      	str	r4, [r2, #4]
 800839e:	e7c7      	b.n	8008330 <_free_r+0x28>
 80083a0:	b003      	add	sp, #12
 80083a2:	bd30      	pop	{r4, r5, pc}
 80083a4:	20000238 	.word	0x20000238

080083a8 <_malloc_r>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	1ccd      	adds	r5, r1, #3
 80083ac:	f025 0503 	bic.w	r5, r5, #3
 80083b0:	3508      	adds	r5, #8
 80083b2:	2d0c      	cmp	r5, #12
 80083b4:	bf38      	it	cc
 80083b6:	250c      	movcc	r5, #12
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	4606      	mov	r6, r0
 80083bc:	db01      	blt.n	80083c2 <_malloc_r+0x1a>
 80083be:	42a9      	cmp	r1, r5
 80083c0:	d903      	bls.n	80083ca <_malloc_r+0x22>
 80083c2:	230c      	movs	r3, #12
 80083c4:	6033      	str	r3, [r6, #0]
 80083c6:	2000      	movs	r0, #0
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ca:	f000 f87d 	bl	80084c8 <__malloc_lock>
 80083ce:	4921      	ldr	r1, [pc, #132]	; (8008454 <_malloc_r+0xac>)
 80083d0:	680a      	ldr	r2, [r1, #0]
 80083d2:	4614      	mov	r4, r2
 80083d4:	b99c      	cbnz	r4, 80083fe <_malloc_r+0x56>
 80083d6:	4f20      	ldr	r7, [pc, #128]	; (8008458 <_malloc_r+0xb0>)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	b923      	cbnz	r3, 80083e6 <_malloc_r+0x3e>
 80083dc:	4621      	mov	r1, r4
 80083de:	4630      	mov	r0, r6
 80083e0:	f000 f862 	bl	80084a8 <_sbrk_r>
 80083e4:	6038      	str	r0, [r7, #0]
 80083e6:	4629      	mov	r1, r5
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f85d 	bl	80084a8 <_sbrk_r>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	d123      	bne.n	800843a <_malloc_r+0x92>
 80083f2:	230c      	movs	r3, #12
 80083f4:	6033      	str	r3, [r6, #0]
 80083f6:	4630      	mov	r0, r6
 80083f8:	f000 f86c 	bl	80084d4 <__malloc_unlock>
 80083fc:	e7e3      	b.n	80083c6 <_malloc_r+0x1e>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	1b5b      	subs	r3, r3, r5
 8008402:	d417      	bmi.n	8008434 <_malloc_r+0x8c>
 8008404:	2b0b      	cmp	r3, #11
 8008406:	d903      	bls.n	8008410 <_malloc_r+0x68>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	441c      	add	r4, r3
 800840c:	6025      	str	r5, [r4, #0]
 800840e:	e004      	b.n	800841a <_malloc_r+0x72>
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	42a2      	cmp	r2, r4
 8008414:	bf0c      	ite	eq
 8008416:	600b      	streq	r3, [r1, #0]
 8008418:	6053      	strne	r3, [r2, #4]
 800841a:	4630      	mov	r0, r6
 800841c:	f000 f85a 	bl	80084d4 <__malloc_unlock>
 8008420:	f104 000b 	add.w	r0, r4, #11
 8008424:	1d23      	adds	r3, r4, #4
 8008426:	f020 0007 	bic.w	r0, r0, #7
 800842a:	1ac2      	subs	r2, r0, r3
 800842c:	d0cc      	beq.n	80083c8 <_malloc_r+0x20>
 800842e:	1a1b      	subs	r3, r3, r0
 8008430:	50a3      	str	r3, [r4, r2]
 8008432:	e7c9      	b.n	80083c8 <_malloc_r+0x20>
 8008434:	4622      	mov	r2, r4
 8008436:	6864      	ldr	r4, [r4, #4]
 8008438:	e7cc      	b.n	80083d4 <_malloc_r+0x2c>
 800843a:	1cc4      	adds	r4, r0, #3
 800843c:	f024 0403 	bic.w	r4, r4, #3
 8008440:	42a0      	cmp	r0, r4
 8008442:	d0e3      	beq.n	800840c <_malloc_r+0x64>
 8008444:	1a21      	subs	r1, r4, r0
 8008446:	4630      	mov	r0, r6
 8008448:	f000 f82e 	bl	80084a8 <_sbrk_r>
 800844c:	3001      	adds	r0, #1
 800844e:	d1dd      	bne.n	800840c <_malloc_r+0x64>
 8008450:	e7cf      	b.n	80083f2 <_malloc_r+0x4a>
 8008452:	bf00      	nop
 8008454:	20000238 	.word	0x20000238
 8008458:	2000023c 	.word	0x2000023c

0800845c <_realloc_r>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	4607      	mov	r7, r0
 8008460:	4614      	mov	r4, r2
 8008462:	460e      	mov	r6, r1
 8008464:	b921      	cbnz	r1, 8008470 <_realloc_r+0x14>
 8008466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800846a:	4611      	mov	r1, r2
 800846c:	f7ff bf9c 	b.w	80083a8 <_malloc_r>
 8008470:	b922      	cbnz	r2, 800847c <_realloc_r+0x20>
 8008472:	f7ff ff49 	bl	8008308 <_free_r>
 8008476:	4625      	mov	r5, r4
 8008478:	4628      	mov	r0, r5
 800847a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800847c:	f000 f830 	bl	80084e0 <_malloc_usable_size_r>
 8008480:	42a0      	cmp	r0, r4
 8008482:	d20f      	bcs.n	80084a4 <_realloc_r+0x48>
 8008484:	4621      	mov	r1, r4
 8008486:	4638      	mov	r0, r7
 8008488:	f7ff ff8e 	bl	80083a8 <_malloc_r>
 800848c:	4605      	mov	r5, r0
 800848e:	2800      	cmp	r0, #0
 8008490:	d0f2      	beq.n	8008478 <_realloc_r+0x1c>
 8008492:	4631      	mov	r1, r6
 8008494:	4622      	mov	r2, r4
 8008496:	f7ff ff0f 	bl	80082b8 <memcpy>
 800849a:	4631      	mov	r1, r6
 800849c:	4638      	mov	r0, r7
 800849e:	f7ff ff33 	bl	8008308 <_free_r>
 80084a2:	e7e9      	b.n	8008478 <_realloc_r+0x1c>
 80084a4:	4635      	mov	r5, r6
 80084a6:	e7e7      	b.n	8008478 <_realloc_r+0x1c>

080084a8 <_sbrk_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d06      	ldr	r5, [pc, #24]	; (80084c4 <_sbrk_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	f7f8 feb2 	bl	800121c <_sbrk>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_sbrk_r+0x1a>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_sbrk_r+0x1a>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	2000035c 	.word	0x2000035c

080084c8 <__malloc_lock>:
 80084c8:	4801      	ldr	r0, [pc, #4]	; (80084d0 <__malloc_lock+0x8>)
 80084ca:	f000 b811 	b.w	80084f0 <__retarget_lock_acquire_recursive>
 80084ce:	bf00      	nop
 80084d0:	20000364 	.word	0x20000364

080084d4 <__malloc_unlock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__malloc_unlock+0x8>)
 80084d6:	f000 b80c 	b.w	80084f2 <__retarget_lock_release_recursive>
 80084da:	bf00      	nop
 80084dc:	20000364 	.word	0x20000364

080084e0 <_malloc_usable_size_r>:
 80084e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e4:	1f18      	subs	r0, r3, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfbc      	itt	lt
 80084ea:	580b      	ldrlt	r3, [r1, r0]
 80084ec:	18c0      	addlt	r0, r0, r3
 80084ee:	4770      	bx	lr

080084f0 <__retarget_lock_acquire_recursive>:
 80084f0:	4770      	bx	lr

080084f2 <__retarget_lock_release_recursive>:
 80084f2:	4770      	bx	lr

080084f4 <trunc>:
 80084f4:	ec51 0b10 	vmov	r0, r1, d0
 80084f8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80084fc:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008500:	2b13      	cmp	r3, #19
 8008502:	b5d0      	push	{r4, r6, r7, lr}
 8008504:	460c      	mov	r4, r1
 8008506:	dc10      	bgt.n	800852a <trunc+0x36>
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfa5      	ittet	ge
 800850c:	4a11      	ldrge	r2, [pc, #68]	; (8008554 <trunc+0x60>)
 800850e:	fa42 f303 	asrge.w	r3, r2, r3
 8008512:	2100      	movlt	r1, #0
 8008514:	2100      	movge	r1, #0
 8008516:	bfb9      	ittee	lt
 8008518:	2000      	movlt	r0, #0
 800851a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800851e:	2000      	movge	r0, #0
 8008520:	ea24 0103 	bicge.w	r1, r4, r3
 8008524:	ec41 0b10 	vmov	d0, r0, r1
 8008528:	bdd0      	pop	{r4, r6, r7, pc}
 800852a:	2b33      	cmp	r3, #51	; 0x33
 800852c:	dd08      	ble.n	8008540 <trunc+0x4c>
 800852e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008532:	d1f7      	bne.n	8008524 <trunc+0x30>
 8008534:	ee10 2a10 	vmov	r2, s0
 8008538:	460b      	mov	r3, r1
 800853a:	f7f7 feaf 	bl	800029c <__adddf3>
 800853e:	e7f1      	b.n	8008524 <trunc+0x30>
 8008540:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008544:	f04f 33ff 	mov.w	r3, #4294967295
 8008548:	fa23 f202 	lsr.w	r2, r3, r2
 800854c:	ea20 0602 	bic.w	r6, r0, r2
 8008550:	4630      	mov	r0, r6
 8008552:	e7e7      	b.n	8008524 <trunc+0x30>
 8008554:	000fffff 	.word	0x000fffff

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

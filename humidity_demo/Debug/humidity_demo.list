
humidity_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800ee20  0800ee20  0001ee20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f300  0800f300  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f300  0800f300  0001f300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f308  0800f308  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f308  0800f308  0001f308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f30c  0800f30c  0001f30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000210  0800f520  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800f520  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fa97  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eb4  00000000  00000000  0005fcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002998  00000000  00000000  00064b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002820  00000000  00000000  00067528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5a0  00000000  00000000  00069d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021673  00000000  00000000  000842e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc21  00000000  00000000  000a595b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014157c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c030  00000000  00000000  001415d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee04 	.word	0x0800ee04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800ee04 	.word	0x0800ee04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f008 fac0 	bl	80094c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f808 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f872 	bl	8001034 <MX_GPIO_Init>
  MX_MEMS_Init();
 8000f50:	f00a ff24 	bl	800bd9c <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000f54:	f00a ff28 	bl	800bda8 <MX_MEMS_Process>
 8000f58:	e7fc      	b.n	8000f54 <main+0x14>
	...

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00b fe20 	bl	800cbb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <SystemClock_Config+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <SystemClock_Config+0xd0>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <SystemClock_Config+0xd0>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SystemClock_Config+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <SystemClock_Config+0xd4>)
 8000faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <SystemClock_Config+0xd4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f009 ff44 	bl	800ae74 <HAL_RCC_OscConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ff2:	f000 f8af 	bl	8001154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2102      	movs	r1, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f00a f9a6 	bl	800b364 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800101e:	f000 f899 	bl	8001154 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <MX_GPIO_Init+0x114>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a3d      	ldr	r2, [pc, #244]	; (8001148 <MX_GPIO_Init+0x114>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <MX_GPIO_Init+0x114>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <MX_GPIO_Init+0x114>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a36      	ldr	r2, [pc, #216]	; (8001148 <MX_GPIO_Init+0x114>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <MX_GPIO_Init+0x114>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <MX_GPIO_Init+0x114>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <MX_GPIO_Init+0x114>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <MX_GPIO_Init+0x114>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MX_GPIO_Init+0x114>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a28      	ldr	r2, [pc, #160]	; (8001148 <MX_GPIO_Init+0x114>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_GPIO_Init+0x114>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ba:	2302      	movs	r3, #2
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0x118>)
 80010d0:	f008 fbf4 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80010d4:	f240 4331 	movw	r3, #1073	; 0x431
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4819      	ldr	r0, [pc, #100]	; (8001150 <MX_GPIO_Init+0x11c>)
 80010ec:	f008 fbe6 	bl	80098bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2006      	movs	r0, #6
 80010f6:	f008 fb58 	bl	80097aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010fa:	2006      	movs	r0, #6
 80010fc:	f008 fb71 	bl	80097e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2007      	movs	r0, #7
 8001106:	f008 fb50 	bl	80097aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800110a:	2007      	movs	r0, #7
 800110c:	f008 fb69 	bl	80097e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	200a      	movs	r0, #10
 8001116:	f008 fb48 	bl	80097aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800111a:	200a      	movs	r0, #10
 800111c:	f008 fb61 	bl	80097e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2017      	movs	r0, #23
 8001126:	f008 fb40 	bl	80097aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800112a:	2017      	movs	r0, #23
 800112c:	f008 fb59 	bl	80097e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	; 0x28
 8001136:	f008 fb38 	bl	80097aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f008 fb51 	bl	80097e2 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020400 	.word	0x40020400

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_MspInit+0x4c>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x4c>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800119e:	2007      	movs	r0, #7
 80011a0:	f008 faf8 	bl	8009794 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <NMI_Handler+0x4>

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f008 f9b6 	bl	800956c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001208:	2001      	movs	r0, #1
 800120a:	f008 fdf1 	bl	8009df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}

08001212 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001216:	2002      	movs	r0, #2
 8001218:	f008 fdea 	bl	8009df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001224:	2010      	movs	r0, #16
 8001226:	f008 fde3 	bl	8009df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}

0800122e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001232:	2020      	movs	r0, #32
 8001234:	f008 fddc 	bl	8009df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001240:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001244:	f008 fdd4 	bl	8009df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <EXTI15_10_IRQHandler+0x18>)
 800124a:	f008 fb13 	bl	8009874 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000194 	.word	0x20000194

08001258 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <BSP_I2C1_Init+0x58>)
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <BSP_I2C1_Init+0x5c>)
 8001266:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <BSP_I2C1_Init+0x60>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	4912      	ldr	r1, [pc, #72]	; (80012b8 <BSP_I2C1_Init+0x60>)
 8001270:	600a      	str	r2, [r1, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d117      	bne.n	80012a6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <BSP_I2C1_Init+0x58>)
 8001278:	f009 fa86 	bl	800a788 <HAL_I2C_GetState>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d111      	bne.n	80012a6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <BSP_I2C1_Init+0x58>)
 8001284:	f000 f8e2 	bl	800144c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10b      	bne.n	80012a6 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <BSP_I2C1_Init+0x58>)
 8001290:	f000 f8a8 	bl	80013e4 <MX_I2C1_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800129a:	f06f 0307 	mvn.w	r3, #7
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	e001      	b.n	80012a6 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80012a6:	687b      	ldr	r3, [r7, #4]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200005ac 	.word	0x200005ac
 80012b4:	40005400 	.word	0x40005400
 80012b8:	2000022c 	.word	0x2000022c

080012bc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <BSP_I2C1_DeInit+0x48>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d014      	beq.n	80012f8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <BSP_I2C1_DeInit+0x48>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <BSP_I2C1_DeInit+0x48>)
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <BSP_I2C1_DeInit+0x48>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10b      	bne.n	80012f8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <BSP_I2C1_DeInit+0x4c>)
 80012e2:	f000 f8fd 	bl	80014e0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <BSP_I2C1_DeInit+0x4c>)
 80012e8:	f008 feea 	bl	800a0c0 <HAL_I2C_DeInit>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80012f2:	f06f 0307 	mvn.w	r3, #7
 80012f6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000022c 	.word	0x2000022c
 8001308:	200005ac 	.word	0x200005ac

0800130c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af04      	add	r7, sp, #16
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	461a      	mov	r2, r3
 8001316:	4603      	mov	r3, r0
 8001318:	81fb      	strh	r3, [r7, #14]
 800131a:	460b      	mov	r3, r1
 800131c:	81bb      	strh	r3, [r7, #12]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001326:	89ba      	ldrh	r2, [r7, #12]
 8001328:	89f9      	ldrh	r1, [r7, #14]
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	480c      	ldr	r0, [pc, #48]	; (800136c <BSP_I2C1_WriteReg+0x60>)
 800133c:	f008 ff04 	bl	800a148 <HAL_I2C_Mem_Write>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00c      	beq.n	8001360 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <BSP_I2C1_WriteReg+0x60>)
 8001348:	f009 fa2c 	bl	800a7a4 <HAL_I2C_GetError>
 800134c:	4603      	mov	r3, r0
 800134e:	2b04      	cmp	r3, #4
 8001350:	d103      	bne.n	800135a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001352:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e002      	b.n	8001360 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800135a:	f06f 0303 	mvn.w	r3, #3
 800135e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001360:	697b      	ldr	r3, [r7, #20]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200005ac 	.word	0x200005ac

08001370 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af04      	add	r7, sp, #16
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	461a      	mov	r2, r3
 800137a:	4603      	mov	r3, r0
 800137c:	81fb      	strh	r3, [r7, #14]
 800137e:	460b      	mov	r3, r1
 8001380:	81bb      	strh	r3, [r7, #12]
 8001382:	4613      	mov	r3, r2
 8001384:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800138a:	89ba      	ldrh	r2, [r7, #12]
 800138c:	89f9      	ldrh	r1, [r7, #14]
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	480c      	ldr	r0, [pc, #48]	; (80013d0 <BSP_I2C1_ReadReg+0x60>)
 80013a0:	f008 ffcc 	bl	800a33c <HAL_I2C_Mem_Read>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <BSP_I2C1_ReadReg+0x60>)
 80013ac:	f009 f9fa 	bl	800a7a4 <HAL_I2C_GetError>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d103      	bne.n	80013be <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013b6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e002      	b.n	80013c4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80013be:	f06f 0303 	mvn.w	r3, #3
 80013c2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80013c4:	697b      	ldr	r3, [r7, #20]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200005ac 	.word	0x200005ac

080013d4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80013d8:	f008 f8dc 	bl	8009594 <HAL_GetTick>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <MX_I2C1_Init+0x60>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C1_Init+0x64>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f008 fd05 	bl	8009e38 <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40005400 	.word	0x40005400
 8001448:	00061a80 	.word	0x00061a80

0800144c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <I2C1_MspInit+0x8c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <I2C1_MspInit+0x8c>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <I2C1_MspInit+0x8c>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001482:	2304      	movs	r3, #4
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <I2C1_MspInit+0x90>)
 800148e:	f008 fa15 	bl	80098bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80014a4:	2304      	movs	r3, #4
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <I2C1_MspInit+0x90>)
 80014b0:	f008 fa04 	bl	80098bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <I2C1_MspInit+0x8c>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <I2C1_MspInit+0x8c>)
 80014be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <I2C1_MspInit+0x8c>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <I2C1_MspDeInit+0x30>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <I2C1_MspDeInit+0x30>)
 80014ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80014f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <I2C1_MspDeInit+0x34>)
 80014fa:	f008 fb63 	bl	8009bc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80014fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <I2C1_MspDeInit+0x34>)
 8001504:	f008 fb5e 	bl	8009bc4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
	}

return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f007 ff47 	bl	8009400 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
	}
	return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b2:	605a      	str	r2, [r3, #4]
	return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_isatty>:

int _isatty(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	return 1;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
	return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f00b fa9a 	bl	800cb5c <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20018000 	.word	0x20018000
 8001654:	00000400 	.word	0x00000400
 8001658:	20000230 	.word	0x20000230
 800165c:	20000670 	.word	0x20000670

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a0:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd7 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f00b fa59 	bl	800cb68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7ff fc43 	bl	8000f40 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80016c8:	0800f310 	.word	0x0800f310
  ldr r2, =_sbss
 80016cc:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80016d0:	20000670 	.word	0x20000670

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d103      	bne.n	80016f0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e034      	b.n	800175a <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	7b1a      	ldrb	r2, [r3, #12]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HTS221_RegisterBusIO+0x8c>)
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HTS221_RegisterBusIO+0x90>)
 8001732:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4798      	blx	r3
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	e002      	b.n	800175a <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	08001da7 	.word	0x08001da7
 8001768:	08001e09 	.word	0x08001e09

0800176c <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 faac 	bl	8001cdc <HTS221_Initialize>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e004      	b.n	800179a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d111      	bne.n	80017d8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f880 	bl	80018ba <HTS221_HUM_Disable>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	e00d      	b.n	80017e2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f967 	bl	8001a9a <HTS221_TEMP_Disable>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e004      	b.n	80017e2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3320      	adds	r3, #32
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fc30 	bl	8002060 <hts221_device_id_get>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e000      	b.n	800180e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2200      	movs	r2, #0
 800183e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HTS221_GetCapabilities+0x54>)
 8001844:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <HTS221_GetCapabilities+0x54>)
 800184a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	41480000 	.word	0x41480000

08001870 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e015      	b.n	80018b2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10b      	bne.n	80018a8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3320      	adds	r3, #32
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fbf3 	bl	8002082 <hts221_power_on_set>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e004      	b.n	80018b2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e015      	b.n	80018fc <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10b      	bne.n	80018f2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3320      	adds	r3, #32
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fbce 	bl	8002082 <hts221_power_on_set>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	e004      	b.n	80018fc <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f96f 	bl	8001bf4 <HTS221_GetOutputDataRate>
 8001916:	4603      	mov	r3, r0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800192c:	ed97 0a00 	vldr	s0, [r7]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f9a3 	bl	8001c7c <HTS221_SetOutputDataRate>
 8001936:	4603      	mov	r3, r0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3320      	adds	r3, #32
 800194e:	f107 020c 	add.w	r2, r7, #12
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fc58 	bl	800220a <hts221_hum_adc_point_0_get>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	e06b      	b.n	8001a3e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f103 0220 	add.w	r2, r3, #32
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	3304      	adds	r3, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f000 fbaa 	bl	80020ce <hts221_hum_rh_point_0_get>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e05b      	b.n	8001a3e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f103 0220 	add.w	r2, r3, #32
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	3308      	adds	r3, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f000 fc5c 	bl	8002252 <hts221_hum_adc_point_1_get>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	e04b      	b.n	8001a3e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f103 0220 	add.w	r2, r3, #32
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	330c      	adds	r3, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f000 fba8 	bl	800210a <hts221_hum_rh_point_1_get>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	e03b      	b.n	8001a3e <HTS221_HUM_GetHumidity+0xfe>
 80019c6:	2300      	movs	r3, #0
 80019c8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3320      	adds	r3, #32
 80019ce:	f107 021c 	add.w	r2, r7, #28
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fafd 	bl	8001fd4 <hts221_humidity_raw_get>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	e02b      	b.n	8001a3e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80019e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f99a 	bl	8001d34 <Linear_Interpolation>
 8001a00:	eef0 7a40 	vmov.f32	s15, s0
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d503      	bpl.n	8001a22 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a48 <HTS221_HUM_GetHumidity+0x108>
 8001a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	dd02      	ble.n	8001a3c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HTS221_HUM_GetHumidity+0x10c>)
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	42c80000 	.word	0x42c80000
 8001a4c:	42c80000 	.word	0x42c80000

08001a50 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e015      	b.n	8001a92 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10b      	bne.n	8001a88 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3320      	adds	r3, #32
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fb03 	bl	8002082 <hts221_power_on_set>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e004      	b.n	8001a92 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e015      	b.n	8001adc <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10b      	bne.n	8001ad2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3320      	adds	r3, #32
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fade 	bl	8002082 <hts221_power_on_set>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	e004      	b.n	8001adc <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f87f 	bl	8001bf4 <HTS221_GetOutputDataRate>
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001b0c:	ed97 0a00 	vldr	s0, [r7]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8b3 	bl	8001c7c <HTS221_SetOutputDataRate>
 8001b16:	4603      	mov	r3, r0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3320      	adds	r3, #32
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fbb0 	bl	800229a <hts221_temp_adc_point_0_get>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	e052      	b.n	8001bec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f103 0220 	add.w	r2, r3, #32
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	3304      	adds	r3, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f000 faf6 	bl	8002146 <hts221_temp_deg_point_0_get>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	e042      	b.n	8001bec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f103 0220 	add.w	r2, r3, #32
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	3308      	adds	r3, #8
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f000 fbb4 	bl	80022e2 <hts221_temp_adc_point_1_get>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	e032      	b.n	8001bec <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 0220 	add.w	r2, r3, #32
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	330c      	adds	r3, #12
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f000 fb07 	bl	80021a8 <hts221_temp_deg_point_1_get>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	e022      	b.n	8001bec <HTS221_TEMP_GetTemperature+0xcc>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3320      	adds	r3, #32
 8001bae:	f107 021c 	add.w	r2, r7, #28
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fa30 	bl	800201a <hts221_temperature_raw_get>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e012      	b.n	8001bec <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001bc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f8aa 	bl	8001d34 <Linear_Interpolation>
 8001be0:	eef0 7a40 	vmov.f32	s15, s0
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3320      	adds	r3, #32
 8001c06:	f107 020b 	add.w	r2, r7, #11
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f983 	bl	8001f18 <hts221_data_rate_get>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	e025      	b.n	8001c6a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d81d      	bhi.n	8001c60 <HTS221_GetOutputDataRate+0x6c>
 8001c24:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HTS221_GetOutputDataRate+0x38>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c47 	.word	0x08001c47
 8001c34:	08001c51 	.word	0x08001c51
 8001c38:	08001c59 	.word	0x08001c59
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
      break;
 8001c44:	e010      	b.n	8001c68 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c4c:	601a      	str	r2, [r3, #0]
      break;
 8001c4e:	e00b      	b.n	8001c68 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HTS221_GetOutputDataRate+0x80>)
 8001c54:	601a      	str	r2, [r3, #0]
      break;
 8001c56:	e007      	b.n	8001c68 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HTS221_GetOutputDataRate+0x84>)
 8001c5c:	601a      	str	r2, [r3, #0]
      break;
 8001c5e:	e003      	b.n	8001c68 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	60fb      	str	r3, [r7, #12]
      break;
 8001c66:	bf00      	nop
  }

  return ret;
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40e00000 	.word	0x40e00000
 8001c78:	41480000 	.word	0x41480000

08001c7c <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001c88:	edd7 7a00 	vldr	s15, [r7]
 8001c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	d801      	bhi.n	8001c9e <HTS221_SetOutputDataRate+0x22>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00b      	b.n	8001cb6 <HTS221_SetOutputDataRate+0x3a>
 8001c9e:	edd7 7a00 	vldr	s15, [r7]
 8001ca2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	d801      	bhi.n	8001cb4 <HTS221_SetOutputDataRate+0x38>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e000      	b.n	8001cb6 <HTS221_SetOutputDataRate+0x3a>
 8001cb4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001cb6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3320      	adds	r3, #32
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f902 	bl	8001eca <hts221_data_rate_set>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	e000      	b.n	8001cd4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3320      	adds	r3, #32
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f9c9 	bl	8002082 <hts221_power_on_set>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e017      	b.n	8001d2c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3320      	adds	r3, #32
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f940 	bl	8001f88 <hts221_block_data_update_set>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e00b      	b.n	8001d2c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001d14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffaf 	bl	8001c7c <HTS221_SetOutputDataRate>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e000      	b.n	8001d2c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d50:	edd7 7a00 	vldr	s15, [r7]
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	ed93 6a00 	vldr	s12, [r3]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d94:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d98:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001da6:	b590      	push	{r4, r7, lr}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	461a      	mov	r2, r3
 8001db2:	460b      	mov	r3, r1
 8001db4:	72fb      	strb	r3, [r7, #11]
 8001db6:	4613      	mov	r3, r2
 8001db8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	695c      	ldr	r4, [r3, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	7b1b      	ldrb	r3, [r3, #12]
 8001dce:	b298      	uxth	r0, r3
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	893b      	ldrh	r3, [r7, #8]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	47a0      	blx	r4
 8001de0:	4603      	mov	r3, r0
 8001de2:	e00d      	b.n	8001e00 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	695c      	ldr	r4, [r3, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	7b1b      	ldrb	r3, [r3, #12]
 8001dec:	b298      	uxth	r0, r3
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	b299      	uxth	r1, r3
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	47a0      	blx	r4
 8001dfe:	4603      	mov	r3, r0
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}

08001e08 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	461a      	mov	r2, r3
 8001e14:	460b      	mov	r3, r1
 8001e16:	72fb      	strb	r3, [r7, #11]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10e      	bne.n	8001e46 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	691c      	ldr	r4, [r3, #16]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	7b1b      	ldrb	r3, [r3, #12]
 8001e30:	b298      	uxth	r0, r3
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	893b      	ldrh	r3, [r7, #8]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	47a0      	blx	r4
 8001e42:	4603      	mov	r3, r0
 8001e44:	e00d      	b.n	8001e62 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	691c      	ldr	r4, [r3, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	7b1b      	ldrb	r3, [r3, #12]
 8001e4e:	b298      	uxth	r0, r3
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	893b      	ldrh	r3, [r7, #8]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	47a0      	blx	r4
 8001e60:	4603      	mov	r3, r0
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}

08001e6a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8001e6a:	b590      	push	{r4, r7, lr}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	461a      	mov	r2, r3
 8001e76:	460b      	mov	r3, r1
 8001e78:	72fb      	strb	r3, [r7, #11]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685c      	ldr	r4, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	68d8      	ldr	r0, [r3, #12]
 8001e86:	893b      	ldrh	r3, [r7, #8]
 8001e88:	7af9      	ldrb	r1, [r7, #11]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	47a0      	blx	r4
 8001e8e:	6178      	str	r0, [r7, #20]

  return ret;
 8001e90:	697b      	ldr	r3, [r7, #20]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}

08001e9a <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001e9a:	b590      	push	{r4, r7, lr}
 8001e9c:	b087      	sub	sp, #28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	72fb      	strb	r3, [r7, #11]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681c      	ldr	r4, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68d8      	ldr	r0, [r3, #12]
 8001eb6:	893b      	ldrh	r3, [r7, #8]
 8001eb8:	7af9      	ldrb	r1, [r7, #11]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	47a0      	blx	r4
 8001ebe:	6178      	str	r0, [r7, #20]

  return ret;
 8001ec0:	697b      	ldr	r3, [r7, #20]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}

08001eca <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001ed6:	f107 0208 	add.w	r2, r7, #8
 8001eda:	2301      	movs	r3, #1
 8001edc:	2120      	movs	r1, #32
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffc3 	bl	8001e6a <hts221_read_reg>
 8001ee4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	7a3b      	ldrb	r3, [r7, #8]
 8001ef6:	f362 0301 	bfi	r3, r2, #0, #2
 8001efa:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001efc:	f107 0208 	add.w	r2, r7, #8
 8001f00:	2301      	movs	r3, #1
 8001f02:	2120      	movs	r1, #32
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffc8 	bl	8001e9a <hts221_write_reg>
 8001f0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001f22:	f107 0208 	add.w	r2, r7, #8
 8001f26:	2301      	movs	r3, #1
 8001f28:	2120      	movs	r1, #32
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff9d 	bl	8001e6a <hts221_read_reg>
 8001f30:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8001f32:	7a3b      	ldrb	r3, [r7, #8]
 8001f34:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d81a      	bhi.n	8001f74 <hts221_data_rate_get+0x5c>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <hts221_data_rate_get+0x2c>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5d 	.word	0x08001f5d
 8001f4c:	08001f65 	.word	0x08001f65
 8001f50:	08001f6d 	.word	0x08001f6d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
      break;
 8001f5a:	e00f      	b.n	8001f7c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
      break;
 8001f62:	e00b      	b.n	8001f7c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2202      	movs	r2, #2
 8001f68:	701a      	strb	r2, [r3, #0]
      break;
 8001f6a:	e007      	b.n	8001f7c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	701a      	strb	r2, [r3, #0]
      break;
 8001f72:	e003      	b.n	8001f7c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	701a      	strb	r2, [r3, #0]
      break;
 8001f7a:	bf00      	nop
  }

  return ret;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop

08001f88 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001f94:	f107 0208 	add.w	r2, r7, #8
 8001f98:	2301      	movs	r3, #1
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff64 	bl	8001e6a <hts221_read_reg>
 8001fa2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	7a3b      	ldrb	r3, [r7, #8]
 8001fb4:	f362 0382 	bfi	r3, r2, #2, #1
 8001fb8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001fba:	f107 0208 	add.w	r2, r7, #8
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff69 	bl	8001e9a <hts221_write_reg>
 8001fc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001fde:	f107 0208 	add.w	r2, r7, #8
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	2128      	movs	r1, #40	; 0x28
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ff3f 	bl	8001e6a <hts221_read_reg>
 8001fec:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001fee:	7a7b      	ldrb	r3, [r7, #9]
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b29a      	uxth	r2, r3
 8002002:	7a3b      	ldrb	r3, [r7, #8]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4413      	add	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	b21a      	sxth	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002010:	68fb      	ldr	r3, [r7, #12]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002024:	f107 0208 	add.w	r2, r7, #8
 8002028:	2302      	movs	r3, #2
 800202a:	212a      	movs	r1, #42	; 0x2a
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff1c 	bl	8001e6a <hts221_read_reg>
 8002032:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002034:	7a7b      	ldrb	r3, [r7, #9]
 8002036:	b21a      	sxth	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002042:	b29b      	uxth	r3, r3
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b29a      	uxth	r2, r3
 8002048:	7a3b      	ldrb	r3, [r7, #8]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4413      	add	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	b21a      	sxth	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	801a      	strh	r2, [r3, #0]

  return ret;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800206a:	2301      	movs	r3, #1
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	210f      	movs	r1, #15
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fefa 	bl	8001e6a <hts221_read_reg>
 8002076:	60f8      	str	r0, [r7, #12]

  return ret;
 8002078:	68fb      	ldr	r3, [r7, #12]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800208e:	f107 0208 	add.w	r2, r7, #8
 8002092:	2301      	movs	r3, #1
 8002094:	2120      	movs	r1, #32
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fee7 	bl	8001e6a <hts221_read_reg>
 800209c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10f      	bne.n	80020c4 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	7a3b      	ldrb	r3, [r7, #8]
 80020ae:	f362 13c7 	bfi	r3, r2, #7, #1
 80020b2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80020b4:	f107 0208 	add.w	r2, r7, #8
 80020b8:	2301      	movs	r3, #1
 80020ba:	2120      	movs	r1, #32
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff feec 	bl	8001e9a <hts221_write_reg>
 80020c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80020d8:	f107 020b 	add.w	r2, r7, #11
 80020dc:	2301      	movs	r3, #1
 80020de:	2130      	movs	r1, #48	; 0x30
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fec2 	bl	8001e6a <hts221_read_reg>
 80020e6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002114:	f107 020b 	add.w	r2, r7, #11
 8002118:	2301      	movs	r3, #1
 800211a:	2131      	movs	r1, #49	; 0x31
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fea4 	bl	8001e6a <hts221_read_reg>
 8002122:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002124:	7afb      	ldrb	r3, [r7, #11]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800213c:	68fb      	ldr	r3, [r7, #12]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002150:	f107 020f 	add.w	r2, r7, #15
 8002154:	2301      	movs	r3, #1
 8002156:	2132      	movs	r1, #50	; 0x32
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fe86 	bl	8001e6a <hts221_read_reg>
 800215e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11b      	bne.n	800219e <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002166:	f107 0210 	add.w	r2, r7, #16
 800216a:	2301      	movs	r3, #1
 800216c:	2135      	movs	r1, #53	; 0x35
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fe7b 	bl	8001e6a <hts221_read_reg>
 8002174:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002176:	7c3b      	ldrb	r3, [r7, #16]
 8002178:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	4413      	add	r3, r2
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002190:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800219e:	697b      	ldr	r3, [r7, #20]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80021b2:	f107 020f 	add.w	r2, r7, #15
 80021b6:	2301      	movs	r3, #1
 80021b8:	2133      	movs	r1, #51	; 0x33
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe55 	bl	8001e6a <hts221_read_reg>
 80021c0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11b      	bne.n	8002200 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80021c8:	f107 0210 	add.w	r2, r7, #16
 80021cc:	2301      	movs	r3, #1
 80021ce:	2135      	movs	r1, #53	; 0x35
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe4a 	bl	8001e6a <hts221_read_reg>
 80021d6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80021d8:	7c3b      	ldrb	r3, [r7, #16]
 80021da:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	4413      	add	r3, r2
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80021f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002200:	697b      	ldr	r3, [r7, #20]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002214:	f107 0208 	add.w	r2, r7, #8
 8002218:	2302      	movs	r3, #2
 800221a:	2136      	movs	r1, #54	; 0x36
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff fe24 	bl	8001e6a <hts221_read_reg>
 8002222:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002224:	7a7b      	ldrb	r3, [r7, #9]
 8002226:	b29b      	uxth	r3, r3
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	b29a      	uxth	r2, r3
 800222c:	7a3b      	ldrb	r3, [r7, #8]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4413      	add	r3, r2
 8002232:	b29b      	uxth	r3, r3
 8002234:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002236:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800225c:	f107 0208 	add.w	r2, r7, #8
 8002260:	2302      	movs	r3, #2
 8002262:	213a      	movs	r1, #58	; 0x3a
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fe00 	bl	8001e6a <hts221_read_reg>
 800226a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800226c:	7a7b      	ldrb	r3, [r7, #9]
 800226e:	b29b      	uxth	r3, r3
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b29a      	uxth	r2, r3
 8002274:	7a3b      	ldrb	r3, [r7, #8]
 8002276:	b29b      	uxth	r3, r3
 8002278:	4413      	add	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800227e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002290:	68fb      	ldr	r3, [r7, #12]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80022a4:	f107 0208 	add.w	r2, r7, #8
 80022a8:	2302      	movs	r3, #2
 80022aa:	213c      	movs	r1, #60	; 0x3c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fddc 	bl	8001e6a <hts221_read_reg>
 80022b2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80022b4:	7a7b      	ldrb	r3, [r7, #9]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	7a3b      	ldrb	r3, [r7, #8]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80022c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80022d8:	68fb      	ldr	r3, [r7, #12]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80022ec:	f107 0208 	add.w	r2, r7, #8
 80022f0:	2302      	movs	r3, #2
 80022f2:	213e      	movs	r1, #62	; 0x3e
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fdb8 	bl	8001e6a <hts221_read_reg>
 80022fa:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80022fc:	7a7b      	ldrb	r3, [r7, #9]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	b29a      	uxth	r2, r3
 8002304:	7a3b      	ldrb	r3, [r7, #8]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4413      	add	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800230e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d103      	bne.n	8002348 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e051      	b.n	80023ec <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	7b1a      	ldrb	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <LIS2DW12_RegisterBusIO+0xcc>)
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <LIS2DW12_RegisterBusIO+0xd0>)
 800238a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e020      	b.n	80023ec <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4798      	blx	r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e016      	b.n	80023ec <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d112      	bne.n	80023ec <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10d      	bne.n	80023ec <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80023d0:	2305      	movs	r3, #5
 80023d2:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80023d4:	7afb      	ldrb	r3, [r7, #11]
 80023d6:	461a      	mov	r2, r3
 80023d8:	2121      	movs	r1, #33	; 0x21
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fd87 	bl	8002eee <LIS2DW12_Write_Reg>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	08003281 	.word	0x08003281
 80023fc:	080032b7 	.word	0x080032b7

08002400 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3320      	adds	r3, #32
 800240c:	2101      	movs	r1, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fa94 	bl	800393c <lis2dw12_auto_increment_set>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e04b      	b.n	80024b8 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3320      	adds	r3, #32
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f001 f9a8 	bl	800377c <lis2dw12_block_data_update_set>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e03f      	b.n	80024b8 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3320      	adds	r3, #32
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f001 faa2 	bl	8003988 <lis2dw12_fifo_mode_set>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e033      	b.n	80024b8 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3320      	adds	r3, #32
 8002454:	2104      	movs	r1, #4
 8002456:	4618      	mov	r0, r3
 8002458:	f000 ff78 	bl	800334c <lis2dw12_power_mode_set>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e027      	b.n	80024b8 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <LIS2DW12_Init+0xc0>)
 800246c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3320      	adds	r3, #32
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f001 f869 	bl	800355c <lis2dw12_data_rate_set>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	e010      	b.n	80024b8 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3320      	adds	r3, #32
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f001 f993 	bl	80037c8 <lis2dw12_full_scale_set>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	e004      	b.n	80024b8 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	42c80000 	.word	0x42c80000

080024c4 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f888 	bl	80025e2 <LIS2DW12_ACC_Disable>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	e010      	b.n	8002500 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3320      	adds	r3, #32
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f9fe 	bl	800391a <lis2dw12_device_id_get>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	e000      	b.n	800252c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2210      	movs	r2, #16
 8002560:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4a06      	ldr	r2, [pc, #24]	; (800258c <LIS2DW12_GetCapabilities+0x58>)
 8002574:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	44c80000 	.word	0x44c80000

08002590 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e019      	b.n	80025da <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b8:	461a      	mov	r2, r3
 80025ba:	eeb0 0a67 	vmov.f32	s0, s15
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fcb0 	bl	8002f24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	e004      	b.n	80025da <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e010      	b.n	800261a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3320      	adds	r3, #32
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 ffac 	bl	800355c <lis2dw12_data_rate_set>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e004      	b.n	800261a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3320      	adds	r3, #32
 8002636:	f107 020b 	add.w	r2, r7, #11
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f8e9 	bl	8003814 <lis2dw12_full_scale_get>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	e0a0      	b.n	8002790 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3320      	adds	r3, #32
 8002652:	f107 020a 	add.w	r2, r7, #10
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fec5 	bl	80033e8 <lis2dw12_power_mode_get>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e092      	b.n	8002790 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 800266a:	7abb      	ldrb	r3, [r7, #10]
 800266c:	2b1b      	cmp	r3, #27
 800266e:	f200 8087 	bhi.w	8002780 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	080026e9 	.word	0x080026e9
 800267c:	08002735 	.word	0x08002735
 8002680:	08002735 	.word	0x08002735
 8002684:	08002735 	.word	0x08002735
 8002688:	08002735 	.word	0x08002735
 800268c:	08002781 	.word	0x08002781
 8002690:	08002781 	.word	0x08002781
 8002694:	08002781 	.word	0x08002781
 8002698:	080026e9 	.word	0x080026e9
 800269c:	08002735 	.word	0x08002735
 80026a0:	08002735 	.word	0x08002735
 80026a4:	08002735 	.word	0x08002735
 80026a8:	08002781 	.word	0x08002781
 80026ac:	08002781 	.word	0x08002781
 80026b0:	08002781 	.word	0x08002781
 80026b4:	08002781 	.word	0x08002781
 80026b8:	080026e9 	.word	0x080026e9
 80026bc:	08002735 	.word	0x08002735
 80026c0:	08002735 	.word	0x08002735
 80026c4:	08002735 	.word	0x08002735
 80026c8:	08002735 	.word	0x08002735
 80026cc:	08002781 	.word	0x08002781
 80026d0:	08002781 	.word	0x08002781
 80026d4:	08002781 	.word	0x08002781
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	08002735 	.word	0x08002735
 80026e0:	08002735 	.word	0x08002735
 80026e4:	08002735 	.word	0x08002735
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d81a      	bhi.n	8002724 <LIS2DW12_ACC_GetSensitivity+0x100>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	0800270d 	.word	0x0800270d
 80026fc:	08002715 	.word	0x08002715
 8002700:	0800271d 	.word	0x0800271d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4a24      	ldr	r2, [pc, #144]	; (8002798 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002708:	601a      	str	r2, [r3, #0]
          break;
 800270a:	e012      	b.n	8002732 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4a23      	ldr	r2, [pc, #140]	; (800279c <LIS2DW12_ACC_GetSensitivity+0x178>)
 8002710:	601a      	str	r2, [r3, #0]
          break;
 8002712:	e00e      	b.n	8002732 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8002718:	601a      	str	r2, [r3, #0]
          break;
 800271a:	e00a      	b.n	8002732 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8002720:	601a      	str	r2, [r3, #0]
          break;
 8002722:	e006      	b.n	8002732 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002728:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	60fb      	str	r3, [r7, #12]
          break;
 8002730:	bf00      	nop
      }
      break;
 8002732:	e02c      	b.n	800278e <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d81a      	bhi.n	8002770 <LIS2DW12_ACC_GetSensitivity+0x14c>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002751 	.word	0x08002751
 8002744:	08002759 	.word	0x08002759
 8002748:	08002761 	.word	0x08002761
 800274c:	08002769 	.word	0x08002769
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4a16      	ldr	r2, [pc, #88]	; (80027ac <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002754:	601a      	str	r2, [r3, #0]
          break;
 8002756:	e012      	b.n	800277e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 800275c:	601a      	str	r2, [r3, #0]
          break;
 800275e:	e00e      	b.n	800277e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002764:	601a      	str	r2, [r3, #0]
          break;
 8002766:	e00a      	b.n	800277e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <LIS2DW12_ACC_GetSensitivity+0x178>)
 800276c:	601a      	str	r2, [r3, #0]
          break;
 800276e:	e006      	b.n	800277e <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002774:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	60fb      	str	r3, [r7, #12]
          break;
 800277c:	bf00      	nop
      }
      break;
 800277e:	e006      	b.n	800278e <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002784:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	60fb      	str	r3, [r7, #12]
      break;
 800278c:	bf00      	nop
  }

  return ret;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	3f79db23 	.word	0x3f79db23
 800279c:	3ff9db23 	.word	0x3ff9db23
 80027a0:	4079db23 	.word	0x4079db23
 80027a4:	40f9db23 	.word	0x40f9db23
 80027a8:	bf800000 	.word	0xbf800000
 80027ac:	3e79db23 	.word	0x3e79db23
 80027b0:	3ef9db23 	.word	0x3ef9db23

080027b4 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3320      	adds	r3, #32
 80027c6:	f107 020b 	add.w	r2, r7, #11
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 ff0b 	bl	80035e8 <lis2dw12_data_rate_get>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295
 80027dc:	e1d4      	b.n	8002b88 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3320      	adds	r3, #32
 80027e2:	f107 020a 	add.w	r2, r7, #10
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fdfd 	bl	80033e8 <lis2dw12_power_mode_get>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	e1c6      	b.n	8002b88 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	2b32      	cmp	r3, #50	; 0x32
 80027fe:	f200 81bb 	bhi.w	8002b78 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	080028d5 	.word	0x080028d5
 800280c:	080028df 	.word	0x080028df
 8002810:	0800297d 	.word	0x0800297d
 8002814:	08002985 	.word	0x08002985
 8002818:	0800298d 	.word	0x0800298d
 800281c:	08002995 	.word	0x08002995
 8002820:	0800299d 	.word	0x0800299d
 8002824:	080029a5 	.word	0x080029a5
 8002828:	08002a41 	.word	0x08002a41
 800282c:	08002add 	.word	0x08002add
 8002830:	08002b79 	.word	0x08002b79
 8002834:	08002b79 	.word	0x08002b79
 8002838:	08002b79 	.word	0x08002b79
 800283c:	08002b79 	.word	0x08002b79
 8002840:	08002b79 	.word	0x08002b79
 8002844:	08002b79 	.word	0x08002b79
 8002848:	08002b79 	.word	0x08002b79
 800284c:	08002b79 	.word	0x08002b79
 8002850:	080028d5 	.word	0x080028d5
 8002854:	08002b79 	.word	0x08002b79
 8002858:	08002b79 	.word	0x08002b79
 800285c:	08002b79 	.word	0x08002b79
 8002860:	08002b79 	.word	0x08002b79
 8002864:	08002b79 	.word	0x08002b79
 8002868:	08002b79 	.word	0x08002b79
 800286c:	08002b79 	.word	0x08002b79
 8002870:	08002b79 	.word	0x08002b79
 8002874:	08002b79 	.word	0x08002b79
 8002878:	08002b79 	.word	0x08002b79
 800287c:	08002b79 	.word	0x08002b79
 8002880:	08002b79 	.word	0x08002b79
 8002884:	08002b79 	.word	0x08002b79
 8002888:	08002b79 	.word	0x08002b79
 800288c:	08002b79 	.word	0x08002b79
 8002890:	08002b79 	.word	0x08002b79
 8002894:	08002b79 	.word	0x08002b79
 8002898:	08002b79 	.word	0x08002b79
 800289c:	08002b79 	.word	0x08002b79
 80028a0:	08002b79 	.word	0x08002b79
 80028a4:	08002b79 	.word	0x08002b79
 80028a8:	08002b79 	.word	0x08002b79
 80028ac:	08002b79 	.word	0x08002b79
 80028b0:	08002b79 	.word	0x08002b79
 80028b4:	08002b79 	.word	0x08002b79
 80028b8:	08002b79 	.word	0x08002b79
 80028bc:	08002b79 	.word	0x08002b79
 80028c0:	08002b79 	.word	0x08002b79
 80028c4:	08002b79 	.word	0x08002b79
 80028c8:	08002b79 	.word	0x08002b79
 80028cc:	08002b79 	.word	0x08002b79
 80028d0:	080028d5 	.word	0x080028d5
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
      break;
 80028dc:	e153      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80028de:	7abb      	ldrb	r3, [r7, #10]
 80028e0:	2b1b      	cmp	r3, #27
 80028e2:	d843      	bhi.n	800296c <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80028e4:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002965 	.word	0x08002965
 80028f0:	08002965 	.word	0x08002965
 80028f4:	08002965 	.word	0x08002965
 80028f8:	08002965 	.word	0x08002965
 80028fc:	0800295d 	.word	0x0800295d
 8002900:	0800296d 	.word	0x0800296d
 8002904:	0800296d 	.word	0x0800296d
 8002908:	0800296d 	.word	0x0800296d
 800290c:	08002965 	.word	0x08002965
 8002910:	08002965 	.word	0x08002965
 8002914:	08002965 	.word	0x08002965
 8002918:	08002965 	.word	0x08002965
 800291c:	0800296d 	.word	0x0800296d
 8002920:	0800296d 	.word	0x0800296d
 8002924:	0800296d 	.word	0x0800296d
 8002928:	0800296d 	.word	0x0800296d
 800292c:	08002965 	.word	0x08002965
 8002930:	08002965 	.word	0x08002965
 8002934:	08002965 	.word	0x08002965
 8002938:	08002965 	.word	0x08002965
 800293c:	0800295d 	.word	0x0800295d
 8002940:	0800296d 	.word	0x0800296d
 8002944:	0800296d 	.word	0x0800296d
 8002948:	0800296d 	.word	0x0800296d
 800294c:	08002965 	.word	0x08002965
 8002950:	08002965 	.word	0x08002965
 8002954:	08002965 	.word	0x08002965
 8002958:	08002965 	.word	0x08002965
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4a8c      	ldr	r2, [pc, #560]	; (8002b90 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002960:	601a      	str	r2, [r3, #0]
          break;
 8002962:	e00a      	b.n	800297a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4a8b      	ldr	r2, [pc, #556]	; (8002b94 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002968:	601a      	str	r2, [r3, #0]
          break;
 800296a:	e006      	b.n	800297a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4a8a      	ldr	r2, [pc, #552]	; (8002b98 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002970:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	60fb      	str	r3, [r7, #12]
          break;
 8002978:	bf00      	nop
      }
      break;
 800297a:	e104      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4a84      	ldr	r2, [pc, #528]	; (8002b90 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002980:	601a      	str	r2, [r3, #0]
      break;
 8002982:	e100      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4a85      	ldr	r2, [pc, #532]	; (8002b9c <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002988:	601a      	str	r2, [r3, #0]
      break;
 800298a:	e0fc      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4a84      	ldr	r2, [pc, #528]	; (8002ba0 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002990:	601a      	str	r2, [r3, #0]
      break;
 8002992:	e0f8      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4a83      	ldr	r2, [pc, #524]	; (8002ba4 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8002998:	601a      	str	r2, [r3, #0]
      break;
 800299a:	e0f4      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4a82      	ldr	r2, [pc, #520]	; (8002ba8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80029a0:	601a      	str	r2, [r3, #0]
      break;
 80029a2:	e0f0      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 80029a4:	7abb      	ldrb	r3, [r7, #10]
 80029a6:	2b1b      	cmp	r3, #27
 80029a8:	d842      	bhi.n	8002a30 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 80029aa:	a201      	add	r2, pc, #4	; (adr r2, 80029b0 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80029ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b0:	08002a29 	.word	0x08002a29
 80029b4:	08002a29 	.word	0x08002a29
 80029b8:	08002a29 	.word	0x08002a29
 80029bc:	08002a29 	.word	0x08002a29
 80029c0:	08002a21 	.word	0x08002a21
 80029c4:	08002a31 	.word	0x08002a31
 80029c8:	08002a31 	.word	0x08002a31
 80029cc:	08002a31 	.word	0x08002a31
 80029d0:	08002a29 	.word	0x08002a29
 80029d4:	08002a29 	.word	0x08002a29
 80029d8:	08002a29 	.word	0x08002a29
 80029dc:	08002a29 	.word	0x08002a29
 80029e0:	08002a31 	.word	0x08002a31
 80029e4:	08002a31 	.word	0x08002a31
 80029e8:	08002a31 	.word	0x08002a31
 80029ec:	08002a31 	.word	0x08002a31
 80029f0:	08002a29 	.word	0x08002a29
 80029f4:	08002a29 	.word	0x08002a29
 80029f8:	08002a29 	.word	0x08002a29
 80029fc:	08002a29 	.word	0x08002a29
 8002a00:	08002a21 	.word	0x08002a21
 8002a04:	08002a31 	.word	0x08002a31
 8002a08:	08002a31 	.word	0x08002a31
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002a29 	.word	0x08002a29
 8002a14:	08002a29 	.word	0x08002a29
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a29 	.word	0x08002a29
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4a62      	ldr	r2, [pc, #392]	; (8002bac <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8002a24:	601a      	str	r2, [r3, #0]
          break;
 8002a26:	e00a      	b.n	8002a3e <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ba8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002a2c:	601a      	str	r2, [r3, #0]
          break;
 8002a2e:	e006      	b.n	8002a3e <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4a59      	ldr	r2, [pc, #356]	; (8002b98 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002a34:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	60fb      	str	r3, [r7, #12]
          break;
 8002a3c:	bf00      	nop
      }
      break;
 8002a3e:	e0a2      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002a40:	7abb      	ldrb	r3, [r7, #10]
 8002a42:	2b1b      	cmp	r3, #27
 8002a44:	d842      	bhi.n	8002acc <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002ac5 	.word	0x08002ac5
 8002a50:	08002ac5 	.word	0x08002ac5
 8002a54:	08002ac5 	.word	0x08002ac5
 8002a58:	08002ac5 	.word	0x08002ac5
 8002a5c:	08002abd 	.word	0x08002abd
 8002a60:	08002acd 	.word	0x08002acd
 8002a64:	08002acd 	.word	0x08002acd
 8002a68:	08002acd 	.word	0x08002acd
 8002a6c:	08002ac5 	.word	0x08002ac5
 8002a70:	08002ac5 	.word	0x08002ac5
 8002a74:	08002ac5 	.word	0x08002ac5
 8002a78:	08002ac5 	.word	0x08002ac5
 8002a7c:	08002acd 	.word	0x08002acd
 8002a80:	08002acd 	.word	0x08002acd
 8002a84:	08002acd 	.word	0x08002acd
 8002a88:	08002acd 	.word	0x08002acd
 8002a8c:	08002ac5 	.word	0x08002ac5
 8002a90:	08002ac5 	.word	0x08002ac5
 8002a94:	08002ac5 	.word	0x08002ac5
 8002a98:	08002ac5 	.word	0x08002ac5
 8002a9c:	08002abd 	.word	0x08002abd
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002acd 	.word	0x08002acd
 8002aa8:	08002acd 	.word	0x08002acd
 8002aac:	08002ac5 	.word	0x08002ac5
 8002ab0:	08002ac5 	.word	0x08002ac5
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002ac5 	.word	0x08002ac5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4a3c      	ldr	r2, [pc, #240]	; (8002bb0 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002ac0:	601a      	str	r2, [r3, #0]
          break;
 8002ac2:	e00a      	b.n	8002ada <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4a38      	ldr	r2, [pc, #224]	; (8002ba8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002ac8:	601a      	str	r2, [r3, #0]
          break;
 8002aca:	e006      	b.n	8002ada <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002ad0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	60fb      	str	r3, [r7, #12]
          break;
 8002ad8:	bf00      	nop
      }
      break;
 8002ada:	e054      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8002adc:	7abb      	ldrb	r3, [r7, #10]
 8002ade:	2b1b      	cmp	r3, #27
 8002ae0:	d842      	bhi.n	8002b68 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b61 	.word	0x08002b61
 8002aec:	08002b61 	.word	0x08002b61
 8002af0:	08002b61 	.word	0x08002b61
 8002af4:	08002b61 	.word	0x08002b61
 8002af8:	08002b59 	.word	0x08002b59
 8002afc:	08002b69 	.word	0x08002b69
 8002b00:	08002b69 	.word	0x08002b69
 8002b04:	08002b69 	.word	0x08002b69
 8002b08:	08002b61 	.word	0x08002b61
 8002b0c:	08002b61 	.word	0x08002b61
 8002b10:	08002b61 	.word	0x08002b61
 8002b14:	08002b61 	.word	0x08002b61
 8002b18:	08002b69 	.word	0x08002b69
 8002b1c:	08002b69 	.word	0x08002b69
 8002b20:	08002b69 	.word	0x08002b69
 8002b24:	08002b69 	.word	0x08002b69
 8002b28:	08002b61 	.word	0x08002b61
 8002b2c:	08002b61 	.word	0x08002b61
 8002b30:	08002b61 	.word	0x08002b61
 8002b34:	08002b61 	.word	0x08002b61
 8002b38:	08002b59 	.word	0x08002b59
 8002b3c:	08002b69 	.word	0x08002b69
 8002b40:	08002b69 	.word	0x08002b69
 8002b44:	08002b69 	.word	0x08002b69
 8002b48:	08002b61 	.word	0x08002b61
 8002b4c:	08002b61 	.word	0x08002b61
 8002b50:	08002b61 	.word	0x08002b61
 8002b54:	08002b61 	.word	0x08002b61
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 8002b5c:	601a      	str	r2, [r3, #0]
          break;
 8002b5e:	e00a      	b.n	8002b76 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002b64:	601a      	str	r2, [r3, #0]
          break;
 8002b66:	e006      	b.n	8002b76 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002b6c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	60fb      	str	r3, [r7, #12]
          break;
 8002b74:	bf00      	nop
      }
      break;
 8002b76:	e006      	b.n	8002b86 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002b7c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b82:	60fb      	str	r3, [r7, #12]
      break;
 8002b84:	bf00      	nop
  }

  return ret;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	41480000 	.word	0x41480000
 8002b94:	3fcccccd 	.word	0x3fcccccd
 8002b98:	bf800000 	.word	0xbf800000
 8002b9c:	41c80000 	.word	0x41c80000
 8002ba0:	42480000 	.word	0x42480000
 8002ba4:	42c80000 	.word	0x42c80000
 8002ba8:	43480000 	.word	0x43480000
 8002bac:	43c80000 	.word	0x43c80000
 8002bb0:	44480000 	.word	0x44480000
 8002bb4:	44c80000 	.word	0x44c80000

08002bb8 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	ed97 0a00 	vldr	s0, [r7]
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f805 	bl	8002bdc <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002bd2:	4603      	mov	r3, r0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002be8:	460b      	mov	r3, r1
 8002bea:	71fb      	strb	r3, [r7, #7]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d109      	bne.n	8002c0e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8002bfa:	79ba      	ldrb	r2, [r7, #6]
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f98d 	bl	8002f24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	e008      	b.n	8002c20 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8002c0e:	79ba      	ldrb	r2, [r7, #6]
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4619      	mov	r1, r3
 8002c14:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fa9f 	bl	800315c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8002c1e:	4603      	mov	r3, r0
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3320      	adds	r3, #32
 8002c3a:	f107 020b 	add.w	r2, r7, #11
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fde7 	bl	8003814 <lis2dw12_full_scale_get>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	e027      	b.n	8002ca2 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d81b      	bhi.n	8002c90 <LIS2DW12_ACC_GetFullScale+0x68>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <LIS2DW12_ACC_GetFullScale+0x38>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c79 	.word	0x08002c79
 8002c68:	08002c81 	.word	0x08002c81
 8002c6c:	08002c89 	.word	0x08002c89
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2202      	movs	r2, #2
 8002c74:	601a      	str	r2, [r3, #0]
      break;
 8002c76:	e013      	b.n	8002ca0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	601a      	str	r2, [r3, #0]
      break;
 8002c7e:	e00f      	b.n	8002ca0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2208      	movs	r2, #8
 8002c84:	601a      	str	r2, [r3, #0]
      break;
 8002c86:	e00b      	b.n	8002ca0 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	601a      	str	r2, [r3, #0]
      break;
 8002c8e:	e007      	b.n	8002ca0 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f04f 32ff 	mov.w	r2, #4294967295
 8002c96:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	60fb      	str	r3, [r7, #12]
      break;
 8002c9e:	bf00      	nop
  }

  return ret;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop

08002cac <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	dd0b      	ble.n	8002cd4 <LIS2DW12_ACC_SetFullScale+0x28>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	dd06      	ble.n	8002cd0 <LIS2DW12_ACC_SetFullScale+0x24>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	dc01      	bgt.n	8002ccc <LIS2DW12_ACC_SetFullScale+0x20>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e004      	b.n	8002cd6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e002      	b.n	8002cd6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002cd4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002cd6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3320      	adds	r3, #32
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fd71 	bl	80037c8 <lis2dw12_full_scale_set>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf0:	e000      	b.n	8002cf4 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	f107 020b 	add.w	r2, r7, #11
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fb67 	bl	80033e8 <lis2dw12_power_mode_get>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	e089      	b.n	8002e3a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3320      	adds	r3, #32
 8002d2a:	f107 020c 	add.w	r2, r7, #12
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fda7 	bl	8003884 <lis2dw12_acceleration_raw_get>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d40:	e07b      	b.n	8002e3a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	2b1b      	cmp	r3, #27
 8002d46:	d873      	bhi.n	8002e30 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002dc1 	.word	0x08002dc1
 8002d54:	08002df9 	.word	0x08002df9
 8002d58:	08002df9 	.word	0x08002df9
 8002d5c:	08002df9 	.word	0x08002df9
 8002d60:	08002df9 	.word	0x08002df9
 8002d64:	08002e31 	.word	0x08002e31
 8002d68:	08002e31 	.word	0x08002e31
 8002d6c:	08002e31 	.word	0x08002e31
 8002d70:	08002dc1 	.word	0x08002dc1
 8002d74:	08002df9 	.word	0x08002df9
 8002d78:	08002df9 	.word	0x08002df9
 8002d7c:	08002df9 	.word	0x08002df9
 8002d80:	08002e31 	.word	0x08002e31
 8002d84:	08002e31 	.word	0x08002e31
 8002d88:	08002e31 	.word	0x08002e31
 8002d8c:	08002e31 	.word	0x08002e31
 8002d90:	08002dc1 	.word	0x08002dc1
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002df9 	.word	0x08002df9
 8002d9c:	08002df9 	.word	0x08002df9
 8002da0:	08002df9 	.word	0x08002df9
 8002da4:	08002e31 	.word	0x08002e31
 8002da8:	08002e31 	.word	0x08002e31
 8002dac:	08002e31 	.word	0x08002e31
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002df9 	.word	0x08002df9
 8002db8:	08002df9 	.word	0x08002df9
 8002dbc:	08002df9 	.word	0x08002df9
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002dc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da00      	bge.n	8002dca <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002dc8:	330f      	adds	r3, #15
 8002dca:	111b      	asrs	r3, r3, #4
 8002dcc:	b21a      	sxth	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002dd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da00      	bge.n	8002ddc <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8002dda:	330f      	adds	r3, #15
 8002ddc:	111b      	asrs	r3, r3, #4
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8002de4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da00      	bge.n	8002dee <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8002dec:	330f      	adds	r3, #15
 8002dee:	111b      	asrs	r3, r3, #4
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	809a      	strh	r2, [r3, #4]
      break;
 8002df6:	e01f      	b.n	8002e38 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8002df8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	da00      	bge.n	8002e02 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8002e00:	3303      	adds	r3, #3
 8002e02:	109b      	asrs	r3, r3, #2
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8002e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	da00      	bge.n	8002e14 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8002e12:	3303      	adds	r3, #3
 8002e14:	109b      	asrs	r3, r3, #2
 8002e16:	b21a      	sxth	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002e1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da00      	bge.n	8002e26 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8002e24:	3303      	adds	r3, #3
 8002e26:	109b      	asrs	r3, r3, #2
 8002e28:	b21a      	sxth	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	809a      	strh	r2, [r3, #4]
      break;
 8002e2e:	e003      	b.n	8002e38 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	617b      	str	r3, [r7, #20]
      break;
 8002e36:	bf00      	nop
  }

  return ret;
 8002e38:	697b      	ldr	r3, [r7, #20]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop

08002e44 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff4e 	bl	8002cfc <LIS2DW12_ACC_GetAxesRaw>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e03c      	b.n	8002ee6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fbd6 	bl	8002624 <LIS2DW12_ACC_GetSensitivity>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	e030      	b.n	8002ee6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002e84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9c:	ee17 2a90 	vmov	r2, s15
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002ea4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ea8:	ee07 3a90 	vmov	s15, r3
 8002eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ebc:	ee17 2a90 	vmov	r2, s15
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002ec4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002edc:	ee17 2a90 	vmov	r2, s15
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
 8002efa:	4613      	mov	r3, r2
 8002efc:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f103 0020 	add.w	r0, r3, #32
 8002f04:	1cba      	adds	r2, r7, #2
 8002f06:	78f9      	ldrb	r1, [r7, #3]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f000 fa07 	bl	800331c <lis2dw12_write_reg>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
 8002f18:	e000      	b.n	8002f1c <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f30:	460b      	mov	r3, r1
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d80b      	bhi.n	8002f58 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f85 	.word	0x08002f85
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	08002fdd 	.word	0x08002fdd
 8002f54:	08003009 	.word	0x08003009
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002f58:	79bb      	ldrb	r3, [r7, #6]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d002      	beq.n	8002f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	75fb      	strb	r3, [r7, #23]
          break;
 8002f62:	e002      	b.n	8002f6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002f64:	2314      	movs	r3, #20
 8002f66:	75fb      	strb	r3, [r7, #23]
          break;
 8002f68:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f6e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	d400      	bmi.n	8002f7e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002f7c:	e05a      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002f7e:	4b6f      	ldr	r3, [pc, #444]	; (800313c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002f80:	60bb      	str	r3, [r7, #8]
      break;
 8002f82:	e057      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002f84:	79bb      	ldrb	r3, [r7, #6]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d002      	beq.n	8002f90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8002f8e:	e002      	b.n	8002f96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002f90:	2313      	movs	r3, #19
 8002f92:	75fb      	strb	r3, [r7, #23]
          break;
 8002f94:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f9a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003140 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	dc00      	bgt.n	8002faa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002fa8:	e044      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002faa:	4b66      	ldr	r3, [pc, #408]	; (8003144 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002fac:	60bb      	str	r3, [r7, #8]
      break;
 8002fae:	e041      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002fb0:	79bb      	ldrb	r3, [r7, #6]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d002      	beq.n	8002fbc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8002fba:	e002      	b.n	8002fc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002fbc:	2312      	movs	r3, #18
 8002fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8002fc0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003140 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	dc00      	bgt.n	8002fd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002fd4:	e02e      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002fd8:	60bb      	str	r3, [r7, #8]
      break;
 8002fda:	e02b      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d002      	beq.n	8002fe8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8002fe6:	e002      	b.n	8002fee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002fe8:	2311      	movs	r3, #17
 8002fea:	75fb      	strb	r3, [r7, #23]
          break;
 8002fec:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003140 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	dc00      	bgt.n	8003002 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8003000:	e018      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003002:	4b50      	ldr	r3, [pc, #320]	; (8003144 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003004:	60bb      	str	r3, [r7, #8]
      break;
 8003006:	e015      	b.n	8003034 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8003008:	79bb      	ldrb	r3, [r7, #6]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d002      	beq.n	8003014 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
          break;
 8003012:	e002      	b.n	800301a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003014:	2310      	movs	r3, #16
 8003016:	75fb      	strb	r3, [r7, #23]
          break;
 8003018:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800301a:	edd7 7a02 	vldr	s15, [r7, #8]
 800301e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003140 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	dc00      	bgt.n	800302e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 800302c:	e001      	b.n	8003032 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 800302e:	4b45      	ldr	r3, [pc, #276]	; (8003144 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003030:	60bb      	str	r3, [r7, #8]
      break;
 8003032:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8003034:	edd7 7a02 	vldr	s15, [r7, #8]
 8003038:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003148 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 800303c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	d801      	bhi.n	800304a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003046:	2301      	movs	r3, #1
 8003048:	e04d      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800304a:	edd7 7a02 	vldr	s15, [r7, #8]
 800304e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	d801      	bhi.n	8003060 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800305c:	2302      	movs	r3, #2
 800305e:	e042      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003060:	edd7 7a02 	vldr	s15, [r7, #8]
 8003064:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	d801      	bhi.n	8003076 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8003072:	2303      	movs	r3, #3
 8003074:	e037      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003076:	edd7 7a02 	vldr	s15, [r7, #8]
 800307a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800314c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 800307e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003086:	d801      	bhi.n	800308c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003088:	2304      	movs	r3, #4
 800308a:	e02c      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800308c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003090:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003150 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8003094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309c:	d801      	bhi.n	80030a2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800309e:	2305      	movs	r3, #5
 80030a0:	e021      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80030a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80030a6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003140 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80030aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d801      	bhi.n	80030b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80030b4:	2306      	movs	r3, #6
 80030b6:	e016      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80030b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030bc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003154 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 80030c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	d801      	bhi.n	80030ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e00b      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80030ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003158 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 80030d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030de:	d801      	bhi.n	80030e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80030e0:	2308      	movs	r3, #8
 80030e2:	e000      	b.n	80030e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80030e4:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80030e6:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3320      	adds	r3, #32
 80030ec:	7dba      	ldrb	r2, [r7, #22]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fa33 	bl	800355c <lis2dw12_data_rate_set>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e018      	b.n	8003134 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3320      	adds	r3, #32
 8003106:	7dfa      	ldrb	r2, [r7, #23]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f91e 	bl	800334c <lis2dw12_power_mode_set>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	e00b      	b.n	8003134 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	79ba      	ldrb	r2, [r7, #6]
 800312e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	41480000 	.word	0x41480000
 8003140:	43480000 	.word	0x43480000
 8003144:	43480000 	.word	0x43480000
 8003148:	3fcccccd 	.word	0x3fcccccd
 800314c:	42480000 	.word	0x42480000
 8003150:	42c80000 	.word	0x42c80000
 8003154:	43c80000 	.word	0x43c80000
 8003158:	44480000 	.word	0x44480000

0800315c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	ed87 0a02 	vstr	s0, [r7, #8]
 8003168:	460b      	mov	r3, r1
 800316a:	71fb      	strb	r3, [r7, #7]
 800316c:	4613      	mov	r3, r2
 800316e:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	79fa      	ldrb	r2, [r7, #7]
 8003174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	79ba      	ldrb	r2, [r7, #6]
 800317c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8003180:	edd7 7a02 	vldr	s15, [r7, #8]
 8003184:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003244 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003190:	d801      	bhi.n	8003196 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8003194:	e04d      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8003196:	edd7 7a02 	vldr	s15, [r7, #8]
 800319a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800319e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	d801      	bhi.n	80031ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80031aa:	e042      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 80031ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80031b0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80031b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031bc:	d801      	bhi.n	80031c2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80031c0:	e037      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80031c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80031c6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003254 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80031ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d2:	d801      	bhi.n	80031d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80031d6:	e02c      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 80031d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031dc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800325c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 80031e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e8:	d801      	bhi.n	80031ee <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80031ec:	e021      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 80031ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80031f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003264 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80031f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fe:	d801      	bhi.n	8003204 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8003202:	e016      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8003204:	edd7 7a02 	vldr	s15, [r7, #8]
 8003208:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800326c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 800320c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	d801      	bhi.n	800321a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003218:	e00b      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800321a:	edd7 7a02 	vldr	s15, [r7, #8]
 800321e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003274 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d801      	bhi.n	8003230 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800322e:	e000      	b.n	8003232 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	3fcccccd 	.word	0x3fcccccd
 8003248:	3fcccccd 	.word	0x3fcccccd
 800324c:	41480000 	.word	0x41480000
 8003250:	41c80000 	.word	0x41c80000
 8003254:	42480000 	.word	0x42480000
 8003258:	42480000 	.word	0x42480000
 800325c:	42c80000 	.word	0x42c80000
 8003260:	42c80000 	.word	0x42c80000
 8003264:	43480000 	.word	0x43480000
 8003268:	43480000 	.word	0x43480000
 800326c:	43c80000 	.word	0x43c80000
 8003270:	43c80000 	.word	0x43c80000
 8003274:	44480000 	.word	0x44480000
 8003278:	44480000 	.word	0x44480000
 800327c:	44c80000 	.word	0x44c80000

08003280 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	460b      	mov	r3, r1
 800328e:	72fb      	strb	r3, [r7, #11]
 8003290:	4613      	mov	r3, r2
 8003292:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	695c      	ldr	r4, [r3, #20]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	7b1b      	ldrb	r3, [r3, #12]
 80032a0:	b298      	uxth	r0, r3
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	b299      	uxth	r1, r3
 80032a6:	893b      	ldrh	r3, [r7, #8]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	47a0      	blx	r4
 80032ac:	4603      	mov	r3, r0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd90      	pop	{r4, r7, pc}

080032b6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80032b6:	b590      	push	{r4, r7, lr}
 80032b8:	b087      	sub	sp, #28
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	461a      	mov	r2, r3
 80032c2:	460b      	mov	r3, r1
 80032c4:	72fb      	strb	r3, [r7, #11]
 80032c6:	4613      	mov	r3, r2
 80032c8:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	691c      	ldr	r4, [r3, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	7b1b      	ldrb	r3, [r3, #12]
 80032d6:	b298      	uxth	r0, r3
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	b299      	uxth	r1, r3
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	47a0      	blx	r4
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd90      	pop	{r4, r7, pc}

080032ec <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	460b      	mov	r3, r1
 80032fa:	72fb      	strb	r3, [r7, #11]
 80032fc:	4613      	mov	r3, r2
 80032fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685c      	ldr	r4, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68d8      	ldr	r0, [r3, #12]
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	7af9      	ldrb	r1, [r7, #11]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	47a0      	blx	r4
 8003310:	6178      	str	r0, [r7, #20]

  return ret;
 8003312:	697b      	ldr	r3, [r7, #20]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	461a      	mov	r2, r3
 8003328:	460b      	mov	r3, r1
 800332a:	72fb      	strb	r3, [r7, #11]
 800332c:	4613      	mov	r3, r2
 800332e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681c      	ldr	r4, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68d8      	ldr	r0, [r3, #12]
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	7af9      	ldrb	r1, [r7, #11]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	47a0      	blx	r4
 8003340:	6178      	str	r0, [r7, #20]

  return ret;
 8003342:	697b      	ldr	r3, [r7, #20]
}
 8003344:	4618      	mov	r0, r3
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd90      	pop	{r4, r7, pc}

0800334c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003358:	f107 0210 	add.w	r2, r7, #16
 800335c:	2301      	movs	r3, #1
 800335e:	2120      	movs	r1, #32
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffc3 	bl	80032ec <lis2dw12_read_reg>
 8003366:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	7c3b      	ldrb	r3, [r7, #16]
 800337a:	f362 0383 	bfi	r3, r2, #2, #2
 800337e:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	b2da      	uxtb	r2, r3
 8003388:	7c3b      	ldrb	r3, [r7, #16]
 800338a:	f362 0301 	bfi	r3, r2, #0, #2
 800338e:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003390:	f107 0210 	add.w	r2, r7, #16
 8003394:	2301      	movs	r3, #1
 8003396:	2120      	movs	r1, #32
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ffbf 	bl	800331c <lis2dw12_write_reg>
 800339e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80033a6:	f107 020c 	add.w	r2, r7, #12
 80033aa:	2301      	movs	r3, #1
 80033ac:	2125      	movs	r1, #37	; 0x25
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ff9c 	bl	80032ec <lis2dw12_read_reg>
 80033b4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d110      	bne.n	80033de <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	7b3b      	ldrb	r3, [r7, #12]
 80033c8:	f362 0382 	bfi	r3, r2, #2, #1
 80033cc:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80033ce:	f107 020c 	add.w	r2, r7, #12
 80033d2:	2301      	movs	r3, #1
 80033d4:	2125      	movs	r1, #37	; 0x25
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffa0 	bl	800331c <lis2dw12_write_reg>
 80033dc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80033de:	697b      	ldr	r3, [r7, #20]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80033f2:	f107 0210 	add.w	r2, r7, #16
 80033f6:	2301      	movs	r3, #1
 80033f8:	2120      	movs	r1, #32
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ff76 	bl	80032ec <lis2dw12_read_reg>
 8003400:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 80a3 	bne.w	8003550 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800340a:	f107 020c 	add.w	r2, r7, #12
 800340e:	2301      	movs	r3, #1
 8003410:	2125      	movs	r1, #37	; 0x25
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff6a 	bl	80032ec <lis2dw12_read_reg>
 8003418:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800341a:	7b3b      	ldrb	r3, [r7, #12]
 800341c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	011a      	lsls	r2, r3, #4
 8003424:	7c3b      	ldrb	r3, [r7, #16]
 8003426:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800342a:	b2db      	uxtb	r3, r3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8003430:	7c3a      	ldrb	r2, [r7, #16]
 8003432:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8003436:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003438:	4413      	add	r3, r2
 800343a:	2b1b      	cmp	r3, #27
 800343c:	f200 8084 	bhi.w	8003548 <lis2dw12_power_mode_get+0x160>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <lis2dw12_power_mode_get+0x60>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	080034d9 	.word	0x080034d9
 800344c:	080034d1 	.word	0x080034d1
 8003450:	080034c9 	.word	0x080034c9
 8003454:	080034c1 	.word	0x080034c1
 8003458:	080034b9 	.word	0x080034b9
 800345c:	08003549 	.word	0x08003549
 8003460:	08003549 	.word	0x08003549
 8003464:	08003549 	.word	0x08003549
 8003468:	080034f9 	.word	0x080034f9
 800346c:	080034f1 	.word	0x080034f1
 8003470:	080034e9 	.word	0x080034e9
 8003474:	080034e1 	.word	0x080034e1
 8003478:	08003549 	.word	0x08003549
 800347c:	08003549 	.word	0x08003549
 8003480:	08003549 	.word	0x08003549
 8003484:	08003549 	.word	0x08003549
 8003488:	08003521 	.word	0x08003521
 800348c:	08003519 	.word	0x08003519
 8003490:	08003511 	.word	0x08003511
 8003494:	08003509 	.word	0x08003509
 8003498:	08003501 	.word	0x08003501
 800349c:	08003549 	.word	0x08003549
 80034a0:	08003549 	.word	0x08003549
 80034a4:	08003549 	.word	0x08003549
 80034a8:	08003541 	.word	0x08003541
 80034ac:	08003539 	.word	0x08003539
 80034b0:	08003531 	.word	0x08003531
 80034b4:	08003529 	.word	0x08003529
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2204      	movs	r2, #4
 80034bc:	701a      	strb	r2, [r3, #0]
        break;
 80034be:	e048      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2203      	movs	r2, #3
 80034c4:	701a      	strb	r2, [r3, #0]
        break;
 80034c6:	e044      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
        break;
 80034ce:	e040      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
        break;
 80034d6:	e03c      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
        break;
 80034de:	e038      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	220b      	movs	r2, #11
 80034e4:	701a      	strb	r2, [r3, #0]
        break;
 80034e6:	e034      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	220a      	movs	r2, #10
 80034ec:	701a      	strb	r2, [r3, #0]
        break;
 80034ee:	e030      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2209      	movs	r2, #9
 80034f4:	701a      	strb	r2, [r3, #0]
        break;
 80034f6:	e02c      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2208      	movs	r2, #8
 80034fc:	701a      	strb	r2, [r3, #0]
        break;
 80034fe:	e028      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2214      	movs	r2, #20
 8003504:	701a      	strb	r2, [r3, #0]
        break;
 8003506:	e024      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2213      	movs	r2, #19
 800350c:	701a      	strb	r2, [r3, #0]
        break;
 800350e:	e020      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2212      	movs	r2, #18
 8003514:	701a      	strb	r2, [r3, #0]
        break;
 8003516:	e01c      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2211      	movs	r2, #17
 800351c:	701a      	strb	r2, [r3, #0]
        break;
 800351e:	e018      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2210      	movs	r2, #16
 8003524:	701a      	strb	r2, [r3, #0]
        break;
 8003526:	e014      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	221b      	movs	r2, #27
 800352c:	701a      	strb	r2, [r3, #0]
        break;
 800352e:	e010      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	221a      	movs	r2, #26
 8003534:	701a      	strb	r2, [r3, #0]
        break;
 8003536:	e00c      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2219      	movs	r2, #25
 800353c:	701a      	strb	r2, [r3, #0]
        break;
 800353e:	e008      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2218      	movs	r2, #24
 8003544:	701a      	strb	r2, [r3, #0]
        break;
 8003546:	e004      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2204      	movs	r2, #4
 800354c:	701a      	strb	r2, [r3, #0]
        break;
 800354e:	e000      	b.n	8003552 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003550:	bf00      	nop

  return ret;
 8003552:	697b      	ldr	r3, [r7, #20]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003568:	f107 0210 	add.w	r2, r7, #16
 800356c:	2301      	movs	r3, #1
 800356e:	2120      	movs	r1, #32
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff febb 	bl	80032ec <lis2dw12_read_reg>
 8003576:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	b2da      	uxtb	r2, r3
 8003586:	7c3b      	ldrb	r3, [r7, #16]
 8003588:	f362 1307 	bfi	r3, r2, #4, #4
 800358c:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800358e:	f107 0210 	add.w	r2, r7, #16
 8003592:	2301      	movs	r3, #1
 8003594:	2120      	movs	r1, #32
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fec0 	bl	800331c <lis2dw12_write_reg>
 800359c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d107      	bne.n	80035b4 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80035a4:	f107 020c 	add.w	r2, r7, #12
 80035a8:	2301      	movs	r3, #1
 80035aa:	2122      	movs	r1, #34	; 0x22
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff fe9d 	bl	80032ec <lis2dw12_read_reg>
 80035b2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d110      	bne.n	80035dc <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	7b3b      	ldrb	r3, [r7, #12]
 80035c6:	f362 0301 	bfi	r3, r2, #0, #2
 80035ca:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80035cc:	f107 020c 	add.w	r2, r7, #12
 80035d0:	2301      	movs	r3, #1
 80035d2:	2122      	movs	r1, #34	; 0x22
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fea1 	bl	800331c <lis2dw12_write_reg>
 80035da:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80035dc:	697b      	ldr	r3, [r7, #20]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80035f2:	f107 0210 	add.w	r2, r7, #16
 80035f6:	2301      	movs	r3, #1
 80035f8:	2120      	movs	r1, #32
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fe76 	bl	80032ec <lis2dw12_read_reg>
 8003600:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f040 80b3 	bne.w	8003770 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800360a:	f107 020c 	add.w	r2, r7, #12
 800360e:	2301      	movs	r3, #1
 8003610:	2122      	movs	r1, #34	; 0x22
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fe6a 	bl	80032ec <lis2dw12_read_reg>
 8003618:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800361a:	7b3b      	ldrb	r3, [r7, #12]
 800361c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	7c3a      	ldrb	r2, [r7, #16]
 8003626:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	4413      	add	r3, r2
 800362e:	2b32      	cmp	r3, #50	; 0x32
 8003630:	f200 809a 	bhi.w	8003768 <lis2dw12_data_rate_get+0x180>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <lis2dw12_data_rate_get+0x54>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003709 	.word	0x08003709
 8003640:	08003711 	.word	0x08003711
 8003644:	08003719 	.word	0x08003719
 8003648:	08003721 	.word	0x08003721
 800364c:	08003729 	.word	0x08003729
 8003650:	08003731 	.word	0x08003731
 8003654:	08003739 	.word	0x08003739
 8003658:	08003741 	.word	0x08003741
 800365c:	08003749 	.word	0x08003749
 8003660:	08003751 	.word	0x08003751
 8003664:	08003769 	.word	0x08003769
 8003668:	08003769 	.word	0x08003769
 800366c:	08003769 	.word	0x08003769
 8003670:	08003769 	.word	0x08003769
 8003674:	08003769 	.word	0x08003769
 8003678:	08003769 	.word	0x08003769
 800367c:	08003769 	.word	0x08003769
 8003680:	08003769 	.word	0x08003769
 8003684:	08003761 	.word	0x08003761
 8003688:	08003769 	.word	0x08003769
 800368c:	08003769 	.word	0x08003769
 8003690:	08003769 	.word	0x08003769
 8003694:	08003769 	.word	0x08003769
 8003698:	08003769 	.word	0x08003769
 800369c:	08003769 	.word	0x08003769
 80036a0:	08003769 	.word	0x08003769
 80036a4:	08003769 	.word	0x08003769
 80036a8:	08003769 	.word	0x08003769
 80036ac:	08003769 	.word	0x08003769
 80036b0:	08003769 	.word	0x08003769
 80036b4:	08003769 	.word	0x08003769
 80036b8:	08003769 	.word	0x08003769
 80036bc:	08003769 	.word	0x08003769
 80036c0:	08003769 	.word	0x08003769
 80036c4:	08003769 	.word	0x08003769
 80036c8:	08003769 	.word	0x08003769
 80036cc:	08003769 	.word	0x08003769
 80036d0:	08003769 	.word	0x08003769
 80036d4:	08003769 	.word	0x08003769
 80036d8:	08003769 	.word	0x08003769
 80036dc:	08003769 	.word	0x08003769
 80036e0:	08003769 	.word	0x08003769
 80036e4:	08003769 	.word	0x08003769
 80036e8:	08003769 	.word	0x08003769
 80036ec:	08003769 	.word	0x08003769
 80036f0:	08003769 	.word	0x08003769
 80036f4:	08003769 	.word	0x08003769
 80036f8:	08003769 	.word	0x08003769
 80036fc:	08003769 	.word	0x08003769
 8003700:	08003769 	.word	0x08003769
 8003704:	08003759 	.word	0x08003759
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
        break;
 800370e:	e030      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
        break;
 8003716:	e02c      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
        break;
 800371e:	e028      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2203      	movs	r2, #3
 8003724:	701a      	strb	r2, [r3, #0]
        break;
 8003726:	e024      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2204      	movs	r2, #4
 800372c:	701a      	strb	r2, [r3, #0]
        break;
 800372e:	e020      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2205      	movs	r2, #5
 8003734:	701a      	strb	r2, [r3, #0]
        break;
 8003736:	e01c      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2206      	movs	r2, #6
 800373c:	701a      	strb	r2, [r3, #0]
        break;
 800373e:	e018      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2207      	movs	r2, #7
 8003744:	701a      	strb	r2, [r3, #0]
        break;
 8003746:	e014      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2208      	movs	r2, #8
 800374c:	701a      	strb	r2, [r3, #0]
        break;
 800374e:	e010      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2209      	movs	r2, #9
 8003754:	701a      	strb	r2, [r3, #0]
        break;
 8003756:	e00c      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2232      	movs	r2, #50	; 0x32
 800375c:	701a      	strb	r2, [r3, #0]
        break;
 800375e:	e008      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2212      	movs	r2, #18
 8003764:	701a      	strb	r2, [r3, #0]
        break;
 8003766:	e004      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
        break;
 800376e:	e000      	b.n	8003772 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003770:	bf00      	nop

  return ret;
 8003772:	697b      	ldr	r3, [r7, #20]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003788:	f107 0208 	add.w	r2, r7, #8
 800378c:	2301      	movs	r3, #1
 800378e:	2121      	movs	r1, #33	; 0x21
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff fdab 	bl	80032ec <lis2dw12_read_reg>
 8003796:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	7a3b      	ldrb	r3, [r7, #8]
 80037a8:	f362 03c3 	bfi	r3, r2, #3, #1
 80037ac:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80037ae:	f107 0208 	add.w	r2, r7, #8
 80037b2:	2301      	movs	r3, #1
 80037b4:	2121      	movs	r1, #33	; 0x21
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fdb0 	bl	800331c <lis2dw12_write_reg>
 80037bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80037d4:	f107 0208 	add.w	r2, r7, #8
 80037d8:	2301      	movs	r3, #1
 80037da:	2125      	movs	r1, #37	; 0x25
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fd85 	bl	80032ec <lis2dw12_read_reg>
 80037e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	7a3b      	ldrb	r3, [r7, #8]
 80037f4:	f362 1305 	bfi	r3, r2, #4, #2
 80037f8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80037fa:	f107 0208 	add.w	r2, r7, #8
 80037fe:	2301      	movs	r3, #1
 8003800:	2125      	movs	r1, #37	; 0x25
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fd8a 	bl	800331c <lis2dw12_write_reg>
 8003808:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800381e:	f107 0208 	add.w	r2, r7, #8
 8003822:	2301      	movs	r3, #1
 8003824:	2125      	movs	r1, #37	; 0x25
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fd60 	bl	80032ec <lis2dw12_read_reg>
 800382c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800382e:	7a3b      	ldrb	r3, [r7, #8]
 8003830:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b03      	cmp	r3, #3
 8003838:	d81a      	bhi.n	8003870 <lis2dw12_full_scale_get+0x5c>
 800383a:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <lis2dw12_full_scale_get+0x2c>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	08003851 	.word	0x08003851
 8003844:	08003859 	.word	0x08003859
 8003848:	08003861 	.word	0x08003861
 800384c:	08003869 	.word	0x08003869
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
      break;
 8003856:	e00f      	b.n	8003878 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
      break;
 800385e:	e00b      	b.n	8003878 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]
      break;
 8003866:	e007      	b.n	8003878 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2203      	movs	r2, #3
 800386c:	701a      	strb	r2, [r3, #0]
      break;
 800386e:	e003      	b.n	8003878 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
      break;
 8003876:	bf00      	nop
  }

  return ret;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop

08003884 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800388e:	f107 020c 	add.w	r2, r7, #12
 8003892:	2306      	movs	r3, #6
 8003894:	2128      	movs	r1, #40	; 0x28
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fd28 	bl	80032ec <lis2dw12_read_reg>
 800389c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	7b3b      	ldrb	r3, [r7, #12]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	b21a      	sxth	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	3302      	adds	r3, #2
 80038c6:	b212      	sxth	r2, r2
 80038c8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	3302      	adds	r3, #2
 80038ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	4413      	add	r3, r2
 80038de:	b29a      	uxth	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	3302      	adds	r3, #2
 80038e4:	b212      	sxth	r2, r2
 80038e6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80038e8:	7c7a      	ldrb	r2, [r7, #17]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	b212      	sxth	r2, r2
 80038f0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3304      	adds	r3, #4
 80038f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	b29a      	uxth	r2, r3
 8003900:	7c3b      	ldrb	r3, [r7, #16]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4413      	add	r3, r2
 8003906:	b29a      	uxth	r2, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	3304      	adds	r3, #4
 800390c:	b212      	sxth	r2, r2
 800390e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003910:	697b      	ldr	r3, [r7, #20]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003924:	2301      	movs	r3, #1
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	210f      	movs	r1, #15
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fcde 	bl	80032ec <lis2dw12_read_reg>
 8003930:	60f8      	str	r0, [r7, #12]

  return ret;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003948:	f107 0208 	add.w	r2, r7, #8
 800394c:	2301      	movs	r3, #1
 800394e:	2121      	movs	r1, #33	; 0x21
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fccb 	bl	80032ec <lis2dw12_read_reg>
 8003956:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	b2da      	uxtb	r2, r3
 8003966:	7a3b      	ldrb	r3, [r7, #8]
 8003968:	f362 0382 	bfi	r3, r2, #2, #1
 800396c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800396e:	f107 0208 	add.w	r2, r7, #8
 8003972:	2301      	movs	r3, #1
 8003974:	2121      	movs	r1, #33	; 0x21
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fcd0 	bl	800331c <lis2dw12_write_reg>
 800397c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003994:	f107 0208 	add.w	r2, r7, #8
 8003998:	2301      	movs	r3, #1
 800399a:	212e      	movs	r1, #46	; 0x2e
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fca5 	bl	80032ec <lis2dw12_read_reg>
 80039a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	7a3b      	ldrb	r3, [r7, #8]
 80039b4:	f362 1347 	bfi	r3, r2, #5, #3
 80039b8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80039ba:	f107 0208 	add.w	r2, r7, #8
 80039be:	2301      	movs	r3, #1
 80039c0:	212e      	movs	r1, #46	; 0x2e
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fcaa 	bl	800331c <lis2dw12_write_reg>
 80039c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e067      	b.n	8003ac0 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	7b1a      	ldrb	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a28      	ldr	r2, [pc, #160]	; (8003acc <LIS2MDL_RegisterBusIO+0xf8>)
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <LIS2MDL_RegisterBusIO+0xfc>)
 8003a32:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e036      	b.n	8003ac0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4798      	blx	r3
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e02c      	b.n	8003ac0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d028      	beq.n	8003ac0 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d123      	bne.n	8003ac0 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10d      	bne.n	8003a9c <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003a80:	2334      	movs	r3, #52	; 0x34
 8003a82:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003a84:	7afb      	ldrb	r3, [r7, #11]
 8003a86:	461a      	mov	r2, r3
 8003a88:	2162      	movs	r1, #98	; 0x62
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fb1b 	bl	80040c6 <LIS2MDL_Write_Reg>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e012      	b.n	8003ac2 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d101      	bne.n	8003aa8 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	e00c      	b.n	8003ac2 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3320      	adds	r3, #32
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 ff70 	bl	8004994 <lis2mdl_i2c_interface_set>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e000      	b.n	8003ac2 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	0800411d 	.word	0x0800411d
 8003ad0:	0800419f 	.word	0x0800419f

08003ad4 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d144      	bne.n	8003b6e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003ae4:	f107 0208 	add.w	r2, r7, #8
 8003ae8:	2301      	movs	r3, #1
 8003aea:	2162      	movs	r1, #98	; 0x62
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb97 	bl	8004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295
 8003afc:	e06c      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003afe:	f107 020c 	add.w	r2, r7, #12
 8003b02:	2301      	movs	r3, #1
 8003b04:	2160      	movs	r1, #96	; 0x60
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fb8a 	bl	8004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	e05f      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003b18:	7a3b      	ldrb	r3, [r7, #8]
 8003b1a:	f043 0310 	orr.w	r3, r3, #16
 8003b1e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003b20:	7a3b      	ldrb	r3, [r7, #8]
 8003b22:	f36f 0341 	bfc	r3, #1, #1
 8003b26:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003b28:	7b3b      	ldrb	r3, [r7, #12]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f362 0301 	bfi	r3, r2, #0, #2
 8003b30:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003b32:	7b3b      	ldrb	r3, [r7, #12]
 8003b34:	f043 030c 	orr.w	r3, r3, #12
 8003b38:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003b3a:	f107 0208 	add.w	r2, r7, #8
 8003b3e:	2301      	movs	r3, #1
 8003b40:	2162      	movs	r1, #98	; 0x62
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fcab 	bl	800449e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	e041      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003b54:	f107 020c 	add.w	r2, r7, #12
 8003b58:	2301      	movs	r3, #1
 8003b5a:	2160      	movs	r1, #96	; 0x60
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fc9e 	bl	800449e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d032      	beq.n	8003bce <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	e034      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3320      	adds	r3, #32
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fe65 	bl	8004844 <lis2mdl_block_data_update_set>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003b80:	f04f 33ff 	mov.w	r3, #4294967295
 8003b84:	e028      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3320      	adds	r3, #32
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fdd4 	bl	800473a <lis2mdl_operating_mode_set>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	e01c      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3320      	adds	r3, #32
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fdee 	bl	8004786 <lis2mdl_data_rate_set>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	e010      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3320      	adds	r3, #32
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fec3 	bl	8004948 <lis2mdl_self_test_set>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bcc:	e004      	b.n	8003bd8 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8a5 	bl	8003d38 <LIS2MDL_MAG_Disable>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf8:	e004      	b.n	8003c04 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d10b      	bne.n	8003c36 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003c1e:	2301      	movs	r3, #1
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	214f      	movs	r1, #79	; 0x4f
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fafb 	bl	8004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00e      	beq.n	8003c4e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295
 8003c34:	e00c      	b.n	8003c50 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3320      	adds	r3, #32
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fe72 	bl	8004926 <lis2mdl_device_id_get>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4c:	e000      	b.n	8003c50 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2201      	movs	r2, #1
 8003c72:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2232      	movs	r2, #50	; 0x32
 8003c8a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <LIS2MDL_GetCapabilities+0x58>)
 8003ca0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	42c80000 	.word	0x42c80000

08003cb4 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e032      	b.n	8003d30 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d11d      	bne.n	8003d0e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003cd2:	f107 020c 	add.w	r2, r7, #12
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	2160      	movs	r1, #96	; 0x60
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 faa0 	bl	8004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	e021      	b.n	8003d30 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003cec:	7b3b      	ldrb	r3, [r7, #12]
 8003cee:	f36f 0301 	bfc	r3, #0, #2
 8003cf2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003cf4:	f107 020c 	add.w	r2, r7, #12
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	2160      	movs	r1, #96	; 0x60
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fbce 	bl	800449e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	e010      	b.n	8003d30 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3320      	adds	r3, #32
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fd10 	bl	800473a <lis2mdl_operating_mode_set>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	e004      	b.n	8003d30 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e033      	b.n	8003db6 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d11e      	bne.n	8003d94 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d56:	f107 020c 	add.w	r2, r7, #12
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	2160      	movs	r1, #96	; 0x60
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa5e 	bl	8004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e022      	b.n	8003db6 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003d70:	7b3b      	ldrb	r3, [r7, #12]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f362 0301 	bfi	r3, r2, #0, #2
 8003d78:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003d7a:	f107 020c 	add.w	r2, r7, #12
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2160      	movs	r1, #96	; 0x60
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fb8b 	bl	800449e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00e      	beq.n	8003dac <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d92:	e010      	b.n	8003db6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3320      	adds	r3, #32
 8003d98:	2102      	movs	r1, #2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fccd 	bl	800473a <lis2mdl_operating_mode_set>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e004      	b.n	8003db6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003dce:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3320      	adds	r3, #32
 8003df2:	f107 020b 	add.w	r2, r7, #11
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fceb 	bl	80047d4 <lis2mdl_data_rate_get>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	e023      	b.n	8003e52 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d81b      	bhi.n	8003e48 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e39 	.word	0x08003e39
 8003e24:	08003e41 	.word	0x08003e41
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003e2c:	601a      	str	r2, [r3, #0]
      break;
 8003e2e:	e00f      	b.n	8003e50 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4a0b      	ldr	r2, [pc, #44]	; (8003e60 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003e34:	601a      	str	r2, [r3, #0]
      break;
 8003e36:	e00b      	b.n	8003e50 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003e3c:	601a      	str	r2, [r3, #0]
      break;
 8003e3e:	e007      	b.n	8003e50 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003e44:	601a      	str	r2, [r3, #0]
      break;
 8003e46:	e003      	b.n	8003e50 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	60fb      	str	r3, [r7, #12]
      break;
 8003e4e:	bf00      	nop
  }

  return ret;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	41200000 	.word	0x41200000
 8003e60:	41a00000 	.word	0x41a00000
 8003e64:	42480000 	.word	0x42480000
 8003e68:	42c80000 	.word	0x42c80000

08003e6c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003e78:	edd7 7a00 	vldr	s15, [r7]
 8003e7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e88:	d801      	bhi.n	8003e8e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e016      	b.n	8003ebc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003e8e:	edd7 7a00 	vldr	s15, [r7]
 8003e92:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	d801      	bhi.n	8003ea4 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e00b      	b.n	8003ebc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003ea4:	edd7 7a00 	vldr	s15, [r7]
 8003ea8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003f30 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	d801      	bhi.n	8003eba <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e000      	b.n	8003ebc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003eba:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003ebc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d121      	bne.n	8003f0a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003ec6:	f107 020c 	add.w	r2, r7, #12
 8003eca:	2301      	movs	r3, #1
 8003ecc:	2160      	movs	r1, #96	; 0x60
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9a6 	bl	8004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e022      	b.n	8003f26 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	7b3b      	ldrb	r3, [r7, #12]
 8003eea:	f362 0383 	bfi	r3, r2, #2, #2
 8003eee:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003ef0:	f107 020c 	add.w	r2, r7, #12
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	2160      	movs	r1, #96	; 0x60
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fad0 	bl	800449e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00f      	beq.n	8003f24 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295
 8003f08:	e00d      	b.n	8003f26 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3320      	adds	r3, #32
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fc37 	bl	8004786 <lis2mdl_data_rate_set>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	e000      	b.n	8003f26 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	42480000 	.word	0x42480000

08003f34 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2232      	movs	r2, #50	; 0x32
 8003f42:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3320      	adds	r3, #32
 8003f78:	f107 0208 	add.w	r2, r7, #8
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fc86 	bl	8004890 <lis2mdl_magnetic_raw_get>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	e00c      	b.n	8003faa <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003f90:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003f98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003fa0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d137      	bne.n	8004034 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003fc4:	f107 0218 	add.w	r2, r7, #24
 8003fc8:	2306      	movs	r3, #6
 8003fca:	2168      	movs	r1, #104	; 0x68
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f927 	bl	8004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fdc:	e06f      	b.n	80040be <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003fde:	7e7b      	ldrb	r3, [r7, #25]
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003fe4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	7e3b      	ldrb	r3, [r7, #24]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	b21b      	sxth	r3, r3
 8003ff8:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003ffa:	7efb      	ldrb	r3, [r7, #27]
 8003ffc:	b21b      	sxth	r3, r3
 8003ffe:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004004:	b29b      	uxth	r3, r3
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	b29a      	uxth	r2, r3
 800400a:	7ebb      	ldrb	r3, [r7, #26]
 800400c:	b29b      	uxth	r3, r3
 800400e:	4413      	add	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	b21b      	sxth	r3, r3
 8004014:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004016:	7f7b      	ldrb	r3, [r7, #29]
 8004018:	b21b      	sxth	r3, r3
 800401a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800401c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004020:	b29b      	uxth	r3, r3
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	b29a      	uxth	r2, r3
 8004026:	7f3b      	ldrb	r3, [r7, #28]
 8004028:	b29b      	uxth	r3, r3
 800402a:	4413      	add	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	b21b      	sxth	r3, r3
 8004030:	82bb      	strh	r3, [r7, #20]
 8004032:	e00d      	b.n	8004050 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3320      	adds	r3, #32
 8004038:	f107 0210 	add.w	r2, r7, #16
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fc26 	bl	8004890 <lis2mdl_magnetic_raw_get>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	e036      	b.n	80040be <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004050:	f107 030c 	add.w	r3, r7, #12
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff feb1 	bl	8003dbe <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800405c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004068:	edd7 7a03 	vldr	s15, [r7, #12]
 800406c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004074:	ee17 2a90 	vmov	r2, s15
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800407c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004080:	ee07 3a90 	vmov	s15, r3
 8004084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004088:	edd7 7a03 	vldr	s15, [r7, #12]
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004094:	ee17 2a90 	vmov	r2, s15
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800409c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80040ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b4:	ee17 2a90 	vmov	r2, s15
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	70fb      	strb	r3, [r7, #3]
 80040d2:	4613      	mov	r3, r2
 80040d4:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d10b      	bne.n	80040f6 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80040de:	1cba      	adds	r2, r7, #2
 80040e0:	78f9      	ldrb	r1, [r7, #3]
 80040e2:	2301      	movs	r3, #1
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f9da 	bl	800449e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e00e      	b.n	8004114 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f103 0020 	add.w	r0, r3, #32
 80040fc:	1cba      	adds	r2, r7, #2
 80040fe:	78f9      	ldrb	r1, [r7, #3]
 8004100:	2301      	movs	r3, #1
 8004102:	f000 fb02 	bl	800470a <lis2mdl_write_reg>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800410c:	f04f 33ff 	mov.w	r3, #4294967295
 8004110:	e000      	b.n	8004114 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	461a      	mov	r2, r3
 8004128:	460b      	mov	r3, r1
 800412a:	72fb      	strb	r3, [r7, #11]
 800412c:	4613      	mov	r3, r2
 800412e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10e      	bne.n	800415a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	695c      	ldr	r4, [r3, #20]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	7b1b      	ldrb	r3, [r3, #12]
 8004144:	b298      	uxth	r0, r3
 8004146:	7afb      	ldrb	r3, [r7, #11]
 8004148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800414c:	b2db      	uxtb	r3, r3
 800414e:	b299      	uxth	r1, r3
 8004150:	893b      	ldrh	r3, [r7, #8]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	47a0      	blx	r4
 8004156:	4603      	mov	r3, r0
 8004158:	e01d      	b.n	8004196 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d10b      	bne.n	800417a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	695c      	ldr	r4, [r3, #20]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	7b1b      	ldrb	r3, [r3, #12]
 800416a:	b298      	uxth	r0, r3
 800416c:	7afb      	ldrb	r3, [r7, #11]
 800416e:	b299      	uxth	r1, r3
 8004170:	893b      	ldrh	r3, [r7, #8]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	47a0      	blx	r4
 8004176:	4603      	mov	r3, r0
 8004178:	e00d      	b.n	8004196 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	695c      	ldr	r4, [r3, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	7b1b      	ldrb	r3, [r3, #12]
 8004182:	b298      	uxth	r0, r3
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418a:	b2db      	uxtb	r3, r3
 800418c:	b299      	uxth	r1, r3
 800418e:	893b      	ldrh	r3, [r7, #8]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	47a0      	blx	r4
 8004194:	4603      	mov	r3, r0
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd90      	pop	{r4, r7, pc}

0800419e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800419e:	b590      	push	{r4, r7, lr}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	461a      	mov	r2, r3
 80041aa:	460b      	mov	r3, r1
 80041ac:	72fb      	strb	r3, [r7, #11]
 80041ae:	4613      	mov	r3, r2
 80041b0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10e      	bne.n	80041dc <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	691c      	ldr	r4, [r3, #16]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	7b1b      	ldrb	r3, [r3, #12]
 80041c6:	b298      	uxth	r0, r3
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	b299      	uxth	r1, r3
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	47a0      	blx	r4
 80041d8:	4603      	mov	r3, r0
 80041da:	e01d      	b.n	8004218 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d10b      	bne.n	80041fc <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	691c      	ldr	r4, [r3, #16]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	7b1b      	ldrb	r3, [r3, #12]
 80041ec:	b298      	uxth	r0, r3
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	b299      	uxth	r1, r3
 80041f2:	893b      	ldrh	r3, [r7, #8]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	47a0      	blx	r4
 80041f8:	4603      	mov	r3, r0
 80041fa:	e00d      	b.n	8004218 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	691c      	ldr	r4, [r3, #16]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	7b1b      	ldrb	r3, [r3, #12]
 8004204:	b298      	uxth	r0, r3
 8004206:	7afb      	ldrb	r3, [r7, #11]
 8004208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420c:	b2db      	uxtb	r3, r3
 800420e:	b299      	uxth	r1, r3
 8004210:	893b      	ldrh	r3, [r7, #8]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	47a0      	blx	r4
 8004216:	4603      	mov	r3, r0
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	; 0x30
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	461a      	mov	r2, r3
 800422c:	460b      	mov	r3, r1
 800422e:	72fb      	strb	r3, [r7, #11]
 8004230:	4613      	mov	r3, r2
 8004232:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 800423a:	2340      	movs	r3, #64	; 0x40
 800423c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004246:	233d      	movs	r3, #61	; 0x3d
 8004248:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 800424a:	2315      	movs	r3, #21
 800424c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004250:	2316      	movs	r3, #22
 8004252:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004256:	2317      	movs	r3, #23
 8004258:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 800425c:	2314      	movs	r3, #20
 800425e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004262:	2344      	movs	r3, #68	; 0x44
 8004264:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004266:	2302      	movs	r3, #2
 8004268:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800426c:	2339      	movs	r3, #57	; 0x39
 800426e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004278:	2329      	movs	r3, #41	; 0x29
 800427a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800427e:	231e      	movs	r3, #30
 8004280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004290:	2310      	movs	r3, #16
 8004292:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f103 0020 	add.w	r0, r3, #32
 80042a8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80042ac:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80042b0:	2301      	movs	r3, #1
 80042b2:	f000 fa2a 	bl	800470a <lis2mdl_write_reg>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80042bc:	f04f 33ff 	mov.w	r3, #4294967295
 80042c0:	e0e9      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f103 0020 	add.w	r0, r3, #32
 80042c8:	f107 021f 	add.w	r2, r7, #31
 80042cc:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80042d0:	2301      	movs	r3, #1
 80042d2:	f000 fa1a 	bl	800470a <lis2mdl_write_reg>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 80042dc:	f04f 33ff 	mov.w	r3, #4294967295
 80042e0:	e0d9      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f103 0020 	add.w	r0, r3, #32
 80042e8:	f107 020b 	add.w	r2, r7, #11
 80042ec:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80042f0:	2301      	movs	r3, #1
 80042f2:	f000 fa0a 	bl	800470a <lis2mdl_write_reg>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004300:	e0c9      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f103 0020 	add.w	r0, r3, #32
 8004308:	f107 021d 	add.w	r2, r7, #29
 800430c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004310:	2301      	movs	r3, #1
 8004312:	f000 f9fa 	bl	800470a <lis2mdl_write_reg>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295
 8004320:	e0b9      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f103 0020 	add.w	r0, r3, #32
 8004328:	f107 021e 	add.w	r2, r7, #30
 800432c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004330:	2301      	movs	r3, #1
 8004332:	f000 f9ea 	bl	800470a <lis2mdl_write_reg>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	e0a9      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f103 0020 	add.w	r0, r3, #32
 8004348:	f107 0220 	add.w	r2, r7, #32
 800434c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004350:	2301      	movs	r3, #1
 8004352:	f000 f9da 	bl	800470a <lis2mdl_write_reg>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	e099      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f103 0020 	add.w	r0, r3, #32
 8004368:	f107 021c 	add.w	r2, r7, #28
 800436c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004370:	2301      	movs	r3, #1
 8004372:	f000 f9b2 	bl	80046da <lis2mdl_read_reg>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	e089      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004382:	7f3b      	ldrb	r3, [r7, #28]
 8004384:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004388:	429a      	cmp	r2, r3
 800438a:	d102      	bne.n	8004392 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800438c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004390:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f103 0020 	add.w	r0, r3, #32
 8004398:	f107 021c 	add.w	r2, r7, #28
 800439c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80043a0:	2301      	movs	r3, #1
 80043a2:	f000 f9b2 	bl	800470a <lis2mdl_write_reg>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	e071      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f103 0020 	add.w	r0, r3, #32
 80043b8:	f107 0214 	add.w	r2, r7, #20
 80043bc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80043c0:	2306      	movs	r3, #6
 80043c2:	f000 f98a 	bl	80046da <lis2mdl_read_reg>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	e061      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 0020 	add.w	r0, r3, #32
 80043d8:	f107 021b 	add.w	r2, r7, #27
 80043dc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80043e0:	2301      	movs	r3, #1
 80043e2:	f000 f97a 	bl	80046da <lis2mdl_read_reg>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	e051      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 80043f2:	7efa      	ldrb	r2, [r7, #27]
 80043f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043f8:	4013      	ands	r3, r2
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004400:	429a      	cmp	r2, r3
 8004402:	d1e6      	bne.n	80043d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f103 0020 	add.w	r0, r3, #32
 800440a:	f107 021b 	add.w	r2, r7, #27
 800440e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8004412:	2301      	movs	r3, #1
 8004414:	f000 f961 	bl	80046da <lis2mdl_read_reg>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	e038      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004424:	7efa      	ldrb	r2, [r7, #27]
 8004426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800442a:	4013      	ands	r3, r2
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004432:	429a      	cmp	r2, r3
 8004434:	d1e6      	bne.n	8004404 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f103 0020 	add.w	r0, r3, #32
 800443c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004440:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004444:	2301      	movs	r3, #1
 8004446:	f000 f960 	bl	800470a <lis2mdl_write_reg>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	e01f      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f103 0020 	add.w	r0, r3, #32
 800445c:	893b      	ldrh	r3, [r7, #8]
 800445e:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	f000 f939 	bl	80046da <lis2mdl_read_reg>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e010      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f103 0020 	add.w	r0, r3, #32
 800447a:	f107 0220 	add.w	r2, r7, #32
 800447e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004482:	2301      	movs	r3, #1
 8004484:	f000 f941 	bl	800470a <lis2mdl_write_reg>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	e000      	b.n	8004496 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3730      	adds	r7, #48	; 0x30
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b08c      	sub	sp, #48	; 0x30
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	461a      	mov	r2, r3
 80044aa:	460b      	mov	r3, r1
 80044ac:	72fb      	strb	r3, [r7, #11]
 80044ae:	4613      	mov	r3, r2
 80044b0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80044b8:	2340      	movs	r3, #64	; 0x40
 80044ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80044be:	2300      	movs	r3, #0
 80044c0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80044c4:	233c      	movs	r3, #60	; 0x3c
 80044c6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80044c8:	2315      	movs	r3, #21
 80044ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80044ce:	2316      	movs	r3, #22
 80044d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80044d4:	2317      	movs	r3, #23
 80044d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80044de:	2314      	movs	r3, #20
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80044e4:	2344      	movs	r3, #68	; 0x44
 80044e6:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80044e8:	2339      	movs	r3, #57	; 0x39
 80044ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80044f4:	2329      	movs	r3, #41	; 0x29
 80044f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80044fa:	231e      	movs	r3, #30
 80044fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004506:	2310      	movs	r3, #16
 8004508:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004512:	2340      	movs	r3, #64	; 0x40
 8004514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004518:	230e      	movs	r3, #14
 800451a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f103 0020 	add.w	r0, r3, #32
 8004524:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004528:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800452c:	2301      	movs	r3, #1
 800452e:	f000 f8ec 	bl	800470a <lis2mdl_write_reg>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004538:	f04f 33ff 	mov.w	r3, #4294967295
 800453c:	e0c9      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f103 0020 	add.w	r0, r3, #32
 8004544:	f107 021f 	add.w	r2, r7, #31
 8004548:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800454c:	2301      	movs	r3, #1
 800454e:	f000 f8dc 	bl	800470a <lis2mdl_write_reg>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	e0b9      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f103 0020 	add.w	r0, r3, #32
 8004564:	f107 020b 	add.w	r2, r7, #11
 8004568:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800456c:	2301      	movs	r3, #1
 800456e:	f000 f8cc 	bl	800470a <lis2mdl_write_reg>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	e0a9      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f103 0020 	add.w	r0, r3, #32
 8004584:	f107 021e 	add.w	r2, r7, #30
 8004588:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800458c:	2301      	movs	r3, #1
 800458e:	f000 f8bc 	bl	800470a <lis2mdl_write_reg>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	e099      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f103 0020 	add.w	r0, r3, #32
 80045a4:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80045a8:	2301      	movs	r3, #1
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	f000 f8ad 	bl	800470a <lis2mdl_write_reg>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	e08a      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f103 0020 	add.w	r0, r3, #32
 80045c2:	f107 021d 	add.w	r2, r7, #29
 80045c6:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80045ca:	2301      	movs	r3, #1
 80045cc:	f000 f89d 	bl	800470a <lis2mdl_write_reg>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e07a      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f103 0020 	add.w	r0, r3, #32
 80045e2:	f107 0220 	add.w	r2, r7, #32
 80045e6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80045ea:	2301      	movs	r3, #1
 80045ec:	f000 f88d 	bl	800470a <lis2mdl_write_reg>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e06a      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f103 0020 	add.w	r0, r3, #32
 8004602:	f107 021c 	add.w	r2, r7, #28
 8004606:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800460a:	2301      	movs	r3, #1
 800460c:	f000 f865 	bl	80046da <lis2mdl_read_reg>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	e05a      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800461c:	7f3b      	ldrb	r3, [r7, #28]
 800461e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d102      	bne.n	800462c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800462a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f103 0020 	add.w	r0, r3, #32
 8004632:	f107 021c 	add.w	r2, r7, #28
 8004636:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800463a:	2301      	movs	r3, #1
 800463c:	f000 f865 	bl	800470a <lis2mdl_write_reg>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e042      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f103 0020 	add.w	r0, r3, #32
 8004652:	f107 0214 	add.w	r2, r7, #20
 8004656:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800465a:	2306      	movs	r3, #6
 800465c:	f000 f83d 	bl	80046da <lis2mdl_read_reg>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	e032      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f103 0020 	add.w	r0, r3, #32
 8004672:	f107 021b 	add.w	r2, r7, #27
 8004676:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800467a:	2301      	movs	r3, #1
 800467c:	f000 f82d 	bl	80046da <lis2mdl_read_reg>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	e022      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 800468c:	7efa      	ldrb	r2, [r7, #27]
 800468e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004692:	4013      	ands	r3, r2
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800469a:	429a      	cmp	r2, r3
 800469c:	d1e6      	bne.n	800466c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f103 0020 	add.w	r0, r3, #32
 80046a4:	f107 021b 	add.w	r2, r7, #27
 80046a8:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80046ac:	2301      	movs	r3, #1
 80046ae:	f000 f814 	bl	80046da <lis2mdl_read_reg>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	e009      	b.n	80046d2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80046be:	7efa      	ldrb	r2, [r7, #27]
 80046c0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80046c4:	4013      	ands	r3, r2
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1e6      	bne.n	800469e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3730      	adds	r7, #48	; 0x30
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80046da:	b590      	push	{r4, r7, lr}
 80046dc:	b087      	sub	sp, #28
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	461a      	mov	r2, r3
 80046e6:	460b      	mov	r3, r1
 80046e8:	72fb      	strb	r3, [r7, #11]
 80046ea:	4613      	mov	r3, r2
 80046ec:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685c      	ldr	r4, [r3, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68d8      	ldr	r0, [r3, #12]
 80046f6:	893b      	ldrh	r3, [r7, #8]
 80046f8:	7af9      	ldrb	r1, [r7, #11]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	47a0      	blx	r4
 80046fe:	6178      	str	r0, [r7, #20]

  return ret;
 8004700:	697b      	ldr	r3, [r7, #20]
}
 8004702:	4618      	mov	r0, r3
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}

0800470a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800470a:	b590      	push	{r4, r7, lr}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	461a      	mov	r2, r3
 8004716:	460b      	mov	r3, r1
 8004718:	72fb      	strb	r3, [r7, #11]
 800471a:	4613      	mov	r3, r2
 800471c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681c      	ldr	r4, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68d8      	ldr	r0, [r3, #12]
 8004726:	893b      	ldrh	r3, [r7, #8]
 8004728:	7af9      	ldrb	r1, [r7, #11]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	47a0      	blx	r4
 800472e:	6178      	str	r0, [r7, #20]

  return ret;
 8004730:	697b      	ldr	r3, [r7, #20]
}
 8004732:	4618      	mov	r0, r3
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}

0800473a <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004746:	f107 0208 	add.w	r2, r7, #8
 800474a:	2301      	movs	r3, #1
 800474c:	2160      	movs	r1, #96	; 0x60
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ffc3 	bl	80046da <lis2mdl_read_reg>
 8004754:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10f      	bne.n	800477c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	b2da      	uxtb	r2, r3
 8004764:	7a3b      	ldrb	r3, [r7, #8]
 8004766:	f362 0301 	bfi	r3, r2, #0, #2
 800476a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800476c:	f107 0208 	add.w	r2, r7, #8
 8004770:	2301      	movs	r3, #1
 8004772:	2160      	movs	r1, #96	; 0x60
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ffc8 	bl	800470a <lis2mdl_write_reg>
 800477a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800477c:	68fb      	ldr	r3, [r7, #12]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004792:	f107 0208 	add.w	r2, r7, #8
 8004796:	2301      	movs	r3, #1
 8004798:	2160      	movs	r1, #96	; 0x60
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff ff9d 	bl	80046da <lis2mdl_read_reg>
 80047a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10f      	bne.n	80047c8 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	7a3b      	ldrb	r3, [r7, #8]
 80047b2:	f362 0383 	bfi	r3, r2, #2, #2
 80047b6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80047b8:	f107 0208 	add.w	r2, r7, #8
 80047bc:	2301      	movs	r3, #1
 80047be:	2160      	movs	r1, #96	; 0x60
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ffa2 	bl	800470a <lis2mdl_write_reg>
 80047c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047c8:	68fb      	ldr	r3, [r7, #12]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80047de:	f107 0208 	add.w	r2, r7, #8
 80047e2:	2301      	movs	r3, #1
 80047e4:	2160      	movs	r1, #96	; 0x60
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff ff77 	bl	80046da <lis2mdl_read_reg>
 80047ec:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80047ee:	7a3b      	ldrb	r3, [r7, #8]
 80047f0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d81a      	bhi.n	8004830 <lis2mdl_data_rate_get+0x5c>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <lis2mdl_data_rate_get+0x2c>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004811 	.word	0x08004811
 8004804:	08004819 	.word	0x08004819
 8004808:	08004821 	.word	0x08004821
 800480c:	08004829 	.word	0x08004829
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
      break;
 8004816:	e00f      	b.n	8004838 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
      break;
 800481e:	e00b      	b.n	8004838 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	701a      	strb	r2, [r3, #0]
      break;
 8004826:	e007      	b.n	8004838 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2203      	movs	r2, #3
 800482c:	701a      	strb	r2, [r3, #0]
      break;
 800482e:	e003      	b.n	8004838 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
      break;
 8004836:	bf00      	nop
  }

  return ret;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop

08004844 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004850:	f107 0208 	add.w	r2, r7, #8
 8004854:	2301      	movs	r3, #1
 8004856:	2162      	movs	r1, #98	; 0x62
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff3e 	bl	80046da <lis2mdl_read_reg>
 800485e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	7a3b      	ldrb	r3, [r7, #8]
 8004870:	f362 1304 	bfi	r3, r2, #4, #1
 8004874:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004876:	f107 0208 	add.w	r2, r7, #8
 800487a:	2301      	movs	r3, #1
 800487c:	2162      	movs	r1, #98	; 0x62
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff43 	bl	800470a <lis2mdl_write_reg>
 8004884:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004886:	68fb      	ldr	r3, [r7, #12]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800489a:	f107 020c 	add.w	r2, r7, #12
 800489e:	2306      	movs	r3, #6
 80048a0:	2168      	movs	r1, #104	; 0x68
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ff19 	bl	80046da <lis2mdl_read_reg>
 80048a8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80048aa:	7b7b      	ldrb	r3, [r7, #13]
 80048ac:	b21a      	sxth	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	b29a      	uxth	r2, r3
 80048be:	7b3b      	ldrb	r3, [r7, #12]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	b21a      	sxth	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3302      	adds	r3, #2
 80048d2:	b212      	sxth	r2, r2
 80048d4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	3302      	adds	r3, #2
 80048da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	3302      	adds	r3, #2
 80048f0:	b212      	sxth	r2, r2
 80048f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80048f4:	7c7a      	ldrb	r2, [r7, #17]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	3304      	adds	r3, #4
 80048fa:	b212      	sxth	r2, r2
 80048fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004906:	b29b      	uxth	r3, r3
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	b29a      	uxth	r2, r3
 800490c:	7c3b      	ldrb	r3, [r7, #16]
 800490e:	b29b      	uxth	r3, r3
 8004910:	4413      	add	r3, r2
 8004912:	b29a      	uxth	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	3304      	adds	r3, #4
 8004918:	b212      	sxth	r2, r2
 800491a:	801a      	strh	r2, [r3, #0]

  return ret;
 800491c:	697b      	ldr	r3, [r7, #20]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004930:	2301      	movs	r3, #1
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	214f      	movs	r1, #79	; 0x4f
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fecf 	bl	80046da <lis2mdl_read_reg>
 800493c:	60f8      	str	r0, [r7, #12]

  return ret;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004954:	f107 0208 	add.w	r2, r7, #8
 8004958:	2301      	movs	r3, #1
 800495a:	2162      	movs	r1, #98	; 0x62
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff febc 	bl	80046da <lis2mdl_read_reg>
 8004962:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	b2da      	uxtb	r2, r3
 8004972:	7a3b      	ldrb	r3, [r7, #8]
 8004974:	f362 0341 	bfi	r3, r2, #1, #1
 8004978:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800497a:	f107 0208 	add.w	r2, r7, #8
 800497e:	2301      	movs	r3, #1
 8004980:	2162      	movs	r1, #98	; 0x62
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fec1 	bl	800470a <lis2mdl_write_reg>
 8004988:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80049a0:	f107 0208 	add.w	r2, r7, #8
 80049a4:	2301      	movs	r3, #1
 80049a6:	2162      	movs	r1, #98	; 0x62
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fe96 	bl	80046da <lis2mdl_read_reg>
 80049ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	7a3b      	ldrb	r3, [r7, #8]
 80049c0:	f362 1345 	bfi	r3, r2, #5, #1
 80049c4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80049c6:	f107 0208 	add.w	r2, r7, #8
 80049ca:	2301      	movs	r3, #1
 80049cc:	2162      	movs	r1, #98	; 0x62
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fe9b 	bl	800470a <lis2mdl_write_reg>
 80049d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d103      	bne.n	80049fc <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e051      	b.n	8004aa0 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	7b1a      	ldrb	r2, [r3, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <LPS22HH_RegisterBusIO+0xcc>)
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <LPS22HH_RegisterBusIO+0xd0>)
 8004a3e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e020      	b.n	8004aa0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4798      	blx	r3
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e016      	b.n	8004aa0 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d112      	bne.n	8004aa0 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004a84:	2301      	movs	r3, #1
 8004a86:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2110      	movs	r1, #16
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f9e7 	bl	8004e62 <LPS22HH_Write_Reg>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	08005193 	.word	0x08005193
 8004ab0:	080051c9 	.word	0x080051c9

08004ab4 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fb16 	bl	80050f8 <LPS22HH_Initialize>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	e004      	b.n	8004ae2 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d111      	bne.n	8004b20 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f87f 	bl	8004c00 <LPS22HH_PRESS_Disable>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0c:	e00d      	b.n	8004b2a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f920 	bl	8004d54 <LPS22HH_TEMP_Disable>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	e004      	b.n	8004b2a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3320      	adds	r3, #32
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fd26 	bl	8005594 <lps22hh_device_id_get>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e000      	b.n	8004b56 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2200      	movs	r2, #0
 8004b86:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <LPS22HH_GetCapabilities+0x54>)
 8004b94:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <LPS22HH_GetCapabilities+0x54>)
 8004b9a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	43480000 	.word	0x43480000

08004bb8 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e014      	b.n	8004bf8 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f103 0220 	add.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f000 fb97 	bl	8005310 <lps22hh_data_rate_set>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	e004      	b.n	8004bf8 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e024      	b.n	8004c60 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11a      	bne.n	8004c56 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f103 0220 	add.w	r2, r3, #32
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3333      	adds	r3, #51	; 0x33
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	f000 fbbd 	bl	80053ac <lps22hh_data_rate_get>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004c38:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3c:	e010      	b.n	8004c60 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3320      	adds	r3, #32
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fb63 	bl	8005310 <lps22hh_data_rate_set>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
 8004c54:	e004      	b.n	8004c60 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004c72:	6839      	ldr	r1, [r7, #0]
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f90f 	bl	8004e98 <LPS22HH_GetOutputDataRate>
 8004c7a:	4603      	mov	r3, r0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d106      	bne.n	8004ca8 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004c9a:	ed97 0a00 	vldr	s0, [r7]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f95e 	bl	8004f60 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	e005      	b.n	8004cb4 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004ca8:	ed97 0a00 	vldr	s0, [r7]
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f9c9 	bl	8005044 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004cb2:	4603      	mov	r3, r0
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004cc6:	f107 030c 	add.w	r3, r7, #12
 8004cca:	2204      	movs	r2, #4
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f007 ff6e 	bl	800cbb0 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3320      	adds	r3, #32
 8004cd8:	f107 020c 	add.w	r2, r7, #12
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fc0c 	bl	80054fc <lps22hh_pressure_raw_get>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	e009      	b.n	8004d04 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fab4 	bl	8005260 <lps22hh_from_lsb_to_hpa>
 8004cf8:	eef0 7a40 	vmov.f32	s15, s0
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e014      	b.n	8004d4c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f103 0220 	add.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f000 faed 	bl	8005310 <lps22hh_data_rate_set>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	e004      	b.n	8004d4c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e024      	b.n	8004db4 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11a      	bne.n	8004daa <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f103 0220 	add.w	r2, r3, #32
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3333      	adds	r3, #51	; 0x33
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 fb13 	bl	80053ac <lps22hh_data_rate_get>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8004d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d90:	e010      	b.n	8004db4 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3320      	adds	r3, #32
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fab9 	bl	8005310 <lps22hh_data_rate_set>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	e004      	b.n	8004db4 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f865 	bl	8004e98 <LPS22HH_GetOutputDataRate>
 8004dce:	4603      	mov	r3, r0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d106      	bne.n	8004dfc <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004dee:	ed97 0a00 	vldr	s0, [r7]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8b4 	bl	8004f60 <LPS22HH_SetOutputDataRate_When_Enabled>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	e005      	b.n	8004e08 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004dfc:	ed97 0a00 	vldr	s0, [r7]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f91f 	bl	8005044 <LPS22HH_SetOutputDataRate_When_Disabled>
 8004e06:	4603      	mov	r3, r0
  }
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004e1a:	f107 030c 	add.w	r3, r7, #12
 8004e1e:	2202      	movs	r2, #2
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f007 fec4 	bl	800cbb0 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3320      	adds	r3, #32
 8004e2c:	f107 020c 	add.w	r2, r7, #12
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fb8b 	bl	800554e <lps22hh_temperature_raw_get>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	e00a      	b.n	8004e5a <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8004e44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fa21 	bl	8005290 <lps22hh_from_lsb_to_celsius>
 8004e4e:	eef0 7a40 	vmov.f32	s15, s0
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	70fb      	strb	r3, [r7, #3]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f103 0020 	add.w	r0, r3, #32
 8004e78:	1cba      	adds	r2, r7, #2
 8004e7a:	78f9      	ldrb	r1, [r7, #3]
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f000 f9d6 	bl	800522e <lps22hh_write_reg>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8004e88:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8c:	e000      	b.n	8004e90 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3320      	adds	r3, #32
 8004eaa:	f107 020b 	add.w	r2, r7, #11
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fa7b 	bl	80053ac <lps22hh_data_rate_get>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec0:	e03d      	b.n	8004f3e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8004ec2:	7afb      	ldrb	r3, [r7, #11]
 8004ec4:	2b07      	cmp	r3, #7
 8004ec6:	d835      	bhi.n	8004f34 <LPS22HH_GetOutputDataRate+0x9c>
 8004ec8:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <LPS22HH_GetOutputDataRate+0x38>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004ef1 	.word	0x08004ef1
 8004ed4:	08004efb 	.word	0x08004efb
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f25 	.word	0x08004f25
 8004eec:	08004f2d 	.word	0x08004f2d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
      break;
 8004ef8:	e020      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f00:	601a      	str	r2, [r3, #0]
      break;
 8004f02:	e01b      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <LPS22HH_GetOutputDataRate+0xb0>)
 8004f08:	601a      	str	r2, [r3, #0]
      break;
 8004f0a:	e017      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4a0f      	ldr	r2, [pc, #60]	; (8004f4c <LPS22HH_GetOutputDataRate+0xb4>)
 8004f10:	601a      	str	r2, [r3, #0]
      break;
 8004f12:	e013      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <LPS22HH_GetOutputDataRate+0xb8>)
 8004f18:	601a      	str	r2, [r3, #0]
      break;
 8004f1a:	e00f      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <LPS22HH_GetOutputDataRate+0xbc>)
 8004f20:	601a      	str	r2, [r3, #0]
      break;
 8004f22:	e00b      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <LPS22HH_GetOutputDataRate+0xc0>)
 8004f28:	601a      	str	r2, [r3, #0]
      break;
 8004f2a:	e007      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4a0b      	ldr	r2, [pc, #44]	; (8004f5c <LPS22HH_GetOutputDataRate+0xc4>)
 8004f30:	601a      	str	r2, [r3, #0]
      break;
 8004f32:	e003      	b.n	8004f3c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295
 8004f38:	60fb      	str	r3, [r7, #12]
      break;
 8004f3a:	bf00      	nop
  }

  return ret;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	41200000 	.word	0x41200000
 8004f4c:	41c80000 	.word	0x41c80000
 8004f50:	42480000 	.word	0x42480000
 8004f54:	42960000 	.word	0x42960000
 8004f58:	42c80000 	.word	0x42c80000
 8004f5c:	43480000 	.word	0x43480000

08004f60 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8004f6c:	edd7 7a00 	vldr	s15, [r7]
 8004f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7c:	d801      	bhi.n	8004f82 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e037      	b.n	8004ff2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004f82:	edd7 7a00 	vldr	s15, [r7]
 8004f86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f92:	d801      	bhi.n	8004f98 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e02c      	b.n	8004ff2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004f98:	edd7 7a00 	vldr	s15, [r7]
 8004f9c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa8:	d801      	bhi.n	8004fae <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8004faa:	2303      	movs	r3, #3
 8004fac:	e021      	b.n	8004ff2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004fae:	edd7 7a00 	vldr	s15, [r7]
 8004fb2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005038 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8004fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fbe:	d801      	bhi.n	8004fc4 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	e016      	b.n	8004ff2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004fc4:	edd7 7a00 	vldr	s15, [r7]
 8004fc8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800503c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8004fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd4:	d801      	bhi.n	8004fda <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8004fd6:	2305      	movs	r3, #5
 8004fd8:	e00b      	b.n	8004ff2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004fda:	edd7 7a00 	vldr	s15, [r7]
 8004fde:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005040 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8004fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fea:	d801      	bhi.n	8004ff0 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8004fec:	2306      	movs	r3, #6
 8004fee:	e000      	b.n	8004ff2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8004ff0:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8004ff2:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3320      	adds	r3, #32
 8004ff8:	7bfa      	ldrb	r2, [r7, #15]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f987 	bl	8005310 <lps22hh_data_rate_set>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8005008:	f04f 33ff 	mov.w	r3, #4294967295
 800500c:	e00f      	b.n	800502e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f103 0220 	add.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3333      	adds	r3, #51	; 0x33
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 f9c6 	bl	80053ac <lps22hh_data_rate_get>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	e000      	b.n	800502e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	42480000 	.word	0x42480000
 800503c:	42960000 	.word	0x42960000
 8005040:	42c80000 	.word	0x42c80000

08005044 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005050:	edd7 7a00 	vldr	s15, [r7]
 8005054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	d801      	bhi.n	8005066 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8005062:	2301      	movs	r3, #1
 8005064:	e037      	b.n	80050d6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005066:	edd7 7a00 	vldr	s15, [r7]
 800506a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800506e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005076:	d801      	bhi.n	800507c <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8005078:	2302      	movs	r3, #2
 800507a:	e02c      	b.n	80050d6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800507c:	edd7 7a00 	vldr	s15, [r7]
 8005080:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	d801      	bhi.n	8005092 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 800508e:	2303      	movs	r3, #3
 8005090:	e021      	b.n	80050d6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005092:	edd7 7a00 	vldr	s15, [r7]
 8005096:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80050ec <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800509a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	d801      	bhi.n	80050a8 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 80050a4:	2304      	movs	r3, #4
 80050a6:	e016      	b.n	80050d6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80050a8:	edd7 7a00 	vldr	s15, [r7]
 80050ac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80050f0 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 80050b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d801      	bhi.n	80050be <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80050ba:	2305      	movs	r3, #5
 80050bc:	e00b      	b.n	80050d6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80050be:	edd7 7a00 	vldr	s15, [r7]
 80050c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80050f4 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 80050c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ce:	d801      	bhi.n	80050d4 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 80050d0:	2306      	movs	r3, #6
 80050d2:	e000      	b.n	80050d6 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80050d4:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	42480000 	.word	0x42480000
 80050f0:	42960000 	.word	0x42960000
 80050f4:	42c80000 	.word	0x42c80000

080050f8 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d00b      	beq.n	8005120 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3320      	adds	r3, #32
 800510c:	2111      	movs	r1, #17
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fa9d 	bl	800564e <lps22hh_i3c_interface_set>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	e034      	b.n	800518a <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3320      	adds	r3, #32
 8005124:	2110      	movs	r1, #16
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f8f2 	bl	8005310 <lps22hh_data_rate_set>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 8005132:	f04f 33ff 	mov.w	r3, #4294967295
 8005136:	e028      	b.n	800518a <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3320      	adds	r3, #32
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fa5f 	bl	8005602 <lps22hh_lp_bandwidth_set>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	e01c      	b.n	800518a <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3320      	adds	r3, #32
 8005154:	2101      	movs	r1, #1
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f8b4 	bl	80052c4 <lps22hh_block_data_update_set>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	e010      	b.n	800518a <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3320      	adds	r3, #32
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fa21 	bl	80055b6 <lps22hh_auto_increment_set>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	e004      	b.n	800518a <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2203      	movs	r2, #3
 8005184:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005192:	b590      	push	{r4, r7, lr}
 8005194:	b087      	sub	sp, #28
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	461a      	mov	r2, r3
 800519e:	460b      	mov	r3, r1
 80051a0:	72fb      	strb	r3, [r7, #11]
 80051a2:	4613      	mov	r3, r2
 80051a4:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	695c      	ldr	r4, [r3, #20]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	7b1b      	ldrb	r3, [r3, #12]
 80051b2:	b298      	uxth	r0, r3
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	b299      	uxth	r1, r3
 80051b8:	893b      	ldrh	r3, [r7, #8]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	47a0      	blx	r4
 80051be:	4603      	mov	r3, r0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd90      	pop	{r4, r7, pc}

080051c8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	460b      	mov	r3, r1
 80051d6:	72fb      	strb	r3, [r7, #11]
 80051d8:	4613      	mov	r3, r2
 80051da:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	691c      	ldr	r4, [r3, #16]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	7b1b      	ldrb	r3, [r3, #12]
 80051e8:	b298      	uxth	r0, r3
 80051ea:	7afb      	ldrb	r3, [r7, #11]
 80051ec:	b299      	uxth	r1, r3
 80051ee:	893b      	ldrh	r3, [r7, #8]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	47a0      	blx	r4
 80051f4:	4603      	mov	r3, r0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd90      	pop	{r4, r7, pc}

080051fe <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80051fe:	b590      	push	{r4, r7, lr}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	461a      	mov	r2, r3
 800520a:	460b      	mov	r3, r1
 800520c:	72fb      	strb	r3, [r7, #11]
 800520e:	4613      	mov	r3, r2
 8005210:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685c      	ldr	r4, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68d8      	ldr	r0, [r3, #12]
 800521a:	893b      	ldrh	r3, [r7, #8]
 800521c:	7af9      	ldrb	r1, [r7, #11]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	47a0      	blx	r4
 8005222:	6178      	str	r0, [r7, #20]

  return ret;
 8005224:	697b      	ldr	r3, [r7, #20]
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}

0800522e <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800522e:	b590      	push	{r4, r7, lr}
 8005230:	b087      	sub	sp, #28
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	461a      	mov	r2, r3
 800523a:	460b      	mov	r3, r1
 800523c:	72fb      	strb	r3, [r7, #11]
 800523e:	4613      	mov	r3, r2
 8005240:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681c      	ldr	r4, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	68d8      	ldr	r0, [r3, #12]
 800524a:	893b      	ldrh	r3, [r7, #8]
 800524c:	7af9      	ldrb	r1, [r7, #11]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	47a0      	blx	r4
 8005252:	6178      	str	r0, [r7, #20]

  return ret;
 8005254:	697b      	ldr	r3, [r7, #20]
}
 8005256:	4618      	mov	r0, r3
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd90      	pop	{r4, r7, pc}
	...

08005260 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800528c <lps22hh_from_lsb_to_hpa+0x2c>
 8005276:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800527a:	eef0 7a66 	vmov.f32	s15, s13
}
 800527e:	eeb0 0a67 	vmov.f32	s0, s15
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	49800000 	.word	0x49800000

08005290 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800529a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80052c0 <lps22hh_from_lsb_to_celsius+0x30>
 80052aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80052b2:	eeb0 0a67 	vmov.f32	s0, s15
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	42c80000 	.word	0x42c80000

080052c4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80052d0:	f107 0208 	add.w	r2, r7, #8
 80052d4:	2301      	movs	r3, #1
 80052d6:	2110      	movs	r1, #16
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff ff90 	bl	80051fe <lps22hh_read_reg>
 80052de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10f      	bne.n	8005306 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	7a3b      	ldrb	r3, [r7, #8]
 80052f0:	f362 0341 	bfi	r3, r2, #1, #1
 80052f4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80052f6:	f107 0208 	add.w	r2, r7, #8
 80052fa:	2301      	movs	r3, #1
 80052fc:	2110      	movs	r1, #16
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff95 	bl	800522e <lps22hh_write_reg>
 8005304:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800531c:	f107 0210 	add.w	r2, r7, #16
 8005320:	2301      	movs	r3, #1
 8005322:	2110      	movs	r1, #16
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ff6a 	bl	80051fe <lps22hh_read_reg>
 800532a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005332:	f107 020c 	add.w	r2, r7, #12
 8005336:	2301      	movs	r3, #1
 8005338:	2111      	movs	r1, #17
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ff5f 	bl	80051fe <lps22hh_read_reg>
 8005340:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10f      	bne.n	8005368 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	b2da      	uxtb	r2, r3
 8005350:	7c3b      	ldrb	r3, [r7, #16]
 8005352:	f362 1306 	bfi	r3, r2, #4, #3
 8005356:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005358:	f107 0210 	add.w	r2, r7, #16
 800535c:	2301      	movs	r3, #1
 800535e:	2110      	movs	r1, #16
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff64 	bl	800522e <lps22hh_write_reg>
 8005366:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d119      	bne.n	80053a2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	b2da      	uxtb	r2, r3
 8005378:	7b3b      	ldrb	r3, [r7, #12]
 800537a:	f362 0341 	bfi	r3, r2, #1, #1
 800537e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	08db      	lsrs	r3, r3, #3
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	7b3b      	ldrb	r3, [r7, #12]
 800538c:	f362 0300 	bfi	r3, r2, #0, #1
 8005390:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005392:	f107 020c 	add.w	r2, r7, #12
 8005396:	2301      	movs	r3, #1
 8005398:	2111      	movs	r1, #17
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ff47 	bl	800522e <lps22hh_write_reg>
 80053a0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80053a2:	697b      	ldr	r3, [r7, #20]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80053b6:	f107 0210 	add.w	r2, r7, #16
 80053ba:	2301      	movs	r3, #1
 80053bc:	2110      	movs	r1, #16
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff1d 	bl	80051fe <lps22hh_read_reg>
 80053c4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d107      	bne.n	80053dc <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80053cc:	f107 020c 	add.w	r2, r7, #12
 80053d0:	2301      	movs	r3, #1
 80053d2:	2111      	movs	r1, #17
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ff12 	bl	80051fe <lps22hh_read_reg>
 80053da:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 8086 	bne.w	80054f0 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80053e4:	f107 020c 	add.w	r2, r7, #12
 80053e8:	2301      	movs	r3, #1
 80053ea:	2111      	movs	r1, #17
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff06 	bl	80051fe <lps22hh_read_reg>
 80053f2:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80053f4:	7b3b      	ldrb	r3, [r7, #12]
 80053f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	011a      	lsls	r2, r3, #4
 80053fe:	7b3b      	ldrb	r3, [r7, #12]
 8005400:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
             ctrl_reg1.odr))
 800540a:	7c3a      	ldrb	r2, [r7, #16]
 800540c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005410:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005412:	4413      	add	r3, r2
 8005414:	2b15      	cmp	r3, #21
 8005416:	d867      	bhi.n	80054e8 <lps22hh_data_rate_get+0x13c>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <lps22hh_data_rate_get+0x74>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005479 	.word	0x08005479
 8005424:	08005489 	.word	0x08005489
 8005428:	08005491 	.word	0x08005491
 800542c:	08005499 	.word	0x08005499
 8005430:	080054a1 	.word	0x080054a1
 8005434:	080054a9 	.word	0x080054a9
 8005438:	080054d9 	.word	0x080054d9
 800543c:	080054e1 	.word	0x080054e1
 8005440:	08005481 	.word	0x08005481
 8005444:	080054e9 	.word	0x080054e9
 8005448:	080054e9 	.word	0x080054e9
 800544c:	080054e9 	.word	0x080054e9
 8005450:	080054e9 	.word	0x080054e9
 8005454:	080054e9 	.word	0x080054e9
 8005458:	080054e9 	.word	0x080054e9
 800545c:	080054e9 	.word	0x080054e9
 8005460:	080054e9 	.word	0x080054e9
 8005464:	080054b1 	.word	0x080054b1
 8005468:	080054b9 	.word	0x080054b9
 800546c:	080054c1 	.word	0x080054c1
 8005470:	080054c9 	.word	0x080054c9
 8005474:	080054d1 	.word	0x080054d1
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
        break;
 800547e:	e038      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2208      	movs	r2, #8
 8005484:	701a      	strb	r2, [r3, #0]
        break;
 8005486:	e034      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
        break;
 800548e:	e030      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2202      	movs	r2, #2
 8005494:	701a      	strb	r2, [r3, #0]
        break;
 8005496:	e02c      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2203      	movs	r2, #3
 800549c:	701a      	strb	r2, [r3, #0]
        break;
 800549e:	e028      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2204      	movs	r2, #4
 80054a4:	701a      	strb	r2, [r3, #0]
        break;
 80054a6:	e024      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2205      	movs	r2, #5
 80054ac:	701a      	strb	r2, [r3, #0]
        break;
 80054ae:	e020      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2211      	movs	r2, #17
 80054b4:	701a      	strb	r2, [r3, #0]
        break;
 80054b6:	e01c      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2212      	movs	r2, #18
 80054bc:	701a      	strb	r2, [r3, #0]
        break;
 80054be:	e018      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2213      	movs	r2, #19
 80054c4:	701a      	strb	r2, [r3, #0]
        break;
 80054c6:	e014      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2214      	movs	r2, #20
 80054cc:	701a      	strb	r2, [r3, #0]
        break;
 80054ce:	e010      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2215      	movs	r2, #21
 80054d4:	701a      	strb	r2, [r3, #0]
        break;
 80054d6:	e00c      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2206      	movs	r2, #6
 80054dc:	701a      	strb	r2, [r3, #0]
        break;
 80054de:	e008      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2207      	movs	r2, #7
 80054e4:	701a      	strb	r2, [r3, #0]
        break;
 80054e6:	e004      	b.n	80054f2 <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
        break;
 80054ee:	e000      	b.n	80054f2 <lps22hh_data_rate_get+0x146>
    }
  }
 80054f0:	bf00      	nop

  return ret;
 80054f2:	697b      	ldr	r3, [r7, #20]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005506:	f107 0208 	add.w	r2, r7, #8
 800550a:	2303      	movs	r3, #3
 800550c:	2128      	movs	r1, #40	; 0x28
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe75 	bl	80051fe <lps22hh_read_reg>
 8005514:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005516:	7abb      	ldrb	r3, [r7, #10]
 8005518:	461a      	mov	r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	7a7a      	ldrb	r2, [r7, #9]
 8005526:	441a      	add	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	7a3a      	ldrb	r2, [r7, #8]
 8005534:	441a      	add	r2, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	021a      	lsls	r2, r3, #8
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	601a      	str	r2, [r3, #0]

  return ret;
 8005544:	68fb      	ldr	r3, [r7, #12]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005558:	f107 0208 	add.w	r2, r7, #8
 800555c:	2302      	movs	r3, #2
 800555e:	212b      	movs	r1, #43	; 0x2b
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fe4c 	bl	80051fe <lps22hh_read_reg>
 8005566:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005568:	7a7b      	ldrb	r3, [r7, #9]
 800556a:	b21a      	sxth	r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005576:	b29b      	uxth	r3, r3
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	b29a      	uxth	r2, r3
 800557c:	7a3b      	ldrb	r3, [r7, #8]
 800557e:	b29b      	uxth	r3, r3
 8005580:	4413      	add	r3, r2
 8005582:	b29b      	uxth	r3, r3
 8005584:	b21a      	sxth	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	801a      	strh	r2, [r3, #0]

  return ret;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800559e:	2301      	movs	r3, #1
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	210f      	movs	r1, #15
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fe2a 	bl	80051fe <lps22hh_read_reg>
 80055aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80055c2:	f107 0208 	add.w	r2, r7, #8
 80055c6:	2301      	movs	r3, #1
 80055c8:	2111      	movs	r1, #17
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fe17 	bl	80051fe <lps22hh_read_reg>
 80055d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10f      	bne.n	80055f8 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	7a3b      	ldrb	r3, [r7, #8]
 80055e2:	f362 1304 	bfi	r3, r2, #4, #1
 80055e6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80055e8:	f107 0208 	add.w	r2, r7, #8
 80055ec:	2301      	movs	r3, #1
 80055ee:	2111      	movs	r1, #17
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fe1c 	bl	800522e <lps22hh_write_reg>
 80055f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800560e:	f107 0208 	add.w	r2, r7, #8
 8005612:	2301      	movs	r3, #1
 8005614:	2110      	movs	r1, #16
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fdf1 	bl	80051fe <lps22hh_read_reg>
 800561c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10f      	bne.n	8005644 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	b2da      	uxtb	r2, r3
 800562c:	7a3b      	ldrb	r3, [r7, #8]
 800562e:	f362 0383 	bfi	r3, r2, #2, #2
 8005632:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005634:	f107 0208 	add.w	r2, r7, #8
 8005638:	2301      	movs	r3, #1
 800563a:	2110      	movs	r1, #16
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff fdf6 	bl	800522e <lps22hh_write_reg>
 8005642:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005644:	68fb      	ldr	r3, [r7, #12]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800565a:	f107 0208 	add.w	r2, r7, #8
 800565e:	2301      	movs	r3, #1
 8005660:	210e      	movs	r1, #14
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fdcb 	bl	80051fe <lps22hh_read_reg>
 8005668:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d118      	bne.n	80056a2 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	7a3b      	ldrb	r3, [r7, #8]
 800567a:	f362 0341 	bfi	r3, r2, #1, #1
 800567e:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	b2da      	uxtb	r2, r3
 800568a:	7a3b      	ldrb	r3, [r7, #8]
 800568c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005690:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005692:	f107 0208 	add.w	r2, r7, #8
 8005696:	2301      	movs	r3, #1
 8005698:	210e      	movs	r1, #14
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fdc7 	bl	800522e <lps22hh_write_reg>
 80056a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e051      	b.n	800576c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	7b1a      	ldrb	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699a      	ldr	r2, [r3, #24]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <LSM6DSO_RegisterBusIO+0xcc>)
 8005704:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1c      	ldr	r2, [pc, #112]	; (800577c <LSM6DSO_RegisterBusIO+0xd0>)
 800570a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e020      	b.n	800576c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4798      	blx	r3
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005736:	f04f 33ff 	mov.w	r3, #4294967295
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e016      	b.n	800576c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d112      	bne.n	800576c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10d      	bne.n	800576c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005750:	230c      	movs	r3, #12
 8005752:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	461a      	mov	r2, r3
 8005758:	2112      	movs	r1, #18
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 ff5d 	bl	800661a <LSM6DSO_Write_Reg>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800576c:	68fb      	ldr	r3, [r7, #12]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	08006abd 	.word	0x08006abd
 800577c:	08006af3 	.word	0x08006af3

08005780 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d00b      	beq.n	80057a8 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3320      	adds	r3, #32
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	4618      	mov	r0, r3
 8005798:	f001 fe8a 	bl	80074b0 <lsm6dso_i3c_disable_set>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	e060      	b.n	800586a <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3320      	adds	r3, #32
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fe58 	bl	8007464 <lsm6dso_auto_increment_set>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295
 80057be:	e054      	b.n	800586a <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3320      	adds	r3, #32
 80057c4:	2101      	movs	r1, #1
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 fd62 	bl	8007290 <lsm6dso_block_data_update_set>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	e048      	b.n	800586a <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3320      	adds	r3, #32
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 feae 	bl	8007540 <lsm6dso_fifo_mode_set>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	e03c      	b.n	800586a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3320      	adds	r3, #32
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fa20 	bl	8006c44 <lsm6dso_xl_data_rate_set>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	e02c      	b.n	800586a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3320      	adds	r3, #32
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f9b6 	bl	8006b88 <lsm6dso_xl_full_scale_set>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8005822:	f04f 33ff 	mov.w	r3, #4294967295
 8005826:	e020      	b.n	800586a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2204      	movs	r2, #4
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3320      	adds	r3, #32
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fbce 	bl	8006fd8 <lsm6dso_gy_data_rate_set>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	e010      	b.n	800586a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3320      	adds	r3, #32
 800584c:	2106      	movs	r1, #6
 800584e:	4618      	mov	r0, r3
 8005850:	f001 fb5a 	bl	8006f08 <lsm6dso_gy_full_scale_set>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 800585a:	f04f 33ff 	mov.w	r3, #4294967295
 800585e:	e004      	b.n	800586a <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f888 	bl	8005990 <LSM6DSO_ACC_Disable>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	e015      	b.n	80058b8 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fc2e 	bl	80060ee <LSM6DSO_GYRO_Disable>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005898:	f04f 33ff 	mov.w	r3, #4294967295
 800589c:	e00c      	b.n	80058b8 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3320      	adds	r3, #32
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fdb6 	bl	8007442 <lsm6dso_device_id_get>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295
 80058e0:	e000      	b.n	80058e4 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2201      	movs	r2, #1
 80058fa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2201      	movs	r2, #1
 8005900:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2200      	movs	r2, #0
 8005906:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005914:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2210      	movs	r2, #16
 800591a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	4a07      	ldr	r2, [pc, #28]	; (8005944 <LSM6DSO_GetCapabilities+0x58>)
 8005926:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	4a06      	ldr	r2, [pc, #24]	; (8005944 <LSM6DSO_GetCapabilities+0x58>)
 800592c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	45d02000 	.word	0x45d02000

08005948 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	e014      	b.n	8005988 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f103 0220 	add.w	r2, r3, #32
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f001 f969 	bl	8006c44 <lsm6dso_xl_data_rate_set>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	e004      	b.n	8005988 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e01f      	b.n	80059e6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f103 0220 	add.w	r2, r3, #32
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3333      	adds	r3, #51	; 0x33
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f001 fa40 	bl	8006e38 <lsm6dso_xl_data_rate_get>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	e010      	b.n	80059e6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3320      	adds	r3, #32
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f93a 	bl	8006c44 <lsm6dso_xl_data_rate_set>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	e004      	b.n	80059e6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3320      	adds	r3, #32
 8005a02:	f107 020b 	add.w	r2, r7, #11
 8005a06:	4611      	mov	r1, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f8e3 	bl	8006bd4 <lsm6dso_xl_full_scale_get>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005a14:	f04f 33ff 	mov.w	r3, #4294967295
 8005a18:	e023      	b.n	8005a62 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d81b      	bhi.n	8005a58 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a39 	.word	0x08005a39
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005a49 	.word	0x08005a49
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	4a0c      	ldr	r2, [pc, #48]	; (8005a6c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005a3c:	601a      	str	r2, [r3, #0]
      break;
 8005a3e:	e00f      	b.n	8005a60 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4a0b      	ldr	r2, [pc, #44]	; (8005a70 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005a44:	601a      	str	r2, [r3, #0]
      break;
 8005a46:	e00b      	b.n	8005a60 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005a4c:	601a      	str	r2, [r3, #0]
      break;
 8005a4e:	e007      	b.n	8005a60 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005a54:	601a      	str	r2, [r3, #0]
      break;
 8005a56:	e003      	b.n	8005a60 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5c:	60fb      	str	r3, [r7, #12]
      break;
 8005a5e:	bf00      	nop
  }

  return ret;
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	3d79db23 	.word	0x3d79db23
 8005a70:	3df9db23 	.word	0x3df9db23
 8005a74:	3e79db23 	.word	0x3e79db23
 8005a78:	3ef9db23 	.word	0x3ef9db23

08005a7c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3320      	adds	r3, #32
 8005a8e:	f107 020b 	add.w	r2, r7, #11
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 f9cf 	bl	8006e38 <lsm6dso_xl_data_rate_get>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	e054      	b.n	8005b50 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8005aa6:	7afb      	ldrb	r3, [r7, #11]
 8005aa8:	2b0b      	cmp	r3, #11
 8005aaa:	d84c      	bhi.n	8005b46 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ae5 	.word	0x08005ae5
 8005ab8:	08005af7 	.word	0x08005af7
 8005abc:	08005aff 	.word	0x08005aff
 8005ac0:	08005b07 	.word	0x08005b07
 8005ac4:	08005b0f 	.word	0x08005b0f
 8005ac8:	08005b17 	.word	0x08005b17
 8005acc:	08005b1f 	.word	0x08005b1f
 8005ad0:	08005b27 	.word	0x08005b27
 8005ad4:	08005b2f 	.word	0x08005b2f
 8005ad8:	08005b37 	.word	0x08005b37
 8005adc:	08005b3f 	.word	0x08005b3f
 8005ae0:	08005aef 	.word	0x08005aef
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
      break;
 8005aec:	e02f      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8005af2:	601a      	str	r2, [r3, #0]
      break;
 8005af4:	e02b      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8005afa:	601a      	str	r2, [r3, #0]
      break;
 8005afc:	e027      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8005b02:	601a      	str	r2, [r3, #0]
      break;
 8005b04:	e023      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8005b0a:	601a      	str	r2, [r3, #0]
      break;
 8005b0c:	e01f      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8005b12:	601a      	str	r2, [r3, #0]
      break;
 8005b14:	e01b      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8005b1a:	601a      	str	r2, [r3, #0]
      break;
 8005b1c:	e017      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8005b22:	601a      	str	r2, [r3, #0]
      break;
 8005b24:	e013      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8005b2a:	601a      	str	r2, [r3, #0]
      break;
 8005b2c:	e00f      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8005b32:	601a      	str	r2, [r3, #0]
      break;
 8005b34:	e00b      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8005b3a:	601a      	str	r2, [r3, #0]
      break;
 8005b3c:	e007      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	4a0f      	ldr	r2, [pc, #60]	; (8005b80 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8005b42:	601a      	str	r2, [r3, #0]
      break;
 8005b44:	e003      	b.n	8005b4e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4a:	60fb      	str	r3, [r7, #12]
      break;
 8005b4c:	bf00      	nop
  }

  return ret;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	3fcccccd 	.word	0x3fcccccd
 8005b5c:	41480000 	.word	0x41480000
 8005b60:	41d00000 	.word	0x41d00000
 8005b64:	42500000 	.word	0x42500000
 8005b68:	42d00000 	.word	0x42d00000
 8005b6c:	43500000 	.word	0x43500000
 8005b70:	43d08000 	.word	0x43d08000
 8005b74:	44504000 	.word	0x44504000
 8005b78:	44d06000 	.word	0x44d06000
 8005b7c:	45505000 	.word	0x45505000
 8005b80:	45d05800 	.word	0x45d05800

08005b84 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8005b90:	2100      	movs	r1, #0
 8005b92:	ed97 0a00 	vldr	s0, [r7]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f806 	bl	8005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8005b9c:	4603      	mov	r3, r0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08c      	sub	sp, #48	; 0x30
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	f000 80ea 	beq.w	8005d9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	f300 8163 	bgt.w	8005e94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d074      	beq.n	8005cc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8005bd6:	e15d      	b.n	8005e94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f103 0020 	add.w	r0, r3, #32
 8005bde:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005be2:	2301      	movs	r3, #1
 8005be4:	2114      	movs	r1, #20
 8005be6:	f000 ff9f 	bl	8006b28 <lsm6dso_read_reg>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	e16c      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d025      	beq.n	8005c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10b      	bne.n	8005c26 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3320      	adds	r3, #32
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f815 	bl	8006c44 <lsm6dso_xl_data_rate_set>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005c20:	f04f 33ff 	mov.w	r3, #4294967295
 8005c24:	e154      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005c26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c2a:	f36f 13c7 	bfc	r3, #7, #1
 8005c2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f103 0020 	add.w	r0, r3, #32
 8005c38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	2114      	movs	r1, #20
 8005c40:	f000 ff8a 	bl	8006b58 <lsm6dso_write_reg>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4e:	e13f      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f103 0020 	add.w	r0, r3, #32
 8005c56:	f107 0220 	add.w	r2, r7, #32
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	2115      	movs	r1, #21
 8005c5e:	f000 ff63 	bl	8006b28 <lsm6dso_read_reg>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6c:	e130      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d014      	beq.n	8005ca6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8005c7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c80:	f36f 1304 	bfc	r3, #4, #1
 8005c84:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f103 0020 	add.w	r0, r3, #32
 8005c8e:	f107 0220 	add.w	r2, r7, #32
 8005c92:	2301      	movs	r3, #1
 8005c94:	2115      	movs	r1, #21
 8005c96:	f000 ff5f 	bl	8006b58 <lsm6dso_write_reg>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca4:	e114      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8005ca6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005caa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb6:	d400      	bmi.n	8005cba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8005cb8:	e0f0      	b.n	8005e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8005cba:	4b87      	ldr	r3, [pc, #540]	; (8005ed8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cbe:	e0ed      	b.n	8005e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f103 0020 	add.w	r0, r3, #32
 8005cc6:	f107 021c 	add.w	r2, r7, #28
 8005cca:	2301      	movs	r3, #1
 8005ccc:	2114      	movs	r1, #20
 8005cce:	f000 ff2b 	bl	8006b28 <lsm6dso_read_reg>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cdc:	e0f8      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8005cde:	7f3b      	ldrb	r3, [r7, #28]
 8005ce0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d023      	beq.n	8005d32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10b      	bne.n	8005d0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3320      	adds	r3, #32
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 ffa2 	bl	8006c44 <lsm6dso_xl_data_rate_set>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	e0e1      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005d0c:	7f3b      	ldrb	r3, [r7, #28]
 8005d0e:	f36f 13c7 	bfc	r3, #7, #1
 8005d12:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f103 0020 	add.w	r0, r3, #32
 8005d1a:	f107 021c 	add.w	r2, r7, #28
 8005d1e:	2301      	movs	r3, #1
 8005d20:	2114      	movs	r1, #20
 8005d22:	f000 ff19 	bl	8006b58 <lsm6dso_write_reg>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d30:	e0ce      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f103 0020 	add.w	r0, r3, #32
 8005d38:	f107 0218 	add.w	r2, r7, #24
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	2115      	movs	r1, #21
 8005d40:	f000 fef2 	bl	8006b28 <lsm6dso_read_reg>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	e0bf      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8005d50:	7e3b      	ldrb	r3, [r7, #24]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d112      	bne.n	8005d82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8005d5c:	7e3b      	ldrb	r3, [r7, #24]
 8005d5e:	f043 0310 	orr.w	r3, r3, #16
 8005d62:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f103 0020 	add.w	r0, r3, #32
 8005d6a:	f107 0218 	add.w	r2, r7, #24
 8005d6e:	2301      	movs	r3, #1
 8005d70:	2115      	movs	r1, #21
 8005d72:	f000 fef1 	bl	8006b58 <lsm6dso_write_reg>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	e0a6      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005d82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d86:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005edc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d92:	dc00      	bgt.n	8005d96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8005d94:	e082      	b.n	8005e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005d96:	4b52      	ldr	r3, [pc, #328]	; (8005ee0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9a:	e07f      	b.n	8005e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f103 0020 	add.w	r0, r3, #32
 8005da2:	f107 0210 	add.w	r2, r7, #16
 8005da6:	2301      	movs	r3, #1
 8005da8:	2115      	movs	r1, #21
 8005daa:	f000 febd 	bl	8006b28 <lsm6dso_read_reg>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8005db4:	f04f 33ff 	mov.w	r3, #4294967295
 8005db8:	e08a      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005dba:	7c3b      	ldrb	r3, [r7, #16]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d012      	beq.n	8005dec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8005dc6:	7c3b      	ldrb	r3, [r7, #16]
 8005dc8:	f36f 1304 	bfc	r3, #4, #1
 8005dcc:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f103 0020 	add.w	r0, r3, #32
 8005dd4:	f107 0210 	add.w	r2, r7, #16
 8005dd8:	2301      	movs	r3, #1
 8005dda:	2115      	movs	r1, #21
 8005ddc:	f000 febc 	bl	8006b58 <lsm6dso_write_reg>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dea:	e071      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d108      	bne.n	8005e08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f979 	bl	80060ee <LSM6DSO_GYRO_Disable>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8005e02:	f04f 33ff 	mov.w	r3, #4294967295
 8005e06:	e063      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f103 0020 	add.w	r0, r3, #32
 8005e0e:	f107 0214 	add.w	r2, r7, #20
 8005e12:	2301      	movs	r3, #1
 8005e14:	2114      	movs	r1, #20
 8005e16:	f000 fe87 	bl	8006b28 <lsm6dso_read_reg>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	e054      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8005e26:	7d3b      	ldrb	r3, [r7, #20]
 8005e28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d123      	bne.n	8005e7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10b      	bne.n	8005e54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3320      	adds	r3, #32
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fefe 	bl	8006c44 <lsm6dso_xl_data_rate_set>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	e03d      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8005e54:	7d3b      	ldrb	r3, [r7, #20]
 8005e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f103 0020 	add.w	r0, r3, #32
 8005e62:	f107 0214 	add.w	r2, r7, #20
 8005e66:	2301      	movs	r3, #1
 8005e68:	2114      	movs	r1, #20
 8005e6a:	f000 fe75 	bl	8006b58 <lsm6dso_write_reg>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8005e74:	f04f 33ff 	mov.w	r3, #4294967295
 8005e78:	e02a      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005e7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e7e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005edc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8a:	dc00      	bgt.n	8005e8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8005e8c:	e006      	b.n	8005e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8005e8e:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e92:	e003      	b.n	8005e9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005e9a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d102      	bne.n	8005eaa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8005ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea8:	e012      	b.n	8005ed0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d106      	bne.n	8005ec2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005eb4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fbc9 	bl	8006650 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8005ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005ec0:	e005      	b.n	8005ece <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005ec2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fc5a 	bl	8006780 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8005ecc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3730      	adds	r7, #48	; 0x30
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	41480000 	.word	0x41480000
 8005edc:	43500000 	.word	0x43500000
 8005ee0:	43500000 	.word	0x43500000

08005ee4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3320      	adds	r3, #32
 8005ef6:	f107 020b 	add.w	r2, r7, #11
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fe69 	bl	8006bd4 <lsm6dso_xl_full_scale_get>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0c:	e023      	b.n	8005f56 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d81b      	bhi.n	8005f4c <LSM6DSO_ACC_GetFullScale+0x68>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <LSM6DSO_ACC_GetFullScale+0x38>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f3d 	.word	0x08005f3d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	601a      	str	r2, [r3, #0]
      break;
 8005f32:	e00f      	b.n	8005f54 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2204      	movs	r2, #4
 8005f38:	601a      	str	r2, [r3, #0]
      break;
 8005f3a:	e00b      	b.n	8005f54 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2208      	movs	r2, #8
 8005f40:	601a      	str	r2, [r3, #0]
      break;
 8005f42:	e007      	b.n	8005f54 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2210      	movs	r2, #16
 8005f48:	601a      	str	r2, [r3, #0]
      break;
 8005f4a:	e003      	b.n	8005f54 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	60fb      	str	r3, [r7, #12]
      break;
 8005f52:	bf00      	nop
  }

  return ret;
 8005f54:	68fb      	ldr	r3, [r7, #12]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop

08005f60 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	dd0b      	ble.n	8005f88 <LSM6DSO_ACC_SetFullScale+0x28>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	dd06      	ble.n	8005f84 <LSM6DSO_ACC_SetFullScale+0x24>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	dc01      	bgt.n	8005f80 <LSM6DSO_ACC_SetFullScale+0x20>
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e004      	b.n	8005f8a <LSM6DSO_ACC_SetFullScale+0x2a>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e002      	b.n	8005f8a <LSM6DSO_ACC_SetFullScale+0x2a>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e000      	b.n	8005f8a <LSM6DSO_ACC_SetFullScale+0x2a>
 8005f88:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8005f8a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3320      	adds	r3, #32
 8005f90:	7bfa      	ldrb	r2, [r7, #15]
 8005f92:	4611      	mov	r1, r2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fdf7 	bl	8006b88 <lsm6dso_xl_full_scale_set>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8005fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa4:	e000      	b.n	8005fa8 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3320      	adds	r3, #32
 8005fbe:	f107 0208 	add.w	r2, r7, #8
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 f9d4 	bl	8007372 <lsm6dso_acceleration_raw_get>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	e00c      	b.n	8005ff0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005fd6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005fde:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005fe6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3320      	adds	r3, #32
 800600c:	f107 0210 	add.w	r2, r7, #16
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f001 f9ad 	bl	8007372 <lsm6dso_acceleration_raw_get>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	e03c      	b.n	800609e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006024:	f107 030c 	add.w	r3, r7, #12
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff fce0 	bl	80059f0 <LSM6DSO_ACC_GetSensitivity>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	e030      	b.n	800609e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800603c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006048:	edd7 7a03 	vldr	s15, [r7, #12]
 800604c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006054:	ee17 2a90 	vmov	r2, s15
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800605c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006068:	edd7 7a03 	vldr	s15, [r7, #12]
 800606c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006074:	ee17 2a90 	vmov	r2, s15
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800607c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006088:	edd7 7a03 	vldr	s15, [r7, #12]
 800608c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006094:	ee17 2a90 	vmov	r2, s15
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	e014      	b.n	80060e6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f103 0220 	add.w	r2, r3, #32
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 ff84 	bl	8006fd8 <lsm6dso_gy_data_rate_set>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	e004      	b.n	80060e6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	e01f      	b.n	8006144 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f103 0220 	add.w	r2, r3, #32
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3334      	adds	r3, #52	; 0x34
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f001 f85b 	bl	80071cc <lsm6dso_gy_data_rate_get>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	e010      	b.n	8006144 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3320      	adds	r3, #32
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f000 ff55 	bl	8006fd8 <lsm6dso_gy_data_rate_set>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006134:	f04f 33ff 	mov.w	r3, #4294967295
 8006138:	e004      	b.n	8006144 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3320      	adds	r3, #32
 800615e:	f107 020b 	add.w	r2, r7, #11
 8006162:	4611      	mov	r1, r2
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fef5 	bl	8006f54 <lsm6dso_gy_full_scale_get>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006170:	f04f 33ff 	mov.w	r3, #4294967295
 8006174:	e02d      	b.n	80061d2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006176:	7afb      	ldrb	r3, [r7, #11]
 8006178:	2b06      	cmp	r3, #6
 800617a:	d825      	bhi.n	80061c8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061a1 	.word	0x080061a1
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061c9 	.word	0x080061c9
 8006194:	080061b9 	.word	0x080061b9
 8006198:	080061c9 	.word	0x080061c9
 800619c:	080061c1 	.word	0x080061c1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	4a0e      	ldr	r2, [pc, #56]	; (80061dc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80061a4:	601a      	str	r2, [r3, #0]
      break;
 80061a6:	e013      	b.n	80061d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80061ac:	601a      	str	r2, [r3, #0]
      break;
 80061ae:	e00f      	b.n	80061d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80061b4:	601a      	str	r2, [r3, #0]
      break;
 80061b6:	e00b      	b.n	80061d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80061bc:	601a      	str	r2, [r3, #0]
      break;
 80061be:	e007      	b.n	80061d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80061c4:	601a      	str	r2, [r3, #0]
      break;
 80061c6:	e003      	b.n	80061d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	60fb      	str	r3, [r7, #12]
      break;
 80061ce:	bf00      	nop
  }

  return ret;
 80061d0:	68fb      	ldr	r3, [r7, #12]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	408c0000 	.word	0x408c0000
 80061e0:	410c0000 	.word	0x410c0000
 80061e4:	418c0000 	.word	0x418c0000
 80061e8:	420c0000 	.word	0x420c0000
 80061ec:	428c0000 	.word	0x428c0000

080061f0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3320      	adds	r3, #32
 8006202:	f107 020b 	add.w	r2, r7, #11
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f000 ffdf 	bl	80071cc <lsm6dso_gy_data_rate_get>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006214:	f04f 33ff 	mov.w	r3, #4294967295
 8006218:	e04e      	b.n	80062b8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800621a:	7afb      	ldrb	r3, [r7, #11]
 800621c:	2b0a      	cmp	r3, #10
 800621e:	d846      	bhi.n	80062ae <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	08006255 	.word	0x08006255
 800622c:	0800625f 	.word	0x0800625f
 8006230:	08006267 	.word	0x08006267
 8006234:	0800626f 	.word	0x0800626f
 8006238:	08006277 	.word	0x08006277
 800623c:	0800627f 	.word	0x0800627f
 8006240:	08006287 	.word	0x08006287
 8006244:	0800628f 	.word	0x0800628f
 8006248:	08006297 	.word	0x08006297
 800624c:	0800629f 	.word	0x0800629f
 8006250:	080062a7 	.word	0x080062a7
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
      break;
 800625c:	e02b      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006262:	601a      	str	r2, [r3, #0]
      break;
 8006264:	e027      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4a16      	ldr	r2, [pc, #88]	; (80062c4 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800626a:	601a      	str	r2, [r3, #0]
      break;
 800626c:	e023      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8006272:	601a      	str	r2, [r3, #0]
      break;
 8006274:	e01f      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800627a:	601a      	str	r2, [r3, #0]
      break;
 800627c:	e01b      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8006282:	601a      	str	r2, [r3, #0]
      break;
 8006284:	e017      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800628a:	601a      	str	r2, [r3, #0]
      break;
 800628c:	e013      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	4a11      	ldr	r2, [pc, #68]	; (80062d8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8006292:	601a      	str	r2, [r3, #0]
      break;
 8006294:	e00f      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	4a10      	ldr	r2, [pc, #64]	; (80062dc <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800629a:	601a      	str	r2, [r3, #0]
      break;
 800629c:	e00b      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	4a0f      	ldr	r2, [pc, #60]	; (80062e0 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 80062a2:	601a      	str	r2, [r3, #0]
      break;
 80062a4:	e007      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	4a0e      	ldr	r2, [pc, #56]	; (80062e4 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 80062aa:	601a      	str	r2, [r3, #0]
      break;
 80062ac:	e003      	b.n	80062b6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	60fb      	str	r3, [r7, #12]
      break;
 80062b4:	bf00      	nop
  }

  return ret;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	41480000 	.word	0x41480000
 80062c4:	41d00000 	.word	0x41d00000
 80062c8:	42500000 	.word	0x42500000
 80062cc:	42d00000 	.word	0x42d00000
 80062d0:	43500000 	.word	0x43500000
 80062d4:	43d08000 	.word	0x43d08000
 80062d8:	44504000 	.word	0x44504000
 80062dc:	44d06000 	.word	0x44d06000
 80062e0:	45505000 	.word	0x45505000
 80062e4:	45d05800 	.word	0x45d05800

080062e8 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80062f4:	2100      	movs	r1, #0
 80062f6:	ed97 0a00 	vldr	s0, [r7]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f806 	bl	800630c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006300:	4603      	mov	r3, r0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	ed87 0a02 	vstr	s0, [r7, #8]
 8006318:	460b      	mov	r3, r1
 800631a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800632a:	2b01      	cmp	r3, #1
 800632c:	d028      	beq.n	8006380 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800632e:	e05c      	b.n	80063ea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f103 0020 	add.w	r0, r3, #32
 8006336:	f107 0214 	add.w	r2, r7, #20
 800633a:	2301      	movs	r3, #1
 800633c:	2116      	movs	r1, #22
 800633e:	f000 fbf3 	bl	8006b28 <lsm6dso_read_reg>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	e06c      	b.n	8006428 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800634e:	7d3b      	ldrb	r3, [r7, #20]
 8006350:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d04b      	beq.n	80063f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800635a:	7d3b      	ldrb	r3, [r7, #20]
 800635c:	f36f 13c7 	bfc	r3, #7, #1
 8006360:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f103 0020 	add.w	r0, r3, #32
 8006368:	f107 0214 	add.w	r2, r7, #20
 800636c:	2301      	movs	r3, #1
 800636e:	2116      	movs	r1, #22
 8006370:	f000 fbf2 	bl	8006b58 <lsm6dso_write_reg>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d03b      	beq.n	80063f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800637a:	f04f 33ff 	mov.w	r3, #4294967295
 800637e:	e053      	b.n	8006428 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f103 0020 	add.w	r0, r3, #32
 8006386:	f107 0210 	add.w	r2, r7, #16
 800638a:	2301      	movs	r3, #1
 800638c:	2116      	movs	r1, #22
 800638e:	f000 fbcb 	bl	8006b28 <lsm6dso_read_reg>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295
 800639c:	e044      	b.n	8006428 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800639e:	7c3b      	ldrb	r3, [r7, #16]
 80063a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d112      	bne.n	80063d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80063aa:	7c3b      	ldrb	r3, [r7, #16]
 80063ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f103 0020 	add.w	r0, r3, #32
 80063b8:	f107 0210 	add.w	r2, r7, #16
 80063bc:	2301      	movs	r3, #1
 80063be:	2116      	movs	r1, #22
 80063c0:	f000 fbca 	bl	8006b58 <lsm6dso_write_reg>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	e02b      	b.n	8006428 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80063d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80063d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006430 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80063d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e0:	dc00      	bgt.n	80063e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80063e2:	e007      	b.n	80063f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80063e4:	4b13      	ldr	r3, [pc, #76]	; (8006434 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e004      	b.n	80063f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295
 80063ee:	61fb      	str	r3, [r7, #28]
      break;
 80063f0:	e000      	b.n	80063f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80063f2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	d102      	bne.n	8006402 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006400:	e012      	b.n	8006428 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006408:	2b01      	cmp	r3, #1
 800640a:	d106      	bne.n	800641a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800640c:	ed97 0a06 	vldr	s0, [r7, #24]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fa45 	bl	80068a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006416:	61f8      	str	r0, [r7, #28]
 8006418:	e005      	b.n	8006426 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800641a:	ed97 0a06 	vldr	s0, [r7, #24]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 faca 	bl	80069b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006424:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006426:	69fb      	ldr	r3, [r7, #28]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	43500000 	.word	0x43500000
 8006434:	43500000 	.word	0x43500000

08006438 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3320      	adds	r3, #32
 800644a:	f107 020b 	add.w	r2, r7, #11
 800644e:	4611      	mov	r1, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fd7f 	bl	8006f54 <lsm6dso_gy_full_scale_get>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800645c:	f04f 33ff 	mov.w	r3, #4294967295
 8006460:	e030      	b.n	80064c4 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006462:	7afb      	ldrb	r3, [r7, #11]
 8006464:	2b06      	cmp	r3, #6
 8006466:	d828      	bhi.n	80064ba <LSM6DSO_GYRO_GetFullScale+0x82>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006495 	.word	0x08006495
 8006474:	0800648d 	.word	0x0800648d
 8006478:	0800649d 	.word	0x0800649d
 800647c:	080064bb 	.word	0x080064bb
 8006480:	080064a7 	.word	0x080064a7
 8006484:	080064bb 	.word	0x080064bb
 8006488:	080064b1 	.word	0x080064b1
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	227d      	movs	r2, #125	; 0x7d
 8006490:	601a      	str	r2, [r3, #0]
      break;
 8006492:	e016      	b.n	80064c2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	22fa      	movs	r2, #250	; 0xfa
 8006498:	601a      	str	r2, [r3, #0]
      break;
 800649a:	e012      	b.n	80064c2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80064a2:	601a      	str	r2, [r3, #0]
      break;
 80064a4:	e00d      	b.n	80064c2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064ac:	601a      	str	r2, [r3, #0]
      break;
 80064ae:	e008      	b.n	80064c2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80064b6:	601a      	str	r2, [r3, #0]
      break;
 80064b8:	e003      	b.n	80064c2 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	60fb      	str	r3, [r7, #12]
      break;
 80064c0:	bf00      	nop
  }

  return ret;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b7d      	cmp	r3, #125	; 0x7d
 80064da:	dd12      	ble.n	8006502 <LSM6DSO_GYRO_SetFullScale+0x36>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2bfa      	cmp	r3, #250	; 0xfa
 80064e0:	dd0d      	ble.n	80064fe <LSM6DSO_GYRO_SetFullScale+0x32>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80064e8:	dd07      	ble.n	80064fa <LSM6DSO_GYRO_SetFullScale+0x2e>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f0:	dc01      	bgt.n	80064f6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80064f2:	2304      	movs	r3, #4
 80064f4:	e006      	b.n	8006504 <LSM6DSO_GYRO_SetFullScale+0x38>
 80064f6:	2306      	movs	r3, #6
 80064f8:	e004      	b.n	8006504 <LSM6DSO_GYRO_SetFullScale+0x38>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e002      	b.n	8006504 <LSM6DSO_GYRO_SetFullScale+0x38>
 80064fe:	2300      	movs	r3, #0
 8006500:	e000      	b.n	8006504 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006502:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006504:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3320      	adds	r3, #32
 800650a:	7bfa      	ldrb	r2, [r7, #15]
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fcfa 	bl	8006f08 <lsm6dso_gy_full_scale_set>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295
 800651e:	e000      	b.n	8006522 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3320      	adds	r3, #32
 8006538:	f107 0208 	add.w	r2, r7, #8
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fecc 	bl	80072dc <lsm6dso_angular_rate_raw_get>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800654a:	f04f 33ff 	mov.w	r3, #4294967295
 800654e:	e00c      	b.n	800656a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006550:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006558:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006560:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3320      	adds	r3, #32
 8006580:	f107 0210 	add.w	r2, r7, #16
 8006584:	4611      	mov	r1, r2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fea8 	bl	80072dc <lsm6dso_angular_rate_raw_get>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	e03c      	b.n	8006612 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006598:	f107 030c 	add.w	r3, r7, #12
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fdd4 	bl	800614c <LSM6DSO_GYRO_GetSensitivity>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80065aa:	f04f 33ff 	mov.w	r3, #4294967295
 80065ae:	e030      	b.n	8006612 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80065b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80065c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065c8:	ee17 2a90 	vmov	r2, s15
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80065d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80065e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065e8:	ee17 2a90 	vmov	r2, s15
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80065f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006608:	ee17 2a90 	vmov	r2, s15
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
 8006626:	4613      	mov	r3, r2
 8006628:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f103 0020 	add.w	r0, r3, #32
 8006630:	1cba      	adds	r2, r7, #2
 8006632:	78f9      	ldrb	r1, [r7, #3]
 8006634:	2301      	movs	r3, #1
 8006636:	f000 fa8f 	bl	8006b58 <lsm6dso_write_reg>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
 8006644:	e000      	b.n	8006648 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800665c:	edd7 7a00 	vldr	s15, [r7]
 8006660:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006760 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666c:	d801      	bhi.n	8006672 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800666e:	230b      	movs	r3, #11
 8006670:	e063      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006672:	edd7 7a00 	vldr	s15, [r7]
 8006676:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800667a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006682:	d801      	bhi.n	8006688 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006684:	2301      	movs	r3, #1
 8006686:	e058      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006688:	edd7 7a00 	vldr	s15, [r7]
 800668c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006698:	d801      	bhi.n	800669e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800669a:	2302      	movs	r3, #2
 800669c:	e04d      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800669e:	edd7 7a00 	vldr	s15, [r7]
 80066a2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006764 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80066a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ae:	d801      	bhi.n	80066b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80066b0:	2303      	movs	r3, #3
 80066b2:	e042      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80066b4:	edd7 7a00 	vldr	s15, [r7]
 80066b8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006768 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80066bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	d801      	bhi.n	80066ca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80066c6:	2304      	movs	r3, #4
 80066c8:	e037      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80066ca:	edd7 7a00 	vldr	s15, [r7]
 80066ce:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800676c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80066d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066da:	d801      	bhi.n	80066e0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80066dc:	2305      	movs	r3, #5
 80066de:	e02c      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80066e0:	edd7 7a00 	vldr	s15, [r7]
 80066e4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006770 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80066e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f0:	d801      	bhi.n	80066f6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80066f2:	2306      	movs	r3, #6
 80066f4:	e021      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80066f6:	edd7 7a00 	vldr	s15, [r7]
 80066fa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006774 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80066fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006706:	d801      	bhi.n	800670c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006708:	2307      	movs	r3, #7
 800670a:	e016      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800670c:	edd7 7a00 	vldr	s15, [r7]
 8006710:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006778 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671c:	d801      	bhi.n	8006722 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800671e:	2308      	movs	r3, #8
 8006720:	e00b      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006722:	edd7 7a00 	vldr	s15, [r7]
 8006726:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800677c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800672a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006732:	d801      	bhi.n	8006738 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006734:	2309      	movs	r3, #9
 8006736:	e000      	b.n	800673a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006738:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800673a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3320      	adds	r3, #32
 8006740:	7bfa      	ldrb	r2, [r7, #15]
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fa7d 	bl	8006c44 <lsm6dso_xl_data_rate_set>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	e000      	b.n	8006758 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	3fcccccd 	.word	0x3fcccccd
 8006764:	42500000 	.word	0x42500000
 8006768:	42d00000 	.word	0x42d00000
 800676c:	43500000 	.word	0x43500000
 8006770:	43d08000 	.word	0x43d08000
 8006774:	44504000 	.word	0x44504000
 8006778:	44d06000 	.word	0x44d06000
 800677c:	45505000 	.word	0x45505000

08006780 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800678c:	edd7 7a00 	vldr	s15, [r7]
 8006790:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006880 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679c:	d801      	bhi.n	80067a2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800679e:	230b      	movs	r3, #11
 80067a0:	e063      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80067a2:	edd7 7a00 	vldr	s15, [r7]
 80067a6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80067aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b2:	d801      	bhi.n	80067b8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e058      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80067b8:	edd7 7a00 	vldr	s15, [r7]
 80067bc:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80067c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c8:	d801      	bhi.n	80067ce <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e04d      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80067ce:	edd7 7a00 	vldr	s15, [r7]
 80067d2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006884 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80067d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067de:	d801      	bhi.n	80067e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80067e0:	2303      	movs	r3, #3
 80067e2:	e042      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80067e4:	edd7 7a00 	vldr	s15, [r7]
 80067e8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006888 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80067ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f4:	d801      	bhi.n	80067fa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80067f6:	2304      	movs	r3, #4
 80067f8:	e037      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80067fa:	edd7 7a00 	vldr	s15, [r7]
 80067fe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800688c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680a:	d801      	bhi.n	8006810 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 800680c:	2305      	movs	r3, #5
 800680e:	e02c      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006810:	edd7 7a00 	vldr	s15, [r7]
 8006814:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006890 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800681c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006820:	d801      	bhi.n	8006826 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006822:	2306      	movs	r3, #6
 8006824:	e021      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006826:	edd7 7a00 	vldr	s15, [r7]
 800682a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006894 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800682e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006836:	d801      	bhi.n	800683c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006838:	2307      	movs	r3, #7
 800683a:	e016      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800683c:	edd7 7a00 	vldr	s15, [r7]
 8006840:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006898 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684c:	d801      	bhi.n	8006852 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800684e:	2308      	movs	r3, #8
 8006850:	e00b      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006852:	edd7 7a00 	vldr	s15, [r7]
 8006856:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800689c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800685a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006862:	d801      	bhi.n	8006868 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006864:	2309      	movs	r3, #9
 8006866:	e000      	b.n	800686a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006868:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	3fcccccd 	.word	0x3fcccccd
 8006884:	42500000 	.word	0x42500000
 8006888:	42d00000 	.word	0x42d00000
 800688c:	43500000 	.word	0x43500000
 8006890:	43d08000 	.word	0x43d08000
 8006894:	44504000 	.word	0x44504000
 8006898:	44d06000 	.word	0x44d06000
 800689c:	45505000 	.word	0x45505000

080068a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80068ac:	edd7 7a00 	vldr	s15, [r7]
 80068b0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80068b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068bc:	d801      	bhi.n	80068c2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80068be:	2301      	movs	r3, #1
 80068c0:	e058      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80068c2:	edd7 7a00 	vldr	s15, [r7]
 80068c6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80068ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d2:	d801      	bhi.n	80068d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e04d      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80068d8:	edd7 7a00 	vldr	s15, [r7]
 80068dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800699c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80068e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e8:	d801      	bhi.n	80068ee <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80068ea:	2303      	movs	r3, #3
 80068ec:	e042      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80068ee:	edd7 7a00 	vldr	s15, [r7]
 80068f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80069a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80068f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fe:	d801      	bhi.n	8006904 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006900:	2304      	movs	r3, #4
 8006902:	e037      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006904:	edd7 7a00 	vldr	s15, [r7]
 8006908:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80069a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800690c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006914:	d801      	bhi.n	800691a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006916:	2305      	movs	r3, #5
 8006918:	e02c      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800691a:	edd7 7a00 	vldr	s15, [r7]
 800691e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80069a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692a:	d801      	bhi.n	8006930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800692c:	2306      	movs	r3, #6
 800692e:	e021      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006930:	edd7 7a00 	vldr	s15, [r7]
 8006934:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80069ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800693c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006940:	d801      	bhi.n	8006946 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006942:	2307      	movs	r3, #7
 8006944:	e016      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006946:	edd7 7a00 	vldr	s15, [r7]
 800694a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80069b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800694e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	d801      	bhi.n	800695c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006958:	2308      	movs	r3, #8
 800695a:	e00b      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800695c:	edd7 7a00 	vldr	s15, [r7]
 8006960:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80069b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696c:	d801      	bhi.n	8006972 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800696e:	2309      	movs	r3, #9
 8006970:	e000      	b.n	8006974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006972:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006974:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3320      	adds	r3, #32
 800697a:	7bfa      	ldrb	r2, [r7, #15]
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fb2a 	bl	8006fd8 <lsm6dso_gy_data_rate_set>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800698a:	f04f 33ff 	mov.w	r3, #4294967295
 800698e:	e000      	b.n	8006992 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	42500000 	.word	0x42500000
 80069a0:	42d00000 	.word	0x42d00000
 80069a4:	43500000 	.word	0x43500000
 80069a8:	43d08000 	.word	0x43d08000
 80069ac:	44504000 	.word	0x44504000
 80069b0:	44d06000 	.word	0x44d06000
 80069b4:	45505000 	.word	0x45505000

080069b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80069c4:	edd7 7a00 	vldr	s15, [r7]
 80069c8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80069cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d4:	d801      	bhi.n	80069da <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e058      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80069da:	edd7 7a00 	vldr	s15, [r7]
 80069de:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80069e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ea:	d801      	bhi.n	80069f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e04d      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80069f0:	edd7 7a00 	vldr	s15, [r7]
 80069f4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006aa0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80069f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a00:	d801      	bhi.n	8006a06 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006a02:	2303      	movs	r3, #3
 8006a04:	e042      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006a06:	edd7 7a00 	vldr	s15, [r7]
 8006a0a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006aa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a16:	d801      	bhi.n	8006a1c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	e037      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006a1c:	edd7 7a00 	vldr	s15, [r7]
 8006a20:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a2c:	d801      	bhi.n	8006a32 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006a2e:	2305      	movs	r3, #5
 8006a30:	e02c      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006a32:	edd7 7a00 	vldr	s15, [r7]
 8006a36:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006aac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a42:	d801      	bhi.n	8006a48 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006a44:	2306      	movs	r3, #6
 8006a46:	e021      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006a48:	edd7 7a00 	vldr	s15, [r7]
 8006a4c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006ab0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a58:	d801      	bhi.n	8006a5e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006a5a:	2307      	movs	r3, #7
 8006a5c:	e016      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006a5e:	edd7 7a00 	vldr	s15, [r7]
 8006a62:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006ab4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6e:	d801      	bhi.n	8006a74 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006a70:	2308      	movs	r3, #8
 8006a72:	e00b      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006a74:	edd7 7a00 	vldr	s15, [r7]
 8006a78:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006ab8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a84:	d801      	bhi.n	8006a8a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006a86:	2309      	movs	r3, #9
 8006a88:	e000      	b.n	8006a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006a8a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	42500000 	.word	0x42500000
 8006aa4:	42d00000 	.word	0x42d00000
 8006aa8:	43500000 	.word	0x43500000
 8006aac:	43d08000 	.word	0x43d08000
 8006ab0:	44504000 	.word	0x44504000
 8006ab4:	44d06000 	.word	0x44d06000
 8006ab8:	45505000 	.word	0x45505000

08006abc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	460b      	mov	r3, r1
 8006aca:	72fb      	strb	r3, [r7, #11]
 8006acc:	4613      	mov	r3, r2
 8006ace:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	695c      	ldr	r4, [r3, #20]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	b298      	uxth	r0, r3
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	b299      	uxth	r1, r3
 8006ae2:	893b      	ldrh	r3, [r7, #8]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	47a0      	blx	r4
 8006ae8:	4603      	mov	r3, r0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}

08006af2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006af2:	b590      	push	{r4, r7, lr}
 8006af4:	b087      	sub	sp, #28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	461a      	mov	r2, r3
 8006afe:	460b      	mov	r3, r1
 8006b00:	72fb      	strb	r3, [r7, #11]
 8006b02:	4613      	mov	r3, r2
 8006b04:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	691c      	ldr	r4, [r3, #16]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	7b1b      	ldrb	r3, [r3, #12]
 8006b12:	b298      	uxth	r0, r3
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	b299      	uxth	r1, r3
 8006b18:	893b      	ldrh	r3, [r7, #8]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	47a0      	blx	r4
 8006b1e:	4603      	mov	r3, r0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd90      	pop	{r4, r7, pc}

08006b28 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	461a      	mov	r2, r3
 8006b34:	460b      	mov	r3, r1
 8006b36:	72fb      	strb	r3, [r7, #11]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	685c      	ldr	r4, [r3, #4]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68d8      	ldr	r0, [r3, #12]
 8006b44:	893b      	ldrh	r3, [r7, #8]
 8006b46:	7af9      	ldrb	r1, [r7, #11]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	47a0      	blx	r4
 8006b4c:	6178      	str	r0, [r7, #20]

  return ret;
 8006b4e:	697b      	ldr	r3, [r7, #20]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd90      	pop	{r4, r7, pc}

08006b58 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	461a      	mov	r2, r3
 8006b64:	460b      	mov	r3, r1
 8006b66:	72fb      	strb	r3, [r7, #11]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681c      	ldr	r4, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68d8      	ldr	r0, [r3, #12]
 8006b74:	893b      	ldrh	r3, [r7, #8]
 8006b76:	7af9      	ldrb	r1, [r7, #11]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	47a0      	blx	r4
 8006b7c:	6178      	str	r0, [r7, #20]

  return ret;
 8006b7e:	697b      	ldr	r3, [r7, #20]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd90      	pop	{r4, r7, pc}

08006b88 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006b94:	f107 0208 	add.w	r2, r7, #8
 8006b98:	2301      	movs	r3, #1
 8006b9a:	2110      	movs	r1, #16
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff ffc3 	bl	8006b28 <lsm6dso_read_reg>
 8006ba2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	7a3b      	ldrb	r3, [r7, #8]
 8006bb4:	f362 0383 	bfi	r3, r2, #2, #2
 8006bb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006bba:	f107 0208 	add.w	r2, r7, #8
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	2110      	movs	r1, #16
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff ffc8 	bl	8006b58 <lsm6dso_write_reg>
 8006bc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bca:	68fb      	ldr	r3, [r7, #12]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006bde:	f107 0208 	add.w	r2, r7, #8
 8006be2:	2301      	movs	r3, #1
 8006be4:	2110      	movs	r1, #16
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff ff9e 	bl	8006b28 <lsm6dso_read_reg>
 8006bec:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8006bee:	7a3b      	ldrb	r3, [r7, #8]
 8006bf0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d81a      	bhi.n	8006c30 <lsm6dso_xl_full_scale_get+0x5c>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <lsm6dso_xl_full_scale_get+0x2c>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c11 	.word	0x08006c11
 8006c04:	08006c19 	.word	0x08006c19
 8006c08:	08006c21 	.word	0x08006c21
 8006c0c:	08006c29 	.word	0x08006c29
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
      break;
 8006c16:	e00f      	b.n	8006c38 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
      break;
 8006c1e:	e00b      	b.n	8006c38 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2202      	movs	r2, #2
 8006c24:	701a      	strb	r2, [r3, #0]
      break;
 8006c26:	e007      	b.n	8006c38 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	701a      	strb	r2, [r3, #0]
      break;
 8006c2e:	e003      	b.n	8006c38 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
      break;
 8006c36:	bf00      	nop
  }

  return ret;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop

08006c44 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006c54:	f107 030c 	add.w	r3, r7, #12
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fc96 	bl	800758c <lsm6dso_fsm_enable_get>
 8006c60:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <lsm6dso_xl_data_rate_set+0x28>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	e0e1      	b.n	8006e30 <lsm6dso_xl_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006c6c:	7b3b      	ldrb	r3, [r7, #12]
 8006c6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c72:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8006c74:	7b3b      	ldrb	r3, [r7, #12]
 8006c76:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c7a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8006c80:	7b3b      	ldrb	r3, [r7, #12]
 8006c82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c86:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8006c8c:	7b3b      	ldrb	r3, [r7, #12]
 8006c8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c92:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8006c94:	4313      	orrs	r3, r2
 8006c96:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8006c98:	7b3b      	ldrb	r3, [r7, #12]
 8006c9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c9e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8006ca4:	7b3b      	ldrb	r3, [r7, #12]
 8006ca6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006caa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8006cac:	4313      	orrs	r3, r2
 8006cae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8006cb0:	7b3b      	ldrb	r3, [r7, #12]
 8006cb2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006cb6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8006cbc:	7b3b      	ldrb	r3, [r7, #12]
 8006cbe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006cc2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8006cc8:	7b7b      	ldrb	r3, [r7, #13]
 8006cca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006cce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8006cd4:	7b7b      	ldrb	r3, [r7, #13]
 8006cd6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cda:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8006ce0:	7b7b      	ldrb	r3, [r7, #13]
 8006ce2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ce6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8006cec:	7b7b      	ldrb	r3, [r7, #13]
 8006cee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006cf2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8006cf8:	7b7b      	ldrb	r3, [r7, #13]
 8006cfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cfe:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8006d04:	7b7b      	ldrb	r3, [r7, #13]
 8006d06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d0a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8006d10:	7b7b      	ldrb	r3, [r7, #13]
 8006d12:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d16:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006d1c:	7b7b      	ldrb	r3, [r7, #13]
 8006d1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d22:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d164      	bne.n	8006df6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8006d2c:	f107 030b 	add.w	r3, r7, #11
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fc4c 	bl	80075d0 <lsm6dso_fsm_data_rate_get>
 8006d38:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <lsm6dso_xl_data_rate_set+0x100>
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	e075      	b.n	8006e30 <lsm6dso_xl_data_rate_set+0x1ec>

    switch (fsm_odr)
 8006d44:	7afb      	ldrb	r3, [r7, #11]
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d852      	bhi.n	8006df0 <lsm6dso_xl_data_rate_set+0x1ac>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <lsm6dso_xl_data_rate_set+0x10c>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d73 	.word	0x08006d73
 8006d58:	08006d91 	.word	0x08006d91
 8006d5c:	08006dbb 	.word	0x08006dbb
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8006d6a:	e045      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	75fb      	strb	r3, [r7, #23]
        break;
 8006d70:	e042      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8006d72:	78fb      	ldrb	r3, [r7, #3]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8006d7c:	e03c      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d102      	bne.n	8006d8a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006d84:	2302      	movs	r3, #2
 8006d86:	75fb      	strb	r3, [r7, #23]
        break;
 8006d88:	e036      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	75fb      	strb	r3, [r7, #23]
        break;
 8006d8e:	e033      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006d96:	2303      	movs	r3, #3
 8006d98:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8006d9a:	e02d      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d102      	bne.n	8006da8 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006da2:	2303      	movs	r3, #3
 8006da4:	75fb      	strb	r3, [r7, #23]
        break;
 8006da6:	e027      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d102      	bne.n	8006db4 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006dae:	2303      	movs	r3, #3
 8006db0:	75fb      	strb	r3, [r7, #23]
        break;
 8006db2:	e021      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	75fb      	strb	r3, [r7, #23]
        break;
 8006db8:	e01e      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8006dc4:	e018      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d102      	bne.n	8006dd2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006dcc:	2304      	movs	r3, #4
 8006dce:	75fb      	strb	r3, [r7, #23]
        break;
 8006dd0:	e012      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d102      	bne.n	8006dde <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006dd8:	2304      	movs	r3, #4
 8006dda:	75fb      	strb	r3, [r7, #23]
        break;
 8006ddc:	e00c      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d102      	bne.n	8006dea <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006de4:	2304      	movs	r3, #4
 8006de6:	75fb      	strb	r3, [r7, #23]
        break;
 8006de8:	e006      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
          odr_xl = val;
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	75fb      	strb	r3, [r7, #23]
        break;
 8006dee:	e003      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>

      default:
        odr_xl = val;
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	75fb      	strb	r3, [r7, #23]
        break;
 8006df4:	e000      	b.n	8006df8 <lsm6dso_xl_data_rate_set+0x1b4>
    }
  }
 8006df6:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006df8:	f107 0208 	add.w	r2, r7, #8
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	2110      	movs	r1, #16
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fe91 	bl	8006b28 <lsm6dso_read_reg>
 8006e06:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	7a3b      	ldrb	r3, [r7, #8]
 8006e12:	f362 1307 	bfi	r3, r2, #4, #4
 8006e16:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006e18:	f107 0208 	add.w	r2, r7, #8
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	2110      	movs	r1, #16
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff fe99 	bl	8006b58 <lsm6dso_write_reg>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  return ret;
 8006e2e:	693b      	ldr	r3, [r7, #16]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8006e42:	f107 0208 	add.w	r2, r7, #8
 8006e46:	2301      	movs	r3, #1
 8006e48:	2110      	movs	r1, #16
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff fe6c 	bl	8006b28 <lsm6dso_read_reg>
 8006e50:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8006e52:	7a3b      	ldrb	r3, [r7, #8]
 8006e54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b0b      	cmp	r3, #11
 8006e5c:	d84a      	bhi.n	8006ef4 <lsm6dso_xl_data_rate_get+0xbc>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <lsm6dso_xl_data_rate_get+0x2c>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e95 	.word	0x08006e95
 8006e68:	08006e9d 	.word	0x08006e9d
 8006e6c:	08006ea5 	.word	0x08006ea5
 8006e70:	08006ead 	.word	0x08006ead
 8006e74:	08006eb5 	.word	0x08006eb5
 8006e78:	08006ebd 	.word	0x08006ebd
 8006e7c:	08006ec5 	.word	0x08006ec5
 8006e80:	08006ecd 	.word	0x08006ecd
 8006e84:	08006ed5 	.word	0x08006ed5
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08006ee5 	.word	0x08006ee5
 8006e90:	08006eed 	.word	0x08006eed
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e02f      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	701a      	strb	r2, [r3, #0]
      break;
 8006ea2:	e02b      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	701a      	strb	r2, [r3, #0]
      break;
 8006eaa:	e027      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	701a      	strb	r2, [r3, #0]
      break;
 8006eb2:	e023      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	701a      	strb	r2, [r3, #0]
      break;
 8006eba:	e01f      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e01b      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2206      	movs	r2, #6
 8006ec8:	701a      	strb	r2, [r3, #0]
      break;
 8006eca:	e017      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	701a      	strb	r2, [r3, #0]
      break;
 8006ed2:	e013      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2208      	movs	r2, #8
 8006ed8:	701a      	strb	r2, [r3, #0]
      break;
 8006eda:	e00f      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2209      	movs	r2, #9
 8006ee0:	701a      	strb	r2, [r3, #0]
      break;
 8006ee2:	e00b      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	701a      	strb	r2, [r3, #0]
      break;
 8006eea:	e007      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	220b      	movs	r2, #11
 8006ef0:	701a      	strb	r2, [r3, #0]
      break;
 8006ef2:	e003      	b.n	8006efc <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
      break;
 8006efa:	bf00      	nop
  }

  return ret;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop

08006f08 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006f14:	f107 0208 	add.w	r2, r7, #8
 8006f18:	2301      	movs	r3, #1
 8006f1a:	2111      	movs	r1, #17
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fe03 	bl	8006b28 <lsm6dso_read_reg>
 8006f22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10f      	bne.n	8006f4a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	7a3b      	ldrb	r3, [r7, #8]
 8006f34:	f362 0343 	bfi	r3, r2, #1, #3
 8006f38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006f3a:	f107 0208 	add.w	r2, r7, #8
 8006f3e:	2301      	movs	r3, #1
 8006f40:	2111      	movs	r1, #17
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff fe08 	bl	8006b58 <lsm6dso_write_reg>
 8006f48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006f5e:	f107 0208 	add.w	r2, r7, #8
 8006f62:	2301      	movs	r3, #1
 8006f64:	2111      	movs	r1, #17
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fdde 	bl	8006b28 <lsm6dso_read_reg>
 8006f6c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8006f6e:	7a3b      	ldrb	r3, [r7, #8]
 8006f70:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b06      	cmp	r3, #6
 8006f78:	d824      	bhi.n	8006fc4 <lsm6dso_gy_full_scale_get+0x70>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <lsm6dso_gy_full_scale_get+0x2c>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006f9d 	.word	0x08006f9d
 8006f84:	08006fa5 	.word	0x08006fa5
 8006f88:	08006fad 	.word	0x08006fad
 8006f8c:	08006fc5 	.word	0x08006fc5
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fc5 	.word	0x08006fc5
 8006f98:	08006fbd 	.word	0x08006fbd
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
      break;
 8006fa2:	e013      	b.n	8006fcc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	701a      	strb	r2, [r3, #0]
      break;
 8006faa:	e00f      	b.n	8006fcc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	701a      	strb	r2, [r3, #0]
      break;
 8006fb2:	e00b      	b.n	8006fcc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	701a      	strb	r2, [r3, #0]
      break;
 8006fba:	e007      	b.n	8006fcc <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2206      	movs	r2, #6
 8006fc0:	701a      	strb	r2, [r3, #0]
      break;
 8006fc2:	e003      	b.n	8006fcc <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
      break;
 8006fca:	bf00      	nop
  }

  return ret;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 facc 	bl	800758c <lsm6dso_fsm_enable_get>
 8006ff4:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <lsm6dso_gy_data_rate_set+0x28>
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	e0e1      	b.n	80071c4 <lsm6dso_gy_data_rate_set+0x1ec>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007000:	7b3b      	ldrb	r3, [r7, #12]
 8007002:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007006:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007008:	7b3b      	ldrb	r3, [r7, #12]
 800700a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800700e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007010:	4313      	orrs	r3, r2
 8007012:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007014:	7b3b      	ldrb	r3, [r7, #12]
 8007016:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800701a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800701c:	4313      	orrs	r3, r2
 800701e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007020:	7b3b      	ldrb	r3, [r7, #12]
 8007022:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007026:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007028:	4313      	orrs	r3, r2
 800702a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800702c:	7b3b      	ldrb	r3, [r7, #12]
 800702e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007032:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007034:	4313      	orrs	r3, r2
 8007036:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007038:	7b3b      	ldrb	r3, [r7, #12]
 800703a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800703e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007040:	4313      	orrs	r3, r2
 8007042:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007044:	7b3b      	ldrb	r3, [r7, #12]
 8007046:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800704a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800704c:	4313      	orrs	r3, r2
 800704e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007050:	7b3b      	ldrb	r3, [r7, #12]
 8007052:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007056:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007058:	4313      	orrs	r3, r2
 800705a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800705c:	7b7b      	ldrb	r3, [r7, #13]
 800705e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007062:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007064:	4313      	orrs	r3, r2
 8007066:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007068:	7b7b      	ldrb	r3, [r7, #13]
 800706a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800706e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007070:	4313      	orrs	r3, r2
 8007072:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007074:	7b7b      	ldrb	r3, [r7, #13]
 8007076:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800707a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800707c:	4313      	orrs	r3, r2
 800707e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007080:	7b7b      	ldrb	r3, [r7, #13]
 8007082:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007086:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007088:	4313      	orrs	r3, r2
 800708a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800708c:	7b7b      	ldrb	r3, [r7, #13]
 800708e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007092:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007094:	4313      	orrs	r3, r2
 8007096:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007098:	7b7b      	ldrb	r3, [r7, #13]
 800709a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800709e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80070a0:	4313      	orrs	r3, r2
 80070a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80070a4:	7b7b      	ldrb	r3, [r7, #13]
 80070a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80070aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80070ac:	4313      	orrs	r3, r2
 80070ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80070b0:	7b7b      	ldrb	r3, [r7, #13]
 80070b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80070b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d164      	bne.n	800718a <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80070c0:	f107 030b 	add.w	r3, r7, #11
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa82 	bl	80075d0 <lsm6dso_fsm_data_rate_get>
 80070cc:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <lsm6dso_gy_data_rate_set+0x100>
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	e075      	b.n	80071c4 <lsm6dso_gy_data_rate_set+0x1ec>

    switch (fsm_odr)
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d852      	bhi.n	8007184 <lsm6dso_gy_data_rate_set+0x1ac>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <lsm6dso_gy_data_rate_set+0x10c>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	08007107 	.word	0x08007107
 80070ec:	08007125 	.word	0x08007125
 80070f0:	0800714f 	.word	0x0800714f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80070fe:	e045      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	75fb      	strb	r3, [r7, #23]
        break;
 8007104:	e042      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800710c:	2302      	movs	r3, #2
 800710e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007110:	e03c      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d102      	bne.n	800711e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007118:	2302      	movs	r3, #2
 800711a:	75fb      	strb	r3, [r7, #23]
        break;
 800711c:	e036      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	75fb      	strb	r3, [r7, #23]
        break;
 8007122:	e033      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800712a:	2303      	movs	r3, #3
 800712c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800712e:	e02d      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d102      	bne.n	800713c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007136:	2303      	movs	r3, #3
 8007138:	75fb      	strb	r3, [r7, #23]
        break;
 800713a:	e027      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d102      	bne.n	8007148 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007142:	2303      	movs	r3, #3
 8007144:	75fb      	strb	r3, [r7, #23]
        break;
 8007146:	e021      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	75fb      	strb	r3, [r7, #23]
        break;
 800714c:	e01e      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007154:	2304      	movs	r3, #4
 8007156:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007158:	e018      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d102      	bne.n	8007166 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007160:	2304      	movs	r3, #4
 8007162:	75fb      	strb	r3, [r7, #23]
        break;
 8007164:	e012      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d102      	bne.n	8007172 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800716c:	2304      	movs	r3, #4
 800716e:	75fb      	strb	r3, [r7, #23]
        break;
 8007170:	e00c      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	2b03      	cmp	r3, #3
 8007176:	d102      	bne.n	800717e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007178:	2304      	movs	r3, #4
 800717a:	75fb      	strb	r3, [r7, #23]
        break;
 800717c:	e006      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
          odr_gy = val;
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	75fb      	strb	r3, [r7, #23]
        break;
 8007182:	e003      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>

      default:
        odr_gy = val;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	75fb      	strb	r3, [r7, #23]
        break;
 8007188:	e000      	b.n	800718c <lsm6dso_gy_data_rate_set+0x1b4>
    }
  }
 800718a:	bf00      	nop

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800718c:	f107 0208 	add.w	r2, r7, #8
 8007190:	2301      	movs	r3, #1
 8007192:	2111      	movs	r1, #17
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff fcc7 	bl	8006b28 <lsm6dso_read_reg>
 800719a:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	7a3b      	ldrb	r3, [r7, #8]
 80071a6:	f362 1307 	bfi	r3, r2, #4, #4
 80071aa:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80071ac:	f107 0208 	add.w	r2, r7, #8
 80071b0:	2301      	movs	r3, #1
 80071b2:	2111      	movs	r1, #17
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff fccf 	bl	8006b58 <lsm6dso_write_reg>
 80071ba:	4602      	mov	r2, r0
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	4413      	add	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  return ret;
 80071c2:	693b      	ldr	r3, [r7, #16]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80071d6:	f107 0208 	add.w	r2, r7, #8
 80071da:	2301      	movs	r3, #1
 80071dc:	2111      	movs	r1, #17
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fca2 	bl	8006b28 <lsm6dso_read_reg>
 80071e4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80071e6:	7a3b      	ldrb	r3, [r7, #8]
 80071e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b0a      	cmp	r3, #10
 80071f0:	d844      	bhi.n	800727c <lsm6dso_gy_data_rate_get+0xb0>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <lsm6dso_gy_data_rate_get+0x2c>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007225 	.word	0x08007225
 80071fc:	0800722d 	.word	0x0800722d
 8007200:	08007235 	.word	0x08007235
 8007204:	0800723d 	.word	0x0800723d
 8007208:	08007245 	.word	0x08007245
 800720c:	0800724d 	.word	0x0800724d
 8007210:	08007255 	.word	0x08007255
 8007214:	0800725d 	.word	0x0800725d
 8007218:	08007265 	.word	0x08007265
 800721c:	0800726d 	.word	0x0800726d
 8007220:	08007275 	.word	0x08007275
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
      break;
 800722a:	e02b      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2201      	movs	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
      break;
 8007232:	e027      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2202      	movs	r2, #2
 8007238:	701a      	strb	r2, [r3, #0]
      break;
 800723a:	e023      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2203      	movs	r2, #3
 8007240:	701a      	strb	r2, [r3, #0]
      break;
 8007242:	e01f      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2204      	movs	r2, #4
 8007248:	701a      	strb	r2, [r3, #0]
      break;
 800724a:	e01b      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2205      	movs	r2, #5
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e017      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2206      	movs	r2, #6
 8007258:	701a      	strb	r2, [r3, #0]
      break;
 800725a:	e013      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2207      	movs	r2, #7
 8007260:	701a      	strb	r2, [r3, #0]
      break;
 8007262:	e00f      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2208      	movs	r2, #8
 8007268:	701a      	strb	r2, [r3, #0]
      break;
 800726a:	e00b      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2209      	movs	r2, #9
 8007270:	701a      	strb	r2, [r3, #0]
      break;
 8007272:	e007      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	220a      	movs	r2, #10
 8007278:	701a      	strb	r2, [r3, #0]
      break;
 800727a:	e003      	b.n	8007284 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
      break;
 8007282:	bf00      	nop
  }

  return ret;
 8007284:	68fb      	ldr	r3, [r7, #12]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800729c:	f107 0208 	add.w	r2, r7, #8
 80072a0:	2301      	movs	r3, #1
 80072a2:	2112      	movs	r1, #18
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fc3f 	bl	8006b28 <lsm6dso_read_reg>
 80072aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10f      	bne.n	80072d2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	7a3b      	ldrb	r3, [r7, #8]
 80072bc:	f362 1386 	bfi	r3, r2, #6, #1
 80072c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80072c2:	f107 0208 	add.w	r2, r7, #8
 80072c6:	2301      	movs	r3, #1
 80072c8:	2112      	movs	r1, #18
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fc44 	bl	8006b58 <lsm6dso_write_reg>
 80072d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80072d2:	68fb      	ldr	r3, [r7, #12]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80072e6:	f107 020c 	add.w	r2, r7, #12
 80072ea:	2306      	movs	r3, #6
 80072ec:	2122      	movs	r1, #34	; 0x22
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fc1a 	bl	8006b28 <lsm6dso_read_reg>
 80072f4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80072f6:	7b7b      	ldrb	r3, [r7, #13]
 80072f8:	b21a      	sxth	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007304:	b29b      	uxth	r3, r3
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	b29a      	uxth	r2, r3
 800730a:	7b3b      	ldrb	r3, [r7, #12]
 800730c:	b29b      	uxth	r3, r3
 800730e:	4413      	add	r3, r2
 8007310:	b29b      	uxth	r3, r3
 8007312:	b21a      	sxth	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	3302      	adds	r3, #2
 800731e:	b212      	sxth	r2, r2
 8007320:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	3302      	adds	r3, #2
 8007326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800732a:	b29b      	uxth	r3, r3
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	b29a      	uxth	r2, r3
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	b29b      	uxth	r3, r3
 8007334:	4413      	add	r3, r2
 8007336:	b29a      	uxth	r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	3302      	adds	r3, #2
 800733c:	b212      	sxth	r2, r2
 800733e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007340:	7c7a      	ldrb	r2, [r7, #17]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	3304      	adds	r3, #4
 8007346:	b212      	sxth	r2, r2
 8007348:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	3304      	adds	r3, #4
 800734e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007352:	b29b      	uxth	r3, r3
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	b29a      	uxth	r2, r3
 8007358:	7c3b      	ldrb	r3, [r7, #16]
 800735a:	b29b      	uxth	r3, r3
 800735c:	4413      	add	r3, r2
 800735e:	b29a      	uxth	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	3304      	adds	r3, #4
 8007364:	b212      	sxth	r2, r2
 8007366:	801a      	strh	r2, [r3, #0]

  return ret;
 8007368:	697b      	ldr	r3, [r7, #20]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800737c:	f107 020c 	add.w	r2, r7, #12
 8007380:	2306      	movs	r3, #6
 8007382:	2128      	movs	r1, #40	; 0x28
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff fbcf 	bl	8006b28 <lsm6dso_read_reg>
 800738a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800738c:	7b7b      	ldrb	r3, [r7, #13]
 800738e:	b21a      	sxth	r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800739a:	b29b      	uxth	r3, r3
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	b29a      	uxth	r2, r3
 80073a0:	7b3b      	ldrb	r3, [r7, #12]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4413      	add	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	b21a      	sxth	r2, r3
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80073ae:	7bfa      	ldrb	r2, [r7, #15]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	3302      	adds	r3, #2
 80073b4:	b212      	sxth	r2, r2
 80073b6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	3302      	adds	r3, #2
 80073bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	021b      	lsls	r3, r3, #8
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	3302      	adds	r3, #2
 80073d2:	b212      	sxth	r2, r2
 80073d4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80073d6:	7c7a      	ldrb	r2, [r7, #17]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	3304      	adds	r3, #4
 80073dc:	b212      	sxth	r2, r2
 80073de:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	3304      	adds	r3, #4
 80073e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	7c3b      	ldrb	r3, [r7, #16]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	4413      	add	r3, r2
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	3304      	adds	r3, #4
 80073fa:	b212      	sxth	r2, r2
 80073fc:	801a      	strh	r2, [r3, #0]

  return ret;
 80073fe:	697b      	ldr	r3, [r7, #20]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007414:	2300      	movs	r3, #0
 8007416:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	b2da      	uxtb	r2, r3
 8007420:	7a3b      	ldrb	r3, [r7, #8]
 8007422:	f362 1387 	bfi	r3, r2, #6, #2
 8007426:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007428:	f107 0208 	add.w	r2, r7, #8
 800742c:	2301      	movs	r3, #1
 800742e:	2101      	movs	r1, #1
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fb91 	bl	8006b58 <lsm6dso_write_reg>
 8007436:	60f8      	str	r0, [r7, #12]

  return ret;
 8007438:	68fb      	ldr	r3, [r7, #12]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 800744c:	2301      	movs	r3, #1
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	210f      	movs	r1, #15
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fb68 	bl	8006b28 <lsm6dso_read_reg>
 8007458:	60f8      	str	r0, [r7, #12]

  return ret;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007470:	f107 0208 	add.w	r2, r7, #8
 8007474:	2301      	movs	r3, #1
 8007476:	2112      	movs	r1, #18
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fb55 	bl	8006b28 <lsm6dso_read_reg>
 800747e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10f      	bne.n	80074a6 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	7a3b      	ldrb	r3, [r7, #8]
 8007490:	f362 0382 	bfi	r3, r2, #2, #1
 8007494:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007496:	f107 0208 	add.w	r2, r7, #8
 800749a:	2301      	movs	r3, #1
 800749c:	2112      	movs	r1, #18
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fb5a 	bl	8006b58 <lsm6dso_write_reg>
 80074a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074a6:	68fb      	ldr	r3, [r7, #12]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80074bc:	f107 020c 	add.w	r2, r7, #12
 80074c0:	2301      	movs	r3, #1
 80074c2:	2118      	movs	r1, #24
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff fb2f 	bl	8006b28 <lsm6dso_read_reg>
 80074ca:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	09db      	lsrs	r3, r3, #7
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	7b3b      	ldrb	r3, [r7, #12]
 80074da:	f362 0341 	bfi	r3, r2, #1, #1
 80074de:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80074e0:	f107 020c 	add.w	r2, r7, #12
 80074e4:	2301      	movs	r3, #1
 80074e6:	2118      	movs	r1, #24
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff fb35 	bl	8006b58 <lsm6dso_write_reg>
 80074ee:	4602      	mov	r2, r0
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <lsm6dso_i3c_disable_set+0x50>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	e01b      	b.n	8007538 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007500:	f107 0210 	add.w	r2, r7, #16
 8007504:	2301      	movs	r3, #1
 8007506:	2162      	movs	r1, #98	; 0x62
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fb0d 	bl	8006b28 <lsm6dso_read_reg>
 800750e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	b2da      	uxtb	r2, r3
 8007518:	7c3b      	ldrb	r3, [r7, #16]
 800751a:	f362 03c4 	bfi	r3, r2, #3, #2
 800751e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007520:	f107 0210 	add.w	r2, r7, #16
 8007524:	2301      	movs	r3, #1
 8007526:	2162      	movs	r1, #98	; 0x62
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fb15 	bl	8006b58 <lsm6dso_write_reg>
 800752e:	4602      	mov	r2, r0
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	4413      	add	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  return ret;
 8007536:	697b      	ldr	r3, [r7, #20]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800754c:	f107 0208 	add.w	r2, r7, #8
 8007550:	2301      	movs	r3, #1
 8007552:	210a      	movs	r1, #10
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fae7 	bl	8006b28 <lsm6dso_read_reg>
 800755a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10f      	bne.n	8007582 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007562:	78fb      	ldrb	r3, [r7, #3]
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	b2da      	uxtb	r2, r3
 800756a:	7a3b      	ldrb	r3, [r7, #8]
 800756c:	f362 0302 	bfi	r3, r2, #0, #3
 8007570:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007572:	f107 0208 	add.w	r2, r7, #8
 8007576:	2301      	movs	r3, #1
 8007578:	210a      	movs	r1, #10
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff faec 	bl	8006b58 <lsm6dso_write_reg>
 8007580:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007596:	2102      	movs	r1, #2
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff ff35 	bl	8007408 <lsm6dso_mem_bank_set>
 800759e:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80075a0:	2302      	movs	r3, #2
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	2146      	movs	r1, #70	; 0x46
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fabe 	bl	8006b28 <lsm6dso_read_reg>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80075b4:	2100      	movs	r1, #0
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff ff26 	bl	8007408 <lsm6dso_mem_bank_set>
 80075bc:	4602      	mov	r2, r0
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  return ret;
 80075c4:	68fb      	ldr	r3, [r7, #12]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80075da:	2102      	movs	r1, #2
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff13 	bl	8007408 <lsm6dso_mem_bank_set>
 80075e2:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <lsm6dso_fsm_data_rate_get+0x1e>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	e03a      	b.n	8007664 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 80075ee:	f107 0208 	add.w	r2, r7, #8
 80075f2:	2301      	movs	r3, #1
 80075f4:	215f      	movs	r1, #95	; 0x5f
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff fa96 	bl	8006b28 <lsm6dso_read_reg>
 80075fc:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d125      	bne.n	8007650 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007604:	7a3b      	ldrb	r3, [r7, #8]
 8007606:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b03      	cmp	r3, #3
 800760e:	d81b      	bhi.n	8007648 <lsm6dso_fsm_data_rate_get+0x78>
 8007610:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <lsm6dso_fsm_data_rate_get+0x48>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007629 	.word	0x08007629
 800761c:	08007631 	.word	0x08007631
 8007620:	08007639 	.word	0x08007639
 8007624:	08007641 	.word	0x08007641
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
      break;
 800762e:	e010      	b.n	8007652 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	701a      	strb	r2, [r3, #0]
      break;
 8007636:	e00c      	b.n	8007652 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2202      	movs	r2, #2
 800763c:	701a      	strb	r2, [r3, #0]
      break;
 800763e:	e008      	b.n	8007652 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2203      	movs	r2, #3
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e004      	b.n	8007652 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e000      	b.n	8007652 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007650:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007652:	2100      	movs	r1, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fed7 	bl	8007408 <lsm6dso_mem_bank_set>
 800765a:	4602      	mov	r2, r0
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  return ret;
 8007662:	68fb      	ldr	r3, [r7, #12]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 800767c:	f04f 33ff 	mov.w	r3, #4294967295
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	e034      	b.n	80076ee <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	7b1a      	ldrb	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a0e      	ldr	r2, [pc, #56]	; (80076f8 <STTS751_RegisterBusIO+0x8c>)
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <STTS751_RegisterBusIO+0x90>)
 80076c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	e002      	b.n	80076ee <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	08007b91 	.word	0x08007b91
 80076fc:	08007bff 	.word	0x08007bff

08007700 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800770e:	2b00      	cmp	r3, #0
 8007710:	d127      	bne.n	8007762 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3320      	adds	r3, #32
 8007716:	2101      	movs	r1, #1
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fc54 	bl	8007fc6 <stts751_pin_event_route_set>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8007724:	f04f 33ff 	mov.w	r3, #4294967295
 8007728:	e020      	b.n	800776c <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007730:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3320      	adds	r3, #32
 8007736:	2103      	movs	r1, #3
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fbb7 	bl	8007eac <stts751_resolution_set>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8007744:	f04f 33ff 	mov.w	r3, #4294967295
 8007748:	e010      	b.n	800776c <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3320      	adds	r3, #32
 800774e:	2180      	movs	r1, #128	; 0x80
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fad5 	bl	8007d00 <stts751_temp_data_rate_set>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 800775c:	f04f 33ff 	mov.w	r3, #4294967295
 8007760:	e004      	b.n	800776c <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007782:	2b01      	cmp	r3, #1
 8007784:	d108      	bne.n	8007798 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f877 	bl	800787a <STTS751_TEMP_Disable>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007792:	f04f 33ff 	mov.w	r3, #4294967295
 8007796:	e004      	b.n	80077a2 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3320      	adds	r3, #32
 80077b8:	f107 020c 	add.w	r2, r7, #12
 80077bc:	4611      	mov	r1, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fc27 	bl	8008012 <stts751_device_id_get>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	e003      	b.n	80077d8 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 80077d0:	7b7a      	ldrb	r2, [r7, #13]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2201      	movs	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007816:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	e012      	b.n	8007872 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007852:	eeb0 0a67 	vmov.f32	s0, s15
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8b6 	bl	80079c8 <STTS751_TEMP_SetOutputDataRate>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8007862:	f04f 33ff 	mov.w	r3, #4294967295
 8007866:	e004      	b.n	8007872 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	e01c      	b.n	80078ca <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3334      	adds	r3, #52	; 0x34
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f81c 	bl	80078d4 <STTS751_TEMP_GetOutputDataRate>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295
 80078a6:	e010      	b.n	80078ca <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3320      	adds	r3, #32
 80078ac:	2180      	movs	r1, #128	; 0x80
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fa26 	bl	8007d00 <stts751_temp_data_rate_set>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295
 80078be:	e004      	b.n	80078ca <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3320      	adds	r3, #32
 80078e6:	f107 020b 	add.w	r2, r7, #11
 80078ea:	4611      	mov	r1, r2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fa5d 	bl	8007dac <stts751_temp_data_rate_get>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	e060      	b.n	80079c0 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	2b90      	cmp	r3, #144	; 0x90
 8007902:	d021      	beq.n	8007948 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007904:	2b90      	cmp	r3, #144	; 0x90
 8007906:	dc56      	bgt.n	80079b6 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007908:	2b09      	cmp	r3, #9
 800790a:	dc1b      	bgt.n	8007944 <STTS751_TEMP_GetOutputDataRate+0x70>
 800790c:	2b00      	cmp	r3, #0
 800790e:	db52      	blt.n	80079b6 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007910:	2b09      	cmp	r3, #9
 8007912:	d850      	bhi.n	80079b6 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007914:	a201      	add	r2, pc, #4	; (adr r2, 800791c <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791a:	bf00      	nop
 800791c:	08007953 	.word	0x08007953
 8007920:	0800795d 	.word	0x0800795d
 8007924:	08007967 	.word	0x08007967
 8007928:	08007971 	.word	0x08007971
 800792c:	0800797b 	.word	0x0800797b
 8007930:	08007985 	.word	0x08007985
 8007934:	0800798f 	.word	0x0800798f
 8007938:	08007999 	.word	0x08007999
 800793c:	080079a3 	.word	0x080079a3
 8007940:	080079ad 	.word	0x080079ad
 8007944:	2b80      	cmp	r3, #128	; 0x80
 8007946:	d136      	bne.n	80079b6 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
      break;
 8007950:	e035      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8007958:	601a      	str	r2, [r3, #0]
      break;
 800795a:	e030      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8007962:	601a      	str	r2, [r3, #0]
      break;
 8007964:	e02b      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800796c:	601a      	str	r2, [r3, #0]
      break;
 800796e:	e026      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007976:	601a      	str	r2, [r3, #0]
      break;
 8007978:	e021      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007980:	601a      	str	r2, [r3, #0]
      break;
 8007982:	e01c      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800798a:	601a      	str	r2, [r3, #0]
      break;
 800798c:	e017      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007994:	601a      	str	r2, [r3, #0]
      break;
 8007996:	e012      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800799e:	601a      	str	r2, [r3, #0]
      break;
 80079a0:	e00d      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80079a8:	601a      	str	r2, [r3, #0]
      break;
 80079aa:	e008      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80079b2:	601a      	str	r2, [r3, #0]
      break;
 80079b4:	e003      	b.n	80079be <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 80079b6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ba:	60fb      	str	r3, [r7, #12]
      break;
 80079bc:	bf00      	nop
  }

  return ret;
 80079be:	68fb      	ldr	r3, [r7, #12]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3320      	adds	r3, #32
 80079d8:	f107 020e 	add.w	r2, r7, #14
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fa8a 	bl	8007ef8 <stts751_resolution_get>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 80079ea:	f04f 33ff 	mov.w	r3, #4294967295
 80079ee:	e0a5      	b.n	8007b3c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80079f0:	edd7 7a00 	vldr	s15, [r7]
 80079f4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80079f8:	eef4 7a47 	vcmp.f32	s15, s14
 80079fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a00:	d10e      	bne.n	8007a20 <STTS751_TEMP_SetOutputDataRate+0x58>
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d10b      	bne.n	8007a20 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3320      	adds	r3, #32
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fa4c 	bl	8007eac <stts751_resolution_set>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1e:	e08d      	b.n	8007b3c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8007a20:	edd7 7a00 	vldr	s15, [r7]
 8007a24:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007b44 <STTS751_TEMP_SetOutputDataRate+0x17c>
 8007a28:	eef4 7a47 	vcmp.f32	s15, s14
 8007a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a30:	d111      	bne.n	8007a56 <STTS751_TEMP_SetOutputDataRate+0x8e>
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d002      	beq.n	8007a3e <STTS751_TEMP_SetOutputDataRate+0x76>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10b      	bne.n	8007a56 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3320      	adds	r3, #32
 8007a42:	2100      	movs	r1, #0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fa31 	bl	8007eac <stts751_resolution_set>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295
 8007a54:	e072      	b.n	8007b3c <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8007a56:	edd7 7a00 	vldr	s15, [r7]
 8007a5a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007b48 <STTS751_TEMP_SetOutputDataRate+0x180>
 8007a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a66:	d801      	bhi.n	8007a6c <STTS751_TEMP_SetOutputDataRate+0xa4>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e058      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007a6c:	edd7 7a00 	vldr	s15, [r7]
 8007a70:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8007a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7c:	d801      	bhi.n	8007a82 <STTS751_TEMP_SetOutputDataRate+0xba>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e04d      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007a82:	edd7 7a00 	vldr	s15, [r7]
 8007a86:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a92:	d801      	bhi.n	8007a98 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e042      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007a98:	edd7 7a00 	vldr	s15, [r7]
 8007a9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa8:	d801      	bhi.n	8007aae <STTS751_TEMP_SetOutputDataRate+0xe6>
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e037      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007aae:	edd7 7a00 	vldr	s15, [r7]
 8007ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abe:	d801      	bhi.n	8007ac4 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	e02c      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007ac4:	edd7 7a00 	vldr	s15, [r7]
 8007ac8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad4:	d801      	bhi.n	8007ada <STTS751_TEMP_SetOutputDataRate+0x112>
 8007ad6:	2305      	movs	r3, #5
 8007ad8:	e021      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007ada:	edd7 7a00 	vldr	s15, [r7]
 8007ade:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aea:	d801      	bhi.n	8007af0 <STTS751_TEMP_SetOutputDataRate+0x128>
 8007aec:	2306      	movs	r3, #6
 8007aee:	e016      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007af0:	edd7 7a00 	vldr	s15, [r7]
 8007af4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b00:	d801      	bhi.n	8007b06 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8007b02:	2307      	movs	r3, #7
 8007b04:	e00b      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007b06:	edd7 7a00 	vldr	s15, [r7]
 8007b0a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b16:	d801      	bhi.n	8007b1c <STTS751_TEMP_SetOutputDataRate+0x154>
 8007b18:	2308      	movs	r3, #8
 8007b1a:	e000      	b.n	8007b1e <STTS751_TEMP_SetOutputDataRate+0x156>
 8007b1c:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8007b1e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3320      	adds	r3, #32
 8007b24:	7bfa      	ldrb	r2, [r7, #15]
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f8e9 	bl	8007d00 <stts751_temp_data_rate_set>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 8007b34:	f04f 33ff 	mov.w	r3, #4294967295
 8007b38:	e000      	b.n	8007b3c <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	42000000 	.word	0x42000000
 8007b48:	3d800000 	.word	0x3d800000

08007b4c <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3320      	adds	r3, #32
 8007b5a:	f107 020e 	add.w	r2, r7, #14
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fa01 	bl	8007f68 <stts751_temperature_raw_get>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8007b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b70:	e00a      	b.n	8007b88 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8007b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f8a8 	bl	8007ccc <stts751_from_lsb_to_celsius>
 8007b7c:	eef0 7a40 	vmov.f32	s15, s0
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007b90:	b590      	push	{r4, r7, lr}
 8007b92:	b089      	sub	sp, #36	; 0x24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	72fb      	strb	r3, [r7, #11]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11f      	bne.n	8007bf4 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	83fb      	strh	r3, [r7, #30]
 8007bb8:	e018      	b.n	8007bec <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	695c      	ldr	r4, [r3, #20]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	7b1b      	ldrb	r3, [r3, #12]
 8007bc2:	b298      	uxth	r0, r3
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	8bfb      	ldrh	r3, [r7, #30]
 8007bca:	4413      	add	r3, r2
 8007bcc:	b299      	uxth	r1, r3
 8007bce:	8bfb      	ldrh	r3, [r7, #30]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	441a      	add	r2, r3
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	47a0      	blx	r4
 8007bd8:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007be0:	f04f 33ff 	mov.w	r3, #4294967295
 8007be4:	e007      	b.n	8007bf6 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007be6:	8bfb      	ldrh	r3, [r7, #30]
 8007be8:	3301      	adds	r3, #1
 8007bea:	83fb      	strh	r3, [r7, #30]
 8007bec:	8bfa      	ldrh	r2, [r7, #30]
 8007bee:	893b      	ldrh	r3, [r7, #8]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d3e2      	bcc.n	8007bba <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3724      	adds	r7, #36	; 0x24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd90      	pop	{r4, r7, pc}

08007bfe <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007bfe:	b590      	push	{r4, r7, lr}
 8007c00:	b089      	sub	sp, #36	; 0x24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	72fb      	strb	r3, [r7, #11]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d11f      	bne.n	8007c62 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8007c22:	2300      	movs	r3, #0
 8007c24:	83fb      	strh	r3, [r7, #30]
 8007c26:	e018      	b.n	8007c5a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	691c      	ldr	r4, [r3, #16]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	7b1b      	ldrb	r3, [r3, #12]
 8007c30:	b298      	uxth	r0, r3
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	8bfb      	ldrh	r3, [r7, #30]
 8007c38:	4413      	add	r3, r2
 8007c3a:	b299      	uxth	r1, r3
 8007c3c:	8bfb      	ldrh	r3, [r7, #30]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	441a      	add	r2, r3
 8007c42:	2301      	movs	r3, #1
 8007c44:	47a0      	blx	r4
 8007c46:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c52:	e007      	b.n	8007c64 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8007c54:	8bfb      	ldrh	r3, [r7, #30]
 8007c56:	3301      	adds	r3, #1
 8007c58:	83fb      	strh	r3, [r7, #30]
 8007c5a:	8bfa      	ldrh	r2, [r7, #30]
 8007c5c:	893b      	ldrh	r3, [r7, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d3e2      	bcc.n	8007c28 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8007c62:	69bb      	ldr	r3, [r7, #24]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3724      	adds	r7, #36	; 0x24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd90      	pop	{r4, r7, pc}

08007c6c <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	461a      	mov	r2, r3
 8007c78:	460b      	mov	r3, r1
 8007c7a:	72fb      	strb	r3, [r7, #11]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685c      	ldr	r4, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68d8      	ldr	r0, [r3, #12]
 8007c88:	893b      	ldrh	r3, [r7, #8]
 8007c8a:	7af9      	ldrb	r1, [r7, #11]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	47a0      	blx	r4
 8007c90:	6178      	str	r0, [r7, #20]

  return ret;
 8007c92:	697b      	ldr	r3, [r7, #20]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd90      	pop	{r4, r7, pc}

08007c9c <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007c9c:	b590      	push	{r4, r7, lr}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	460b      	mov	r3, r1
 8007caa:	72fb      	strb	r3, [r7, #11]
 8007cac:	4613      	mov	r3, r2
 8007cae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681c      	ldr	r4, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68d8      	ldr	r0, [r3, #12]
 8007cb8:	893b      	ldrh	r3, [r7, #8]
 8007cba:	7af9      	ldrb	r1, [r7, #11]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	47a0      	blx	r4
 8007cc0:	6178      	str	r0, [r7, #20]

  return ret;
 8007cc2:	697b      	ldr	r3, [r7, #20]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd90      	pop	{r4, r7, pc}

08007ccc <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8007cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ce2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007cfc <stts751_from_lsb_to_celsius+0x30>
 8007ce6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007cea:	eef0 7a66 	vmov.f32	s15, s13
}
 8007cee:	eeb0 0a67 	vmov.f32	s0, s15
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	43800000 	.word	0x43800000

08007d00 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8007d0c:	23aa      	movs	r3, #170	; 0xaa
 8007d0e:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007d10:	f107 020c 	add.w	r2, r7, #12
 8007d14:	2301      	movs	r3, #1
 8007d16:	2104      	movs	r1, #4
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff ffa7 	bl	8007c6c <stts751_read_reg>
 8007d1e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10f      	bne.n	8007d46 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	7b3b      	ldrb	r3, [r7, #12]
 8007d30:	f362 0303 	bfi	r3, r2, #0, #4
 8007d34:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8007d36:	f107 020c 	add.w	r2, r7, #12
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	2104      	movs	r1, #4
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff ffac 	bl	8007c9c <stts751_write_reg>
 8007d44:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d107      	bne.n	8007d5c <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8007d4c:	f107 0210 	add.w	r2, r7, #16
 8007d50:	2301      	movs	r3, #1
 8007d52:	2103      	movs	r1, #3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ff89 	bl	8007c6c <stts751_read_reg>
 8007d5a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d111      	bne.n	8007d86 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	09db      	lsrs	r3, r3, #7
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	7c3b      	ldrb	r3, [r7, #16]
 8007d70:	f362 1386 	bfi	r3, r2, #6, #1
 8007d74:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8007d76:	f107 0210 	add.w	r2, r7, #16
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	2103      	movs	r1, #3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff ff8c 	bl	8007c9c <stts751_write_reg>
 8007d84:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <stts751_temp_data_rate_set+0xa2>
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	2b90      	cmp	r3, #144	; 0x90
 8007d90:	d107      	bne.n	8007da2 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8007d92:	f107 020b 	add.w	r2, r7, #11
 8007d96:	2301      	movs	r3, #1
 8007d98:	210f      	movs	r1, #15
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff ff7e 	bl	8007c9c <stts751_write_reg>
 8007da0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8007da2:	697b      	ldr	r3, [r7, #20]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8007db6:	f107 0210 	add.w	r2, r7, #16
 8007dba:	2301      	movs	r3, #1
 8007dbc:	2104      	movs	r1, #4
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff ff54 	bl	8007c6c <stts751_read_reg>
 8007dc4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d107      	bne.n	8007ddc <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8007dcc:	f107 020c 	add.w	r2, r7, #12
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	2103      	movs	r1, #3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff ff49 	bl	8007c6c <stts751_read_reg>
 8007dda:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8007ddc:	7b3b      	ldrb	r3, [r7, #12]
 8007dde:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	01db      	lsls	r3, r3, #7
 8007de6:	7c3a      	ldrb	r2, [r7, #16]
 8007de8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	4413      	add	r3, r2
 8007df0:	2b90      	cmp	r3, #144	; 0x90
 8007df2:	d025      	beq.n	8007e40 <stts751_temp_data_rate_get+0x94>
 8007df4:	2b90      	cmp	r3, #144	; 0x90
 8007df6:	dc4f      	bgt.n	8007e98 <stts751_temp_data_rate_get+0xec>
 8007df8:	2b09      	cmp	r3, #9
 8007dfa:	dc1b      	bgt.n	8007e34 <stts751_temp_data_rate_get+0x88>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	db4b      	blt.n	8007e98 <stts751_temp_data_rate_get+0xec>
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d849      	bhi.n	8007e98 <stts751_temp_data_rate_get+0xec>
 8007e04:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <stts751_temp_data_rate_get+0x60>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e49 	.word	0x08007e49
 8007e10:	08007e51 	.word	0x08007e51
 8007e14:	08007e59 	.word	0x08007e59
 8007e18:	08007e61 	.word	0x08007e61
 8007e1c:	08007e69 	.word	0x08007e69
 8007e20:	08007e71 	.word	0x08007e71
 8007e24:	08007e79 	.word	0x08007e79
 8007e28:	08007e81 	.word	0x08007e81
 8007e2c:	08007e89 	.word	0x08007e89
 8007e30:	08007e91 	.word	0x08007e91
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d12f      	bne.n	8007e98 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2280      	movs	r2, #128	; 0x80
 8007e3c:	701a      	strb	r2, [r3, #0]
      break;
 8007e3e:	e02f      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2290      	movs	r2, #144	; 0x90
 8007e44:	701a      	strb	r2, [r3, #0]
      break;
 8007e46:	e02b      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
      break;
 8007e4e:	e027      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2201      	movs	r2, #1
 8007e54:	701a      	strb	r2, [r3, #0]
      break;
 8007e56:	e023      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	701a      	strb	r2, [r3, #0]
      break;
 8007e5e:	e01f      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2203      	movs	r2, #3
 8007e64:	701a      	strb	r2, [r3, #0]
      break;
 8007e66:	e01b      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2204      	movs	r2, #4
 8007e6c:	701a      	strb	r2, [r3, #0]
      break;
 8007e6e:	e017      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2205      	movs	r2, #5
 8007e74:	701a      	strb	r2, [r3, #0]
      break;
 8007e76:	e013      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2206      	movs	r2, #6
 8007e7c:	701a      	strb	r2, [r3, #0]
      break;
 8007e7e:	e00f      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2207      	movs	r2, #7
 8007e84:	701a      	strb	r2, [r3, #0]
      break;
 8007e86:	e00b      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	701a      	strb	r2, [r3, #0]
      break;
 8007e8e:	e007      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2209      	movs	r2, #9
 8007e94:	701a      	strb	r2, [r3, #0]
      break;
 8007e96:	e003      	b.n	8007ea0 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2280      	movs	r2, #128	; 0x80
 8007e9c:	701a      	strb	r2, [r3, #0]
      break;
 8007e9e:	bf00      	nop
  }

  return ret;
 8007ea0:	697b      	ldr	r3, [r7, #20]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop

08007eac <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8007eb8:	f107 0208 	add.w	r2, r7, #8
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	2103      	movs	r1, #3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff fed3 	bl	8007c6c <stts751_read_reg>
 8007ec6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10f      	bne.n	8007eee <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	7a3b      	ldrb	r3, [r7, #8]
 8007ed8:	f362 0383 	bfi	r3, r2, #2, #2
 8007edc:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8007ede:	f107 0208 	add.w	r2, r7, #8
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	2103      	movs	r1, #3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff fed8 	bl	8007c9c <stts751_write_reg>
 8007eec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8007f02:	f107 0208 	add.w	r2, r7, #8
 8007f06:	2301      	movs	r3, #1
 8007f08:	2103      	movs	r1, #3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff feae 	bl	8007c6c <stts751_read_reg>
 8007f10:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8007f12:	7a3b      	ldrb	r3, [r7, #8]
 8007f14:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d81a      	bhi.n	8007f54 <stts751_resolution_get+0x5c>
 8007f1e:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <stts751_resolution_get+0x2c>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f3d 	.word	0x08007f3d
 8007f28:	08007f45 	.word	0x08007f45
 8007f2c:	08007f35 	.word	0x08007f35
 8007f30:	08007f4d 	.word	0x08007f4d
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2202      	movs	r2, #2
 8007f38:	701a      	strb	r2, [r3, #0]
      break;
 8007f3a:	e00f      	b.n	8007f5c <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]
      break;
 8007f42:	e00b      	b.n	8007f5c <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2201      	movs	r2, #1
 8007f48:	701a      	strb	r2, [r3, #0]
      break;
 8007f4a:	e007      	b.n	8007f5c <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	701a      	strb	r2, [r3, #0]
      break;
 8007f52:	e003      	b.n	8007f5c <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2202      	movs	r2, #2
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	bf00      	nop
  }

  return ret;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop

08007f68 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	2301      	movs	r3, #1
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fe75 	bl	8007c6c <stts751_read_reg>
 8007f82:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d118      	bne.n	8007fbc <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8007f8a:	f107 0208 	add.w	r2, r7, #8
 8007f8e:	2301      	movs	r3, #1
 8007f90:	2102      	movs	r1, #2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff fe6a 	bl	8007c6c <stts751_read_reg>
 8007f98:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8007f9a:	7a7b      	ldrb	r3, [r7, #9]
 8007f9c:	b21a      	sxth	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	021b      	lsls	r3, r3, #8
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	7a3b      	ldrb	r3, [r7, #8]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	b21a      	sxth	r2, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8007fd2:	f107 0208 	add.w	r2, r7, #8
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	2103      	movs	r1, #3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff fe46 	bl	8007c6c <stts751_read_reg>
 8007fe0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10f      	bne.n	8008008 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	7a3b      	ldrb	r3, [r7, #8]
 8007ff2:	f362 13c7 	bfi	r3, r2, #7, #1
 8007ff6:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8007ff8:	f107 0208 	add.w	r2, r7, #8
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	2103      	movs	r1, #3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fe4b 	bl	8007c9c <stts751_write_reg>
 8008006:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008008:	68fb      	ldr	r3, [r7, #12]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	2301      	movs	r3, #1
 8008020:	21fd      	movs	r1, #253	; 0xfd
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fe22 	bl	8007c6c <stts751_read_reg>
 8008028:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d107      	bne.n	8008040 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	2301      	movs	r3, #1
 8008036:	21fe      	movs	r1, #254	; 0xfe
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff fe17 	bl	8007c6c <stts751_read_reg>
 800803e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d107      	bne.n	8008056 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	1c9a      	adds	r2, r3, #2
 800804a:	2301      	movs	r3, #1
 800804c:	21ff      	movs	r1, #255	; 0xff
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff fe0c 	bl	8007c6c <stts751_read_reg>
 8008054:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8008056:	68fb      	ldr	r3, [r7, #12]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800806a:	2300      	movs	r3, #0
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800806e:	2301      	movs	r3, #1
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d07c      	beq.n	8008176 <IKS01A3_ENV_SENSOR_Init+0x116>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b02      	cmp	r3, #2
 8008080:	f200 80b2 	bhi.w	80081e8 <IKS01A3_ENV_SENSOR_Init+0x188>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <IKS01A3_ENV_SENSOR_Init+0x32>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d039      	beq.n	8008104 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8008090:	e0aa      	b.n	80081e8 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8008092:	6838      	ldr	r0, [r7, #0]
 8008094:	f000 f9ca 	bl	800842c <HTS221_0_Probe>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	e0df      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80080a4:	4a71      	ldr	r2, [pc, #452]	; (800826c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	4970      	ldr	r1, [pc, #448]	; (8008270 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080b6:	f107 0108 	add.w	r1, r7, #8
 80080ba:	4610      	mov	r0, r2
 80080bc:	4798      	blx	r3
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80080c4:	f06f 0306 	mvn.w	r3, #6
 80080c8:	e0cc      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80080ca:	7a3b      	ldrb	r3, [r7, #8]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d103      	bne.n	80080d8 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	f043 0301 	orr.w	r3, r3, #1
 80080d6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80080d8:	7abb      	ldrb	r3, [r7, #10]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d103      	bne.n	80080e6 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	f043 0304 	orr.w	r3, r3, #4
 80080e4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80080e6:	7a7b      	ldrb	r3, [r7, #9]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d103      	bne.n	80080f4 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	f043 0302 	orr.w	r3, r3, #2
 80080f2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80080f4:	7afb      	ldrb	r3, [r7, #11]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d17a      	bne.n	80081f0 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	f043 0308 	orr.w	r3, r3, #8
 8008100:	623b      	str	r3, [r7, #32]
      }
      break;
 8008102:	e075      	b.n	80081f0 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008104:	6838      	ldr	r0, [r7, #0]
 8008106:	f000 fa5b 	bl	80085c0 <LPS22HH_0_Probe>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8008110:	f04f 33ff 	mov.w	r3, #4294967295
 8008114:	e0a6      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008116:	4a55      	ldr	r2, [pc, #340]	; (800826c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4953      	ldr	r1, [pc, #332]	; (8008270 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008128:	f107 0108 	add.w	r1, r7, #8
 800812c:	4610      	mov	r0, r2
 800812e:	4798      	blx	r3
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008136:	f06f 0306 	mvn.w	r3, #6
 800813a:	e093      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800813c:	7a3b      	ldrb	r3, [r7, #8]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d103      	bne.n	800814a <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800814a:	7abb      	ldrb	r3, [r7, #10]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d103      	bne.n	8008158 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	f043 0304 	orr.w	r3, r3, #4
 8008156:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8008158:	7a7b      	ldrb	r3, [r7, #9]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d103      	bne.n	8008166 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	f043 0302 	orr.w	r3, r3, #2
 8008164:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d143      	bne.n	80081f4 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	f043 0308 	orr.w	r3, r3, #8
 8008172:	623b      	str	r3, [r7, #32]
      }
      break;
 8008174:	e03e      	b.n	80081f4 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8008176:	6838      	ldr	r0, [r7, #0]
 8008178:	f000 faee 	bl	8008758 <STTS751_0_Probe>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8008182:	f04f 33ff 	mov.w	r3, #4294967295
 8008186:	e06d      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008188:	4a38      	ldr	r2, [pc, #224]	; (800826c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	4937      	ldr	r1, [pc, #220]	; (8008270 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800819a:	f107 0108 	add.w	r1, r7, #8
 800819e:	4610      	mov	r0, r2
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80081a8:	f06f 0306 	mvn.w	r3, #6
 80081ac:	e05a      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80081ae:	7a3b      	ldrb	r3, [r7, #8]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d103      	bne.n	80081bc <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	f043 0301 	orr.w	r3, r3, #1
 80081ba:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80081bc:	7abb      	ldrb	r3, [r7, #10]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d103      	bne.n	80081ca <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	f043 0304 	orr.w	r3, r3, #4
 80081c8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80081ca:	7a7b      	ldrb	r3, [r7, #9]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d103      	bne.n	80081d8 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	f043 0302 	orr.w	r3, r3, #2
 80081d6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d10c      	bne.n	80081f8 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	f043 0308 	orr.w	r3, r3, #8
 80081e4:	623b      	str	r3, [r7, #32]
      }
      break;
 80081e6:	e007      	b.n	80081f8 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80081e8:	f06f 0301 	mvn.w	r3, #1
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80081ee:	e004      	b.n	80081fa <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80081f0:	bf00      	nop
 80081f2:	e002      	b.n	80081fa <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80081f4:	bf00      	nop
 80081f6:	e000      	b.n	80081fa <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80081f8:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	e02f      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008204:	2300      	movs	r3, #0
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
 8008208:	e028      	b.n	800825c <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	4013      	ands	r3, r2
 8008210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008212:	429a      	cmp	r2, r3
 8008214:	d11c      	bne.n	8008250 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	4013      	ands	r3, r2
 800821c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800821e:	429a      	cmp	r2, r3
 8008220:	d116      	bne.n	8008250 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008222:	4a14      	ldr	r2, [pc, #80]	; (8008274 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800822a:	4913      	ldr	r1, [pc, #76]	; (8008278 <IKS01A3_ENV_SENSOR_Init+0x218>)
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	4413      	add	r3, r2
 8008232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	490d      	ldr	r1, [pc, #52]	; (8008270 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800824a:	f06f 0304 	mvn.w	r3, #4
 800824e:	e009      	b.n	8008264 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	3301      	adds	r3, #1
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	2b03      	cmp	r3, #3
 8008260:	d9d3      	bls.n	800820a <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008264:	4618      	mov	r0, r3
 8008266:	3730      	adds	r7, #48	; 0x30
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20000264 	.word	0x20000264
 8008270:	20000600 	.word	0x20000600
 8008274:	20000158 	.word	0x20000158
 8008278:	20000234 	.word	0x20000234

0800827c <IKS01A3_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d903      	bls.n	8008294 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800828c:	f06f 0301 	mvn.w	r3, #1
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	e014      	b.n	80082be <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008294:	4a0c      	ldr	r2, [pc, #48]	; (80082c8 <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	490b      	ldr	r1, [pc, #44]	; (80082cc <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80082b2:	f06f 0306 	mvn.w	r3, #6
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	e001      	b.n	80082be <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80082be:	68fb      	ldr	r3, [r7, #12]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000264 	.word	0x20000264
 80082cc:	20000600 	.word	0x20000600

080082d0 <IKS01A3_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d903      	bls.n	80082e8 <IKS01A3_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80082e0:	f06f 0301 	mvn.w	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e014      	b.n	8008312 <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 80082e8:	4a0c      	ldr	r2, [pc, #48]	; (800831c <IKS01A3_ENV_SENSOR_ReadID+0x4c>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	490b      	ldr	r1, [pc, #44]	; (8008320 <IKS01A3_ENV_SENSOR_ReadID+0x50>)
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <IKS01A3_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008306:	f06f 0306 	mvn.w	r3, #6
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	e001      	b.n	8008312 <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008312:	68fb      	ldr	r3, [r7, #12]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000264 	.word	0x20000264
 8008320:	20000600 	.word	0x20000600

08008324 <IKS01A3_ENV_SENSOR_GetOutputDataRate>:
  * @param  Function Environmental sensor function
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d903      	bls.n	800833e <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008336:	f06f 0301 	mvn.w	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	e027      	b.n	800838e <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800833e:	4a16      	ldr	r2, [pc, #88]	; (8008398 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x74>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	4013      	ands	r3, r2
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	429a      	cmp	r2, r3
 800834e:	d11b      	bne.n	8008388 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8008350:	4a12      	ldr	r2, [pc, #72]	; (800839c <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x78>)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	4911      	ldr	r1, [pc, #68]	; (80083a0 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	0092      	lsls	r2, r2, #2
 800835e:	4413      	add	r3, r2
 8008360:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	490f      	ldr	r1, [pc, #60]	; (80083a4 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x80>)
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800837a:	f06f 0304 	mvn.w	r3, #4
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e005      	b.n	800838e <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e002      	b.n	800838e <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008388:	f06f 0301 	mvn.w	r3, #1
 800838c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800838e:	697b      	ldr	r3, [r7, #20]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000270 	.word	0x20000270
 800839c:	20000158 	.word	0x20000158
 80083a0:	20000234 	.word	0x20000234
 80083a4:	20000600 	.word	0x20000600

080083a8 <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d903      	bls.n	80083c2 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80083ba:	f06f 0301 	mvn.w	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e027      	b.n	8008412 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80083c2:	4a16      	ldr	r2, [pc, #88]	; (800841c <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4013      	ands	r3, r2
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d11b      	bne.n	800840c <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80083d4:	4a12      	ldr	r2, [pc, #72]	; (8008420 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083dc:	4911      	ldr	r1, [pc, #68]	; (8008424 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	0092      	lsls	r2, r2, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	490f      	ldr	r1, [pc, #60]	; (8008428 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80083fe:	f06f 0304 	mvn.w	r3, #4
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e005      	b.n	8008412 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	e002      	b.n	8008412 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800840c:	f06f 0301 	mvn.w	r3, #1
 8008410:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008412:	697b      	ldr	r3, [r7, #20]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000270 	.word	0x20000270
 8008420:	20000158 	.word	0x20000158
 8008424:	20000234 	.word	0x20000234
 8008428:	20000600 	.word	0x20000600

0800842c <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b092      	sub	sp, #72	; 0x48
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8008434:	2300      	movs	r3, #0
 8008436:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8008438:	2300      	movs	r3, #0
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800843c:	23bf      	movs	r3, #191	; 0xbf
 800843e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008442:	4b51      	ldr	r3, [pc, #324]	; (8008588 <HTS221_0_Probe+0x15c>)
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008446:	4b51      	ldr	r3, [pc, #324]	; (800858c <HTS221_0_Probe+0x160>)
 8008448:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800844a:	4b51      	ldr	r3, [pc, #324]	; (8008590 <HTS221_0_Probe+0x164>)
 800844c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800844e:	4b51      	ldr	r3, [pc, #324]	; (8008594 <HTS221_0_Probe+0x168>)
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008452:	4b51      	ldr	r3, [pc, #324]	; (8008598 <HTS221_0_Probe+0x16c>)
 8008454:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8008456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800845a:	4619      	mov	r1, r3
 800845c:	484f      	ldr	r0, [pc, #316]	; (800859c <HTS221_0_Probe+0x170>)
 800845e:	f7f9 f93b 	bl	80016d8 <HTS221_RegisterBusIO>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008468:	f06f 0306 	mvn.w	r3, #6
 800846c:	647b      	str	r3, [r7, #68]	; 0x44
 800846e:	e085      	b.n	800857c <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8008470:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008474:	4619      	mov	r1, r3
 8008476:	4849      	ldr	r0, [pc, #292]	; (800859c <HTS221_0_Probe+0x170>)
 8008478:	f7f9 f9b7 	bl	80017ea <HTS221_ReadID>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008482:	f06f 0306 	mvn.w	r3, #6
 8008486:	647b      	str	r3, [r7, #68]	; 0x44
 8008488:	e078      	b.n	800857c <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 800848a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800848e:	2bbc      	cmp	r3, #188	; 0xbc
 8008490:	d003      	beq.n	800849a <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008492:	f06f 0306 	mvn.w	r3, #6
 8008496:	647b      	str	r3, [r7, #68]	; 0x44
 8008498:	e070      	b.n	800857c <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800849a:	f107 0308 	add.w	r3, r7, #8
 800849e:	4619      	mov	r1, r3
 80084a0:	483e      	ldr	r0, [pc, #248]	; (800859c <HTS221_0_Probe+0x170>)
 80084a2:	f7f9 f9b9 	bl	8001818 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80084a6:	7a3b      	ldrb	r3, [r7, #8]
 80084a8:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 80084aa:	7a7b      	ldrb	r3, [r7, #9]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 80084b0:	7abb      	ldrb	r3, [r7, #10]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80084bc:	4a38      	ldr	r2, [pc, #224]	; (80085a0 <HTS221_0_Probe+0x174>)
 80084be:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80084c0:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <HTS221_0_Probe+0x178>)
 80084c2:	4a36      	ldr	r2, [pc, #216]	; (800859c <HTS221_0_Probe+0x170>)
 80084c4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80084c6:	4b38      	ldr	r3, [pc, #224]	; (80085a8 <HTS221_0_Probe+0x17c>)
 80084c8:	4a38      	ldr	r2, [pc, #224]	; (80085ac <HTS221_0_Probe+0x180>)
 80084ca:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80084cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d11d      	bne.n	800850e <HTS221_0_Probe+0xe2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d018      	beq.n	800850e <HTS221_0_Probe+0xe2>
 80084dc:	7a3b      	ldrb	r3, [r7, #8]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d115      	bne.n	800850e <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80084e2:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <HTS221_0_Probe+0x184>)
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	4a33      	ldr	r2, [pc, #204]	; (80085b4 <HTS221_0_Probe+0x188>)
 80084e8:	4933      	ldr	r1, [pc, #204]	; (80085b8 <HTS221_0_Probe+0x18c>)
 80084ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80084ee:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <HTS221_0_Probe+0x17c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a2b      	ldr	r2, [pc, #172]	; (80085a4 <HTS221_0_Probe+0x178>)
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008502:	f06f 0304 	mvn.w	r3, #4
 8008506:	647b      	str	r3, [r7, #68]	; 0x44
 8008508:	e001      	b.n	800850e <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800850a:	2300      	movs	r3, #0
 800850c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800850e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11d      	bne.n	8008550 <HTS221_0_Probe+0x124>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d018      	beq.n	8008550 <HTS221_0_Probe+0x124>
 800851e:	7abb      	ldrb	r3, [r7, #10]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d115      	bne.n	8008550 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8008524:	4b22      	ldr	r3, [pc, #136]	; (80085b0 <HTS221_0_Probe+0x184>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	4a22      	ldr	r2, [pc, #136]	; (80085b4 <HTS221_0_Probe+0x188>)
 800852a:	4924      	ldr	r1, [pc, #144]	; (80085bc <HTS221_0_Probe+0x190>)
 800852c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008530:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <HTS221_0_Probe+0x17c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1b      	ldr	r2, [pc, #108]	; (80085a4 <HTS221_0_Probe+0x178>)
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	4610      	mov	r0, r2
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008544:	f06f 0304 	mvn.w	r3, #4
 8008548:	647b      	str	r3, [r7, #68]	; 0x44
 800854a:	e001      	b.n	8008550 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800854c:	2300      	movs	r3, #0
 800854e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008552:	2b00      	cmp	r3, #0
 8008554:	d107      	bne.n	8008566 <HTS221_0_Probe+0x13a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008560:	f06f 0304 	mvn.w	r3, #4
 8008564:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008568:	2b00      	cmp	r3, #0
 800856a:	d107      	bne.n	800857c <HTS221_0_Probe+0x150>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008576:	f06f 0304 	mvn.w	r3, #4
 800857a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800857c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800857e:	4618      	mov	r0, r3
 8008580:	3748      	adds	r7, #72	; 0x48
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	08001259 	.word	0x08001259
 800858c:	080012bd 	.word	0x080012bd
 8008590:	08001371 	.word	0x08001371
 8008594:	0800130d 	.word	0x0800130d
 8008598:	080013d5 	.word	0x080013d5
 800859c:	2000027c 	.word	0x2000027c
 80085a0:	20000270 	.word	0x20000270
 80085a4:	20000600 	.word	0x20000600
 80085a8:	20000264 	.word	0x20000264
 80085ac:	20000004 	.word	0x20000004
 80085b0:	20000158 	.word	0x20000158
 80085b4:	20000234 	.word	0x20000234
 80085b8:	20000028 	.word	0x20000028
 80085bc:	20000014 	.word	0x20000014

080085c0 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b092      	sub	sp, #72	; 0x48
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80085cc:	2300      	movs	r3, #0
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80085d0:	23bb      	movs	r3, #187	; 0xbb
 80085d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80085d6:	4b52      	ldr	r3, [pc, #328]	; (8008720 <LPS22HH_0_Probe+0x160>)
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80085da:	4b52      	ldr	r3, [pc, #328]	; (8008724 <LPS22HH_0_Probe+0x164>)
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80085de:	4b52      	ldr	r3, [pc, #328]	; (8008728 <LPS22HH_0_Probe+0x168>)
 80085e0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80085e2:	4b52      	ldr	r3, [pc, #328]	; (800872c <LPS22HH_0_Probe+0x16c>)
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80085e6:	4b52      	ldr	r3, [pc, #328]	; (8008730 <LPS22HH_0_Probe+0x170>)
 80085e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80085ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ee:	4619      	mov	r1, r3
 80085f0:	4850      	ldr	r0, [pc, #320]	; (8008734 <LPS22HH_0_Probe+0x174>)
 80085f2:	f7fc f9f5 	bl	80049e0 <LPS22HH_RegisterBusIO>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80085fc:	f06f 0306 	mvn.w	r3, #6
 8008600:	647b      	str	r3, [r7, #68]	; 0x44
 8008602:	e087      	b.n	8008714 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8008604:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008608:	4619      	mov	r1, r3
 800860a:	484a      	ldr	r0, [pc, #296]	; (8008734 <LPS22HH_0_Probe+0x174>)
 800860c:	f7fc fa91 	bl	8004b32 <LPS22HH_ReadID>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008616:	f06f 0306 	mvn.w	r3, #6
 800861a:	647b      	str	r3, [r7, #68]	; 0x44
 800861c:	e07a      	b.n	8008714 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 800861e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008622:	2bb3      	cmp	r3, #179	; 0xb3
 8008624:	d003      	beq.n	800862e <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008626:	f06f 0306 	mvn.w	r3, #6
 800862a:	647b      	str	r3, [r7, #68]	; 0x44
 800862c:	e072      	b.n	8008714 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	4619      	mov	r1, r3
 8008634:	483f      	ldr	r0, [pc, #252]	; (8008734 <LPS22HH_0_Probe+0x174>)
 8008636:	f7fc fa93 	bl	8004b60 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800863a:	7a3b      	ldrb	r3, [r7, #8]
 800863c:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 800863e:	7a7b      	ldrb	r3, [r7, #9]
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8008644:	7abb      	ldrb	r3, [r7, #10]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8008650:	4a39      	ldr	r2, [pc, #228]	; (8008738 <LPS22HH_0_Probe+0x178>)
 8008652:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008654:	4b39      	ldr	r3, [pc, #228]	; (800873c <LPS22HH_0_Probe+0x17c>)
 8008656:	4a37      	ldr	r2, [pc, #220]	; (8008734 <LPS22HH_0_Probe+0x174>)
 8008658:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800865a:	4b39      	ldr	r3, [pc, #228]	; (8008740 <LPS22HH_0_Probe+0x180>)
 800865c:	4a39      	ldr	r2, [pc, #228]	; (8008744 <LPS22HH_0_Probe+0x184>)
 800865e:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008662:	2b00      	cmp	r3, #0
 8008664:	d11e      	bne.n	80086a4 <LPS22HH_0_Probe+0xe4>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d019      	beq.n	80086a4 <LPS22HH_0_Probe+0xe4>
 8008670:	7a3b      	ldrb	r3, [r7, #8]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d116      	bne.n	80086a4 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008676:	4b34      	ldr	r3, [pc, #208]	; (8008748 <LPS22HH_0_Probe+0x188>)
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	4a34      	ldr	r2, [pc, #208]	; (800874c <LPS22HH_0_Probe+0x18c>)
 800867c:	3304      	adds	r3, #4
 800867e:	4934      	ldr	r1, [pc, #208]	; (8008750 <LPS22HH_0_Probe+0x190>)
 8008680:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008684:	4b2e      	ldr	r3, [pc, #184]	; (8008740 <LPS22HH_0_Probe+0x180>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a2c      	ldr	r2, [pc, #176]	; (800873c <LPS22HH_0_Probe+0x17c>)
 800868c:	6852      	ldr	r2, [r2, #4]
 800868e:	4610      	mov	r0, r2
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008698:	f06f 0304 	mvn.w	r3, #4
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
 800869e:	e001      	b.n	80086a4 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80086a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d11e      	bne.n	80086e8 <LPS22HH_0_Probe+0x128>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d019      	beq.n	80086e8 <LPS22HH_0_Probe+0x128>
 80086b4:	7a7b      	ldrb	r3, [r7, #9]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d116      	bne.n	80086e8 <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80086ba:	4b23      	ldr	r3, [pc, #140]	; (8008748 <LPS22HH_0_Probe+0x188>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4a23      	ldr	r2, [pc, #140]	; (800874c <LPS22HH_0_Probe+0x18c>)
 80086c0:	3304      	adds	r3, #4
 80086c2:	4924      	ldr	r1, [pc, #144]	; (8008754 <LPS22HH_0_Probe+0x194>)
 80086c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80086c8:	4b1d      	ldr	r3, [pc, #116]	; (8008740 <LPS22HH_0_Probe+0x180>)
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a1b      	ldr	r2, [pc, #108]	; (800873c <LPS22HH_0_Probe+0x17c>)
 80086d0:	6852      	ldr	r2, [r2, #4]
 80086d2:	4610      	mov	r0, r2
 80086d4:	4798      	blx	r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086dc:	f06f 0304 	mvn.w	r3, #4
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
 80086e2:	e001      	b.n	80086e8 <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80086e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d107      	bne.n	80086fe <LPS22HH_0_Probe+0x13e>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80086f8:	f06f 0304 	mvn.w	r3, #4
 80086fc:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80086fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008700:	2b00      	cmp	r3, #0
 8008702:	d107      	bne.n	8008714 <LPS22HH_0_Probe+0x154>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f003 0308 	and.w	r3, r3, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800870e:	f06f 0304 	mvn.w	r3, #4
 8008712:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008716:	4618      	mov	r0, r3
 8008718:	3748      	adds	r7, #72	; 0x48
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	08001259 	.word	0x08001259
 8008724:	080012bd 	.word	0x080012bd
 8008728:	08001371 	.word	0x08001371
 800872c:	0800130d 	.word	0x0800130d
 8008730:	080013d5 	.word	0x080013d5
 8008734:	200002b0 	.word	0x200002b0
 8008738:	20000270 	.word	0x20000270
 800873c:	20000600 	.word	0x20000600
 8008740:	20000264 	.word	0x20000264
 8008744:	200000a4 	.word	0x200000a4
 8008748:	20000158 	.word	0x20000158
 800874c:	20000234 	.word	0x20000234
 8008750:	200000c8 	.word	0x200000c8
 8008754:	200000b4 	.word	0x200000b4

08008758 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b092      	sub	sp, #72	; 0x48
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008760:	2300      	movs	r3, #0
 8008762:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008764:	2300      	movs	r3, #0
 8008766:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8008768:	2395      	movs	r3, #149	; 0x95
 800876a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 800876e:	4b46      	ldr	r3, [pc, #280]	; (8008888 <STTS751_0_Probe+0x130>)
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008772:	4b46      	ldr	r3, [pc, #280]	; (800888c <STTS751_0_Probe+0x134>)
 8008774:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008776:	4b46      	ldr	r3, [pc, #280]	; (8008890 <STTS751_0_Probe+0x138>)
 8008778:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800877a:	4b46      	ldr	r3, [pc, #280]	; (8008894 <STTS751_0_Probe+0x13c>)
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 800877e:	4b46      	ldr	r3, [pc, #280]	; (8008898 <STTS751_0_Probe+0x140>)
 8008780:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008786:	4619      	mov	r1, r3
 8008788:	4844      	ldr	r0, [pc, #272]	; (800889c <STTS751_0_Probe+0x144>)
 800878a:	f7fe ff6f 	bl	800766c <STTS751_RegisterBusIO>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008794:	f06f 0306 	mvn.w	r3, #6
 8008798:	647b      	str	r3, [r7, #68]	; 0x44
 800879a:	e070      	b.n	800887e <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800879c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80087a0:	4619      	mov	r1, r3
 80087a2:	483e      	ldr	r0, [pc, #248]	; (800889c <STTS751_0_Probe+0x144>)
 80087a4:	f7ff f801 	bl	80077aa <STTS751_ReadID>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087ae:	f06f 0306 	mvn.w	r3, #6
 80087b2:	647b      	str	r3, [r7, #68]	; 0x44
 80087b4:	e063      	b.n	800887e <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 80087b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ba:	2b53      	cmp	r3, #83	; 0x53
 80087bc:	d003      	beq.n	80087c6 <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80087be:	f06f 0306 	mvn.w	r3, #6
 80087c2:	647b      	str	r3, [r7, #68]	; 0x44
 80087c4:	e05b      	b.n	800887e <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4619      	mov	r1, r3
 80087cc:	4833      	ldr	r0, [pc, #204]	; (800889c <STTS751_0_Probe+0x144>)
 80087ce:	f7ff f807 	bl	80077e0 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80087d2:	7a3b      	ldrb	r3, [r7, #8]
 80087d4:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80087d6:	7a7b      	ldrb	r3, [r7, #9]
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80087dc:	7abb      	ldrb	r3, [r7, #10]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80087e8:	4a2d      	ldr	r2, [pc, #180]	; (80088a0 <STTS751_0_Probe+0x148>)
 80087ea:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80087ec:	4b2d      	ldr	r3, [pc, #180]	; (80088a4 <STTS751_0_Probe+0x14c>)
 80087ee:	4a2b      	ldr	r2, [pc, #172]	; (800889c <STTS751_0_Probe+0x144>)
 80087f0:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80087f2:	4b2d      	ldr	r3, [pc, #180]	; (80088a8 <STTS751_0_Probe+0x150>)
 80087f4:	4a2d      	ldr	r2, [pc, #180]	; (80088ac <STTS751_0_Probe+0x154>)
 80087f6:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80087f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d11e      	bne.n	800883c <STTS751_0_Probe+0xe4>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b00      	cmp	r3, #0
 8008806:	d019      	beq.n	800883c <STTS751_0_Probe+0xe4>
 8008808:	7a3b      	ldrb	r3, [r7, #8]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d116      	bne.n	800883c <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800880e:	4b28      	ldr	r3, [pc, #160]	; (80088b0 <STTS751_0_Probe+0x158>)
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	4a28      	ldr	r2, [pc, #160]	; (80088b4 <STTS751_0_Probe+0x15c>)
 8008814:	3308      	adds	r3, #8
 8008816:	4928      	ldr	r1, [pc, #160]	; (80088b8 <STTS751_0_Probe+0x160>)
 8008818:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800881c:	4b22      	ldr	r3, [pc, #136]	; (80088a8 <STTS751_0_Probe+0x150>)
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a20      	ldr	r2, [pc, #128]	; (80088a4 <STTS751_0_Probe+0x14c>)
 8008824:	6892      	ldr	r2, [r2, #8]
 8008826:	4610      	mov	r0, r2
 8008828:	4798      	blx	r3
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008830:	f06f 0304 	mvn.w	r3, #4
 8008834:	647b      	str	r3, [r7, #68]	; 0x44
 8008836:	e001      	b.n	800883c <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008838:	2300      	movs	r3, #0
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800883c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883e:	2b00      	cmp	r3, #0
 8008840:	d107      	bne.n	8008852 <STTS751_0_Probe+0xfa>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800884c:	f06f 0304 	mvn.w	r3, #4
 8008850:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008854:	2b00      	cmp	r3, #0
 8008856:	d107      	bne.n	8008868 <STTS751_0_Probe+0x110>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008862:	f06f 0304 	mvn.w	r3, #4
 8008866:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886a:	2b00      	cmp	r3, #0
 800886c:	d107      	bne.n	800887e <STTS751_0_Probe+0x126>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008878:	f06f 0304 	mvn.w	r3, #4
 800887c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800887e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008880:	4618      	mov	r0, r3
 8008882:	3748      	adds	r7, #72	; 0x48
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	08001259 	.word	0x08001259
 800888c:	080012bd 	.word	0x080012bd
 8008890:	08001371 	.word	0x08001371
 8008894:	0800130d 	.word	0x0800130d
 8008898:	080013d5 	.word	0x080013d5
 800889c:	200002e4 	.word	0x200002e4
 80088a0:	20000270 	.word	0x20000270
 80088a4:	20000600 	.word	0x20000600
 80088a8:	20000264 	.word	0x20000264
 80088ac:	20000134 	.word	0x20000134
 80088b0:	20000158 	.word	0x20000158
 80088b4:	20000234 	.word	0x20000234
 80088b8:	20000144 	.word	0x20000144

080088bc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08e      	sub	sp, #56	; 0x38
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80088ca:	2301      	movs	r3, #1
 80088cc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d06e      	beq.n	80089b6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	f200 809d 	bhi.w	8008a1a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <IKS01A3_MOTION_SENSOR_Init+0x32>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d032      	beq.n	8008952 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80088ec:	e095      	b.n	8008a1a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80088ee:	6838      	ldr	r0, [r7, #0]
 80088f0:	f000 fa00 	bl	8008cf4 <LSM6DSO_0_Probe>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295
 80088fe:	e0cc      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008900:	4a68      	ldr	r2, [pc, #416]	; (8008aa4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	4967      	ldr	r1, [pc, #412]	; (8008aa8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008912:	f107 010c 	add.w	r1, r7, #12
 8008916:	4610      	mov	r0, r2
 8008918:	4798      	blx	r3
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008920:	f06f 0306 	mvn.w	r3, #6
 8008924:	e0b9      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008926:	7b3b      	ldrb	r3, [r7, #12]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d103      	bne.n	8008934 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	f043 0302 	orr.w	r3, r3, #2
 8008932:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008934:	7b7b      	ldrb	r3, [r7, #13]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d103      	bne.n	8008942 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d16c      	bne.n	8008a22 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	f043 0304 	orr.w	r3, r3, #4
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008950:	e067      	b.n	8008a22 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8008952:	6838      	ldr	r0, [r7, #0]
 8008954:	f000 fa8e 	bl	8008e74 <LIS2DW12_0_Probe>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295
 8008962:	e09a      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008964:	4a4f      	ldr	r2, [pc, #316]	; (8008aa4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	494e      	ldr	r1, [pc, #312]	; (8008aa8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008976:	f107 010c 	add.w	r1, r7, #12
 800897a:	4610      	mov	r0, r2
 800897c:	4798      	blx	r3
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008984:	f06f 0306 	mvn.w	r3, #6
 8008988:	e087      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800898a:	7b3b      	ldrb	r3, [r7, #12]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d103      	bne.n	8008998 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	f043 0302 	orr.w	r3, r3, #2
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008998:	7b7b      	ldrb	r3, [r7, #13]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d103      	bne.n	80089a6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	f043 0301 	orr.w	r3, r3, #1
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d13c      	bne.n	8008a26 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	f043 0304 	orr.w	r3, r3, #4
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80089b4:	e037      	b.n	8008a26 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80089b6:	6838      	ldr	r0, [r7, #0]
 80089b8:	f000 fb04 	bl	8008fc4 <LIS2MDL_0_Probe>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80089c2:	f04f 33ff 	mov.w	r3, #4294967295
 80089c6:	e068      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80089c8:	4a36      	ldr	r2, [pc, #216]	; (8008aa4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	4935      	ldr	r1, [pc, #212]	; (8008aa8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80089da:	f107 010c 	add.w	r1, r7, #12
 80089de:	4610      	mov	r0, r2
 80089e0:	4798      	blx	r3
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80089e8:	f06f 0306 	mvn.w	r3, #6
 80089ec:	e055      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80089ee:	7b3b      	ldrb	r3, [r7, #12]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d103      	bne.n	80089fc <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	f043 0302 	orr.w	r3, r3, #2
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80089fc:	7b7b      	ldrb	r3, [r7, #13]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d103      	bne.n	8008a0a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d10c      	bne.n	8008a2a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	f043 0304 	orr.w	r3, r3, #4
 8008a16:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008a18:	e007      	b.n	8008a2a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008a1a:	f06f 0301 	mvn.w	r3, #1
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008a20:	e004      	b.n	8008a2c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008a2a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	e031      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008a36:	2300      	movs	r3, #0
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a3a:	e02a      	b.n	8008a92 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	4013      	ands	r3, r2
 8008a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d11e      	bne.n	8008a86 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8008a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d118      	bne.n	8008a86 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008a54:	4a15      	ldr	r2, [pc, #84]	; (8008aac <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a5c:	4814      	ldr	r0, [pc, #80]	; (8008ab0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4613      	mov	r3, r2
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	4413      	add	r3, r2
 8008a66:	440b      	add	r3, r1
 8008a68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	490e      	ldr	r1, [pc, #56]	; (8008aa8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008a76:	4610      	mov	r0, r2
 8008a78:	4798      	blx	r3
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008a80:	f06f 0304 	mvn.w	r3, #4
 8008a84:	e009      	b.n	8008a9a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	3301      	adds	r3, #1
 8008a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d9d1      	bls.n	8008a3c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3738      	adds	r7, #56	; 0x38
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000340 	.word	0x20000340
 8008aa8:	2000060c 	.word	0x2000060c
 8008aac:	2000017c 	.word	0x2000017c
 8008ab0:	2000031c 	.word	0x2000031c

08008ab4 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d903      	bls.n	8008acc <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008ac4:	f06f 0301 	mvn.w	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e014      	b.n	8008af6 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008acc:	4a0c      	ldr	r2, [pc, #48]	; (8008b00 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	490b      	ldr	r1, [pc, #44]	; (8008b04 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008aea:	f06f 0306 	mvn.w	r3, #6
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e001      	b.n	8008af6 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008af6:	68fb      	ldr	r3, [r7, #12]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000340 	.word	0x20000340
 8008b04:	2000060c 	.word	0x2000060c

08008b08 <IKS01A3_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d903      	bls.n	8008b20 <IKS01A3_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008b18:	f06f 0301 	mvn.w	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	e014      	b.n	8008b4a <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 8008b20:	4a0c      	ldr	r2, [pc, #48]	; (8008b54 <IKS01A3_MOTION_SENSOR_ReadID+0x4c>)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	490b      	ldr	r1, [pc, #44]	; (8008b58 <IKS01A3_MOTION_SENSOR_ReadID+0x50>)
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	4610      	mov	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <IKS01A3_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b3e:	f06f 0306 	mvn.w	r3, #6
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e001      	b.n	8008b4a <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000340 	.word	0x20000340
 8008b58:	2000060c 	.word	0x2000060c

08008b5c <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d903      	bls.n	8008b76 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008b6e:	f06f 0301 	mvn.w	r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e029      	b.n	8008bca <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008b76:	4a17      	ldr	r2, [pc, #92]	; (8008bd4 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	4013      	ands	r3, r2
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d11d      	bne.n	8008bc4 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008b88:	4a13      	ldr	r2, [pc, #76]	; (8008bd8 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008b90:	4812      	ldr	r0, [pc, #72]	; (8008bdc <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4613      	mov	r3, r2
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	4413      	add	r3, r2
 8008b9a:	440b      	add	r3, r1
 8008b9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	490f      	ldr	r1, [pc, #60]	; (8008be0 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bb6:	f06f 0304 	mvn.w	r3, #4
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	e005      	b.n	8008bca <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e002      	b.n	8008bca <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008bc4:	f06f 0301 	mvn.w	r3, #1
 8008bc8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008bca:	697b      	ldr	r3, [r7, #20]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	2000034c 	.word	0x2000034c
 8008bd8:	2000017c 	.word	0x2000017c
 8008bdc:	2000031c 	.word	0x2000031c
 8008be0:	2000060c 	.word	0x2000060c

08008be4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d903      	bls.n	8008bfe <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008bf6:	f06f 0301 	mvn.w	r3, #1
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	e029      	b.n	8008c52 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008bfe:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x78>)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	4013      	ands	r3, r2
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d11d      	bne.n	8008c4c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8008c10:	4a13      	ldr	r2, [pc, #76]	; (8008c60 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c18:	4812      	ldr	r0, [pc, #72]	; (8008c64 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x80>)
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	4413      	add	r3, r2
 8008c22:	440b      	add	r3, r1
 8008c24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	490f      	ldr	r1, [pc, #60]	; (8008c68 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x84>)
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c3e:	f06f 0304 	mvn.w	r3, #4
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e005      	b.n	8008c52 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	e002      	b.n	8008c52 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008c4c:	f06f 0301 	mvn.w	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008c52:	697b      	ldr	r3, [r7, #20]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	2000034c 	.word	0x2000034c
 8008c60:	2000017c 	.word	0x2000017c
 8008c64:	2000031c 	.word	0x2000031c
 8008c68:	2000060c 	.word	0x2000060c

08008c6c <IKS01A3_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d903      	bls.n	8008c86 <IKS01A3_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008c7e:	f06f 0301 	mvn.w	r3, #1
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	e029      	b.n	8008cda <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008c86:	4a17      	ldr	r2, [pc, #92]	; (8008ce4 <IKS01A3_MOTION_SENSOR_GetFullScale+0x78>)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4013      	ands	r3, r2
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d11d      	bne.n	8008cd4 <IKS01A3_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8008c98:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <IKS01A3_MOTION_SENSOR_GetFullScale+0x7c>)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ca0:	4812      	ldr	r0, [pc, #72]	; (8008cec <IKS01A3_MOTION_SENSOR_GetFullScale+0x80>)
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	4413      	add	r3, r2
 8008caa:	440b      	add	r3, r1
 8008cac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	490f      	ldr	r1, [pc, #60]	; (8008cf0 <IKS01A3_MOTION_SENSOR_GetFullScale+0x84>)
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <IKS01A3_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cc6:	f06f 0304 	mvn.w	r3, #4
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e005      	b.n	8008cda <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	e002      	b.n	8008cda <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008cd4:	f06f 0301 	mvn.w	r3, #1
 8008cd8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008cda:	697b      	ldr	r3, [r7, #20]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	2000034c 	.word	0x2000034c
 8008ce8:	2000017c 	.word	0x2000017c
 8008cec:	2000031c 	.word	0x2000031c
 8008cf0:	2000060c 	.word	0x2000060c

08008cf4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b094      	sub	sp, #80	; 0x50
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8008d00:	2300      	movs	r3, #0
 8008d02:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8008d04:	23d7      	movs	r3, #215	; 0xd7
 8008d06:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008d0a:	4b4b      	ldr	r3, [pc, #300]	; (8008e38 <LSM6DSO_0_Probe+0x144>)
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008d0e:	4b4b      	ldr	r3, [pc, #300]	; (8008e3c <LSM6DSO_0_Probe+0x148>)
 8008d10:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008d12:	4b4b      	ldr	r3, [pc, #300]	; (8008e40 <LSM6DSO_0_Probe+0x14c>)
 8008d14:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008d16:	4b4b      	ldr	r3, [pc, #300]	; (8008e44 <LSM6DSO_0_Probe+0x150>)
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008d1a:	4b4b      	ldr	r3, [pc, #300]	; (8008e48 <LSM6DSO_0_Probe+0x154>)
 8008d1c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8008d1e:	4b4b      	ldr	r3, [pc, #300]	; (8008e4c <LSM6DSO_0_Probe+0x158>)
 8008d20:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8008d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d26:	4619      	mov	r1, r3
 8008d28:	4849      	ldr	r0, [pc, #292]	; (8008e50 <LSM6DSO_0_Probe+0x15c>)
 8008d2a:	f7fc fcbf 	bl	80056ac <LSM6DSO_RegisterBusIO>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d34:	f06f 0306 	mvn.w	r3, #6
 8008d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d3a:	e077      	b.n	8008e2c <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8008d3c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008d40:	4619      	mov	r1, r3
 8008d42:	4843      	ldr	r0, [pc, #268]	; (8008e50 <LSM6DSO_0_Probe+0x15c>)
 8008d44:	f7fc fdbc 	bl	80058c0 <LSM6DSO_ReadID>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d4e:	f06f 0306 	mvn.w	r3, #6
 8008d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d54:	e06a      	b.n	8008e2c <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8008d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d5a:	2b6c      	cmp	r3, #108	; 0x6c
 8008d5c:	d003      	beq.n	8008d66 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d5e:	f06f 0306 	mvn.w	r3, #6
 8008d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d64:	e062      	b.n	8008e2c <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8008d66:	f107 030c 	add.w	r3, r7, #12
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4838      	ldr	r0, [pc, #224]	; (8008e50 <LSM6DSO_0_Probe+0x15c>)
 8008d6e:	f7fc fdbd 	bl	80058ec <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008d72:	7b7b      	ldrb	r3, [r7, #13]
 8008d74:	461a      	mov	r2, r3
 8008d76:	7b3b      	ldrb	r3, [r7, #12]
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4313      	orrs	r3, r2
 8008d82:	4a34      	ldr	r2, [pc, #208]	; (8008e54 <LSM6DSO_0_Probe+0x160>)
 8008d84:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8008d86:	4b34      	ldr	r3, [pc, #208]	; (8008e58 <LSM6DSO_0_Probe+0x164>)
 8008d88:	4a31      	ldr	r2, [pc, #196]	; (8008e50 <LSM6DSO_0_Probe+0x15c>)
 8008d8a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008d8c:	4b33      	ldr	r3, [pc, #204]	; (8008e5c <LSM6DSO_0_Probe+0x168>)
 8008d8e:	4a34      	ldr	r2, [pc, #208]	; (8008e60 <LSM6DSO_0_Probe+0x16c>)
 8008d90:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11d      	bne.n	8008dd4 <LSM6DSO_0_Probe+0xe0>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d018      	beq.n	8008dd4 <LSM6DSO_0_Probe+0xe0>
 8008da2:	7b7b      	ldrb	r3, [r7, #13]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d115      	bne.n	8008dd4 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008da8:	4b2e      	ldr	r3, [pc, #184]	; (8008e64 <LSM6DSO_0_Probe+0x170>)
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	4a2e      	ldr	r2, [pc, #184]	; (8008e68 <LSM6DSO_0_Probe+0x174>)
 8008dae:	492f      	ldr	r1, [pc, #188]	; (8008e6c <LSM6DSO_0_Probe+0x178>)
 8008db0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008db4:	4b29      	ldr	r3, [pc, #164]	; (8008e5c <LSM6DSO_0_Probe+0x168>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a27      	ldr	r2, [pc, #156]	; (8008e58 <LSM6DSO_0_Probe+0x164>)
 8008dbc:	6812      	ldr	r2, [r2, #0]
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4798      	blx	r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008dc8:	f06f 0304 	mvn.w	r3, #4
 8008dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dce:	e001      	b.n	8008dd4 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d11d      	bne.n	8008e16 <LSM6DSO_0_Probe+0x122>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f003 0302 	and.w	r3, r3, #2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d018      	beq.n	8008e16 <LSM6DSO_0_Probe+0x122>
 8008de4:	7b3b      	ldrb	r3, [r7, #12]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d115      	bne.n	8008e16 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008dea:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <LSM6DSO_0_Probe+0x170>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <LSM6DSO_0_Probe+0x174>)
 8008df0:	491f      	ldr	r1, [pc, #124]	; (8008e70 <LSM6DSO_0_Probe+0x17c>)
 8008df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008df6:	4b19      	ldr	r3, [pc, #100]	; (8008e5c <LSM6DSO_0_Probe+0x168>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <LSM6DSO_0_Probe+0x164>)
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e0a:	f06f 0304 	mvn.w	r3, #4
 8008e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e10:	e001      	b.n	8008e16 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d107      	bne.n	8008e2c <LSM6DSO_0_Probe+0x138>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f003 0304 	and.w	r3, r3, #4
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e26:	f06f 0304 	mvn.w	r3, #4
 8008e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8008e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3750      	adds	r7, #80	; 0x50
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	08001259 	.word	0x08001259
 8008e3c:	080012bd 	.word	0x080012bd
 8008e40:	08001371 	.word	0x08001371
 8008e44:	0800130d 	.word	0x0800130d
 8008e48:	080013d5 	.word	0x080013d5
 8008e4c:	080095ad 	.word	0x080095ad
 8008e50:	20000358 	.word	0x20000358
 8008e54:	2000034c 	.word	0x2000034c
 8008e58:	2000060c 	.word	0x2000060c
 8008e5c:	20000340 	.word	0x20000340
 8008e60:	200000dc 	.word	0x200000dc
 8008e64:	2000017c 	.word	0x2000017c
 8008e68:	2000031c 	.word	0x2000031c
 8008e6c:	20000110 	.word	0x20000110
 8008e70:	200000ec 	.word	0x200000ec

08008e74 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b094      	sub	sp, #80	; 0x50
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008e80:	2300      	movs	r3, #0
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008e84:	2333      	movs	r3, #51	; 0x33
 8008e86:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008e8a:	4b40      	ldr	r3, [pc, #256]	; (8008f8c <LIS2DW12_0_Probe+0x118>)
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008e8e:	4b40      	ldr	r3, [pc, #256]	; (8008f90 <LIS2DW12_0_Probe+0x11c>)
 8008e90:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008e92:	4b40      	ldr	r3, [pc, #256]	; (8008f94 <LIS2DW12_0_Probe+0x120>)
 8008e94:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008e96:	4b40      	ldr	r3, [pc, #256]	; (8008f98 <LIS2DW12_0_Probe+0x124>)
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008e9a:	4b40      	ldr	r3, [pc, #256]	; (8008f9c <LIS2DW12_0_Probe+0x128>)
 8008e9c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8008e9e:	4b40      	ldr	r3, [pc, #256]	; (8008fa0 <LIS2DW12_0_Probe+0x12c>)
 8008ea0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	483e      	ldr	r0, [pc, #248]	; (8008fa4 <LIS2DW12_0_Probe+0x130>)
 8008eaa:	f7f9 fa3f 	bl	800232c <LIS2DW12_RegisterBusIO>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008eb4:	f06f 0306 	mvn.w	r3, #6
 8008eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eba:	e062      	b.n	8008f82 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008ebc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4838      	ldr	r0, [pc, #224]	; (8008fa4 <LIS2DW12_0_Probe+0x130>)
 8008ec4:	f7f9 fb20 	bl	8002508 <LIS2DW12_ReadID>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ece:	f06f 0306 	mvn.w	r3, #6
 8008ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed4:	e055      	b.n	8008f82 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8008ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eda:	2b44      	cmp	r3, #68	; 0x44
 8008edc:	d003      	beq.n	8008ee6 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ede:	f06f 0306 	mvn.w	r3, #6
 8008ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee4:	e04d      	b.n	8008f82 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008ee6:	f107 030c 	add.w	r3, r7, #12
 8008eea:	4619      	mov	r1, r3
 8008eec:	482d      	ldr	r0, [pc, #180]	; (8008fa4 <LIS2DW12_0_Probe+0x130>)
 8008eee:	f7f9 fb21 	bl	8002534 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008ef2:	7b7b      	ldrb	r3, [r7, #13]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	7b3b      	ldrb	r3, [r7, #12]
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	431a      	orrs	r2, r3
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4313      	orrs	r3, r2
 8008f02:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <LIS2DW12_0_Probe+0x134>)
 8008f04:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008f06:	4b29      	ldr	r3, [pc, #164]	; (8008fac <LIS2DW12_0_Probe+0x138>)
 8008f08:	4a26      	ldr	r2, [pc, #152]	; (8008fa4 <LIS2DW12_0_Probe+0x130>)
 8008f0a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8008f0c:	4b28      	ldr	r3, [pc, #160]	; (8008fb0 <LIS2DW12_0_Probe+0x13c>)
 8008f0e:	4a29      	ldr	r2, [pc, #164]	; (8008fb4 <LIS2DW12_0_Probe+0x140>)
 8008f10:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11e      	bne.n	8008f56 <LIS2DW12_0_Probe+0xe2>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d019      	beq.n	8008f56 <LIS2DW12_0_Probe+0xe2>
 8008f22:	7b3b      	ldrb	r3, [r7, #12]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d116      	bne.n	8008f56 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008f28:	4b23      	ldr	r3, [pc, #140]	; (8008fb8 <LIS2DW12_0_Probe+0x144>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	4a23      	ldr	r2, [pc, #140]	; (8008fbc <LIS2DW12_0_Probe+0x148>)
 8008f2e:	3303      	adds	r3, #3
 8008f30:	4923      	ldr	r1, [pc, #140]	; (8008fc0 <LIS2DW12_0_Probe+0x14c>)
 8008f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8008f36:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <LIS2DW12_0_Probe+0x13c>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <LIS2DW12_0_Probe+0x138>)
 8008f3e:	6852      	ldr	r2, [r2, #4]
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f4a:	f06f 0304 	mvn.w	r3, #4
 8008f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f50:	e001      	b.n	8008f56 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d107      	bne.n	8008f6c <LIS2DW12_0_Probe+0xf8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f66:	f06f 0304 	mvn.w	r3, #4
 8008f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d107      	bne.n	8008f82 <LIS2DW12_0_Probe+0x10e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f7c:	f06f 0304 	mvn.w	r3, #4
 8008f80:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8008f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3750      	adds	r7, #80	; 0x50
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	08001259 	.word	0x08001259
 8008f90:	080012bd 	.word	0x080012bd
 8008f94:	08001371 	.word	0x08001371
 8008f98:	0800130d 	.word	0x0800130d
 8008f9c:	080013d5 	.word	0x080013d5
 8008fa0:	080095ad 	.word	0x080095ad
 8008fa4:	20000390 	.word	0x20000390
 8008fa8:	2000034c 	.word	0x2000034c
 8008fac:	2000060c 	.word	0x2000060c
 8008fb0:	20000340 	.word	0x20000340
 8008fb4:	2000003c 	.word	0x2000003c
 8008fb8:	2000017c 	.word	0x2000017c
 8008fbc:	2000031c 	.word	0x2000031c
 8008fc0:	2000004c 	.word	0x2000004c

08008fc4 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b094      	sub	sp, #80	; 0x50
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008fd4:	233d      	movs	r3, #61	; 0x3d
 8008fd6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008fda:	4b40      	ldr	r3, [pc, #256]	; (80090dc <LIS2MDL_0_Probe+0x118>)
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008fde:	4b40      	ldr	r3, [pc, #256]	; (80090e0 <LIS2MDL_0_Probe+0x11c>)
 8008fe0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008fe2:	4b40      	ldr	r3, [pc, #256]	; (80090e4 <LIS2MDL_0_Probe+0x120>)
 8008fe4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008fe6:	4b40      	ldr	r3, [pc, #256]	; (80090e8 <LIS2MDL_0_Probe+0x124>)
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008fea:	4b40      	ldr	r3, [pc, #256]	; (80090ec <LIS2MDL_0_Probe+0x128>)
 8008fec:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8008fee:	4b40      	ldr	r3, [pc, #256]	; (80090f0 <LIS2MDL_0_Probe+0x12c>)
 8008ff0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8008ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	483e      	ldr	r0, [pc, #248]	; (80090f4 <LIS2MDL_0_Probe+0x130>)
 8008ffa:	f7fa fceb 	bl	80039d4 <LIS2MDL_RegisterBusIO>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009004:	f06f 0306 	mvn.w	r3, #6
 8009008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800900a:	e062      	b.n	80090d2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800900c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009010:	4619      	mov	r1, r3
 8009012:	4838      	ldr	r0, [pc, #224]	; (80090f4 <LIS2MDL_0_Probe+0x130>)
 8009014:	f7fa fdfa 	bl	8003c0c <LIS2MDL_ReadID>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800901e:	f06f 0306 	mvn.w	r3, #6
 8009022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009024:	e055      	b.n	80090d2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8009026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800902a:	2b40      	cmp	r3, #64	; 0x40
 800902c:	d003      	beq.n	8009036 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800902e:	f06f 0306 	mvn.w	r3, #6
 8009032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009034:	e04d      	b.n	80090d2 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009036:	f107 030c 	add.w	r3, r7, #12
 800903a:	4619      	mov	r1, r3
 800903c:	482d      	ldr	r0, [pc, #180]	; (80090f4 <LIS2MDL_0_Probe+0x130>)
 800903e:	f7fa fe0b 	bl	8003c58 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009042:	7b7b      	ldrb	r3, [r7, #13]
 8009044:	461a      	mov	r2, r3
 8009046:	7b3b      	ldrb	r3, [r7, #12]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	431a      	orrs	r2, r3
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4313      	orrs	r3, r2
 8009052:	4a29      	ldr	r2, [pc, #164]	; (80090f8 <LIS2MDL_0_Probe+0x134>)
 8009054:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009056:	4b29      	ldr	r3, [pc, #164]	; (80090fc <LIS2MDL_0_Probe+0x138>)
 8009058:	4a26      	ldr	r2, [pc, #152]	; (80090f4 <LIS2MDL_0_Probe+0x130>)
 800905a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800905c:	4b28      	ldr	r3, [pc, #160]	; (8009100 <LIS2MDL_0_Probe+0x13c>)
 800905e:	4a29      	ldr	r2, [pc, #164]	; (8009104 <LIS2MDL_0_Probe+0x140>)
 8009060:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11e      	bne.n	80090a6 <LIS2MDL_0_Probe+0xe2>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	d019      	beq.n	80090a6 <LIS2MDL_0_Probe+0xe2>
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d116      	bne.n	80090a6 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009078:	4b23      	ldr	r3, [pc, #140]	; (8009108 <LIS2MDL_0_Probe+0x144>)
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	4a23      	ldr	r2, [pc, #140]	; (800910c <LIS2MDL_0_Probe+0x148>)
 800907e:	3306      	adds	r3, #6
 8009080:	4923      	ldr	r1, [pc, #140]	; (8009110 <LIS2MDL_0_Probe+0x14c>)
 8009082:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009086:	4b1e      	ldr	r3, [pc, #120]	; (8009100 <LIS2MDL_0_Probe+0x13c>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a1b      	ldr	r2, [pc, #108]	; (80090fc <LIS2MDL_0_Probe+0x138>)
 800908e:	6892      	ldr	r2, [r2, #8]
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800909a:	f06f 0304 	mvn.w	r3, #4
 800909e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090a0:	e001      	b.n	80090a6 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80090a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d107      	bne.n	80090bc <LIS2MDL_0_Probe+0xf8>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80090b6:	f06f 0304 	mvn.w	r3, #4
 80090ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80090bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d107      	bne.n	80090d2 <LIS2MDL_0_Probe+0x10e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80090cc:	f06f 0304 	mvn.w	r3, #4
 80090d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80090d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3750      	adds	r7, #80	; 0x50
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	08001259 	.word	0x08001259
 80090e0:	080012bd 	.word	0x080012bd
 80090e4:	08001371 	.word	0x08001371
 80090e8:	0800130d 	.word	0x0800130d
 80090ec:	080013d5 	.word	0x080013d5
 80090f0:	080095ad 	.word	0x080095ad
 80090f4:	200003cc 	.word	0x200003cc
 80090f8:	2000034c 	.word	0x2000034c
 80090fc:	2000060c 	.word	0x2000060c
 8009100:	20000340 	.word	0x20000340
 8009104:	20000070 	.word	0x20000070
 8009108:	2000017c 	.word	0x2000017c
 800910c:	2000031c 	.word	0x2000031c
 8009110:	20000080 	.word	0x20000080

08009114 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	4a04      	ldr	r2, [pc, #16]	; (8009134 <BSP_LED_Init+0x20>)
 8009122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009126:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	0800f214 	.word	0x0800f214

08009138 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
 8009142:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <LED_USER_GPIO_Init+0x7c>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	4a1b      	ldr	r2, [pc, #108]	; (80091b4 <LED_USER_GPIO_Init+0x7c>)
 8009148:	f043 0301 	orr.w	r3, r3, #1
 800914c:	6313      	str	r3, [r2, #48]	; 0x30
 800914e:	4b19      	ldr	r3, [pc, #100]	; (80091b4 <LED_USER_GPIO_Init+0x7c>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	60bb      	str	r3, [r7, #8]
 8009158:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800915a:	f107 030c 	add.w	r3, r7, #12
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	609a      	str	r2, [r3, #8]
 8009166:	60da      	str	r2, [r3, #12]
 8009168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <LED_USER_GPIO_Init+0x7c>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	4a10      	ldr	r2, [pc, #64]	; (80091b4 <LED_USER_GPIO_Init+0x7c>)
 8009174:	f043 0301 	orr.w	r3, r3, #1
 8009178:	6313      	str	r3, [r2, #48]	; 0x30
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <LED_USER_GPIO_Init+0x7c>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	607b      	str	r3, [r7, #4]
 8009184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8009186:	2200      	movs	r2, #0
 8009188:	2120      	movs	r1, #32
 800918a:	480b      	ldr	r0, [pc, #44]	; (80091b8 <LED_USER_GPIO_Init+0x80>)
 800918c:	f000 fe16 	bl	8009dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8009190:	2320      	movs	r3, #32
 8009192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009194:	2301      	movs	r3, #1
 8009196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009198:	2300      	movs	r3, #0
 800919a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800919c:	2300      	movs	r3, #0
 800919e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80091a0:	f107 030c 	add.w	r3, r7, #12
 80091a4:	4619      	mov	r1, r3
 80091a6:	4804      	ldr	r0, [pc, #16]	; (80091b8 <LED_USER_GPIO_Init+0x80>)
 80091a8:	f000 fb88 	bl	80098bc <HAL_GPIO_Init>

}
 80091ac:	bf00      	nop
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40023800 	.word	0x40023800
 80091b8:	40020000 	.word	0x40020000

080091bc <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	460a      	mov	r2, r1
 80091c6:	71fb      	strb	r3, [r7, #7]
 80091c8:	4613      	mov	r3, r2
 80091ca:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80091cc:	2300      	movs	r3, #0
 80091ce:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	4a1f      	ldr	r2, [pc, #124]	; (8009250 <BSP_PB_Init+0x94>)
 80091d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80091da:	79bb      	ldrb	r3, [r7, #6]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d132      	bne.n	8009246 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4a1b      	ldr	r2, [pc, #108]	; (8009254 <BSP_PB_Init+0x98>)
 80091e6:	441a      	add	r2, r3
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	491b      	ldr	r1, [pc, #108]	; (8009258 <BSP_PB_Init+0x9c>)
 80091ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80091f0:	4619      	mov	r1, r3
 80091f2:	4610      	mov	r0, r2
 80091f4:	f000 fb29 	bl	800984a <HAL_EXTI_GetHandle>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80091fe:	f06f 0303 	mvn.w	r3, #3
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e01f      	b.n	8009246 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	4a12      	ldr	r2, [pc, #72]	; (8009254 <BSP_PB_Init+0x98>)
 800920c:	1898      	adds	r0, r3, r2
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	4a12      	ldr	r2, [pc, #72]	; (800925c <BSP_PB_Init+0xa0>)
 8009212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009216:	461a      	mov	r2, r3
 8009218:	2100      	movs	r1, #0
 800921a:	f000 fafc 	bl	8009816 <HAL_EXTI_RegisterCallback>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009224:	f06f 0303 	mvn.w	r3, #3
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e00c      	b.n	8009246 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800922c:	2028      	movs	r0, #40	; 0x28
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	4a0b      	ldr	r2, [pc, #44]	; (8009260 <BSP_PB_Init+0xa4>)
 8009232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009236:	2200      	movs	r2, #0
 8009238:	4619      	mov	r1, r3
 800923a:	f000 fab6 	bl	80097aa <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800923e:	2328      	movs	r3, #40	; 0x28
 8009240:	4618      	mov	r0, r3
 8009242:	f000 face 	bl	80097e2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8009246:	68fb      	ldr	r3, [r7, #12]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	0800f218 	.word	0x0800f218
 8009254:	20000194 	.word	0x20000194
 8009258:	0800f21c 	.word	0x0800f21c
 800925c:	0800f220 	.word	0x0800f220
 8009260:	0800f224 	.word	0x0800f224

08009264 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	4a09      	ldr	r2, [pc, #36]	; (8009298 <BSP_PB_GetState+0x34>)
 8009272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f000 fd85 	bl	8009d8c <HAL_GPIO_ReadPin>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	bf0c      	ite	eq
 8009288:	2301      	moveq	r3, #1
 800928a:	2300      	movne	r3, #0
 800928c:	b2db      	uxtb	r3, r3
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000190 	.word	0x20000190

0800929c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80092a0:	2000      	movs	r0, #0
 80092a2:	f002 ff51 	bl	800c148 <BSP_PB_Callback>
}
 80092a6:	bf00      	nop
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <BUTTON_USER_GPIO_Init+0x74>)
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	4a19      	ldr	r2, [pc, #100]	; (8009320 <BUTTON_USER_GPIO_Init+0x74>)
 80092bc:	f043 0304 	orr.w	r3, r3, #4
 80092c0:	6313      	str	r3, [r2, #48]	; 0x30
 80092c2:	4b17      	ldr	r3, [pc, #92]	; (8009320 <BUTTON_USER_GPIO_Init+0x74>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	60bb      	str	r3, [r7, #8]
 80092cc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092ce:	f107 030c 	add.w	r3, r7, #12
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	605a      	str	r2, [r3, #4]
 80092d8:	609a      	str	r2, [r3, #8]
 80092da:	60da      	str	r2, [r3, #12]
 80092dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80092de:	2300      	movs	r3, #0
 80092e0:	607b      	str	r3, [r7, #4]
 80092e2:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <BUTTON_USER_GPIO_Init+0x74>)
 80092e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e6:	4a0e      	ldr	r2, [pc, #56]	; (8009320 <BUTTON_USER_GPIO_Init+0x74>)
 80092e8:	f043 0304 	orr.w	r3, r3, #4
 80092ec:	6313      	str	r3, [r2, #48]	; 0x30
 80092ee:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <BUTTON_USER_GPIO_Init+0x74>)
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	f003 0304 	and.w	r3, r3, #4
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80092fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009300:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800930a:	f107 030c 	add.w	r3, r7, #12
 800930e:	4619      	mov	r1, r3
 8009310:	4804      	ldr	r0, [pc, #16]	; (8009324 <BUTTON_USER_GPIO_Init+0x78>)
 8009312:	f000 fad3 	bl	80098bc <HAL_GPIO_Init>

}
 8009316:	bf00      	nop
 8009318:	3720      	adds	r7, #32
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40023800 	.word	0x40023800
 8009324:	40020800 	.word	0x40020800

08009328 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d903      	bls.n	8009344 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800933c:	f06f 0301 	mvn.w	r3, #1
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	e025      	b.n	8009390 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	79fa      	ldrb	r2, [r7, #7]
 8009348:	4914      	ldr	r1, [pc, #80]	; (800939c <BSP_COM_Init+0x74>)
 800934a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800934e:	4814      	ldr	r0, [pc, #80]	; (80093a0 <BSP_COM_Init+0x78>)
 8009350:	4613      	mov	r3, r2
 8009352:	011b      	lsls	r3, r3, #4
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4403      	add	r3, r0
 800935a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800935c:	79fa      	ldrb	r2, [r7, #7]
 800935e:	4613      	mov	r3, r2
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a0e      	ldr	r2, [pc, #56]	; (80093a0 <BSP_COM_Init+0x78>)
 8009368:	4413      	add	r3, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f000 f864 	bl	8009438 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8009370:	79fa      	ldrb	r2, [r7, #7]
 8009372:	4613      	mov	r3, r2
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	4413      	add	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4a09      	ldr	r2, [pc, #36]	; (80093a0 <BSP_COM_Init+0x78>)
 800937c:	4413      	add	r3, r2
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f810 	bl	80093a4 <MX_USART2_UART_Init>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800938a:	f06f 0303 	mvn.w	r3, #3
 800938e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009390:	68fb      	ldr	r3, [r7, #12]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	2000019c 	.word	0x2000019c
 80093a0:	20000618 	.word	0x20000618

080093a4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a12      	ldr	r2, [pc, #72]	; (80093fc <MX_USART2_UART_Init+0x58>)
 80093b4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80093bc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	220c      	movs	r2, #12
 80093d4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 f9ba 	bl	800b75c <HAL_UART_Init>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	40004400 	.word	0x40004400

08009400 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8009408:	4b09      	ldr	r3, [pc, #36]	; (8009430 <__io_putchar+0x30>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	4613      	mov	r3, r2
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4a07      	ldr	r2, [pc, #28]	; (8009434 <__io_putchar+0x34>)
 8009418:	1898      	adds	r0, r3, r2
 800941a:	1d39      	adds	r1, r7, #4
 800941c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009420:	2201      	movs	r2, #1
 8009422:	f002 f9f2 	bl	800b80a <HAL_UART_Transmit>
  return ch;
 8009426:	687b      	ldr	r3, [r7, #4]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000400 	.word	0x20000400
 8009434:	20000618 	.word	0x20000618

08009438 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009440:	2300      	movs	r3, #0
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <USART2_MspInit+0x88>)
 8009446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009448:	4a1d      	ldr	r2, [pc, #116]	; (80094c0 <USART2_MspInit+0x88>)
 800944a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800944e:	6413      	str	r3, [r2, #64]	; 0x40
 8009450:	4b1b      	ldr	r3, [pc, #108]	; (80094c0 <USART2_MspInit+0x88>)
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009458:	613b      	str	r3, [r7, #16]
 800945a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800945c:	2300      	movs	r3, #0
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <USART2_MspInit+0x88>)
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	4a16      	ldr	r2, [pc, #88]	; (80094c0 <USART2_MspInit+0x88>)
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	6313      	str	r3, [r2, #48]	; 0x30
 800946c:	4b14      	ldr	r3, [pc, #80]	; (80094c0 <USART2_MspInit+0x88>)
 800946e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8009478:	2304      	movs	r3, #4
 800947a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800947c:	2302      	movs	r3, #2
 800947e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009480:	2300      	movs	r3, #0
 8009482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009484:	2300      	movs	r3, #0
 8009486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8009488:	2307      	movs	r3, #7
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800948c:	f107 0314 	add.w	r3, r7, #20
 8009490:	4619      	mov	r1, r3
 8009492:	480c      	ldr	r0, [pc, #48]	; (80094c4 <USART2_MspInit+0x8c>)
 8009494:	f000 fa12 	bl	80098bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8009498:	2308      	movs	r3, #8
 800949a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800949c:	2302      	movs	r3, #2
 800949e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094a4:	2300      	movs	r3, #0
 80094a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80094a8:	2307      	movs	r3, #7
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80094ac:	f107 0314 	add.w	r3, r7, #20
 80094b0:	4619      	mov	r1, r3
 80094b2:	4804      	ldr	r0, [pc, #16]	; (80094c4 <USART2_MspInit+0x8c>)
 80094b4:	f000 fa02 	bl	80098bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80094b8:	bf00      	nop
 80094ba:	3728      	adds	r7, #40	; 0x28
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	40023800 	.word	0x40023800
 80094c4:	40020000 	.word	0x40020000

080094c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80094cc:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <HAL_Init+0x40>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a0d      	ldr	r2, [pc, #52]	; (8009508 <HAL_Init+0x40>)
 80094d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80094d8:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <HAL_Init+0x40>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a0a      	ldr	r2, [pc, #40]	; (8009508 <HAL_Init+0x40>)
 80094de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80094e4:	4b08      	ldr	r3, [pc, #32]	; (8009508 <HAL_Init+0x40>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a07      	ldr	r2, [pc, #28]	; (8009508 <HAL_Init+0x40>)
 80094ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094f0:	2003      	movs	r0, #3
 80094f2:	f000 f94f 	bl	8009794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80094f6:	2000      	movs	r0, #0
 80094f8:	f000 f808 	bl	800950c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80094fc:	f7f7 fe30 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	40023c00 	.word	0x40023c00

0800950c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009514:	4b12      	ldr	r3, [pc, #72]	; (8009560 <HAL_InitTick+0x54>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	4b12      	ldr	r3, [pc, #72]	; (8009564 <HAL_InitTick+0x58>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	4619      	mov	r1, r3
 800951e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009522:	fbb3 f3f1 	udiv	r3, r3, r1
 8009526:	fbb2 f3f3 	udiv	r3, r2, r3
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f967 	bl	80097fe <HAL_SYSTICK_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e00e      	b.n	8009558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b0f      	cmp	r3, #15
 800953e:	d80a      	bhi.n	8009556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009540:	2200      	movs	r2, #0
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	f000 f92f 	bl	80097aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800954c:	4a06      	ldr	r2, [pc, #24]	; (8009568 <HAL_InitTick+0x5c>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	e000      	b.n	8009558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000000 	.word	0x20000000
 8009564:	200001a4 	.word	0x200001a4
 8009568:	200001a0 	.word	0x200001a0

0800956c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009570:	4b06      	ldr	r3, [pc, #24]	; (800958c <HAL_IncTick+0x20>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	4b06      	ldr	r3, [pc, #24]	; (8009590 <HAL_IncTick+0x24>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4413      	add	r3, r2
 800957c:	4a04      	ldr	r2, [pc, #16]	; (8009590 <HAL_IncTick+0x24>)
 800957e:	6013      	str	r3, [r2, #0]
}
 8009580:	bf00      	nop
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	200001a4 	.word	0x200001a4
 8009590:	2000065c 	.word	0x2000065c

08009594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  return uwTick;
 8009598:	4b03      	ldr	r3, [pc, #12]	; (80095a8 <HAL_GetTick+0x14>)
 800959a:	681b      	ldr	r3, [r3, #0]
}
 800959c:	4618      	mov	r0, r3
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	2000065c 	.word	0x2000065c

080095ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80095b4:	f7ff ffee 	bl	8009594 <HAL_GetTick>
 80095b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d005      	beq.n	80095d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095c6:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <HAL_Delay+0x44>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80095d2:	bf00      	nop
 80095d4:	f7ff ffde 	bl	8009594 <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d8f7      	bhi.n	80095d4 <HAL_Delay+0x28>
  {
  }
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	200001a4 	.word	0x200001a4

080095f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009604:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <__NVIC_SetPriorityGrouping+0x44>)
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009610:	4013      	ands	r3, r2
 8009612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800961c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009626:	4a04      	ldr	r2, [pc, #16]	; (8009638 <__NVIC_SetPriorityGrouping+0x44>)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	60d3      	str	r3, [r2, #12]
}
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	e000ed00 	.word	0xe000ed00

0800963c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009640:	4b04      	ldr	r3, [pc, #16]	; (8009654 <__NVIC_GetPriorityGrouping+0x18>)
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	0a1b      	lsrs	r3, r3, #8
 8009646:	f003 0307 	and.w	r3, r3, #7
}
 800964a:	4618      	mov	r0, r3
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	e000ed00 	.word	0xe000ed00

08009658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009666:	2b00      	cmp	r3, #0
 8009668:	db0b      	blt.n	8009682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	f003 021f 	and.w	r2, r3, #31
 8009670:	4907      	ldr	r1, [pc, #28]	; (8009690 <__NVIC_EnableIRQ+0x38>)
 8009672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009676:	095b      	lsrs	r3, r3, #5
 8009678:	2001      	movs	r0, #1
 800967a:	fa00 f202 	lsl.w	r2, r0, r2
 800967e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	e000e100 	.word	0xe000e100

08009694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	6039      	str	r1, [r7, #0]
 800969e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	db0a      	blt.n	80096be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	490c      	ldr	r1, [pc, #48]	; (80096e0 <__NVIC_SetPriority+0x4c>)
 80096ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096b2:	0112      	lsls	r2, r2, #4
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	440b      	add	r3, r1
 80096b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80096bc:	e00a      	b.n	80096d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	4908      	ldr	r1, [pc, #32]	; (80096e4 <__NVIC_SetPriority+0x50>)
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	3b04      	subs	r3, #4
 80096cc:	0112      	lsls	r2, r2, #4
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	440b      	add	r3, r1
 80096d2:	761a      	strb	r2, [r3, #24]
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	e000e100 	.word	0xe000e100
 80096e4:	e000ed00 	.word	0xe000ed00

080096e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b089      	sub	sp, #36	; 0x24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	f1c3 0307 	rsb	r3, r3, #7
 8009702:	2b04      	cmp	r3, #4
 8009704:	bf28      	it	cs
 8009706:	2304      	movcs	r3, #4
 8009708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	3304      	adds	r3, #4
 800970e:	2b06      	cmp	r3, #6
 8009710:	d902      	bls.n	8009718 <NVIC_EncodePriority+0x30>
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	3b03      	subs	r3, #3
 8009716:	e000      	b.n	800971a <NVIC_EncodePriority+0x32>
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800971c:	f04f 32ff 	mov.w	r2, #4294967295
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	fa02 f303 	lsl.w	r3, r2, r3
 8009726:	43da      	mvns	r2, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	401a      	ands	r2, r3
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009730:	f04f 31ff 	mov.w	r1, #4294967295
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	fa01 f303 	lsl.w	r3, r1, r3
 800973a:	43d9      	mvns	r1, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009740:	4313      	orrs	r3, r2
         );
}
 8009742:	4618      	mov	r0, r3
 8009744:	3724      	adds	r7, #36	; 0x24
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
	...

08009750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3b01      	subs	r3, #1
 800975c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009760:	d301      	bcc.n	8009766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009762:	2301      	movs	r3, #1
 8009764:	e00f      	b.n	8009786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009766:	4a0a      	ldr	r2, [pc, #40]	; (8009790 <SysTick_Config+0x40>)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3b01      	subs	r3, #1
 800976c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800976e:	210f      	movs	r1, #15
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	f7ff ff8e 	bl	8009694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009778:	4b05      	ldr	r3, [pc, #20]	; (8009790 <SysTick_Config+0x40>)
 800977a:	2200      	movs	r2, #0
 800977c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <SysTick_Config+0x40>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	e000e010 	.word	0xe000e010

08009794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff ff29 	bl	80095f4 <__NVIC_SetPriorityGrouping>
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b086      	sub	sp, #24
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	4603      	mov	r3, r0
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80097bc:	f7ff ff3e 	bl	800963c <__NVIC_GetPriorityGrouping>
 80097c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	6978      	ldr	r0, [r7, #20]
 80097c8:	f7ff ff8e 	bl	80096e8 <NVIC_EncodePriority>
 80097cc:	4602      	mov	r2, r0
 80097ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff ff5d 	bl	8009694 <__NVIC_SetPriority>
}
 80097da:	bf00      	nop
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	4603      	mov	r3, r0
 80097ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80097ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff ff31 	bl	8009658 <__NVIC_EnableIRQ>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff ffa2 	bl	8009750 <SysTick_Config>
 800980c:	4603      	mov	r3, r0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009816:	b480      	push	{r7}
 8009818:	b087      	sub	sp, #28
 800981a:	af00      	add	r7, sp, #0
 800981c:	60f8      	str	r0, [r7, #12]
 800981e:	460b      	mov	r3, r1
 8009820:	607a      	str	r2, [r7, #4]
 8009822:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d103      	bne.n	8009836 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	605a      	str	r2, [r3, #4]
      break;
 8009834:	e002      	b.n	800983c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
      break;
 800983a:	bf00      	nop
  }

  return status;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
}
 800983e:	4618      	mov	r0, r3
 8009840:	371c      	adds	r7, #28
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e003      	b.n	8009866 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009864:	2300      	movs	r3, #0
  }
}
 8009866:	4618      	mov	r0, r3
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 031f 	and.w	r3, r3, #31
 8009884:	2201      	movs	r2, #1
 8009886:	fa02 f303 	lsl.w	r3, r2, r3
 800988a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800988c:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <HAL_EXTI_IRQHandler+0x44>)
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4013      	ands	r3, r2
 8009894:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d009      	beq.n	80098b0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800989c:	4a06      	ldr	r2, [pc, #24]	; (80098b8 <HAL_EXTI_IRQHandler+0x44>)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	4798      	blx	r3
    }
  }
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	40013c00 	.word	0x40013c00

080098bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098bc:	b480      	push	{r7}
 80098be:	b089      	sub	sp, #36	; 0x24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	e159      	b.n	8009b8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80098d8:	2201      	movs	r2, #1
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4013      	ands	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	f040 8148 	bne.w	8009b86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d005      	beq.n	800990e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800990a:	2b02      	cmp	r3, #2
 800990c:	d130      	bne.n	8009970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	2203      	movs	r2, #3
 800991a:	fa02 f303 	lsl.w	r3, r2, r3
 800991e:	43db      	mvns	r3, r3
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	4013      	ands	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	4313      	orrs	r3, r2
 8009936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009944:	2201      	movs	r2, #1
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	fa02 f303 	lsl.w	r3, r2, r3
 800994c:	43db      	mvns	r3, r3
 800994e:	69ba      	ldr	r2, [r7, #24]
 8009950:	4013      	ands	r3, r2
 8009952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	091b      	lsrs	r3, r3, #4
 800995a:	f003 0201 	and.w	r2, r3, #1
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	4313      	orrs	r3, r2
 8009968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	2b03      	cmp	r3, #3
 800997a:	d017      	beq.n	80099ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	2203      	movs	r2, #3
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	43db      	mvns	r3, r3
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	4013      	ands	r3, r2
 8009992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	fa02 f303 	lsl.w	r3, r2, r3
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f003 0303 	and.w	r3, r3, #3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d123      	bne.n	8009a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	08da      	lsrs	r2, r3, #3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3208      	adds	r2, #8
 80099c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	f003 0307 	and.w	r3, r3, #7
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	220f      	movs	r2, #15
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	4013      	ands	r3, r2
 80099da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	691a      	ldr	r2, [r3, #16]
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	08da      	lsrs	r2, r3, #3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3208      	adds	r2, #8
 80099fa:	69b9      	ldr	r1, [r7, #24]
 80099fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	43db      	mvns	r3, r3
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	4013      	ands	r3, r2
 8009a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f003 0203 	and.w	r2, r3, #3
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 80a2 	beq.w	8009b86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	4b57      	ldr	r3, [pc, #348]	; (8009ba4 <HAL_GPIO_Init+0x2e8>)
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	4a56      	ldr	r2, [pc, #344]	; (8009ba4 <HAL_GPIO_Init+0x2e8>)
 8009a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a50:	6453      	str	r3, [r2, #68]	; 0x44
 8009a52:	4b54      	ldr	r3, [pc, #336]	; (8009ba4 <HAL_GPIO_Init+0x2e8>)
 8009a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a5e:	4a52      	ldr	r2, [pc, #328]	; (8009ba8 <HAL_GPIO_Init+0x2ec>)
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	089b      	lsrs	r3, r3, #2
 8009a64:	3302      	adds	r3, #2
 8009a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	220f      	movs	r2, #15
 8009a76:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7a:	43db      	mvns	r3, r3
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a49      	ldr	r2, [pc, #292]	; (8009bac <HAL_GPIO_Init+0x2f0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d019      	beq.n	8009abe <HAL_GPIO_Init+0x202>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a48      	ldr	r2, [pc, #288]	; (8009bb0 <HAL_GPIO_Init+0x2f4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d013      	beq.n	8009aba <HAL_GPIO_Init+0x1fe>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a47      	ldr	r2, [pc, #284]	; (8009bb4 <HAL_GPIO_Init+0x2f8>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00d      	beq.n	8009ab6 <HAL_GPIO_Init+0x1fa>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a46      	ldr	r2, [pc, #280]	; (8009bb8 <HAL_GPIO_Init+0x2fc>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d007      	beq.n	8009ab2 <HAL_GPIO_Init+0x1f6>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a45      	ldr	r2, [pc, #276]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d101      	bne.n	8009aae <HAL_GPIO_Init+0x1f2>
 8009aaa:	2304      	movs	r3, #4
 8009aac:	e008      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009aae:	2307      	movs	r3, #7
 8009ab0:	e006      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e004      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e002      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e000      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	f002 0203 	and.w	r2, r2, #3
 8009ac6:	0092      	lsls	r2, r2, #2
 8009ac8:	4093      	lsls	r3, r2
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ad0:	4935      	ldr	r1, [pc, #212]	; (8009ba8 <HAL_GPIO_Init+0x2ec>)
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	089b      	lsrs	r3, r3, #2
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ade:	4b38      	ldr	r3, [pc, #224]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	43db      	mvns	r3, r3
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	4013      	ands	r3, r2
 8009aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009b02:	4a2f      	ldr	r2, [pc, #188]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009b08:	4b2d      	ldr	r3, [pc, #180]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	43db      	mvns	r3, r3
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	4013      	ands	r3, r2
 8009b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009b2c:	4a24      	ldr	r2, [pc, #144]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b32:	4b23      	ldr	r3, [pc, #140]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009b56:	4a1a      	ldr	r2, [pc, #104]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009b5c:	4b18      	ldr	r3, [pc, #96]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	43db      	mvns	r3, r3
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009b80:	4a0f      	ldr	r2, [pc, #60]	; (8009bc0 <HAL_GPIO_Init+0x304>)
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	2b0f      	cmp	r3, #15
 8009b90:	f67f aea2 	bls.w	80098d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop
 8009b98:	3724      	adds	r7, #36	; 0x24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	40023800 	.word	0x40023800
 8009ba8:	40013800 	.word	0x40013800
 8009bac:	40020000 	.word	0x40020000
 8009bb0:	40020400 	.word	0x40020400
 8009bb4:	40020800 	.word	0x40020800
 8009bb8:	40020c00 	.word	0x40020c00
 8009bbc:	40021000 	.word	0x40021000
 8009bc0:	40013c00 	.word	0x40013c00

08009bc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]
 8009bde:	e0bb      	b.n	8009d58 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009be0:	2201      	movs	r2, #1
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	fa02 f303 	lsl.w	r3, r2, r3
 8009be8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	f040 80ab 	bne.w	8009d52 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009bfc:	4a5c      	ldr	r2, [pc, #368]	; (8009d70 <HAL_GPIO_DeInit+0x1ac>)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	089b      	lsrs	r3, r3, #2
 8009c02:	3302      	adds	r3, #2
 8009c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	220f      	movs	r2, #15
 8009c14:	fa02 f303 	lsl.w	r3, r2, r3
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a54      	ldr	r2, [pc, #336]	; (8009d74 <HAL_GPIO_DeInit+0x1b0>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d019      	beq.n	8009c5a <HAL_GPIO_DeInit+0x96>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a53      	ldr	r2, [pc, #332]	; (8009d78 <HAL_GPIO_DeInit+0x1b4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d013      	beq.n	8009c56 <HAL_GPIO_DeInit+0x92>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a52      	ldr	r2, [pc, #328]	; (8009d7c <HAL_GPIO_DeInit+0x1b8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d00d      	beq.n	8009c52 <HAL_GPIO_DeInit+0x8e>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a51      	ldr	r2, [pc, #324]	; (8009d80 <HAL_GPIO_DeInit+0x1bc>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d007      	beq.n	8009c4e <HAL_GPIO_DeInit+0x8a>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a50      	ldr	r2, [pc, #320]	; (8009d84 <HAL_GPIO_DeInit+0x1c0>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d101      	bne.n	8009c4a <HAL_GPIO_DeInit+0x86>
 8009c46:	2304      	movs	r3, #4
 8009c48:	e008      	b.n	8009c5c <HAL_GPIO_DeInit+0x98>
 8009c4a:	2307      	movs	r3, #7
 8009c4c:	e006      	b.n	8009c5c <HAL_GPIO_DeInit+0x98>
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e004      	b.n	8009c5c <HAL_GPIO_DeInit+0x98>
 8009c52:	2302      	movs	r3, #2
 8009c54:	e002      	b.n	8009c5c <HAL_GPIO_DeInit+0x98>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e000      	b.n	8009c5c <HAL_GPIO_DeInit+0x98>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	f002 0203 	and.w	r2, r2, #3
 8009c62:	0092      	lsls	r2, r2, #2
 8009c64:	4093      	lsls	r3, r2
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d132      	bne.n	8009cd2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009c6c:	4b46      	ldr	r3, [pc, #280]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	43db      	mvns	r3, r3
 8009c74:	4944      	ldr	r1, [pc, #272]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009c7a:	4b43      	ldr	r3, [pc, #268]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	43db      	mvns	r3, r3
 8009c82:	4941      	ldr	r1, [pc, #260]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009c88:	4b3f      	ldr	r3, [pc, #252]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	43db      	mvns	r3, r3
 8009c90:	493d      	ldr	r1, [pc, #244]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009c92:	4013      	ands	r3, r2
 8009c94:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009c96:	4b3c      	ldr	r3, [pc, #240]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	493a      	ldr	r1, [pc, #232]	; (8009d88 <HAL_GPIO_DeInit+0x1c4>)
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	220f      	movs	r2, #15
 8009cae:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009cb4:	4a2e      	ldr	r2, [pc, #184]	; (8009d70 <HAL_GPIO_DeInit+0x1ac>)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	089b      	lsrs	r3, r3, #2
 8009cba:	3302      	adds	r3, #2
 8009cbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	43da      	mvns	r2, r3
 8009cc4:	482a      	ldr	r0, [pc, #168]	; (8009d70 <HAL_GPIO_DeInit+0x1ac>)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	089b      	lsrs	r3, r3, #2
 8009cca:	400a      	ands	r2, r1
 8009ccc:	3302      	adds	r3, #2
 8009cce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	2103      	movs	r1, #3
 8009cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	401a      	ands	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	08da      	lsrs	r2, r3, #3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3208      	adds	r2, #8
 8009cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	220f      	movs	r2, #15
 8009cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009d02:	43db      	mvns	r3, r3
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	08d2      	lsrs	r2, r2, #3
 8009d08:	4019      	ands	r1, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	3208      	adds	r2, #8
 8009d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	005b      	lsls	r3, r3, #1
 8009d1a:	2103      	movs	r1, #3
 8009d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d20:	43db      	mvns	r3, r3
 8009d22:	401a      	ands	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	fa01 f303 	lsl.w	r3, r1, r3
 8009d34:	43db      	mvns	r3, r3
 8009d36:	401a      	ands	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	2103      	movs	r1, #3
 8009d46:	fa01 f303 	lsl.w	r3, r1, r3
 8009d4a:	43db      	mvns	r3, r3
 8009d4c:	401a      	ands	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	3301      	adds	r3, #1
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2b0f      	cmp	r3, #15
 8009d5c:	f67f af40 	bls.w	8009be0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	371c      	adds	r7, #28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	40013800 	.word	0x40013800
 8009d74:	40020000 	.word	0x40020000
 8009d78:	40020400 	.word	0x40020400
 8009d7c:	40020800 	.word	0x40020800
 8009d80:	40020c00 	.word	0x40020c00
 8009d84:	40021000 	.word	0x40021000
 8009d88:	40013c00 	.word	0x40013c00

08009d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	887b      	ldrh	r3, [r7, #2]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009da4:	2301      	movs	r3, #1
 8009da6:	73fb      	strb	r3, [r7, #15]
 8009da8:	e001      	b.n	8009dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	807b      	strh	r3, [r7, #2]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009dcc:	787b      	ldrb	r3, [r7, #1]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dd2:	887a      	ldrh	r2, [r7, #2]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009dd8:	e003      	b.n	8009de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009dda:	887b      	ldrh	r3, [r7, #2]
 8009ddc:	041a      	lsls	r2, r3, #16
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	619a      	str	r2, [r3, #24]
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009dfa:	4b08      	ldr	r3, [pc, #32]	; (8009e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009dfc:	695a      	ldr	r2, [r3, #20]
 8009dfe:	88fb      	ldrh	r3, [r7, #6]
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d006      	beq.n	8009e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e06:	4a05      	ldr	r2, [pc, #20]	; (8009e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e08:	88fb      	ldrh	r3, [r7, #6]
 8009e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e0c:	88fb      	ldrh	r3, [r7, #6]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f806 	bl	8009e20 <HAL_GPIO_EXTI_Callback>
  }
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	40013c00 	.word	0x40013c00

08009e20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e12b      	b.n	800a0a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d106      	bne.n	8009e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f95d 	bl	800a11e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2224      	movs	r2, #36	; 0x24
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 0201 	bic.w	r2, r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009e9c:	f001 fc36 	bl	800b70c <HAL_RCC_GetPCLK1Freq>
 8009ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	4a81      	ldr	r2, [pc, #516]	; (800a0ac <HAL_I2C_Init+0x274>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d807      	bhi.n	8009ebc <HAL_I2C_Init+0x84>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4a80      	ldr	r2, [pc, #512]	; (800a0b0 <HAL_I2C_Init+0x278>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	bf94      	ite	ls
 8009eb4:	2301      	movls	r3, #1
 8009eb6:	2300      	movhi	r3, #0
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	e006      	b.n	8009eca <HAL_I2C_Init+0x92>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4a7d      	ldr	r2, [pc, #500]	; (800a0b4 <HAL_I2C_Init+0x27c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	bf94      	ite	ls
 8009ec4:	2301      	movls	r3, #1
 8009ec6:	2300      	movhi	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e0e7      	b.n	800a0a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4a78      	ldr	r2, [pc, #480]	; (800a0b8 <HAL_I2C_Init+0x280>)
 8009ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eda:	0c9b      	lsrs	r3, r3, #18
 8009edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4a6a      	ldr	r2, [pc, #424]	; (800a0ac <HAL_I2C_Init+0x274>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d802      	bhi.n	8009f0c <HAL_I2C_Init+0xd4>
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	e009      	b.n	8009f20 <HAL_I2C_Init+0xe8>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f12:	fb02 f303 	mul.w	r3, r2, r3
 8009f16:	4a69      	ldr	r2, [pc, #420]	; (800a0bc <HAL_I2C_Init+0x284>)
 8009f18:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1c:	099b      	lsrs	r3, r3, #6
 8009f1e:	3301      	adds	r3, #1
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	430b      	orrs	r3, r1
 8009f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	495c      	ldr	r1, [pc, #368]	; (800a0ac <HAL_I2C_Init+0x274>)
 8009f3c:	428b      	cmp	r3, r1
 8009f3e:	d819      	bhi.n	8009f74 <HAL_I2C_Init+0x13c>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	1e59      	subs	r1, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f4e:	1c59      	adds	r1, r3, #1
 8009f50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009f54:	400b      	ands	r3, r1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <HAL_I2C_Init+0x138>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	1e59      	subs	r1, r3, #1
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f6e:	e051      	b.n	800a014 <HAL_I2C_Init+0x1dc>
 8009f70:	2304      	movs	r3, #4
 8009f72:	e04f      	b.n	800a014 <HAL_I2C_Init+0x1dc>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d111      	bne.n	8009fa0 <HAL_I2C_Init+0x168>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	1e58      	subs	r0, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6859      	ldr	r1, [r3, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	440b      	add	r3, r1
 8009f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f8e:	3301      	adds	r3, #1
 8009f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bf0c      	ite	eq
 8009f98:	2301      	moveq	r3, #1
 8009f9a:	2300      	movne	r3, #0
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	e012      	b.n	8009fc6 <HAL_I2C_Init+0x18e>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	1e58      	subs	r0, r3, #1
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6859      	ldr	r1, [r3, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	440b      	add	r3, r1
 8009fae:	0099      	lsls	r1, r3, #2
 8009fb0:	440b      	add	r3, r1
 8009fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2301      	moveq	r3, #1
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <HAL_I2C_Init+0x196>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e022      	b.n	800a014 <HAL_I2C_Init+0x1dc>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10e      	bne.n	8009ff4 <HAL_I2C_Init+0x1bc>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	1e58      	subs	r0, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6859      	ldr	r1, [r3, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	440b      	add	r3, r1
 8009fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fe8:	3301      	adds	r3, #1
 8009fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff2:	e00f      	b.n	800a014 <HAL_I2C_Init+0x1dc>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	1e58      	subs	r0, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6859      	ldr	r1, [r3, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	0099      	lsls	r1, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	fbb0 f3f3 	udiv	r3, r0, r3
 800a00a:	3301      	adds	r3, #1
 800a00c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	6809      	ldr	r1, [r1, #0]
 800a018:	4313      	orrs	r3, r2
 800a01a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69da      	ldr	r2, [r3, #28]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	430a      	orrs	r2, r1
 800a036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	6911      	ldr	r1, [r2, #16]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	68d2      	ldr	r2, [r2, #12]
 800a04e:	4311      	orrs	r1, r2
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6812      	ldr	r2, [r2, #0]
 800a054:	430b      	orrs	r3, r1
 800a056:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	695a      	ldr	r2, [r3, #20]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	000186a0 	.word	0x000186a0
 800a0b0:	001e847f 	.word	0x001e847f
 800a0b4:	003d08ff 	.word	0x003d08ff
 800a0b8:	431bde83 	.word	0x431bde83
 800a0bc:	10624dd3 	.word	0x10624dd3

0800a0c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e021      	b.n	800a116 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2224      	movs	r2, #36	; 0x24
 800a0d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0201 	bic.w	r2, r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f821 	bl	800a132 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a126:	bf00      	nop
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
	...

0800a148 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af02      	add	r7, sp, #8
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	461a      	mov	r2, r3
 800a156:	4603      	mov	r3, r0
 800a158:	817b      	strh	r3, [r7, #10]
 800a15a:	460b      	mov	r3, r1
 800a15c:	813b      	strh	r3, [r7, #8]
 800a15e:	4613      	mov	r3, r2
 800a160:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a162:	f7ff fa17 	bl	8009594 <HAL_GetTick>
 800a166:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b20      	cmp	r3, #32
 800a172:	f040 80d9 	bne.w	800a328 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	2319      	movs	r3, #25
 800a17c:	2201      	movs	r2, #1
 800a17e:	496d      	ldr	r1, [pc, #436]	; (800a334 <HAL_I2C_Mem_Write+0x1ec>)
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 fc99 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a18c:	2302      	movs	r3, #2
 800a18e:	e0cc      	b.n	800a32a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a196:	2b01      	cmp	r3, #1
 800a198:	d101      	bne.n	800a19e <HAL_I2C_Mem_Write+0x56>
 800a19a:	2302      	movs	r3, #2
 800a19c:	e0c5      	b.n	800a32a <HAL_I2C_Mem_Write+0x1e2>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d007      	beq.n	800a1c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0201 	orr.w	r2, r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2221      	movs	r2, #33	; 0x21
 800a1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2240      	movs	r2, #64	; 0x40
 800a1e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a3a      	ldr	r2, [r7, #32]
 800a1ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4a4d      	ldr	r2, [pc, #308]	; (800a338 <HAL_I2C_Mem_Write+0x1f0>)
 800a204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a206:	88f8      	ldrh	r0, [r7, #6]
 800a208:	893a      	ldrh	r2, [r7, #8]
 800a20a:	8979      	ldrh	r1, [r7, #10]
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	4603      	mov	r3, r0
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 fad0 	bl	800a7bc <I2C_RequestMemoryWrite>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d052      	beq.n	800a2c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e081      	b.n	800a32a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 fd1a 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00d      	beq.n	800a252 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d107      	bne.n	800a24e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a24c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e06b      	b.n	800a32a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a26c:	3b01      	subs	r3, #1
 800a26e:	b29a      	uxth	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d11b      	bne.n	800a2c8 <HAL_I2C_Mem_Write+0x180>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a294:	2b00      	cmp	r3, #0
 800a296:	d017      	beq.n	800a2c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	781a      	ldrb	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1aa      	bne.n	800a226 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 fd06 	bl	800ace6 <I2C_WaitOnBTFFlagUntilTimeout>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d107      	bne.n	800a2f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e016      	b.n	800a32a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a30a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	e000      	b.n	800a32a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a328:	2302      	movs	r3, #2
  }
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	00100002 	.word	0x00100002
 800a338:	ffff0000 	.word	0xffff0000

0800a33c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08c      	sub	sp, #48	; 0x30
 800a340:	af02      	add	r7, sp, #8
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	4608      	mov	r0, r1
 800a346:	4611      	mov	r1, r2
 800a348:	461a      	mov	r2, r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	817b      	strh	r3, [r7, #10]
 800a34e:	460b      	mov	r3, r1
 800a350:	813b      	strh	r3, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a356:	f7ff f91d 	bl	8009594 <HAL_GetTick>
 800a35a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b20      	cmp	r3, #32
 800a366:	f040 8208 	bne.w	800a77a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	2319      	movs	r3, #25
 800a370:	2201      	movs	r2, #1
 800a372:	497b      	ldr	r1, [pc, #492]	; (800a560 <HAL_I2C_Mem_Read+0x224>)
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fb9f 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a380:	2302      	movs	r3, #2
 800a382:	e1fb      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d101      	bne.n	800a392 <HAL_I2C_Mem_Read+0x56>
 800a38e:	2302      	movs	r3, #2
 800a390:	e1f4      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d007      	beq.n	800a3b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f042 0201 	orr.w	r2, r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2222      	movs	r2, #34	; 0x22
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2240      	movs	r2, #64	; 0x40
 800a3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a3e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4a5b      	ldr	r2, [pc, #364]	; (800a564 <HAL_I2C_Mem_Read+0x228>)
 800a3f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3fa:	88f8      	ldrh	r0, [r7, #6]
 800a3fc:	893a      	ldrh	r2, [r7, #8]
 800a3fe:	8979      	ldrh	r1, [r7, #10]
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	4603      	mov	r3, r0
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 fa6c 	bl	800a8e8 <I2C_RequestMemoryRead>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e1b0      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d113      	bne.n	800a44a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a422:	2300      	movs	r3, #0
 800a424:	623b      	str	r3, [r7, #32]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	623b      	str	r3, [r7, #32]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	623b      	str	r3, [r7, #32]
 800a436:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	e184      	b.n	800a754 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d11b      	bne.n	800a48a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a462:	2300      	movs	r3, #0
 800a464:	61fb      	str	r3, [r7, #28]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	61fb      	str	r3, [r7, #28]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	61fb      	str	r3, [r7, #28]
 800a476:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a486:	601a      	str	r2, [r3, #0]
 800a488:	e164      	b.n	800a754 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d11b      	bne.n	800a4ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61bb      	str	r3, [r7, #24]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	61bb      	str	r3, [r7, #24]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	e144      	b.n	800a754 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a4e0:	e138      	b.n	800a754 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	f200 80f1 	bhi.w	800a6ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d123      	bne.n	800a53c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fc35 	bl	800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e139      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a524:	3b01      	subs	r3, #1
 800a526:	b29a      	uxth	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a530:	b29b      	uxth	r3, r3
 800a532:	3b01      	subs	r3, #1
 800a534:	b29a      	uxth	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a53a:	e10b      	b.n	800a754 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a540:	2b02      	cmp	r3, #2
 800a542:	d14e      	bne.n	800a5e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	2200      	movs	r2, #0
 800a54c:	4906      	ldr	r1, [pc, #24]	; (800a568 <HAL_I2C_Mem_Read+0x22c>)
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 fab2 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d008      	beq.n	800a56c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e10e      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
 800a55e:	bf00      	nop
 800a560:	00100002 	.word	0x00100002
 800a564:	ffff0000 	.word	0xffff0000
 800a568:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a57a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	691a      	ldr	r2, [r3, #16]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a598:	3b01      	subs	r3, #1
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	691a      	ldr	r2, [r3, #16]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	b2d2      	uxtb	r2, r2
 800a5ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5e0:	e0b8      	b.n	800a754 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4966      	ldr	r1, [pc, #408]	; (800a784 <HAL_I2C_Mem_Read+0x448>)
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 fa63 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e0bf      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a60a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a628:	3b01      	subs	r3, #1
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	2200      	movs	r2, #0
 800a646:	494f      	ldr	r1, [pc, #316]	; (800a784 <HAL_I2C_Mem_Read+0x448>)
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fa35 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e091      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691a      	ldr	r2, [r3, #16]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	b2d2      	uxtb	r2, r2
 800a674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a684:	3b01      	subs	r3, #1
 800a686:	b29a      	uxth	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a690:	b29b      	uxth	r3, r3
 800a692:	3b01      	subs	r3, #1
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	b2d2      	uxtb	r2, r2
 800a6a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6cc:	e042      	b.n	800a754 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 fb48 	bl	800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e04c      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	691a      	ldr	r2, [r3, #16]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	b2d2      	uxtb	r2, r2
 800a6ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b29a      	uxth	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	3b01      	subs	r3, #1
 800a70e:	b29a      	uxth	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d118      	bne.n	800a754 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	691a      	ldr	r2, [r3, #16]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73e:	3b01      	subs	r3, #1
 800a740:	b29a      	uxth	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	3b01      	subs	r3, #1
 800a74e:	b29a      	uxth	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f47f aec2 	bne.w	800a4e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2220      	movs	r2, #32
 800a762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	e000      	b.n	800a77c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a77a:	2302      	movs	r3, #2
  }
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3728      	adds	r7, #40	; 0x28
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	00010004 	.word	0x00010004

0800a788 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a796:	b2db      	uxtb	r3, r3
}
 800a798:	4618      	mov	r0, r3
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af02      	add	r7, sp, #8
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	817b      	strh	r3, [r7, #10]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	813b      	strh	r3, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 f960 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00d      	beq.n	800a81a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80c:	d103      	bne.n	800a816 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e05f      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a81a:	897b      	ldrh	r3, [r7, #10]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	461a      	mov	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	6a3a      	ldr	r2, [r7, #32]
 800a82e:	492d      	ldr	r1, [pc, #180]	; (800a8e4 <I2C_RequestMemoryWrite+0x128>)
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 f998 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e04c      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a858:	6a39      	ldr	r1, [r7, #32]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fa02 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00d      	beq.n	800a882 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d107      	bne.n	800a87e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a87c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e02b      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d105      	bne.n	800a894 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a888:	893b      	ldrh	r3, [r7, #8]
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	611a      	str	r2, [r3, #16]
 800a892:	e021      	b.n	800a8d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a894:	893b      	ldrh	r3, [r7, #8]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a4:	6a39      	ldr	r1, [r7, #32]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f9dc 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00d      	beq.n	800a8ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d107      	bne.n	800a8ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e005      	b.n	800a8da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8ce:	893b      	ldrh	r3, [r7, #8]
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	00010002 	.word	0x00010002

0800a8e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	817b      	strh	r3, [r7, #10]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	813b      	strh	r3, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a910:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	2200      	movs	r2, #0
 800a92a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 f8c2 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00d      	beq.n	800a956 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a948:	d103      	bne.n	800a952 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e0aa      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a956:	897b      	ldrh	r3, [r7, #10]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	461a      	mov	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	6a3a      	ldr	r2, [r7, #32]
 800a96a:	4952      	ldr	r1, [pc, #328]	; (800aab4 <I2C_RequestMemoryRead+0x1cc>)
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 f8fa 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e097      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	617b      	str	r3, [r7, #20]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	617b      	str	r3, [r7, #20]
 800a990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a994:	6a39      	ldr	r1, [r7, #32]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f964 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d107      	bne.n	800a9ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e076      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d105      	bne.n	800a9d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9c4:	893b      	ldrh	r3, [r7, #8]
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	611a      	str	r2, [r3, #16]
 800a9ce:	e021      	b.n	800aa14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a9d0:	893b      	ldrh	r3, [r7, #8]
 800a9d2:	0a1b      	lsrs	r3, r3, #8
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e0:	6a39      	ldr	r1, [r7, #32]
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 f93e 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00d      	beq.n	800aa0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d107      	bne.n	800aa06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e050      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa0a:	893b      	ldrh	r3, [r7, #8]
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa16:	6a39      	ldr	r1, [r7, #32]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 f923 	bl	800ac64 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00d      	beq.n	800aa40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d107      	bne.n	800aa3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e035      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 f82b 	bl	800aab8 <I2C_WaitOnFlagUntilTimeout>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00d      	beq.n	800aa84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa76:	d103      	bne.n	800aa80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e013      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa84:	897b      	ldrh	r3, [r7, #10]
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f043 0301 	orr.w	r3, r3, #1
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	6a3a      	ldr	r2, [r7, #32]
 800aa98:	4906      	ldr	r1, [pc, #24]	; (800aab4 <I2C_RequestMemoryRead+0x1cc>)
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f863 	bl	800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e000      	b.n	800aaac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	00010002 	.word	0x00010002

0800aab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	4613      	mov	r3, r2
 800aac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aac8:	e025      	b.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d021      	beq.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad2:	f7fe fd5f 	bl	8009594 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d302      	bcc.n	800aae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d116      	bne.n	800ab16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f043 0220 	orr.w	r2, r3, #32
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e023      	b.n	800ab5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10d      	bne.n	800ab3c <I2C_WaitOnFlagUntilTimeout+0x84>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	43da      	mvns	r2, r3
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bf0c      	ite	eq
 800ab32:	2301      	moveq	r3, #1
 800ab34:	2300      	movne	r3, #0
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	e00c      	b.n	800ab56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	43da      	mvns	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4013      	ands	r3, r2
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bf0c      	ite	eq
 800ab4e:	2301      	moveq	r3, #1
 800ab50:	2300      	movne	r3, #0
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d0b6      	beq.n	800aaca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
 800ab72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab74:	e051      	b.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab84:	d123      	bne.n	800abce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	f043 0204 	orr.w	r2, r3, #4
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e046      	b.n	800ac5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd4:	d021      	beq.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abd6:	f7fe fcdd 	bl	8009594 <HAL_GetTick>
 800abda:	4602      	mov	r2, r0
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d302      	bcc.n	800abec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d116      	bne.n	800ac1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	f043 0220 	orr.w	r2, r3, #32
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e020      	b.n	800ac5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d10c      	bne.n	800ac3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	43da      	mvns	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bf14      	ite	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	2300      	moveq	r3, #0
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	e00b      	b.n	800ac56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	43da      	mvns	r2, r3
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bf14      	ite	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	2300      	moveq	r3, #0
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d18d      	bne.n	800ab76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac70:	e02d      	b.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f8ce 	bl	800ae14 <I2C_IsAcknowledgeFailed>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e02d      	b.n	800acde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac88:	d021      	beq.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac8a:	f7fe fc83 	bl	8009594 <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d302      	bcc.n	800aca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d116      	bne.n	800acce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acba:	f043 0220 	orr.w	r2, r3, #32
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e007      	b.n	800acde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd8:	2b80      	cmp	r3, #128	; 0x80
 800acda:	d1ca      	bne.n	800ac72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acf2:	e02d      	b.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 f88d 	bl	800ae14 <I2C_IsAcknowledgeFailed>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e02d      	b.n	800ad60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d021      	beq.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0c:	f7fe fc42 	bl	8009594 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d302      	bcc.n	800ad22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d116      	bne.n	800ad50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	f043 0220 	orr.w	r2, r3, #32
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e007      	b.n	800ad60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d1ca      	bne.n	800acf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad74:	e042      	b.n	800adfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b10      	cmp	r3, #16
 800ad82:	d119      	bne.n	800adb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f06f 0210 	mvn.w	r2, #16
 800ad8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e029      	b.n	800ae0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb8:	f7fe fbec 	bl	8009594 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d302      	bcc.n	800adce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d116      	bne.n	800adfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2220      	movs	r2, #32
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade8:	f043 0220 	orr.w	r2, r3, #32
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e007      	b.n	800ae0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae06:	2b40      	cmp	r3, #64	; 0x40
 800ae08:	d1b5      	bne.n	800ad76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae2a:	d11b      	bne.n	800ae64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	f043 0204 	orr.w	r2, r3, #4
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
	...

0800ae74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e264      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d075      	beq.n	800af7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae92:	4ba3      	ldr	r3, [pc, #652]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f003 030c 	and.w	r3, r3, #12
 800ae9a:	2b04      	cmp	r3, #4
 800ae9c:	d00c      	beq.n	800aeb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae9e:	4ba0      	ldr	r3, [pc, #640]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aea6:	2b08      	cmp	r3, #8
 800aea8:	d112      	bne.n	800aed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aeaa:	4b9d      	ldr	r3, [pc, #628]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aeb6:	d10b      	bne.n	800aed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeb8:	4b99      	ldr	r3, [pc, #612]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d05b      	beq.n	800af7c <HAL_RCC_OscConfig+0x108>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d157      	bne.n	800af7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e23f      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed8:	d106      	bne.n	800aee8 <HAL_RCC_OscConfig+0x74>
 800aeda:	4b91      	ldr	r3, [pc, #580]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a90      	ldr	r2, [pc, #576]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800aee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee4:	6013      	str	r3, [r2, #0]
 800aee6:	e01d      	b.n	800af24 <HAL_RCC_OscConfig+0xb0>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aef0:	d10c      	bne.n	800af0c <HAL_RCC_OscConfig+0x98>
 800aef2:	4b8b      	ldr	r3, [pc, #556]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a8a      	ldr	r2, [pc, #552]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800aef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	4b88      	ldr	r3, [pc, #544]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a87      	ldr	r2, [pc, #540]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af08:	6013      	str	r3, [r2, #0]
 800af0a:	e00b      	b.n	800af24 <HAL_RCC_OscConfig+0xb0>
 800af0c:	4b84      	ldr	r3, [pc, #528]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a83      	ldr	r2, [pc, #524]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	4b81      	ldr	r3, [pc, #516]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a80      	ldr	r2, [pc, #512]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d013      	beq.n	800af54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af2c:	f7fe fb32 	bl	8009594 <HAL_GetTick>
 800af30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af32:	e008      	b.n	800af46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af34:	f7fe fb2e 	bl	8009594 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	2b64      	cmp	r3, #100	; 0x64
 800af40:	d901      	bls.n	800af46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e204      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af46:	4b76      	ldr	r3, [pc, #472]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f0      	beq.n	800af34 <HAL_RCC_OscConfig+0xc0>
 800af52:	e014      	b.n	800af7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af54:	f7fe fb1e 	bl	8009594 <HAL_GetTick>
 800af58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af5c:	f7fe fb1a 	bl	8009594 <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b64      	cmp	r3, #100	; 0x64
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e1f0      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af6e:	4b6c      	ldr	r3, [pc, #432]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1f0      	bne.n	800af5c <HAL_RCC_OscConfig+0xe8>
 800af7a:	e000      	b.n	800af7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d063      	beq.n	800b052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af8a:	4b65      	ldr	r3, [pc, #404]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	f003 030c 	and.w	r3, r3, #12
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00b      	beq.n	800afae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af96:	4b62      	ldr	r3, [pc, #392]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af9e:	2b08      	cmp	r3, #8
 800afa0:	d11c      	bne.n	800afdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800afa2:	4b5f      	ldr	r3, [pc, #380]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d116      	bne.n	800afdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afae:	4b5c      	ldr	r3, [pc, #368]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 0302 	and.w	r3, r3, #2
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d005      	beq.n	800afc6 <HAL_RCC_OscConfig+0x152>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d001      	beq.n	800afc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e1c4      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afc6:	4b56      	ldr	r3, [pc, #344]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	4952      	ldr	r1, [pc, #328]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800afd6:	4313      	orrs	r3, r2
 800afd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afda:	e03a      	b.n	800b052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d020      	beq.n	800b026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800afe4:	4b4f      	ldr	r3, [pc, #316]	; (800b124 <HAL_RCC_OscConfig+0x2b0>)
 800afe6:	2201      	movs	r2, #1
 800afe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afea:	f7fe fad3 	bl	8009594 <HAL_GetTick>
 800afee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aff0:	e008      	b.n	800b004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aff2:	f7fe facf 	bl	8009594 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	2b02      	cmp	r3, #2
 800affe:	d901      	bls.n	800b004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e1a5      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b004:	4b46      	ldr	r3, [pc, #280]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0f0      	beq.n	800aff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b010:	4b43      	ldr	r3, [pc, #268]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	4940      	ldr	r1, [pc, #256]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b020:	4313      	orrs	r3, r2
 800b022:	600b      	str	r3, [r1, #0]
 800b024:	e015      	b.n	800b052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b026:	4b3f      	ldr	r3, [pc, #252]	; (800b124 <HAL_RCC_OscConfig+0x2b0>)
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02c:	f7fe fab2 	bl	8009594 <HAL_GetTick>
 800b030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b032:	e008      	b.n	800b046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b034:	f7fe faae 	bl	8009594 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d901      	bls.n	800b046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e184      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b046:	4b36      	ldr	r3, [pc, #216]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1f0      	bne.n	800b034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0308 	and.w	r3, r3, #8
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d030      	beq.n	800b0c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d016      	beq.n	800b094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b066:	4b30      	ldr	r3, [pc, #192]	; (800b128 <HAL_RCC_OscConfig+0x2b4>)
 800b068:	2201      	movs	r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b06c:	f7fe fa92 	bl	8009594 <HAL_GetTick>
 800b070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b072:	e008      	b.n	800b086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b074:	f7fe fa8e 	bl	8009594 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d901      	bls.n	800b086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e164      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b086:	4b26      	ldr	r3, [pc, #152]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0f0      	beq.n	800b074 <HAL_RCC_OscConfig+0x200>
 800b092:	e015      	b.n	800b0c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b094:	4b24      	ldr	r3, [pc, #144]	; (800b128 <HAL_RCC_OscConfig+0x2b4>)
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b09a:	f7fe fa7b 	bl	8009594 <HAL_GetTick>
 800b09e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0a0:	e008      	b.n	800b0b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0a2:	f7fe fa77 	bl	8009594 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e14d      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0b4:	4b1a      	ldr	r3, [pc, #104]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0b8:	f003 0302 	and.w	r3, r3, #2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f0      	bne.n	800b0a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0304 	and.w	r3, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 80a0 	beq.w	800b20e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0d2:	4b13      	ldr	r3, [pc, #76]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10f      	bne.n	800b0fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60bb      	str	r3, [r7, #8]
 800b0e2:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	4a0e      	ldr	r2, [pc, #56]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ec:	6413      	str	r3, [r2, #64]	; 0x40
 800b0ee:	4b0c      	ldr	r3, [pc, #48]	; (800b120 <HAL_RCC_OscConfig+0x2ac>)
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0f6:	60bb      	str	r3, [r7, #8]
 800b0f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0fe:	4b0b      	ldr	r3, [pc, #44]	; (800b12c <HAL_RCC_OscConfig+0x2b8>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b106:	2b00      	cmp	r3, #0
 800b108:	d121      	bne.n	800b14e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b10a:	4b08      	ldr	r3, [pc, #32]	; (800b12c <HAL_RCC_OscConfig+0x2b8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a07      	ldr	r2, [pc, #28]	; (800b12c <HAL_RCC_OscConfig+0x2b8>)
 800b110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b116:	f7fe fa3d 	bl	8009594 <HAL_GetTick>
 800b11a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b11c:	e011      	b.n	800b142 <HAL_RCC_OscConfig+0x2ce>
 800b11e:	bf00      	nop
 800b120:	40023800 	.word	0x40023800
 800b124:	42470000 	.word	0x42470000
 800b128:	42470e80 	.word	0x42470e80
 800b12c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b130:	f7fe fa30 	bl	8009594 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d901      	bls.n	800b142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b13e:	2303      	movs	r3, #3
 800b140:	e106      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b142:	4b85      	ldr	r3, [pc, #532]	; (800b358 <HAL_RCC_OscConfig+0x4e4>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d0f0      	beq.n	800b130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d106      	bne.n	800b164 <HAL_RCC_OscConfig+0x2f0>
 800b156:	4b81      	ldr	r3, [pc, #516]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b15a:	4a80      	ldr	r2, [pc, #512]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b15c:	f043 0301 	orr.w	r3, r3, #1
 800b160:	6713      	str	r3, [r2, #112]	; 0x70
 800b162:	e01c      	b.n	800b19e <HAL_RCC_OscConfig+0x32a>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	2b05      	cmp	r3, #5
 800b16a:	d10c      	bne.n	800b186 <HAL_RCC_OscConfig+0x312>
 800b16c:	4b7b      	ldr	r3, [pc, #492]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b170:	4a7a      	ldr	r2, [pc, #488]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b172:	f043 0304 	orr.w	r3, r3, #4
 800b176:	6713      	str	r3, [r2, #112]	; 0x70
 800b178:	4b78      	ldr	r3, [pc, #480]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17c:	4a77      	ldr	r2, [pc, #476]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b17e:	f043 0301 	orr.w	r3, r3, #1
 800b182:	6713      	str	r3, [r2, #112]	; 0x70
 800b184:	e00b      	b.n	800b19e <HAL_RCC_OscConfig+0x32a>
 800b186:	4b75      	ldr	r3, [pc, #468]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b18a:	4a74      	ldr	r2, [pc, #464]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	6713      	str	r3, [r2, #112]	; 0x70
 800b192:	4b72      	ldr	r3, [pc, #456]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b196:	4a71      	ldr	r2, [pc, #452]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b198:	f023 0304 	bic.w	r3, r3, #4
 800b19c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d015      	beq.n	800b1d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1a6:	f7fe f9f5 	bl	8009594 <HAL_GetTick>
 800b1aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1ac:	e00a      	b.n	800b1c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1ae:	f7fe f9f1 	bl	8009594 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d901      	bls.n	800b1c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e0c5      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1c4:	4b65      	ldr	r3, [pc, #404]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c8:	f003 0302 	and.w	r3, r3, #2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0ee      	beq.n	800b1ae <HAL_RCC_OscConfig+0x33a>
 800b1d0:	e014      	b.n	800b1fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1d2:	f7fe f9df 	bl	8009594 <HAL_GetTick>
 800b1d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1d8:	e00a      	b.n	800b1f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1da:	f7fe f9db 	bl	8009594 <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d901      	bls.n	800b1f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e0af      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1f0:	4b5a      	ldr	r3, [pc, #360]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f4:	f003 0302 	and.w	r3, r3, #2
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1ee      	bne.n	800b1da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d105      	bne.n	800b20e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b202:	4b56      	ldr	r3, [pc, #344]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	4a55      	ldr	r2, [pc, #340]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b20c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 809b 	beq.w	800b34e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b218:	4b50      	ldr	r3, [pc, #320]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f003 030c 	and.w	r3, r3, #12
 800b220:	2b08      	cmp	r3, #8
 800b222:	d05c      	beq.n	800b2de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d141      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b22c:	4b4c      	ldr	r3, [pc, #304]	; (800b360 <HAL_RCC_OscConfig+0x4ec>)
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b232:	f7fe f9af 	bl	8009594 <HAL_GetTick>
 800b236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b238:	e008      	b.n	800b24c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b23a:	f7fe f9ab 	bl	8009594 <HAL_GetTick>
 800b23e:	4602      	mov	r2, r0
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	2b02      	cmp	r3, #2
 800b246:	d901      	bls.n	800b24c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e081      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b24c:	4b43      	ldr	r3, [pc, #268]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1f0      	bne.n	800b23a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	69da      	ldr	r2, [r3, #28]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a1b      	ldr	r3, [r3, #32]
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	019b      	lsls	r3, r3, #6
 800b268:	431a      	orrs	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	085b      	lsrs	r3, r3, #1
 800b270:	3b01      	subs	r3, #1
 800b272:	041b      	lsls	r3, r3, #16
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27a:	061b      	lsls	r3, r3, #24
 800b27c:	4937      	ldr	r1, [pc, #220]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b282:	4b37      	ldr	r3, [pc, #220]	; (800b360 <HAL_RCC_OscConfig+0x4ec>)
 800b284:	2201      	movs	r2, #1
 800b286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b288:	f7fe f984 	bl	8009594 <HAL_GetTick>
 800b28c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b28e:	e008      	b.n	800b2a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b290:	f7fe f980 	bl	8009594 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e056      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2a2:	4b2e      	ldr	r3, [pc, #184]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0f0      	beq.n	800b290 <HAL_RCC_OscConfig+0x41c>
 800b2ae:	e04e      	b.n	800b34e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2b0:	4b2b      	ldr	r3, [pc, #172]	; (800b360 <HAL_RCC_OscConfig+0x4ec>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2b6:	f7fe f96d 	bl	8009594 <HAL_GetTick>
 800b2ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2bc:	e008      	b.n	800b2d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2be:	f7fe f969 	bl	8009594 <HAL_GetTick>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d901      	bls.n	800b2d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e03f      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2d0:	4b22      	ldr	r3, [pc, #136]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1f0      	bne.n	800b2be <HAL_RCC_OscConfig+0x44a>
 800b2dc:	e037      	b.n	800b34e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d101      	bne.n	800b2ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e032      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b2ea:	4b1c      	ldr	r3, [pc, #112]	; (800b35c <HAL_RCC_OscConfig+0x4e8>)
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d028      	beq.n	800b34a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b302:	429a      	cmp	r2, r3
 800b304:	d121      	bne.n	800b34a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b310:	429a      	cmp	r2, r3
 800b312:	d11a      	bne.n	800b34a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b31a:	4013      	ands	r3, r2
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b320:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b322:	4293      	cmp	r3, r2
 800b324:	d111      	bne.n	800b34a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b330:	085b      	lsrs	r3, r3, #1
 800b332:	3b01      	subs	r3, #1
 800b334:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b336:	429a      	cmp	r2, r3
 800b338:	d107      	bne.n	800b34a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b344:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b346:	429a      	cmp	r2, r3
 800b348:	d001      	beq.n	800b34e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e000      	b.n	800b350 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	40007000 	.word	0x40007000
 800b35c:	40023800 	.word	0x40023800
 800b360:	42470060 	.word	0x42470060

0800b364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e0cc      	b.n	800b512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b378:	4b68      	ldr	r3, [pc, #416]	; (800b51c <HAL_RCC_ClockConfig+0x1b8>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0307 	and.w	r3, r3, #7
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d90c      	bls.n	800b3a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b386:	4b65      	ldr	r3, [pc, #404]	; (800b51c <HAL_RCC_ClockConfig+0x1b8>)
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	b2d2      	uxtb	r2, r2
 800b38c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b38e:	4b63      	ldr	r3, [pc, #396]	; (800b51c <HAL_RCC_ClockConfig+0x1b8>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0307 	and.w	r3, r3, #7
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d001      	beq.n	800b3a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e0b8      	b.n	800b512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d020      	beq.n	800b3ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3b8:	4b59      	ldr	r3, [pc, #356]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	4a58      	ldr	r2, [pc, #352]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b3be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b3c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0308 	and.w	r3, r3, #8
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d005      	beq.n	800b3dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b3d0:	4b53      	ldr	r3, [pc, #332]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	4a52      	ldr	r2, [pc, #328]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b3d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b3da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3dc:	4b50      	ldr	r3, [pc, #320]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	494d      	ldr	r1, [pc, #308]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d044      	beq.n	800b484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d107      	bne.n	800b412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b402:	4b47      	ldr	r3, [pc, #284]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d119      	bne.n	800b442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e07f      	b.n	800b512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2b02      	cmp	r3, #2
 800b418:	d003      	beq.n	800b422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d107      	bne.n	800b432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b422:	4b3f      	ldr	r3, [pc, #252]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d109      	bne.n	800b442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e06f      	b.n	800b512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b432:	4b3b      	ldr	r3, [pc, #236]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 0302 	and.w	r3, r3, #2
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e067      	b.n	800b512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b442:	4b37      	ldr	r3, [pc, #220]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f023 0203 	bic.w	r2, r3, #3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4934      	ldr	r1, [pc, #208]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b450:	4313      	orrs	r3, r2
 800b452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b454:	f7fe f89e 	bl	8009594 <HAL_GetTick>
 800b458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b45a:	e00a      	b.n	800b472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b45c:	f7fe f89a 	bl	8009594 <HAL_GetTick>
 800b460:	4602      	mov	r2, r0
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d901      	bls.n	800b472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e04f      	b.n	800b512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b472:	4b2b      	ldr	r3, [pc, #172]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f003 020c 	and.w	r2, r3, #12
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	429a      	cmp	r2, r3
 800b482:	d1eb      	bne.n	800b45c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b484:	4b25      	ldr	r3, [pc, #148]	; (800b51c <HAL_RCC_ClockConfig+0x1b8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 0307 	and.w	r3, r3, #7
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d20c      	bcs.n	800b4ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b492:	4b22      	ldr	r3, [pc, #136]	; (800b51c <HAL_RCC_ClockConfig+0x1b8>)
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	b2d2      	uxtb	r2, r2
 800b498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b49a:	4b20      	ldr	r3, [pc, #128]	; (800b51c <HAL_RCC_ClockConfig+0x1b8>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0307 	and.w	r3, r3, #7
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d001      	beq.n	800b4ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e032      	b.n	800b512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0304 	and.w	r3, r3, #4
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d008      	beq.n	800b4ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4b8:	4b19      	ldr	r3, [pc, #100]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	4916      	ldr	r1, [pc, #88]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0308 	and.w	r3, r3, #8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d009      	beq.n	800b4ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b4d6:	4b12      	ldr	r3, [pc, #72]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	490e      	ldr	r1, [pc, #56]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b4ea:	f000 f821 	bl	800b530 <HAL_RCC_GetSysClockFreq>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	091b      	lsrs	r3, r3, #4
 800b4f6:	f003 030f 	and.w	r3, r3, #15
 800b4fa:	490a      	ldr	r1, [pc, #40]	; (800b524 <HAL_RCC_ClockConfig+0x1c0>)
 800b4fc:	5ccb      	ldrb	r3, [r1, r3]
 800b4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b502:	4a09      	ldr	r2, [pc, #36]	; (800b528 <HAL_RCC_ClockConfig+0x1c4>)
 800b504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b506:	4b09      	ldr	r3, [pc, #36]	; (800b52c <HAL_RCC_ClockConfig+0x1c8>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fd fffe 	bl	800950c <HAL_InitTick>

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	40023c00 	.word	0x40023c00
 800b520:	40023800 	.word	0x40023800
 800b524:	0800f1fc 	.word	0x0800f1fc
 800b528:	20000000 	.word	0x20000000
 800b52c:	200001a0 	.word	0x200001a0

0800b530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	607b      	str	r3, [r7, #4]
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]
 800b540:	2300      	movs	r3, #0
 800b542:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b544:	2300      	movs	r3, #0
 800b546:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b548:	4b67      	ldr	r3, [pc, #412]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f003 030c 	and.w	r3, r3, #12
 800b550:	2b08      	cmp	r3, #8
 800b552:	d00d      	beq.n	800b570 <HAL_RCC_GetSysClockFreq+0x40>
 800b554:	2b08      	cmp	r3, #8
 800b556:	f200 80bd 	bhi.w	800b6d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <HAL_RCC_GetSysClockFreq+0x34>
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d003      	beq.n	800b56a <HAL_RCC_GetSysClockFreq+0x3a>
 800b562:	e0b7      	b.n	800b6d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b564:	4b61      	ldr	r3, [pc, #388]	; (800b6ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b566:	60bb      	str	r3, [r7, #8]
       break;
 800b568:	e0b7      	b.n	800b6da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b56a:	4b61      	ldr	r3, [pc, #388]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800b56c:	60bb      	str	r3, [r7, #8]
      break;
 800b56e:	e0b4      	b.n	800b6da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b570:	4b5d      	ldr	r3, [pc, #372]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b578:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b57a:	4b5b      	ldr	r3, [pc, #364]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d04d      	beq.n	800b622 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b586:	4b58      	ldr	r3, [pc, #352]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	099b      	lsrs	r3, r3, #6
 800b58c:	461a      	mov	r2, r3
 800b58e:	f04f 0300 	mov.w	r3, #0
 800b592:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b596:	f04f 0100 	mov.w	r1, #0
 800b59a:	ea02 0800 	and.w	r8, r2, r0
 800b59e:	ea03 0901 	and.w	r9, r3, r1
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	f04f 0200 	mov.w	r2, #0
 800b5aa:	f04f 0300 	mov.w	r3, #0
 800b5ae:	014b      	lsls	r3, r1, #5
 800b5b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b5b4:	0142      	lsls	r2, r0, #5
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	ebb0 0008 	subs.w	r0, r0, r8
 800b5be:	eb61 0109 	sbc.w	r1, r1, r9
 800b5c2:	f04f 0200 	mov.w	r2, #0
 800b5c6:	f04f 0300 	mov.w	r3, #0
 800b5ca:	018b      	lsls	r3, r1, #6
 800b5cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b5d0:	0182      	lsls	r2, r0, #6
 800b5d2:	1a12      	subs	r2, r2, r0
 800b5d4:	eb63 0301 	sbc.w	r3, r3, r1
 800b5d8:	f04f 0000 	mov.w	r0, #0
 800b5dc:	f04f 0100 	mov.w	r1, #0
 800b5e0:	00d9      	lsls	r1, r3, #3
 800b5e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b5e6:	00d0      	lsls	r0, r2, #3
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	eb12 0208 	adds.w	r2, r2, r8
 800b5f0:	eb43 0309 	adc.w	r3, r3, r9
 800b5f4:	f04f 0000 	mov.w	r0, #0
 800b5f8:	f04f 0100 	mov.w	r1, #0
 800b5fc:	0259      	lsls	r1, r3, #9
 800b5fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b602:	0250      	lsls	r0, r2, #9
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4610      	mov	r0, r2
 800b60a:	4619      	mov	r1, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	461a      	mov	r2, r3
 800b610:	f04f 0300 	mov.w	r3, #0
 800b614:	f7f5 fb18 	bl	8000c48 <__aeabi_uldivmod>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4613      	mov	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	e04a      	b.n	800b6b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b622:	4b31      	ldr	r3, [pc, #196]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	099b      	lsrs	r3, r3, #6
 800b628:	461a      	mov	r2, r3
 800b62a:	f04f 0300 	mov.w	r3, #0
 800b62e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b632:	f04f 0100 	mov.w	r1, #0
 800b636:	ea02 0400 	and.w	r4, r2, r0
 800b63a:	ea03 0501 	and.w	r5, r3, r1
 800b63e:	4620      	mov	r0, r4
 800b640:	4629      	mov	r1, r5
 800b642:	f04f 0200 	mov.w	r2, #0
 800b646:	f04f 0300 	mov.w	r3, #0
 800b64a:	014b      	lsls	r3, r1, #5
 800b64c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b650:	0142      	lsls	r2, r0, #5
 800b652:	4610      	mov	r0, r2
 800b654:	4619      	mov	r1, r3
 800b656:	1b00      	subs	r0, r0, r4
 800b658:	eb61 0105 	sbc.w	r1, r1, r5
 800b65c:	f04f 0200 	mov.w	r2, #0
 800b660:	f04f 0300 	mov.w	r3, #0
 800b664:	018b      	lsls	r3, r1, #6
 800b666:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b66a:	0182      	lsls	r2, r0, #6
 800b66c:	1a12      	subs	r2, r2, r0
 800b66e:	eb63 0301 	sbc.w	r3, r3, r1
 800b672:	f04f 0000 	mov.w	r0, #0
 800b676:	f04f 0100 	mov.w	r1, #0
 800b67a:	00d9      	lsls	r1, r3, #3
 800b67c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b680:	00d0      	lsls	r0, r2, #3
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	1912      	adds	r2, r2, r4
 800b688:	eb45 0303 	adc.w	r3, r5, r3
 800b68c:	f04f 0000 	mov.w	r0, #0
 800b690:	f04f 0100 	mov.w	r1, #0
 800b694:	0299      	lsls	r1, r3, #10
 800b696:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b69a:	0290      	lsls	r0, r2, #10
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	f7f5 facc 	bl	8000c48 <__aeabi_uldivmod>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b6b8:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	0c1b      	lsrs	r3, r3, #16
 800b6be:	f003 0303 	and.w	r3, r3, #3
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6d0:	60bb      	str	r3, [r7, #8]
      break;
 800b6d2:	e002      	b.n	800b6da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b6d4:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b6d6:	60bb      	str	r3, [r7, #8]
      break;
 800b6d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b6da:	68bb      	ldr	r3, [r7, #8]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b6e6:	bf00      	nop
 800b6e8:	40023800 	.word	0x40023800
 800b6ec:	00f42400 	.word	0x00f42400
 800b6f0:	007a1200 	.word	0x007a1200

0800b6f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6f8:	4b03      	ldr	r3, [pc, #12]	; (800b708 <HAL_RCC_GetHCLKFreq+0x14>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20000000 	.word	0x20000000

0800b70c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b710:	f7ff fff0 	bl	800b6f4 <HAL_RCC_GetHCLKFreq>
 800b714:	4602      	mov	r2, r0
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	0a9b      	lsrs	r3, r3, #10
 800b71c:	f003 0307 	and.w	r3, r3, #7
 800b720:	4903      	ldr	r1, [pc, #12]	; (800b730 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b722:	5ccb      	ldrb	r3, [r1, r3]
 800b724:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b728:	4618      	mov	r0, r3
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	40023800 	.word	0x40023800
 800b730:	0800f20c 	.word	0x0800f20c

0800b734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b738:	f7ff ffdc 	bl	800b6f4 <HAL_RCC_GetHCLKFreq>
 800b73c:	4602      	mov	r2, r0
 800b73e:	4b05      	ldr	r3, [pc, #20]	; (800b754 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	0b5b      	lsrs	r3, r3, #13
 800b744:	f003 0307 	and.w	r3, r3, #7
 800b748:	4903      	ldr	r1, [pc, #12]	; (800b758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b74a:	5ccb      	ldrb	r3, [r1, r3]
 800b74c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b750:	4618      	mov	r0, r3
 800b752:	bd80      	pop	{r7, pc}
 800b754:	40023800 	.word	0x40023800
 800b758:	0800f20c 	.word	0x0800f20c

0800b75c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e03f      	b.n	800b7ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f837 	bl	800b7f6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2224      	movs	r2, #36	; 0x24
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b79e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f933 	bl	800ba0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691a      	ldr	r2, [r3, #16]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	695a      	ldr	r2, [r3, #20]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2220      	movs	r2, #32
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2220      	movs	r2, #32
 800b7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b08a      	sub	sp, #40	; 0x28
 800b80e:	af02      	add	r7, sp, #8
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	603b      	str	r3, [r7, #0]
 800b816:	4613      	mov	r3, r2
 800b818:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b20      	cmp	r3, #32
 800b828:	d17c      	bne.n	800b924 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_UART_Transmit+0x2c>
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e075      	b.n	800b926 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b840:	2b01      	cmp	r3, #1
 800b842:	d101      	bne.n	800b848 <HAL_UART_Transmit+0x3e>
 800b844:	2302      	movs	r3, #2
 800b846:	e06e      	b.n	800b926 <HAL_UART_Transmit+0x11c>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2221      	movs	r2, #33	; 0x21
 800b85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b85e:	f7fd fe99 	bl	8009594 <HAL_GetTick>
 800b862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	88fa      	ldrh	r2, [r7, #6]
 800b868:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	88fa      	ldrh	r2, [r7, #6]
 800b86e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b878:	d108      	bne.n	800b88c <HAL_UART_Transmit+0x82>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d104      	bne.n	800b88c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	61bb      	str	r3, [r7, #24]
 800b88a:	e003      	b.n	800b894 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b890:	2300      	movs	r3, #0
 800b892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b89c:	e02a      	b.n	800b8f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2180      	movs	r1, #128	; 0x80
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 f840 	bl	800b92e <UART_WaitOnFlagUntilTimeout>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e036      	b.n	800b926 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10b      	bne.n	800b8d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	3302      	adds	r3, #2
 800b8d2:	61bb      	str	r3, [r7, #24]
 800b8d4:	e007      	b.n	800b8e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	781a      	ldrb	r2, [r3, #0]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1cf      	bne.n	800b89e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2200      	movs	r2, #0
 800b906:	2140      	movs	r1, #64	; 0x40
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 f810 	bl	800b92e <UART_WaitOnFlagUntilTimeout>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	e006      	b.n	800b926 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2220      	movs	r2, #32
 800b91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	e000      	b.n	800b926 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b924:	2302      	movs	r3, #2
  }
}
 800b926:	4618      	mov	r0, r3
 800b928:	3720      	adds	r7, #32
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b090      	sub	sp, #64	; 0x40
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	603b      	str	r3, [r7, #0]
 800b93a:	4613      	mov	r3, r2
 800b93c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b93e:	e050      	b.n	800b9e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b946:	d04c      	beq.n	800b9e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d007      	beq.n	800b95e <UART_WaitOnFlagUntilTimeout+0x30>
 800b94e:	f7fd fe21 	bl	8009594 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d241      	bcs.n	800b9e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	330c      	adds	r3, #12
 800b964:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	e853 3f00 	ldrex	r3, [r3]
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b974:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	330c      	adds	r3, #12
 800b97c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b97e:	637a      	str	r2, [r7, #52]	; 0x34
 800b980:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b986:	e841 2300 	strex	r3, r2, [r1]
 800b98a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1e5      	bne.n	800b95e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3314      	adds	r3, #20
 800b998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f023 0301 	bic.w	r3, r3, #1
 800b9a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3314      	adds	r3, #20
 800b9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b2:	623a      	str	r2, [r7, #32]
 800b9b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b6:	69f9      	ldr	r1, [r7, #28]
 800b9b8:	6a3a      	ldr	r2, [r7, #32]
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e5      	bne.n	800b992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2220      	movs	r2, #32
 800b9d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e00f      	b.n	800ba02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	bf0c      	ite	eq
 800b9f2:	2301      	moveq	r3, #1
 800b9f4:	2300      	movne	r3, #0
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d09f      	beq.n	800b940 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3740      	adds	r7, #64	; 0x40
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	b09f      	sub	sp, #124	; 0x7c
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba22:	68d9      	ldr	r1, [r3, #12]
 800ba24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	ea40 0301 	orr.w	r3, r0, r1
 800ba2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba30:	689a      	ldr	r2, [r3, #8]
 800ba32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	431a      	orrs	r2, r3
 800ba38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ba46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba50:	f021 010c 	bic.w	r1, r1, #12
 800ba54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba5a:	430b      	orrs	r3, r1
 800ba5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba6a:	6999      	ldr	r1, [r3, #24]
 800ba6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	ea40 0301 	orr.w	r3, r0, r1
 800ba74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	4bc5      	ldr	r3, [pc, #788]	; (800bd90 <UART_SetConfig+0x384>)
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d004      	beq.n	800ba8a <UART_SetConfig+0x7e>
 800ba80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	4bc3      	ldr	r3, [pc, #780]	; (800bd94 <UART_SetConfig+0x388>)
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d103      	bne.n	800ba92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba8a:	f7ff fe53 	bl	800b734 <HAL_RCC_GetPCLK2Freq>
 800ba8e:	6778      	str	r0, [r7, #116]	; 0x74
 800ba90:	e002      	b.n	800ba98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba92:	f7ff fe3b 	bl	800b70c <HAL_RCC_GetPCLK1Freq>
 800ba96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baa0:	f040 80b6 	bne.w	800bc10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800baa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baa6:	461c      	mov	r4, r3
 800baa8:	f04f 0500 	mov.w	r5, #0
 800baac:	4622      	mov	r2, r4
 800baae:	462b      	mov	r3, r5
 800bab0:	1891      	adds	r1, r2, r2
 800bab2:	6439      	str	r1, [r7, #64]	; 0x40
 800bab4:	415b      	adcs	r3, r3
 800bab6:	647b      	str	r3, [r7, #68]	; 0x44
 800bab8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800babc:	1912      	adds	r2, r2, r4
 800babe:	eb45 0303 	adc.w	r3, r5, r3
 800bac2:	f04f 0000 	mov.w	r0, #0
 800bac6:	f04f 0100 	mov.w	r1, #0
 800baca:	00d9      	lsls	r1, r3, #3
 800bacc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bad0:	00d0      	lsls	r0, r2, #3
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	1911      	adds	r1, r2, r4
 800bad8:	6639      	str	r1, [r7, #96]	; 0x60
 800bada:	416b      	adcs	r3, r5
 800badc:	667b      	str	r3, [r7, #100]	; 0x64
 800bade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	461a      	mov	r2, r3
 800bae4:	f04f 0300 	mov.w	r3, #0
 800bae8:	1891      	adds	r1, r2, r2
 800baea:	63b9      	str	r1, [r7, #56]	; 0x38
 800baec:	415b      	adcs	r3, r3
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800baf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800baf8:	f7f5 f8a6 	bl	8000c48 <__aeabi_uldivmod>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	4ba5      	ldr	r3, [pc, #660]	; (800bd98 <UART_SetConfig+0x38c>)
 800bb02:	fba3 2302 	umull	r2, r3, r3, r2
 800bb06:	095b      	lsrs	r3, r3, #5
 800bb08:	011e      	lsls	r6, r3, #4
 800bb0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb0c:	461c      	mov	r4, r3
 800bb0e:	f04f 0500 	mov.w	r5, #0
 800bb12:	4622      	mov	r2, r4
 800bb14:	462b      	mov	r3, r5
 800bb16:	1891      	adds	r1, r2, r2
 800bb18:	6339      	str	r1, [r7, #48]	; 0x30
 800bb1a:	415b      	adcs	r3, r3
 800bb1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bb22:	1912      	adds	r2, r2, r4
 800bb24:	eb45 0303 	adc.w	r3, r5, r3
 800bb28:	f04f 0000 	mov.w	r0, #0
 800bb2c:	f04f 0100 	mov.w	r1, #0
 800bb30:	00d9      	lsls	r1, r3, #3
 800bb32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb36:	00d0      	lsls	r0, r2, #3
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	1911      	adds	r1, r2, r4
 800bb3e:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb40:	416b      	adcs	r3, r5
 800bb42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f04f 0300 	mov.w	r3, #0
 800bb4e:	1891      	adds	r1, r2, r2
 800bb50:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb52:	415b      	adcs	r3, r3
 800bb54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bb5e:	f7f5 f873 	bl	8000c48 <__aeabi_uldivmod>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4b8c      	ldr	r3, [pc, #560]	; (800bd98 <UART_SetConfig+0x38c>)
 800bb68:	fba3 1302 	umull	r1, r3, r3, r2
 800bb6c:	095b      	lsrs	r3, r3, #5
 800bb6e:	2164      	movs	r1, #100	; 0x64
 800bb70:	fb01 f303 	mul.w	r3, r1, r3
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	3332      	adds	r3, #50	; 0x32
 800bb7a:	4a87      	ldr	r2, [pc, #540]	; (800bd98 <UART_SetConfig+0x38c>)
 800bb7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb80:	095b      	lsrs	r3, r3, #5
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb88:	441e      	add	r6, r3
 800bb8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f04f 0100 	mov.w	r1, #0
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	1894      	adds	r4, r2, r2
 800bb98:	623c      	str	r4, [r7, #32]
 800bb9a:	415b      	adcs	r3, r3
 800bb9c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bba2:	1812      	adds	r2, r2, r0
 800bba4:	eb41 0303 	adc.w	r3, r1, r3
 800bba8:	f04f 0400 	mov.w	r4, #0
 800bbac:	f04f 0500 	mov.w	r5, #0
 800bbb0:	00dd      	lsls	r5, r3, #3
 800bbb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bbb6:	00d4      	lsls	r4, r2, #3
 800bbb8:	4622      	mov	r2, r4
 800bbba:	462b      	mov	r3, r5
 800bbbc:	1814      	adds	r4, r2, r0
 800bbbe:	653c      	str	r4, [r7, #80]	; 0x50
 800bbc0:	414b      	adcs	r3, r1
 800bbc2:	657b      	str	r3, [r7, #84]	; 0x54
 800bbc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	f04f 0300 	mov.w	r3, #0
 800bbce:	1891      	adds	r1, r2, r2
 800bbd0:	61b9      	str	r1, [r7, #24]
 800bbd2:	415b      	adcs	r3, r3
 800bbd4:	61fb      	str	r3, [r7, #28]
 800bbd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800bbde:	f7f5 f833 	bl	8000c48 <__aeabi_uldivmod>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4b6c      	ldr	r3, [pc, #432]	; (800bd98 <UART_SetConfig+0x38c>)
 800bbe8:	fba3 1302 	umull	r1, r3, r3, r2
 800bbec:	095b      	lsrs	r3, r3, #5
 800bbee:	2164      	movs	r1, #100	; 0x64
 800bbf0:	fb01 f303 	mul.w	r3, r1, r3
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	3332      	adds	r3, #50	; 0x32
 800bbfa:	4a67      	ldr	r2, [pc, #412]	; (800bd98 <UART_SetConfig+0x38c>)
 800bbfc:	fba2 2303 	umull	r2, r3, r2, r3
 800bc00:	095b      	lsrs	r3, r3, #5
 800bc02:	f003 0207 	and.w	r2, r3, #7
 800bc06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4432      	add	r2, r6
 800bc0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc0e:	e0b9      	b.n	800bd84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc12:	461c      	mov	r4, r3
 800bc14:	f04f 0500 	mov.w	r5, #0
 800bc18:	4622      	mov	r2, r4
 800bc1a:	462b      	mov	r3, r5
 800bc1c:	1891      	adds	r1, r2, r2
 800bc1e:	6139      	str	r1, [r7, #16]
 800bc20:	415b      	adcs	r3, r3
 800bc22:	617b      	str	r3, [r7, #20]
 800bc24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc28:	1912      	adds	r2, r2, r4
 800bc2a:	eb45 0303 	adc.w	r3, r5, r3
 800bc2e:	f04f 0000 	mov.w	r0, #0
 800bc32:	f04f 0100 	mov.w	r1, #0
 800bc36:	00d9      	lsls	r1, r3, #3
 800bc38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc3c:	00d0      	lsls	r0, r2, #3
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	eb12 0804 	adds.w	r8, r2, r4
 800bc46:	eb43 0905 	adc.w	r9, r3, r5
 800bc4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f04f 0100 	mov.w	r1, #0
 800bc54:	f04f 0200 	mov.w	r2, #0
 800bc58:	f04f 0300 	mov.w	r3, #0
 800bc5c:	008b      	lsls	r3, r1, #2
 800bc5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc62:	0082      	lsls	r2, r0, #2
 800bc64:	4640      	mov	r0, r8
 800bc66:	4649      	mov	r1, r9
 800bc68:	f7f4 ffee 	bl	8000c48 <__aeabi_uldivmod>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	4b49      	ldr	r3, [pc, #292]	; (800bd98 <UART_SetConfig+0x38c>)
 800bc72:	fba3 2302 	umull	r2, r3, r3, r2
 800bc76:	095b      	lsrs	r3, r3, #5
 800bc78:	011e      	lsls	r6, r3, #4
 800bc7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f04f 0100 	mov.w	r1, #0
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	1894      	adds	r4, r2, r2
 800bc88:	60bc      	str	r4, [r7, #8]
 800bc8a:	415b      	adcs	r3, r3
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc92:	1812      	adds	r2, r2, r0
 800bc94:	eb41 0303 	adc.w	r3, r1, r3
 800bc98:	f04f 0400 	mov.w	r4, #0
 800bc9c:	f04f 0500 	mov.w	r5, #0
 800bca0:	00dd      	lsls	r5, r3, #3
 800bca2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bca6:	00d4      	lsls	r4, r2, #3
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	1814      	adds	r4, r2, r0
 800bcae:	64bc      	str	r4, [r7, #72]	; 0x48
 800bcb0:	414b      	adcs	r3, r1
 800bcb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f04f 0100 	mov.w	r1, #0
 800bcbe:	f04f 0200 	mov.w	r2, #0
 800bcc2:	f04f 0300 	mov.w	r3, #0
 800bcc6:	008b      	lsls	r3, r1, #2
 800bcc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bccc:	0082      	lsls	r2, r0, #2
 800bcce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bcd2:	f7f4 ffb9 	bl	8000c48 <__aeabi_uldivmod>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4b2f      	ldr	r3, [pc, #188]	; (800bd98 <UART_SetConfig+0x38c>)
 800bcdc:	fba3 1302 	umull	r1, r3, r3, r2
 800bce0:	095b      	lsrs	r3, r3, #5
 800bce2:	2164      	movs	r1, #100	; 0x64
 800bce4:	fb01 f303 	mul.w	r3, r1, r3
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	011b      	lsls	r3, r3, #4
 800bcec:	3332      	adds	r3, #50	; 0x32
 800bcee:	4a2a      	ldr	r2, [pc, #168]	; (800bd98 <UART_SetConfig+0x38c>)
 800bcf0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf4:	095b      	lsrs	r3, r3, #5
 800bcf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcfa:	441e      	add	r6, r3
 800bcfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f04f 0100 	mov.w	r1, #0
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	1894      	adds	r4, r2, r2
 800bd0a:	603c      	str	r4, [r7, #0]
 800bd0c:	415b      	adcs	r3, r3
 800bd0e:	607b      	str	r3, [r7, #4]
 800bd10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd14:	1812      	adds	r2, r2, r0
 800bd16:	eb41 0303 	adc.w	r3, r1, r3
 800bd1a:	f04f 0400 	mov.w	r4, #0
 800bd1e:	f04f 0500 	mov.w	r5, #0
 800bd22:	00dd      	lsls	r5, r3, #3
 800bd24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd28:	00d4      	lsls	r4, r2, #3
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	eb12 0a00 	adds.w	sl, r2, r0
 800bd32:	eb43 0b01 	adc.w	fp, r3, r1
 800bd36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f04f 0100 	mov.w	r1, #0
 800bd40:	f04f 0200 	mov.w	r2, #0
 800bd44:	f04f 0300 	mov.w	r3, #0
 800bd48:	008b      	lsls	r3, r1, #2
 800bd4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd4e:	0082      	lsls	r2, r0, #2
 800bd50:	4650      	mov	r0, sl
 800bd52:	4659      	mov	r1, fp
 800bd54:	f7f4 ff78 	bl	8000c48 <__aeabi_uldivmod>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4b0e      	ldr	r3, [pc, #56]	; (800bd98 <UART_SetConfig+0x38c>)
 800bd5e:	fba3 1302 	umull	r1, r3, r3, r2
 800bd62:	095b      	lsrs	r3, r3, #5
 800bd64:	2164      	movs	r1, #100	; 0x64
 800bd66:	fb01 f303 	mul.w	r3, r1, r3
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	011b      	lsls	r3, r3, #4
 800bd6e:	3332      	adds	r3, #50	; 0x32
 800bd70:	4a09      	ldr	r2, [pc, #36]	; (800bd98 <UART_SetConfig+0x38c>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	095b      	lsrs	r3, r3, #5
 800bd78:	f003 020f 	and.w	r2, r3, #15
 800bd7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4432      	add	r2, r6
 800bd82:	609a      	str	r2, [r3, #8]
}
 800bd84:	bf00      	nop
 800bd86:	377c      	adds	r7, #124	; 0x7c
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8e:	bf00      	nop
 800bd90:	40011000 	.word	0x40011000
 800bd94:	40011400 	.word	0x40011400
 800bd98:	51eb851f 	.word	0x51eb851f

0800bd9c <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 800bda0:	f000 f808 	bl	800bdb4 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800bda4:	bf00      	nop
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS01A3_DataLogTerminal_Process();
 800bdac:	f000 f9dc 	bl	800c168 <MX_IKS01A3_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800bdb0:	bf00      	nop
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 800bdb4:	b5b0      	push	{r4, r5, r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800bdba:	2000      	movs	r0, #0
 800bdbc:	f7fd f9aa 	bl	8009114 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	f7fd f9fa 	bl	80091bc <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800bdc8:	2000      	movs	r0, #0
 800bdca:	f7fd fa4b 	bl	8009264 <BSP_PB_GetState>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	bf0c      	ite	eq
 800bdd4:	2301      	moveq	r3, #1
 800bdd6:	2300      	movne	r3, #0
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	461a      	mov	r2, r3
 800bddc:	4b75      	ldr	r3, [pc, #468]	; (800bfb4 <MX_IKS01A3_DataLogTerminal_Init+0x200>)
 800bdde:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800bde0:	2000      	movs	r0, #0
 800bde2:	f7fd faa1 	bl	8009328 <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 800bde6:	2103      	movs	r1, #3
 800bde8:	2000      	movs	r0, #0
 800bdea:	f7fc fd67 	bl	80088bc <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800bdee:	2102      	movs	r1, #2
 800bdf0:	2001      	movs	r0, #1
 800bdf2:	f7fc fd63 	bl	80088bc <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800bdf6:	2104      	movs	r1, #4
 800bdf8:	2002      	movs	r0, #2
 800bdfa:	f7fc fd5f 	bl	80088bc <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	e0c3      	b.n	800bf8c <MX_IKS01A3_DataLogTerminal_Init+0x1d8>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	4613      	mov	r3, r2
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	1a9b      	subs	r3, r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4a69      	ldr	r2, [pc, #420]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800be12:	4413      	add	r3, r2
 800be14:	4619      	mov	r1, r3
 800be16:	f7fc fe4d 	bl	8008ab4 <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800be1a:	4967      	ldr	r1, [pc, #412]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4613      	mov	r3, r2
 800be20:	00db      	lsls	r3, r3, #3
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	440b      	add	r3, r1
 800be28:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be2a:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800be2c:	4962      	ldr	r1, [pc, #392]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	4613      	mov	r3, r2
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	1a9b      	subs	r3, r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	440b      	add	r3, r1
 800be3a:	3301      	adds	r3, #1
 800be3c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be3e:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800be40:	495d      	ldr	r1, [pc, #372]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	4613      	mov	r3, r2
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	1a9b      	subs	r3, r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	440b      	add	r3, r1
 800be4e:	3302      	adds	r3, #2
 800be50:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be52:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800be54:	4958      	ldr	r1, [pc, #352]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4613      	mov	r3, r2
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	1a9b      	subs	r3, r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	440b      	add	r3, r1
 800be62:	3303      	adds	r3, #3
 800be64:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	9502      	str	r5, [sp, #8]
 800be6a:	9401      	str	r4, [sp, #4]
 800be6c:	9000      	str	r0, [sp, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4a52      	ldr	r2, [pc, #328]	; (800bfbc <MX_IKS01A3_DataLogTerminal_Init+0x208>)
 800be72:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be76:	4852      	ldr	r0, [pc, #328]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800be78:	f000 feba 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800be7c:	4950      	ldr	r1, [pc, #320]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800be7e:	4851      	ldr	r0, [pc, #324]	; (800bfc4 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800be80:	f000 fe9e 	bl	800cbc0 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800be84:	494c      	ldr	r1, [pc, #304]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	4613      	mov	r3, r2
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	1a9b      	subs	r3, r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	440b      	add	r3, r1
 800be92:	3314      	adds	r3, #20
 800be94:	edd3 7a00 	vldr	s15, [r3]
 800be98:	463b      	mov	r3, r7
 800be9a:	2103      	movs	r1, #3
 800be9c:	4618      	mov	r0, r3
 800be9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bea2:	f000 f9f5 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800beaa:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800beac:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800beae:	4942      	ldr	r1, [pc, #264]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	4613      	mov	r3, r2
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	1a9b      	subs	r3, r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	440b      	add	r3, r1
 800bebc:	3308      	adds	r3, #8
 800bebe:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	9000      	str	r0, [sp, #0]
 800bec4:	4623      	mov	r3, r4
 800bec6:	4a40      	ldr	r2, [pc, #256]	; (800bfc8 <MX_IKS01A3_DataLogTerminal_Init+0x214>)
 800bec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800becc:	483c      	ldr	r0, [pc, #240]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bece:	f000 fe8f 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800bed2:	493b      	ldr	r1, [pc, #236]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bed4:	483b      	ldr	r0, [pc, #236]	; (800bfc4 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bed6:	f000 fe73 	bl	800cbc0 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800beda:	4937      	ldr	r1, [pc, #220]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4613      	mov	r3, r2
 800bee0:	00db      	lsls	r3, r3, #3
 800bee2:	1a9b      	subs	r3, r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	440b      	add	r3, r1
 800bee8:	3310      	adds	r3, #16
 800beea:	edd3 7a00 	vldr	s15, [r3]
 800beee:	463b      	mov	r3, r7
 800bef0:	2103      	movs	r1, #3
 800bef2:	4618      	mov	r0, r3
 800bef4:	eeb0 0a67 	vmov.f32	s0, s15
 800bef8:	f000 f9ca 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800bf00:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bf02:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800bf04:	492c      	ldr	r1, [pc, #176]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	1a9b      	subs	r3, r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	440b      	add	r3, r1
 800bf12:	3304      	adds	r3, #4
 800bf14:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	9000      	str	r0, [sp, #0]
 800bf1a:	4623      	mov	r3, r4
 800bf1c:	4a2b      	ldr	r2, [pc, #172]	; (800bfcc <MX_IKS01A3_DataLogTerminal_Init+0x218>)
 800bf1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf22:	4827      	ldr	r0, [pc, #156]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bf24:	f000 fe64 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800bf28:	4925      	ldr	r1, [pc, #148]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bf2a:	4826      	ldr	r0, [pc, #152]	; (800bfc4 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bf2c:	f000 fe48 	bl	800cbc0 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800bf30:	4921      	ldr	r1, [pc, #132]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	4613      	mov	r3, r2
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	1a9b      	subs	r3, r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	440b      	add	r3, r1
 800bf3e:	3318      	adds	r3, #24
 800bf40:	edd3 7a00 	vldr	s15, [r3]
 800bf44:	463b      	mov	r3, r7
 800bf46:	2103      	movs	r1, #3
 800bf48:	4618      	mov	r0, r3
 800bf4a:	eeb0 0a67 	vmov.f32	s0, s15
 800bf4e:	f000 f99f 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bf56:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bf58:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800bf5a:	4917      	ldr	r1, [pc, #92]	; (800bfb8 <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	00db      	lsls	r3, r3, #3
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	440b      	add	r3, r1
 800bf68:	330c      	adds	r3, #12
 800bf6a:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	9000      	str	r0, [sp, #0]
 800bf70:	4623      	mov	r3, r4
 800bf72:	4a17      	ldr	r2, [pc, #92]	; (800bfd0 <MX_IKS01A3_DataLogTerminal_Init+0x21c>)
 800bf74:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf78:	4811      	ldr	r0, [pc, #68]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bf7a:	f000 fe39 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800bf7e:	4910      	ldr	r1, [pc, #64]	; (800bfc0 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800bf80:	4810      	ldr	r0, [pc, #64]	; (800bfc4 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 800bf82:	f000 fe1d 	bl	800cbc0 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	f67f af38 	bls.w	800be04 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800bf94:	2105      	movs	r1, #5
 800bf96:	2000      	movs	r0, #0
 800bf98:	f7fc f862 	bl	8008060 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800bf9c:	2103      	movs	r1, #3
 800bf9e:	2001      	movs	r0, #1
 800bfa0:	f7fc f85e 	bl	8008060 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	2002      	movs	r0, #2
 800bfa8:	f7fc f85a 	bl	8008060 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	e0b3      	b.n	800c11a <MX_IKS01A3_DataLogTerminal_Init+0x366>
 800bfb2:	bf00      	nop
 800bfb4:	200005a0 	.word	0x200005a0
 800bfb8:	20000404 	.word	0x20000404
 800bfbc:	0800ee20 	.word	0x0800ee20
 800bfc0:	200004a0 	.word	0x200004a0
 800bfc4:	0800ee94 	.word	0x0800ee94
 800bfc8:	0800ee98 	.word	0x0800ee98
 800bfcc:	0800eec4 	.word	0x0800eec4
 800bfd0:	0800eef4 	.word	0x0800eef4
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	4413      	add	r3, r2
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	4a52      	ldr	r2, [pc, #328]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800bfe2:	4413      	add	r3, r2
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	f7fc f949 	bl	800827c <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800bfea:	4950      	ldr	r1, [pc, #320]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	440b      	add	r3, r1
 800bff8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800bffa:	4618      	mov	r0, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800bffc:	494b      	ldr	r1, [pc, #300]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4613      	mov	r3, r2
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	4413      	add	r3, r2
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	440b      	add	r3, r1
 800c00a:	3301      	adds	r3, #1
 800c00c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800c00e:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800c010:	4946      	ldr	r1, [pc, #280]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	4613      	mov	r3, r2
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	4413      	add	r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	440b      	add	r3, r1
 800c01e:	3302      	adds	r3, #2
 800c020:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800c022:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800c024:	4941      	ldr	r1, [pc, #260]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	4613      	mov	r3, r2
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	4413      	add	r3, r2
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	440b      	add	r3, r1
 800c032:	3304      	adds	r3, #4
 800c034:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800c036:	9303      	str	r3, [sp, #12]
 800c038:	9502      	str	r5, [sp, #8]
 800c03a:	9401      	str	r4, [sp, #4]
 800c03c:	9000      	str	r0, [sp, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	4a3b      	ldr	r2, [pc, #236]	; (800c130 <MX_IKS01A3_DataLogTerminal_Init+0x37c>)
 800c042:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c046:	483b      	ldr	r0, [pc, #236]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c048:	f000 fdd2 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800c04c:	4939      	ldr	r1, [pc, #228]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c04e:	483a      	ldr	r0, [pc, #232]	; (800c138 <MX_IKS01A3_DataLogTerminal_Init+0x384>)
 800c050:	f000 fdb6 	bl	800cbc0 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800c054:	4935      	ldr	r1, [pc, #212]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	4613      	mov	r3, r2
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	4413      	add	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	440b      	add	r3, r1
 800c062:	330c      	adds	r3, #12
 800c064:	edd3 7a00 	vldr	s15, [r3]
 800c068:	463b      	mov	r3, r7
 800c06a:	2103      	movs	r1, #3
 800c06c:	4618      	mov	r0, r3
 800c06e:	eeb0 0a67 	vmov.f32	s0, s15
 800c072:	f000 f90d 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800c07a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	4613      	mov	r3, r2
 800c080:	4a2e      	ldr	r2, [pc, #184]	; (800c13c <MX_IKS01A3_DataLogTerminal_Init+0x388>)
 800c082:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c086:	482b      	ldr	r0, [pc, #172]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c088:	f000 fdb2 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800c08c:	4929      	ldr	r1, [pc, #164]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c08e:	482a      	ldr	r0, [pc, #168]	; (800c138 <MX_IKS01A3_DataLogTerminal_Init+0x384>)
 800c090:	f000 fd96 	bl	800cbc0 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800c094:	4925      	ldr	r1, [pc, #148]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4613      	mov	r3, r2
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	4413      	add	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	440b      	add	r3, r1
 800c0a2:	3310      	adds	r3, #16
 800c0a4:	edd3 7a00 	vldr	s15, [r3]
 800c0a8:	463b      	mov	r3, r7
 800c0aa:	2103      	movs	r1, #3
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c0b2:	f000 f8ed 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800c0ba:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <MX_IKS01A3_DataLogTerminal_Init+0x38c>)
 800c0c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0c6:	481b      	ldr	r0, [pc, #108]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c0c8:	f000 fd92 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800c0cc:	4919      	ldr	r1, [pc, #100]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c0ce:	481a      	ldr	r0, [pc, #104]	; (800c138 <MX_IKS01A3_DataLogTerminal_Init+0x384>)
 800c0d0:	f000 fd76 	bl	800cbc0 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800c0d4:	4915      	ldr	r1, [pc, #84]	; (800c12c <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	4413      	add	r3, r2
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	440b      	add	r3, r1
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	edd3 7a00 	vldr	s15, [r3]
 800c0e8:	463b      	mov	r3, r7
 800c0ea:	2103      	movs	r1, #3
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	eeb0 0a67 	vmov.f32	s0, s15
 800c0f2:	f000 f8cd 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	4613      	mov	r3, r2
 800c100:	4a10      	ldr	r2, [pc, #64]	; (800c144 <MX_IKS01A3_DataLogTerminal_Init+0x390>)
 800c102:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c106:	480b      	ldr	r0, [pc, #44]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c108:	f000 fd72 	bl	800cbf0 <sniprintf>
    printf("%s", dataOut);
 800c10c:	4909      	ldr	r1, [pc, #36]	; (800c134 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 800c10e:	480a      	ldr	r0, [pc, #40]	; (800c138 <MX_IKS01A3_DataLogTerminal_Init+0x384>)
 800c110:	f000 fd56 	bl	800cbc0 <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3301      	adds	r3, #1
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	f67f af59 	bls.w	800bfd4 <MX_IKS01A3_DataLogTerminal_Init+0x220>
  }
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bdb0      	pop	{r4, r5, r7, pc}
 800c12c:	20000458 	.word	0x20000458
 800c130:	0800ef20 	.word	0x0800ef20
 800c134:	200004a0 	.word	0x200004a0
 800c138:	0800ee94 	.word	0x0800ee94
 800c13c:	0800ef94 	.word	0x0800ef94
 800c140:	0800efb0 	.word	0x0800efb0
 800c144:	0800efd0 	.word	0x0800efd0

0800c148 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4603      	mov	r3, r0
 800c150:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800c152:	4b04      	ldr	r3, [pc, #16]	; (800c164 <BSP_PB_Callback+0x1c>)
 800c154:	2201      	movs	r2, #1
 800c156:	701a      	strb	r2, [r3, #0]
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	20000401 	.word	0x20000401

0800c168 <MX_IKS01A3_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 800c16e:	4b44      	ldr	r3, [pc, #272]	; (800c280 <MX_IKS01A3_DataLogTerminal_Process+0x118>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	d011      	beq.n	800c19c <MX_IKS01A3_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 800c178:	2032      	movs	r0, #50	; 0x32
 800c17a:	f7fd fa17 	bl	80095ac <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800c17e:	bf00      	nop
 800c180:	2000      	movs	r0, #0
 800c182:	f7fd f86f 	bl	8009264 <BSP_PB_GetState>
 800c186:	4602      	mov	r2, r0
 800c188:	4b3e      	ldr	r3, [pc, #248]	; (800c284 <MX_IKS01A3_DataLogTerminal_Process+0x11c>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d0f7      	beq.n	800c180 <MX_IKS01A3_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800c190:	2032      	movs	r0, #50	; 0x32
 800c192:	f7fd fa0b 	bl	80095ac <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 800c196:	4b3a      	ldr	r3, [pc, #232]	; (800c280 <MX_IKS01A3_DataLogTerminal_Process+0x118>)
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800c19c:	2300      	movs	r3, #0
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	e02e      	b.n	800c200 <MX_IKS01A3_DataLogTerminal_Process+0x98>
  {
    if(MotionCapabilities[i].Acc)
 800c1a2:	4939      	ldr	r1, [pc, #228]	; (800c288 <MX_IKS01A3_DataLogTerminal_Process+0x120>)
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	1a9b      	subs	r3, r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	440b      	add	r3, r1
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d003      	beq.n	800c1be <MX_IKS01A3_DataLogTerminal_Process+0x56>
    {
      Accelero_Sensor_Handler(i);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f8f3 	bl	800c3a4 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800c1be:	4932      	ldr	r1, [pc, #200]	; (800c288 <MX_IKS01A3_DataLogTerminal_Process+0x120>)
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	1a9b      	subs	r3, r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	440b      	add	r3, r1
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <MX_IKS01A3_DataLogTerminal_Process+0x74>
    {
      Gyro_Sensor_Handler(i);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 f998 	bl	800c50c <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 800c1dc:	492a      	ldr	r1, [pc, #168]	; (800c288 <MX_IKS01A3_DataLogTerminal_Process+0x120>)
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	1a9b      	subs	r3, r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	440b      	add	r3, r1
 800c1ea:	3302      	adds	r3, #2
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <MX_IKS01A3_DataLogTerminal_Process+0x92>
    {
      Magneto_Sensor_Handler(i);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 fa3d 	bl	800c674 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	607b      	str	r3, [r7, #4]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b02      	cmp	r3, #2
 800c204:	d9cd      	bls.n	800c1a2 <MX_IKS01A3_DataLogTerminal_Process+0x3a>
    }
  }

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800c206:	2300      	movs	r3, #0
 800c208:	607b      	str	r3, [r7, #4]
 800c20a:	e02e      	b.n	800c26a <MX_IKS01A3_DataLogTerminal_Process+0x102>
  {
    if(EnvCapabilities[i].Humidity)
 800c20c:	491f      	ldr	r1, [pc, #124]	; (800c28c <MX_IKS01A3_DataLogTerminal_Process+0x124>)
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	4613      	mov	r3, r2
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	4413      	add	r3, r2
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	440b      	add	r3, r1
 800c21a:	3302      	adds	r3, #2
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <MX_IKS01A3_DataLogTerminal_Process+0xc2>
    {
      Hum_Sensor_Handler(i);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4618      	mov	r0, r3
 800c226:	f000 fc07 	bl	800ca38 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 800c22a:	4918      	ldr	r1, [pc, #96]	; (800c28c <MX_IKS01A3_DataLogTerminal_Process+0x124>)
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	440b      	add	r3, r1
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <MX_IKS01A3_DataLogTerminal_Process+0xde>
    {
      Temp_Sensor_Handler(i);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 facb 	bl	800c7dc <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 800c246:	4911      	ldr	r1, [pc, #68]	; (800c28c <MX_IKS01A3_DataLogTerminal_Process+0x124>)
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	4613      	mov	r3, r2
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4413      	add	r3, r2
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	440b      	add	r3, r1
 800c254:	3301      	adds	r3, #1
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <MX_IKS01A3_DataLogTerminal_Process+0xfc>
    {
      Press_Sensor_Handler(i);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fb58 	bl	800c914 <Press_Sensor_Handler>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3301      	adds	r3, #1
 800c268:	607b      	str	r3, [r7, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d9cd      	bls.n	800c20c <MX_IKS01A3_DataLogTerminal_Process+0xa4>
    }
  }

  HAL_Delay( 1000 );
 800c270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c274:	f7fd f99a 	bl	80095ac <HAL_Delay>
}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	20000401 	.word	0x20000401
 800c284:	200005a0 	.word	0x200005a0
 800c288:	20000404 	.word	0x20000404
 800c28c:	20000458 	.word	0x20000458

0800c290 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800c290:	b5b0      	push	{r4, r5, r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	ed87 0a03 	vstr	s0, [r7, #12]
 800c29a:	60b8      	str	r0, [r7, #8]
 800c29c:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 800c29e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2aa:	db03      	blt.n	800c2b4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	e008      	b.n	800c2c6 <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	701a      	strb	r2, [r3, #0]
    in = -in;
 800c2ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2be:	eef1 7a67 	vneg.f32	s15, s15
 800c2c2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f7f4 f93e 	bl	8000548 <__aeabi_f2d>
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7f4 f927 	bl	8000524 <__aeabi_i2d>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	ec43 2b11 	vmov	d1, r2, r3
 800c2de:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 800c398 <floatToInt+0x108>
 800c2e2:	f001 fddb 	bl	800de9c <pow>
 800c2e6:	ec53 2b10 	vmov	r2, r3, d0
 800c2ea:	f04f 0000 	mov.w	r0, #0
 800c2ee:	492c      	ldr	r1, [pc, #176]	; (800c3a0 <floatToInt+0x110>)
 800c2f0:	f7f4 faac 	bl	800084c <__aeabi_ddiv>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	f7f3 ffc6 	bl	800028c <__adddf3>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4610      	mov	r0, r2
 800c306:	4619      	mov	r1, r3
 800c308:	f7f4 fc4e 	bl	8000ba8 <__aeabi_d2f>
 800c30c:	4603      	mov	r3, r0
 800c30e:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 800c310:	edd7 7a03 	vldr	s15, [r7, #12]
 800c314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c318:	ee17 2a90 	vmov	r2, s15
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	ee07 3a90 	vmov	s15, r3
 800c328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32c:	ed97 7a03 	vldr	s14, [r7, #12]
 800c330:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c334:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7f4 f905 	bl	8000548 <__aeabi_f2d>
 800c33e:	4604      	mov	r4, r0
 800c340:	460d      	mov	r5, r1
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7f4 f8ee 	bl	8000524 <__aeabi_i2d>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	ec43 2b11 	vmov	d1, r2, r3
 800c350:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800c398 <floatToInt+0x108>
 800c354:	f001 fda2 	bl	800de9c <pow>
 800c358:	ec53 2b10 	vmov	r2, r3, d0
 800c35c:	4620      	mov	r0, r4
 800c35e:	4629      	mov	r1, r5
 800c360:	f7f4 f94a 	bl	80005f8 <__aeabi_dmul>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	ec43 2b17 	vmov	d7, r2, r3
 800c36c:	eeb0 0a47 	vmov.f32	s0, s14
 800c370:	eef0 0a67 	vmov.f32	s1, s15
 800c374:	f001 fd60 	bl	800de38 <trunc>
 800c378:	ec53 2b10 	vmov	r2, r3, d0
 800c37c:	4610      	mov	r0, r2
 800c37e:	4619      	mov	r1, r3
 800c380:	f7f4 fbea 	bl	8000b58 <__aeabi_d2iz>
 800c384:	4603      	mov	r3, r0
 800c386:	461a      	mov	r2, r3
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	609a      	str	r2, [r3, #8]
}
 800c38c:	bf00      	nop
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bdb0      	pop	{r4, r5, r7, pc}
 800c394:	f3af 8000 	nop.w
 800c398:	00000000 	.word	0x00000000
 800c39c:	40240000 	.word	0x40240000
 800c3a0:	3fe00000 	.word	0x3fe00000

0800c3a4 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 800c3a4:	b5b0      	push	{r4, r5, r7, lr}
 800c3a6:	b092      	sub	sp, #72	; 0x48
 800c3a8:	af06      	add	r7, sp, #24
 800c3aa:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800c3ac:	f107 031c 	add.w	r3, r7, #28
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	2102      	movs	r1, #2
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7fc fbd1 	bl	8008b5c <IKS01A3_MOTION_SENSOR_GetAxes>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d007      	beq.n	800c3d0 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a47      	ldr	r2, [pc, #284]	; (800c4e0 <Accelero_Sensor_Handler+0x13c>)
 800c3c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3c8:	4846      	ldr	r0, [pc, #280]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c3ca:	f000 fc11 	bl	800cbf0 <sniprintf>
 800c3ce:	e011      	b.n	800c3f4 <Accelero_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c3d0:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800c3d2:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c3d4:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800c3d6:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c3d8:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800c3da:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800c3dc:	9404      	str	r4, [sp, #16]
 800c3de:	9003      	str	r0, [sp, #12]
 800c3e0:	9102      	str	r1, [sp, #8]
 800c3e2:	9201      	str	r2, [sp, #4]
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	462b      	mov	r3, r5
 800c3e8:	4a3f      	ldr	r2, [pc, #252]	; (800c4e8 <Accelero_Sensor_Handler+0x144>)
 800c3ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3ee:	483d      	ldr	r0, [pc, #244]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c3f0:	f000 fbfe 	bl	800cbf0 <sniprintf>
  }

  printf("%s", dataOut);
 800c3f4:	493b      	ldr	r1, [pc, #236]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c3f6:	483d      	ldr	r0, [pc, #244]	; (800c4ec <Accelero_Sensor_Handler+0x148>)
 800c3f8:	f000 fbe2 	bl	800cbc0 <iprintf>

  if (verbose == 1)
 800c3fc:	4b3c      	ldr	r3, [pc, #240]	; (800c4f0 <Accelero_Sensor_Handler+0x14c>)
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d168      	bne.n	800c4d6 <Accelero_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800c404:	f107 030f 	add.w	r3, r7, #15
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7fc fb7c 	bl	8008b08 <IKS01A3_MOTION_SENSOR_ReadID>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d007      	beq.n	800c426 <Accelero_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a36      	ldr	r2, [pc, #216]	; (800c4f4 <Accelero_Sensor_Handler+0x150>)
 800c41a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c41e:	4831      	ldr	r0, [pc, #196]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c420:	f000 fbe6 	bl	800cbf0 <sniprintf>
 800c424:	e008      	b.n	800c438 <Accelero_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	7bfa      	ldrb	r2, [r7, #15]
 800c42a:	9200      	str	r2, [sp, #0]
 800c42c:	4a32      	ldr	r2, [pc, #200]	; (800c4f8 <Accelero_Sensor_Handler+0x154>)
 800c42e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c432:	482c      	ldr	r0, [pc, #176]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c434:	f000 fbdc 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c438:	492a      	ldr	r1, [pc, #168]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c43a:	482c      	ldr	r0, [pc, #176]	; (800c4ec <Accelero_Sensor_Handler+0x148>)
 800c43c:	f000 fbc0 	bl	800cbc0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 800c440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c444:	461a      	mov	r2, r3
 800c446:	2102      	movs	r1, #2
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7fc fbcb 	bl	8008be4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d007      	beq.n	800c464 <Accelero_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a29      	ldr	r2, [pc, #164]	; (800c4fc <Accelero_Sensor_Handler+0x158>)
 800c458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c45c:	4821      	ldr	r0, [pc, #132]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c45e:	f000 fbc7 	bl	800cbf0 <sniprintf>
 800c462:	e014      	b.n	800c48e <Accelero_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c464:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c468:	f107 0310 	add.w	r3, r7, #16
 800c46c:	2103      	movs	r1, #3
 800c46e:	4618      	mov	r0, r3
 800c470:	eeb0 0a67 	vmov.f32	s0, s15
 800c474:	f7ff ff0c 	bl	800c290 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800c47c:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c47e:	9101      	str	r1, [sp, #4]
 800c480:	9200      	str	r2, [sp, #0]
 800c482:	4a1f      	ldr	r2, [pc, #124]	; (800c500 <Accelero_Sensor_Handler+0x15c>)
 800c484:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c488:	4816      	ldr	r0, [pc, #88]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c48a:	f000 fbb1 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c48e:	4915      	ldr	r1, [pc, #84]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c490:	4816      	ldr	r0, [pc, #88]	; (800c4ec <Accelero_Sensor_Handler+0x148>)
 800c492:	f000 fb95 	bl	800cbc0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800c496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c49a:	461a      	mov	r2, r3
 800c49c:	2102      	movs	r1, #2
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7fc fbe4 	bl	8008c6c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d007      	beq.n	800c4ba <Accelero_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a15      	ldr	r2, [pc, #84]	; (800c504 <Accelero_Sensor_Handler+0x160>)
 800c4ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4b2:	480c      	ldr	r0, [pc, #48]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c4b4:	f000 fb9c 	bl	800cbf0 <sniprintf>
 800c4b8:	e009      	b.n	800c4ce <Accelero_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	4a11      	ldr	r2, [pc, #68]	; (800c508 <Accelero_Sensor_Handler+0x164>)
 800c4c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4c8:	4806      	ldr	r0, [pc, #24]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c4ca:	f000 fb91 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c4ce:	4905      	ldr	r1, [pc, #20]	; (800c4e4 <Accelero_Sensor_Handler+0x140>)
 800c4d0:	4806      	ldr	r0, [pc, #24]	; (800c4ec <Accelero_Sensor_Handler+0x148>)
 800c4d2:	f000 fb75 	bl	800cbc0 <iprintf>
  }
}
 800c4d6:	bf00      	nop
 800c4d8:	3730      	adds	r7, #48	; 0x30
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	0800efec 	.word	0x0800efec
 800c4e4:	200004a0 	.word	0x200004a0
 800c4e8:	0800f000 	.word	0x0800f000
 800c4ec:	0800ee94 	.word	0x0800ee94
 800c4f0:	200001a5 	.word	0x200001a5
 800c4f4:	0800f030 	.word	0x0800f030
 800c4f8:	0800f044 	.word	0x0800f044
 800c4fc:	0800f058 	.word	0x0800f058
 800c500:	0800f06c 	.word	0x0800f06c
 800c504:	0800f084 	.word	0x0800f084
 800c508:	0800f094 	.word	0x0800f094

0800c50c <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 800c50c:	b5b0      	push	{r4, r5, r7, lr}
 800c50e:	b092      	sub	sp, #72	; 0x48
 800c510:	af06      	add	r7, sp, #24
 800c512:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 800c514:	f107 031c 	add.w	r3, r7, #28
 800c518:	461a      	mov	r2, r3
 800c51a:	2101      	movs	r1, #1
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7fc fb1d 	bl	8008b5c <IKS01A3_MOTION_SENSOR_GetAxes>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d007      	beq.n	800c538 <Gyro_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a47      	ldr	r2, [pc, #284]	; (800c648 <Gyro_Sensor_Handler+0x13c>)
 800c52c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c530:	4846      	ldr	r0, [pc, #280]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c532:	f000 fb5d 	bl	800cbf0 <sniprintf>
 800c536:	e011      	b.n	800c55c <Gyro_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c538:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800c53a:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c53c:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800c53e:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c540:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800c542:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800c544:	9404      	str	r4, [sp, #16]
 800c546:	9003      	str	r0, [sp, #12]
 800c548:	9102      	str	r1, [sp, #8]
 800c54a:	9201      	str	r2, [sp, #4]
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	462b      	mov	r3, r5
 800c550:	4a3f      	ldr	r2, [pc, #252]	; (800c650 <Gyro_Sensor_Handler+0x144>)
 800c552:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c556:	483d      	ldr	r0, [pc, #244]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c558:	f000 fb4a 	bl	800cbf0 <sniprintf>
  }

  printf("%s", dataOut);
 800c55c:	493b      	ldr	r1, [pc, #236]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c55e:	483d      	ldr	r0, [pc, #244]	; (800c654 <Gyro_Sensor_Handler+0x148>)
 800c560:	f000 fb2e 	bl	800cbc0 <iprintf>

  if (verbose == 1)
 800c564:	4b3c      	ldr	r3, [pc, #240]	; (800c658 <Gyro_Sensor_Handler+0x14c>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d168      	bne.n	800c63e <Gyro_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800c56c:	f107 030f 	add.w	r3, r7, #15
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7fc fac8 	bl	8008b08 <IKS01A3_MOTION_SENSOR_ReadID>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d007      	beq.n	800c58e <Gyro_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a36      	ldr	r2, [pc, #216]	; (800c65c <Gyro_Sensor_Handler+0x150>)
 800c582:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c586:	4831      	ldr	r0, [pc, #196]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c588:	f000 fb32 	bl	800cbf0 <sniprintf>
 800c58c:	e008      	b.n	800c5a0 <Gyro_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	7bfa      	ldrb	r2, [r7, #15]
 800c592:	9200      	str	r2, [sp, #0]
 800c594:	4a32      	ldr	r2, [pc, #200]	; (800c660 <Gyro_Sensor_Handler+0x154>)
 800c596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c59a:	482c      	ldr	r0, [pc, #176]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c59c:	f000 fb28 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c5a0:	492a      	ldr	r1, [pc, #168]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c5a2:	482c      	ldr	r0, [pc, #176]	; (800c654 <Gyro_Sensor_Handler+0x148>)
 800c5a4:	f000 fb0c 	bl	800cbc0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 800c5a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7fc fb17 	bl	8008be4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <Gyro_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a29      	ldr	r2, [pc, #164]	; (800c664 <Gyro_Sensor_Handler+0x158>)
 800c5c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5c4:	4821      	ldr	r0, [pc, #132]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c5c6:	f000 fb13 	bl	800cbf0 <sniprintf>
 800c5ca:	e014      	b.n	800c5f6 <Gyro_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c5cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c5d0:	f107 0310 	add.w	r3, r7, #16
 800c5d4:	2103      	movs	r1, #3
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	eeb0 0a67 	vmov.f32	s0, s15
 800c5dc:	f7ff fe58 	bl	800c290 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800c5e4:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c5e6:	9101      	str	r1, [sp, #4]
 800c5e8:	9200      	str	r2, [sp, #0]
 800c5ea:	4a1f      	ldr	r2, [pc, #124]	; (800c668 <Gyro_Sensor_Handler+0x15c>)
 800c5ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5f0:	4816      	ldr	r0, [pc, #88]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c5f2:	f000 fafd 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c5f6:	4915      	ldr	r1, [pc, #84]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c5f8:	4816      	ldr	r0, [pc, #88]	; (800c654 <Gyro_Sensor_Handler+0x148>)
 800c5fa:	f000 fae1 	bl	800cbc0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 800c5fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c602:	461a      	mov	r2, r3
 800c604:	2101      	movs	r1, #1
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7fc fb30 	bl	8008c6c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d007      	beq.n	800c622 <Gyro_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a15      	ldr	r2, [pc, #84]	; (800c66c <Gyro_Sensor_Handler+0x160>)
 800c616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c61a:	480c      	ldr	r0, [pc, #48]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c61c:	f000 fae8 	bl	800cbf0 <sniprintf>
 800c620:	e009      	b.n	800c636 <Gyro_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	4613      	mov	r3, r2
 800c62a:	4a11      	ldr	r2, [pc, #68]	; (800c670 <Gyro_Sensor_Handler+0x164>)
 800c62c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c630:	4806      	ldr	r0, [pc, #24]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c632:	f000 fadd 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c636:	4905      	ldr	r1, [pc, #20]	; (800c64c <Gyro_Sensor_Handler+0x140>)
 800c638:	4806      	ldr	r0, [pc, #24]	; (800c654 <Gyro_Sensor_Handler+0x148>)
 800c63a:	f000 fac1 	bl	800cbc0 <iprintf>
  }
}
 800c63e:	bf00      	nop
 800c640:	3730      	adds	r7, #48	; 0x30
 800c642:	46bd      	mov	sp, r7
 800c644:	bdb0      	pop	{r4, r5, r7, pc}
 800c646:	bf00      	nop
 800c648:	0800f0a4 	.word	0x0800f0a4
 800c64c:	200004a0 	.word	0x200004a0
 800c650:	0800f0b8 	.word	0x0800f0b8
 800c654:	0800ee94 	.word	0x0800ee94
 800c658:	200001a5 	.word	0x200001a5
 800c65c:	0800f030 	.word	0x0800f030
 800c660:	0800f044 	.word	0x0800f044
 800c664:	0800f058 	.word	0x0800f058
 800c668:	0800f06c 	.word	0x0800f06c
 800c66c:	0800f084 	.word	0x0800f084
 800c670:	0800f0e8 	.word	0x0800f0e8

0800c674 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 800c674:	b5b0      	push	{r4, r5, r7, lr}
 800c676:	b092      	sub	sp, #72	; 0x48
 800c678:	af06      	add	r7, sp, #24
 800c67a:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800c67c:	f107 031c 	add.w	r3, r7, #28
 800c680:	461a      	mov	r2, r3
 800c682:	2104      	movs	r1, #4
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7fc fa69 	bl	8008b5c <IKS01A3_MOTION_SENSOR_GetAxes>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d007      	beq.n	800c6a0 <Magneto_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a47      	ldr	r2, [pc, #284]	; (800c7b0 <Magneto_Sensor_Handler+0x13c>)
 800c694:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c698:	4846      	ldr	r0, [pc, #280]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c69a:	f000 faa9 	bl	800cbf0 <sniprintf>
 800c69e:	e011      	b.n	800c6c4 <Magneto_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6a0:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800c6a2:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6a4:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800c6a6:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6a8:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800c6aa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800c6ac:	9404      	str	r4, [sp, #16]
 800c6ae:	9003      	str	r0, [sp, #12]
 800c6b0:	9102      	str	r1, [sp, #8]
 800c6b2:	9201      	str	r2, [sp, #4]
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	4a3f      	ldr	r2, [pc, #252]	; (800c7b8 <Magneto_Sensor_Handler+0x144>)
 800c6ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c6be:	483d      	ldr	r0, [pc, #244]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c6c0:	f000 fa96 	bl	800cbf0 <sniprintf>
  }

  printf("%s", dataOut);
 800c6c4:	493b      	ldr	r1, [pc, #236]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c6c6:	483d      	ldr	r0, [pc, #244]	; (800c7bc <Magneto_Sensor_Handler+0x148>)
 800c6c8:	f000 fa7a 	bl	800cbc0 <iprintf>

  if (verbose == 1)
 800c6cc:	4b3c      	ldr	r3, [pc, #240]	; (800c7c0 <Magneto_Sensor_Handler+0x14c>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d168      	bne.n	800c7a6 <Magneto_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800c6d4:	f107 030f 	add.w	r3, r7, #15
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7fc fa14 	bl	8008b08 <IKS01A3_MOTION_SENSOR_ReadID>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d007      	beq.n	800c6f6 <Magneto_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a36      	ldr	r2, [pc, #216]	; (800c7c4 <Magneto_Sensor_Handler+0x150>)
 800c6ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c6ee:	4831      	ldr	r0, [pc, #196]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c6f0:	f000 fa7e 	bl	800cbf0 <sniprintf>
 800c6f4:	e008      	b.n	800c708 <Magneto_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	7bfa      	ldrb	r2, [r7, #15]
 800c6fa:	9200      	str	r2, [sp, #0]
 800c6fc:	4a32      	ldr	r2, [pc, #200]	; (800c7c8 <Magneto_Sensor_Handler+0x154>)
 800c6fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c702:	482c      	ldr	r0, [pc, #176]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c704:	f000 fa74 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c708:	492a      	ldr	r1, [pc, #168]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c70a:	482c      	ldr	r0, [pc, #176]	; (800c7bc <Magneto_Sensor_Handler+0x148>)
 800c70c:	f000 fa58 	bl	800cbc0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 800c710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c714:	461a      	mov	r2, r3
 800c716:	2104      	movs	r1, #4
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7fc fa63 	bl	8008be4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d007      	beq.n	800c734 <Magneto_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a29      	ldr	r2, [pc, #164]	; (800c7cc <Magneto_Sensor_Handler+0x158>)
 800c728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c72c:	4821      	ldr	r0, [pc, #132]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c72e:	f000 fa5f 	bl	800cbf0 <sniprintf>
 800c732:	e014      	b.n	800c75e <Magneto_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c734:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c738:	f107 0310 	add.w	r3, r7, #16
 800c73c:	2103      	movs	r1, #3
 800c73e:	4618      	mov	r0, r3
 800c740:	eeb0 0a67 	vmov.f32	s0, s15
 800c744:	f7ff fda4 	bl	800c290 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800c74c:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c74e:	9101      	str	r1, [sp, #4]
 800c750:	9200      	str	r2, [sp, #0]
 800c752:	4a1f      	ldr	r2, [pc, #124]	; (800c7d0 <Magneto_Sensor_Handler+0x15c>)
 800c754:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c758:	4816      	ldr	r0, [pc, #88]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c75a:	f000 fa49 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c75e:	4915      	ldr	r1, [pc, #84]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c760:	4816      	ldr	r0, [pc, #88]	; (800c7bc <Magneto_Sensor_Handler+0x148>)
 800c762:	f000 fa2d 	bl	800cbc0 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 800c766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c76a:	461a      	mov	r2, r3
 800c76c:	2104      	movs	r1, #4
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7fc fa7c 	bl	8008c6c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d007      	beq.n	800c78a <Magneto_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a15      	ldr	r2, [pc, #84]	; (800c7d4 <Magneto_Sensor_Handler+0x160>)
 800c77e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c782:	480c      	ldr	r0, [pc, #48]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c784:	f000 fa34 	bl	800cbf0 <sniprintf>
 800c788:	e009      	b.n	800c79e <Magneto_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	4613      	mov	r3, r2
 800c792:	4a11      	ldr	r2, [pc, #68]	; (800c7d8 <Magneto_Sensor_Handler+0x164>)
 800c794:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c798:	4806      	ldr	r0, [pc, #24]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c79a:	f000 fa29 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c79e:	4905      	ldr	r1, [pc, #20]	; (800c7b4 <Magneto_Sensor_Handler+0x140>)
 800c7a0:	4806      	ldr	r0, [pc, #24]	; (800c7bc <Magneto_Sensor_Handler+0x148>)
 800c7a2:	f000 fa0d 	bl	800cbc0 <iprintf>
  }
}
 800c7a6:	bf00      	nop
 800c7a8:	3730      	adds	r7, #48	; 0x30
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	0800f0fc 	.word	0x0800f0fc
 800c7b4:	200004a0 	.word	0x200004a0
 800c7b8:	0800f110 	.word	0x0800f110
 800c7bc:	0800ee94 	.word	0x0800ee94
 800c7c0:	200001a5 	.word	0x200001a5
 800c7c4:	0800f030 	.word	0x0800f030
 800c7c8:	0800f044 	.word	0x0800f044
 800c7cc:	0800f058 	.word	0x0800f058
 800c7d0:	0800f06c 	.word	0x0800f06c
 800c7d4:	0800f084 	.word	0x0800f084
 800c7d8:	0800f140 	.word	0x0800f140

0800c7dc <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08c      	sub	sp, #48	; 0x30
 800c7e0:	af04      	add	r7, sp, #16
 800c7e2:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800c7e4:	f107 0318 	add.w	r3, r7, #24
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7fb fddb 	bl	80083a8 <IKS01A3_ENV_SENSOR_GetValue>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d007      	beq.n	800c808 <Temp_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a3d      	ldr	r2, [pc, #244]	; (800c8f0 <Temp_Sensor_Handler+0x114>)
 800c7fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c800:	483c      	ldr	r0, [pc, #240]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c802:	f000 f9f5 	bl	800cbf0 <sniprintf>
 800c806:	e01d      	b.n	800c844 <Temp_Sensor_Handler+0x68>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 800c808:	edd7 7a06 	vldr	s15, [r7, #24]
 800c80c:	f107 030c 	add.w	r3, r7, #12
 800c810:	2102      	movs	r1, #2
 800c812:	4618      	mov	r0, r3
 800c814:	eeb0 0a67 	vmov.f32	s0, s15
 800c818:	f7ff fd3a 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <Temp_Sensor_Handler+0x4e>
 800c826:	232d      	movs	r3, #45	; 0x2d
 800c828:	e000      	b.n	800c82c <Temp_Sensor_Handler+0x50>
 800c82a:	232b      	movs	r3, #43	; 0x2b
 800c82c:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 800c82e:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800c830:	9002      	str	r0, [sp, #8]
 800c832:	9101      	str	r1, [sp, #4]
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	4613      	mov	r3, r2
 800c838:	4a2f      	ldr	r2, [pc, #188]	; (800c8f8 <Temp_Sensor_Handler+0x11c>)
 800c83a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c83e:	482d      	ldr	r0, [pc, #180]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c840:	f000 f9d6 	bl	800cbf0 <sniprintf>
  }

  printf("%s", dataOut);
 800c844:	492b      	ldr	r1, [pc, #172]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c846:	482d      	ldr	r0, [pc, #180]	; (800c8fc <Temp_Sensor_Handler+0x120>)
 800c848:	f000 f9ba 	bl	800cbc0 <iprintf>

  if (verbose == 1)
 800c84c:	4b2c      	ldr	r3, [pc, #176]	; (800c900 <Temp_Sensor_Handler+0x124>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d148      	bne.n	800c8e6 <Temp_Sensor_Handler+0x10a>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800c854:	f107 030b 	add.w	r3, r7, #11
 800c858:	4619      	mov	r1, r3
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7fb fd38 	bl	80082d0 <IKS01A3_ENV_SENSOR_ReadID>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d007      	beq.n	800c876 <Temp_Sensor_Handler+0x9a>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a26      	ldr	r2, [pc, #152]	; (800c904 <Temp_Sensor_Handler+0x128>)
 800c86a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c86e:	4821      	ldr	r0, [pc, #132]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c870:	f000 f9be 	bl	800cbf0 <sniprintf>
 800c874:	e008      	b.n	800c888 <Temp_Sensor_Handler+0xac>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7afa      	ldrb	r2, [r7, #11]
 800c87a:	9200      	str	r2, [sp, #0]
 800c87c:	4a22      	ldr	r2, [pc, #136]	; (800c908 <Temp_Sensor_Handler+0x12c>)
 800c87e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c882:	481c      	ldr	r0, [pc, #112]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c884:	f000 f9b4 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c888:	491a      	ldr	r1, [pc, #104]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c88a:	481c      	ldr	r0, [pc, #112]	; (800c8fc <Temp_Sensor_Handler+0x120>)
 800c88c:	f000 f998 	bl	800cbc0 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 800c890:	f107 031c 	add.w	r3, r7, #28
 800c894:	461a      	mov	r2, r3
 800c896:	2101      	movs	r1, #1
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7fb fd43 	bl	8008324 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d007      	beq.n	800c8b4 <Temp_Sensor_Handler+0xd8>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a19      	ldr	r2, [pc, #100]	; (800c90c <Temp_Sensor_Handler+0x130>)
 800c8a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c8ac:	4811      	ldr	r0, [pc, #68]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c8ae:	f000 f99f 	bl	800cbf0 <sniprintf>
 800c8b2:	e014      	b.n	800c8de <Temp_Sensor_Handler+0x102>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c8b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8b8:	f107 030c 	add.w	r3, r7, #12
 800c8bc:	2103      	movs	r1, #3
 800c8be:	4618      	mov	r0, r3
 800c8c0:	eeb0 0a67 	vmov.f32	s0, s15
 800c8c4:	f7ff fce4 	bl	800c290 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800c8cc:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c8ce:	9101      	str	r1, [sp, #4]
 800c8d0:	9200      	str	r2, [sp, #0]
 800c8d2:	4a0f      	ldr	r2, [pc, #60]	; (800c910 <Temp_Sensor_Handler+0x134>)
 800c8d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c8d8:	4806      	ldr	r0, [pc, #24]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c8da:	f000 f989 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c8de:	4905      	ldr	r1, [pc, #20]	; (800c8f4 <Temp_Sensor_Handler+0x118>)
 800c8e0:	4806      	ldr	r0, [pc, #24]	; (800c8fc <Temp_Sensor_Handler+0x120>)
 800c8e2:	f000 f96d 	bl	800cbc0 <iprintf>
  }
}
 800c8e6:	bf00      	nop
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	0800f154 	.word	0x0800f154
 800c8f4:	200004a0 	.word	0x200004a0
 800c8f8:	0800f168 	.word	0x0800f168
 800c8fc:	0800ee94 	.word	0x0800ee94
 800c900:	200001a5 	.word	0x200001a5
 800c904:	0800f030 	.word	0x0800f030
 800c908:	0800f044 	.word	0x0800f044
 800c90c:	0800f188 	.word	0x0800f188
 800c910:	0800f06c 	.word	0x0800f06c

0800c914 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b08a      	sub	sp, #40	; 0x28
 800c918:	af02      	add	r7, sp, #8
 800c91a:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800c91c:	f107 0318 	add.w	r3, r7, #24
 800c920:	461a      	mov	r2, r3
 800c922:	2102      	movs	r1, #2
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7fb fd3f 	bl	80083a8 <IKS01A3_ENV_SENSOR_GetValue>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d007      	beq.n	800c940 <Press_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a38      	ldr	r2, [pc, #224]	; (800ca14 <Press_Sensor_Handler+0x100>)
 800c934:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c938:	4837      	ldr	r0, [pc, #220]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800c93a:	f000 f959 	bl	800cbf0 <sniprintf>
 800c93e:	e014      	b.n	800c96a <Press_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 800c940:	edd7 7a06 	vldr	s15, [r7, #24]
 800c944:	f107 030c 	add.w	r3, r7, #12
 800c948:	2102      	movs	r1, #2
 800c94a:	4618      	mov	r0, r3
 800c94c:	eeb0 0a67 	vmov.f32	s0, s15
 800c950:	f7ff fc9e 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800c958:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800c95a:	9101      	str	r1, [sp, #4]
 800c95c:	9200      	str	r2, [sp, #0]
 800c95e:	4a2f      	ldr	r2, [pc, #188]	; (800ca1c <Press_Sensor_Handler+0x108>)
 800c960:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c964:	482c      	ldr	r0, [pc, #176]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800c966:	f000 f943 	bl	800cbf0 <sniprintf>
  }

  printf("%s", dataOut);
 800c96a:	492b      	ldr	r1, [pc, #172]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800c96c:	482c      	ldr	r0, [pc, #176]	; (800ca20 <Press_Sensor_Handler+0x10c>)
 800c96e:	f000 f927 	bl	800cbc0 <iprintf>

  if (verbose == 1)
 800c972:	4b2c      	ldr	r3, [pc, #176]	; (800ca24 <Press_Sensor_Handler+0x110>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d148      	bne.n	800ca0c <Press_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800c97a:	f107 030b 	add.w	r3, r7, #11
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7fb fca5 	bl	80082d0 <IKS01A3_ENV_SENSOR_ReadID>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d007      	beq.n	800c99c <Press_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a26      	ldr	r2, [pc, #152]	; (800ca28 <Press_Sensor_Handler+0x114>)
 800c990:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c994:	4820      	ldr	r0, [pc, #128]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800c996:	f000 f92b 	bl	800cbf0 <sniprintf>
 800c99a:	e008      	b.n	800c9ae <Press_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	7afa      	ldrb	r2, [r7, #11]
 800c9a0:	9200      	str	r2, [sp, #0]
 800c9a2:	4a22      	ldr	r2, [pc, #136]	; (800ca2c <Press_Sensor_Handler+0x118>)
 800c9a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9a8:	481b      	ldr	r0, [pc, #108]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800c9aa:	f000 f921 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800c9ae:	491a      	ldr	r1, [pc, #104]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800c9b0:	481b      	ldr	r0, [pc, #108]	; (800ca20 <Press_Sensor_Handler+0x10c>)
 800c9b2:	f000 f905 	bl	800cbc0 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 800c9b6:	f107 031c 	add.w	r3, r7, #28
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	2102      	movs	r1, #2
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7fb fcb0 	bl	8008324 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d007      	beq.n	800c9da <Press_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a18      	ldr	r2, [pc, #96]	; (800ca30 <Press_Sensor_Handler+0x11c>)
 800c9ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9d2:	4811      	ldr	r0, [pc, #68]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800c9d4:	f000 f90c 	bl	800cbf0 <sniprintf>
 800c9d8:	e014      	b.n	800ca04 <Press_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800c9da:	edd7 7a07 	vldr	s15, [r7, #28]
 800c9de:	f107 030c 	add.w	r3, r7, #12
 800c9e2:	2103      	movs	r1, #3
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	eeb0 0a67 	vmov.f32	s0, s15
 800c9ea:	f7ff fc51 	bl	800c290 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800c9f2:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800c9f4:	9101      	str	r1, [sp, #4]
 800c9f6:	9200      	str	r2, [sp, #0]
 800c9f8:	4a0e      	ldr	r2, [pc, #56]	; (800ca34 <Press_Sensor_Handler+0x120>)
 800c9fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c9fe:	4806      	ldr	r0, [pc, #24]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800ca00:	f000 f8f6 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800ca04:	4904      	ldr	r1, [pc, #16]	; (800ca18 <Press_Sensor_Handler+0x104>)
 800ca06:	4806      	ldr	r0, [pc, #24]	; (800ca20 <Press_Sensor_Handler+0x10c>)
 800ca08:	f000 f8da 	bl	800cbc0 <iprintf>
  }
}
 800ca0c:	bf00      	nop
 800ca0e:	3720      	adds	r7, #32
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	0800f19c 	.word	0x0800f19c
 800ca18:	200004a0 	.word	0x200004a0
 800ca1c:	0800f1b4 	.word	0x0800f1b4
 800ca20:	0800ee94 	.word	0x0800ee94
 800ca24:	200001a5 	.word	0x200001a5
 800ca28:	0800f030 	.word	0x0800f030
 800ca2c:	0800f044 	.word	0x0800f044
 800ca30:	0800f188 	.word	0x0800f188
 800ca34:	0800f06c 	.word	0x0800f06c

0800ca38 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af02      	add	r7, sp, #8
 800ca3e:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 800ca40:	f107 0318 	add.w	r3, r7, #24
 800ca44:	461a      	mov	r2, r3
 800ca46:	2104      	movs	r1, #4
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7fb fcad 	bl	80083a8 <IKS01A3_ENV_SENSOR_GetValue>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d007      	beq.n	800ca64 <Hum_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a38      	ldr	r2, [pc, #224]	; (800cb38 <Hum_Sensor_Handler+0x100>)
 800ca58:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca5c:	4837      	ldr	r0, [pc, #220]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800ca5e:	f000 f8c7 	bl	800cbf0 <sniprintf>
 800ca62:	e014      	b.n	800ca8e <Hum_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 800ca64:	edd7 7a06 	vldr	s15, [r7, #24]
 800ca68:	f107 030c 	add.w	r3, r7, #12
 800ca6c:	2102      	movs	r1, #2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	eeb0 0a67 	vmov.f32	s0, s15
 800ca74:	f7ff fc0c 	bl	800c290 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800ca7c:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800ca7e:	9101      	str	r1, [sp, #4]
 800ca80:	9200      	str	r2, [sp, #0]
 800ca82:	4a2f      	ldr	r2, [pc, #188]	; (800cb40 <Hum_Sensor_Handler+0x108>)
 800ca84:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca88:	482c      	ldr	r0, [pc, #176]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800ca8a:	f000 f8b1 	bl	800cbf0 <sniprintf>
  }

  printf("%s", dataOut);
 800ca8e:	492b      	ldr	r1, [pc, #172]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800ca90:	482c      	ldr	r0, [pc, #176]	; (800cb44 <Hum_Sensor_Handler+0x10c>)
 800ca92:	f000 f895 	bl	800cbc0 <iprintf>

  if (verbose == 1)
 800ca96:	4b2c      	ldr	r3, [pc, #176]	; (800cb48 <Hum_Sensor_Handler+0x110>)
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d148      	bne.n	800cb30 <Hum_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 800ca9e:	f107 030b 	add.w	r3, r7, #11
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7fb fc13 	bl	80082d0 <IKS01A3_ENV_SENSOR_ReadID>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d007      	beq.n	800cac0 <Hum_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a26      	ldr	r2, [pc, #152]	; (800cb4c <Hum_Sensor_Handler+0x114>)
 800cab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cab8:	4820      	ldr	r0, [pc, #128]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800caba:	f000 f899 	bl	800cbf0 <sniprintf>
 800cabe:	e008      	b.n	800cad2 <Hum_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	7afa      	ldrb	r2, [r7, #11]
 800cac4:	9200      	str	r2, [sp, #0]
 800cac6:	4a22      	ldr	r2, [pc, #136]	; (800cb50 <Hum_Sensor_Handler+0x118>)
 800cac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cacc:	481b      	ldr	r0, [pc, #108]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800cace:	f000 f88f 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800cad2:	491a      	ldr	r1, [pc, #104]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800cad4:	481b      	ldr	r0, [pc, #108]	; (800cb44 <Hum_Sensor_Handler+0x10c>)
 800cad6:	f000 f873 	bl	800cbc0 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 800cada:	f107 031c 	add.w	r3, r7, #28
 800cade:	461a      	mov	r2, r3
 800cae0:	2104      	movs	r1, #4
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7fb fc1e 	bl	8008324 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d007      	beq.n	800cafe <Hum_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a18      	ldr	r2, [pc, #96]	; (800cb54 <Hum_Sensor_Handler+0x11c>)
 800caf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800caf6:	4811      	ldr	r0, [pc, #68]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800caf8:	f000 f87a 	bl	800cbf0 <sniprintf>
 800cafc:	e014      	b.n	800cb28 <Hum_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800cafe:	edd7 7a07 	vldr	s15, [r7, #28]
 800cb02:	f107 030c 	add.w	r3, r7, #12
 800cb06:	2103      	movs	r1, #3
 800cb08:	4618      	mov	r0, r3
 800cb0a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb0e:	f7ff fbbf 	bl	800c290 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800cb16:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800cb18:	9101      	str	r1, [sp, #4]
 800cb1a:	9200      	str	r2, [sp, #0]
 800cb1c:	4a0e      	ldr	r2, [pc, #56]	; (800cb58 <Hum_Sensor_Handler+0x120>)
 800cb1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb22:	4806      	ldr	r0, [pc, #24]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800cb24:	f000 f864 	bl	800cbf0 <sniprintf>
    }

    printf("%s", dataOut);
 800cb28:	4904      	ldr	r1, [pc, #16]	; (800cb3c <Hum_Sensor_Handler+0x104>)
 800cb2a:	4806      	ldr	r0, [pc, #24]	; (800cb44 <Hum_Sensor_Handler+0x10c>)
 800cb2c:	f000 f848 	bl	800cbc0 <iprintf>
  }
}
 800cb30:	bf00      	nop
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	0800f1d0 	.word	0x0800f1d0
 800cb3c:	200004a0 	.word	0x200004a0
 800cb40:	0800f1e4 	.word	0x0800f1e4
 800cb44:	0800ee94 	.word	0x0800ee94
 800cb48:	200001a5 	.word	0x200001a5
 800cb4c:	0800f030 	.word	0x0800f030
 800cb50:	0800f044 	.word	0x0800f044
 800cb54:	0800f188 	.word	0x0800f188
 800cb58:	0800f06c 	.word	0x0800f06c

0800cb5c <__errno>:
 800cb5c:	4b01      	ldr	r3, [pc, #4]	; (800cb64 <__errno+0x8>)
 800cb5e:	6818      	ldr	r0, [r3, #0]
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	200001a8 	.word	0x200001a8

0800cb68 <__libc_init_array>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	4d0d      	ldr	r5, [pc, #52]	; (800cba0 <__libc_init_array+0x38>)
 800cb6c:	4c0d      	ldr	r4, [pc, #52]	; (800cba4 <__libc_init_array+0x3c>)
 800cb6e:	1b64      	subs	r4, r4, r5
 800cb70:	10a4      	asrs	r4, r4, #2
 800cb72:	2600      	movs	r6, #0
 800cb74:	42a6      	cmp	r6, r4
 800cb76:	d109      	bne.n	800cb8c <__libc_init_array+0x24>
 800cb78:	4d0b      	ldr	r5, [pc, #44]	; (800cba8 <__libc_init_array+0x40>)
 800cb7a:	4c0c      	ldr	r4, [pc, #48]	; (800cbac <__libc_init_array+0x44>)
 800cb7c:	f002 f942 	bl	800ee04 <_init>
 800cb80:	1b64      	subs	r4, r4, r5
 800cb82:	10a4      	asrs	r4, r4, #2
 800cb84:	2600      	movs	r6, #0
 800cb86:	42a6      	cmp	r6, r4
 800cb88:	d105      	bne.n	800cb96 <__libc_init_array+0x2e>
 800cb8a:	bd70      	pop	{r4, r5, r6, pc}
 800cb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb90:	4798      	blx	r3
 800cb92:	3601      	adds	r6, #1
 800cb94:	e7ee      	b.n	800cb74 <__libc_init_array+0xc>
 800cb96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb9a:	4798      	blx	r3
 800cb9c:	3601      	adds	r6, #1
 800cb9e:	e7f2      	b.n	800cb86 <__libc_init_array+0x1e>
 800cba0:	0800f308 	.word	0x0800f308
 800cba4:	0800f308 	.word	0x0800f308
 800cba8:	0800f308 	.word	0x0800f308
 800cbac:	0800f30c 	.word	0x0800f30c

0800cbb0 <memset>:
 800cbb0:	4402      	add	r2, r0
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d100      	bne.n	800cbba <memset+0xa>
 800cbb8:	4770      	bx	lr
 800cbba:	f803 1b01 	strb.w	r1, [r3], #1
 800cbbe:	e7f9      	b.n	800cbb4 <memset+0x4>

0800cbc0 <iprintf>:
 800cbc0:	b40f      	push	{r0, r1, r2, r3}
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <iprintf+0x2c>)
 800cbc4:	b513      	push	{r0, r1, r4, lr}
 800cbc6:	681c      	ldr	r4, [r3, #0]
 800cbc8:	b124      	cbz	r4, 800cbd4 <iprintf+0x14>
 800cbca:	69a3      	ldr	r3, [r4, #24]
 800cbcc:	b913      	cbnz	r3, 800cbd4 <iprintf+0x14>
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 f89a 	bl	800cd08 <__sinit>
 800cbd4:	ab05      	add	r3, sp, #20
 800cbd6:	9a04      	ldr	r2, [sp, #16]
 800cbd8:	68a1      	ldr	r1, [r4, #8]
 800cbda:	9301      	str	r3, [sp, #4]
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f000 fb13 	bl	800d208 <_vfiprintf_r>
 800cbe2:	b002      	add	sp, #8
 800cbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbe8:	b004      	add	sp, #16
 800cbea:	4770      	bx	lr
 800cbec:	200001a8 	.word	0x200001a8

0800cbf0 <sniprintf>:
 800cbf0:	b40c      	push	{r2, r3}
 800cbf2:	b530      	push	{r4, r5, lr}
 800cbf4:	4b17      	ldr	r3, [pc, #92]	; (800cc54 <sniprintf+0x64>)
 800cbf6:	1e0c      	subs	r4, r1, #0
 800cbf8:	681d      	ldr	r5, [r3, #0]
 800cbfa:	b09d      	sub	sp, #116	; 0x74
 800cbfc:	da08      	bge.n	800cc10 <sniprintf+0x20>
 800cbfe:	238b      	movs	r3, #139	; 0x8b
 800cc00:	602b      	str	r3, [r5, #0]
 800cc02:	f04f 30ff 	mov.w	r0, #4294967295
 800cc06:	b01d      	add	sp, #116	; 0x74
 800cc08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc0c:	b002      	add	sp, #8
 800cc0e:	4770      	bx	lr
 800cc10:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cc14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc18:	bf14      	ite	ne
 800cc1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc1e:	4623      	moveq	r3, r4
 800cc20:	9304      	str	r3, [sp, #16]
 800cc22:	9307      	str	r3, [sp, #28]
 800cc24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc28:	9002      	str	r0, [sp, #8]
 800cc2a:	9006      	str	r0, [sp, #24]
 800cc2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc32:	ab21      	add	r3, sp, #132	; 0x84
 800cc34:	a902      	add	r1, sp, #8
 800cc36:	4628      	mov	r0, r5
 800cc38:	9301      	str	r3, [sp, #4]
 800cc3a:	f000 f9bb 	bl	800cfb4 <_svfiprintf_r>
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	bfbc      	itt	lt
 800cc42:	238b      	movlt	r3, #139	; 0x8b
 800cc44:	602b      	strlt	r3, [r5, #0]
 800cc46:	2c00      	cmp	r4, #0
 800cc48:	d0dd      	beq.n	800cc06 <sniprintf+0x16>
 800cc4a:	9b02      	ldr	r3, [sp, #8]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	701a      	strb	r2, [r3, #0]
 800cc50:	e7d9      	b.n	800cc06 <sniprintf+0x16>
 800cc52:	bf00      	nop
 800cc54:	200001a8 	.word	0x200001a8

0800cc58 <std>:
 800cc58:	2300      	movs	r3, #0
 800cc5a:	b510      	push	{r4, lr}
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc66:	6083      	str	r3, [r0, #8]
 800cc68:	8181      	strh	r1, [r0, #12]
 800cc6a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc6c:	81c2      	strh	r2, [r0, #14]
 800cc6e:	6183      	str	r3, [r0, #24]
 800cc70:	4619      	mov	r1, r3
 800cc72:	2208      	movs	r2, #8
 800cc74:	305c      	adds	r0, #92	; 0x5c
 800cc76:	f7ff ff9b 	bl	800cbb0 <memset>
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <std+0x38>)
 800cc7c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <std+0x3c>)
 800cc80:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc82:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <std+0x40>)
 800cc84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc86:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <std+0x44>)
 800cc88:	6224      	str	r4, [r4, #32]
 800cc8a:	6323      	str	r3, [r4, #48]	; 0x30
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	bf00      	nop
 800cc90:	0800d7b1 	.word	0x0800d7b1
 800cc94:	0800d7d3 	.word	0x0800d7d3
 800cc98:	0800d80b 	.word	0x0800d80b
 800cc9c:	0800d82f 	.word	0x0800d82f

0800cca0 <_cleanup_r>:
 800cca0:	4901      	ldr	r1, [pc, #4]	; (800cca8 <_cleanup_r+0x8>)
 800cca2:	f000 b8af 	b.w	800ce04 <_fwalk_reent>
 800cca6:	bf00      	nop
 800cca8:	0800db09 	.word	0x0800db09

0800ccac <__sfmoreglue>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	1e4a      	subs	r2, r1, #1
 800ccb0:	2568      	movs	r5, #104	; 0x68
 800ccb2:	4355      	muls	r5, r2
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccba:	f000 f8c5 	bl	800ce48 <_malloc_r>
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	b140      	cbz	r0, 800ccd4 <__sfmoreglue+0x28>
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	e9c0 1600 	strd	r1, r6, [r0]
 800ccc8:	300c      	adds	r0, #12
 800ccca:	60a0      	str	r0, [r4, #8]
 800cccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccd0:	f7ff ff6e 	bl	800cbb0 <memset>
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}

0800ccd8 <__sfp_lock_acquire>:
 800ccd8:	4801      	ldr	r0, [pc, #4]	; (800cce0 <__sfp_lock_acquire+0x8>)
 800ccda:	f000 b8b3 	b.w	800ce44 <__retarget_lock_acquire_recursive>
 800ccde:	bf00      	nop
 800cce0:	20000668 	.word	0x20000668

0800cce4 <__sfp_lock_release>:
 800cce4:	4801      	ldr	r0, [pc, #4]	; (800ccec <__sfp_lock_release+0x8>)
 800cce6:	f000 b8ae 	b.w	800ce46 <__retarget_lock_release_recursive>
 800ccea:	bf00      	nop
 800ccec:	20000668 	.word	0x20000668

0800ccf0 <__sinit_lock_acquire>:
 800ccf0:	4801      	ldr	r0, [pc, #4]	; (800ccf8 <__sinit_lock_acquire+0x8>)
 800ccf2:	f000 b8a7 	b.w	800ce44 <__retarget_lock_acquire_recursive>
 800ccf6:	bf00      	nop
 800ccf8:	20000663 	.word	0x20000663

0800ccfc <__sinit_lock_release>:
 800ccfc:	4801      	ldr	r0, [pc, #4]	; (800cd04 <__sinit_lock_release+0x8>)
 800ccfe:	f000 b8a2 	b.w	800ce46 <__retarget_lock_release_recursive>
 800cd02:	bf00      	nop
 800cd04:	20000663 	.word	0x20000663

0800cd08 <__sinit>:
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	f7ff fff0 	bl	800ccf0 <__sinit_lock_acquire>
 800cd10:	69a3      	ldr	r3, [r4, #24]
 800cd12:	b11b      	cbz	r3, 800cd1c <__sinit+0x14>
 800cd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd18:	f7ff bff0 	b.w	800ccfc <__sinit_lock_release>
 800cd1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd20:	6523      	str	r3, [r4, #80]	; 0x50
 800cd22:	4b13      	ldr	r3, [pc, #76]	; (800cd70 <__sinit+0x68>)
 800cd24:	4a13      	ldr	r2, [pc, #76]	; (800cd74 <__sinit+0x6c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd2a:	42a3      	cmp	r3, r4
 800cd2c:	bf04      	itt	eq
 800cd2e:	2301      	moveq	r3, #1
 800cd30:	61a3      	streq	r3, [r4, #24]
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 f820 	bl	800cd78 <__sfp>
 800cd38:	6060      	str	r0, [r4, #4]
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 f81c 	bl	800cd78 <__sfp>
 800cd40:	60a0      	str	r0, [r4, #8]
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 f818 	bl	800cd78 <__sfp>
 800cd48:	2200      	movs	r2, #0
 800cd4a:	60e0      	str	r0, [r4, #12]
 800cd4c:	2104      	movs	r1, #4
 800cd4e:	6860      	ldr	r0, [r4, #4]
 800cd50:	f7ff ff82 	bl	800cc58 <std>
 800cd54:	68a0      	ldr	r0, [r4, #8]
 800cd56:	2201      	movs	r2, #1
 800cd58:	2109      	movs	r1, #9
 800cd5a:	f7ff ff7d 	bl	800cc58 <std>
 800cd5e:	68e0      	ldr	r0, [r4, #12]
 800cd60:	2202      	movs	r2, #2
 800cd62:	2112      	movs	r1, #18
 800cd64:	f7ff ff78 	bl	800cc58 <std>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	61a3      	str	r3, [r4, #24]
 800cd6c:	e7d2      	b.n	800cd14 <__sinit+0xc>
 800cd6e:	bf00      	nop
 800cd70:	0800f228 	.word	0x0800f228
 800cd74:	0800cca1 	.word	0x0800cca1

0800cd78 <__sfp>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	f7ff ffac 	bl	800ccd8 <__sfp_lock_acquire>
 800cd80:	4b1e      	ldr	r3, [pc, #120]	; (800cdfc <__sfp+0x84>)
 800cd82:	681e      	ldr	r6, [r3, #0]
 800cd84:	69b3      	ldr	r3, [r6, #24]
 800cd86:	b913      	cbnz	r3, 800cd8e <__sfp+0x16>
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f7ff ffbd 	bl	800cd08 <__sinit>
 800cd8e:	3648      	adds	r6, #72	; 0x48
 800cd90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	d503      	bpl.n	800cda0 <__sfp+0x28>
 800cd98:	6833      	ldr	r3, [r6, #0]
 800cd9a:	b30b      	cbz	r3, 800cde0 <__sfp+0x68>
 800cd9c:	6836      	ldr	r6, [r6, #0]
 800cd9e:	e7f7      	b.n	800cd90 <__sfp+0x18>
 800cda0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cda4:	b9d5      	cbnz	r5, 800cddc <__sfp+0x64>
 800cda6:	4b16      	ldr	r3, [pc, #88]	; (800ce00 <__sfp+0x88>)
 800cda8:	60e3      	str	r3, [r4, #12]
 800cdaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdae:	6665      	str	r5, [r4, #100]	; 0x64
 800cdb0:	f000 f847 	bl	800ce42 <__retarget_lock_init_recursive>
 800cdb4:	f7ff ff96 	bl	800cce4 <__sfp_lock_release>
 800cdb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cdbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cdc0:	6025      	str	r5, [r4, #0]
 800cdc2:	61a5      	str	r5, [r4, #24]
 800cdc4:	2208      	movs	r2, #8
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdcc:	f7ff fef0 	bl	800cbb0 <memset>
 800cdd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdd8:	4620      	mov	r0, r4
 800cdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cddc:	3468      	adds	r4, #104	; 0x68
 800cdde:	e7d9      	b.n	800cd94 <__sfp+0x1c>
 800cde0:	2104      	movs	r1, #4
 800cde2:	4638      	mov	r0, r7
 800cde4:	f7ff ff62 	bl	800ccac <__sfmoreglue>
 800cde8:	4604      	mov	r4, r0
 800cdea:	6030      	str	r0, [r6, #0]
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d1d5      	bne.n	800cd9c <__sfp+0x24>
 800cdf0:	f7ff ff78 	bl	800cce4 <__sfp_lock_release>
 800cdf4:	230c      	movs	r3, #12
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	e7ee      	b.n	800cdd8 <__sfp+0x60>
 800cdfa:	bf00      	nop
 800cdfc:	0800f228 	.word	0x0800f228
 800ce00:	ffff0001 	.word	0xffff0001

0800ce04 <_fwalk_reent>:
 800ce04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce08:	4606      	mov	r6, r0
 800ce0a:	4688      	mov	r8, r1
 800ce0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce10:	2700      	movs	r7, #0
 800ce12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce16:	f1b9 0901 	subs.w	r9, r9, #1
 800ce1a:	d505      	bpl.n	800ce28 <_fwalk_reent+0x24>
 800ce1c:	6824      	ldr	r4, [r4, #0]
 800ce1e:	2c00      	cmp	r4, #0
 800ce20:	d1f7      	bne.n	800ce12 <_fwalk_reent+0xe>
 800ce22:	4638      	mov	r0, r7
 800ce24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce28:	89ab      	ldrh	r3, [r5, #12]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d907      	bls.n	800ce3e <_fwalk_reent+0x3a>
 800ce2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce32:	3301      	adds	r3, #1
 800ce34:	d003      	beq.n	800ce3e <_fwalk_reent+0x3a>
 800ce36:	4629      	mov	r1, r5
 800ce38:	4630      	mov	r0, r6
 800ce3a:	47c0      	blx	r8
 800ce3c:	4307      	orrs	r7, r0
 800ce3e:	3568      	adds	r5, #104	; 0x68
 800ce40:	e7e9      	b.n	800ce16 <_fwalk_reent+0x12>

0800ce42 <__retarget_lock_init_recursive>:
 800ce42:	4770      	bx	lr

0800ce44 <__retarget_lock_acquire_recursive>:
 800ce44:	4770      	bx	lr

0800ce46 <__retarget_lock_release_recursive>:
 800ce46:	4770      	bx	lr

0800ce48 <_malloc_r>:
 800ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4a:	1ccd      	adds	r5, r1, #3
 800ce4c:	f025 0503 	bic.w	r5, r5, #3
 800ce50:	3508      	adds	r5, #8
 800ce52:	2d0c      	cmp	r5, #12
 800ce54:	bf38      	it	cc
 800ce56:	250c      	movcc	r5, #12
 800ce58:	2d00      	cmp	r5, #0
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	db01      	blt.n	800ce62 <_malloc_r+0x1a>
 800ce5e:	42a9      	cmp	r1, r5
 800ce60:	d903      	bls.n	800ce6a <_malloc_r+0x22>
 800ce62:	230c      	movs	r3, #12
 800ce64:	6033      	str	r3, [r6, #0]
 800ce66:	2000      	movs	r0, #0
 800ce68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce6a:	f000 ff27 	bl	800dcbc <__malloc_lock>
 800ce6e:	4921      	ldr	r1, [pc, #132]	; (800cef4 <_malloc_r+0xac>)
 800ce70:	680a      	ldr	r2, [r1, #0]
 800ce72:	4614      	mov	r4, r2
 800ce74:	b99c      	cbnz	r4, 800ce9e <_malloc_r+0x56>
 800ce76:	4f20      	ldr	r7, [pc, #128]	; (800cef8 <_malloc_r+0xb0>)
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	b923      	cbnz	r3, 800ce86 <_malloc_r+0x3e>
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f000 fc86 	bl	800d790 <_sbrk_r>
 800ce84:	6038      	str	r0, [r7, #0]
 800ce86:	4629      	mov	r1, r5
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f000 fc81 	bl	800d790 <_sbrk_r>
 800ce8e:	1c43      	adds	r3, r0, #1
 800ce90:	d123      	bne.n	800ceda <_malloc_r+0x92>
 800ce92:	230c      	movs	r3, #12
 800ce94:	6033      	str	r3, [r6, #0]
 800ce96:	4630      	mov	r0, r6
 800ce98:	f000 ff16 	bl	800dcc8 <__malloc_unlock>
 800ce9c:	e7e3      	b.n	800ce66 <_malloc_r+0x1e>
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	1b5b      	subs	r3, r3, r5
 800cea2:	d417      	bmi.n	800ced4 <_malloc_r+0x8c>
 800cea4:	2b0b      	cmp	r3, #11
 800cea6:	d903      	bls.n	800ceb0 <_malloc_r+0x68>
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	441c      	add	r4, r3
 800ceac:	6025      	str	r5, [r4, #0]
 800ceae:	e004      	b.n	800ceba <_malloc_r+0x72>
 800ceb0:	6863      	ldr	r3, [r4, #4]
 800ceb2:	42a2      	cmp	r2, r4
 800ceb4:	bf0c      	ite	eq
 800ceb6:	600b      	streq	r3, [r1, #0]
 800ceb8:	6053      	strne	r3, [r2, #4]
 800ceba:	4630      	mov	r0, r6
 800cebc:	f000 ff04 	bl	800dcc8 <__malloc_unlock>
 800cec0:	f104 000b 	add.w	r0, r4, #11
 800cec4:	1d23      	adds	r3, r4, #4
 800cec6:	f020 0007 	bic.w	r0, r0, #7
 800ceca:	1ac2      	subs	r2, r0, r3
 800cecc:	d0cc      	beq.n	800ce68 <_malloc_r+0x20>
 800cece:	1a1b      	subs	r3, r3, r0
 800ced0:	50a3      	str	r3, [r4, r2]
 800ced2:	e7c9      	b.n	800ce68 <_malloc_r+0x20>
 800ced4:	4622      	mov	r2, r4
 800ced6:	6864      	ldr	r4, [r4, #4]
 800ced8:	e7cc      	b.n	800ce74 <_malloc_r+0x2c>
 800ceda:	1cc4      	adds	r4, r0, #3
 800cedc:	f024 0403 	bic.w	r4, r4, #3
 800cee0:	42a0      	cmp	r0, r4
 800cee2:	d0e3      	beq.n	800ceac <_malloc_r+0x64>
 800cee4:	1a21      	subs	r1, r4, r0
 800cee6:	4630      	mov	r0, r6
 800cee8:	f000 fc52 	bl	800d790 <_sbrk_r>
 800ceec:	3001      	adds	r0, #1
 800ceee:	d1dd      	bne.n	800ceac <_malloc_r+0x64>
 800cef0:	e7cf      	b.n	800ce92 <_malloc_r+0x4a>
 800cef2:	bf00      	nop
 800cef4:	200005a4 	.word	0x200005a4
 800cef8:	200005a8 	.word	0x200005a8

0800cefc <__ssputs_r>:
 800cefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf00:	688e      	ldr	r6, [r1, #8]
 800cf02:	429e      	cmp	r6, r3
 800cf04:	4682      	mov	sl, r0
 800cf06:	460c      	mov	r4, r1
 800cf08:	4690      	mov	r8, r2
 800cf0a:	461f      	mov	r7, r3
 800cf0c:	d838      	bhi.n	800cf80 <__ssputs_r+0x84>
 800cf0e:	898a      	ldrh	r2, [r1, #12]
 800cf10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf14:	d032      	beq.n	800cf7c <__ssputs_r+0x80>
 800cf16:	6825      	ldr	r5, [r4, #0]
 800cf18:	6909      	ldr	r1, [r1, #16]
 800cf1a:	eba5 0901 	sub.w	r9, r5, r1
 800cf1e:	6965      	ldr	r5, [r4, #20]
 800cf20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf28:	3301      	adds	r3, #1
 800cf2a:	444b      	add	r3, r9
 800cf2c:	106d      	asrs	r5, r5, #1
 800cf2e:	429d      	cmp	r5, r3
 800cf30:	bf38      	it	cc
 800cf32:	461d      	movcc	r5, r3
 800cf34:	0553      	lsls	r3, r2, #21
 800cf36:	d531      	bpl.n	800cf9c <__ssputs_r+0xa0>
 800cf38:	4629      	mov	r1, r5
 800cf3a:	f7ff ff85 	bl	800ce48 <_malloc_r>
 800cf3e:	4606      	mov	r6, r0
 800cf40:	b950      	cbnz	r0, 800cf58 <__ssputs_r+0x5c>
 800cf42:	230c      	movs	r3, #12
 800cf44:	f8ca 3000 	str.w	r3, [sl]
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4e:	81a3      	strh	r3, [r4, #12]
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf58:	6921      	ldr	r1, [r4, #16]
 800cf5a:	464a      	mov	r2, r9
 800cf5c:	f000 fe86 	bl	800dc6c <memcpy>
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf6a:	81a3      	strh	r3, [r4, #12]
 800cf6c:	6126      	str	r6, [r4, #16]
 800cf6e:	6165      	str	r5, [r4, #20]
 800cf70:	444e      	add	r6, r9
 800cf72:	eba5 0509 	sub.w	r5, r5, r9
 800cf76:	6026      	str	r6, [r4, #0]
 800cf78:	60a5      	str	r5, [r4, #8]
 800cf7a:	463e      	mov	r6, r7
 800cf7c:	42be      	cmp	r6, r7
 800cf7e:	d900      	bls.n	800cf82 <__ssputs_r+0x86>
 800cf80:	463e      	mov	r6, r7
 800cf82:	4632      	mov	r2, r6
 800cf84:	6820      	ldr	r0, [r4, #0]
 800cf86:	4641      	mov	r1, r8
 800cf88:	f000 fe7e 	bl	800dc88 <memmove>
 800cf8c:	68a3      	ldr	r3, [r4, #8]
 800cf8e:	6822      	ldr	r2, [r4, #0]
 800cf90:	1b9b      	subs	r3, r3, r6
 800cf92:	4432      	add	r2, r6
 800cf94:	60a3      	str	r3, [r4, #8]
 800cf96:	6022      	str	r2, [r4, #0]
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e7db      	b.n	800cf54 <__ssputs_r+0x58>
 800cf9c:	462a      	mov	r2, r5
 800cf9e:	f000 fee9 	bl	800dd74 <_realloc_r>
 800cfa2:	4606      	mov	r6, r0
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d1e1      	bne.n	800cf6c <__ssputs_r+0x70>
 800cfa8:	6921      	ldr	r1, [r4, #16]
 800cfaa:	4650      	mov	r0, sl
 800cfac:	f000 fe92 	bl	800dcd4 <_free_r>
 800cfb0:	e7c7      	b.n	800cf42 <__ssputs_r+0x46>
	...

0800cfb4 <_svfiprintf_r>:
 800cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb8:	4698      	mov	r8, r3
 800cfba:	898b      	ldrh	r3, [r1, #12]
 800cfbc:	061b      	lsls	r3, r3, #24
 800cfbe:	b09d      	sub	sp, #116	; 0x74
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	460d      	mov	r5, r1
 800cfc4:	4614      	mov	r4, r2
 800cfc6:	d50e      	bpl.n	800cfe6 <_svfiprintf_r+0x32>
 800cfc8:	690b      	ldr	r3, [r1, #16]
 800cfca:	b963      	cbnz	r3, 800cfe6 <_svfiprintf_r+0x32>
 800cfcc:	2140      	movs	r1, #64	; 0x40
 800cfce:	f7ff ff3b 	bl	800ce48 <_malloc_r>
 800cfd2:	6028      	str	r0, [r5, #0]
 800cfd4:	6128      	str	r0, [r5, #16]
 800cfd6:	b920      	cbnz	r0, 800cfe2 <_svfiprintf_r+0x2e>
 800cfd8:	230c      	movs	r3, #12
 800cfda:	603b      	str	r3, [r7, #0]
 800cfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe0:	e0d1      	b.n	800d186 <_svfiprintf_r+0x1d2>
 800cfe2:	2340      	movs	r3, #64	; 0x40
 800cfe4:	616b      	str	r3, [r5, #20]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfea:	2320      	movs	r3, #32
 800cfec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cff0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cff4:	2330      	movs	r3, #48	; 0x30
 800cff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1a0 <_svfiprintf_r+0x1ec>
 800cffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cffe:	f04f 0901 	mov.w	r9, #1
 800d002:	4623      	mov	r3, r4
 800d004:	469a      	mov	sl, r3
 800d006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d00a:	b10a      	cbz	r2, 800d010 <_svfiprintf_r+0x5c>
 800d00c:	2a25      	cmp	r2, #37	; 0x25
 800d00e:	d1f9      	bne.n	800d004 <_svfiprintf_r+0x50>
 800d010:	ebba 0b04 	subs.w	fp, sl, r4
 800d014:	d00b      	beq.n	800d02e <_svfiprintf_r+0x7a>
 800d016:	465b      	mov	r3, fp
 800d018:	4622      	mov	r2, r4
 800d01a:	4629      	mov	r1, r5
 800d01c:	4638      	mov	r0, r7
 800d01e:	f7ff ff6d 	bl	800cefc <__ssputs_r>
 800d022:	3001      	adds	r0, #1
 800d024:	f000 80aa 	beq.w	800d17c <_svfiprintf_r+0x1c8>
 800d028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d02a:	445a      	add	r2, fp
 800d02c:	9209      	str	r2, [sp, #36]	; 0x24
 800d02e:	f89a 3000 	ldrb.w	r3, [sl]
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 80a2 	beq.w	800d17c <_svfiprintf_r+0x1c8>
 800d038:	2300      	movs	r3, #0
 800d03a:	f04f 32ff 	mov.w	r2, #4294967295
 800d03e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d042:	f10a 0a01 	add.w	sl, sl, #1
 800d046:	9304      	str	r3, [sp, #16]
 800d048:	9307      	str	r3, [sp, #28]
 800d04a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d04e:	931a      	str	r3, [sp, #104]	; 0x68
 800d050:	4654      	mov	r4, sl
 800d052:	2205      	movs	r2, #5
 800d054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d058:	4851      	ldr	r0, [pc, #324]	; (800d1a0 <_svfiprintf_r+0x1ec>)
 800d05a:	f7f3 f8c1 	bl	80001e0 <memchr>
 800d05e:	9a04      	ldr	r2, [sp, #16]
 800d060:	b9d8      	cbnz	r0, 800d09a <_svfiprintf_r+0xe6>
 800d062:	06d0      	lsls	r0, r2, #27
 800d064:	bf44      	itt	mi
 800d066:	2320      	movmi	r3, #32
 800d068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d06c:	0711      	lsls	r1, r2, #28
 800d06e:	bf44      	itt	mi
 800d070:	232b      	movmi	r3, #43	; 0x2b
 800d072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d076:	f89a 3000 	ldrb.w	r3, [sl]
 800d07a:	2b2a      	cmp	r3, #42	; 0x2a
 800d07c:	d015      	beq.n	800d0aa <_svfiprintf_r+0xf6>
 800d07e:	9a07      	ldr	r2, [sp, #28]
 800d080:	4654      	mov	r4, sl
 800d082:	2000      	movs	r0, #0
 800d084:	f04f 0c0a 	mov.w	ip, #10
 800d088:	4621      	mov	r1, r4
 800d08a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d08e:	3b30      	subs	r3, #48	; 0x30
 800d090:	2b09      	cmp	r3, #9
 800d092:	d94e      	bls.n	800d132 <_svfiprintf_r+0x17e>
 800d094:	b1b0      	cbz	r0, 800d0c4 <_svfiprintf_r+0x110>
 800d096:	9207      	str	r2, [sp, #28]
 800d098:	e014      	b.n	800d0c4 <_svfiprintf_r+0x110>
 800d09a:	eba0 0308 	sub.w	r3, r0, r8
 800d09e:	fa09 f303 	lsl.w	r3, r9, r3
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	9304      	str	r3, [sp, #16]
 800d0a6:	46a2      	mov	sl, r4
 800d0a8:	e7d2      	b.n	800d050 <_svfiprintf_r+0x9c>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	1d19      	adds	r1, r3, #4
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	9103      	str	r1, [sp, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	bfbb      	ittet	lt
 800d0b6:	425b      	neglt	r3, r3
 800d0b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0bc:	9307      	strge	r3, [sp, #28]
 800d0be:	9307      	strlt	r3, [sp, #28]
 800d0c0:	bfb8      	it	lt
 800d0c2:	9204      	strlt	r2, [sp, #16]
 800d0c4:	7823      	ldrb	r3, [r4, #0]
 800d0c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0c8:	d10c      	bne.n	800d0e4 <_svfiprintf_r+0x130>
 800d0ca:	7863      	ldrb	r3, [r4, #1]
 800d0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ce:	d135      	bne.n	800d13c <_svfiprintf_r+0x188>
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	1d1a      	adds	r2, r3, #4
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	9203      	str	r2, [sp, #12]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	bfb8      	it	lt
 800d0dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0e0:	3402      	adds	r4, #2
 800d0e2:	9305      	str	r3, [sp, #20]
 800d0e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1b0 <_svfiprintf_r+0x1fc>
 800d0e8:	7821      	ldrb	r1, [r4, #0]
 800d0ea:	2203      	movs	r2, #3
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	f7f3 f877 	bl	80001e0 <memchr>
 800d0f2:	b140      	cbz	r0, 800d106 <_svfiprintf_r+0x152>
 800d0f4:	2340      	movs	r3, #64	; 0x40
 800d0f6:	eba0 000a 	sub.w	r0, r0, sl
 800d0fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d0fe:	9b04      	ldr	r3, [sp, #16]
 800d100:	4303      	orrs	r3, r0
 800d102:	3401      	adds	r4, #1
 800d104:	9304      	str	r3, [sp, #16]
 800d106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d10a:	4826      	ldr	r0, [pc, #152]	; (800d1a4 <_svfiprintf_r+0x1f0>)
 800d10c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d110:	2206      	movs	r2, #6
 800d112:	f7f3 f865 	bl	80001e0 <memchr>
 800d116:	2800      	cmp	r0, #0
 800d118:	d038      	beq.n	800d18c <_svfiprintf_r+0x1d8>
 800d11a:	4b23      	ldr	r3, [pc, #140]	; (800d1a8 <_svfiprintf_r+0x1f4>)
 800d11c:	bb1b      	cbnz	r3, 800d166 <_svfiprintf_r+0x1b2>
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	3307      	adds	r3, #7
 800d122:	f023 0307 	bic.w	r3, r3, #7
 800d126:	3308      	adds	r3, #8
 800d128:	9303      	str	r3, [sp, #12]
 800d12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d12c:	4433      	add	r3, r6
 800d12e:	9309      	str	r3, [sp, #36]	; 0x24
 800d130:	e767      	b.n	800d002 <_svfiprintf_r+0x4e>
 800d132:	fb0c 3202 	mla	r2, ip, r2, r3
 800d136:	460c      	mov	r4, r1
 800d138:	2001      	movs	r0, #1
 800d13a:	e7a5      	b.n	800d088 <_svfiprintf_r+0xd4>
 800d13c:	2300      	movs	r3, #0
 800d13e:	3401      	adds	r4, #1
 800d140:	9305      	str	r3, [sp, #20]
 800d142:	4619      	mov	r1, r3
 800d144:	f04f 0c0a 	mov.w	ip, #10
 800d148:	4620      	mov	r0, r4
 800d14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d14e:	3a30      	subs	r2, #48	; 0x30
 800d150:	2a09      	cmp	r2, #9
 800d152:	d903      	bls.n	800d15c <_svfiprintf_r+0x1a8>
 800d154:	2b00      	cmp	r3, #0
 800d156:	d0c5      	beq.n	800d0e4 <_svfiprintf_r+0x130>
 800d158:	9105      	str	r1, [sp, #20]
 800d15a:	e7c3      	b.n	800d0e4 <_svfiprintf_r+0x130>
 800d15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d160:	4604      	mov	r4, r0
 800d162:	2301      	movs	r3, #1
 800d164:	e7f0      	b.n	800d148 <_svfiprintf_r+0x194>
 800d166:	ab03      	add	r3, sp, #12
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	462a      	mov	r2, r5
 800d16c:	4b0f      	ldr	r3, [pc, #60]	; (800d1ac <_svfiprintf_r+0x1f8>)
 800d16e:	a904      	add	r1, sp, #16
 800d170:	4638      	mov	r0, r7
 800d172:	f3af 8000 	nop.w
 800d176:	1c42      	adds	r2, r0, #1
 800d178:	4606      	mov	r6, r0
 800d17a:	d1d6      	bne.n	800d12a <_svfiprintf_r+0x176>
 800d17c:	89ab      	ldrh	r3, [r5, #12]
 800d17e:	065b      	lsls	r3, r3, #25
 800d180:	f53f af2c 	bmi.w	800cfdc <_svfiprintf_r+0x28>
 800d184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d186:	b01d      	add	sp, #116	; 0x74
 800d188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18c:	ab03      	add	r3, sp, #12
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	462a      	mov	r2, r5
 800d192:	4b06      	ldr	r3, [pc, #24]	; (800d1ac <_svfiprintf_r+0x1f8>)
 800d194:	a904      	add	r1, sp, #16
 800d196:	4638      	mov	r0, r7
 800d198:	f000 f9d4 	bl	800d544 <_printf_i>
 800d19c:	e7eb      	b.n	800d176 <_svfiprintf_r+0x1c2>
 800d19e:	bf00      	nop
 800d1a0:	0800f28c 	.word	0x0800f28c
 800d1a4:	0800f296 	.word	0x0800f296
 800d1a8:	00000000 	.word	0x00000000
 800d1ac:	0800cefd 	.word	0x0800cefd
 800d1b0:	0800f292 	.word	0x0800f292

0800d1b4 <__sfputc_r>:
 800d1b4:	6893      	ldr	r3, [r2, #8]
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	b410      	push	{r4}
 800d1bc:	6093      	str	r3, [r2, #8]
 800d1be:	da08      	bge.n	800d1d2 <__sfputc_r+0x1e>
 800d1c0:	6994      	ldr	r4, [r2, #24]
 800d1c2:	42a3      	cmp	r3, r4
 800d1c4:	db01      	blt.n	800d1ca <__sfputc_r+0x16>
 800d1c6:	290a      	cmp	r1, #10
 800d1c8:	d103      	bne.n	800d1d2 <__sfputc_r+0x1e>
 800d1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ce:	f000 bb33 	b.w	800d838 <__swbuf_r>
 800d1d2:	6813      	ldr	r3, [r2, #0]
 800d1d4:	1c58      	adds	r0, r3, #1
 800d1d6:	6010      	str	r0, [r2, #0]
 800d1d8:	7019      	strb	r1, [r3, #0]
 800d1da:	4608      	mov	r0, r1
 800d1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <__sfputs_r>:
 800d1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	460f      	mov	r7, r1
 800d1e8:	4614      	mov	r4, r2
 800d1ea:	18d5      	adds	r5, r2, r3
 800d1ec:	42ac      	cmp	r4, r5
 800d1ee:	d101      	bne.n	800d1f4 <__sfputs_r+0x12>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e007      	b.n	800d204 <__sfputs_r+0x22>
 800d1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f8:	463a      	mov	r2, r7
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff ffda 	bl	800d1b4 <__sfputc_r>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d1f3      	bne.n	800d1ec <__sfputs_r+0xa>
 800d204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d208 <_vfiprintf_r>:
 800d208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20c:	460d      	mov	r5, r1
 800d20e:	b09d      	sub	sp, #116	; 0x74
 800d210:	4614      	mov	r4, r2
 800d212:	4698      	mov	r8, r3
 800d214:	4606      	mov	r6, r0
 800d216:	b118      	cbz	r0, 800d220 <_vfiprintf_r+0x18>
 800d218:	6983      	ldr	r3, [r0, #24]
 800d21a:	b90b      	cbnz	r3, 800d220 <_vfiprintf_r+0x18>
 800d21c:	f7ff fd74 	bl	800cd08 <__sinit>
 800d220:	4b89      	ldr	r3, [pc, #548]	; (800d448 <_vfiprintf_r+0x240>)
 800d222:	429d      	cmp	r5, r3
 800d224:	d11b      	bne.n	800d25e <_vfiprintf_r+0x56>
 800d226:	6875      	ldr	r5, [r6, #4]
 800d228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d22a:	07d9      	lsls	r1, r3, #31
 800d22c:	d405      	bmi.n	800d23a <_vfiprintf_r+0x32>
 800d22e:	89ab      	ldrh	r3, [r5, #12]
 800d230:	059a      	lsls	r2, r3, #22
 800d232:	d402      	bmi.n	800d23a <_vfiprintf_r+0x32>
 800d234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d236:	f7ff fe05 	bl	800ce44 <__retarget_lock_acquire_recursive>
 800d23a:	89ab      	ldrh	r3, [r5, #12]
 800d23c:	071b      	lsls	r3, r3, #28
 800d23e:	d501      	bpl.n	800d244 <_vfiprintf_r+0x3c>
 800d240:	692b      	ldr	r3, [r5, #16]
 800d242:	b9eb      	cbnz	r3, 800d280 <_vfiprintf_r+0x78>
 800d244:	4629      	mov	r1, r5
 800d246:	4630      	mov	r0, r6
 800d248:	f000 fb5a 	bl	800d900 <__swsetup_r>
 800d24c:	b1c0      	cbz	r0, 800d280 <_vfiprintf_r+0x78>
 800d24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d250:	07dc      	lsls	r4, r3, #31
 800d252:	d50e      	bpl.n	800d272 <_vfiprintf_r+0x6a>
 800d254:	f04f 30ff 	mov.w	r0, #4294967295
 800d258:	b01d      	add	sp, #116	; 0x74
 800d25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d25e:	4b7b      	ldr	r3, [pc, #492]	; (800d44c <_vfiprintf_r+0x244>)
 800d260:	429d      	cmp	r5, r3
 800d262:	d101      	bne.n	800d268 <_vfiprintf_r+0x60>
 800d264:	68b5      	ldr	r5, [r6, #8]
 800d266:	e7df      	b.n	800d228 <_vfiprintf_r+0x20>
 800d268:	4b79      	ldr	r3, [pc, #484]	; (800d450 <_vfiprintf_r+0x248>)
 800d26a:	429d      	cmp	r5, r3
 800d26c:	bf08      	it	eq
 800d26e:	68f5      	ldreq	r5, [r6, #12]
 800d270:	e7da      	b.n	800d228 <_vfiprintf_r+0x20>
 800d272:	89ab      	ldrh	r3, [r5, #12]
 800d274:	0598      	lsls	r0, r3, #22
 800d276:	d4ed      	bmi.n	800d254 <_vfiprintf_r+0x4c>
 800d278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d27a:	f7ff fde4 	bl	800ce46 <__retarget_lock_release_recursive>
 800d27e:	e7e9      	b.n	800d254 <_vfiprintf_r+0x4c>
 800d280:	2300      	movs	r3, #0
 800d282:	9309      	str	r3, [sp, #36]	; 0x24
 800d284:	2320      	movs	r3, #32
 800d286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d28e:	2330      	movs	r3, #48	; 0x30
 800d290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d454 <_vfiprintf_r+0x24c>
 800d294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d298:	f04f 0901 	mov.w	r9, #1
 800d29c:	4623      	mov	r3, r4
 800d29e:	469a      	mov	sl, r3
 800d2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2a4:	b10a      	cbz	r2, 800d2aa <_vfiprintf_r+0xa2>
 800d2a6:	2a25      	cmp	r2, #37	; 0x25
 800d2a8:	d1f9      	bne.n	800d29e <_vfiprintf_r+0x96>
 800d2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ae:	d00b      	beq.n	800d2c8 <_vfiprintf_r+0xc0>
 800d2b0:	465b      	mov	r3, fp
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f7ff ff93 	bl	800d1e2 <__sfputs_r>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	f000 80aa 	beq.w	800d416 <_vfiprintf_r+0x20e>
 800d2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2c4:	445a      	add	r2, fp
 800d2c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 80a2 	beq.w	800d416 <_vfiprintf_r+0x20e>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2dc:	f10a 0a01 	add.w	sl, sl, #1
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	9307      	str	r3, [sp, #28]
 800d2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d2ea:	4654      	mov	r4, sl
 800d2ec:	2205      	movs	r2, #5
 800d2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f2:	4858      	ldr	r0, [pc, #352]	; (800d454 <_vfiprintf_r+0x24c>)
 800d2f4:	f7f2 ff74 	bl	80001e0 <memchr>
 800d2f8:	9a04      	ldr	r2, [sp, #16]
 800d2fa:	b9d8      	cbnz	r0, 800d334 <_vfiprintf_r+0x12c>
 800d2fc:	06d1      	lsls	r1, r2, #27
 800d2fe:	bf44      	itt	mi
 800d300:	2320      	movmi	r3, #32
 800d302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d306:	0713      	lsls	r3, r2, #28
 800d308:	bf44      	itt	mi
 800d30a:	232b      	movmi	r3, #43	; 0x2b
 800d30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d310:	f89a 3000 	ldrb.w	r3, [sl]
 800d314:	2b2a      	cmp	r3, #42	; 0x2a
 800d316:	d015      	beq.n	800d344 <_vfiprintf_r+0x13c>
 800d318:	9a07      	ldr	r2, [sp, #28]
 800d31a:	4654      	mov	r4, sl
 800d31c:	2000      	movs	r0, #0
 800d31e:	f04f 0c0a 	mov.w	ip, #10
 800d322:	4621      	mov	r1, r4
 800d324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d328:	3b30      	subs	r3, #48	; 0x30
 800d32a:	2b09      	cmp	r3, #9
 800d32c:	d94e      	bls.n	800d3cc <_vfiprintf_r+0x1c4>
 800d32e:	b1b0      	cbz	r0, 800d35e <_vfiprintf_r+0x156>
 800d330:	9207      	str	r2, [sp, #28]
 800d332:	e014      	b.n	800d35e <_vfiprintf_r+0x156>
 800d334:	eba0 0308 	sub.w	r3, r0, r8
 800d338:	fa09 f303 	lsl.w	r3, r9, r3
 800d33c:	4313      	orrs	r3, r2
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	46a2      	mov	sl, r4
 800d342:	e7d2      	b.n	800d2ea <_vfiprintf_r+0xe2>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	1d19      	adds	r1, r3, #4
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	9103      	str	r1, [sp, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfbb      	ittet	lt
 800d350:	425b      	neglt	r3, r3
 800d352:	f042 0202 	orrlt.w	r2, r2, #2
 800d356:	9307      	strge	r3, [sp, #28]
 800d358:	9307      	strlt	r3, [sp, #28]
 800d35a:	bfb8      	it	lt
 800d35c:	9204      	strlt	r2, [sp, #16]
 800d35e:	7823      	ldrb	r3, [r4, #0]
 800d360:	2b2e      	cmp	r3, #46	; 0x2e
 800d362:	d10c      	bne.n	800d37e <_vfiprintf_r+0x176>
 800d364:	7863      	ldrb	r3, [r4, #1]
 800d366:	2b2a      	cmp	r3, #42	; 0x2a
 800d368:	d135      	bne.n	800d3d6 <_vfiprintf_r+0x1ce>
 800d36a:	9b03      	ldr	r3, [sp, #12]
 800d36c:	1d1a      	adds	r2, r3, #4
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	9203      	str	r2, [sp, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	bfb8      	it	lt
 800d376:	f04f 33ff 	movlt.w	r3, #4294967295
 800d37a:	3402      	adds	r4, #2
 800d37c:	9305      	str	r3, [sp, #20]
 800d37e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d464 <_vfiprintf_r+0x25c>
 800d382:	7821      	ldrb	r1, [r4, #0]
 800d384:	2203      	movs	r2, #3
 800d386:	4650      	mov	r0, sl
 800d388:	f7f2 ff2a 	bl	80001e0 <memchr>
 800d38c:	b140      	cbz	r0, 800d3a0 <_vfiprintf_r+0x198>
 800d38e:	2340      	movs	r3, #64	; 0x40
 800d390:	eba0 000a 	sub.w	r0, r0, sl
 800d394:	fa03 f000 	lsl.w	r0, r3, r0
 800d398:	9b04      	ldr	r3, [sp, #16]
 800d39a:	4303      	orrs	r3, r0
 800d39c:	3401      	adds	r4, #1
 800d39e:	9304      	str	r3, [sp, #16]
 800d3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3a4:	482c      	ldr	r0, [pc, #176]	; (800d458 <_vfiprintf_r+0x250>)
 800d3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3aa:	2206      	movs	r2, #6
 800d3ac:	f7f2 ff18 	bl	80001e0 <memchr>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d03f      	beq.n	800d434 <_vfiprintf_r+0x22c>
 800d3b4:	4b29      	ldr	r3, [pc, #164]	; (800d45c <_vfiprintf_r+0x254>)
 800d3b6:	bb1b      	cbnz	r3, 800d400 <_vfiprintf_r+0x1f8>
 800d3b8:	9b03      	ldr	r3, [sp, #12]
 800d3ba:	3307      	adds	r3, #7
 800d3bc:	f023 0307 	bic.w	r3, r3, #7
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	9303      	str	r3, [sp, #12]
 800d3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c6:	443b      	add	r3, r7
 800d3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ca:	e767      	b.n	800d29c <_vfiprintf_r+0x94>
 800d3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	2001      	movs	r0, #1
 800d3d4:	e7a5      	b.n	800d322 <_vfiprintf_r+0x11a>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	3401      	adds	r4, #1
 800d3da:	9305      	str	r3, [sp, #20]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	f04f 0c0a 	mov.w	ip, #10
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3e8:	3a30      	subs	r2, #48	; 0x30
 800d3ea:	2a09      	cmp	r2, #9
 800d3ec:	d903      	bls.n	800d3f6 <_vfiprintf_r+0x1ee>
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0c5      	beq.n	800d37e <_vfiprintf_r+0x176>
 800d3f2:	9105      	str	r1, [sp, #20]
 800d3f4:	e7c3      	b.n	800d37e <_vfiprintf_r+0x176>
 800d3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e7f0      	b.n	800d3e2 <_vfiprintf_r+0x1da>
 800d400:	ab03      	add	r3, sp, #12
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	462a      	mov	r2, r5
 800d406:	4b16      	ldr	r3, [pc, #88]	; (800d460 <_vfiprintf_r+0x258>)
 800d408:	a904      	add	r1, sp, #16
 800d40a:	4630      	mov	r0, r6
 800d40c:	f3af 8000 	nop.w
 800d410:	4607      	mov	r7, r0
 800d412:	1c78      	adds	r0, r7, #1
 800d414:	d1d6      	bne.n	800d3c4 <_vfiprintf_r+0x1bc>
 800d416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d418:	07d9      	lsls	r1, r3, #31
 800d41a:	d405      	bmi.n	800d428 <_vfiprintf_r+0x220>
 800d41c:	89ab      	ldrh	r3, [r5, #12]
 800d41e:	059a      	lsls	r2, r3, #22
 800d420:	d402      	bmi.n	800d428 <_vfiprintf_r+0x220>
 800d422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d424:	f7ff fd0f 	bl	800ce46 <__retarget_lock_release_recursive>
 800d428:	89ab      	ldrh	r3, [r5, #12]
 800d42a:	065b      	lsls	r3, r3, #25
 800d42c:	f53f af12 	bmi.w	800d254 <_vfiprintf_r+0x4c>
 800d430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d432:	e711      	b.n	800d258 <_vfiprintf_r+0x50>
 800d434:	ab03      	add	r3, sp, #12
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	462a      	mov	r2, r5
 800d43a:	4b09      	ldr	r3, [pc, #36]	; (800d460 <_vfiprintf_r+0x258>)
 800d43c:	a904      	add	r1, sp, #16
 800d43e:	4630      	mov	r0, r6
 800d440:	f000 f880 	bl	800d544 <_printf_i>
 800d444:	e7e4      	b.n	800d410 <_vfiprintf_r+0x208>
 800d446:	bf00      	nop
 800d448:	0800f24c 	.word	0x0800f24c
 800d44c:	0800f26c 	.word	0x0800f26c
 800d450:	0800f22c 	.word	0x0800f22c
 800d454:	0800f28c 	.word	0x0800f28c
 800d458:	0800f296 	.word	0x0800f296
 800d45c:	00000000 	.word	0x00000000
 800d460:	0800d1e3 	.word	0x0800d1e3
 800d464:	0800f292 	.word	0x0800f292

0800d468 <_printf_common>:
 800d468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d46c:	4616      	mov	r6, r2
 800d46e:	4699      	mov	r9, r3
 800d470:	688a      	ldr	r2, [r1, #8]
 800d472:	690b      	ldr	r3, [r1, #16]
 800d474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d478:	4293      	cmp	r3, r2
 800d47a:	bfb8      	it	lt
 800d47c:	4613      	movlt	r3, r2
 800d47e:	6033      	str	r3, [r6, #0]
 800d480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d484:	4607      	mov	r7, r0
 800d486:	460c      	mov	r4, r1
 800d488:	b10a      	cbz	r2, 800d48e <_printf_common+0x26>
 800d48a:	3301      	adds	r3, #1
 800d48c:	6033      	str	r3, [r6, #0]
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	0699      	lsls	r1, r3, #26
 800d492:	bf42      	ittt	mi
 800d494:	6833      	ldrmi	r3, [r6, #0]
 800d496:	3302      	addmi	r3, #2
 800d498:	6033      	strmi	r3, [r6, #0]
 800d49a:	6825      	ldr	r5, [r4, #0]
 800d49c:	f015 0506 	ands.w	r5, r5, #6
 800d4a0:	d106      	bne.n	800d4b0 <_printf_common+0x48>
 800d4a2:	f104 0a19 	add.w	sl, r4, #25
 800d4a6:	68e3      	ldr	r3, [r4, #12]
 800d4a8:	6832      	ldr	r2, [r6, #0]
 800d4aa:	1a9b      	subs	r3, r3, r2
 800d4ac:	42ab      	cmp	r3, r5
 800d4ae:	dc26      	bgt.n	800d4fe <_printf_common+0x96>
 800d4b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4b4:	1e13      	subs	r3, r2, #0
 800d4b6:	6822      	ldr	r2, [r4, #0]
 800d4b8:	bf18      	it	ne
 800d4ba:	2301      	movne	r3, #1
 800d4bc:	0692      	lsls	r2, r2, #26
 800d4be:	d42b      	bmi.n	800d518 <_printf_common+0xb0>
 800d4c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	47c0      	blx	r8
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	d01e      	beq.n	800d50c <_printf_common+0xa4>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	68e5      	ldr	r5, [r4, #12]
 800d4d2:	6832      	ldr	r2, [r6, #0]
 800d4d4:	f003 0306 	and.w	r3, r3, #6
 800d4d8:	2b04      	cmp	r3, #4
 800d4da:	bf08      	it	eq
 800d4dc:	1aad      	subeq	r5, r5, r2
 800d4de:	68a3      	ldr	r3, [r4, #8]
 800d4e0:	6922      	ldr	r2, [r4, #16]
 800d4e2:	bf0c      	ite	eq
 800d4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4e8:	2500      	movne	r5, #0
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	bfc4      	itt	gt
 800d4ee:	1a9b      	subgt	r3, r3, r2
 800d4f0:	18ed      	addgt	r5, r5, r3
 800d4f2:	2600      	movs	r6, #0
 800d4f4:	341a      	adds	r4, #26
 800d4f6:	42b5      	cmp	r5, r6
 800d4f8:	d11a      	bne.n	800d530 <_printf_common+0xc8>
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	e008      	b.n	800d510 <_printf_common+0xa8>
 800d4fe:	2301      	movs	r3, #1
 800d500:	4652      	mov	r2, sl
 800d502:	4649      	mov	r1, r9
 800d504:	4638      	mov	r0, r7
 800d506:	47c0      	blx	r8
 800d508:	3001      	adds	r0, #1
 800d50a:	d103      	bne.n	800d514 <_printf_common+0xac>
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295
 800d510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d514:	3501      	adds	r5, #1
 800d516:	e7c6      	b.n	800d4a6 <_printf_common+0x3e>
 800d518:	18e1      	adds	r1, r4, r3
 800d51a:	1c5a      	adds	r2, r3, #1
 800d51c:	2030      	movs	r0, #48	; 0x30
 800d51e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d522:	4422      	add	r2, r4
 800d524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d52c:	3302      	adds	r3, #2
 800d52e:	e7c7      	b.n	800d4c0 <_printf_common+0x58>
 800d530:	2301      	movs	r3, #1
 800d532:	4622      	mov	r2, r4
 800d534:	4649      	mov	r1, r9
 800d536:	4638      	mov	r0, r7
 800d538:	47c0      	blx	r8
 800d53a:	3001      	adds	r0, #1
 800d53c:	d0e6      	beq.n	800d50c <_printf_common+0xa4>
 800d53e:	3601      	adds	r6, #1
 800d540:	e7d9      	b.n	800d4f6 <_printf_common+0x8e>
	...

0800d544 <_printf_i>:
 800d544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d548:	460c      	mov	r4, r1
 800d54a:	4691      	mov	r9, r2
 800d54c:	7e27      	ldrb	r7, [r4, #24]
 800d54e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d550:	2f78      	cmp	r7, #120	; 0x78
 800d552:	4680      	mov	r8, r0
 800d554:	469a      	mov	sl, r3
 800d556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d55a:	d807      	bhi.n	800d56c <_printf_i+0x28>
 800d55c:	2f62      	cmp	r7, #98	; 0x62
 800d55e:	d80a      	bhi.n	800d576 <_printf_i+0x32>
 800d560:	2f00      	cmp	r7, #0
 800d562:	f000 80d8 	beq.w	800d716 <_printf_i+0x1d2>
 800d566:	2f58      	cmp	r7, #88	; 0x58
 800d568:	f000 80a3 	beq.w	800d6b2 <_printf_i+0x16e>
 800d56c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d574:	e03a      	b.n	800d5ec <_printf_i+0xa8>
 800d576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d57a:	2b15      	cmp	r3, #21
 800d57c:	d8f6      	bhi.n	800d56c <_printf_i+0x28>
 800d57e:	a001      	add	r0, pc, #4	; (adr r0, 800d584 <_printf_i+0x40>)
 800d580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d584:	0800d5dd 	.word	0x0800d5dd
 800d588:	0800d5f1 	.word	0x0800d5f1
 800d58c:	0800d56d 	.word	0x0800d56d
 800d590:	0800d56d 	.word	0x0800d56d
 800d594:	0800d56d 	.word	0x0800d56d
 800d598:	0800d56d 	.word	0x0800d56d
 800d59c:	0800d5f1 	.word	0x0800d5f1
 800d5a0:	0800d56d 	.word	0x0800d56d
 800d5a4:	0800d56d 	.word	0x0800d56d
 800d5a8:	0800d56d 	.word	0x0800d56d
 800d5ac:	0800d56d 	.word	0x0800d56d
 800d5b0:	0800d6fd 	.word	0x0800d6fd
 800d5b4:	0800d621 	.word	0x0800d621
 800d5b8:	0800d6df 	.word	0x0800d6df
 800d5bc:	0800d56d 	.word	0x0800d56d
 800d5c0:	0800d56d 	.word	0x0800d56d
 800d5c4:	0800d71f 	.word	0x0800d71f
 800d5c8:	0800d56d 	.word	0x0800d56d
 800d5cc:	0800d621 	.word	0x0800d621
 800d5d0:	0800d56d 	.word	0x0800d56d
 800d5d4:	0800d56d 	.word	0x0800d56d
 800d5d8:	0800d6e7 	.word	0x0800d6e7
 800d5dc:	680b      	ldr	r3, [r1, #0]
 800d5de:	1d1a      	adds	r2, r3, #4
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	600a      	str	r2, [r1, #0]
 800d5e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d5e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e0a3      	b.n	800d738 <_printf_i+0x1f4>
 800d5f0:	6825      	ldr	r5, [r4, #0]
 800d5f2:	6808      	ldr	r0, [r1, #0]
 800d5f4:	062e      	lsls	r6, r5, #24
 800d5f6:	f100 0304 	add.w	r3, r0, #4
 800d5fa:	d50a      	bpl.n	800d612 <_printf_i+0xce>
 800d5fc:	6805      	ldr	r5, [r0, #0]
 800d5fe:	600b      	str	r3, [r1, #0]
 800d600:	2d00      	cmp	r5, #0
 800d602:	da03      	bge.n	800d60c <_printf_i+0xc8>
 800d604:	232d      	movs	r3, #45	; 0x2d
 800d606:	426d      	negs	r5, r5
 800d608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d60c:	485e      	ldr	r0, [pc, #376]	; (800d788 <_printf_i+0x244>)
 800d60e:	230a      	movs	r3, #10
 800d610:	e019      	b.n	800d646 <_printf_i+0x102>
 800d612:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d616:	6805      	ldr	r5, [r0, #0]
 800d618:	600b      	str	r3, [r1, #0]
 800d61a:	bf18      	it	ne
 800d61c:	b22d      	sxthne	r5, r5
 800d61e:	e7ef      	b.n	800d600 <_printf_i+0xbc>
 800d620:	680b      	ldr	r3, [r1, #0]
 800d622:	6825      	ldr	r5, [r4, #0]
 800d624:	1d18      	adds	r0, r3, #4
 800d626:	6008      	str	r0, [r1, #0]
 800d628:	0628      	lsls	r0, r5, #24
 800d62a:	d501      	bpl.n	800d630 <_printf_i+0xec>
 800d62c:	681d      	ldr	r5, [r3, #0]
 800d62e:	e002      	b.n	800d636 <_printf_i+0xf2>
 800d630:	0669      	lsls	r1, r5, #25
 800d632:	d5fb      	bpl.n	800d62c <_printf_i+0xe8>
 800d634:	881d      	ldrh	r5, [r3, #0]
 800d636:	4854      	ldr	r0, [pc, #336]	; (800d788 <_printf_i+0x244>)
 800d638:	2f6f      	cmp	r7, #111	; 0x6f
 800d63a:	bf0c      	ite	eq
 800d63c:	2308      	moveq	r3, #8
 800d63e:	230a      	movne	r3, #10
 800d640:	2100      	movs	r1, #0
 800d642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d646:	6866      	ldr	r6, [r4, #4]
 800d648:	60a6      	str	r6, [r4, #8]
 800d64a:	2e00      	cmp	r6, #0
 800d64c:	bfa2      	ittt	ge
 800d64e:	6821      	ldrge	r1, [r4, #0]
 800d650:	f021 0104 	bicge.w	r1, r1, #4
 800d654:	6021      	strge	r1, [r4, #0]
 800d656:	b90d      	cbnz	r5, 800d65c <_printf_i+0x118>
 800d658:	2e00      	cmp	r6, #0
 800d65a:	d04d      	beq.n	800d6f8 <_printf_i+0x1b4>
 800d65c:	4616      	mov	r6, r2
 800d65e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d662:	fb03 5711 	mls	r7, r3, r1, r5
 800d666:	5dc7      	ldrb	r7, [r0, r7]
 800d668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d66c:	462f      	mov	r7, r5
 800d66e:	42bb      	cmp	r3, r7
 800d670:	460d      	mov	r5, r1
 800d672:	d9f4      	bls.n	800d65e <_printf_i+0x11a>
 800d674:	2b08      	cmp	r3, #8
 800d676:	d10b      	bne.n	800d690 <_printf_i+0x14c>
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	07df      	lsls	r7, r3, #31
 800d67c:	d508      	bpl.n	800d690 <_printf_i+0x14c>
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	6861      	ldr	r1, [r4, #4]
 800d682:	4299      	cmp	r1, r3
 800d684:	bfde      	ittt	le
 800d686:	2330      	movle	r3, #48	; 0x30
 800d688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d68c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d690:	1b92      	subs	r2, r2, r6
 800d692:	6122      	str	r2, [r4, #16]
 800d694:	f8cd a000 	str.w	sl, [sp]
 800d698:	464b      	mov	r3, r9
 800d69a:	aa03      	add	r2, sp, #12
 800d69c:	4621      	mov	r1, r4
 800d69e:	4640      	mov	r0, r8
 800d6a0:	f7ff fee2 	bl	800d468 <_printf_common>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d14c      	bne.n	800d742 <_printf_i+0x1fe>
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ac:	b004      	add	sp, #16
 800d6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b2:	4835      	ldr	r0, [pc, #212]	; (800d788 <_printf_i+0x244>)
 800d6b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d6b8:	6823      	ldr	r3, [r4, #0]
 800d6ba:	680e      	ldr	r6, [r1, #0]
 800d6bc:	061f      	lsls	r7, r3, #24
 800d6be:	f856 5b04 	ldr.w	r5, [r6], #4
 800d6c2:	600e      	str	r6, [r1, #0]
 800d6c4:	d514      	bpl.n	800d6f0 <_printf_i+0x1ac>
 800d6c6:	07d9      	lsls	r1, r3, #31
 800d6c8:	bf44      	itt	mi
 800d6ca:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ce:	6023      	strmi	r3, [r4, #0]
 800d6d0:	b91d      	cbnz	r5, 800d6da <_printf_i+0x196>
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	f023 0320 	bic.w	r3, r3, #32
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	2310      	movs	r3, #16
 800d6dc:	e7b0      	b.n	800d640 <_printf_i+0xfc>
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	f043 0320 	orr.w	r3, r3, #32
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	2378      	movs	r3, #120	; 0x78
 800d6e8:	4828      	ldr	r0, [pc, #160]	; (800d78c <_printf_i+0x248>)
 800d6ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6ee:	e7e3      	b.n	800d6b8 <_printf_i+0x174>
 800d6f0:	065e      	lsls	r6, r3, #25
 800d6f2:	bf48      	it	mi
 800d6f4:	b2ad      	uxthmi	r5, r5
 800d6f6:	e7e6      	b.n	800d6c6 <_printf_i+0x182>
 800d6f8:	4616      	mov	r6, r2
 800d6fa:	e7bb      	b.n	800d674 <_printf_i+0x130>
 800d6fc:	680b      	ldr	r3, [r1, #0]
 800d6fe:	6826      	ldr	r6, [r4, #0]
 800d700:	6960      	ldr	r0, [r4, #20]
 800d702:	1d1d      	adds	r5, r3, #4
 800d704:	600d      	str	r5, [r1, #0]
 800d706:	0635      	lsls	r5, r6, #24
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	d501      	bpl.n	800d710 <_printf_i+0x1cc>
 800d70c:	6018      	str	r0, [r3, #0]
 800d70e:	e002      	b.n	800d716 <_printf_i+0x1d2>
 800d710:	0671      	lsls	r1, r6, #25
 800d712:	d5fb      	bpl.n	800d70c <_printf_i+0x1c8>
 800d714:	8018      	strh	r0, [r3, #0]
 800d716:	2300      	movs	r3, #0
 800d718:	6123      	str	r3, [r4, #16]
 800d71a:	4616      	mov	r6, r2
 800d71c:	e7ba      	b.n	800d694 <_printf_i+0x150>
 800d71e:	680b      	ldr	r3, [r1, #0]
 800d720:	1d1a      	adds	r2, r3, #4
 800d722:	600a      	str	r2, [r1, #0]
 800d724:	681e      	ldr	r6, [r3, #0]
 800d726:	6862      	ldr	r2, [r4, #4]
 800d728:	2100      	movs	r1, #0
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7f2 fd58 	bl	80001e0 <memchr>
 800d730:	b108      	cbz	r0, 800d736 <_printf_i+0x1f2>
 800d732:	1b80      	subs	r0, r0, r6
 800d734:	6060      	str	r0, [r4, #4]
 800d736:	6863      	ldr	r3, [r4, #4]
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	2300      	movs	r3, #0
 800d73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d740:	e7a8      	b.n	800d694 <_printf_i+0x150>
 800d742:	6923      	ldr	r3, [r4, #16]
 800d744:	4632      	mov	r2, r6
 800d746:	4649      	mov	r1, r9
 800d748:	4640      	mov	r0, r8
 800d74a:	47d0      	blx	sl
 800d74c:	3001      	adds	r0, #1
 800d74e:	d0ab      	beq.n	800d6a8 <_printf_i+0x164>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	079b      	lsls	r3, r3, #30
 800d754:	d413      	bmi.n	800d77e <_printf_i+0x23a>
 800d756:	68e0      	ldr	r0, [r4, #12]
 800d758:	9b03      	ldr	r3, [sp, #12]
 800d75a:	4298      	cmp	r0, r3
 800d75c:	bfb8      	it	lt
 800d75e:	4618      	movlt	r0, r3
 800d760:	e7a4      	b.n	800d6ac <_printf_i+0x168>
 800d762:	2301      	movs	r3, #1
 800d764:	4632      	mov	r2, r6
 800d766:	4649      	mov	r1, r9
 800d768:	4640      	mov	r0, r8
 800d76a:	47d0      	blx	sl
 800d76c:	3001      	adds	r0, #1
 800d76e:	d09b      	beq.n	800d6a8 <_printf_i+0x164>
 800d770:	3501      	adds	r5, #1
 800d772:	68e3      	ldr	r3, [r4, #12]
 800d774:	9903      	ldr	r1, [sp, #12]
 800d776:	1a5b      	subs	r3, r3, r1
 800d778:	42ab      	cmp	r3, r5
 800d77a:	dcf2      	bgt.n	800d762 <_printf_i+0x21e>
 800d77c:	e7eb      	b.n	800d756 <_printf_i+0x212>
 800d77e:	2500      	movs	r5, #0
 800d780:	f104 0619 	add.w	r6, r4, #25
 800d784:	e7f5      	b.n	800d772 <_printf_i+0x22e>
 800d786:	bf00      	nop
 800d788:	0800f29d 	.word	0x0800f29d
 800d78c:	0800f2ae 	.word	0x0800f2ae

0800d790 <_sbrk_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d06      	ldr	r5, [pc, #24]	; (800d7ac <_sbrk_r+0x1c>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	602b      	str	r3, [r5, #0]
 800d79c:	f7f3 ff2a 	bl	80015f4 <_sbrk>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_sbrk_r+0x1a>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_sbrk_r+0x1a>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	2000066c 	.word	0x2000066c

0800d7b0 <__sread>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b8:	f000 fb02 	bl	800ddc0 <_read_r>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	bfab      	itete	ge
 800d7c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d7c4:	181b      	addge	r3, r3, r0
 800d7c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7ca:	bfac      	ite	ge
 800d7cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7ce:	81a3      	strhlt	r3, [r4, #12]
 800d7d0:	bd10      	pop	{r4, pc}

0800d7d2 <__swrite>:
 800d7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d6:	461f      	mov	r7, r3
 800d7d8:	898b      	ldrh	r3, [r1, #12]
 800d7da:	05db      	lsls	r3, r3, #23
 800d7dc:	4605      	mov	r5, r0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	d505      	bpl.n	800d7f0 <__swrite+0x1e>
 800d7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f000 f9c8 	bl	800db80 <_lseek_r>
 800d7f0:	89a3      	ldrh	r3, [r4, #12]
 800d7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7fa:	81a3      	strh	r3, [r4, #12]
 800d7fc:	4632      	mov	r2, r6
 800d7fe:	463b      	mov	r3, r7
 800d800:	4628      	mov	r0, r5
 800d802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d806:	f000 b869 	b.w	800d8dc <_write_r>

0800d80a <__sseek>:
 800d80a:	b510      	push	{r4, lr}
 800d80c:	460c      	mov	r4, r1
 800d80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d812:	f000 f9b5 	bl	800db80 <_lseek_r>
 800d816:	1c43      	adds	r3, r0, #1
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	bf15      	itete	ne
 800d81c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d81e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d826:	81a3      	strheq	r3, [r4, #12]
 800d828:	bf18      	it	ne
 800d82a:	81a3      	strhne	r3, [r4, #12]
 800d82c:	bd10      	pop	{r4, pc}

0800d82e <__sclose>:
 800d82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d832:	f000 b8d3 	b.w	800d9dc <_close_r>
	...

0800d838 <__swbuf_r>:
 800d838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83a:	460e      	mov	r6, r1
 800d83c:	4614      	mov	r4, r2
 800d83e:	4605      	mov	r5, r0
 800d840:	b118      	cbz	r0, 800d84a <__swbuf_r+0x12>
 800d842:	6983      	ldr	r3, [r0, #24]
 800d844:	b90b      	cbnz	r3, 800d84a <__swbuf_r+0x12>
 800d846:	f7ff fa5f 	bl	800cd08 <__sinit>
 800d84a:	4b21      	ldr	r3, [pc, #132]	; (800d8d0 <__swbuf_r+0x98>)
 800d84c:	429c      	cmp	r4, r3
 800d84e:	d12b      	bne.n	800d8a8 <__swbuf_r+0x70>
 800d850:	686c      	ldr	r4, [r5, #4]
 800d852:	69a3      	ldr	r3, [r4, #24]
 800d854:	60a3      	str	r3, [r4, #8]
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	071a      	lsls	r2, r3, #28
 800d85a:	d52f      	bpl.n	800d8bc <__swbuf_r+0x84>
 800d85c:	6923      	ldr	r3, [r4, #16]
 800d85e:	b36b      	cbz	r3, 800d8bc <__swbuf_r+0x84>
 800d860:	6923      	ldr	r3, [r4, #16]
 800d862:	6820      	ldr	r0, [r4, #0]
 800d864:	1ac0      	subs	r0, r0, r3
 800d866:	6963      	ldr	r3, [r4, #20]
 800d868:	b2f6      	uxtb	r6, r6
 800d86a:	4283      	cmp	r3, r0
 800d86c:	4637      	mov	r7, r6
 800d86e:	dc04      	bgt.n	800d87a <__swbuf_r+0x42>
 800d870:	4621      	mov	r1, r4
 800d872:	4628      	mov	r0, r5
 800d874:	f000 f948 	bl	800db08 <_fflush_r>
 800d878:	bb30      	cbnz	r0, 800d8c8 <__swbuf_r+0x90>
 800d87a:	68a3      	ldr	r3, [r4, #8]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	60a3      	str	r3, [r4, #8]
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	6022      	str	r2, [r4, #0]
 800d886:	701e      	strb	r6, [r3, #0]
 800d888:	6963      	ldr	r3, [r4, #20]
 800d88a:	3001      	adds	r0, #1
 800d88c:	4283      	cmp	r3, r0
 800d88e:	d004      	beq.n	800d89a <__swbuf_r+0x62>
 800d890:	89a3      	ldrh	r3, [r4, #12]
 800d892:	07db      	lsls	r3, r3, #31
 800d894:	d506      	bpl.n	800d8a4 <__swbuf_r+0x6c>
 800d896:	2e0a      	cmp	r6, #10
 800d898:	d104      	bne.n	800d8a4 <__swbuf_r+0x6c>
 800d89a:	4621      	mov	r1, r4
 800d89c:	4628      	mov	r0, r5
 800d89e:	f000 f933 	bl	800db08 <_fflush_r>
 800d8a2:	b988      	cbnz	r0, 800d8c8 <__swbuf_r+0x90>
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8a8:	4b0a      	ldr	r3, [pc, #40]	; (800d8d4 <__swbuf_r+0x9c>)
 800d8aa:	429c      	cmp	r4, r3
 800d8ac:	d101      	bne.n	800d8b2 <__swbuf_r+0x7a>
 800d8ae:	68ac      	ldr	r4, [r5, #8]
 800d8b0:	e7cf      	b.n	800d852 <__swbuf_r+0x1a>
 800d8b2:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <__swbuf_r+0xa0>)
 800d8b4:	429c      	cmp	r4, r3
 800d8b6:	bf08      	it	eq
 800d8b8:	68ec      	ldreq	r4, [r5, #12]
 800d8ba:	e7ca      	b.n	800d852 <__swbuf_r+0x1a>
 800d8bc:	4621      	mov	r1, r4
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f000 f81e 	bl	800d900 <__swsetup_r>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d0cb      	beq.n	800d860 <__swbuf_r+0x28>
 800d8c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d8cc:	e7ea      	b.n	800d8a4 <__swbuf_r+0x6c>
 800d8ce:	bf00      	nop
 800d8d0:	0800f24c 	.word	0x0800f24c
 800d8d4:	0800f26c 	.word	0x0800f26c
 800d8d8:	0800f22c 	.word	0x0800f22c

0800d8dc <_write_r>:
 800d8dc:	b538      	push	{r3, r4, r5, lr}
 800d8de:	4d07      	ldr	r5, [pc, #28]	; (800d8fc <_write_r+0x20>)
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	4608      	mov	r0, r1
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	602a      	str	r2, [r5, #0]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f7f3 fe31 	bl	8001552 <_write>
 800d8f0:	1c43      	adds	r3, r0, #1
 800d8f2:	d102      	bne.n	800d8fa <_write_r+0x1e>
 800d8f4:	682b      	ldr	r3, [r5, #0]
 800d8f6:	b103      	cbz	r3, 800d8fa <_write_r+0x1e>
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	bd38      	pop	{r3, r4, r5, pc}
 800d8fc:	2000066c 	.word	0x2000066c

0800d900 <__swsetup_r>:
 800d900:	4b32      	ldr	r3, [pc, #200]	; (800d9cc <__swsetup_r+0xcc>)
 800d902:	b570      	push	{r4, r5, r6, lr}
 800d904:	681d      	ldr	r5, [r3, #0]
 800d906:	4606      	mov	r6, r0
 800d908:	460c      	mov	r4, r1
 800d90a:	b125      	cbz	r5, 800d916 <__swsetup_r+0x16>
 800d90c:	69ab      	ldr	r3, [r5, #24]
 800d90e:	b913      	cbnz	r3, 800d916 <__swsetup_r+0x16>
 800d910:	4628      	mov	r0, r5
 800d912:	f7ff f9f9 	bl	800cd08 <__sinit>
 800d916:	4b2e      	ldr	r3, [pc, #184]	; (800d9d0 <__swsetup_r+0xd0>)
 800d918:	429c      	cmp	r4, r3
 800d91a:	d10f      	bne.n	800d93c <__swsetup_r+0x3c>
 800d91c:	686c      	ldr	r4, [r5, #4]
 800d91e:	89a3      	ldrh	r3, [r4, #12]
 800d920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d924:	0719      	lsls	r1, r3, #28
 800d926:	d42c      	bmi.n	800d982 <__swsetup_r+0x82>
 800d928:	06dd      	lsls	r5, r3, #27
 800d92a:	d411      	bmi.n	800d950 <__swsetup_r+0x50>
 800d92c:	2309      	movs	r3, #9
 800d92e:	6033      	str	r3, [r6, #0]
 800d930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	f04f 30ff 	mov.w	r0, #4294967295
 800d93a:	e03e      	b.n	800d9ba <__swsetup_r+0xba>
 800d93c:	4b25      	ldr	r3, [pc, #148]	; (800d9d4 <__swsetup_r+0xd4>)
 800d93e:	429c      	cmp	r4, r3
 800d940:	d101      	bne.n	800d946 <__swsetup_r+0x46>
 800d942:	68ac      	ldr	r4, [r5, #8]
 800d944:	e7eb      	b.n	800d91e <__swsetup_r+0x1e>
 800d946:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <__swsetup_r+0xd8>)
 800d948:	429c      	cmp	r4, r3
 800d94a:	bf08      	it	eq
 800d94c:	68ec      	ldreq	r4, [r5, #12]
 800d94e:	e7e6      	b.n	800d91e <__swsetup_r+0x1e>
 800d950:	0758      	lsls	r0, r3, #29
 800d952:	d512      	bpl.n	800d97a <__swsetup_r+0x7a>
 800d954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d956:	b141      	cbz	r1, 800d96a <__swsetup_r+0x6a>
 800d958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d95c:	4299      	cmp	r1, r3
 800d95e:	d002      	beq.n	800d966 <__swsetup_r+0x66>
 800d960:	4630      	mov	r0, r6
 800d962:	f000 f9b7 	bl	800dcd4 <_free_r>
 800d966:	2300      	movs	r3, #0
 800d968:	6363      	str	r3, [r4, #52]	; 0x34
 800d96a:	89a3      	ldrh	r3, [r4, #12]
 800d96c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d970:	81a3      	strh	r3, [r4, #12]
 800d972:	2300      	movs	r3, #0
 800d974:	6063      	str	r3, [r4, #4]
 800d976:	6923      	ldr	r3, [r4, #16]
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	89a3      	ldrh	r3, [r4, #12]
 800d97c:	f043 0308 	orr.w	r3, r3, #8
 800d980:	81a3      	strh	r3, [r4, #12]
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	b94b      	cbnz	r3, 800d99a <__swsetup_r+0x9a>
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d98c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d990:	d003      	beq.n	800d99a <__swsetup_r+0x9a>
 800d992:	4621      	mov	r1, r4
 800d994:	4630      	mov	r0, r6
 800d996:	f000 f929 	bl	800dbec <__smakebuf_r>
 800d99a:	89a0      	ldrh	r0, [r4, #12]
 800d99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9a0:	f010 0301 	ands.w	r3, r0, #1
 800d9a4:	d00a      	beq.n	800d9bc <__swsetup_r+0xbc>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60a3      	str	r3, [r4, #8]
 800d9aa:	6963      	ldr	r3, [r4, #20]
 800d9ac:	425b      	negs	r3, r3
 800d9ae:	61a3      	str	r3, [r4, #24]
 800d9b0:	6923      	ldr	r3, [r4, #16]
 800d9b2:	b943      	cbnz	r3, 800d9c6 <__swsetup_r+0xc6>
 800d9b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d9b8:	d1ba      	bne.n	800d930 <__swsetup_r+0x30>
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}
 800d9bc:	0781      	lsls	r1, r0, #30
 800d9be:	bf58      	it	pl
 800d9c0:	6963      	ldrpl	r3, [r4, #20]
 800d9c2:	60a3      	str	r3, [r4, #8]
 800d9c4:	e7f4      	b.n	800d9b0 <__swsetup_r+0xb0>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	e7f7      	b.n	800d9ba <__swsetup_r+0xba>
 800d9ca:	bf00      	nop
 800d9cc:	200001a8 	.word	0x200001a8
 800d9d0:	0800f24c 	.word	0x0800f24c
 800d9d4:	0800f26c 	.word	0x0800f26c
 800d9d8:	0800f22c 	.word	0x0800f22c

0800d9dc <_close_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d06      	ldr	r5, [pc, #24]	; (800d9f8 <_close_r+0x1c>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	602b      	str	r3, [r5, #0]
 800d9e8:	f7f3 fdcf 	bl	800158a <_close>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_close_r+0x1a>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_close_r+0x1a>
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	2000066c 	.word	0x2000066c

0800d9fc <__sflush_r>:
 800d9fc:	898a      	ldrh	r2, [r1, #12]
 800d9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da02:	4605      	mov	r5, r0
 800da04:	0710      	lsls	r0, r2, #28
 800da06:	460c      	mov	r4, r1
 800da08:	d458      	bmi.n	800dabc <__sflush_r+0xc0>
 800da0a:	684b      	ldr	r3, [r1, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	dc05      	bgt.n	800da1c <__sflush_r+0x20>
 800da10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da12:	2b00      	cmp	r3, #0
 800da14:	dc02      	bgt.n	800da1c <__sflush_r+0x20>
 800da16:	2000      	movs	r0, #0
 800da18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da1e:	2e00      	cmp	r6, #0
 800da20:	d0f9      	beq.n	800da16 <__sflush_r+0x1a>
 800da22:	2300      	movs	r3, #0
 800da24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da28:	682f      	ldr	r7, [r5, #0]
 800da2a:	602b      	str	r3, [r5, #0]
 800da2c:	d032      	beq.n	800da94 <__sflush_r+0x98>
 800da2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da30:	89a3      	ldrh	r3, [r4, #12]
 800da32:	075a      	lsls	r2, r3, #29
 800da34:	d505      	bpl.n	800da42 <__sflush_r+0x46>
 800da36:	6863      	ldr	r3, [r4, #4]
 800da38:	1ac0      	subs	r0, r0, r3
 800da3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da3c:	b10b      	cbz	r3, 800da42 <__sflush_r+0x46>
 800da3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da40:	1ac0      	subs	r0, r0, r3
 800da42:	2300      	movs	r3, #0
 800da44:	4602      	mov	r2, r0
 800da46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da48:	6a21      	ldr	r1, [r4, #32]
 800da4a:	4628      	mov	r0, r5
 800da4c:	47b0      	blx	r6
 800da4e:	1c43      	adds	r3, r0, #1
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	d106      	bne.n	800da62 <__sflush_r+0x66>
 800da54:	6829      	ldr	r1, [r5, #0]
 800da56:	291d      	cmp	r1, #29
 800da58:	d82c      	bhi.n	800dab4 <__sflush_r+0xb8>
 800da5a:	4a2a      	ldr	r2, [pc, #168]	; (800db04 <__sflush_r+0x108>)
 800da5c:	40ca      	lsrs	r2, r1
 800da5e:	07d6      	lsls	r6, r2, #31
 800da60:	d528      	bpl.n	800dab4 <__sflush_r+0xb8>
 800da62:	2200      	movs	r2, #0
 800da64:	6062      	str	r2, [r4, #4]
 800da66:	04d9      	lsls	r1, r3, #19
 800da68:	6922      	ldr	r2, [r4, #16]
 800da6a:	6022      	str	r2, [r4, #0]
 800da6c:	d504      	bpl.n	800da78 <__sflush_r+0x7c>
 800da6e:	1c42      	adds	r2, r0, #1
 800da70:	d101      	bne.n	800da76 <__sflush_r+0x7a>
 800da72:	682b      	ldr	r3, [r5, #0]
 800da74:	b903      	cbnz	r3, 800da78 <__sflush_r+0x7c>
 800da76:	6560      	str	r0, [r4, #84]	; 0x54
 800da78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da7a:	602f      	str	r7, [r5, #0]
 800da7c:	2900      	cmp	r1, #0
 800da7e:	d0ca      	beq.n	800da16 <__sflush_r+0x1a>
 800da80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da84:	4299      	cmp	r1, r3
 800da86:	d002      	beq.n	800da8e <__sflush_r+0x92>
 800da88:	4628      	mov	r0, r5
 800da8a:	f000 f923 	bl	800dcd4 <_free_r>
 800da8e:	2000      	movs	r0, #0
 800da90:	6360      	str	r0, [r4, #52]	; 0x34
 800da92:	e7c1      	b.n	800da18 <__sflush_r+0x1c>
 800da94:	6a21      	ldr	r1, [r4, #32]
 800da96:	2301      	movs	r3, #1
 800da98:	4628      	mov	r0, r5
 800da9a:	47b0      	blx	r6
 800da9c:	1c41      	adds	r1, r0, #1
 800da9e:	d1c7      	bne.n	800da30 <__sflush_r+0x34>
 800daa0:	682b      	ldr	r3, [r5, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0c4      	beq.n	800da30 <__sflush_r+0x34>
 800daa6:	2b1d      	cmp	r3, #29
 800daa8:	d001      	beq.n	800daae <__sflush_r+0xb2>
 800daaa:	2b16      	cmp	r3, #22
 800daac:	d101      	bne.n	800dab2 <__sflush_r+0xb6>
 800daae:	602f      	str	r7, [r5, #0]
 800dab0:	e7b1      	b.n	800da16 <__sflush_r+0x1a>
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	e7ad      	b.n	800da18 <__sflush_r+0x1c>
 800dabc:	690f      	ldr	r7, [r1, #16]
 800dabe:	2f00      	cmp	r7, #0
 800dac0:	d0a9      	beq.n	800da16 <__sflush_r+0x1a>
 800dac2:	0793      	lsls	r3, r2, #30
 800dac4:	680e      	ldr	r6, [r1, #0]
 800dac6:	bf08      	it	eq
 800dac8:	694b      	ldreq	r3, [r1, #20]
 800daca:	600f      	str	r7, [r1, #0]
 800dacc:	bf18      	it	ne
 800dace:	2300      	movne	r3, #0
 800dad0:	eba6 0807 	sub.w	r8, r6, r7
 800dad4:	608b      	str	r3, [r1, #8]
 800dad6:	f1b8 0f00 	cmp.w	r8, #0
 800dada:	dd9c      	ble.n	800da16 <__sflush_r+0x1a>
 800dadc:	6a21      	ldr	r1, [r4, #32]
 800dade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dae0:	4643      	mov	r3, r8
 800dae2:	463a      	mov	r2, r7
 800dae4:	4628      	mov	r0, r5
 800dae6:	47b0      	blx	r6
 800dae8:	2800      	cmp	r0, #0
 800daea:	dc06      	bgt.n	800dafa <__sflush_r+0xfe>
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf2:	81a3      	strh	r3, [r4, #12]
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	e78e      	b.n	800da18 <__sflush_r+0x1c>
 800dafa:	4407      	add	r7, r0
 800dafc:	eba8 0800 	sub.w	r8, r8, r0
 800db00:	e7e9      	b.n	800dad6 <__sflush_r+0xda>
 800db02:	bf00      	nop
 800db04:	20400001 	.word	0x20400001

0800db08 <_fflush_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	690b      	ldr	r3, [r1, #16]
 800db0c:	4605      	mov	r5, r0
 800db0e:	460c      	mov	r4, r1
 800db10:	b913      	cbnz	r3, 800db18 <_fflush_r+0x10>
 800db12:	2500      	movs	r5, #0
 800db14:	4628      	mov	r0, r5
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	b118      	cbz	r0, 800db22 <_fflush_r+0x1a>
 800db1a:	6983      	ldr	r3, [r0, #24]
 800db1c:	b90b      	cbnz	r3, 800db22 <_fflush_r+0x1a>
 800db1e:	f7ff f8f3 	bl	800cd08 <__sinit>
 800db22:	4b14      	ldr	r3, [pc, #80]	; (800db74 <_fflush_r+0x6c>)
 800db24:	429c      	cmp	r4, r3
 800db26:	d11b      	bne.n	800db60 <_fflush_r+0x58>
 800db28:	686c      	ldr	r4, [r5, #4]
 800db2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0ef      	beq.n	800db12 <_fflush_r+0xa>
 800db32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db34:	07d0      	lsls	r0, r2, #31
 800db36:	d404      	bmi.n	800db42 <_fflush_r+0x3a>
 800db38:	0599      	lsls	r1, r3, #22
 800db3a:	d402      	bmi.n	800db42 <_fflush_r+0x3a>
 800db3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db3e:	f7ff f981 	bl	800ce44 <__retarget_lock_acquire_recursive>
 800db42:	4628      	mov	r0, r5
 800db44:	4621      	mov	r1, r4
 800db46:	f7ff ff59 	bl	800d9fc <__sflush_r>
 800db4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db4c:	07da      	lsls	r2, r3, #31
 800db4e:	4605      	mov	r5, r0
 800db50:	d4e0      	bmi.n	800db14 <_fflush_r+0xc>
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	059b      	lsls	r3, r3, #22
 800db56:	d4dd      	bmi.n	800db14 <_fflush_r+0xc>
 800db58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db5a:	f7ff f974 	bl	800ce46 <__retarget_lock_release_recursive>
 800db5e:	e7d9      	b.n	800db14 <_fflush_r+0xc>
 800db60:	4b05      	ldr	r3, [pc, #20]	; (800db78 <_fflush_r+0x70>)
 800db62:	429c      	cmp	r4, r3
 800db64:	d101      	bne.n	800db6a <_fflush_r+0x62>
 800db66:	68ac      	ldr	r4, [r5, #8]
 800db68:	e7df      	b.n	800db2a <_fflush_r+0x22>
 800db6a:	4b04      	ldr	r3, [pc, #16]	; (800db7c <_fflush_r+0x74>)
 800db6c:	429c      	cmp	r4, r3
 800db6e:	bf08      	it	eq
 800db70:	68ec      	ldreq	r4, [r5, #12]
 800db72:	e7da      	b.n	800db2a <_fflush_r+0x22>
 800db74:	0800f24c 	.word	0x0800f24c
 800db78:	0800f26c 	.word	0x0800f26c
 800db7c:	0800f22c 	.word	0x0800f22c

0800db80 <_lseek_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d07      	ldr	r5, [pc, #28]	; (800dba0 <_lseek_r+0x20>)
 800db84:	4604      	mov	r4, r0
 800db86:	4608      	mov	r0, r1
 800db88:	4611      	mov	r1, r2
 800db8a:	2200      	movs	r2, #0
 800db8c:	602a      	str	r2, [r5, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	f7f3 fd22 	bl	80015d8 <_lseek>
 800db94:	1c43      	adds	r3, r0, #1
 800db96:	d102      	bne.n	800db9e <_lseek_r+0x1e>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	b103      	cbz	r3, 800db9e <_lseek_r+0x1e>
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
 800dba0:	2000066c 	.word	0x2000066c

0800dba4 <__swhatbuf_r>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	460e      	mov	r6, r1
 800dba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbac:	2900      	cmp	r1, #0
 800dbae:	b096      	sub	sp, #88	; 0x58
 800dbb0:	4614      	mov	r4, r2
 800dbb2:	461d      	mov	r5, r3
 800dbb4:	da07      	bge.n	800dbc6 <__swhatbuf_r+0x22>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	602b      	str	r3, [r5, #0]
 800dbba:	89b3      	ldrh	r3, [r6, #12]
 800dbbc:	061a      	lsls	r2, r3, #24
 800dbbe:	d410      	bmi.n	800dbe2 <__swhatbuf_r+0x3e>
 800dbc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbc4:	e00e      	b.n	800dbe4 <__swhatbuf_r+0x40>
 800dbc6:	466a      	mov	r2, sp
 800dbc8:	f000 f90c 	bl	800dde4 <_fstat_r>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	dbf2      	blt.n	800dbb6 <__swhatbuf_r+0x12>
 800dbd0:	9a01      	ldr	r2, [sp, #4]
 800dbd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dbd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dbda:	425a      	negs	r2, r3
 800dbdc:	415a      	adcs	r2, r3
 800dbde:	602a      	str	r2, [r5, #0]
 800dbe0:	e7ee      	b.n	800dbc0 <__swhatbuf_r+0x1c>
 800dbe2:	2340      	movs	r3, #64	; 0x40
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	6023      	str	r3, [r4, #0]
 800dbe8:	b016      	add	sp, #88	; 0x58
 800dbea:	bd70      	pop	{r4, r5, r6, pc}

0800dbec <__smakebuf_r>:
 800dbec:	898b      	ldrh	r3, [r1, #12]
 800dbee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbf0:	079d      	lsls	r5, r3, #30
 800dbf2:	4606      	mov	r6, r0
 800dbf4:	460c      	mov	r4, r1
 800dbf6:	d507      	bpl.n	800dc08 <__smakebuf_r+0x1c>
 800dbf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	6123      	str	r3, [r4, #16]
 800dc00:	2301      	movs	r3, #1
 800dc02:	6163      	str	r3, [r4, #20]
 800dc04:	b002      	add	sp, #8
 800dc06:	bd70      	pop	{r4, r5, r6, pc}
 800dc08:	ab01      	add	r3, sp, #4
 800dc0a:	466a      	mov	r2, sp
 800dc0c:	f7ff ffca 	bl	800dba4 <__swhatbuf_r>
 800dc10:	9900      	ldr	r1, [sp, #0]
 800dc12:	4605      	mov	r5, r0
 800dc14:	4630      	mov	r0, r6
 800dc16:	f7ff f917 	bl	800ce48 <_malloc_r>
 800dc1a:	b948      	cbnz	r0, 800dc30 <__smakebuf_r+0x44>
 800dc1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc20:	059a      	lsls	r2, r3, #22
 800dc22:	d4ef      	bmi.n	800dc04 <__smakebuf_r+0x18>
 800dc24:	f023 0303 	bic.w	r3, r3, #3
 800dc28:	f043 0302 	orr.w	r3, r3, #2
 800dc2c:	81a3      	strh	r3, [r4, #12]
 800dc2e:	e7e3      	b.n	800dbf8 <__smakebuf_r+0xc>
 800dc30:	4b0d      	ldr	r3, [pc, #52]	; (800dc68 <__smakebuf_r+0x7c>)
 800dc32:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	6020      	str	r0, [r4, #0]
 800dc38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc3c:	81a3      	strh	r3, [r4, #12]
 800dc3e:	9b00      	ldr	r3, [sp, #0]
 800dc40:	6163      	str	r3, [r4, #20]
 800dc42:	9b01      	ldr	r3, [sp, #4]
 800dc44:	6120      	str	r0, [r4, #16]
 800dc46:	b15b      	cbz	r3, 800dc60 <__smakebuf_r+0x74>
 800dc48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f000 f8db 	bl	800de08 <_isatty_r>
 800dc52:	b128      	cbz	r0, 800dc60 <__smakebuf_r+0x74>
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	f023 0303 	bic.w	r3, r3, #3
 800dc5a:	f043 0301 	orr.w	r3, r3, #1
 800dc5e:	81a3      	strh	r3, [r4, #12]
 800dc60:	89a0      	ldrh	r0, [r4, #12]
 800dc62:	4305      	orrs	r5, r0
 800dc64:	81a5      	strh	r5, [r4, #12]
 800dc66:	e7cd      	b.n	800dc04 <__smakebuf_r+0x18>
 800dc68:	0800cca1 	.word	0x0800cca1

0800dc6c <memcpy>:
 800dc6c:	440a      	add	r2, r1
 800dc6e:	4291      	cmp	r1, r2
 800dc70:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc74:	d100      	bne.n	800dc78 <memcpy+0xc>
 800dc76:	4770      	bx	lr
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc82:	4291      	cmp	r1, r2
 800dc84:	d1f9      	bne.n	800dc7a <memcpy+0xe>
 800dc86:	bd10      	pop	{r4, pc}

0800dc88 <memmove>:
 800dc88:	4288      	cmp	r0, r1
 800dc8a:	b510      	push	{r4, lr}
 800dc8c:	eb01 0402 	add.w	r4, r1, r2
 800dc90:	d902      	bls.n	800dc98 <memmove+0x10>
 800dc92:	4284      	cmp	r4, r0
 800dc94:	4623      	mov	r3, r4
 800dc96:	d807      	bhi.n	800dca8 <memmove+0x20>
 800dc98:	1e43      	subs	r3, r0, #1
 800dc9a:	42a1      	cmp	r1, r4
 800dc9c:	d008      	beq.n	800dcb0 <memmove+0x28>
 800dc9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dca6:	e7f8      	b.n	800dc9a <memmove+0x12>
 800dca8:	4402      	add	r2, r0
 800dcaa:	4601      	mov	r1, r0
 800dcac:	428a      	cmp	r2, r1
 800dcae:	d100      	bne.n	800dcb2 <memmove+0x2a>
 800dcb0:	bd10      	pop	{r4, pc}
 800dcb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcba:	e7f7      	b.n	800dcac <memmove+0x24>

0800dcbc <__malloc_lock>:
 800dcbc:	4801      	ldr	r0, [pc, #4]	; (800dcc4 <__malloc_lock+0x8>)
 800dcbe:	f7ff b8c1 	b.w	800ce44 <__retarget_lock_acquire_recursive>
 800dcc2:	bf00      	nop
 800dcc4:	20000664 	.word	0x20000664

0800dcc8 <__malloc_unlock>:
 800dcc8:	4801      	ldr	r0, [pc, #4]	; (800dcd0 <__malloc_unlock+0x8>)
 800dcca:	f7ff b8bc 	b.w	800ce46 <__retarget_lock_release_recursive>
 800dcce:	bf00      	nop
 800dcd0:	20000664 	.word	0x20000664

0800dcd4 <_free_r>:
 800dcd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcd6:	2900      	cmp	r1, #0
 800dcd8:	d048      	beq.n	800dd6c <_free_r+0x98>
 800dcda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcde:	9001      	str	r0, [sp, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f1a1 0404 	sub.w	r4, r1, #4
 800dce6:	bfb8      	it	lt
 800dce8:	18e4      	addlt	r4, r4, r3
 800dcea:	f7ff ffe7 	bl	800dcbc <__malloc_lock>
 800dcee:	4a20      	ldr	r2, [pc, #128]	; (800dd70 <_free_r+0x9c>)
 800dcf0:	9801      	ldr	r0, [sp, #4]
 800dcf2:	6813      	ldr	r3, [r2, #0]
 800dcf4:	4615      	mov	r5, r2
 800dcf6:	b933      	cbnz	r3, 800dd06 <_free_r+0x32>
 800dcf8:	6063      	str	r3, [r4, #4]
 800dcfa:	6014      	str	r4, [r2, #0]
 800dcfc:	b003      	add	sp, #12
 800dcfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd02:	f7ff bfe1 	b.w	800dcc8 <__malloc_unlock>
 800dd06:	42a3      	cmp	r3, r4
 800dd08:	d90b      	bls.n	800dd22 <_free_r+0x4e>
 800dd0a:	6821      	ldr	r1, [r4, #0]
 800dd0c:	1862      	adds	r2, r4, r1
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	bf04      	itt	eq
 800dd12:	681a      	ldreq	r2, [r3, #0]
 800dd14:	685b      	ldreq	r3, [r3, #4]
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	bf04      	itt	eq
 800dd1a:	1852      	addeq	r2, r2, r1
 800dd1c:	6022      	streq	r2, [r4, #0]
 800dd1e:	602c      	str	r4, [r5, #0]
 800dd20:	e7ec      	b.n	800dcfc <_free_r+0x28>
 800dd22:	461a      	mov	r2, r3
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	b10b      	cbz	r3, 800dd2c <_free_r+0x58>
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	d9fa      	bls.n	800dd22 <_free_r+0x4e>
 800dd2c:	6811      	ldr	r1, [r2, #0]
 800dd2e:	1855      	adds	r5, r2, r1
 800dd30:	42a5      	cmp	r5, r4
 800dd32:	d10b      	bne.n	800dd4c <_free_r+0x78>
 800dd34:	6824      	ldr	r4, [r4, #0]
 800dd36:	4421      	add	r1, r4
 800dd38:	1854      	adds	r4, r2, r1
 800dd3a:	42a3      	cmp	r3, r4
 800dd3c:	6011      	str	r1, [r2, #0]
 800dd3e:	d1dd      	bne.n	800dcfc <_free_r+0x28>
 800dd40:	681c      	ldr	r4, [r3, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	6053      	str	r3, [r2, #4]
 800dd46:	4421      	add	r1, r4
 800dd48:	6011      	str	r1, [r2, #0]
 800dd4a:	e7d7      	b.n	800dcfc <_free_r+0x28>
 800dd4c:	d902      	bls.n	800dd54 <_free_r+0x80>
 800dd4e:	230c      	movs	r3, #12
 800dd50:	6003      	str	r3, [r0, #0]
 800dd52:	e7d3      	b.n	800dcfc <_free_r+0x28>
 800dd54:	6825      	ldr	r5, [r4, #0]
 800dd56:	1961      	adds	r1, r4, r5
 800dd58:	428b      	cmp	r3, r1
 800dd5a:	bf04      	itt	eq
 800dd5c:	6819      	ldreq	r1, [r3, #0]
 800dd5e:	685b      	ldreq	r3, [r3, #4]
 800dd60:	6063      	str	r3, [r4, #4]
 800dd62:	bf04      	itt	eq
 800dd64:	1949      	addeq	r1, r1, r5
 800dd66:	6021      	streq	r1, [r4, #0]
 800dd68:	6054      	str	r4, [r2, #4]
 800dd6a:	e7c7      	b.n	800dcfc <_free_r+0x28>
 800dd6c:	b003      	add	sp, #12
 800dd6e:	bd30      	pop	{r4, r5, pc}
 800dd70:	200005a4 	.word	0x200005a4

0800dd74 <_realloc_r>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	4607      	mov	r7, r0
 800dd78:	4614      	mov	r4, r2
 800dd7a:	460e      	mov	r6, r1
 800dd7c:	b921      	cbnz	r1, 800dd88 <_realloc_r+0x14>
 800dd7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd82:	4611      	mov	r1, r2
 800dd84:	f7ff b860 	b.w	800ce48 <_malloc_r>
 800dd88:	b922      	cbnz	r2, 800dd94 <_realloc_r+0x20>
 800dd8a:	f7ff ffa3 	bl	800dcd4 <_free_r>
 800dd8e:	4625      	mov	r5, r4
 800dd90:	4628      	mov	r0, r5
 800dd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd94:	f000 f848 	bl	800de28 <_malloc_usable_size_r>
 800dd98:	42a0      	cmp	r0, r4
 800dd9a:	d20f      	bcs.n	800ddbc <_realloc_r+0x48>
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	4638      	mov	r0, r7
 800dda0:	f7ff f852 	bl	800ce48 <_malloc_r>
 800dda4:	4605      	mov	r5, r0
 800dda6:	2800      	cmp	r0, #0
 800dda8:	d0f2      	beq.n	800dd90 <_realloc_r+0x1c>
 800ddaa:	4631      	mov	r1, r6
 800ddac:	4622      	mov	r2, r4
 800ddae:	f7ff ff5d 	bl	800dc6c <memcpy>
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	4638      	mov	r0, r7
 800ddb6:	f7ff ff8d 	bl	800dcd4 <_free_r>
 800ddba:	e7e9      	b.n	800dd90 <_realloc_r+0x1c>
 800ddbc:	4635      	mov	r5, r6
 800ddbe:	e7e7      	b.n	800dd90 <_realloc_r+0x1c>

0800ddc0 <_read_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d07      	ldr	r5, [pc, #28]	; (800dde0 <_read_r+0x20>)
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	4608      	mov	r0, r1
 800ddc8:	4611      	mov	r1, r2
 800ddca:	2200      	movs	r2, #0
 800ddcc:	602a      	str	r2, [r5, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	f7f3 fba2 	bl	8001518 <_read>
 800ddd4:	1c43      	adds	r3, r0, #1
 800ddd6:	d102      	bne.n	800ddde <_read_r+0x1e>
 800ddd8:	682b      	ldr	r3, [r5, #0]
 800ddda:	b103      	cbz	r3, 800ddde <_read_r+0x1e>
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	bd38      	pop	{r3, r4, r5, pc}
 800dde0:	2000066c 	.word	0x2000066c

0800dde4 <_fstat_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4d07      	ldr	r5, [pc, #28]	; (800de04 <_fstat_r+0x20>)
 800dde8:	2300      	movs	r3, #0
 800ddea:	4604      	mov	r4, r0
 800ddec:	4608      	mov	r0, r1
 800ddee:	4611      	mov	r1, r2
 800ddf0:	602b      	str	r3, [r5, #0]
 800ddf2:	f7f3 fbd6 	bl	80015a2 <_fstat>
 800ddf6:	1c43      	adds	r3, r0, #1
 800ddf8:	d102      	bne.n	800de00 <_fstat_r+0x1c>
 800ddfa:	682b      	ldr	r3, [r5, #0]
 800ddfc:	b103      	cbz	r3, 800de00 <_fstat_r+0x1c>
 800ddfe:	6023      	str	r3, [r4, #0]
 800de00:	bd38      	pop	{r3, r4, r5, pc}
 800de02:	bf00      	nop
 800de04:	2000066c 	.word	0x2000066c

0800de08 <_isatty_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4d06      	ldr	r5, [pc, #24]	; (800de24 <_isatty_r+0x1c>)
 800de0c:	2300      	movs	r3, #0
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	602b      	str	r3, [r5, #0]
 800de14:	f7f3 fbd5 	bl	80015c2 <_isatty>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_isatty_r+0x1a>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_isatty_r+0x1a>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	2000066c 	.word	0x2000066c

0800de28 <_malloc_usable_size_r>:
 800de28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de2c:	1f18      	subs	r0, r3, #4
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfbc      	itt	lt
 800de32:	580b      	ldrlt	r3, [r1, r0]
 800de34:	18c0      	addlt	r0, r0, r3
 800de36:	4770      	bx	lr

0800de38 <trunc>:
 800de38:	ec51 0b10 	vmov	r0, r1, d0
 800de3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800de40:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800de44:	2b13      	cmp	r3, #19
 800de46:	b5d0      	push	{r4, r6, r7, lr}
 800de48:	460c      	mov	r4, r1
 800de4a:	dc10      	bgt.n	800de6e <trunc+0x36>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bfa5      	ittet	ge
 800de50:	4a11      	ldrge	r2, [pc, #68]	; (800de98 <trunc+0x60>)
 800de52:	fa42 f303 	asrge.w	r3, r2, r3
 800de56:	2100      	movlt	r1, #0
 800de58:	2100      	movge	r1, #0
 800de5a:	bfb9      	ittee	lt
 800de5c:	2000      	movlt	r0, #0
 800de5e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800de62:	2000      	movge	r0, #0
 800de64:	ea24 0103 	bicge.w	r1, r4, r3
 800de68:	ec41 0b10 	vmov	d0, r0, r1
 800de6c:	bdd0      	pop	{r4, r6, r7, pc}
 800de6e:	2b33      	cmp	r3, #51	; 0x33
 800de70:	dd08      	ble.n	800de84 <trunc+0x4c>
 800de72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de76:	d1f7      	bne.n	800de68 <trunc+0x30>
 800de78:	ee10 2a10 	vmov	r2, s0
 800de7c:	460b      	mov	r3, r1
 800de7e:	f7f2 fa05 	bl	800028c <__adddf3>
 800de82:	e7f1      	b.n	800de68 <trunc+0x30>
 800de84:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800de88:	f04f 33ff 	mov.w	r3, #4294967295
 800de8c:	fa23 f202 	lsr.w	r2, r3, r2
 800de90:	ea20 0602 	bic.w	r6, r0, r2
 800de94:	4630      	mov	r0, r6
 800de96:	e7e7      	b.n	800de68 <trunc+0x30>
 800de98:	000fffff 	.word	0x000fffff

0800de9c <pow>:
 800de9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dea0:	ec59 8b10 	vmov	r8, r9, d0
 800dea4:	ec57 6b11 	vmov	r6, r7, d1
 800dea8:	f000 f8a6 	bl	800dff8 <__ieee754_pow>
 800deac:	4b4e      	ldr	r3, [pc, #312]	; (800dfe8 <pow+0x14c>)
 800deae:	f993 3000 	ldrsb.w	r3, [r3]
 800deb2:	3301      	adds	r3, #1
 800deb4:	ec55 4b10 	vmov	r4, r5, d0
 800deb8:	d015      	beq.n	800dee6 <pow+0x4a>
 800deba:	4632      	mov	r2, r6
 800debc:	463b      	mov	r3, r7
 800debe:	4630      	mov	r0, r6
 800dec0:	4639      	mov	r1, r7
 800dec2:	f7f2 fe33 	bl	8000b2c <__aeabi_dcmpun>
 800dec6:	b970      	cbnz	r0, 800dee6 <pow+0x4a>
 800dec8:	4642      	mov	r2, r8
 800deca:	464b      	mov	r3, r9
 800decc:	4640      	mov	r0, r8
 800dece:	4649      	mov	r1, r9
 800ded0:	f7f2 fe2c 	bl	8000b2c <__aeabi_dcmpun>
 800ded4:	2200      	movs	r2, #0
 800ded6:	2300      	movs	r3, #0
 800ded8:	b148      	cbz	r0, 800deee <pow+0x52>
 800deda:	4630      	mov	r0, r6
 800dedc:	4639      	mov	r1, r7
 800dede:	f7f2 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d17d      	bne.n	800dfe2 <pow+0x146>
 800dee6:	ec45 4b10 	vmov	d0, r4, r5
 800deea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deee:	4640      	mov	r0, r8
 800def0:	4649      	mov	r1, r9
 800def2:	f7f2 fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 800def6:	b1e0      	cbz	r0, 800df32 <pow+0x96>
 800def8:	2200      	movs	r2, #0
 800defa:	2300      	movs	r3, #0
 800defc:	4630      	mov	r0, r6
 800defe:	4639      	mov	r1, r7
 800df00:	f7f2 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 800df04:	2800      	cmp	r0, #0
 800df06:	d16c      	bne.n	800dfe2 <pow+0x146>
 800df08:	ec47 6b10 	vmov	d0, r6, r7
 800df0c:	f000 fe53 	bl	800ebb6 <finite>
 800df10:	2800      	cmp	r0, #0
 800df12:	d0e8      	beq.n	800dee6 <pow+0x4a>
 800df14:	2200      	movs	r2, #0
 800df16:	2300      	movs	r3, #0
 800df18:	4630      	mov	r0, r6
 800df1a:	4639      	mov	r1, r7
 800df1c:	f7f2 fdde 	bl	8000adc <__aeabi_dcmplt>
 800df20:	2800      	cmp	r0, #0
 800df22:	d0e0      	beq.n	800dee6 <pow+0x4a>
 800df24:	f7fe fe1a 	bl	800cb5c <__errno>
 800df28:	2321      	movs	r3, #33	; 0x21
 800df2a:	6003      	str	r3, [r0, #0]
 800df2c:	2400      	movs	r4, #0
 800df2e:	4d2f      	ldr	r5, [pc, #188]	; (800dfec <pow+0x150>)
 800df30:	e7d9      	b.n	800dee6 <pow+0x4a>
 800df32:	ec45 4b10 	vmov	d0, r4, r5
 800df36:	f000 fe3e 	bl	800ebb6 <finite>
 800df3a:	bbb8      	cbnz	r0, 800dfac <pow+0x110>
 800df3c:	ec49 8b10 	vmov	d0, r8, r9
 800df40:	f000 fe39 	bl	800ebb6 <finite>
 800df44:	b390      	cbz	r0, 800dfac <pow+0x110>
 800df46:	ec47 6b10 	vmov	d0, r6, r7
 800df4a:	f000 fe34 	bl	800ebb6 <finite>
 800df4e:	b368      	cbz	r0, 800dfac <pow+0x110>
 800df50:	4622      	mov	r2, r4
 800df52:	462b      	mov	r3, r5
 800df54:	4620      	mov	r0, r4
 800df56:	4629      	mov	r1, r5
 800df58:	f7f2 fde8 	bl	8000b2c <__aeabi_dcmpun>
 800df5c:	b160      	cbz	r0, 800df78 <pow+0xdc>
 800df5e:	f7fe fdfd 	bl	800cb5c <__errno>
 800df62:	2321      	movs	r3, #33	; 0x21
 800df64:	6003      	str	r3, [r0, #0]
 800df66:	2200      	movs	r2, #0
 800df68:	2300      	movs	r3, #0
 800df6a:	4610      	mov	r0, r2
 800df6c:	4619      	mov	r1, r3
 800df6e:	f7f2 fc6d 	bl	800084c <__aeabi_ddiv>
 800df72:	4604      	mov	r4, r0
 800df74:	460d      	mov	r5, r1
 800df76:	e7b6      	b.n	800dee6 <pow+0x4a>
 800df78:	f7fe fdf0 	bl	800cb5c <__errno>
 800df7c:	2322      	movs	r3, #34	; 0x22
 800df7e:	6003      	str	r3, [r0, #0]
 800df80:	2200      	movs	r2, #0
 800df82:	2300      	movs	r3, #0
 800df84:	4640      	mov	r0, r8
 800df86:	4649      	mov	r1, r9
 800df88:	f7f2 fda8 	bl	8000adc <__aeabi_dcmplt>
 800df8c:	2400      	movs	r4, #0
 800df8e:	b158      	cbz	r0, 800dfa8 <pow+0x10c>
 800df90:	ec47 6b10 	vmov	d0, r6, r7
 800df94:	f000 fe24 	bl	800ebe0 <rint>
 800df98:	4632      	mov	r2, r6
 800df9a:	ec51 0b10 	vmov	r0, r1, d0
 800df9e:	463b      	mov	r3, r7
 800dfa0:	f7f2 fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d0c2      	beq.n	800df2e <pow+0x92>
 800dfa8:	4d11      	ldr	r5, [pc, #68]	; (800dff0 <pow+0x154>)
 800dfaa:	e79c      	b.n	800dee6 <pow+0x4a>
 800dfac:	2200      	movs	r2, #0
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f2 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d094      	beq.n	800dee6 <pow+0x4a>
 800dfbc:	ec49 8b10 	vmov	d0, r8, r9
 800dfc0:	f000 fdf9 	bl	800ebb6 <finite>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d08e      	beq.n	800dee6 <pow+0x4a>
 800dfc8:	ec47 6b10 	vmov	d0, r6, r7
 800dfcc:	f000 fdf3 	bl	800ebb6 <finite>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d088      	beq.n	800dee6 <pow+0x4a>
 800dfd4:	f7fe fdc2 	bl	800cb5c <__errno>
 800dfd8:	2322      	movs	r3, #34	; 0x22
 800dfda:	6003      	str	r3, [r0, #0]
 800dfdc:	2400      	movs	r4, #0
 800dfde:	2500      	movs	r5, #0
 800dfe0:	e781      	b.n	800dee6 <pow+0x4a>
 800dfe2:	4d04      	ldr	r5, [pc, #16]	; (800dff4 <pow+0x158>)
 800dfe4:	2400      	movs	r4, #0
 800dfe6:	e77e      	b.n	800dee6 <pow+0x4a>
 800dfe8:	2000020c 	.word	0x2000020c
 800dfec:	fff00000 	.word	0xfff00000
 800dff0:	7ff00000 	.word	0x7ff00000
 800dff4:	3ff00000 	.word	0x3ff00000

0800dff8 <__ieee754_pow>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	ed2d 8b06 	vpush	{d8-d10}
 800e000:	b08d      	sub	sp, #52	; 0x34
 800e002:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e006:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e00a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e00e:	ea56 0100 	orrs.w	r1, r6, r0
 800e012:	ec53 2b10 	vmov	r2, r3, d0
 800e016:	f000 84d1 	beq.w	800e9bc <__ieee754_pow+0x9c4>
 800e01a:	497f      	ldr	r1, [pc, #508]	; (800e218 <__ieee754_pow+0x220>)
 800e01c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e020:	428c      	cmp	r4, r1
 800e022:	ee10 8a10 	vmov	r8, s0
 800e026:	4699      	mov	r9, r3
 800e028:	dc09      	bgt.n	800e03e <__ieee754_pow+0x46>
 800e02a:	d103      	bne.n	800e034 <__ieee754_pow+0x3c>
 800e02c:	b97a      	cbnz	r2, 800e04e <__ieee754_pow+0x56>
 800e02e:	42a6      	cmp	r6, r4
 800e030:	dd02      	ble.n	800e038 <__ieee754_pow+0x40>
 800e032:	e00c      	b.n	800e04e <__ieee754_pow+0x56>
 800e034:	428e      	cmp	r6, r1
 800e036:	dc02      	bgt.n	800e03e <__ieee754_pow+0x46>
 800e038:	428e      	cmp	r6, r1
 800e03a:	d110      	bne.n	800e05e <__ieee754_pow+0x66>
 800e03c:	b178      	cbz	r0, 800e05e <__ieee754_pow+0x66>
 800e03e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e042:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e046:	ea54 0308 	orrs.w	r3, r4, r8
 800e04a:	f000 84b7 	beq.w	800e9bc <__ieee754_pow+0x9c4>
 800e04e:	4873      	ldr	r0, [pc, #460]	; (800e21c <__ieee754_pow+0x224>)
 800e050:	b00d      	add	sp, #52	; 0x34
 800e052:	ecbd 8b06 	vpop	{d8-d10}
 800e056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05a:	f000 bdb9 	b.w	800ebd0 <nan>
 800e05e:	f1b9 0f00 	cmp.w	r9, #0
 800e062:	da36      	bge.n	800e0d2 <__ieee754_pow+0xda>
 800e064:	496e      	ldr	r1, [pc, #440]	; (800e220 <__ieee754_pow+0x228>)
 800e066:	428e      	cmp	r6, r1
 800e068:	dc51      	bgt.n	800e10e <__ieee754_pow+0x116>
 800e06a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e06e:	428e      	cmp	r6, r1
 800e070:	f340 84af 	ble.w	800e9d2 <__ieee754_pow+0x9da>
 800e074:	1531      	asrs	r1, r6, #20
 800e076:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e07a:	2914      	cmp	r1, #20
 800e07c:	dd0f      	ble.n	800e09e <__ieee754_pow+0xa6>
 800e07e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e082:	fa20 fc01 	lsr.w	ip, r0, r1
 800e086:	fa0c f101 	lsl.w	r1, ip, r1
 800e08a:	4281      	cmp	r1, r0
 800e08c:	f040 84a1 	bne.w	800e9d2 <__ieee754_pow+0x9da>
 800e090:	f00c 0c01 	and.w	ip, ip, #1
 800e094:	f1cc 0102 	rsb	r1, ip, #2
 800e098:	9100      	str	r1, [sp, #0]
 800e09a:	b180      	cbz	r0, 800e0be <__ieee754_pow+0xc6>
 800e09c:	e059      	b.n	800e152 <__ieee754_pow+0x15a>
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d155      	bne.n	800e14e <__ieee754_pow+0x156>
 800e0a2:	f1c1 0114 	rsb	r1, r1, #20
 800e0a6:	fa46 fc01 	asr.w	ip, r6, r1
 800e0aa:	fa0c f101 	lsl.w	r1, ip, r1
 800e0ae:	42b1      	cmp	r1, r6
 800e0b0:	f040 848c 	bne.w	800e9cc <__ieee754_pow+0x9d4>
 800e0b4:	f00c 0c01 	and.w	ip, ip, #1
 800e0b8:	f1cc 0102 	rsb	r1, ip, #2
 800e0bc:	9100      	str	r1, [sp, #0]
 800e0be:	4959      	ldr	r1, [pc, #356]	; (800e224 <__ieee754_pow+0x22c>)
 800e0c0:	428e      	cmp	r6, r1
 800e0c2:	d12d      	bne.n	800e120 <__ieee754_pow+0x128>
 800e0c4:	2f00      	cmp	r7, #0
 800e0c6:	da79      	bge.n	800e1bc <__ieee754_pow+0x1c4>
 800e0c8:	4956      	ldr	r1, [pc, #344]	; (800e224 <__ieee754_pow+0x22c>)
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	f7f2 fbbe 	bl	800084c <__aeabi_ddiv>
 800e0d0:	e016      	b.n	800e100 <__ieee754_pow+0x108>
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	9100      	str	r1, [sp, #0]
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d13b      	bne.n	800e152 <__ieee754_pow+0x15a>
 800e0da:	494f      	ldr	r1, [pc, #316]	; (800e218 <__ieee754_pow+0x220>)
 800e0dc:	428e      	cmp	r6, r1
 800e0de:	d1ee      	bne.n	800e0be <__ieee754_pow+0xc6>
 800e0e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e0e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e0e8:	ea53 0308 	orrs.w	r3, r3, r8
 800e0ec:	f000 8466 	beq.w	800e9bc <__ieee754_pow+0x9c4>
 800e0f0:	4b4d      	ldr	r3, [pc, #308]	; (800e228 <__ieee754_pow+0x230>)
 800e0f2:	429c      	cmp	r4, r3
 800e0f4:	dd0d      	ble.n	800e112 <__ieee754_pow+0x11a>
 800e0f6:	2f00      	cmp	r7, #0
 800e0f8:	f280 8464 	bge.w	800e9c4 <__ieee754_pow+0x9cc>
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	2100      	movs	r1, #0
 800e100:	ec41 0b10 	vmov	d0, r0, r1
 800e104:	b00d      	add	sp, #52	; 0x34
 800e106:	ecbd 8b06 	vpop	{d8-d10}
 800e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10e:	2102      	movs	r1, #2
 800e110:	e7e0      	b.n	800e0d4 <__ieee754_pow+0xdc>
 800e112:	2f00      	cmp	r7, #0
 800e114:	daf2      	bge.n	800e0fc <__ieee754_pow+0x104>
 800e116:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e11a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e11e:	e7ef      	b.n	800e100 <__ieee754_pow+0x108>
 800e120:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e124:	d104      	bne.n	800e130 <__ieee754_pow+0x138>
 800e126:	4610      	mov	r0, r2
 800e128:	4619      	mov	r1, r3
 800e12a:	f7f2 fa65 	bl	80005f8 <__aeabi_dmul>
 800e12e:	e7e7      	b.n	800e100 <__ieee754_pow+0x108>
 800e130:	493e      	ldr	r1, [pc, #248]	; (800e22c <__ieee754_pow+0x234>)
 800e132:	428f      	cmp	r7, r1
 800e134:	d10d      	bne.n	800e152 <__ieee754_pow+0x15a>
 800e136:	f1b9 0f00 	cmp.w	r9, #0
 800e13a:	db0a      	blt.n	800e152 <__ieee754_pow+0x15a>
 800e13c:	ec43 2b10 	vmov	d0, r2, r3
 800e140:	b00d      	add	sp, #52	; 0x34
 800e142:	ecbd 8b06 	vpop	{d8-d10}
 800e146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14a:	f000 bc77 	b.w	800ea3c <__ieee754_sqrt>
 800e14e:	2100      	movs	r1, #0
 800e150:	9100      	str	r1, [sp, #0]
 800e152:	ec43 2b10 	vmov	d0, r2, r3
 800e156:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e15a:	f000 fd23 	bl	800eba4 <fabs>
 800e15e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e162:	ec51 0b10 	vmov	r0, r1, d0
 800e166:	f1b8 0f00 	cmp.w	r8, #0
 800e16a:	d12a      	bne.n	800e1c2 <__ieee754_pow+0x1ca>
 800e16c:	b12c      	cbz	r4, 800e17a <__ieee754_pow+0x182>
 800e16e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e224 <__ieee754_pow+0x22c>
 800e172:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e176:	45e6      	cmp	lr, ip
 800e178:	d123      	bne.n	800e1c2 <__ieee754_pow+0x1ca>
 800e17a:	2f00      	cmp	r7, #0
 800e17c:	da05      	bge.n	800e18a <__ieee754_pow+0x192>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	2000      	movs	r0, #0
 800e184:	4927      	ldr	r1, [pc, #156]	; (800e224 <__ieee754_pow+0x22c>)
 800e186:	f7f2 fb61 	bl	800084c <__aeabi_ddiv>
 800e18a:	f1b9 0f00 	cmp.w	r9, #0
 800e18e:	dab7      	bge.n	800e100 <__ieee754_pow+0x108>
 800e190:	9b00      	ldr	r3, [sp, #0]
 800e192:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e196:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e19a:	4323      	orrs	r3, r4
 800e19c:	d108      	bne.n	800e1b0 <__ieee754_pow+0x1b8>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	4610      	mov	r0, r2
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	f7f2 f86f 	bl	8000288 <__aeabi_dsub>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	e78d      	b.n	800e0cc <__ieee754_pow+0xd4>
 800e1b0:	9b00      	ldr	r3, [sp, #0]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d1a4      	bne.n	800e100 <__ieee754_pow+0x108>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1bc:	4610      	mov	r0, r2
 800e1be:	4619      	mov	r1, r3
 800e1c0:	e79e      	b.n	800e100 <__ieee754_pow+0x108>
 800e1c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e1c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e1ca:	950a      	str	r5, [sp, #40]	; 0x28
 800e1cc:	9d00      	ldr	r5, [sp, #0]
 800e1ce:	46ac      	mov	ip, r5
 800e1d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e1d2:	ea5c 0505 	orrs.w	r5, ip, r5
 800e1d6:	d0e4      	beq.n	800e1a2 <__ieee754_pow+0x1aa>
 800e1d8:	4b15      	ldr	r3, [pc, #84]	; (800e230 <__ieee754_pow+0x238>)
 800e1da:	429e      	cmp	r6, r3
 800e1dc:	f340 80fc 	ble.w	800e3d8 <__ieee754_pow+0x3e0>
 800e1e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e1e4:	429e      	cmp	r6, r3
 800e1e6:	4b10      	ldr	r3, [pc, #64]	; (800e228 <__ieee754_pow+0x230>)
 800e1e8:	dd07      	ble.n	800e1fa <__ieee754_pow+0x202>
 800e1ea:	429c      	cmp	r4, r3
 800e1ec:	dc0a      	bgt.n	800e204 <__ieee754_pow+0x20c>
 800e1ee:	2f00      	cmp	r7, #0
 800e1f0:	da84      	bge.n	800e0fc <__ieee754_pow+0x104>
 800e1f2:	a307      	add	r3, pc, #28	; (adr r3, 800e210 <__ieee754_pow+0x218>)
 800e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f8:	e795      	b.n	800e126 <__ieee754_pow+0x12e>
 800e1fa:	429c      	cmp	r4, r3
 800e1fc:	dbf7      	blt.n	800e1ee <__ieee754_pow+0x1f6>
 800e1fe:	4b09      	ldr	r3, [pc, #36]	; (800e224 <__ieee754_pow+0x22c>)
 800e200:	429c      	cmp	r4, r3
 800e202:	dd17      	ble.n	800e234 <__ieee754_pow+0x23c>
 800e204:	2f00      	cmp	r7, #0
 800e206:	dcf4      	bgt.n	800e1f2 <__ieee754_pow+0x1fa>
 800e208:	e778      	b.n	800e0fc <__ieee754_pow+0x104>
 800e20a:	bf00      	nop
 800e20c:	f3af 8000 	nop.w
 800e210:	8800759c 	.word	0x8800759c
 800e214:	7e37e43c 	.word	0x7e37e43c
 800e218:	7ff00000 	.word	0x7ff00000
 800e21c:	0800f291 	.word	0x0800f291
 800e220:	433fffff 	.word	0x433fffff
 800e224:	3ff00000 	.word	0x3ff00000
 800e228:	3fefffff 	.word	0x3fefffff
 800e22c:	3fe00000 	.word	0x3fe00000
 800e230:	41e00000 	.word	0x41e00000
 800e234:	4b64      	ldr	r3, [pc, #400]	; (800e3c8 <__ieee754_pow+0x3d0>)
 800e236:	2200      	movs	r2, #0
 800e238:	f7f2 f826 	bl	8000288 <__aeabi_dsub>
 800e23c:	a356      	add	r3, pc, #344	; (adr r3, 800e398 <__ieee754_pow+0x3a0>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	4604      	mov	r4, r0
 800e244:	460d      	mov	r5, r1
 800e246:	f7f2 f9d7 	bl	80005f8 <__aeabi_dmul>
 800e24a:	a355      	add	r3, pc, #340	; (adr r3, 800e3a0 <__ieee754_pow+0x3a8>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	4606      	mov	r6, r0
 800e252:	460f      	mov	r7, r1
 800e254:	4620      	mov	r0, r4
 800e256:	4629      	mov	r1, r5
 800e258:	f7f2 f9ce 	bl	80005f8 <__aeabi_dmul>
 800e25c:	4b5b      	ldr	r3, [pc, #364]	; (800e3cc <__ieee754_pow+0x3d4>)
 800e25e:	4682      	mov	sl, r0
 800e260:	468b      	mov	fp, r1
 800e262:	2200      	movs	r2, #0
 800e264:	4620      	mov	r0, r4
 800e266:	4629      	mov	r1, r5
 800e268:	f7f2 f9c6 	bl	80005f8 <__aeabi_dmul>
 800e26c:	4602      	mov	r2, r0
 800e26e:	460b      	mov	r3, r1
 800e270:	a14d      	add	r1, pc, #308	; (adr r1, 800e3a8 <__ieee754_pow+0x3b0>)
 800e272:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e276:	f7f2 f807 	bl	8000288 <__aeabi_dsub>
 800e27a:	4622      	mov	r2, r4
 800e27c:	462b      	mov	r3, r5
 800e27e:	f7f2 f9bb 	bl	80005f8 <__aeabi_dmul>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	2000      	movs	r0, #0
 800e288:	4951      	ldr	r1, [pc, #324]	; (800e3d0 <__ieee754_pow+0x3d8>)
 800e28a:	f7f1 fffd 	bl	8000288 <__aeabi_dsub>
 800e28e:	4622      	mov	r2, r4
 800e290:	4680      	mov	r8, r0
 800e292:	4689      	mov	r9, r1
 800e294:	462b      	mov	r3, r5
 800e296:	4620      	mov	r0, r4
 800e298:	4629      	mov	r1, r5
 800e29a:	f7f2 f9ad 	bl	80005f8 <__aeabi_dmul>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	f7f2 f9a7 	bl	80005f8 <__aeabi_dmul>
 800e2aa:	a341      	add	r3, pc, #260	; (adr r3, 800e3b0 <__ieee754_pow+0x3b8>)
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f7f2 f9a2 	bl	80005f8 <__aeabi_dmul>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4650      	mov	r0, sl
 800e2ba:	4659      	mov	r1, fp
 800e2bc:	f7f1 ffe4 	bl	8000288 <__aeabi_dsub>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4680      	mov	r8, r0
 800e2c6:	4689      	mov	r9, r1
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f1 ffde 	bl	800028c <__adddf3>
 800e2d0:	2400      	movs	r4, #0
 800e2d2:	4632      	mov	r2, r6
 800e2d4:	463b      	mov	r3, r7
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	460d      	mov	r5, r1
 800e2da:	f7f1 ffd5 	bl	8000288 <__aeabi_dsub>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4640      	mov	r0, r8
 800e2e4:	4649      	mov	r1, r9
 800e2e6:	f7f1 ffcf 	bl	8000288 <__aeabi_dsub>
 800e2ea:	9b00      	ldr	r3, [sp, #0]
 800e2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	4682      	mov	sl, r0
 800e2f4:	468b      	mov	fp, r1
 800e2f6:	f040 81f1 	bne.w	800e6dc <__ieee754_pow+0x6e4>
 800e2fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e3b8 <__ieee754_pow+0x3c0>
 800e2fe:	eeb0 8a47 	vmov.f32	s16, s14
 800e302:	eef0 8a67 	vmov.f32	s17, s15
 800e306:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e30a:	2600      	movs	r6, #0
 800e30c:	4632      	mov	r2, r6
 800e30e:	463b      	mov	r3, r7
 800e310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e314:	f7f1 ffb8 	bl	8000288 <__aeabi_dsub>
 800e318:	4622      	mov	r2, r4
 800e31a:	462b      	mov	r3, r5
 800e31c:	f7f2 f96c 	bl	80005f8 <__aeabi_dmul>
 800e320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e324:	4680      	mov	r8, r0
 800e326:	4689      	mov	r9, r1
 800e328:	4650      	mov	r0, sl
 800e32a:	4659      	mov	r1, fp
 800e32c:	f7f2 f964 	bl	80005f8 <__aeabi_dmul>
 800e330:	4602      	mov	r2, r0
 800e332:	460b      	mov	r3, r1
 800e334:	4640      	mov	r0, r8
 800e336:	4649      	mov	r1, r9
 800e338:	f7f1 ffa8 	bl	800028c <__adddf3>
 800e33c:	4632      	mov	r2, r6
 800e33e:	463b      	mov	r3, r7
 800e340:	4680      	mov	r8, r0
 800e342:	4689      	mov	r9, r1
 800e344:	4620      	mov	r0, r4
 800e346:	4629      	mov	r1, r5
 800e348:	f7f2 f956 	bl	80005f8 <__aeabi_dmul>
 800e34c:	460b      	mov	r3, r1
 800e34e:	4604      	mov	r4, r0
 800e350:	460d      	mov	r5, r1
 800e352:	4602      	mov	r2, r0
 800e354:	4649      	mov	r1, r9
 800e356:	4640      	mov	r0, r8
 800e358:	f7f1 ff98 	bl	800028c <__adddf3>
 800e35c:	4b1d      	ldr	r3, [pc, #116]	; (800e3d4 <__ieee754_pow+0x3dc>)
 800e35e:	4299      	cmp	r1, r3
 800e360:	ec45 4b19 	vmov	d9, r4, r5
 800e364:	4606      	mov	r6, r0
 800e366:	460f      	mov	r7, r1
 800e368:	468b      	mov	fp, r1
 800e36a:	f340 82fe 	ble.w	800e96a <__ieee754_pow+0x972>
 800e36e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e372:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e376:	4303      	orrs	r3, r0
 800e378:	f000 81f0 	beq.w	800e75c <__ieee754_pow+0x764>
 800e37c:	a310      	add	r3, pc, #64	; (adr r3, 800e3c0 <__ieee754_pow+0x3c8>)
 800e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e382:	ec51 0b18 	vmov	r0, r1, d8
 800e386:	f7f2 f937 	bl	80005f8 <__aeabi_dmul>
 800e38a:	a30d      	add	r3, pc, #52	; (adr r3, 800e3c0 <__ieee754_pow+0x3c8>)
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	e6cb      	b.n	800e12a <__ieee754_pow+0x132>
 800e392:	bf00      	nop
 800e394:	f3af 8000 	nop.w
 800e398:	60000000 	.word	0x60000000
 800e39c:	3ff71547 	.word	0x3ff71547
 800e3a0:	f85ddf44 	.word	0xf85ddf44
 800e3a4:	3e54ae0b 	.word	0x3e54ae0b
 800e3a8:	55555555 	.word	0x55555555
 800e3ac:	3fd55555 	.word	0x3fd55555
 800e3b0:	652b82fe 	.word	0x652b82fe
 800e3b4:	3ff71547 	.word	0x3ff71547
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	bff00000 	.word	0xbff00000
 800e3c0:	8800759c 	.word	0x8800759c
 800e3c4:	7e37e43c 	.word	0x7e37e43c
 800e3c8:	3ff00000 	.word	0x3ff00000
 800e3cc:	3fd00000 	.word	0x3fd00000
 800e3d0:	3fe00000 	.word	0x3fe00000
 800e3d4:	408fffff 	.word	0x408fffff
 800e3d8:	4bd7      	ldr	r3, [pc, #860]	; (800e738 <__ieee754_pow+0x740>)
 800e3da:	ea03 0309 	and.w	r3, r3, r9
 800e3de:	2200      	movs	r2, #0
 800e3e0:	b92b      	cbnz	r3, 800e3ee <__ieee754_pow+0x3f6>
 800e3e2:	4bd6      	ldr	r3, [pc, #856]	; (800e73c <__ieee754_pow+0x744>)
 800e3e4:	f7f2 f908 	bl	80005f8 <__aeabi_dmul>
 800e3e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	1523      	asrs	r3, r4, #20
 800e3f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e3f4:	4413      	add	r3, r2
 800e3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f8:	4bd1      	ldr	r3, [pc, #836]	; (800e740 <__ieee754_pow+0x748>)
 800e3fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e3fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e402:	429c      	cmp	r4, r3
 800e404:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e408:	dd08      	ble.n	800e41c <__ieee754_pow+0x424>
 800e40a:	4bce      	ldr	r3, [pc, #824]	; (800e744 <__ieee754_pow+0x74c>)
 800e40c:	429c      	cmp	r4, r3
 800e40e:	f340 8163 	ble.w	800e6d8 <__ieee754_pow+0x6e0>
 800e412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e414:	3301      	adds	r3, #1
 800e416:	9309      	str	r3, [sp, #36]	; 0x24
 800e418:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e41c:	2400      	movs	r4, #0
 800e41e:	00e3      	lsls	r3, r4, #3
 800e420:	930b      	str	r3, [sp, #44]	; 0x2c
 800e422:	4bc9      	ldr	r3, [pc, #804]	; (800e748 <__ieee754_pow+0x750>)
 800e424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e428:	ed93 7b00 	vldr	d7, [r3]
 800e42c:	4629      	mov	r1, r5
 800e42e:	ec53 2b17 	vmov	r2, r3, d7
 800e432:	eeb0 8a47 	vmov.f32	s16, s14
 800e436:	eef0 8a67 	vmov.f32	s17, s15
 800e43a:	4682      	mov	sl, r0
 800e43c:	f7f1 ff24 	bl	8000288 <__aeabi_dsub>
 800e440:	4652      	mov	r2, sl
 800e442:	4606      	mov	r6, r0
 800e444:	460f      	mov	r7, r1
 800e446:	462b      	mov	r3, r5
 800e448:	ec51 0b18 	vmov	r0, r1, d8
 800e44c:	f7f1 ff1e 	bl	800028c <__adddf3>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	2000      	movs	r0, #0
 800e456:	49bd      	ldr	r1, [pc, #756]	; (800e74c <__ieee754_pow+0x754>)
 800e458:	f7f2 f9f8 	bl	800084c <__aeabi_ddiv>
 800e45c:	ec41 0b19 	vmov	d9, r0, r1
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4630      	mov	r0, r6
 800e466:	4639      	mov	r1, r7
 800e468:	f7f2 f8c6 	bl	80005f8 <__aeabi_dmul>
 800e46c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e470:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e474:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e478:	2300      	movs	r3, #0
 800e47a:	9304      	str	r3, [sp, #16]
 800e47c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e480:	46ab      	mov	fp, r5
 800e482:	106d      	asrs	r5, r5, #1
 800e484:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e488:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e48c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e490:	2200      	movs	r2, #0
 800e492:	4640      	mov	r0, r8
 800e494:	4649      	mov	r1, r9
 800e496:	4614      	mov	r4, r2
 800e498:	461d      	mov	r5, r3
 800e49a:	f7f2 f8ad 	bl	80005f8 <__aeabi_dmul>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	f7f1 feef 	bl	8000288 <__aeabi_dsub>
 800e4aa:	ec53 2b18 	vmov	r2, r3, d8
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	460f      	mov	r7, r1
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7f1 fee7 	bl	8000288 <__aeabi_dsub>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	460b      	mov	r3, r1
 800e4be:	4650      	mov	r0, sl
 800e4c0:	4659      	mov	r1, fp
 800e4c2:	f7f1 fee1 	bl	8000288 <__aeabi_dsub>
 800e4c6:	4642      	mov	r2, r8
 800e4c8:	464b      	mov	r3, r9
 800e4ca:	f7f2 f895 	bl	80005f8 <__aeabi_dmul>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	f7f1 fed7 	bl	8000288 <__aeabi_dsub>
 800e4da:	ec53 2b19 	vmov	r2, r3, d9
 800e4de:	f7f2 f88b 	bl	80005f8 <__aeabi_dmul>
 800e4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4e6:	ec41 0b18 	vmov	d8, r0, r1
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	f7f2 f883 	bl	80005f8 <__aeabi_dmul>
 800e4f2:	a37d      	add	r3, pc, #500	; (adr r3, 800e6e8 <__ieee754_pow+0x6f0>)
 800e4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	f7f2 f87c 	bl	80005f8 <__aeabi_dmul>
 800e500:	a37b      	add	r3, pc, #492	; (adr r3, 800e6f0 <__ieee754_pow+0x6f8>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f1 fec1 	bl	800028c <__adddf3>
 800e50a:	4622      	mov	r2, r4
 800e50c:	462b      	mov	r3, r5
 800e50e:	f7f2 f873 	bl	80005f8 <__aeabi_dmul>
 800e512:	a379      	add	r3, pc, #484	; (adr r3, 800e6f8 <__ieee754_pow+0x700>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	f7f1 feb8 	bl	800028c <__adddf3>
 800e51c:	4622      	mov	r2, r4
 800e51e:	462b      	mov	r3, r5
 800e520:	f7f2 f86a 	bl	80005f8 <__aeabi_dmul>
 800e524:	a376      	add	r3, pc, #472	; (adr r3, 800e700 <__ieee754_pow+0x708>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	f7f1 feaf 	bl	800028c <__adddf3>
 800e52e:	4622      	mov	r2, r4
 800e530:	462b      	mov	r3, r5
 800e532:	f7f2 f861 	bl	80005f8 <__aeabi_dmul>
 800e536:	a374      	add	r3, pc, #464	; (adr r3, 800e708 <__ieee754_pow+0x710>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	f7f1 fea6 	bl	800028c <__adddf3>
 800e540:	4622      	mov	r2, r4
 800e542:	462b      	mov	r3, r5
 800e544:	f7f2 f858 	bl	80005f8 <__aeabi_dmul>
 800e548:	a371      	add	r3, pc, #452	; (adr r3, 800e710 <__ieee754_pow+0x718>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	f7f1 fe9d 	bl	800028c <__adddf3>
 800e552:	4622      	mov	r2, r4
 800e554:	4606      	mov	r6, r0
 800e556:	460f      	mov	r7, r1
 800e558:	462b      	mov	r3, r5
 800e55a:	4620      	mov	r0, r4
 800e55c:	4629      	mov	r1, r5
 800e55e:	f7f2 f84b 	bl	80005f8 <__aeabi_dmul>
 800e562:	4602      	mov	r2, r0
 800e564:	460b      	mov	r3, r1
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f2 f845 	bl	80005f8 <__aeabi_dmul>
 800e56e:	4642      	mov	r2, r8
 800e570:	4604      	mov	r4, r0
 800e572:	460d      	mov	r5, r1
 800e574:	464b      	mov	r3, r9
 800e576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e57a:	f7f1 fe87 	bl	800028c <__adddf3>
 800e57e:	ec53 2b18 	vmov	r2, r3, d8
 800e582:	f7f2 f839 	bl	80005f8 <__aeabi_dmul>
 800e586:	4622      	mov	r2, r4
 800e588:	462b      	mov	r3, r5
 800e58a:	f7f1 fe7f 	bl	800028c <__adddf3>
 800e58e:	4642      	mov	r2, r8
 800e590:	4682      	mov	sl, r0
 800e592:	468b      	mov	fp, r1
 800e594:	464b      	mov	r3, r9
 800e596:	4640      	mov	r0, r8
 800e598:	4649      	mov	r1, r9
 800e59a:	f7f2 f82d 	bl	80005f8 <__aeabi_dmul>
 800e59e:	4b6c      	ldr	r3, [pc, #432]	; (800e750 <__ieee754_pow+0x758>)
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	4606      	mov	r6, r0
 800e5a4:	460f      	mov	r7, r1
 800e5a6:	f7f1 fe71 	bl	800028c <__adddf3>
 800e5aa:	4652      	mov	r2, sl
 800e5ac:	465b      	mov	r3, fp
 800e5ae:	f7f1 fe6d 	bl	800028c <__adddf3>
 800e5b2:	9c04      	ldr	r4, [sp, #16]
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	4622      	mov	r2, r4
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	4649      	mov	r1, r9
 800e5be:	f7f2 f81b 	bl	80005f8 <__aeabi_dmul>
 800e5c2:	4b63      	ldr	r3, [pc, #396]	; (800e750 <__ieee754_pow+0x758>)
 800e5c4:	4680      	mov	r8, r0
 800e5c6:	4689      	mov	r9, r1
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	f7f1 fe5b 	bl	8000288 <__aeabi_dsub>
 800e5d2:	4632      	mov	r2, r6
 800e5d4:	463b      	mov	r3, r7
 800e5d6:	f7f1 fe57 	bl	8000288 <__aeabi_dsub>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	4650      	mov	r0, sl
 800e5e0:	4659      	mov	r1, fp
 800e5e2:	f7f1 fe51 	bl	8000288 <__aeabi_dsub>
 800e5e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5ea:	f7f2 f805 	bl	80005f8 <__aeabi_dmul>
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	460f      	mov	r7, r1
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	ec51 0b18 	vmov	r0, r1, d8
 800e5fa:	f7f1 fffd 	bl	80005f8 <__aeabi_dmul>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4630      	mov	r0, r6
 800e604:	4639      	mov	r1, r7
 800e606:	f7f1 fe41 	bl	800028c <__adddf3>
 800e60a:	4606      	mov	r6, r0
 800e60c:	460f      	mov	r7, r1
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4640      	mov	r0, r8
 800e614:	4649      	mov	r1, r9
 800e616:	f7f1 fe39 	bl	800028c <__adddf3>
 800e61a:	9c04      	ldr	r4, [sp, #16]
 800e61c:	a33e      	add	r3, pc, #248	; (adr r3, 800e718 <__ieee754_pow+0x720>)
 800e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e622:	4620      	mov	r0, r4
 800e624:	460d      	mov	r5, r1
 800e626:	f7f1 ffe7 	bl	80005f8 <__aeabi_dmul>
 800e62a:	4642      	mov	r2, r8
 800e62c:	ec41 0b18 	vmov	d8, r0, r1
 800e630:	464b      	mov	r3, r9
 800e632:	4620      	mov	r0, r4
 800e634:	4629      	mov	r1, r5
 800e636:	f7f1 fe27 	bl	8000288 <__aeabi_dsub>
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	4630      	mov	r0, r6
 800e640:	4639      	mov	r1, r7
 800e642:	f7f1 fe21 	bl	8000288 <__aeabi_dsub>
 800e646:	a336      	add	r3, pc, #216	; (adr r3, 800e720 <__ieee754_pow+0x728>)
 800e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64c:	f7f1 ffd4 	bl	80005f8 <__aeabi_dmul>
 800e650:	a335      	add	r3, pc, #212	; (adr r3, 800e728 <__ieee754_pow+0x730>)
 800e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e656:	4606      	mov	r6, r0
 800e658:	460f      	mov	r7, r1
 800e65a:	4620      	mov	r0, r4
 800e65c:	4629      	mov	r1, r5
 800e65e:	f7f1 ffcb 	bl	80005f8 <__aeabi_dmul>
 800e662:	4602      	mov	r2, r0
 800e664:	460b      	mov	r3, r1
 800e666:	4630      	mov	r0, r6
 800e668:	4639      	mov	r1, r7
 800e66a:	f7f1 fe0f 	bl	800028c <__adddf3>
 800e66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e670:	4b38      	ldr	r3, [pc, #224]	; (800e754 <__ieee754_pow+0x75c>)
 800e672:	4413      	add	r3, r2
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	f7f1 fe08 	bl	800028c <__adddf3>
 800e67c:	4682      	mov	sl, r0
 800e67e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e680:	468b      	mov	fp, r1
 800e682:	f7f1 ff4f 	bl	8000524 <__aeabi_i2d>
 800e686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e688:	4b33      	ldr	r3, [pc, #204]	; (800e758 <__ieee754_pow+0x760>)
 800e68a:	4413      	add	r3, r2
 800e68c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e690:	4606      	mov	r6, r0
 800e692:	460f      	mov	r7, r1
 800e694:	4652      	mov	r2, sl
 800e696:	465b      	mov	r3, fp
 800e698:	ec51 0b18 	vmov	r0, r1, d8
 800e69c:	f7f1 fdf6 	bl	800028c <__adddf3>
 800e6a0:	4642      	mov	r2, r8
 800e6a2:	464b      	mov	r3, r9
 800e6a4:	f7f1 fdf2 	bl	800028c <__adddf3>
 800e6a8:	4632      	mov	r2, r6
 800e6aa:	463b      	mov	r3, r7
 800e6ac:	f7f1 fdee 	bl	800028c <__adddf3>
 800e6b0:	9c04      	ldr	r4, [sp, #16]
 800e6b2:	4632      	mov	r2, r6
 800e6b4:	463b      	mov	r3, r7
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	460d      	mov	r5, r1
 800e6ba:	f7f1 fde5 	bl	8000288 <__aeabi_dsub>
 800e6be:	4642      	mov	r2, r8
 800e6c0:	464b      	mov	r3, r9
 800e6c2:	f7f1 fde1 	bl	8000288 <__aeabi_dsub>
 800e6c6:	ec53 2b18 	vmov	r2, r3, d8
 800e6ca:	f7f1 fddd 	bl	8000288 <__aeabi_dsub>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4650      	mov	r0, sl
 800e6d4:	4659      	mov	r1, fp
 800e6d6:	e606      	b.n	800e2e6 <__ieee754_pow+0x2ee>
 800e6d8:	2401      	movs	r4, #1
 800e6da:	e6a0      	b.n	800e41e <__ieee754_pow+0x426>
 800e6dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e730 <__ieee754_pow+0x738>
 800e6e0:	e60d      	b.n	800e2fe <__ieee754_pow+0x306>
 800e6e2:	bf00      	nop
 800e6e4:	f3af 8000 	nop.w
 800e6e8:	4a454eef 	.word	0x4a454eef
 800e6ec:	3fca7e28 	.word	0x3fca7e28
 800e6f0:	93c9db65 	.word	0x93c9db65
 800e6f4:	3fcd864a 	.word	0x3fcd864a
 800e6f8:	a91d4101 	.word	0xa91d4101
 800e6fc:	3fd17460 	.word	0x3fd17460
 800e700:	518f264d 	.word	0x518f264d
 800e704:	3fd55555 	.word	0x3fd55555
 800e708:	db6fabff 	.word	0xdb6fabff
 800e70c:	3fdb6db6 	.word	0x3fdb6db6
 800e710:	33333303 	.word	0x33333303
 800e714:	3fe33333 	.word	0x3fe33333
 800e718:	e0000000 	.word	0xe0000000
 800e71c:	3feec709 	.word	0x3feec709
 800e720:	dc3a03fd 	.word	0xdc3a03fd
 800e724:	3feec709 	.word	0x3feec709
 800e728:	145b01f5 	.word	0x145b01f5
 800e72c:	be3e2fe0 	.word	0xbe3e2fe0
 800e730:	00000000 	.word	0x00000000
 800e734:	3ff00000 	.word	0x3ff00000
 800e738:	7ff00000 	.word	0x7ff00000
 800e73c:	43400000 	.word	0x43400000
 800e740:	0003988e 	.word	0x0003988e
 800e744:	000bb679 	.word	0x000bb679
 800e748:	0800f2c0 	.word	0x0800f2c0
 800e74c:	3ff00000 	.word	0x3ff00000
 800e750:	40080000 	.word	0x40080000
 800e754:	0800f2e0 	.word	0x0800f2e0
 800e758:	0800f2d0 	.word	0x0800f2d0
 800e75c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ea34 <__ieee754_pow+0xa3c>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	4640      	mov	r0, r8
 800e764:	4649      	mov	r1, r9
 800e766:	f7f1 fd91 	bl	800028c <__adddf3>
 800e76a:	4622      	mov	r2, r4
 800e76c:	ec41 0b1a 	vmov	d10, r0, r1
 800e770:	462b      	mov	r3, r5
 800e772:	4630      	mov	r0, r6
 800e774:	4639      	mov	r1, r7
 800e776:	f7f1 fd87 	bl	8000288 <__aeabi_dsub>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	ec51 0b1a 	vmov	r0, r1, d10
 800e782:	f7f2 f9c9 	bl	8000b18 <__aeabi_dcmpgt>
 800e786:	2800      	cmp	r0, #0
 800e788:	f47f adf8 	bne.w	800e37c <__ieee754_pow+0x384>
 800e78c:	4aa4      	ldr	r2, [pc, #656]	; (800ea20 <__ieee754_pow+0xa28>)
 800e78e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e792:	4293      	cmp	r3, r2
 800e794:	f340 810b 	ble.w	800e9ae <__ieee754_pow+0x9b6>
 800e798:	151b      	asrs	r3, r3, #20
 800e79a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e79e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e7a2:	fa4a f303 	asr.w	r3, sl, r3
 800e7a6:	445b      	add	r3, fp
 800e7a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e7ac:	4e9d      	ldr	r6, [pc, #628]	; (800ea24 <__ieee754_pow+0xa2c>)
 800e7ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e7b2:	4116      	asrs	r6, r2
 800e7b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e7b8:	2000      	movs	r0, #0
 800e7ba:	ea23 0106 	bic.w	r1, r3, r6
 800e7be:	f1c2 0214 	rsb	r2, r2, #20
 800e7c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e7c6:	fa4a fa02 	asr.w	sl, sl, r2
 800e7ca:	f1bb 0f00 	cmp.w	fp, #0
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	bfb8      	it	lt
 800e7d8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e7dc:	f7f1 fd54 	bl	8000288 <__aeabi_dsub>
 800e7e0:	ec41 0b19 	vmov	d9, r0, r1
 800e7e4:	4642      	mov	r2, r8
 800e7e6:	464b      	mov	r3, r9
 800e7e8:	ec51 0b19 	vmov	r0, r1, d9
 800e7ec:	f7f1 fd4e 	bl	800028c <__adddf3>
 800e7f0:	2400      	movs	r4, #0
 800e7f2:	a379      	add	r3, pc, #484	; (adr r3, 800e9d8 <__ieee754_pow+0x9e0>)
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	f7f1 fefc 	bl	80005f8 <__aeabi_dmul>
 800e800:	ec53 2b19 	vmov	r2, r3, d9
 800e804:	4606      	mov	r6, r0
 800e806:	460f      	mov	r7, r1
 800e808:	4620      	mov	r0, r4
 800e80a:	4629      	mov	r1, r5
 800e80c:	f7f1 fd3c 	bl	8000288 <__aeabi_dsub>
 800e810:	4602      	mov	r2, r0
 800e812:	460b      	mov	r3, r1
 800e814:	4640      	mov	r0, r8
 800e816:	4649      	mov	r1, r9
 800e818:	f7f1 fd36 	bl	8000288 <__aeabi_dsub>
 800e81c:	a370      	add	r3, pc, #448	; (adr r3, 800e9e0 <__ieee754_pow+0x9e8>)
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	f7f1 fee9 	bl	80005f8 <__aeabi_dmul>
 800e826:	a370      	add	r3, pc, #448	; (adr r3, 800e9e8 <__ieee754_pow+0x9f0>)
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	4620      	mov	r0, r4
 800e832:	4629      	mov	r1, r5
 800e834:	f7f1 fee0 	bl	80005f8 <__aeabi_dmul>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4640      	mov	r0, r8
 800e83e:	4649      	mov	r1, r9
 800e840:	f7f1 fd24 	bl	800028c <__adddf3>
 800e844:	4604      	mov	r4, r0
 800e846:	460d      	mov	r5, r1
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4630      	mov	r0, r6
 800e84e:	4639      	mov	r1, r7
 800e850:	f7f1 fd1c 	bl	800028c <__adddf3>
 800e854:	4632      	mov	r2, r6
 800e856:	463b      	mov	r3, r7
 800e858:	4680      	mov	r8, r0
 800e85a:	4689      	mov	r9, r1
 800e85c:	f7f1 fd14 	bl	8000288 <__aeabi_dsub>
 800e860:	4602      	mov	r2, r0
 800e862:	460b      	mov	r3, r1
 800e864:	4620      	mov	r0, r4
 800e866:	4629      	mov	r1, r5
 800e868:	f7f1 fd0e 	bl	8000288 <__aeabi_dsub>
 800e86c:	4642      	mov	r2, r8
 800e86e:	4606      	mov	r6, r0
 800e870:	460f      	mov	r7, r1
 800e872:	464b      	mov	r3, r9
 800e874:	4640      	mov	r0, r8
 800e876:	4649      	mov	r1, r9
 800e878:	f7f1 febe 	bl	80005f8 <__aeabi_dmul>
 800e87c:	a35c      	add	r3, pc, #368	; (adr r3, 800e9f0 <__ieee754_pow+0x9f8>)
 800e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e882:	4604      	mov	r4, r0
 800e884:	460d      	mov	r5, r1
 800e886:	f7f1 feb7 	bl	80005f8 <__aeabi_dmul>
 800e88a:	a35b      	add	r3, pc, #364	; (adr r3, 800e9f8 <__ieee754_pow+0xa00>)
 800e88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e890:	f7f1 fcfa 	bl	8000288 <__aeabi_dsub>
 800e894:	4622      	mov	r2, r4
 800e896:	462b      	mov	r3, r5
 800e898:	f7f1 feae 	bl	80005f8 <__aeabi_dmul>
 800e89c:	a358      	add	r3, pc, #352	; (adr r3, 800ea00 <__ieee754_pow+0xa08>)
 800e89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a2:	f7f1 fcf3 	bl	800028c <__adddf3>
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	462b      	mov	r3, r5
 800e8aa:	f7f1 fea5 	bl	80005f8 <__aeabi_dmul>
 800e8ae:	a356      	add	r3, pc, #344	; (adr r3, 800ea08 <__ieee754_pow+0xa10>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f7f1 fce8 	bl	8000288 <__aeabi_dsub>
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	462b      	mov	r3, r5
 800e8bc:	f7f1 fe9c 	bl	80005f8 <__aeabi_dmul>
 800e8c0:	a353      	add	r3, pc, #332	; (adr r3, 800ea10 <__ieee754_pow+0xa18>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	f7f1 fce1 	bl	800028c <__adddf3>
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	462b      	mov	r3, r5
 800e8ce:	f7f1 fe93 	bl	80005f8 <__aeabi_dmul>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	4640      	mov	r0, r8
 800e8d8:	4649      	mov	r1, r9
 800e8da:	f7f1 fcd5 	bl	8000288 <__aeabi_dsub>
 800e8de:	4604      	mov	r4, r0
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	f7f1 fe85 	bl	80005f8 <__aeabi_dmul>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	ec41 0b19 	vmov	d9, r0, r1
 800e8f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	f7f1 fcc4 	bl	8000288 <__aeabi_dsub>
 800e900:	4602      	mov	r2, r0
 800e902:	460b      	mov	r3, r1
 800e904:	ec51 0b19 	vmov	r0, r1, d9
 800e908:	f7f1 ffa0 	bl	800084c <__aeabi_ddiv>
 800e90c:	4632      	mov	r2, r6
 800e90e:	4604      	mov	r4, r0
 800e910:	460d      	mov	r5, r1
 800e912:	463b      	mov	r3, r7
 800e914:	4640      	mov	r0, r8
 800e916:	4649      	mov	r1, r9
 800e918:	f7f1 fe6e 	bl	80005f8 <__aeabi_dmul>
 800e91c:	4632      	mov	r2, r6
 800e91e:	463b      	mov	r3, r7
 800e920:	f7f1 fcb4 	bl	800028c <__adddf3>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4620      	mov	r0, r4
 800e92a:	4629      	mov	r1, r5
 800e92c:	f7f1 fcac 	bl	8000288 <__aeabi_dsub>
 800e930:	4642      	mov	r2, r8
 800e932:	464b      	mov	r3, r9
 800e934:	f7f1 fca8 	bl	8000288 <__aeabi_dsub>
 800e938:	460b      	mov	r3, r1
 800e93a:	4602      	mov	r2, r0
 800e93c:	493a      	ldr	r1, [pc, #232]	; (800ea28 <__ieee754_pow+0xa30>)
 800e93e:	2000      	movs	r0, #0
 800e940:	f7f1 fca2 	bl	8000288 <__aeabi_dsub>
 800e944:	e9cd 0100 	strd	r0, r1, [sp]
 800e948:	9b01      	ldr	r3, [sp, #4]
 800e94a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e94e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e952:	da2f      	bge.n	800e9b4 <__ieee754_pow+0x9bc>
 800e954:	4650      	mov	r0, sl
 800e956:	ed9d 0b00 	vldr	d0, [sp]
 800e95a:	f000 f9cd 	bl	800ecf8 <scalbn>
 800e95e:	ec51 0b10 	vmov	r0, r1, d0
 800e962:	ec53 2b18 	vmov	r2, r3, d8
 800e966:	f7ff bbe0 	b.w	800e12a <__ieee754_pow+0x132>
 800e96a:	4b30      	ldr	r3, [pc, #192]	; (800ea2c <__ieee754_pow+0xa34>)
 800e96c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e970:	429e      	cmp	r6, r3
 800e972:	f77f af0b 	ble.w	800e78c <__ieee754_pow+0x794>
 800e976:	4b2e      	ldr	r3, [pc, #184]	; (800ea30 <__ieee754_pow+0xa38>)
 800e978:	440b      	add	r3, r1
 800e97a:	4303      	orrs	r3, r0
 800e97c:	d00b      	beq.n	800e996 <__ieee754_pow+0x99e>
 800e97e:	a326      	add	r3, pc, #152	; (adr r3, 800ea18 <__ieee754_pow+0xa20>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	ec51 0b18 	vmov	r0, r1, d8
 800e988:	f7f1 fe36 	bl	80005f8 <__aeabi_dmul>
 800e98c:	a322      	add	r3, pc, #136	; (adr r3, 800ea18 <__ieee754_pow+0xa20>)
 800e98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e992:	f7ff bbca 	b.w	800e12a <__ieee754_pow+0x132>
 800e996:	4622      	mov	r2, r4
 800e998:	462b      	mov	r3, r5
 800e99a:	f7f1 fc75 	bl	8000288 <__aeabi_dsub>
 800e99e:	4642      	mov	r2, r8
 800e9a0:	464b      	mov	r3, r9
 800e9a2:	f7f2 f8af 	bl	8000b04 <__aeabi_dcmpge>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f43f aef0 	beq.w	800e78c <__ieee754_pow+0x794>
 800e9ac:	e7e7      	b.n	800e97e <__ieee754_pow+0x986>
 800e9ae:	f04f 0a00 	mov.w	sl, #0
 800e9b2:	e717      	b.n	800e7e4 <__ieee754_pow+0x7ec>
 800e9b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	e7d2      	b.n	800e962 <__ieee754_pow+0x96a>
 800e9bc:	491a      	ldr	r1, [pc, #104]	; (800ea28 <__ieee754_pow+0xa30>)
 800e9be:	2000      	movs	r0, #0
 800e9c0:	f7ff bb9e 	b.w	800e100 <__ieee754_pow+0x108>
 800e9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9c8:	f7ff bb9a 	b.w	800e100 <__ieee754_pow+0x108>
 800e9cc:	9000      	str	r0, [sp, #0]
 800e9ce:	f7ff bb76 	b.w	800e0be <__ieee754_pow+0xc6>
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	f7ff bb60 	b.w	800e098 <__ieee754_pow+0xa0>
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	3fe62e43 	.word	0x3fe62e43
 800e9e0:	fefa39ef 	.word	0xfefa39ef
 800e9e4:	3fe62e42 	.word	0x3fe62e42
 800e9e8:	0ca86c39 	.word	0x0ca86c39
 800e9ec:	be205c61 	.word	0xbe205c61
 800e9f0:	72bea4d0 	.word	0x72bea4d0
 800e9f4:	3e663769 	.word	0x3e663769
 800e9f8:	c5d26bf1 	.word	0xc5d26bf1
 800e9fc:	3ebbbd41 	.word	0x3ebbbd41
 800ea00:	af25de2c 	.word	0xaf25de2c
 800ea04:	3f11566a 	.word	0x3f11566a
 800ea08:	16bebd93 	.word	0x16bebd93
 800ea0c:	3f66c16c 	.word	0x3f66c16c
 800ea10:	5555553e 	.word	0x5555553e
 800ea14:	3fc55555 	.word	0x3fc55555
 800ea18:	c2f8f359 	.word	0xc2f8f359
 800ea1c:	01a56e1f 	.word	0x01a56e1f
 800ea20:	3fe00000 	.word	0x3fe00000
 800ea24:	000fffff 	.word	0x000fffff
 800ea28:	3ff00000 	.word	0x3ff00000
 800ea2c:	4090cbff 	.word	0x4090cbff
 800ea30:	3f6f3400 	.word	0x3f6f3400
 800ea34:	652b82fe 	.word	0x652b82fe
 800ea38:	3c971547 	.word	0x3c971547

0800ea3c <__ieee754_sqrt>:
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	ec55 4b10 	vmov	r4, r5, d0
 800ea44:	4e56      	ldr	r6, [pc, #344]	; (800eba0 <__ieee754_sqrt+0x164>)
 800ea46:	43ae      	bics	r6, r5
 800ea48:	ee10 0a10 	vmov	r0, s0
 800ea4c:	ee10 3a10 	vmov	r3, s0
 800ea50:	4629      	mov	r1, r5
 800ea52:	462a      	mov	r2, r5
 800ea54:	d110      	bne.n	800ea78 <__ieee754_sqrt+0x3c>
 800ea56:	ee10 2a10 	vmov	r2, s0
 800ea5a:	462b      	mov	r3, r5
 800ea5c:	f7f1 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fc10 	bl	800028c <__adddf3>
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	460d      	mov	r5, r1
 800ea70:	ec45 4b10 	vmov	d0, r4, r5
 800ea74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea78:	2d00      	cmp	r5, #0
 800ea7a:	dc10      	bgt.n	800ea9e <__ieee754_sqrt+0x62>
 800ea7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ea80:	4330      	orrs	r0, r6
 800ea82:	d0f5      	beq.n	800ea70 <__ieee754_sqrt+0x34>
 800ea84:	b15d      	cbz	r5, 800ea9e <__ieee754_sqrt+0x62>
 800ea86:	ee10 2a10 	vmov	r2, s0
 800ea8a:	462b      	mov	r3, r5
 800ea8c:	ee10 0a10 	vmov	r0, s0
 800ea90:	f7f1 fbfa 	bl	8000288 <__aeabi_dsub>
 800ea94:	4602      	mov	r2, r0
 800ea96:	460b      	mov	r3, r1
 800ea98:	f7f1 fed8 	bl	800084c <__aeabi_ddiv>
 800ea9c:	e7e6      	b.n	800ea6c <__ieee754_sqrt+0x30>
 800ea9e:	1509      	asrs	r1, r1, #20
 800eaa0:	d076      	beq.n	800eb90 <__ieee754_sqrt+0x154>
 800eaa2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eaa6:	07ce      	lsls	r6, r1, #31
 800eaa8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800eaac:	bf5e      	ittt	pl
 800eaae:	0fda      	lsrpl	r2, r3, #31
 800eab0:	005b      	lslpl	r3, r3, #1
 800eab2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800eab6:	0fda      	lsrs	r2, r3, #31
 800eab8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800eabc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800eac0:	2000      	movs	r0, #0
 800eac2:	106d      	asrs	r5, r5, #1
 800eac4:	005b      	lsls	r3, r3, #1
 800eac6:	f04f 0e16 	mov.w	lr, #22
 800eaca:	4684      	mov	ip, r0
 800eacc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ead0:	eb0c 0401 	add.w	r4, ip, r1
 800ead4:	4294      	cmp	r4, r2
 800ead6:	bfde      	ittt	le
 800ead8:	1b12      	suble	r2, r2, r4
 800eada:	eb04 0c01 	addle.w	ip, r4, r1
 800eade:	1840      	addle	r0, r0, r1
 800eae0:	0052      	lsls	r2, r2, #1
 800eae2:	f1be 0e01 	subs.w	lr, lr, #1
 800eae6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eaea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eaee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eaf2:	d1ed      	bne.n	800ead0 <__ieee754_sqrt+0x94>
 800eaf4:	4671      	mov	r1, lr
 800eaf6:	2720      	movs	r7, #32
 800eaf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800eafc:	4562      	cmp	r2, ip
 800eafe:	eb04 060e 	add.w	r6, r4, lr
 800eb02:	dc02      	bgt.n	800eb0a <__ieee754_sqrt+0xce>
 800eb04:	d113      	bne.n	800eb2e <__ieee754_sqrt+0xf2>
 800eb06:	429e      	cmp	r6, r3
 800eb08:	d811      	bhi.n	800eb2e <__ieee754_sqrt+0xf2>
 800eb0a:	2e00      	cmp	r6, #0
 800eb0c:	eb06 0e04 	add.w	lr, r6, r4
 800eb10:	da43      	bge.n	800eb9a <__ieee754_sqrt+0x15e>
 800eb12:	f1be 0f00 	cmp.w	lr, #0
 800eb16:	db40      	blt.n	800eb9a <__ieee754_sqrt+0x15e>
 800eb18:	f10c 0801 	add.w	r8, ip, #1
 800eb1c:	eba2 020c 	sub.w	r2, r2, ip
 800eb20:	429e      	cmp	r6, r3
 800eb22:	bf88      	it	hi
 800eb24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800eb28:	1b9b      	subs	r3, r3, r6
 800eb2a:	4421      	add	r1, r4
 800eb2c:	46c4      	mov	ip, r8
 800eb2e:	0052      	lsls	r2, r2, #1
 800eb30:	3f01      	subs	r7, #1
 800eb32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eb3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb3e:	d1dd      	bne.n	800eafc <__ieee754_sqrt+0xc0>
 800eb40:	4313      	orrs	r3, r2
 800eb42:	d006      	beq.n	800eb52 <__ieee754_sqrt+0x116>
 800eb44:	1c4c      	adds	r4, r1, #1
 800eb46:	bf13      	iteet	ne
 800eb48:	3101      	addne	r1, #1
 800eb4a:	3001      	addeq	r0, #1
 800eb4c:	4639      	moveq	r1, r7
 800eb4e:	f021 0101 	bicne.w	r1, r1, #1
 800eb52:	1043      	asrs	r3, r0, #1
 800eb54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800eb58:	0849      	lsrs	r1, r1, #1
 800eb5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800eb5e:	07c2      	lsls	r2, r0, #31
 800eb60:	bf48      	it	mi
 800eb62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800eb66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800eb6a:	460c      	mov	r4, r1
 800eb6c:	463d      	mov	r5, r7
 800eb6e:	e77f      	b.n	800ea70 <__ieee754_sqrt+0x34>
 800eb70:	0ada      	lsrs	r2, r3, #11
 800eb72:	3815      	subs	r0, #21
 800eb74:	055b      	lsls	r3, r3, #21
 800eb76:	2a00      	cmp	r2, #0
 800eb78:	d0fa      	beq.n	800eb70 <__ieee754_sqrt+0x134>
 800eb7a:	02d7      	lsls	r7, r2, #11
 800eb7c:	d50a      	bpl.n	800eb94 <__ieee754_sqrt+0x158>
 800eb7e:	f1c1 0420 	rsb	r4, r1, #32
 800eb82:	fa23 f404 	lsr.w	r4, r3, r4
 800eb86:	1e4d      	subs	r5, r1, #1
 800eb88:	408b      	lsls	r3, r1
 800eb8a:	4322      	orrs	r2, r4
 800eb8c:	1b41      	subs	r1, r0, r5
 800eb8e:	e788      	b.n	800eaa2 <__ieee754_sqrt+0x66>
 800eb90:	4608      	mov	r0, r1
 800eb92:	e7f0      	b.n	800eb76 <__ieee754_sqrt+0x13a>
 800eb94:	0052      	lsls	r2, r2, #1
 800eb96:	3101      	adds	r1, #1
 800eb98:	e7ef      	b.n	800eb7a <__ieee754_sqrt+0x13e>
 800eb9a:	46e0      	mov	r8, ip
 800eb9c:	e7be      	b.n	800eb1c <__ieee754_sqrt+0xe0>
 800eb9e:	bf00      	nop
 800eba0:	7ff00000 	.word	0x7ff00000

0800eba4 <fabs>:
 800eba4:	ec51 0b10 	vmov	r0, r1, d0
 800eba8:	ee10 2a10 	vmov	r2, s0
 800ebac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebb0:	ec43 2b10 	vmov	d0, r2, r3
 800ebb4:	4770      	bx	lr

0800ebb6 <finite>:
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	ed8d 0b00 	vstr	d0, [sp]
 800ebbc:	9801      	ldr	r0, [sp, #4]
 800ebbe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ebc2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ebc6:	0fc0      	lsrs	r0, r0, #31
 800ebc8:	b002      	add	sp, #8
 800ebca:	4770      	bx	lr
 800ebcc:	0000      	movs	r0, r0
	...

0800ebd0 <nan>:
 800ebd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ebd8 <nan+0x8>
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	00000000 	.word	0x00000000
 800ebdc:	7ff80000 	.word	0x7ff80000

0800ebe0 <rint>:
 800ebe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebe2:	ec51 0b10 	vmov	r0, r1, d0
 800ebe6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ebea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ebee:	2e13      	cmp	r6, #19
 800ebf0:	ee10 4a10 	vmov	r4, s0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ebfa:	dc58      	bgt.n	800ecae <rint+0xce>
 800ebfc:	2e00      	cmp	r6, #0
 800ebfe:	da2b      	bge.n	800ec58 <rint+0x78>
 800ec00:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ec04:	4302      	orrs	r2, r0
 800ec06:	d023      	beq.n	800ec50 <rint+0x70>
 800ec08:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ec0c:	4302      	orrs	r2, r0
 800ec0e:	4254      	negs	r4, r2
 800ec10:	4314      	orrs	r4, r2
 800ec12:	0c4b      	lsrs	r3, r1, #17
 800ec14:	0b24      	lsrs	r4, r4, #12
 800ec16:	045b      	lsls	r3, r3, #17
 800ec18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ec1c:	ea44 0103 	orr.w	r1, r4, r3
 800ec20:	4b32      	ldr	r3, [pc, #200]	; (800ecec <rint+0x10c>)
 800ec22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ec26:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	4630      	mov	r0, r6
 800ec30:	4639      	mov	r1, r7
 800ec32:	f7f1 fb2b 	bl	800028c <__adddf3>
 800ec36:	e9cd 0100 	strd	r0, r1, [sp]
 800ec3a:	463b      	mov	r3, r7
 800ec3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec40:	4632      	mov	r2, r6
 800ec42:	f7f1 fb21 	bl	8000288 <__aeabi_dsub>
 800ec46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec4a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ec4e:	4639      	mov	r1, r7
 800ec50:	ec41 0b10 	vmov	d0, r0, r1
 800ec54:	b003      	add	sp, #12
 800ec56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec58:	4a25      	ldr	r2, [pc, #148]	; (800ecf0 <rint+0x110>)
 800ec5a:	4132      	asrs	r2, r6
 800ec5c:	ea01 0702 	and.w	r7, r1, r2
 800ec60:	4307      	orrs	r7, r0
 800ec62:	d0f5      	beq.n	800ec50 <rint+0x70>
 800ec64:	0851      	lsrs	r1, r2, #1
 800ec66:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ec6a:	4314      	orrs	r4, r2
 800ec6c:	d00c      	beq.n	800ec88 <rint+0xa8>
 800ec6e:	ea23 0201 	bic.w	r2, r3, r1
 800ec72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ec76:	2e13      	cmp	r6, #19
 800ec78:	fa43 f606 	asr.w	r6, r3, r6
 800ec7c:	bf0c      	ite	eq
 800ec7e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ec82:	2400      	movne	r4, #0
 800ec84:	ea42 0306 	orr.w	r3, r2, r6
 800ec88:	4918      	ldr	r1, [pc, #96]	; (800ecec <rint+0x10c>)
 800ec8a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ec8e:	4622      	mov	r2, r4
 800ec90:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec94:	4620      	mov	r0, r4
 800ec96:	4629      	mov	r1, r5
 800ec98:	f7f1 faf8 	bl	800028c <__adddf3>
 800ec9c:	e9cd 0100 	strd	r0, r1, [sp]
 800eca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eca4:	4622      	mov	r2, r4
 800eca6:	462b      	mov	r3, r5
 800eca8:	f7f1 faee 	bl	8000288 <__aeabi_dsub>
 800ecac:	e7d0      	b.n	800ec50 <rint+0x70>
 800ecae:	2e33      	cmp	r6, #51	; 0x33
 800ecb0:	dd07      	ble.n	800ecc2 <rint+0xe2>
 800ecb2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ecb6:	d1cb      	bne.n	800ec50 <rint+0x70>
 800ecb8:	ee10 2a10 	vmov	r2, s0
 800ecbc:	f7f1 fae6 	bl	800028c <__adddf3>
 800ecc0:	e7c6      	b.n	800ec50 <rint+0x70>
 800ecc2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ecc6:	f04f 36ff 	mov.w	r6, #4294967295
 800ecca:	40d6      	lsrs	r6, r2
 800eccc:	4230      	tst	r0, r6
 800ecce:	d0bf      	beq.n	800ec50 <rint+0x70>
 800ecd0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ecd4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ecd8:	bf1f      	itttt	ne
 800ecda:	ea24 0101 	bicne.w	r1, r4, r1
 800ecde:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ece2:	fa44 f202 	asrne.w	r2, r4, r2
 800ece6:	ea41 0402 	orrne.w	r4, r1, r2
 800ecea:	e7cd      	b.n	800ec88 <rint+0xa8>
 800ecec:	0800f2f0 	.word	0x0800f2f0
 800ecf0:	000fffff 	.word	0x000fffff
 800ecf4:	00000000 	.word	0x00000000

0800ecf8 <scalbn>:
 800ecf8:	b570      	push	{r4, r5, r6, lr}
 800ecfa:	ec55 4b10 	vmov	r4, r5, d0
 800ecfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ed02:	4606      	mov	r6, r0
 800ed04:	462b      	mov	r3, r5
 800ed06:	b99a      	cbnz	r2, 800ed30 <scalbn+0x38>
 800ed08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ed0c:	4323      	orrs	r3, r4
 800ed0e:	d036      	beq.n	800ed7e <scalbn+0x86>
 800ed10:	4b39      	ldr	r3, [pc, #228]	; (800edf8 <scalbn+0x100>)
 800ed12:	4629      	mov	r1, r5
 800ed14:	ee10 0a10 	vmov	r0, s0
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f7f1 fc6d 	bl	80005f8 <__aeabi_dmul>
 800ed1e:	4b37      	ldr	r3, [pc, #220]	; (800edfc <scalbn+0x104>)
 800ed20:	429e      	cmp	r6, r3
 800ed22:	4604      	mov	r4, r0
 800ed24:	460d      	mov	r5, r1
 800ed26:	da10      	bge.n	800ed4a <scalbn+0x52>
 800ed28:	a32b      	add	r3, pc, #172	; (adr r3, 800edd8 <scalbn+0xe0>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	e03a      	b.n	800eda6 <scalbn+0xae>
 800ed30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ed34:	428a      	cmp	r2, r1
 800ed36:	d10c      	bne.n	800ed52 <scalbn+0x5a>
 800ed38:	ee10 2a10 	vmov	r2, s0
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	4629      	mov	r1, r5
 800ed40:	f7f1 faa4 	bl	800028c <__adddf3>
 800ed44:	4604      	mov	r4, r0
 800ed46:	460d      	mov	r5, r1
 800ed48:	e019      	b.n	800ed7e <scalbn+0x86>
 800ed4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ed4e:	460b      	mov	r3, r1
 800ed50:	3a36      	subs	r2, #54	; 0x36
 800ed52:	4432      	add	r2, r6
 800ed54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ed58:	428a      	cmp	r2, r1
 800ed5a:	dd08      	ble.n	800ed6e <scalbn+0x76>
 800ed5c:	2d00      	cmp	r5, #0
 800ed5e:	a120      	add	r1, pc, #128	; (adr r1, 800ede0 <scalbn+0xe8>)
 800ed60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed64:	da1c      	bge.n	800eda0 <scalbn+0xa8>
 800ed66:	a120      	add	r1, pc, #128	; (adr r1, 800ede8 <scalbn+0xf0>)
 800ed68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed6c:	e018      	b.n	800eda0 <scalbn+0xa8>
 800ed6e:	2a00      	cmp	r2, #0
 800ed70:	dd08      	ble.n	800ed84 <scalbn+0x8c>
 800ed72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ed7e:	ec45 4b10 	vmov	d0, r4, r5
 800ed82:	bd70      	pop	{r4, r5, r6, pc}
 800ed84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ed88:	da19      	bge.n	800edbe <scalbn+0xc6>
 800ed8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed8e:	429e      	cmp	r6, r3
 800ed90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ed94:	dd0a      	ble.n	800edac <scalbn+0xb4>
 800ed96:	a112      	add	r1, pc, #72	; (adr r1, 800ede0 <scalbn+0xe8>)
 800ed98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e2      	bne.n	800ed66 <scalbn+0x6e>
 800eda0:	a30f      	add	r3, pc, #60	; (adr r3, 800ede0 <scalbn+0xe8>)
 800eda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda6:	f7f1 fc27 	bl	80005f8 <__aeabi_dmul>
 800edaa:	e7cb      	b.n	800ed44 <scalbn+0x4c>
 800edac:	a10a      	add	r1, pc, #40	; (adr r1, 800edd8 <scalbn+0xe0>)
 800edae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d0b8      	beq.n	800ed28 <scalbn+0x30>
 800edb6:	a10e      	add	r1, pc, #56	; (adr r1, 800edf0 <scalbn+0xf8>)
 800edb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edbc:	e7b4      	b.n	800ed28 <scalbn+0x30>
 800edbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800edc2:	3236      	adds	r2, #54	; 0x36
 800edc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800edc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800edcc:	4620      	mov	r0, r4
 800edce:	4b0c      	ldr	r3, [pc, #48]	; (800ee00 <scalbn+0x108>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	e7e8      	b.n	800eda6 <scalbn+0xae>
 800edd4:	f3af 8000 	nop.w
 800edd8:	c2f8f359 	.word	0xc2f8f359
 800eddc:	01a56e1f 	.word	0x01a56e1f
 800ede0:	8800759c 	.word	0x8800759c
 800ede4:	7e37e43c 	.word	0x7e37e43c
 800ede8:	8800759c 	.word	0x8800759c
 800edec:	fe37e43c 	.word	0xfe37e43c
 800edf0:	c2f8f359 	.word	0xc2f8f359
 800edf4:	81a56e1f 	.word	0x81a56e1f
 800edf8:	43500000 	.word	0x43500000
 800edfc:	ffff3cb0 	.word	0xffff3cb0
 800ee00:	3c900000 	.word	0x3c900000

0800ee04 <_init>:
 800ee04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee06:	bf00      	nop
 800ee08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee0a:	bc08      	pop	{r3}
 800ee0c:	469e      	mov	lr, r3
 800ee0e:	4770      	bx	lr

0800ee10 <_fini>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	bf00      	nop
 800ee14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee16:	bc08      	pop	{r3}
 800ee18:	469e      	mov	lr, r3
 800ee1a:	4770      	bx	lr

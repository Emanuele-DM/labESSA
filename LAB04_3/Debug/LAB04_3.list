
LAB04_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800514c  0800514c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005154  08005154  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800515c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000074  080051d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080051d0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef5f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d62  00000000  00000000  0002f003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001666d  00000000  00000000  00032580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de2d  00000000  00000000  00048bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddfc  00000000  00000000  00056a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000e486c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f84 	.word	0x08004f84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004f84 	.word	0x08004f84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fe40 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f836 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f9b4 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f988 	bl	80008ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800059c:	f000 f89c 	bl	80006d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a0:	f000 f90c 	bl	80007bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <main+0x60>)
 80005a8:	f001 ff34 	bl	8002414 <HAL_TIM_OC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x64>)
 80005b0:	f002 f888 	bl	80026c4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)readBuf, 1); //initialize reception
 80005b4:	2201      	movs	r2, #1
 80005b6:	490e      	ldr	r1, [pc, #56]	; (80005f0 <main+0x68>)
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <main+0x6c>)
 80005ba:	f003 f977 	bl	80038ac <HAL_UART_Receive_IT>
  step_1 = SET; //initialize captured edge processing
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0x70>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  opt = readReceivedValue();
 80005c4:	f000 faa8 	bl	8000b18 <readReceivedValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <main+0x74>)
 80005ce:	701a      	strb	r2, [r3, #0]
	  if (opt > 0){
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <main+0x74>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	ddf4      	ble.n	80005c4 <main+0x3c>
		  processReceivedValue(opt);
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <main+0x74>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fabd 	bl	8000b60 <processReceivedValue>
	  opt = readReceivedValue();
 80005e6:	e7ed      	b.n	80005c4 <main+0x3c>
 80005e8:	20000124 	.word	0x20000124
 80005ec:	200000d8 	.word	0x200000d8
 80005f0:	200001b0 	.word	0x200001b0
 80005f4:	2000016c 	.word	0x2000016c
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	200000a3 	.word	0x200000a3

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fff4 	bl	80045fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a28      	ldr	r2, [pc, #160]	; (80006d0 <SystemClock_Config+0xd0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd4>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f9a6 	bl	80019dc <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000696:	f000 fc17 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fc08 	bl	8001ecc <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c2:	f000 fc01 	bl	8000ec8 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_TIM2_Init+0xe0>)
 800070a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_TIM2_Init+0xe0>)
 8000712:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <MX_TIM2_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_TIM2_Init+0xe0>)
 8000720:	2263      	movs	r2, #99	; 0x63
 8000722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_TIM2_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_TIM2_Init+0xe0>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000730:	4821      	ldr	r0, [pc, #132]	; (80007b8 <MX_TIM2_Init+0xe0>)
 8000732:	f001 fdc7 	bl	80022c4 <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800073c:	f000 fbc4 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	; (80007b8 <MX_TIM2_Init+0xe0>)
 800074e:	f002 fad3 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000758:	f000 fbb6 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <MX_TIM2_Init+0xe0>)
 800075e:	f001 fe00 	bl	8002362 <HAL_TIM_OC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 fbae 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4619      	mov	r1, r3
 800077a:	480f      	ldr	r0, [pc, #60]	; (80007b8 <MX_TIM2_Init+0xe0>)
 800077c:	f002 ff82 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000786:	f000 fb9f 	bl	8000ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_TIM2_Init+0xe0>)
 80007a2:	f002 f9b1 	bl	8002b08 <HAL_TIM_OC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007ac:	f000 fb8c 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  htim2.Init.Prescaler = new_prescaler_value;
  /* USER CODE END TIM2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000124 	.word	0x20000124

080007bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */
//  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_TIM3_Init+0xe8>)
 80007e8:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <MX_TIM3_Init+0xec>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80007ec:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_TIM3_Init+0xe8>)
 80007ee:	22a7      	movs	r2, #167	; 0xa7
 80007f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_TIM3_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_TIM3_Init+0xe8>)
 80007fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80007fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_TIM3_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_TIM3_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800080c:	4825      	ldr	r0, [pc, #148]	; (80008a4 <MX_TIM3_Init+0xe8>)
 800080e:	f001 fd59 	bl	80022c4 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 fb56 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	4619      	mov	r1, r3
 8000828:	481e      	ldr	r0, [pc, #120]	; (80008a4 <MX_TIM3_Init+0xe8>)
 800082a:	f002 fa65 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 fb48 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000838:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_TIM3_Init+0xe8>)
 800083a:	f001 fee9 	bl	8002610 <HAL_TIM_IC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 fb40 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_TIM3_Init+0xe8>)
 8000858:	f002 ff14 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000862:	f000 fb31 	bl	8000ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000866:	230a      	movs	r3, #10
 8000868:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800086a:	2301      	movs	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <MX_TIM3_Init+0xe8>)
 800087e:	f002 f99f 	bl	8002bc0 <HAL_TIM_IC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000888:	f000 fb1e 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //Enables the TIM_IT_UPDATE interrupt -> enables PeriodElapsed callback
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <MX_TIM3_Init+0xe8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	68da      	ldr	r2, [r3, #12]
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <MX_TIM3_Init+0xe8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0201 	orr.w	r2, r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM3_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000d8 	.word	0x200000d8
 80008a8:	40000400 	.word	0x40000400

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f002 ff50 	bl	8003788 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 faeb 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000016c 	.word	0x2000016c
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <MX_GPIO_Init+0xfc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a37      	ldr	r2, [pc, #220]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a30      	ldr	r2, [pc, #192]	; (80009fc <MX_GPIO_Init+0xfc>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a22      	ldr	r2, [pc, #136]	; (80009fc <MX_GPIO_Init+0xfc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_GPIO_Init+0xfc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_GPIO_Init+0x100>)
 800098c:	f000 fff2 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SQUARE_WAVE_GPIO_Port, SQUARE_WAVE_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	481b      	ldr	r0, [pc, #108]	; (8000a04 <MX_GPIO_Init+0x104>)
 8000998:	f000 ffec 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_GPIO_Init+0x104>)
 80009b4:	f000 fe42 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b8:	2320      	movs	r3, #32
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_GPIO_Init+0x100>)
 80009d0:	f000 fe34 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : SQUARE_WAVE_Pin */
  GPIO_InitStruct.Pin = SQUARE_WAVE_Pin;
 80009d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SQUARE_WAVE_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_GPIO_Init+0x104>)
 80009ee:	f000 fe25 	bl	800163c <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020800 	.word	0x40020800

08000a08 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef * htim) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a18:	d119      	bne.n	8000a4e <HAL_TIM_OC_DelayElapsedCallback+0x46>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000a20:	f000 ffc1 	bl	80019a6 <HAL_GPIO_TogglePin>
		if (TIM2->CCR1 == compare_value_high) {
 8000a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d106      	bne.n	8000a42 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
			TIM2->CCR1 = compare_value_low;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
		}
		else TIM2->CCR1 = compare_value_high;
	}
}
 8000a40:	e005      	b.n	8000a4e <HAL_TIM_OC_DelayElapsedCallback+0x46>
		else TIM2->CCR1 = compare_value_high;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	20000001 	.word	0x20000001
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <HAL_TIM_IC_CaptureCallback+0x48>)
 8000a70:	f000 ff68 	bl	8001944 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d103      	bne.n	8000a82 <HAL_TIM_IC_CaptureCallback+0x1e>
		captured_edge = RISING;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e009      	b.n	8000a96 <HAL_TIM_IC_CaptureCallback+0x32>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <HAL_TIM_IC_CaptureCallback+0x48>)
 8000a86:	f000 ff5d 	bl	8001944 <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <HAL_TIM_IC_CaptureCallback+0x32>
		captured_edge = FALLING;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	701a      	strb	r2, [r3, #0]
	}
	processCapturedEdge(captured_edge);
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f90b 	bl	8000cb8 <processCapturedEdge>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	20000092 	.word	0x20000092

08000ab4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d117      	bne.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x42>
		if (counting_overflows != 0) {
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d012      	beq.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x42>
			number_of_overflows++;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000adc:	701a      	strb	r2, [r3, #0]
			if (counting_fall_overflows != 0) number_of_overflows_fall++;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000af4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40000400 	.word	0x40000400
 8000b08:	200000a1 	.word	0x200000a1
 8000b0c:	20000090 	.word	0x20000090
 8000b10:	200000a0 	.word	0x200000a0
 8000b14:	20000091 	.word	0x20000091

08000b18 <readReceivedValue>:

int8_t readReceivedValue(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	int8_t retVal = -1;
 8000b1e:	23ff      	movs	r3, #255	; 0xff
 8000b20:	71fb      	strb	r3, [r7, #7]
	if (have_received_data == SET){
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <readReceivedValue+0x3c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d10c      	bne.n	8000b46 <readReceivedValue+0x2e>
		have_received_data = RESET;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <readReceivedValue+0x3c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, (uint8_t*)readBuf, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	4908      	ldr	r1, [pc, #32]	; (8000b58 <readReceivedValue+0x40>)
 8000b36:	4809      	ldr	r0, [pc, #36]	; (8000b5c <readReceivedValue+0x44>)
 8000b38:	f002 feb8 	bl	80038ac <HAL_UART_Receive_IT>
		  retVal = atoi(readBuf);
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <readReceivedValue+0x40>)
 8000b3e:	f003 fd2f 	bl	80045a0 <atoi>
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	}
	return retVal;
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000a2 	.word	0x200000a2
 8000b58:	200001b0 	.word	0x200001b0
 8000b5c:	2000016c 	.word	0x2000016c

08000b60 <processReceivedValue>:
void processReceivedValue(int8_t opt){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	switch (opt) {
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	f200 8085 	bhi.w	8000c80 <processReceivedValue+0x120>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <processReceivedValue+0x1c>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b95 	.word	0x08000b95
 8000b80:	08000bbb 	.word	0x08000bbb
 8000b84:	08000be1 	.word	0x08000be1
 8000b88:	08000c07 	.word	0x08000c07
 8000b8c:	08000c2d 	.word	0x08000c2d
 8000b90:	08000c59 	.word	0x08000c59
	case 1:
		sprintf(msg, "Current frequency: %u\r\n", frequency);
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <processReceivedValue+0x128>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	493b      	ldr	r1, [pc, #236]	; (8000c8c <processReceivedValue+0x12c>)
 8000b9e:	483c      	ldr	r0, [pc, #240]	; (8000c90 <processReceivedValue+0x130>)
 8000ba0:	f003 fd34 	bl	800460c <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000ba4:	483a      	ldr	r0, [pc, #232]	; (8000c90 <processReceivedValue+0x130>)
 8000ba6:	f7ff fb1b 	bl	80001e0 <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4937      	ldr	r1, [pc, #220]	; (8000c90 <processReceivedValue+0x130>)
 8000bb2:	4838      	ldr	r0, [pc, #224]	; (8000c94 <processReceivedValue+0x134>)
 8000bb4:	f002 fe35 	bl	8003822 <HAL_UART_Transmit_IT>
		break;
 8000bb8:	e062      	b.n	8000c80 <processReceivedValue+0x120>
	case 2:
		sprintf(msg, "Current duty cycle: %u\r\n", dutycycle);
 8000bba:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <processReceivedValue+0x138>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4936      	ldr	r1, [pc, #216]	; (8000c9c <processReceivedValue+0x13c>)
 8000bc4:	4832      	ldr	r0, [pc, #200]	; (8000c90 <processReceivedValue+0x130>)
 8000bc6:	f003 fd21 	bl	800460c <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000bca:	4831      	ldr	r0, [pc, #196]	; (8000c90 <processReceivedValue+0x130>)
 8000bcc:	f7ff fb08 	bl	80001e0 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	492e      	ldr	r1, [pc, #184]	; (8000c90 <processReceivedValue+0x130>)
 8000bd8:	482e      	ldr	r0, [pc, #184]	; (8000c94 <processReceivedValue+0x134>)
 8000bda:	f002 fe22 	bl	8003822 <HAL_UART_Transmit_IT>
		break;
 8000bde:	e04f      	b.n	8000c80 <processReceivedValue+0x120>
	case 3:
		sprintf(msg, "Maximum frequency: %u\r\n", max_frequency);
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <processReceivedValue+0x140>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <processReceivedValue+0x144>)
 8000bea:	4829      	ldr	r0, [pc, #164]	; (8000c90 <processReceivedValue+0x130>)
 8000bec:	f003 fd0e 	bl	800460c <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000bf0:	4827      	ldr	r0, [pc, #156]	; (8000c90 <processReceivedValue+0x130>)
 8000bf2:	f7ff faf5 	bl	80001e0 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4924      	ldr	r1, [pc, #144]	; (8000c90 <processReceivedValue+0x130>)
 8000bfe:	4825      	ldr	r0, [pc, #148]	; (8000c94 <processReceivedValue+0x134>)
 8000c00:	f002 fe0f 	bl	8003822 <HAL_UART_Transmit_IT>
		break;
 8000c04:	e03c      	b.n	8000c80 <processReceivedValue+0x120>
	case 4:
		sprintf(msg, "Minimum frequency: %u\r\n", min_frequency);
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <processReceivedValue+0x148>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4927      	ldr	r1, [pc, #156]	; (8000cac <processReceivedValue+0x14c>)
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <processReceivedValue+0x130>)
 8000c12:	f003 fcfb 	bl	800460c <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <processReceivedValue+0x130>)
 8000c18:	f7ff fae2 	bl	80001e0 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	491b      	ldr	r1, [pc, #108]	; (8000c90 <processReceivedValue+0x130>)
 8000c24:	481b      	ldr	r0, [pc, #108]	; (8000c94 <processReceivedValue+0x134>)
 8000c26:	f002 fdfc 	bl	8003822 <HAL_UART_Transmit_IT>
		break;
 8000c2a:	e029      	b.n	8000c80 <processReceivedValue+0x120>
	case 5:
		// update the value of TIM2's prescaler,
		// changing the frequency from 50 to 200 Hz
		if (TIM2->PSC > 15799){
 8000c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	f643 52b7 	movw	r2, #15799	; 0x3db7
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d905      	bls.n	8000c46 <processReceivedValue+0xe6>
			TIM2->PSC = 4199;
 8000c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3e:	f241 0267 	movw	r2, #4199	; 0x1067
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
		}
		else TIM2->PSC += 1000;
		break;
 8000c44:	e01c      	b.n	8000c80 <processReceivedValue+0x120>
		else TIM2->PSC += 1000;
 8000c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c50:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c54:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8000c56:	e013      	b.n	8000c80 <processReceivedValue+0x120>
	case 6:
		// increase the value at which the second compare event
		// that drives the generation of the square wave happens,
		// increasing the duty cycle.
		// once it reaches the maximum reset it to the minimum
        compare_value_high += 5;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <processReceivedValue+0x150>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	3305      	adds	r3, #5
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <processReceivedValue+0x150>)
 8000c64:	701a      	strb	r2, [r3, #0]
        if (compare_value_high > MAX_COMPARE_VALUE) {
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <processReceivedValue+0x150>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b5b      	cmp	r3, #91	; 0x5b
 8000c6e:	d906      	bls.n	8000c7e <processReceivedValue+0x11e>
            compare_value_high = compare_value_low + 1;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <processReceivedValue+0x154>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <processReceivedValue+0x150>)
 8000c7c:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000c7e:	bf00      	nop
	}
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000b4 	.word	0x200000b4
 8000c8c:	08004f9c 	.word	0x08004f9c
 8000c90:	200000b8 	.word	0x200000b8
 8000c94:	2000016c 	.word	0x2000016c
 8000c98:	20000123 	.word	0x20000123
 8000c9c:	08004fb4 	.word	0x08004fb4
 8000ca0:	2000009e 	.word	0x2000009e
 8000ca4:	08004fd0 	.word	0x08004fd0
 8000ca8:	2000009f 	.word	0x2000009f
 8000cac:	08004fe8 	.word	0x08004fe8
 8000cb0:	20000001 	.word	0x20000001
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <processCapturedEdge>:

void processCapturedEdge(uint8_t captured_edge){
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	if (captured_edge == RISING && step_1 == SET){
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d11c      	bne.n	8000d02 <processCapturedEdge+0x4a>
 8000cc8:	4b65      	ldr	r3, [pc, #404]	; (8000e60 <processCapturedEdge+0x1a8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d117      	bne.n	8000d02 <processCapturedEdge+0x4a>
		step_1 = RESET;
 8000cd2:	4b63      	ldr	r3, [pc, #396]	; (8000e60 <processCapturedEdge+0x1a8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		///////////////
		cnt_1 = TIM3->CCR1; // count at first rising edge
 8000cd8:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <processCapturedEdge+0x1ac>)
 8000cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <processCapturedEdge+0x1b0>)
 8000ce0:	801a      	strh	r2, [r3, #0]
		number_of_overflows = 0; // reset the number of overflows
 8000ce2:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <processCapturedEdge+0x1b4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
		number_of_overflows_fall = 0;
 8000ce8:	4b61      	ldr	r3, [pc, #388]	; (8000e70 <processCapturedEdge+0x1b8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
		counting_fall_overflows = 1; // start counting overflows of TIM3 between cnt_1 and cnt_fall
 8000cee:	4b61      	ldr	r3, [pc, #388]	; (8000e74 <processCapturedEdge+0x1bc>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
		counting_overflows= 1; // start counting overflows of TIM3 between cnt_1 and cnt_2
 8000cf4:	4b60      	ldr	r3, [pc, #384]	; (8000e78 <processCapturedEdge+0x1c0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
		///////////////
		step_2 = SET;
 8000cfa:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <processCapturedEdge+0x1c4>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	e0a8      	b.n	8000e54 <processCapturedEdge+0x19c>
	}
	else if (captured_edge == FALLING && step_2 == SET){
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d12f      	bne.n	8000d68 <processCapturedEdge+0xb0>
 8000d08:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <processCapturedEdge+0x1c4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d12a      	bne.n	8000d68 <processCapturedEdge+0xb0>
		step_2 = RESET;
 8000d12:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <processCapturedEdge+0x1c4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
		///////////////
		cnt_fall = TIM3->CCR1; // count at falling edge
 8000d18:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <processCapturedEdge+0x1ac>)
 8000d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <processCapturedEdge+0x1c8>)
 8000d20:	801a      	strh	r2, [r3, #0]
		counting_fall_overflows = 0; // stop counting overflows
 8000d22:	4b54      	ldr	r3, [pc, #336]	; (8000e74 <processCapturedEdge+0x1bc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		delta_fall = cnt_fall + number_of_overflows_fall*10000 - cnt_1; // # of timer ticks between cnt_fall and cnt_2
 8000d28:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <processCapturedEdge+0x1b8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	0152      	lsls	r2, r2, #5
 8000d34:	1ad2      	subs	r2, r2, r3
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	0091      	lsls	r1, r2, #2
 8000d3e:	461a      	mov	r2, r3
 8000d40:	460b      	mov	r3, r1
 8000d42:	4413      	add	r3, r2
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <processCapturedEdge+0x1c8>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <processCapturedEdge+0x1b0>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b49      	ldr	r3, [pc, #292]	; (8000e84 <processCapturedEdge+0x1cc>)
 8000d5e:	801a      	strh	r2, [r3, #0]
		///////////////
		step_3 = SET;
 8000d60:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <processCapturedEdge+0x1d0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e075      	b.n	8000e54 <processCapturedEdge+0x19c>
	}
	else if (captured_edge == RISING && step_3 == SET){
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d172      	bne.n	8000e54 <processCapturedEdge+0x19c>
 8000d6e:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <processCapturedEdge+0x1d0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d16d      	bne.n	8000e54 <processCapturedEdge+0x19c>
		step_3 = RESET;
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <processCapturedEdge+0x1d0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		///////////////
		cnt_2 = TIM3->CCR1; // count at second rising edge
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <processCapturedEdge+0x1ac>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <processCapturedEdge+0x1d4>)
 8000d86:	801a      	strh	r2, [r3, #0]
		counting_overflows = 0; // stop counting overflows
 8000d88:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <processCapturedEdge+0x1c0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
		// # of ticks b/w cnt_1 and cnt_2
		delta_cnt = cnt_2 + number_of_overflows*10000 - cnt_1;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <processCapturedEdge+0x1b4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	0152      	lsls	r2, r2, #5
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	0091      	lsls	r1, r2, #2
 8000da4:	461a      	mov	r2, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	4413      	add	r3, r2
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <processCapturedEdge+0x1d4>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <processCapturedEdge+0x1b0>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <processCapturedEdge+0x1d8>)
 8000dc4:	801a      	strh	r2, [r3, #0]
		// 50 is UEF of TIM3, 10000 is the period
		frequency = 50*10000/delta_cnt;
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <processCapturedEdge+0x1d8>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <processCapturedEdge+0x1dc>)
 8000dd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <processCapturedEdge+0x1e0>)
 8000dd8:	801a      	strh	r2, [r3, #0]
		// initialize minimum frequency
		if(min_frequency == 0) min_frequency = frequency;
 8000dda:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <processCapturedEdge+0x1e4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <processCapturedEdge+0x138>
 8000de4:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <processCapturedEdge+0x1e0>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <processCapturedEdge+0x1e4>)
 8000dee:	701a      	strb	r2, [r3, #0]
		// update max frequency
		if (frequency > max_frequency) max_frequency = frequency;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <processCapturedEdge+0x1e8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <processCapturedEdge+0x1e0>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d206      	bcs.n	8000e10 <processCapturedEdge+0x158>
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <processCapturedEdge+0x1e0>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <processCapturedEdge+0x1e8>)
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e00e      	b.n	8000e2e <processCapturedEdge+0x176>
		// update min frequency
		else if (frequency < min_frequency) min_frequency = frequency;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <processCapturedEdge+0x1e4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <processCapturedEdge+0x1e0>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d905      	bls.n	8000e2e <processCapturedEdge+0x176>
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <processCapturedEdge+0x1e0>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <processCapturedEdge+0x1e4>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		dutycycle = 100*delta_fall/delta_cnt;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <processCapturedEdge+0x1cc>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	fb03 f302 	mul.w	r3, r3, r2
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <processCapturedEdge+0x1d8>)
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	b292      	uxth	r2, r2
 8000e42:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <processCapturedEdge+0x1ec>)
 8000e4a:	701a      	strb	r2, [r3, #0]
		///////////////
		step_1 = SET;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <processCapturedEdge+0x1a8>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
	}
}
 8000e52:	e7ff      	b.n	8000e54 <processCapturedEdge+0x19c>
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	200000a4 	.word	0x200000a4
 8000e64:	40000400 	.word	0x40000400
 8000e68:	20000094 	.word	0x20000094
 8000e6c:	20000090 	.word	0x20000090
 8000e70:	20000091 	.word	0x20000091
 8000e74:	200000a0 	.word	0x200000a0
 8000e78:	200000a1 	.word	0x200000a1
 8000e7c:	200000a5 	.word	0x200000a5
 8000e80:	20000098 	.word	0x20000098
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	200000a6 	.word	0x200000a6
 8000e8c:	20000096 	.word	0x20000096
 8000e90:	2000009a 	.word	0x2000009a
 8000e94:	0007a120 	.word	0x0007a120
 8000e98:	200000b4 	.word	0x200000b4
 8000e9c:	2000009f 	.word	0x2000009f
 8000ea0:	2000009e 	.word	0x2000009e
 8000ea4:	20000123 	.word	0x20000123

08000ea8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	have_received_data = SET;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <HAL_UART_RxCpltCallback+0x1c>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200000a2 	.word	0x200000a2

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f12:	2007      	movs	r0, #7
 8000f14:	f000 fabe 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d116      	bne.n	8000f74 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a28      	ldr	r2, [pc, #160]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	201c      	movs	r0, #28
 8000f68:	f000 fa9f 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f6c:	201c      	movs	r0, #28
 8000f6e:	f000 fab8 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f72:	e038      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_TIM_Base_MspInit+0xd0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d133      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fb6:	2340      	movs	r3, #64	; 0x40
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8000fd2:	f000 fb33 	bl	800163c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201d      	movs	r0, #29
 8000fdc:	f000 fa65 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe0:	201d      	movs	r0, #29
 8000fe2:	f000 fa7e 	bl	80014e2 <HAL_NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_UART_MspInit+0x94>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d133      	bne.n	8001086 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_UART_MspInit+0x98>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_UART_MspInit+0x98>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_UART_MspInit+0x98>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0x98>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_UART_MspInit+0x98>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_UART_MspInit+0x98>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001056:	230c      	movs	r3, #12
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001066:	2307      	movs	r3, #7
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_UART_MspInit+0x9c>)
 8001072:	f000 fae3 	bl	800163c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2026      	movs	r0, #38	; 0x26
 800107c:	f000 fa15 	bl	80014aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001080:	2026      	movs	r0, #38	; 0x26
 8001082:	f000 fa2e 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f8e4 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM2_IRQHandler+0x10>)
 80010f6:	f001 fbff 	bl	80028f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000124 	.word	0x20000124

08001104 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM3_IRQHandler+0x10>)
 800110a:	f001 fbf5 	bl	80028f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000d8 	.word	0x200000d8

08001118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART2_IRQHandler+0x10>)
 800111e:	f002 fbf5 	bl	800390c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000016c 	.word	0x2000016c

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f003 fa24 	bl	80045a8 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20018000 	.word	0x20018000
 800118c:	00000400 	.word	0x00000400
 8001190:	200000a8 	.word	0x200000a8
 8001194:	200001c8 	.word	0x200001c8

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f003 f9e3 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff f9cb 	bl	8000588 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001200:	0800515c 	.word	0x0800515c
  ldr r2, =_sbss
 8001204:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001208:	200001c8 	.word	0x200001c8

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f92b 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fe46 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f943 	bl	80014fe <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f90b 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000004 	.word	0x20000004
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	200001b4 	.word	0x200001b4

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200001b4 	.word	0x200001b4

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff29 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff3e 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff31 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa2 	bl	8001450 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff feda 	bl	80012dc <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d008      	beq.n	8001548 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e052      	b.n	80015ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0216 	bic.w	r2, r2, #22
 8001556:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001566:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2b00      	cmp	r3, #0
 800156e:	d103      	bne.n	8001578 <HAL_DMA_Abort+0x62>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0208 	bic.w	r2, r2, #8
 8001586:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001598:	e013      	b.n	80015c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159a:	f7ff fe9f 	bl	80012dc <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d90c      	bls.n	80015c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2220      	movs	r2, #32
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2203      	movs	r2, #3
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e015      	b.n	80015ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1e4      	bne.n	800159a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d004      	beq.n	8001614 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e00c      	b.n	800162e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2205      	movs	r2, #5
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e159      	b.n	800190c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 8148 	bne.w	8001906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d005      	beq.n	800168e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168a:	2b02      	cmp	r3, #2
 800168c:	d130      	bne.n	80016f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d017      	beq.n	800172c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d123      	bne.n	8001780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a2 	beq.w	8001906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b57      	ldr	r3, [pc, #348]	; (8001924 <HAL_GPIO_Init+0x2e8>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_GPIO_Init+0x2e8>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b54      	ldr	r3, [pc, #336]	; (8001924 <HAL_GPIO_Init+0x2e8>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017de:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_GPIO_Init+0x2ec>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_GPIO_Init+0x2f0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d019      	beq.n	800183e <HAL_GPIO_Init+0x202>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x1fe>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_GPIO_Init+0x2f8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x1fa>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a46      	ldr	r2, [pc, #280]	; (8001938 <HAL_GPIO_Init+0x2fc>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x1f6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a45      	ldr	r2, [pc, #276]	; (800193c <HAL_GPIO_Init+0x300>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x1f2>
 800182a:	2304      	movs	r3, #4
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x204>
 800182e:	2307      	movs	r3, #7
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x204>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x204>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x204>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x204>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	; (8001928 <HAL_GPIO_Init+0x2ec>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <HAL_GPIO_Init+0x304>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001882:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <HAL_GPIO_Init+0x304>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_GPIO_Init+0x304>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ac:	4a24      	ldr	r2, [pc, #144]	; (8001940 <HAL_GPIO_Init+0x304>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_GPIO_Init+0x304>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d6:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <HAL_GPIO_Init+0x304>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_GPIO_Init+0x304>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_GPIO_Init+0x304>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f aea2 	bls.w	8001658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	041a      	lsls	r2, r3, #16
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	400b      	ands	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e264      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d075      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fa:	4ba3      	ldr	r3, [pc, #652]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d00c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a06:	4ba0      	ldr	r3, [pc, #640]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d112      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a12:	4b9d      	ldr	r3, [pc, #628]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a1e:	d10b      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	4b99      	ldr	r3, [pc, #612]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d05b      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x108>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d157      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e23f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x74>
 8001a42:	4b91      	ldr	r3, [pc, #580]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a90      	ldr	r2, [pc, #576]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e01d      	b.n	8001a8c <HAL_RCC_OscConfig+0xb0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x98>
 8001a5a:	4b8b      	ldr	r3, [pc, #556]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a8a      	ldr	r2, [pc, #552]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a87      	ldr	r2, [pc, #540]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0xb0>
 8001a74:	4b84      	ldr	r3, [pc, #528]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a83      	ldr	r2, [pc, #524]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b81      	ldr	r3, [pc, #516]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc22 	bl	80012dc <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fc1e 	bl	80012dc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e204      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0xc0>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fc0e 	bl	80012dc <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fc0a 	bl	80012dc <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1f0      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xe8>
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d063      	beq.n	8001bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afe:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	4b5c      	ldr	r3, [pc, #368]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x152>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e1c4      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4952      	ldr	r1, [pc, #328]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_RCC_OscConfig+0x2b0>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff fbc3 	bl	80012dc <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fbbf 	bl	80012dc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1a5      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4940      	ldr	r1, [pc, #256]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_RCC_OscConfig+0x2b0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fba2 	bl	80012dc <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fb9e 	bl	80012dc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e184      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d030      	beq.n	8001c28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d016      	beq.n	8001bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_RCC_OscConfig+0x2b4>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fb82 	bl	80012dc <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fb7e 	bl	80012dc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e164      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x200>
 8001bfa:	e015      	b.n	8001c28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_OscConfig+0x2b4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb6b 	bl	80012dc <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fb67 	bl	80012dc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e14d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a0 	beq.w	8001d76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10f      	bne.n	8001c66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x2b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d121      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_RCC_OscConfig+0x2b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_RCC_OscConfig+0x2b8>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb2d 	bl	80012dc <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e011      	b.n	8001caa <HAL_RCC_OscConfig+0x2ce>
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	42470000 	.word	0x42470000
 8001c90:	42470e80 	.word	0x42470e80
 8001c94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7ff fb20 	bl	80012dc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e106      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4b85      	ldr	r3, [pc, #532]	; (8001ec0 <HAL_RCC_OscConfig+0x4e4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d106      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2f0>
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	4a80      	ldr	r2, [pc, #512]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cca:	e01c      	b.n	8001d06 <HAL_RCC_OscConfig+0x32a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x312>
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a7a      	ldr	r2, [pc, #488]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a77      	ldr	r2, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x32a>
 8001cee:	4b75      	ldr	r3, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a74      	ldr	r2, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfa:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a71      	ldr	r2, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fae5 	bl	80012dc <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff fae1 	bl	80012dc <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0c5      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ee      	beq.n	8001d16 <HAL_RCC_OscConfig+0x33a>
 8001d38:	e014      	b.n	8001d64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff facf 	bl	80012dc <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff facb 	bl	80012dc <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0af      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a55      	ldr	r2, [pc, #340]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 809b 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d05c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d141      	bne.n	8001e18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x4ec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa9f 	bl	80012dc <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fa9b 	bl	80012dc <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e081      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	019b      	lsls	r3, r3, #6
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	061b      	lsls	r3, r3, #24
 8001de4:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dea:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <HAL_RCC_OscConfig+0x4ec>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fa74 	bl	80012dc <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fa70 	bl	80012dc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e056      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x41c>
 8001e16:	e04e      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_RCC_OscConfig+0x4ec>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fa5d 	bl	80012dc <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff fa59 	bl	80012dc <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e03f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x44a>
 8001e44:	e037      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e032      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_RCC_OscConfig+0x4e8>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d028      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d121      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d11a      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e82:	4013      	ands	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d111      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470060 	.word	0x42470060

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0cc      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d90c      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b8      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	494d      	ldr	r1, [pc, #308]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d044      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d119      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e067      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4934      	ldr	r1, [pc, #208]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff f98e 	bl	80012dc <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff f98a 	bl	80012dc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d20c      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002052:	f000 f821 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	490a      	ldr	r1, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f8ee 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00
 8002088:	40023800 	.word	0x40023800
 800208c:	08005000 	.word	0x08005000
 8002090:	20000004 	.word	0x20000004
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	2300      	movs	r3, #0
 80020aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b0:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d00d      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x40>
 80020bc:	2b08      	cmp	r3, #8
 80020be:	f200 80bd 	bhi.w	800223c <HAL_RCC_GetSysClockFreq+0x1a4>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ca:	e0b7      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b61      	ldr	r3, [pc, #388]	; (8002254 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020ce:	60bb      	str	r3, [r7, #8]
       break;
 80020d0:	e0b7      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d2:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80020d4:	60bb      	str	r3, [r7, #8]
      break;
 80020d6:	e0b4      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d8:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e2:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d04d      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	461a      	mov	r2, r3
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	ea02 0800 	and.w	r8, r2, r0
 8002106:	ea03 0901 	and.w	r9, r3, r1
 800210a:	4640      	mov	r0, r8
 800210c:	4649      	mov	r1, r9
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	014b      	lsls	r3, r1, #5
 8002118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800211c:	0142      	lsls	r2, r0, #5
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	ebb0 0008 	subs.w	r0, r0, r8
 8002126:	eb61 0109 	sbc.w	r1, r1, r9
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	018b      	lsls	r3, r1, #6
 8002134:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002138:	0182      	lsls	r2, r0, #6
 800213a:	1a12      	subs	r2, r2, r0
 800213c:	eb63 0301 	sbc.w	r3, r3, r1
 8002140:	f04f 0000 	mov.w	r0, #0
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	00d9      	lsls	r1, r3, #3
 800214a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800214e:	00d0      	lsls	r0, r2, #3
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	eb12 0208 	adds.w	r2, r2, r8
 8002158:	eb43 0309 	adc.w	r3, r3, r9
 800215c:	f04f 0000 	mov.w	r0, #0
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	0259      	lsls	r1, r3, #9
 8002166:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800216a:	0250      	lsls	r0, r2, #9
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	461a      	mov	r2, r3
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	f7fe f888 	bl	8000290 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e04a      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	461a      	mov	r2, r3
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	f240 10ff 	movw	r0, #511	; 0x1ff
 800219a:	f04f 0100 	mov.w	r1, #0
 800219e:	ea02 0400 	and.w	r4, r2, r0
 80021a2:	ea03 0501 	and.w	r5, r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	014b      	lsls	r3, r1, #5
 80021b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021b8:	0142      	lsls	r2, r0, #5
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	1b00      	subs	r0, r0, r4
 80021c0:	eb61 0105 	sbc.w	r1, r1, r5
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	018b      	lsls	r3, r1, #6
 80021ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021d2:	0182      	lsls	r2, r0, #6
 80021d4:	1a12      	subs	r2, r2, r0
 80021d6:	eb63 0301 	sbc.w	r3, r3, r1
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	00d9      	lsls	r1, r3, #3
 80021e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021e8:	00d0      	lsls	r0, r2, #3
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	1912      	adds	r2, r2, r4
 80021f0:	eb45 0303 	adc.w	r3, r5, r3
 80021f4:	f04f 0000 	mov.w	r0, #0
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	0299      	lsls	r1, r3, #10
 80021fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002202:	0290      	lsls	r0, r2, #10
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	461a      	mov	r2, r3
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	f7fe f83c 	bl	8000290 <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4613      	mov	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	3301      	adds	r3, #1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	60bb      	str	r3, [r7, #8]
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800223e:	60bb      	str	r3, [r7, #8]
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	68bb      	ldr	r3, [r7, #8]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	00f42400 	.word	0x00f42400
 8002258:	007a1200 	.word	0x007a1200

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_RCC_GetHCLKFreq+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002278:	f7ff fff0 	bl	800225c <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0a9b      	lsrs	r3, r3, #10
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	08005010 	.word	0x08005010

0800229c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022a0:	f7ff ffdc 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0b5b      	lsrs	r3, r3, #13
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08005010 	.word	0x08005010

080022c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e041      	b.n	800235a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fe1a 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 fdd4 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e041      	b.n	80023f8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f839 	bl	8002400 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f000 fd85 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_TIM_OC_Start_IT+0x28>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e022      	b.n	8002482 <HAL_TIM_OC_Start_IT+0x6e>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d109      	bne.n	8002456 <HAL_TIM_OC_Start_IT+0x42>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	e015      	b.n	8002482 <HAL_TIM_OC_Start_IT+0x6e>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d109      	bne.n	8002470 <HAL_TIM_OC_Start_IT+0x5c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e008      	b.n	8002482 <HAL_TIM_OC_Start_IT+0x6e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e0b3      	b.n	80025f2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <HAL_TIM_OC_Start_IT+0x86>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002498:	e013      	b.n	80024c2 <HAL_TIM_OC_Start_IT+0xae>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d104      	bne.n	80024aa <HAL_TIM_OC_Start_IT+0x96>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a8:	e00b      	b.n	80024c2 <HAL_TIM_OC_Start_IT+0xae>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d104      	bne.n	80024ba <HAL_TIM_OC_Start_IT+0xa6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b8:	e003      	b.n	80024c2 <HAL_TIM_OC_Start_IT+0xae>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d841      	bhi.n	800254c <HAL_TIM_OC_Start_IT+0x138>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <HAL_TIM_OC_Start_IT+0xbc>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	08002505 	.word	0x08002505
 80024d4:	0800254d 	.word	0x0800254d
 80024d8:	0800254d 	.word	0x0800254d
 80024dc:	0800254d 	.word	0x0800254d
 80024e0:	08002517 	.word	0x08002517
 80024e4:	0800254d 	.word	0x0800254d
 80024e8:	0800254d 	.word	0x0800254d
 80024ec:	0800254d 	.word	0x0800254d
 80024f0:	08002529 	.word	0x08002529
 80024f4:	0800254d 	.word	0x0800254d
 80024f8:	0800254d 	.word	0x0800254d
 80024fc:	0800254d 	.word	0x0800254d
 8002500:	0800253b 	.word	0x0800253b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0202 	orr.w	r2, r2, #2
 8002512:	60da      	str	r2, [r3, #12]
      break;
 8002514:	e01d      	b.n	8002552 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0204 	orr.w	r2, r2, #4
 8002524:	60da      	str	r2, [r3, #12]
      break;
 8002526:	e014      	b.n	8002552 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0208 	orr.w	r2, r2, #8
 8002536:	60da      	str	r2, [r3, #12]
      break;
 8002538:	e00b      	b.n	8002552 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0210 	orr.w	r2, r2, #16
 8002548:	60da      	str	r2, [r3, #12]
      break;
 800254a:	e002      	b.n	8002552 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      break;
 8002550:	bf00      	nop
  }

  if (status == HAL_OK)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d14b      	bne.n	80025f0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f001 f869 	bl	8003638 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a24      	ldr	r2, [pc, #144]	; (80025fc <HAL_TIM_OC_Start_IT+0x1e8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d107      	bne.n	8002580 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <HAL_TIM_OC_Start_IT+0x1e8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_TIM_OC_Start_IT+0x1a8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002592:	d013      	beq.n	80025bc <HAL_TIM_OC_Start_IT+0x1a8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_TIM_OC_Start_IT+0x1ec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_TIM_OC_Start_IT+0x1a8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIM_OC_Start_IT+0x1f0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_TIM_OC_Start_IT+0x1a8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_TIM_OC_Start_IT+0x1f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_TIM_OC_Start_IT+0x1a8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_TIM_OC_Start_IT+0x1f8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d111      	bne.n	80025e0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d010      	beq.n	80025f0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025de:	e007      	b.n	80025f0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40010000 	.word	0x40010000
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800
 8002608:	40000c00 	.word	0x40000c00
 800260c:	40014000 	.word	0x40014000

08002610 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f839 	bl	80026ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 fc2e 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_IC_Start_IT+0x1e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e013      	b.n	800270a <HAL_TIM_IC_Start_IT+0x46>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_IC_Start_IT+0x2e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e00b      	b.n	800270a <HAL_TIM_IC_Start_IT+0x46>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d104      	bne.n	8002702 <HAL_TIM_IC_Start_IT+0x3e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e003      	b.n	800270a <HAL_TIM_IC_Start_IT+0x46>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <HAL_TIM_IC_Start_IT+0x58>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e013      	b.n	8002744 <HAL_TIM_IC_Start_IT+0x80>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d104      	bne.n	800272c <HAL_TIM_IC_Start_IT+0x68>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e00b      	b.n	8002744 <HAL_TIM_IC_Start_IT+0x80>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d104      	bne.n	800273c <HAL_TIM_IC_Start_IT+0x78>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e003      	b.n	8002744 <HAL_TIM_IC_Start_IT+0x80>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002742:	b2db      	uxtb	r3, r3
 8002744:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002746:	7bbb      	ldrb	r3, [r7, #14]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d102      	bne.n	8002752 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800274c:	7b7b      	ldrb	r3, [r7, #13]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0c2      	b.n	80028dc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <HAL_TIM_IC_Start_IT+0xa2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	e013      	b.n	800278e <HAL_TIM_IC_Start_IT+0xca>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d104      	bne.n	8002776 <HAL_TIM_IC_Start_IT+0xb2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002774:	e00b      	b.n	800278e <HAL_TIM_IC_Start_IT+0xca>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d104      	bne.n	8002786 <HAL_TIM_IC_Start_IT+0xc2>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	e003      	b.n	800278e <HAL_TIM_IC_Start_IT+0xca>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d104      	bne.n	800279e <HAL_TIM_IC_Start_IT+0xda>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800279c:	e013      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0x102>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_IC_Start_IT+0xea>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027ac:	e00b      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0x102>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d104      	bne.n	80027be <HAL_TIM_IC_Start_IT+0xfa>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027bc:	e003      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0x102>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d841      	bhi.n	8002850 <HAL_TIM_IC_Start_IT+0x18c>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <HAL_TIM_IC_Start_IT+0x110>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	08002809 	.word	0x08002809
 80027d8:	08002851 	.word	0x08002851
 80027dc:	08002851 	.word	0x08002851
 80027e0:	08002851 	.word	0x08002851
 80027e4:	0800281b 	.word	0x0800281b
 80027e8:	08002851 	.word	0x08002851
 80027ec:	08002851 	.word	0x08002851
 80027f0:	08002851 	.word	0x08002851
 80027f4:	0800282d 	.word	0x0800282d
 80027f8:	08002851 	.word	0x08002851
 80027fc:	08002851 	.word	0x08002851
 8002800:	08002851 	.word	0x08002851
 8002804:	0800283f 	.word	0x0800283f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0202 	orr.w	r2, r2, #2
 8002816:	60da      	str	r2, [r3, #12]
      break;
 8002818:	e01d      	b.n	8002856 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0204 	orr.w	r2, r2, #4
 8002828:	60da      	str	r2, [r3, #12]
      break;
 800282a:	e014      	b.n	8002856 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	60da      	str	r2, [r3, #12]
      break;
 800283c:	e00b      	b.n	8002856 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0210 	orr.w	r2, r2, #16
 800284c:	60da      	str	r2, [r3, #12]
      break;
 800284e:	e002      	b.n	8002856 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	bf00      	nop
  }

  if (status == HAL_OK)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d13e      	bne.n	80028da <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fee7 	bl	8003638 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_TIM_IC_Start_IT+0x220>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d018      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d013      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0x1e2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_TIM_IC_Start_IT+0x224>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00e      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_TIM_IC_Start_IT+0x228>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIM_IC_Start_IT+0x22c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0x1e2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_TIM_IC_Start_IT+0x230>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d111      	bne.n	80028ca <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d010      	beq.n	80028da <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c8:	e007      	b.n	80028da <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40014000 	.word	0x40014000

080028f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0202 	mvn.w	r2, #2
 8002924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f892 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe f860 	bl	8000a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fa9c 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b04      	cmp	r3, #4
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0204 	mvn.w	r2, #4
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f868 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f836 	bl	8000a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fa72 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0208 	mvn.w	r2, #8
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2204      	movs	r2, #4
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f83e 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe f80c 	bl	8000a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fa48 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0210 	mvn.w	r2, #16
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2208      	movs	r2, #8
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f814 	bl	8000a64 <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd ffe2 	bl	8000a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa1e 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d107      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0201 	mvn.w	r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe f81c 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fe66 	bl	8003774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9e3 	bl	8002e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0220 	mvn.w	r2, #32
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fe30 	bl	8003760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e048      	b.n	8002bb8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d839      	bhi.n	8002ba8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002ba9 	.word	0x08002ba9
 8002b44:	08002ba9 	.word	0x08002ba9
 8002b48:	08002ba9 	.word	0x08002ba9
 8002b4c:	08002b7f 	.word	0x08002b7f
 8002b50:	08002ba9 	.word	0x08002ba9
 8002b54:	08002ba9 	.word	0x08002ba9
 8002b58:	08002ba9 	.word	0x08002ba9
 8002b5c:	08002b8d 	.word	0x08002b8d
 8002b60:	08002ba9 	.word	0x08002ba9
 8002b64:	08002ba9 	.word	0x08002ba9
 8002b68:	08002ba9 	.word	0x08002ba9
 8002b6c:	08002b9b 	.word	0x08002b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa1a 	bl	8002fb0 <TIM_OC1_SetConfig>
      break;
 8002b7c:	e017      	b.n	8002bae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fa79 	bl	800307c <TIM_OC2_SetConfig>
      break;
 8002b8a:	e010      	b.n	8002bae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fade 	bl	8003154 <TIM_OC3_SetConfig>
      break;
 8002b98:	e009      	b.n	8002bae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fb41 	bl	8003228 <TIM_OC4_SetConfig>
      break;
 8002ba6:	e002      	b.n	8002bae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	75fb      	strb	r3, [r7, #23]
      break;
 8002bac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_IC_ConfigChannel+0x1e>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e088      	b.n	8002cf0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f000 fb64 	bl	80032c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 020c 	bic.w	r2, r2, #12
 8002c0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6999      	ldr	r1, [r3, #24]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	e060      	b.n	8002ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d11c      	bne.n	8002c64 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f000 fbdc 	bl	80033f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6999      	ldr	r1, [r3, #24]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	021a      	lsls	r2, r3, #8
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	619a      	str	r2, [r3, #24]
 8002c62:	e040      	b.n	8002ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11b      	bne.n	8002ca2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f000 fc29 	bl	80034d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 020c 	bic.w	r2, r2, #12
 8002c8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69d9      	ldr	r1, [r3, #28]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	61da      	str	r2, [r3, #28]
 8002ca0:	e021      	b.n	8002ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d11c      	bne.n	8002ce2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f000 fc46 	bl	8003548 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002cca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69d9      	ldr	r1, [r3, #28]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	021a      	lsls	r2, r3, #8
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	e001      	b.n	8002ce6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_ConfigClockSource+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0b4      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x186>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4c:	d03e      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0xd4>
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	f200 8087 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	f000 8086 	beq.w	8002e6a <HAL_TIM_ConfigClockSource+0x172>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d62:	d87f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d01a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xa6>
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d87b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d050      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x11a>
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d877      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d03c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d873      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d058      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x13a>
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d86f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d064      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d86b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d060      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d867      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d05a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	e062      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f000 fc23 	bl	80035f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e04f      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f000 fc0c 	bl	80035f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e03c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 faca 	bl	8003398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2150      	movs	r1, #80	; 0x50
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fbd9 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002e10:	e02c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 fb26 	bl	8003470 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2160      	movs	r1, #96	; 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fbc9 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002e30:	e01c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 faaa 	bl	8003398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fbb9 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 fbb0 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <TIM_Base_SetConfig+0xe4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00f      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ece:	d00b      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <TIM_Base_SetConfig+0xe8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <TIM_Base_SetConfig+0xec>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <TIM_Base_SetConfig+0xf0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <TIM_Base_SetConfig+0xe4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01b      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d017      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <TIM_Base_SetConfig+0xe8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <TIM_Base_SetConfig+0xec>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00f      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a20      	ldr	r2, [pc, #128]	; (8002fa0 <TIM_Base_SetConfig+0xf0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1f      	ldr	r2, [pc, #124]	; (8002fa4 <TIM_Base_SetConfig+0xf4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <TIM_Base_SetConfig+0xf8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <TIM_Base_SetConfig+0xfc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d108      	bne.n	8002f4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <TIM_Base_SetConfig+0xe4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d103      	bne.n	8002f80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	615a      	str	r2, [r3, #20]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800

08002fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0201 	bic.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f023 0302 	bic.w	r3, r3, #2
 8002ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <TIM_OC1_SetConfig+0xc8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10c      	bne.n	8003026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f023 0308 	bic.w	r3, r3, #8
 8003012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 0304 	bic.w	r3, r3, #4
 8003024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <TIM_OC1_SetConfig+0xc8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d111      	bne.n	8003052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800303c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	621a      	str	r2, [r3, #32]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40010000 	.word	0x40010000

0800307c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0210 	bic.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0320 	bic.w	r3, r3, #32
 80030c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <TIM_OC2_SetConfig+0xd4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10d      	bne.n	80030f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a15      	ldr	r2, [pc, #84]	; (8003150 <TIM_OC2_SetConfig+0xd4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d113      	bne.n	8003128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800310e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000

08003154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800319c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <TIM_OC3_SetConfig+0xd0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10d      	bne.n	80031ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <TIM_OC3_SetConfig+0xd0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d113      	bne.n	80031fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	621a      	str	r2, [r3, #32]
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40010000 	.word	0x40010000

08003228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <TIM_OC4_SetConfig+0x9c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d109      	bne.n	800329c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800328e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40010000 	.word	0x40010000

080032c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0201 	bic.w	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a24      	ldr	r2, [pc, #144]	; (8003384 <TIM_TI1_SetConfig+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_TI1_SetConfig+0x56>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fc:	d00f      	beq.n	800331e <TIM_TI1_SetConfig+0x56>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a21      	ldr	r2, [pc, #132]	; (8003388 <TIM_TI1_SetConfig+0xc0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_TI1_SetConfig+0x56>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a20      	ldr	r2, [pc, #128]	; (800338c <TIM_TI1_SetConfig+0xc4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_TI1_SetConfig+0x56>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <TIM_TI1_SetConfig+0xc8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_TI1_SetConfig+0x56>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <TIM_TI1_SetConfig+0xcc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <TIM_TI1_SetConfig+0x5a>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <TIM_TI1_SetConfig+0x5c>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e003      	b.n	8003342 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	b2db      	uxtb	r3, r3
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f023 030a 	bic.w	r3, r3, #10
 800335c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f003 030a 	and.w	r3, r3, #10
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40014000 	.word	0x40014000

08003398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b087      	sub	sp, #28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 0210 	bic.w	r2, r3, #16
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	031b      	lsls	r3, r3, #12
 800343a:	b29b      	uxth	r3, r3
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003448:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 0210 	bic.w	r2, r3, #16
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800349a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	031b      	lsls	r3, r3, #12
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 0303 	bic.w	r3, r3, #3
 80034fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800350c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	b2db      	uxtb	r3, r3
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003520:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	621a      	str	r2, [r3, #32]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003586:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	031b      	lsls	r3, r3, #12
 800358c:	b29b      	uxth	r3, r3
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800359a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	031b      	lsls	r3, r3, #12
 80035a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f043 0307 	orr.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	431a      	orrs	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2201      	movs	r2, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e050      	b.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d013      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a18      	ldr	r2, [pc, #96]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a16      	ldr	r2, [pc, #88]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10c      	bne.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4313      	orrs	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40014000 	.word	0x40014000

08003760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e03f      	b.n	800381a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fc24 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fd1f 	bl	8004210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	4613      	mov	r3, r2
 800382e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	d130      	bne.n	800389e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_UART_Transmit_IT+0x26>
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e029      	b.n	80038a0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_UART_Transmit_IT+0x38>
 8003856:	2302      	movs	r3, #2
 8003858:	e022      	b.n	80038a0 <HAL_UART_Transmit_IT+0x7e>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	88fa      	ldrh	r2, [r7, #6]
 8003872:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2221      	movs	r2, #33	; 0x21
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003898:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e000      	b.n	80038a0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
  }
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d11d      	bne.n	8003902 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_UART_Receive_IT+0x26>
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e016      	b.n	8003904 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_UART_Receive_IT+0x38>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e00f      	b.n	8003904 <HAL_UART_Receive_IT+0x58>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	461a      	mov	r2, r3
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fab5 	bl	8003e68 <UART_Start_Receive_IT>
 80038fe:	4603      	mov	r3, r0
 8003900:	e000      	b.n	8003904 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b0ba      	sub	sp, #232	; 0xe8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800394a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_UART_IRQHandler+0x66>
 800395e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fb95 	bl	800409a <UART_Receive_IT>
      return;
 8003970:	e256      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80de 	beq.w	8003b38 <HAL_UART_IRQHandler+0x22c>
 800397c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80d1 	beq.w	8003b38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0xae>
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_UART_IRQHandler+0xd2>
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0202 	orr.w	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_UART_IRQHandler+0xf6>
 80039ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d011      	beq.n	8003a32 <HAL_UART_IRQHandler+0x126>
 8003a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0208 	orr.w	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 81ed 	beq.w	8003e16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_UART_IRQHandler+0x14e>
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb20 	bl	800409a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <HAL_UART_IRQHandler+0x17a>
 8003a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04f      	beq.n	8003b26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa28 	bl	8003edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d141      	bne.n	8003b1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3314      	adds	r3, #20
 8003ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1d9      	bne.n	8003a9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d013      	beq.n	8003b16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	4a7d      	ldr	r2, [pc, #500]	; (8003ce8 <HAL_UART_IRQHandler+0x3dc>)
 8003af4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fd7b 	bl	80015f6 <HAL_DMA_Abort_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b10:	4610      	mov	r0, r2
 8003b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e00e      	b.n	8003b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f990 	bl	8003e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00a      	b.n	8003b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f98c 	bl	8003e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e006      	b.n	8003b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f988 	bl	8003e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b32:	e170      	b.n	8003e16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	bf00      	nop
    return;
 8003b36:	e16e      	b.n	8003e16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 814a 	bne.w	8003dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8143 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 813c 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	f040 80b4 	bne.w	8003cec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8140 	beq.w	8003e1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	f080 8139 	bcs.w	8003e1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bba:	f000 8088 	beq.w	8003cce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1d9      	bne.n	8003bbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e1      	bne.n	8003c0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3314      	adds	r3, #20
 8003c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e3      	bne.n	8003c46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	f023 0310 	bic.w	r3, r3, #16
 8003ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e3      	bne.n	8003c8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd fc24 	bl	8001516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8b6 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce4:	e099      	b.n	8003e1a <HAL_UART_IRQHandler+0x50e>
 8003ce6:	bf00      	nop
 8003ce8:	08003fa3 	.word	0x08003fa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 808b 	beq.w	8003e1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8086 	beq.w	8003e1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d36:	647a      	str	r2, [r7, #68]	; 0x44
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e3      	bne.n	8003d12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	623b      	str	r3, [r7, #32]
   return(result);
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e3      	bne.n	8003d4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0310 	bic.w	r3, r3, #16
 8003da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003db4:	61fa      	str	r2, [r7, #28]
 8003db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	69b9      	ldr	r1, [r7, #24]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e3      	bne.n	8003d90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f83e 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dd4:	e023      	b.n	8003e1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_UART_IRQHandler+0x4ea>
 8003de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8eb 	bl	8003fca <UART_Transmit_IT>
    return;
 8003df4:	e014      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <HAL_UART_IRQHandler+0x514>
 8003e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f92b 	bl	800406a <UART_EndTransmit_IT>
    return;
 8003e14:	e004      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
    return;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
      return;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_UART_IRQHandler+0x514>
      return;
 8003e1e:	bf00      	nop
  }
}
 8003e20:	37e8      	adds	r7, #232	; 0xe8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop

08003e28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	88fa      	ldrh	r2, [r7, #6]
 8003e80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2222      	movs	r2, #34	; 0x22
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0220 	orr.w	r2, r2, #32
 8003ecc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b095      	sub	sp, #84	; 0x54
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f04:	643a      	str	r2, [r7, #64]	; 0x40
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e5      	bne.n	8003ee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d119      	bne.n	8003f88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 0310 	bic.w	r3, r3, #16
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f74:	61ba      	str	r2, [r7, #24]
 8003f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6979      	ldr	r1, [r7, #20]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e5      	bne.n	8003f54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f96:	bf00      	nop
 8003f98:	3754      	adds	r7, #84	; 0x54
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff ff3d 	bl	8003e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b21      	cmp	r3, #33	; 0x21
 8003fdc:	d13e      	bne.n	800405c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d114      	bne.n	8004012 <UART_Transmit_IT+0x48>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d110      	bne.n	8004012 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004004:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	1c9a      	adds	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	621a      	str	r2, [r3, #32]
 8004010:	e008      	b.n	8004024 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	1c59      	adds	r1, r3, #1
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6211      	str	r1, [r2, #32]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29b      	uxth	r3, r3
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4619      	mov	r1, r3
 8004032:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10f      	bne.n	8004058 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004046:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004056:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004080:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fecc 	bl	8003e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b08c      	sub	sp, #48	; 0x30
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b22      	cmp	r3, #34	; 0x22
 80040ac:	f040 80ab 	bne.w	8004206 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d117      	bne.n	80040ea <UART_Receive_IT+0x50>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d113      	bne.n	80040ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d8:	b29a      	uxth	r2, r3
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	1c9a      	adds	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28
 80040e8:	e026      	b.n	8004138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d007      	beq.n	800410e <UART_Receive_IT+0x74>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <UART_Receive_IT+0x82>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e008      	b.n	800412e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004128:	b2da      	uxtb	r2, r3
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29b      	uxth	r3, r3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4619      	mov	r1, r3
 8004146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004148:	2b00      	cmp	r3, #0
 800414a:	d15a      	bne.n	8004202 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0220 	bic.w	r2, r2, #32
 800415a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800416a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	2b01      	cmp	r3, #1
 800418a:	d135      	bne.n	80041f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	613b      	str	r3, [r7, #16]
   return(result);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f023 0310 	bic.w	r3, r3, #16
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b2:	623a      	str	r2, [r7, #32]
 80041b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	69f9      	ldr	r1, [r7, #28]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d10a      	bne.n	80041ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff fe2d 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
 80041f6:	e002      	b.n	80041fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7fc fe55 	bl	8000ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e002      	b.n	8004208 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004206:	2302      	movs	r3, #2
  }
}
 8004208:	4618      	mov	r0, r3
 800420a:	3730      	adds	r7, #48	; 0x30
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004214:	b09f      	sub	sp, #124	; 0x7c
 8004216:	af00      	add	r7, sp, #0
 8004218:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	68d9      	ldr	r1, [r3, #12]
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	ea40 0301 	orr.w	r3, r0, r1
 8004230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	431a      	orrs	r2, r3
 8004242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4313      	orrs	r3, r2
 8004248:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004254:	f021 010c 	bic.w	r1, r1, #12
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425e:	430b      	orrs	r3, r1
 8004260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800426c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	ea40 0301 	orr.w	r3, r0, r1
 8004278:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4bc5      	ldr	r3, [pc, #788]	; (8004594 <UART_SetConfig+0x384>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d004      	beq.n	800428e <UART_SetConfig+0x7e>
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4bc3      	ldr	r3, [pc, #780]	; (8004598 <UART_SetConfig+0x388>)
 800428a:	429a      	cmp	r2, r3
 800428c:	d103      	bne.n	8004296 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800428e:	f7fe f805 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 8004292:	6778      	str	r0, [r7, #116]	; 0x74
 8004294:	e002      	b.n	800429c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004296:	f7fd ffed 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 800429a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a4:	f040 80b6 	bne.w	8004414 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042aa:	461c      	mov	r4, r3
 80042ac:	f04f 0500 	mov.w	r5, #0
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	1891      	adds	r1, r2, r2
 80042b6:	6439      	str	r1, [r7, #64]	; 0x40
 80042b8:	415b      	adcs	r3, r3
 80042ba:	647b      	str	r3, [r7, #68]	; 0x44
 80042bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042c0:	1912      	adds	r2, r2, r4
 80042c2:	eb45 0303 	adc.w	r3, r5, r3
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	00d9      	lsls	r1, r3, #3
 80042d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d4:	00d0      	lsls	r0, r2, #3
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	1911      	adds	r1, r2, r4
 80042dc:	6639      	str	r1, [r7, #96]	; 0x60
 80042de:	416b      	adcs	r3, r5
 80042e0:	667b      	str	r3, [r7, #100]	; 0x64
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	1891      	adds	r1, r2, r2
 80042ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80042f0:	415b      	adcs	r3, r3
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042fc:	f7fb ffc8 	bl	8000290 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4ba5      	ldr	r3, [pc, #660]	; (800459c <UART_SetConfig+0x38c>)
 8004306:	fba3 2302 	umull	r2, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	011e      	lsls	r6, r3, #4
 800430e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004310:	461c      	mov	r4, r3
 8004312:	f04f 0500 	mov.w	r5, #0
 8004316:	4622      	mov	r2, r4
 8004318:	462b      	mov	r3, r5
 800431a:	1891      	adds	r1, r2, r2
 800431c:	6339      	str	r1, [r7, #48]	; 0x30
 800431e:	415b      	adcs	r3, r3
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004326:	1912      	adds	r2, r2, r4
 8004328:	eb45 0303 	adc.w	r3, r5, r3
 800432c:	f04f 0000 	mov.w	r0, #0
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	00d9      	lsls	r1, r3, #3
 8004336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800433a:	00d0      	lsls	r0, r2, #3
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	1911      	adds	r1, r2, r4
 8004342:	65b9      	str	r1, [r7, #88]	; 0x58
 8004344:	416b      	adcs	r3, r5
 8004346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	461a      	mov	r2, r3
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	1891      	adds	r1, r2, r2
 8004354:	62b9      	str	r1, [r7, #40]	; 0x28
 8004356:	415b      	adcs	r3, r3
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004362:	f7fb ff95 	bl	8000290 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4b8c      	ldr	r3, [pc, #560]	; (800459c <UART_SetConfig+0x38c>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a87      	ldr	r2, [pc, #540]	; (800459c <UART_SetConfig+0x38c>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800438c:	441e      	add	r6, r3
 800438e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004390:	4618      	mov	r0, r3
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	1894      	adds	r4, r2, r2
 800439c:	623c      	str	r4, [r7, #32]
 800439e:	415b      	adcs	r3, r3
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043a6:	1812      	adds	r2, r2, r0
 80043a8:	eb41 0303 	adc.w	r3, r1, r3
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	f04f 0500 	mov.w	r5, #0
 80043b4:	00dd      	lsls	r5, r3, #3
 80043b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043ba:	00d4      	lsls	r4, r2, #3
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	1814      	adds	r4, r2, r0
 80043c2:	653c      	str	r4, [r7, #80]	; 0x50
 80043c4:	414b      	adcs	r3, r1
 80043c6:	657b      	str	r3, [r7, #84]	; 0x54
 80043c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	61b9      	str	r1, [r7, #24]
 80043d6:	415b      	adcs	r3, r3
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80043e2:	f7fb ff55 	bl	8000290 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b6c      	ldr	r3, [pc, #432]	; (800459c <UART_SetConfig+0x38c>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a67      	ldr	r2, [pc, #412]	; (800459c <UART_SetConfig+0x38c>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 0207 	and.w	r2, r3, #7
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4432      	add	r2, r6
 8004410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004412:	e0b9      	b.n	8004588 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004416:	461c      	mov	r4, r3
 8004418:	f04f 0500 	mov.w	r5, #0
 800441c:	4622      	mov	r2, r4
 800441e:	462b      	mov	r3, r5
 8004420:	1891      	adds	r1, r2, r2
 8004422:	6139      	str	r1, [r7, #16]
 8004424:	415b      	adcs	r3, r3
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800442c:	1912      	adds	r2, r2, r4
 800442e:	eb45 0303 	adc.w	r3, r5, r3
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	00d9      	lsls	r1, r3, #3
 800443c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004440:	00d0      	lsls	r0, r2, #3
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	eb12 0804 	adds.w	r8, r2, r4
 800444a:	eb43 0905 	adc.w	r9, r3, r5
 800444e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4618      	mov	r0, r3
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	008b      	lsls	r3, r1, #2
 8004462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004466:	0082      	lsls	r2, r0, #2
 8004468:	4640      	mov	r0, r8
 800446a:	4649      	mov	r1, r9
 800446c:	f7fb ff10 	bl	8000290 <__aeabi_uldivmod>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4b49      	ldr	r3, [pc, #292]	; (800459c <UART_SetConfig+0x38c>)
 8004476:	fba3 2302 	umull	r2, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	011e      	lsls	r6, r3, #4
 800447e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004480:	4618      	mov	r0, r3
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	1894      	adds	r4, r2, r2
 800448c:	60bc      	str	r4, [r7, #8]
 800448e:	415b      	adcs	r3, r3
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004496:	1812      	adds	r2, r2, r0
 8004498:	eb41 0303 	adc.w	r3, r1, r3
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	f04f 0500 	mov.w	r5, #0
 80044a4:	00dd      	lsls	r5, r3, #3
 80044a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044aa:	00d4      	lsls	r4, r2, #3
 80044ac:	4622      	mov	r2, r4
 80044ae:	462b      	mov	r3, r5
 80044b0:	1814      	adds	r4, r2, r0
 80044b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80044b4:	414b      	adcs	r3, r1
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4618      	mov	r0, r3
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044d0:	0082      	lsls	r2, r0, #2
 80044d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044d6:	f7fb fedb 	bl	8000290 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b2f      	ldr	r3, [pc, #188]	; (800459c <UART_SetConfig+0x38c>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a2a      	ldr	r2, [pc, #168]	; (800459c <UART_SetConfig+0x38c>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fe:	441e      	add	r6, r3
 8004500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004502:	4618      	mov	r0, r3
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	1894      	adds	r4, r2, r2
 800450e:	603c      	str	r4, [r7, #0]
 8004510:	415b      	adcs	r3, r3
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004518:	1812      	adds	r2, r2, r0
 800451a:	eb41 0303 	adc.w	r3, r1, r3
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	f04f 0500 	mov.w	r5, #0
 8004526:	00dd      	lsls	r5, r3, #3
 8004528:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800452c:	00d4      	lsls	r4, r2, #3
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	eb12 0a00 	adds.w	sl, r2, r0
 8004536:	eb43 0b01 	adc.w	fp, r3, r1
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	008b      	lsls	r3, r1, #2
 800454e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004552:	0082      	lsls	r2, r0, #2
 8004554:	4650      	mov	r0, sl
 8004556:	4659      	mov	r1, fp
 8004558:	f7fb fe9a 	bl	8000290 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <UART_SetConfig+0x38c>)
 8004562:	fba3 1302 	umull	r1, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	2164      	movs	r1, #100	; 0x64
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	3332      	adds	r3, #50	; 0x32
 8004574:	4a09      	ldr	r2, [pc, #36]	; (800459c <UART_SetConfig+0x38c>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	f003 020f 	and.w	r2, r3, #15
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4432      	add	r2, r6
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	377c      	adds	r7, #124	; 0x7c
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004592:	bf00      	nop
 8004594:	40011000 	.word	0x40011000
 8004598:	40011400 	.word	0x40011400
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <atoi>:
 80045a0:	220a      	movs	r2, #10
 80045a2:	2100      	movs	r1, #0
 80045a4:	f000 b8d6 	b.w	8004754 <strtol>

080045a8 <__errno>:
 80045a8:	4b01      	ldr	r3, [pc, #4]	; (80045b0 <__errno+0x8>)
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000010 	.word	0x20000010

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4d0d      	ldr	r5, [pc, #52]	; (80045ec <__libc_init_array+0x38>)
 80045b8:	4c0d      	ldr	r4, [pc, #52]	; (80045f0 <__libc_init_array+0x3c>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	2600      	movs	r6, #0
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	4d0b      	ldr	r5, [pc, #44]	; (80045f4 <__libc_init_array+0x40>)
 80045c6:	4c0c      	ldr	r4, [pc, #48]	; (80045f8 <__libc_init_array+0x44>)
 80045c8:	f000 fcdc 	bl	8004f84 <_init>
 80045cc:	1b64      	subs	r4, r4, r5
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	2600      	movs	r6, #0
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	08005154 	.word	0x08005154
 80045f0:	08005154 	.word	0x08005154
 80045f4:	08005154 	.word	0x08005154
 80045f8:	08005158 	.word	0x08005158

080045fc <memset>:
 80045fc:	4402      	add	r2, r0
 80045fe:	4603      	mov	r3, r0
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	f803 1b01 	strb.w	r1, [r3], #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <siprintf>:
 800460c:	b40e      	push	{r1, r2, r3}
 800460e:	b500      	push	{lr}
 8004610:	b09c      	sub	sp, #112	; 0x70
 8004612:	ab1d      	add	r3, sp, #116	; 0x74
 8004614:	9002      	str	r0, [sp, #8]
 8004616:	9006      	str	r0, [sp, #24]
 8004618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800461c:	4809      	ldr	r0, [pc, #36]	; (8004644 <siprintf+0x38>)
 800461e:	9107      	str	r1, [sp, #28]
 8004620:	9104      	str	r1, [sp, #16]
 8004622:	4909      	ldr	r1, [pc, #36]	; (8004648 <siprintf+0x3c>)
 8004624:	f853 2b04 	ldr.w	r2, [r3], #4
 8004628:	9105      	str	r1, [sp, #20]
 800462a:	6800      	ldr	r0, [r0, #0]
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	a902      	add	r1, sp, #8
 8004630:	f000 f8f6 	bl	8004820 <_svfiprintf_r>
 8004634:	9b02      	ldr	r3, [sp, #8]
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	b01c      	add	sp, #112	; 0x70
 800463c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004640:	b003      	add	sp, #12
 8004642:	4770      	bx	lr
 8004644:	20000010 	.word	0x20000010
 8004648:	ffff0208 	.word	0xffff0208

0800464c <_strtol_l.isra.0>:
 800464c:	2b01      	cmp	r3, #1
 800464e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004652:	d001      	beq.n	8004658 <_strtol_l.isra.0+0xc>
 8004654:	2b24      	cmp	r3, #36	; 0x24
 8004656:	d906      	bls.n	8004666 <_strtol_l.isra.0+0x1a>
 8004658:	f7ff ffa6 	bl	80045a8 <__errno>
 800465c:	2316      	movs	r3, #22
 800465e:	6003      	str	r3, [r0, #0]
 8004660:	2000      	movs	r0, #0
 8004662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004666:	4f3a      	ldr	r7, [pc, #232]	; (8004750 <_strtol_l.isra.0+0x104>)
 8004668:	468e      	mov	lr, r1
 800466a:	4676      	mov	r6, lr
 800466c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004670:	5de5      	ldrb	r5, [r4, r7]
 8004672:	f015 0508 	ands.w	r5, r5, #8
 8004676:	d1f8      	bne.n	800466a <_strtol_l.isra.0+0x1e>
 8004678:	2c2d      	cmp	r4, #45	; 0x2d
 800467a:	d134      	bne.n	80046e6 <_strtol_l.isra.0+0x9a>
 800467c:	f89e 4000 	ldrb.w	r4, [lr]
 8004680:	f04f 0801 	mov.w	r8, #1
 8004684:	f106 0e02 	add.w	lr, r6, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d05c      	beq.n	8004746 <_strtol_l.isra.0+0xfa>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d10c      	bne.n	80046aa <_strtol_l.isra.0+0x5e>
 8004690:	2c30      	cmp	r4, #48	; 0x30
 8004692:	d10a      	bne.n	80046aa <_strtol_l.isra.0+0x5e>
 8004694:	f89e 4000 	ldrb.w	r4, [lr]
 8004698:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800469c:	2c58      	cmp	r4, #88	; 0x58
 800469e:	d14d      	bne.n	800473c <_strtol_l.isra.0+0xf0>
 80046a0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80046a4:	2310      	movs	r3, #16
 80046a6:	f10e 0e02 	add.w	lr, lr, #2
 80046aa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80046ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80046b2:	2600      	movs	r6, #0
 80046b4:	fbbc f9f3 	udiv	r9, ip, r3
 80046b8:	4635      	mov	r5, r6
 80046ba:	fb03 ca19 	mls	sl, r3, r9, ip
 80046be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80046c2:	2f09      	cmp	r7, #9
 80046c4:	d818      	bhi.n	80046f8 <_strtol_l.isra.0+0xac>
 80046c6:	463c      	mov	r4, r7
 80046c8:	42a3      	cmp	r3, r4
 80046ca:	dd24      	ble.n	8004716 <_strtol_l.isra.0+0xca>
 80046cc:	2e00      	cmp	r6, #0
 80046ce:	db1f      	blt.n	8004710 <_strtol_l.isra.0+0xc4>
 80046d0:	45a9      	cmp	r9, r5
 80046d2:	d31d      	bcc.n	8004710 <_strtol_l.isra.0+0xc4>
 80046d4:	d101      	bne.n	80046da <_strtol_l.isra.0+0x8e>
 80046d6:	45a2      	cmp	sl, r4
 80046d8:	db1a      	blt.n	8004710 <_strtol_l.isra.0+0xc4>
 80046da:	fb05 4503 	mla	r5, r5, r3, r4
 80046de:	2601      	movs	r6, #1
 80046e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80046e4:	e7eb      	b.n	80046be <_strtol_l.isra.0+0x72>
 80046e6:	2c2b      	cmp	r4, #43	; 0x2b
 80046e8:	bf08      	it	eq
 80046ea:	f89e 4000 	ldrbeq.w	r4, [lr]
 80046ee:	46a8      	mov	r8, r5
 80046f0:	bf08      	it	eq
 80046f2:	f106 0e02 	addeq.w	lr, r6, #2
 80046f6:	e7c7      	b.n	8004688 <_strtol_l.isra.0+0x3c>
 80046f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80046fc:	2f19      	cmp	r7, #25
 80046fe:	d801      	bhi.n	8004704 <_strtol_l.isra.0+0xb8>
 8004700:	3c37      	subs	r4, #55	; 0x37
 8004702:	e7e1      	b.n	80046c8 <_strtol_l.isra.0+0x7c>
 8004704:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004708:	2f19      	cmp	r7, #25
 800470a:	d804      	bhi.n	8004716 <_strtol_l.isra.0+0xca>
 800470c:	3c57      	subs	r4, #87	; 0x57
 800470e:	e7db      	b.n	80046c8 <_strtol_l.isra.0+0x7c>
 8004710:	f04f 36ff 	mov.w	r6, #4294967295
 8004714:	e7e4      	b.n	80046e0 <_strtol_l.isra.0+0x94>
 8004716:	2e00      	cmp	r6, #0
 8004718:	da05      	bge.n	8004726 <_strtol_l.isra.0+0xda>
 800471a:	2322      	movs	r3, #34	; 0x22
 800471c:	6003      	str	r3, [r0, #0]
 800471e:	4665      	mov	r5, ip
 8004720:	b942      	cbnz	r2, 8004734 <_strtol_l.isra.0+0xe8>
 8004722:	4628      	mov	r0, r5
 8004724:	e79d      	b.n	8004662 <_strtol_l.isra.0+0x16>
 8004726:	f1b8 0f00 	cmp.w	r8, #0
 800472a:	d000      	beq.n	800472e <_strtol_l.isra.0+0xe2>
 800472c:	426d      	negs	r5, r5
 800472e:	2a00      	cmp	r2, #0
 8004730:	d0f7      	beq.n	8004722 <_strtol_l.isra.0+0xd6>
 8004732:	b10e      	cbz	r6, 8004738 <_strtol_l.isra.0+0xec>
 8004734:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	e7f2      	b.n	8004722 <_strtol_l.isra.0+0xd6>
 800473c:	2430      	movs	r4, #48	; 0x30
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1b3      	bne.n	80046aa <_strtol_l.isra.0+0x5e>
 8004742:	2308      	movs	r3, #8
 8004744:	e7b1      	b.n	80046aa <_strtol_l.isra.0+0x5e>
 8004746:	2c30      	cmp	r4, #48	; 0x30
 8004748:	d0a4      	beq.n	8004694 <_strtol_l.isra.0+0x48>
 800474a:	230a      	movs	r3, #10
 800474c:	e7ad      	b.n	80046aa <_strtol_l.isra.0+0x5e>
 800474e:	bf00      	nop
 8004750:	08005019 	.word	0x08005019

08004754 <strtol>:
 8004754:	4613      	mov	r3, r2
 8004756:	460a      	mov	r2, r1
 8004758:	4601      	mov	r1, r0
 800475a:	4802      	ldr	r0, [pc, #8]	; (8004764 <strtol+0x10>)
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f7ff bf75 	b.w	800464c <_strtol_l.isra.0>
 8004762:	bf00      	nop
 8004764:	20000010 	.word	0x20000010

08004768 <__ssputs_r>:
 8004768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	688e      	ldr	r6, [r1, #8]
 800476e:	429e      	cmp	r6, r3
 8004770:	4682      	mov	sl, r0
 8004772:	460c      	mov	r4, r1
 8004774:	4690      	mov	r8, r2
 8004776:	461f      	mov	r7, r3
 8004778:	d838      	bhi.n	80047ec <__ssputs_r+0x84>
 800477a:	898a      	ldrh	r2, [r1, #12]
 800477c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004780:	d032      	beq.n	80047e8 <__ssputs_r+0x80>
 8004782:	6825      	ldr	r5, [r4, #0]
 8004784:	6909      	ldr	r1, [r1, #16]
 8004786:	eba5 0901 	sub.w	r9, r5, r1
 800478a:	6965      	ldr	r5, [r4, #20]
 800478c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004794:	3301      	adds	r3, #1
 8004796:	444b      	add	r3, r9
 8004798:	106d      	asrs	r5, r5, #1
 800479a:	429d      	cmp	r5, r3
 800479c:	bf38      	it	cc
 800479e:	461d      	movcc	r5, r3
 80047a0:	0553      	lsls	r3, r2, #21
 80047a2:	d531      	bpl.n	8004808 <__ssputs_r+0xa0>
 80047a4:	4629      	mov	r1, r5
 80047a6:	f000 fb47 	bl	8004e38 <_malloc_r>
 80047aa:	4606      	mov	r6, r0
 80047ac:	b950      	cbnz	r0, 80047c4 <__ssputs_r+0x5c>
 80047ae:	230c      	movs	r3, #12
 80047b0:	f8ca 3000 	str.w	r3, [sl]
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c4:	6921      	ldr	r1, [r4, #16]
 80047c6:	464a      	mov	r2, r9
 80047c8:	f000 fabe 	bl	8004d48 <memcpy>
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	6126      	str	r6, [r4, #16]
 80047da:	6165      	str	r5, [r4, #20]
 80047dc:	444e      	add	r6, r9
 80047de:	eba5 0509 	sub.w	r5, r5, r9
 80047e2:	6026      	str	r6, [r4, #0]
 80047e4:	60a5      	str	r5, [r4, #8]
 80047e6:	463e      	mov	r6, r7
 80047e8:	42be      	cmp	r6, r7
 80047ea:	d900      	bls.n	80047ee <__ssputs_r+0x86>
 80047ec:	463e      	mov	r6, r7
 80047ee:	4632      	mov	r2, r6
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	4641      	mov	r1, r8
 80047f4:	f000 fab6 	bl	8004d64 <memmove>
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	1b9b      	subs	r3, r3, r6
 80047fe:	4432      	add	r2, r6
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	6022      	str	r2, [r4, #0]
 8004804:	2000      	movs	r0, #0
 8004806:	e7db      	b.n	80047c0 <__ssputs_r+0x58>
 8004808:	462a      	mov	r2, r5
 800480a:	f000 fb6f 	bl	8004eec <_realloc_r>
 800480e:	4606      	mov	r6, r0
 8004810:	2800      	cmp	r0, #0
 8004812:	d1e1      	bne.n	80047d8 <__ssputs_r+0x70>
 8004814:	6921      	ldr	r1, [r4, #16]
 8004816:	4650      	mov	r0, sl
 8004818:	f000 fabe 	bl	8004d98 <_free_r>
 800481c:	e7c7      	b.n	80047ae <__ssputs_r+0x46>
	...

08004820 <_svfiprintf_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	4698      	mov	r8, r3
 8004826:	898b      	ldrh	r3, [r1, #12]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	b09d      	sub	sp, #116	; 0x74
 800482c:	4607      	mov	r7, r0
 800482e:	460d      	mov	r5, r1
 8004830:	4614      	mov	r4, r2
 8004832:	d50e      	bpl.n	8004852 <_svfiprintf_r+0x32>
 8004834:	690b      	ldr	r3, [r1, #16]
 8004836:	b963      	cbnz	r3, 8004852 <_svfiprintf_r+0x32>
 8004838:	2140      	movs	r1, #64	; 0x40
 800483a:	f000 fafd 	bl	8004e38 <_malloc_r>
 800483e:	6028      	str	r0, [r5, #0]
 8004840:	6128      	str	r0, [r5, #16]
 8004842:	b920      	cbnz	r0, 800484e <_svfiprintf_r+0x2e>
 8004844:	230c      	movs	r3, #12
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	e0d1      	b.n	80049f2 <_svfiprintf_r+0x1d2>
 800484e:	2340      	movs	r3, #64	; 0x40
 8004850:	616b      	str	r3, [r5, #20]
 8004852:	2300      	movs	r3, #0
 8004854:	9309      	str	r3, [sp, #36]	; 0x24
 8004856:	2320      	movs	r3, #32
 8004858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800485c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004860:	2330      	movs	r3, #48	; 0x30
 8004862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a0c <_svfiprintf_r+0x1ec>
 8004866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800486a:	f04f 0901 	mov.w	r9, #1
 800486e:	4623      	mov	r3, r4
 8004870:	469a      	mov	sl, r3
 8004872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004876:	b10a      	cbz	r2, 800487c <_svfiprintf_r+0x5c>
 8004878:	2a25      	cmp	r2, #37	; 0x25
 800487a:	d1f9      	bne.n	8004870 <_svfiprintf_r+0x50>
 800487c:	ebba 0b04 	subs.w	fp, sl, r4
 8004880:	d00b      	beq.n	800489a <_svfiprintf_r+0x7a>
 8004882:	465b      	mov	r3, fp
 8004884:	4622      	mov	r2, r4
 8004886:	4629      	mov	r1, r5
 8004888:	4638      	mov	r0, r7
 800488a:	f7ff ff6d 	bl	8004768 <__ssputs_r>
 800488e:	3001      	adds	r0, #1
 8004890:	f000 80aa 	beq.w	80049e8 <_svfiprintf_r+0x1c8>
 8004894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004896:	445a      	add	r2, fp
 8004898:	9209      	str	r2, [sp, #36]	; 0x24
 800489a:	f89a 3000 	ldrb.w	r3, [sl]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80a2 	beq.w	80049e8 <_svfiprintf_r+0x1c8>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295
 80048aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ae:	f10a 0a01 	add.w	sl, sl, #1
 80048b2:	9304      	str	r3, [sp, #16]
 80048b4:	9307      	str	r3, [sp, #28]
 80048b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048ba:	931a      	str	r3, [sp, #104]	; 0x68
 80048bc:	4654      	mov	r4, sl
 80048be:	2205      	movs	r2, #5
 80048c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c4:	4851      	ldr	r0, [pc, #324]	; (8004a0c <_svfiprintf_r+0x1ec>)
 80048c6:	f7fb fc93 	bl	80001f0 <memchr>
 80048ca:	9a04      	ldr	r2, [sp, #16]
 80048cc:	b9d8      	cbnz	r0, 8004906 <_svfiprintf_r+0xe6>
 80048ce:	06d0      	lsls	r0, r2, #27
 80048d0:	bf44      	itt	mi
 80048d2:	2320      	movmi	r3, #32
 80048d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d8:	0711      	lsls	r1, r2, #28
 80048da:	bf44      	itt	mi
 80048dc:	232b      	movmi	r3, #43	; 0x2b
 80048de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e2:	f89a 3000 	ldrb.w	r3, [sl]
 80048e6:	2b2a      	cmp	r3, #42	; 0x2a
 80048e8:	d015      	beq.n	8004916 <_svfiprintf_r+0xf6>
 80048ea:	9a07      	ldr	r2, [sp, #28]
 80048ec:	4654      	mov	r4, sl
 80048ee:	2000      	movs	r0, #0
 80048f0:	f04f 0c0a 	mov.w	ip, #10
 80048f4:	4621      	mov	r1, r4
 80048f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048fa:	3b30      	subs	r3, #48	; 0x30
 80048fc:	2b09      	cmp	r3, #9
 80048fe:	d94e      	bls.n	800499e <_svfiprintf_r+0x17e>
 8004900:	b1b0      	cbz	r0, 8004930 <_svfiprintf_r+0x110>
 8004902:	9207      	str	r2, [sp, #28]
 8004904:	e014      	b.n	8004930 <_svfiprintf_r+0x110>
 8004906:	eba0 0308 	sub.w	r3, r0, r8
 800490a:	fa09 f303 	lsl.w	r3, r9, r3
 800490e:	4313      	orrs	r3, r2
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	46a2      	mov	sl, r4
 8004914:	e7d2      	b.n	80048bc <_svfiprintf_r+0x9c>
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	1d19      	adds	r1, r3, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	9103      	str	r1, [sp, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfbb      	ittet	lt
 8004922:	425b      	neglt	r3, r3
 8004924:	f042 0202 	orrlt.w	r2, r2, #2
 8004928:	9307      	strge	r3, [sp, #28]
 800492a:	9307      	strlt	r3, [sp, #28]
 800492c:	bfb8      	it	lt
 800492e:	9204      	strlt	r2, [sp, #16]
 8004930:	7823      	ldrb	r3, [r4, #0]
 8004932:	2b2e      	cmp	r3, #46	; 0x2e
 8004934:	d10c      	bne.n	8004950 <_svfiprintf_r+0x130>
 8004936:	7863      	ldrb	r3, [r4, #1]
 8004938:	2b2a      	cmp	r3, #42	; 0x2a
 800493a:	d135      	bne.n	80049a8 <_svfiprintf_r+0x188>
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	1d1a      	adds	r2, r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	9203      	str	r2, [sp, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfb8      	it	lt
 8004948:	f04f 33ff 	movlt.w	r3, #4294967295
 800494c:	3402      	adds	r4, #2
 800494e:	9305      	str	r3, [sp, #20]
 8004950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a1c <_svfiprintf_r+0x1fc>
 8004954:	7821      	ldrb	r1, [r4, #0]
 8004956:	2203      	movs	r2, #3
 8004958:	4650      	mov	r0, sl
 800495a:	f7fb fc49 	bl	80001f0 <memchr>
 800495e:	b140      	cbz	r0, 8004972 <_svfiprintf_r+0x152>
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	eba0 000a 	sub.w	r0, r0, sl
 8004966:	fa03 f000 	lsl.w	r0, r3, r0
 800496a:	9b04      	ldr	r3, [sp, #16]
 800496c:	4303      	orrs	r3, r0
 800496e:	3401      	adds	r4, #1
 8004970:	9304      	str	r3, [sp, #16]
 8004972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004976:	4826      	ldr	r0, [pc, #152]	; (8004a10 <_svfiprintf_r+0x1f0>)
 8004978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800497c:	2206      	movs	r2, #6
 800497e:	f7fb fc37 	bl	80001f0 <memchr>
 8004982:	2800      	cmp	r0, #0
 8004984:	d038      	beq.n	80049f8 <_svfiprintf_r+0x1d8>
 8004986:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <_svfiprintf_r+0x1f4>)
 8004988:	bb1b      	cbnz	r3, 80049d2 <_svfiprintf_r+0x1b2>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	3307      	adds	r3, #7
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	3308      	adds	r3, #8
 8004994:	9303      	str	r3, [sp, #12]
 8004996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004998:	4433      	add	r3, r6
 800499a:	9309      	str	r3, [sp, #36]	; 0x24
 800499c:	e767      	b.n	800486e <_svfiprintf_r+0x4e>
 800499e:	fb0c 3202 	mla	r2, ip, r2, r3
 80049a2:	460c      	mov	r4, r1
 80049a4:	2001      	movs	r0, #1
 80049a6:	e7a5      	b.n	80048f4 <_svfiprintf_r+0xd4>
 80049a8:	2300      	movs	r3, #0
 80049aa:	3401      	adds	r4, #1
 80049ac:	9305      	str	r3, [sp, #20]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f04f 0c0a 	mov.w	ip, #10
 80049b4:	4620      	mov	r0, r4
 80049b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ba:	3a30      	subs	r2, #48	; 0x30
 80049bc:	2a09      	cmp	r2, #9
 80049be:	d903      	bls.n	80049c8 <_svfiprintf_r+0x1a8>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0c5      	beq.n	8004950 <_svfiprintf_r+0x130>
 80049c4:	9105      	str	r1, [sp, #20]
 80049c6:	e7c3      	b.n	8004950 <_svfiprintf_r+0x130>
 80049c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049cc:	4604      	mov	r4, r0
 80049ce:	2301      	movs	r3, #1
 80049d0:	e7f0      	b.n	80049b4 <_svfiprintf_r+0x194>
 80049d2:	ab03      	add	r3, sp, #12
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	462a      	mov	r2, r5
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <_svfiprintf_r+0x1f8>)
 80049da:	a904      	add	r1, sp, #16
 80049dc:	4638      	mov	r0, r7
 80049de:	f3af 8000 	nop.w
 80049e2:	1c42      	adds	r2, r0, #1
 80049e4:	4606      	mov	r6, r0
 80049e6:	d1d6      	bne.n	8004996 <_svfiprintf_r+0x176>
 80049e8:	89ab      	ldrh	r3, [r5, #12]
 80049ea:	065b      	lsls	r3, r3, #25
 80049ec:	f53f af2c 	bmi.w	8004848 <_svfiprintf_r+0x28>
 80049f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049f2:	b01d      	add	sp, #116	; 0x74
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	ab03      	add	r3, sp, #12
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	462a      	mov	r2, r5
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <_svfiprintf_r+0x1f8>)
 8004a00:	a904      	add	r1, sp, #16
 8004a02:	4638      	mov	r0, r7
 8004a04:	f000 f87a 	bl	8004afc <_printf_i>
 8004a08:	e7eb      	b.n	80049e2 <_svfiprintf_r+0x1c2>
 8004a0a:	bf00      	nop
 8004a0c:	08005119 	.word	0x08005119
 8004a10:	08005123 	.word	0x08005123
 8004a14:	00000000 	.word	0x00000000
 8004a18:	08004769 	.word	0x08004769
 8004a1c:	0800511f 	.word	0x0800511f

08004a20 <_printf_common>:
 8004a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	4616      	mov	r6, r2
 8004a26:	4699      	mov	r9, r3
 8004a28:	688a      	ldr	r2, [r1, #8]
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	bfb8      	it	lt
 8004a34:	4613      	movlt	r3, r2
 8004a36:	6033      	str	r3, [r6, #0]
 8004a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b10a      	cbz	r2, 8004a46 <_printf_common+0x26>
 8004a42:	3301      	adds	r3, #1
 8004a44:	6033      	str	r3, [r6, #0]
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	0699      	lsls	r1, r3, #26
 8004a4a:	bf42      	ittt	mi
 8004a4c:	6833      	ldrmi	r3, [r6, #0]
 8004a4e:	3302      	addmi	r3, #2
 8004a50:	6033      	strmi	r3, [r6, #0]
 8004a52:	6825      	ldr	r5, [r4, #0]
 8004a54:	f015 0506 	ands.w	r5, r5, #6
 8004a58:	d106      	bne.n	8004a68 <_printf_common+0x48>
 8004a5a:	f104 0a19 	add.w	sl, r4, #25
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	6832      	ldr	r2, [r6, #0]
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dc26      	bgt.n	8004ab6 <_printf_common+0x96>
 8004a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a6c:	1e13      	subs	r3, r2, #0
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	bf18      	it	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	0692      	lsls	r2, r2, #26
 8004a76:	d42b      	bmi.n	8004ad0 <_printf_common+0xb0>
 8004a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d01e      	beq.n	8004ac4 <_printf_common+0xa4>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	68e5      	ldr	r5, [r4, #12]
 8004a8a:	6832      	ldr	r2, [r6, #0]
 8004a8c:	f003 0306 	and.w	r3, r3, #6
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	bf08      	it	eq
 8004a94:	1aad      	subeq	r5, r5, r2
 8004a96:	68a3      	ldr	r3, [r4, #8]
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	bf0c      	ite	eq
 8004a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa0:	2500      	movne	r5, #0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bfc4      	itt	gt
 8004aa6:	1a9b      	subgt	r3, r3, r2
 8004aa8:	18ed      	addgt	r5, r5, r3
 8004aaa:	2600      	movs	r6, #0
 8004aac:	341a      	adds	r4, #26
 8004aae:	42b5      	cmp	r5, r6
 8004ab0:	d11a      	bne.n	8004ae8 <_printf_common+0xc8>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e008      	b.n	8004ac8 <_printf_common+0xa8>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4652      	mov	r2, sl
 8004aba:	4649      	mov	r1, r9
 8004abc:	4638      	mov	r0, r7
 8004abe:	47c0      	blx	r8
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d103      	bne.n	8004acc <_printf_common+0xac>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004acc:	3501      	adds	r5, #1
 8004ace:	e7c6      	b.n	8004a5e <_printf_common+0x3e>
 8004ad0:	18e1      	adds	r1, r4, r3
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	2030      	movs	r0, #48	; 0x30
 8004ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ada:	4422      	add	r2, r4
 8004adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	e7c7      	b.n	8004a78 <_printf_common+0x58>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4622      	mov	r2, r4
 8004aec:	4649      	mov	r1, r9
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	3001      	adds	r0, #1
 8004af4:	d0e6      	beq.n	8004ac4 <_printf_common+0xa4>
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7d9      	b.n	8004aae <_printf_common+0x8e>
	...

08004afc <_printf_i>:
 8004afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b00:	460c      	mov	r4, r1
 8004b02:	4691      	mov	r9, r2
 8004b04:	7e27      	ldrb	r7, [r4, #24]
 8004b06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b08:	2f78      	cmp	r7, #120	; 0x78
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	469a      	mov	sl, r3
 8004b0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b12:	d807      	bhi.n	8004b24 <_printf_i+0x28>
 8004b14:	2f62      	cmp	r7, #98	; 0x62
 8004b16:	d80a      	bhi.n	8004b2e <_printf_i+0x32>
 8004b18:	2f00      	cmp	r7, #0
 8004b1a:	f000 80d8 	beq.w	8004cce <_printf_i+0x1d2>
 8004b1e:	2f58      	cmp	r7, #88	; 0x58
 8004b20:	f000 80a3 	beq.w	8004c6a <_printf_i+0x16e>
 8004b24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b2c:	e03a      	b.n	8004ba4 <_printf_i+0xa8>
 8004b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b32:	2b15      	cmp	r3, #21
 8004b34:	d8f6      	bhi.n	8004b24 <_printf_i+0x28>
 8004b36:	a001      	add	r0, pc, #4	; (adr r0, 8004b3c <_printf_i+0x40>)
 8004b38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b3c:	08004b95 	.word	0x08004b95
 8004b40:	08004ba9 	.word	0x08004ba9
 8004b44:	08004b25 	.word	0x08004b25
 8004b48:	08004b25 	.word	0x08004b25
 8004b4c:	08004b25 	.word	0x08004b25
 8004b50:	08004b25 	.word	0x08004b25
 8004b54:	08004ba9 	.word	0x08004ba9
 8004b58:	08004b25 	.word	0x08004b25
 8004b5c:	08004b25 	.word	0x08004b25
 8004b60:	08004b25 	.word	0x08004b25
 8004b64:	08004b25 	.word	0x08004b25
 8004b68:	08004cb5 	.word	0x08004cb5
 8004b6c:	08004bd9 	.word	0x08004bd9
 8004b70:	08004c97 	.word	0x08004c97
 8004b74:	08004b25 	.word	0x08004b25
 8004b78:	08004b25 	.word	0x08004b25
 8004b7c:	08004cd7 	.word	0x08004cd7
 8004b80:	08004b25 	.word	0x08004b25
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004b25 	.word	0x08004b25
 8004b8c:	08004b25 	.word	0x08004b25
 8004b90:	08004c9f 	.word	0x08004c9f
 8004b94:	680b      	ldr	r3, [r1, #0]
 8004b96:	1d1a      	adds	r2, r3, #4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	600a      	str	r2, [r1, #0]
 8004b9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0a3      	b.n	8004cf0 <_printf_i+0x1f4>
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	6808      	ldr	r0, [r1, #0]
 8004bac:	062e      	lsls	r6, r5, #24
 8004bae:	f100 0304 	add.w	r3, r0, #4
 8004bb2:	d50a      	bpl.n	8004bca <_printf_i+0xce>
 8004bb4:	6805      	ldr	r5, [r0, #0]
 8004bb6:	600b      	str	r3, [r1, #0]
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	da03      	bge.n	8004bc4 <_printf_i+0xc8>
 8004bbc:	232d      	movs	r3, #45	; 0x2d
 8004bbe:	426d      	negs	r5, r5
 8004bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc4:	485e      	ldr	r0, [pc, #376]	; (8004d40 <_printf_i+0x244>)
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e019      	b.n	8004bfe <_printf_i+0x102>
 8004bca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bce:	6805      	ldr	r5, [r0, #0]
 8004bd0:	600b      	str	r3, [r1, #0]
 8004bd2:	bf18      	it	ne
 8004bd4:	b22d      	sxthne	r5, r5
 8004bd6:	e7ef      	b.n	8004bb8 <_printf_i+0xbc>
 8004bd8:	680b      	ldr	r3, [r1, #0]
 8004bda:	6825      	ldr	r5, [r4, #0]
 8004bdc:	1d18      	adds	r0, r3, #4
 8004bde:	6008      	str	r0, [r1, #0]
 8004be0:	0628      	lsls	r0, r5, #24
 8004be2:	d501      	bpl.n	8004be8 <_printf_i+0xec>
 8004be4:	681d      	ldr	r5, [r3, #0]
 8004be6:	e002      	b.n	8004bee <_printf_i+0xf2>
 8004be8:	0669      	lsls	r1, r5, #25
 8004bea:	d5fb      	bpl.n	8004be4 <_printf_i+0xe8>
 8004bec:	881d      	ldrh	r5, [r3, #0]
 8004bee:	4854      	ldr	r0, [pc, #336]	; (8004d40 <_printf_i+0x244>)
 8004bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2308      	moveq	r3, #8
 8004bf6:	230a      	movne	r3, #10
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bfe:	6866      	ldr	r6, [r4, #4]
 8004c00:	60a6      	str	r6, [r4, #8]
 8004c02:	2e00      	cmp	r6, #0
 8004c04:	bfa2      	ittt	ge
 8004c06:	6821      	ldrge	r1, [r4, #0]
 8004c08:	f021 0104 	bicge.w	r1, r1, #4
 8004c0c:	6021      	strge	r1, [r4, #0]
 8004c0e:	b90d      	cbnz	r5, 8004c14 <_printf_i+0x118>
 8004c10:	2e00      	cmp	r6, #0
 8004c12:	d04d      	beq.n	8004cb0 <_printf_i+0x1b4>
 8004c14:	4616      	mov	r6, r2
 8004c16:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c1a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c1e:	5dc7      	ldrb	r7, [r0, r7]
 8004c20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c24:	462f      	mov	r7, r5
 8004c26:	42bb      	cmp	r3, r7
 8004c28:	460d      	mov	r5, r1
 8004c2a:	d9f4      	bls.n	8004c16 <_printf_i+0x11a>
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d10b      	bne.n	8004c48 <_printf_i+0x14c>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	07df      	lsls	r7, r3, #31
 8004c34:	d508      	bpl.n	8004c48 <_printf_i+0x14c>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	6861      	ldr	r1, [r4, #4]
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	bfde      	ittt	le
 8004c3e:	2330      	movle	r3, #48	; 0x30
 8004c40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c48:	1b92      	subs	r2, r2, r6
 8004c4a:	6122      	str	r2, [r4, #16]
 8004c4c:	f8cd a000 	str.w	sl, [sp]
 8004c50:	464b      	mov	r3, r9
 8004c52:	aa03      	add	r2, sp, #12
 8004c54:	4621      	mov	r1, r4
 8004c56:	4640      	mov	r0, r8
 8004c58:	f7ff fee2 	bl	8004a20 <_printf_common>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d14c      	bne.n	8004cfa <_printf_i+0x1fe>
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	b004      	add	sp, #16
 8004c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6a:	4835      	ldr	r0, [pc, #212]	; (8004d40 <_printf_i+0x244>)
 8004c6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	680e      	ldr	r6, [r1, #0]
 8004c74:	061f      	lsls	r7, r3, #24
 8004c76:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c7a:	600e      	str	r6, [r1, #0]
 8004c7c:	d514      	bpl.n	8004ca8 <_printf_i+0x1ac>
 8004c7e:	07d9      	lsls	r1, r3, #31
 8004c80:	bf44      	itt	mi
 8004c82:	f043 0320 	orrmi.w	r3, r3, #32
 8004c86:	6023      	strmi	r3, [r4, #0]
 8004c88:	b91d      	cbnz	r5, 8004c92 <_printf_i+0x196>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	f023 0320 	bic.w	r3, r3, #32
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	2310      	movs	r3, #16
 8004c94:	e7b0      	b.n	8004bf8 <_printf_i+0xfc>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	f043 0320 	orr.w	r3, r3, #32
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	2378      	movs	r3, #120	; 0x78
 8004ca0:	4828      	ldr	r0, [pc, #160]	; (8004d44 <_printf_i+0x248>)
 8004ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ca6:	e7e3      	b.n	8004c70 <_printf_i+0x174>
 8004ca8:	065e      	lsls	r6, r3, #25
 8004caa:	bf48      	it	mi
 8004cac:	b2ad      	uxthmi	r5, r5
 8004cae:	e7e6      	b.n	8004c7e <_printf_i+0x182>
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	e7bb      	b.n	8004c2c <_printf_i+0x130>
 8004cb4:	680b      	ldr	r3, [r1, #0]
 8004cb6:	6826      	ldr	r6, [r4, #0]
 8004cb8:	6960      	ldr	r0, [r4, #20]
 8004cba:	1d1d      	adds	r5, r3, #4
 8004cbc:	600d      	str	r5, [r1, #0]
 8004cbe:	0635      	lsls	r5, r6, #24
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	d501      	bpl.n	8004cc8 <_printf_i+0x1cc>
 8004cc4:	6018      	str	r0, [r3, #0]
 8004cc6:	e002      	b.n	8004cce <_printf_i+0x1d2>
 8004cc8:	0671      	lsls	r1, r6, #25
 8004cca:	d5fb      	bpl.n	8004cc4 <_printf_i+0x1c8>
 8004ccc:	8018      	strh	r0, [r3, #0]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6123      	str	r3, [r4, #16]
 8004cd2:	4616      	mov	r6, r2
 8004cd4:	e7ba      	b.n	8004c4c <_printf_i+0x150>
 8004cd6:	680b      	ldr	r3, [r1, #0]
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	600a      	str	r2, [r1, #0]
 8004cdc:	681e      	ldr	r6, [r3, #0]
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7fb fa84 	bl	80001f0 <memchr>
 8004ce8:	b108      	cbz	r0, 8004cee <_printf_i+0x1f2>
 8004cea:	1b80      	subs	r0, r0, r6
 8004cec:	6060      	str	r0, [r4, #4]
 8004cee:	6863      	ldr	r3, [r4, #4]
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf8:	e7a8      	b.n	8004c4c <_printf_i+0x150>
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	4649      	mov	r1, r9
 8004d00:	4640      	mov	r0, r8
 8004d02:	47d0      	blx	sl
 8004d04:	3001      	adds	r0, #1
 8004d06:	d0ab      	beq.n	8004c60 <_printf_i+0x164>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	079b      	lsls	r3, r3, #30
 8004d0c:	d413      	bmi.n	8004d36 <_printf_i+0x23a>
 8004d0e:	68e0      	ldr	r0, [r4, #12]
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	4298      	cmp	r0, r3
 8004d14:	bfb8      	it	lt
 8004d16:	4618      	movlt	r0, r3
 8004d18:	e7a4      	b.n	8004c64 <_printf_i+0x168>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4640      	mov	r0, r8
 8004d22:	47d0      	blx	sl
 8004d24:	3001      	adds	r0, #1
 8004d26:	d09b      	beq.n	8004c60 <_printf_i+0x164>
 8004d28:	3501      	adds	r5, #1
 8004d2a:	68e3      	ldr	r3, [r4, #12]
 8004d2c:	9903      	ldr	r1, [sp, #12]
 8004d2e:	1a5b      	subs	r3, r3, r1
 8004d30:	42ab      	cmp	r3, r5
 8004d32:	dcf2      	bgt.n	8004d1a <_printf_i+0x21e>
 8004d34:	e7eb      	b.n	8004d0e <_printf_i+0x212>
 8004d36:	2500      	movs	r5, #0
 8004d38:	f104 0619 	add.w	r6, r4, #25
 8004d3c:	e7f5      	b.n	8004d2a <_printf_i+0x22e>
 8004d3e:	bf00      	nop
 8004d40:	0800512a 	.word	0x0800512a
 8004d44:	0800513b 	.word	0x0800513b

08004d48 <memcpy>:
 8004d48:	440a      	add	r2, r1
 8004d4a:	4291      	cmp	r1, r2
 8004d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d50:	d100      	bne.n	8004d54 <memcpy+0xc>
 8004d52:	4770      	bx	lr
 8004d54:	b510      	push	{r4, lr}
 8004d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5e:	4291      	cmp	r1, r2
 8004d60:	d1f9      	bne.n	8004d56 <memcpy+0xe>
 8004d62:	bd10      	pop	{r4, pc}

08004d64 <memmove>:
 8004d64:	4288      	cmp	r0, r1
 8004d66:	b510      	push	{r4, lr}
 8004d68:	eb01 0402 	add.w	r4, r1, r2
 8004d6c:	d902      	bls.n	8004d74 <memmove+0x10>
 8004d6e:	4284      	cmp	r4, r0
 8004d70:	4623      	mov	r3, r4
 8004d72:	d807      	bhi.n	8004d84 <memmove+0x20>
 8004d74:	1e43      	subs	r3, r0, #1
 8004d76:	42a1      	cmp	r1, r4
 8004d78:	d008      	beq.n	8004d8c <memmove+0x28>
 8004d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d82:	e7f8      	b.n	8004d76 <memmove+0x12>
 8004d84:	4402      	add	r2, r0
 8004d86:	4601      	mov	r1, r0
 8004d88:	428a      	cmp	r2, r1
 8004d8a:	d100      	bne.n	8004d8e <memmove+0x2a>
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d96:	e7f7      	b.n	8004d88 <memmove+0x24>

08004d98 <_free_r>:
 8004d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	d048      	beq.n	8004e30 <_free_r+0x98>
 8004d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da2:	9001      	str	r0, [sp, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f1a1 0404 	sub.w	r4, r1, #4
 8004daa:	bfb8      	it	lt
 8004dac:	18e4      	addlt	r4, r4, r3
 8004dae:	f000 f8d3 	bl	8004f58 <__malloc_lock>
 8004db2:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <_free_r+0x9c>)
 8004db4:	9801      	ldr	r0, [sp, #4]
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	4615      	mov	r5, r2
 8004dba:	b933      	cbnz	r3, 8004dca <_free_r+0x32>
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	6014      	str	r4, [r2, #0]
 8004dc0:	b003      	add	sp, #12
 8004dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc6:	f000 b8cd 	b.w	8004f64 <__malloc_unlock>
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	d90b      	bls.n	8004de6 <_free_r+0x4e>
 8004dce:	6821      	ldr	r1, [r4, #0]
 8004dd0:	1862      	adds	r2, r4, r1
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bf04      	itt	eq
 8004dd6:	681a      	ldreq	r2, [r3, #0]
 8004dd8:	685b      	ldreq	r3, [r3, #4]
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	bf04      	itt	eq
 8004dde:	1852      	addeq	r2, r2, r1
 8004de0:	6022      	streq	r2, [r4, #0]
 8004de2:	602c      	str	r4, [r5, #0]
 8004de4:	e7ec      	b.n	8004dc0 <_free_r+0x28>
 8004de6:	461a      	mov	r2, r3
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	b10b      	cbz	r3, 8004df0 <_free_r+0x58>
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	d9fa      	bls.n	8004de6 <_free_r+0x4e>
 8004df0:	6811      	ldr	r1, [r2, #0]
 8004df2:	1855      	adds	r5, r2, r1
 8004df4:	42a5      	cmp	r5, r4
 8004df6:	d10b      	bne.n	8004e10 <_free_r+0x78>
 8004df8:	6824      	ldr	r4, [r4, #0]
 8004dfa:	4421      	add	r1, r4
 8004dfc:	1854      	adds	r4, r2, r1
 8004dfe:	42a3      	cmp	r3, r4
 8004e00:	6011      	str	r1, [r2, #0]
 8004e02:	d1dd      	bne.n	8004dc0 <_free_r+0x28>
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	6053      	str	r3, [r2, #4]
 8004e0a:	4421      	add	r1, r4
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	e7d7      	b.n	8004dc0 <_free_r+0x28>
 8004e10:	d902      	bls.n	8004e18 <_free_r+0x80>
 8004e12:	230c      	movs	r3, #12
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	e7d3      	b.n	8004dc0 <_free_r+0x28>
 8004e18:	6825      	ldr	r5, [r4, #0]
 8004e1a:	1961      	adds	r1, r4, r5
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	bf04      	itt	eq
 8004e20:	6819      	ldreq	r1, [r3, #0]
 8004e22:	685b      	ldreq	r3, [r3, #4]
 8004e24:	6063      	str	r3, [r4, #4]
 8004e26:	bf04      	itt	eq
 8004e28:	1949      	addeq	r1, r1, r5
 8004e2a:	6021      	streq	r1, [r4, #0]
 8004e2c:	6054      	str	r4, [r2, #4]
 8004e2e:	e7c7      	b.n	8004dc0 <_free_r+0x28>
 8004e30:	b003      	add	sp, #12
 8004e32:	bd30      	pop	{r4, r5, pc}
 8004e34:	200000ac 	.word	0x200000ac

08004e38 <_malloc_r>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	1ccd      	adds	r5, r1, #3
 8004e3c:	f025 0503 	bic.w	r5, r5, #3
 8004e40:	3508      	adds	r5, #8
 8004e42:	2d0c      	cmp	r5, #12
 8004e44:	bf38      	it	cc
 8004e46:	250c      	movcc	r5, #12
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	db01      	blt.n	8004e52 <_malloc_r+0x1a>
 8004e4e:	42a9      	cmp	r1, r5
 8004e50:	d903      	bls.n	8004e5a <_malloc_r+0x22>
 8004e52:	230c      	movs	r3, #12
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e5a:	f000 f87d 	bl	8004f58 <__malloc_lock>
 8004e5e:	4921      	ldr	r1, [pc, #132]	; (8004ee4 <_malloc_r+0xac>)
 8004e60:	680a      	ldr	r2, [r1, #0]
 8004e62:	4614      	mov	r4, r2
 8004e64:	b99c      	cbnz	r4, 8004e8e <_malloc_r+0x56>
 8004e66:	4f20      	ldr	r7, [pc, #128]	; (8004ee8 <_malloc_r+0xb0>)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b923      	cbnz	r3, 8004e76 <_malloc_r+0x3e>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f862 	bl	8004f38 <_sbrk_r>
 8004e74:	6038      	str	r0, [r7, #0]
 8004e76:	4629      	mov	r1, r5
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 f85d 	bl	8004f38 <_sbrk_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d123      	bne.n	8004eca <_malloc_r+0x92>
 8004e82:	230c      	movs	r3, #12
 8004e84:	6033      	str	r3, [r6, #0]
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 f86c 	bl	8004f64 <__malloc_unlock>
 8004e8c:	e7e3      	b.n	8004e56 <_malloc_r+0x1e>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	1b5b      	subs	r3, r3, r5
 8004e92:	d417      	bmi.n	8004ec4 <_malloc_r+0x8c>
 8004e94:	2b0b      	cmp	r3, #11
 8004e96:	d903      	bls.n	8004ea0 <_malloc_r+0x68>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	441c      	add	r4, r3
 8004e9c:	6025      	str	r5, [r4, #0]
 8004e9e:	e004      	b.n	8004eaa <_malloc_r+0x72>
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	42a2      	cmp	r2, r4
 8004ea4:	bf0c      	ite	eq
 8004ea6:	600b      	streq	r3, [r1, #0]
 8004ea8:	6053      	strne	r3, [r2, #4]
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f000 f85a 	bl	8004f64 <__malloc_unlock>
 8004eb0:	f104 000b 	add.w	r0, r4, #11
 8004eb4:	1d23      	adds	r3, r4, #4
 8004eb6:	f020 0007 	bic.w	r0, r0, #7
 8004eba:	1ac2      	subs	r2, r0, r3
 8004ebc:	d0cc      	beq.n	8004e58 <_malloc_r+0x20>
 8004ebe:	1a1b      	subs	r3, r3, r0
 8004ec0:	50a3      	str	r3, [r4, r2]
 8004ec2:	e7c9      	b.n	8004e58 <_malloc_r+0x20>
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	6864      	ldr	r4, [r4, #4]
 8004ec8:	e7cc      	b.n	8004e64 <_malloc_r+0x2c>
 8004eca:	1cc4      	adds	r4, r0, #3
 8004ecc:	f024 0403 	bic.w	r4, r4, #3
 8004ed0:	42a0      	cmp	r0, r4
 8004ed2:	d0e3      	beq.n	8004e9c <_malloc_r+0x64>
 8004ed4:	1a21      	subs	r1, r4, r0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f82e 	bl	8004f38 <_sbrk_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d1dd      	bne.n	8004e9c <_malloc_r+0x64>
 8004ee0:	e7cf      	b.n	8004e82 <_malloc_r+0x4a>
 8004ee2:	bf00      	nop
 8004ee4:	200000ac 	.word	0x200000ac
 8004ee8:	200000b0 	.word	0x200000b0

08004eec <_realloc_r>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	4607      	mov	r7, r0
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	460e      	mov	r6, r1
 8004ef4:	b921      	cbnz	r1, 8004f00 <_realloc_r+0x14>
 8004ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004efa:	4611      	mov	r1, r2
 8004efc:	f7ff bf9c 	b.w	8004e38 <_malloc_r>
 8004f00:	b922      	cbnz	r2, 8004f0c <_realloc_r+0x20>
 8004f02:	f7ff ff49 	bl	8004d98 <_free_r>
 8004f06:	4625      	mov	r5, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0c:	f000 f830 	bl	8004f70 <_malloc_usable_size_r>
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d20f      	bcs.n	8004f34 <_realloc_r+0x48>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4638      	mov	r0, r7
 8004f18:	f7ff ff8e 	bl	8004e38 <_malloc_r>
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0f2      	beq.n	8004f08 <_realloc_r+0x1c>
 8004f22:	4631      	mov	r1, r6
 8004f24:	4622      	mov	r2, r4
 8004f26:	f7ff ff0f 	bl	8004d48 <memcpy>
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f7ff ff33 	bl	8004d98 <_free_r>
 8004f32:	e7e9      	b.n	8004f08 <_realloc_r+0x1c>
 8004f34:	4635      	mov	r5, r6
 8004f36:	e7e7      	b.n	8004f08 <_realloc_r+0x1c>

08004f38 <_sbrk_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d06      	ldr	r5, [pc, #24]	; (8004f54 <_sbrk_r+0x1c>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fc f8f2 	bl	800112c <_sbrk>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_sbrk_r+0x1a>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_sbrk_r+0x1a>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	200001b8 	.word	0x200001b8

08004f58 <__malloc_lock>:
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <__malloc_lock+0x8>)
 8004f5a:	f000 b811 	b.w	8004f80 <__retarget_lock_acquire_recursive>
 8004f5e:	bf00      	nop
 8004f60:	200001c0 	.word	0x200001c0

08004f64 <__malloc_unlock>:
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <__malloc_unlock+0x8>)
 8004f66:	f000 b80c 	b.w	8004f82 <__retarget_lock_release_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	200001c0 	.word	0x200001c0

08004f70 <_malloc_usable_size_r>:
 8004f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f74:	1f18      	subs	r0, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfbc      	itt	lt
 8004f7a:	580b      	ldrlt	r3, [r1, r0]
 8004f7c:	18c0      	addlt	r0, r0, r3
 8004f7e:	4770      	bx	lr

08004f80 <__retarget_lock_acquire_recursive>:
 8004f80:	4770      	bx	lr

08004f82 <__retarget_lock_release_recursive>:
 8004f82:	4770      	bx	lr

08004f84 <_init>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr

08004f90 <_fini>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr
